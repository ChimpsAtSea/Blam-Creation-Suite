extra_include_dirs = [ 
  ".",
  "//",
  "//framework",
  "//thirdparty",
  "//tags",
  "//debugfiletools",
  "//contentframework",
  "//runtime",
  "//tooling" ]

template("bcs_library")
{
  if(!defined(invoker.include_dirs)) {
    invoker.include_dirs = extra_include_dirs
  } else {
    invoker.include_dirs += extra_include_dirs
  }

  if(!defined(invoker.defines)) {
    invoker.defines = tag_configuration_defines
  } else {
    invoker.defines += tag_configuration_defines
  }
  
  target(bcs_library_type, target_name)
  {
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

template("bcs_static_library")
{
  if(!defined(invoker.include_dirs)) {
    invoker.include_dirs = extra_include_dirs
  } else {
    invoker.include_dirs += extra_include_dirs
  }

  if(!defined(invoker.defines)) {
    invoker.defines = tag_configuration_defines
  } else {
    invoker.defines += tag_configuration_defines
  }
  
  static_library(target_name)
  {
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

template("bcs_shared_library")
{
  if(!defined(invoker.include_dirs)) {
    invoker.include_dirs = extra_include_dirs
  } else {
    invoker.include_dirs += extra_include_dirs
  }

  if(!defined(invoker.defines)) {
    invoker.defines = tag_configuration_defines
  } else {
    invoker.defines += tag_configuration_defines
  }
  
  shared_library(target_name)
  {
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

template("bcs_executable")
{
  if(!defined(invoker.include_dirs)) {
    invoker.include_dirs = extra_include_dirs
  } else {
    invoker.include_dirs += extra_include_dirs
  }

  if(!defined(invoker.defines)) {
    invoker.defines = tag_configuration_defines
  } else {
    invoker.defines += tag_configuration_defines
  }
  
  executable(target_name)
  {
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

template("bcs_source_set")
{
  if(!defined(invoker.include_dirs)) {
    invoker.include_dirs = extra_include_dirs
  } else {
    invoker.include_dirs += extra_include_dirs
  }
  
  source_set(target_name)
  {
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

template("bcs_python")
{
  if(!defined(invoker.include_dirs)) {
    invoker.include_dirs = extra_include_dirs
  } else {
    invoker.include_dirs += extra_include_dirs
  }
  
  source_set(target_name)
  {
    metadata = {}
    forward_variables_from(invoker, "*")
    metadata.custom_target_type = [ "python_library" ]
  }
}

template("bcs_resources") {
  action(target_name) {
    forward_variables_from(invoker, [ "data_deps", "deps", "public_deps", "visibility", "metadata", "sources", "inputs", "outputs", "args" ])
    if (!defined(inputs)) { inputs = [] }
    if (!defined(args)) { args = [] }
    if (!defined(outputs)) { outputs = [] }

    script = "//toolchain/python/action_build_resources.py"

    # The script imports this Python file so we want to rebuild if it changes.
    inputs += [ ]
    
    # BCS Environment
    args += [
      "--bcs_root_dir", rebase_path(bcs_root_dir),
      "--bcs_third_party_dir", rebase_path(bcs_third_party_dir),
      "--bcs_7z_dir", rebase_path(bcs_7z_dir),
      "--bcs_ewdk_dir", rebase_path(bcs_ewdk_dir),
      "--bcs_download_cache_dir", rebase_path(bcs_download_cache_dir),
      "--target_os", target_os,
      "--target_config", target_config,
      "--target_link_config", target_link_config,
      "--target_cpu", target_cpu,
      "--target_src_dir", rebase_path("."),
      "--target_gen_dir", rebase_path(target_gen_dir),
      "--target_out_dir", rebase_path(target_out_dir),
      "--root_out_dir", rebase_path(root_out_dir),
      "--root_gen_dir", rebase_path(root_gen_dir),
      "--root_build_dir", rebase_path(root_build_dir) ]

    # Note that we have to manually pass the sources to our script if the
    # script needs them as inputs.
    args += [ "--outputs" ] +  rebase_path(outputs)
    args += [ "--inputs" ] + rebase_path(sources)
    args += [ "--sources" ] + sources
  }
}

template("bcs_hlsl") {
  action(target_name) {
    forward_variables_from(invoker, [ "data_deps", "deps", "public_deps", "visibility", "metadata", "sources", "inputs", "outputs", "args" ])
    if (!defined(inputs)) { inputs = [] }
    if (!defined(args)) { args = [] }
    if (!defined(outputs)) { outputs = [] }

    script = "//toolchain/python/action_build_hlsl.py"

    # The script imports this Python file so we want to rebuild if it changes.
    inputs += [ ]
    
    # BCS Environment
    args += [
      "--bcs_root_dir", rebase_path(bcs_root_dir),
      "--bcs_third_party_dir", rebase_path(bcs_third_party_dir),
      "--bcs_7z_dir", rebase_path(bcs_7z_dir),
      "--bcs_ewdk_dir", rebase_path(bcs_ewdk_dir),
      "--bcs_download_cache_dir", rebase_path(bcs_download_cache_dir),
      "--target_os", target_os,
      "--target_config", target_config,
      "--target_link_config", target_link_config,
      "--target_cpu", target_cpu,
      "--target_src_dir", rebase_path("."),
      "--target_gen_dir", rebase_path(target_gen_dir),
      "--target_out_dir", rebase_path(target_out_dir),
      "--root_out_dir", rebase_path(root_out_dir),
      "--root_gen_dir", rebase_path(root_gen_dir),
      "--root_build_dir", rebase_path(root_build_dir) ]

    # Note that we have to manually pass the sources to our script if the
    # script needs them as inputs.
    args += [ "--outputs" ] +  rebase_path(outputs)
    args += [ "--inputs" ] + rebase_path(sources)
    args += [ "--sources" ] + sources
  }
}
