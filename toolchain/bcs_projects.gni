extra_include_dirs = [ 
  ".",
  "//framework",
  "//thirdparty",
  "//tags",
  "//debugfiletools",
  "//contentframework",
  "//runtime",
  "//tooling" ]

template("bcs_library")
{
  if(!defined(invoker.include_dirs)) {
    invoker.include_dirs = extra_include_dirs
  } else {
    invoker.include_dirs += extra_include_dirs
  }
  
  target(bcs_library_type, target_name)
  {
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

template("bcs_static_library")
{
  if(!defined(invoker.include_dirs)) {
    invoker.include_dirs = extra_include_dirs
  } else {
    invoker.include_dirs += extra_include_dirs
  }
  
  static_library(target_name)
  {
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

template("bcs_shared_library")
{
  if(!defined(invoker.include_dirs)) {
    invoker.include_dirs = extra_include_dirs
  } else {
    invoker.include_dirs += extra_include_dirs
  }
  
  shared_library(target_name)
  {
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

template("bcs_executable")
{
  if(!defined(invoker.include_dirs)) {
    invoker.include_dirs = extra_include_dirs
  } else {
    invoker.include_dirs += extra_include_dirs
  }
  
  executable(target_name)
  {
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

template("bcs_source_set")
{
  if(!defined(invoker.include_dirs)) {
    invoker.include_dirs = extra_include_dirs
  } else {
    invoker.include_dirs += extra_include_dirs
  }
  
  source_set(target_name)
  {
    metadata = {}
    forward_variables_from(invoker, "*")
  }
}

template("bcs_python")
{
  if(!defined(invoker.include_dirs)) {
    invoker.include_dirs = extra_include_dirs
  } else {
    invoker.include_dirs += extra_include_dirs
  }
  
  source_set(target_name)
  {
    metadata = {}
    forward_variables_from(invoker, "*")
    metadata.custom_target_type = [ "python_library" ]
  }
}

template("bcs_hlsl") {
  action(target_name) {
    forward_variables_from(invoker, [ "data_deps", "deps", "public_deps", "visibility", "metadata", "sources", "inputs", "outputs", "args" ])
    if (!defined(inputs)) { inputs = [] }
    if (!defined(args)) { args = [] }
    if (!defined(outputs)) { outputs = [] }

    script = "//toolchain/compile_hlsl.py"

    # The script imports this Python file so we want to rebuild if it changes.
    inputs += [ ]
    
    # Note that we have to manually pass the sources to our script if the
    # script needs them as inputs.
    args += [ "--target_gen_dir", rebase_path(target_gen_dir), "--root_gen_dir", rebase_path(root_gen_dir), "--root_build_dir", rebase_path(root_build_dir) ] + [ "--outputs" ] +  rebase_path(outputs) + [ "--inputs" ] + rebase_path(sources) + [ "--sources" ] + sources
  }
}
