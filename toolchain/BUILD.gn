llvm_bin = rebase_path(bcs_third_party + "/llvm/bin")
clang = string_join("/", [llvm_bin, "clang"])
ar = string_join("/", [llvm_bin, "llvm-ar"])
ld = string_join("/", [llvm_bin, "lld"])
not_needed([ 
  "ld", 
  "ar" ])

busybox = ""
if(is_host_windows)
{
  busybox = rebase_path(bcs_third_party + "/busybox64.exe")
}

object_extension = ""
static_library_extension = ""
shared_library_extension = ""
executable_extension = ""

if(is_windows)
{
  object_extension = ".obj"
  static_library_extension = ".lib"
  shared_library_extension = ".dll"
  executable_extension = ".exe"
  
  lib_switch = "/defaultlib:"
  lib_dir_switch = "/libpath:"
  ld = string_join("/", [llvm_bin, "lld-link"])
} 
else if(is_webassembly)
{
  object_extension = ".o"
  static_library_extension = ".a"
  shared_library_extension = ""
  executable_extension = ".wasm"
  
  ld = string_join("/", [llvm_bin, "wasm-ld"])
} 
else if(is_linux)
{
  object_extension = ".o"
  static_library_extension = ".a"
  shared_library_extension = ".so"
  executable_extension = ""
  
  ld = string_join("/", [llvm_bin, "ld.lld"])
  
  if(current_cpu == "x64")
  {
    linux_musl_triple = "x86_64-linux-musl"
  }
  if(current_cpu == "x86")
  {
    linux_musl_triple = "i686-linux-musl"
  }
  if(current_cpu == "arm")
  {
    linux_musl_triple = "arm-linux-musleabi"
  }
  if(current_cpu == "arm64")
  {
    linux_musl_triple = "aarch64-linux-musl"
  }
}

windows_default_libs = [ "libcmt.lib" ]
linux_default_libs = [ "libc", "libstdc++", "libm" ]
not_needed([ 
  "windows_default_libs", 
  "linux_default_libs", 
  "shared_library_extension" ])

config("compiler_defaults") {
  cflags = [ "--no-standard-libraries", "--no-standard-includes" ]
  cflags_c = [ "-std=c17" ]
  cflags_cc = [ "-std=c++20" ]
  defines = [ ]
  ldflags = [ ]

  clang_os_target = "unknown"
  if (is_windows) {
    ldflags += [ ]
    # Grab the ms-compatibility-version from the File Version of cl.exe from EWDK 
    cflags += [ "-g", "-fms-compatibility", "-fms-compatibility-version=19.31.31107" ]
    defines += [ "UNICODE" ]
    if(current_config == "debug")
    {
      cflags += [ ]
    }
    if(current_config == "test")
    {
      cflags += [ ]
    }
    if(current_config == "release")
    {
      cflags += [ ]
    }

    clang_os_target = "windows-msvc"

    cflags += [
      "-isystem", rebase_path(bcs_third_party + "/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Windows Kits/10/Include/10.0.22621.0/shared"),
      "-isystem", rebase_path(bcs_third_party + "/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Windows Kits/10/Include/10.0.22621.0/ucrt"),
      "-isystem", rebase_path(bcs_third_party + "/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Windows Kits/10/Include/10.0.22621.0/um"),
      "-isystem", rebase_path(bcs_third_party + "/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Microsoft Visual Studio/2022/BuildTools/VC/Tools/MSVC/14.31.31103/include"),
    ]
  }
  if (is_webassembly) {
    ldflags += [ ]
    cflags += [ "-fno-ms-compatibility", "-fms-compatibility-version=0" ]
    ldflags += [ "--no-entry" ]
    if(current_config == "debug")
    {
      cflags += [ ]
    }
    if(current_config == "test")
    {
      cflags += [ ]
    }
    if(current_config == "release")
    {
      cflags += [ ]
    }

    # $TODO: assumption
    clang_os_target = ""
  }
  if (is_linux) {
    ldflags += [ ]
    cflags += [ "-fPIC", "-pthread", "-fno-ms-compatibility", "-fms-compatibility-version=0" ]
    ldflags += [ ]
    if(current_config == "debug")
    {
      cflags += [ ]
    }
    if(current_config == "test")
    {
      cflags += [ ]
    }
    if(current_config == "release")
    {
      cflags += [ ]
    }

    clang_os_target = "linux-musl"

    cflags += [
      "--sysroot", rebase_path(bcs_third_party + "/linux-musl/$linux_musl_triple-native"),
      "-isystem", rebase_path(bcs_third_party + "/linux-musl/$linux_musl_triple-native/include/c++/11.2.1/$linux_musl_triple"),
      "-isystem", rebase_path(bcs_third_party + "/linux-musl/$linux_musl_triple-native/include/c++/11.2.1"),
      "-isystem", rebase_path(bcs_third_party + "/linux-musl/$linux_musl_triple-native/include"),
      "-isystem", rebase_path(bcs_third_party + "/llvm/lib/clang/15.0.6/include"),
    ]
    ldflags += [ "-static", "--sysroot", rebase_path(bcs_third_party + "/linux-musl/$linux_musl_triple-native") ]
  }
  
  target_tuple_flags = [ ]
  if(current_cpu == "arm")
  {
    target_tuple_flags += [ "-target", "arm-$clang_os_target" ]
  }
  if(current_cpu == "arm64")
  {
    target_tuple_flags += [ "-target", "aarch64-$clang_os_target" ]
  }
  if(current_cpu == "x86")
  {
    target_tuple_flags += [ "-target", "i686-$clang_os_target" ]
  }
  if(current_cpu == "x64")
  {
    target_tuple_flags += [ "-target", "x86_64-$clang_os_target" ]
  }
  if(current_cpu == "wasm32")
  {
    target_tuple_flags += [ "-target", "wasm32" ]
  }
  if(current_cpu == "wasm64")
  {
    target_tuple_flags += [ "-target", "wasm64" ]
    ldflags += [ "-mwasm64" ]
  }
  cflags += target_tuple_flags
  
  if(bcs_library_type == "shared_library")
  {
    defines += [ "DBCS_USE_SHARED_LIBRARIES" ]
  }
}

config("binary_library_ldconfig") {
  ldflags = [ ]
  libs = [ ]
  lib_dirs = [ ]
  if (is_windows) {
    libs += windows_default_libs
    lib_dirs += [ rebase_path(bcs_third_party + "/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Microsoft Visual Studio/2022/BuildTools/VC/Tools/MSVC/14.31.31103/lib/$current_cpu") ]
    lib_dirs += [ rebase_path(bcs_third_party + "/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Windows Kits/10/Lib/10.0.22621.0/um/$current_cpu") ]
    lib_dirs += [ rebase_path(bcs_third_party + "/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Windows Kits/10/Lib/10.0.22621.0/ucrt/$current_cpu") ]
  }
  if (is_linux) {
    libs += linux_default_libs
    lib_dirs += [ rebase_path(bcs_third_party + "/$linux_musl_triple/lib") ]
  }
}

config("executable_ldconfig") {
  defines = [ "BCS_EXECUTABLE", "BCS_SHARED_LIBRARY" ]
  ldflags = [ ]
  libs = [ ]
  lib_dirs = [ ]
}

config("static_library_ldconfig") {
  defines = [ "BCS_STATIC_LIBRARY" ]
  ldflags = [ ]
  libs = [ ]
  lib_dirs = [ ]
}

config("shared_library_ldconfig") {
  defines = [ "BCS_SHARED_LIBRARY" ]
  ldflags = [ ]
  libs = [ ]
  lib_dirs = [ ]
  if(is_windows)
  {
    ldflags += [ "/dll" ]
  }
  else if(is_webassembly)
  {
  
  }
  else if(is_linux)
  {
  
  }
}

toolchain("clang") 
{
  alink_ldflags = [ ]
  solink_ldflags = [ ]
  link_ldflags = [ ]
  if (is_windows) 
  {
    alink_ldflags += [ "/out:{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
    solink_ldflags += [ "/out:{{output_dir}}/{{target_output_name}}{{output_extension}}", "/debug", "/pdb:{{output_dir}}/{{target_output_name}}.pdb" ]
    link_ldflags += [ "/out:{{output_dir}}/{{target_output_name}}{{output_extension}}", "/debug", "/pdb:{{output_dir}}/{{target_output_name}}.pdb" ]
  }
  else
  {
    alink_ldflags += [ "-o", "{{output}}" ]
    solink_ldflags += [ "-o", "{{output}}" ]
    link_ldflags += [ "-o", "{{output}}" ]
  }

  tool("cc") {
    depfile = "{{output}}.d"
    command = clang + " -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
    description = "(CC {{output}}) $command"
    outputs = [ "{{target_out_dir}}/{{target_output_name}}.{{source_name_part}}$object_extension" ]
    depsformat = "gcc"

    if(is_windows) {
      command += " -fdebug-compilation-dir={{target_out_dir}}/"
    }
  }

  tool("cxx") {
    depfile = "{{output}}.d"
    command = clang + " -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
    description = "(CXX {{output}}) $command"
    outputs = [ "{{target_out_dir}}/{{target_output_name}}.{{source_name_part}}$object_extension" ]
    depsformat = "gcc"

    if(is_windows) {
      command += " -fdebug-compilation-dir={{target_out_dir}}/"
    }
  }

  tool("alink") {
    outputs = [ 
      "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    ]
    default_output_extension = "$static_library_extension"
    default_output_dir = "{{root_out_dir}}/lib/"

    if(is_windows) {
      command = ld + " /lib /out:{{output}} {{inputs}} " + string_join(" ", alink_ldflags)
    } else {
      command = ar + " rcs {{output}} {{inputs}}"
    }
    description = "(STATIC {{output}}) $command"
  }

  tool("solink") {
    outputs = [  ]
    if(is_windows) 
    {
      outputs += [ "{{output_dir}}/{{target_output_name}}$static_library_extension" ]
    }
    outputs += [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_extension = "$shared_library_extension"
    default_output_dir = "{{root_out_dir}}/bin/"

    command = ld + " {{ldflags}} {{libs}} {{solibs}} {{rlibs}} {{inputs}} " + string_join(" ", solink_ldflags)
    description = "(SHARED {{output}}) $command"
  }

  tool("link") {
    outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_extension = "$executable_extension"
    default_output_dir = "{{root_out_dir}}/bin/"

    extra_objects = []
    if(is_linux) {
      extra_objects += [ rebase_path(bcs_third_party + "/$linux_musl_triple/lib/crt1.o") ]
    }
    if(is_windows || is_webassembly || is_linux) {
      command = ld + " {{ldflags}} {{libs}} {{solibs}} {{rlibs}} {{inputs}} " + string_join(" ", extra_objects) + " " + string_join(" ", link_ldflags)
    } else {
      fail("Error: solink unsupported")
    }
    description = "(LINK {{output}}) $command"
  }

  # Use busybox for these. Fuck windows, unix coreutils ftw
  coreutils = ""
  if(is_host_windows)
  {
    coreutils = busybox + " "
  }
  
  tool("stamp") {
    command = coreutils + "touch {{output}}"
    description = "STAMP {{output}}"
  }

  tool("copy") {
    command = coreutils + "cp -af {{source}} {{output}}"
    description = "COPY {{source}} {{output}}"
  }
}
