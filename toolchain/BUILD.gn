llvm_bin = rebase_path(bcs_third_party_dir + "/llvm/bin")
clang = string_join("/", [llvm_bin, "clang"])
ar = string_join("/", [llvm_bin, "llvm-ar"])
ld = string_join("/", [llvm_bin, "lld"])
not_needed([ 
  "ld", 
  "ar" ])

busybox = ""
if(is_host_windows)
{
  busybox = rebase_path(bcs_third_party_dir + "/busybox/busybox64.exe")
}

object_extension = ""
static_library_extension = ""
shared_library_extension = ""
executable_extension = ""

if(is_target_windows)
{
  object_extension = ".obj"
  static_library_extension = ".lib"
  shared_library_extension = ".dll"
  executable_extension = ".exe"
  
  lib_switch = "/defaultlib:"
  lib_dir_switch = "/libpath:"
  ld = string_join("/", [llvm_bin, "lld-link"])
} 
else if(is_target_webassembly)
{
  object_extension = ".o"
  static_library_extension = ".a"
  shared_library_extension = ""
  executable_extension = ".wasm"
  
  ld = string_join("/", [llvm_bin, "wasm-ld"])
} 
else if(is_target_linux)
{
  object_extension = ".o"
  static_library_extension = ".a"
  shared_library_extension = ".so"
  executable_extension = ""
  
  ld = string_join("/", [llvm_bin, "ld.lld"])
}

not_needed([ 
  "shared_library_extension" ])
  
target_tuple_cpu = ""
target_tuple_os = ""

config("compiler_defaults") {
  cflags = [ "--no-standard-libraries", "--no-standard-includes", "-fdiagnostics-absolute-paths" ]
  cflags += [ "-Wno-inline-new-delete" ] ##TODO: Fix inline new/delete functions by moving memory functions into static library (dllexport not supported)
  cflags_c = [ "-std=c17" ]
  cflags_cc = [ "-std=c++20" ]
  defines = [ "__clang__" ]
  ldflags = [ ]
  include_dirs = [ ]
  system_include_dirs = [ ]

  if(target_config == "debug")
  {
    defines += [ "BCS_CONFIG=0", "_DEBUG" ]
  }
  if(target_config == "test")
  {
    defines += [ "BCS_CONFIG=1" ]
  }
  if(target_config == "release")
  {
    defines += [ "BCS_CONFIG=2", "NDEBUG" ]
  }
  
  if(current_cpu == "arm")
  {
    target_tuple_cpu = "arm"
    target_tuple_os = "eabi"
    defines += [ "BCS_CPU_ARM" ]
  }
  if(current_cpu == "arm64")
  {
    target_tuple_cpu = "aarch64"
    defines += [ "BCS_CPU_ARM64" ]
  }
  if(current_cpu == "x86")
  {
    target_tuple_cpu = "i686"
    defines += [ "BCS_CPU_X86" ]
  }
  if(current_cpu == "x64")
  {
    target_tuple_cpu = "x86_64"
    defines += [ "BCS_CPU_X64" ]
  }
  if(current_cpu == "wasm32")
  {
    target_tuple_cpu = "wasm32"
    defines += [ "BCS_CPU_WASM32" ]
  }
  if(current_cpu == "wasm64")
  {
    target_tuple_cpu = "wasm64"
    defines += [ "BCS_CPU_WASM64" ]
    ldflags += [ "-mwasm64" ]
  }
  
  if (is_target_windows) {
    target_tuple_os = "windows-msvc"
    ldflags += [ ]
    # Grab the ms-compatibility-version from the File Version of cl.exe from the EWDK 
    cflags += [
      "-g",
      "-fms-compatibility",
      "-fms-compatibility-version=19.31.31107"
    ]
    system_include_dirs += [
      rebase_path(bcs_third_party_dir + "/llvm/lib/clang/15.0.6/include"),
      rebase_path(bcs_third_party_dir + "/EWDK/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Windows Kits/10/Include/10.0.22621.0/shared"),
      rebase_path(bcs_third_party_dir + "/EWDK/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Windows Kits/10/Include/10.0.22621.0/ucrt"),
      rebase_path(bcs_third_party_dir + "/EWDK/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Windows Kits/10/Include/10.0.22621.0/um"),
      rebase_path(bcs_third_party_dir + "/EWDK/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Windows Kits/10/Include/10.0.22621.0/winrt"),
      rebase_path(bcs_third_party_dir + "/EWDK/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Microsoft Visual Studio/2022/BuildTools/VC/Tools/MSVC/14.31.31103/include"),
      rebase_path(bcs_third_party_dir + "/EWDK/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Microsoft Visual Studio/2022/BuildTools/VC/Tools/MSVC/14.31.31103/atlmfc/include"),
      rebase_path(bcs_third_party_dir + "/EWDK/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Microsoft Visual Studio/2022/BuildTools/VC/Auxiliary/VS/UnitTest/include"),
    ]
    defines += [ "BCS_TARGET_WIN", "UNICODE", "WIN32", "_MSC_VER=1931" ]
    if(target_config == "debug")
    {
      cflags += [ ]
    }
    if(target_config == "test")
    {
      cflags += [ ]
    }
    if(target_config == "release")
    {
      cflags += [ ]
    }

    if(current_cpu == "arm")
    {
      defines += [ "_ARM_", "_M_ARM=7" ]
    }
    if(current_cpu == "arm64")
    {
      defines += [ "_ARM64_", "_M_ARM64=1" ]
    }
    if(current_cpu == "x86")
    {
      defines += [ "_X86_", "_M_IX86=600" ]
    }
    if(current_cpu == "x64")
    {
      defines += [ "_AMD64_", "_M_AMD64=100", "__x86_64__", "_M_X64=100" ]
    }
  }
  if (is_target_webassembly) {
    # $TODO: assumption
    target_tuple_os = "wasm-wasi"
    cflags += [
      "-fno-ms-compatibility",
      "-fms-compatibility-version=0",
      "-frtti",
      #"--no-standard-libraries",
      "-fexceptions",
      "-fwasm-exceptions",
      #"-mllvm",
      #"-wasm-enable-sjlj",
      "--sysroot=" + bcs_third_party_dir + "/wasi-sysroot-17.0/wasi-sysroot"
    ]
    system_include_dirs += [
      rebase_path(bcs_third_party_dir + "/wasi-sysroot-17.0/wasi-sysroot/include"),
      rebase_path(bcs_third_party_dir + "/llvm/lib/clang/15.0.6/include"),
    ]
    defines += [ "BCS_TARGET_WASM" ]
    ldflags += [
      "--no-entry", 
      "-export-dynamic",
      #"--export-all",
      #"-mllvm",
      #"-wasm-enable-sjlj"
      ]
    if(target_config == "debug")
    {
      cflags += [ ]
    }
    if(target_config == "test")
    {
      cflags += [ ]
    }
    if(target_config == "release")
    {
      cflags += [ ]
    }
  }
  if (is_target_linux) {
    target_tuple_os = "linux-musl$target_tuple_os"
    cflags += [
      "-fPIC",
      "-pthread",
      "-fno-ms-compatibility",
      "-fms-compatibility-version=0",
      "--sysroot", rebase_path(bcs_third_party_dir + "/linux-musl/$target_tuple_cpu-$target_tuple_os-native"),
    ]
    system_include_dirs += [
      rebase_path(bcs_third_party_dir + "/linux-musl/$target_tuple_cpu-$target_tuple_os-native/include/c++/11.2.1/$target_tuple_cpu-$target_tuple_os"),
      rebase_path(bcs_third_party_dir + "/linux-musl/$target_tuple_cpu-$target_tuple_os-native/include/c++/11.2.1"),
      rebase_path(bcs_third_party_dir + "/linux-musl/$target_tuple_cpu-$target_tuple_os-native/include"),
      rebase_path(bcs_third_party_dir + "/llvm/lib/clang/15.0.6/include"),
    ]
    defines += [ "BCS_TARGET_LINUX", "BCS_TARGET_POSIX" ]
    ldflags += [
      "-static",
      "--sysroot", rebase_path(bcs_third_party_dir + "/linux-musl/$target_tuple_cpu-$target_tuple_os-native")
    ]
    if(target_config == "debug")
    {
      cflags += [ ]
    }
    if(target_config == "test")
    {
      cflags += [ ]
    }
    if(target_config == "release")
    {
      cflags += [ ]
    }
  }
  
  cflags += [ "-target", "$target_tuple_cpu-$target_tuple_os" ]
  
  if(bcs_library_type == "shared_library")
  {
    defines += [ "BCS_USE_SHARED_LIBRARIES" ]
  }

  foreach(system_include, system_include_dirs) {
    cflags += ["-isystem", system_include]
  }

  include_dirs += system_include_dirs
}

config("binary_library_ldconfig") {
  ldflags = [ ]
  libs = [ ]
  lib_dirs = [ ]
  if (is_target_windows)
  {
    if(target_config == "debug")
    {
      libs += [ "libcmtd.lib" ]
    }
    if(target_config == "test")
    {
      libs += [ "libcmt.lib" ]
    }
    if(target_config == "release")
    {
      libs += [ "libcmt.lib" ]
    }
    lib_dirs += [ rebase_path(bcs_third_party_dir + "/EWDK/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Microsoft Visual Studio/2022/BuildTools/VC/Tools/MSVC/14.31.31103/lib/$current_cpu") ]
    lib_dirs += [ rebase_path(bcs_third_party_dir + "/EWDK/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Microsoft Visual Studio/2022/BuildTools/VC/Tools/MSVC/14.31.31103/atlmfc/lib/$current_cpu") ]
    lib_dirs += [ rebase_path(bcs_third_party_dir + "/EWDK/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Windows Kits/10/Lib/10.0.22621.0/um/$current_cpu") ]
    lib_dirs += [ rebase_path(bcs_third_party_dir + "/EWDK/EWDK_ni_release_svc_prod1_22621_220804-1759/Program Files/Windows Kits/10/Lib/10.0.22621.0/ucrt/$current_cpu") ]
  }
  if (is_target_webassembly)
  {
    libs += [ "c", "c++", "c++abi", "unwind", "c-printscan-long-double" ]
    lib_dirs += [ rebase_path(bcs_third_party_dir + "/wasi-sysroot-17.0/wasi-sysroot/lib/wasm32-wasi") ]
    lib_dirs += [ rebase_path(bcs_third_party_dir + "/wasi-sysroot-17.0/wasi-sysroot/lib") ]
    lib_dirs += [ bcs_third_party_dir + "/wasi-sysroot-17.0/wasi-sysroot/lib/wasm32-wasi" ]
    ldflags += [ "--verbose" ]
  }
  if (is_target_linux)
  {
    libs += [ "libc", "libstdc++", "libm" ]
    lib_dirs += [ rebase_path(bcs_third_party_dir + "/linux-musl/$target_tuple_cpu-$target_tuple_os-native/lib") ]
  }
}

config("executable_ldconfig") {
  defines = [ "BCS_EXECUTABLE", "BCS_SHARED_LIBRARY" ]
  ldflags = [ ]
  libs = [ ]
  lib_dirs = [ ]
}

config("static_library_ldconfig") {
  defines = [ "BCS_STATIC_LIBRARY" ]
  ldflags = [ ]
  libs = [ ]
  lib_dirs = [ ]
}

config("shared_library_ldconfig") {
  defines = [ "BCS_SHARED_LIBRARY" ]
  ldflags = [ ]
  libs = [ ]
  lib_dirs = [ ]
  if(is_target_windows)
  {
    ldflags += [ "/dll" ]
  }
  else if(is_target_webassembly)
  {
  
  }
  else if(is_target_linux)
  {
  
  }
}

toolchain("clang") 
{
  alink_ldflags = [ ]
  solink_ldflags = [ ]
  link_ldflags = [ ]
  if (is_target_windows) 
  {
    alink_ldflags += [ "/out:{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
    solink_ldflags += [ "/out:{{output_dir}}/{{target_output_name}}{{output_extension}}", "/debug", "/pdb:{{output_dir}}/{{target_output_name}}.pdb" ]
    link_ldflags += [ "/out:{{output_dir}}/{{target_output_name}}{{output_extension}}", "/debug", "/pdb:{{output_dir}}/{{target_output_name}}.pdb" ]
  }
  else
  {
    alink_ldflags += [ "-o", "{{output}}" ]
    solink_ldflags += [ "-o", "{{output}}" ]
    link_ldflags += [ "-o", "{{output}}" ]
  }

  tool("cc") {
    depfile = "{{output}}.d"
    command = clang + " -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
    description = "(CC {{output}}) $command"
    outputs = [ "{{target_out_dir}}/{{target_output_name}}.{{source_name_part}}$object_extension" ]
    depsformat = "gcc"

    if(is_target_windows) {
      command += " -fdebug-compilation-dir={{target_out_dir}}/"
    }
  }

  tool("cxx") {
    depfile = "{{output}}.d"
    command = clang + " -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
    description = "(CXX {{output}}) $command"
    outputs = [ "{{target_out_dir}}/{{target_output_name}}.{{source_name_part}}$object_extension" ]
    depsformat = "gcc"

    if(is_target_windows) {
      command += " -fdebug-compilation-dir={{target_out_dir}}/"
    }
  }

  tool("alink") {
    outputs = [ 
      "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    ]
    default_output_extension = "$static_library_extension"
    default_output_dir = "{{root_out_dir}}/lib/"

    if(is_target_windows) {
      command = ld + " /lib /out:{{output}} {{inputs}} " + string_join(" ", alink_ldflags)
    } else {
      command = ar + " rcs {{output}} {{inputs}}"
    }
    description = "(STATIC {{output}}) $command"
  }

  tool("solink") {
    outputs = [  ]
    if(is_target_windows) 
    {
      outputs += [ "{{output_dir}}/{{target_output_name}}$static_library_extension" ]
    }
    outputs += [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_extension = "$shared_library_extension"
    default_output_dir = "{{root_out_dir}}/bin/"

    command = ld + " {{ldflags}} {{libs}} {{solibs}} {{rlibs}} {{inputs}} " + string_join(" ", solink_ldflags)
    description = "(SHARED {{output}}) $command"
  }

  tool("link") {
    outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_extension = "$executable_extension"
    default_output_dir = "{{root_out_dir}}/bin/"

    extra_objects = []
    if(is_target_linux) {
      extra_objects += [ rebase_path(bcs_third_party_dir + "/linux-musl/$target_tuple_cpu-$target_tuple_os-native/lib/crt1.o") ]
    }
    if(is_target_windows || is_target_webassembly || is_target_linux) {
      command = ld + " {{ldflags}} {{libs}} {{solibs}} {{rlibs}} {{inputs}} " + string_join(" ", extra_objects) + " " + string_join(" ", link_ldflags)
    } else {
      fail("Error: solink unsupported")
    }
    description = "(LINK {{output}}) $command"
  }

  # Use busybox for these. Fuck windows, unix coreutils ftw
  coreutils = ""
  if(is_host_windows)
  {
    coreutils = busybox + " "
  }
  
  tool("stamp") {
    command = coreutils + "touch {{output}}"
    description = "STAMP {{output}}"
  }

  tool("copy") {
    command = coreutils + "cp -af {{source}} {{output}}"
    description = "COPY {{source}} {{output}}"
  }
}
