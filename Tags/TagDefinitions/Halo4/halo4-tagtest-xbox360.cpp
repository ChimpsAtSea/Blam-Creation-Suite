#include <halo4tagdefinitions-private-pch.h>
#include <TagFramework\Definitions\definitions.h>

namespace blofeld::halo4::xbox360
{

	TAG_GROUP_V8(
		"GameEngineFirefightVariantTag",
		gameenginefirefightvarianttag_group,
		GAMEENGINEFIREFIGHTVARIANTTAG_TAG,
		0,
		nullptr,
		gameenginefirefightvarianttag_block_group_block);

	TAG_GROUP_V8(
		"InfinityUIImages",
		infinityuiimages_group,
		INFINITYUIIMAGES_TAG,
		0,
		nullptr,
		infinityuiimages_block_group_block);

	TAG_GROUP_V8(
		"KillCamCameraParamter",
		killcamcameraparamter_group,
		KILLCAMCAMERAPARAMTER_TAG,
		0,
		nullptr,
		killcamcameraparamter_block_group_block);

	TAG_GROUP_V8(
		"NarrativeGlobals",
		narrativeglobals_group,
		NARRATIVEGLOBALS_TAG,
		0,
		nullptr,
		narrativeglobals_block_group_block);

	TAG_GROUP_V8(
		"SpawnSettings",
		spawnsettings_group,
		SPAWNSETTINGS_TAG,
		0,
		nullptr,
		spawnsettings_block_group_block);

	TAG_GROUP_V8(
		"SuppressedIncident",
		suppressedincident_group,
		SUPPRESSEDINCIDENT_TAG,
		0,
		nullptr,
		suppressedincident_block_group_block);

	TAG_GROUP_V8(
		"achievements",
		achievements_group,
		ACHIEVEMENTS_TAG,
		1,
		nullptr,
		achievements_block_group_block);

	TAG_GROUP_V8(
		"ai_dialogue_globals",
		ai_dialogue_globals_group,
		AI_DIALOGUE_GLOBALS_TAG,
		1,
		nullptr,
		ai_dialogue_globals_block_group_block);

	TAG_GROUP_V8(
		"ai_globals",
		ai_globals_group,
		AI_GLOBALS_TAG,
		1,
		nullptr,
		ai_globals_block_group_block);

	TAG_GROUP_V8(
		"ai_mission_dialogue",
		ai_mission_dialogue_group,
		AI_MISSION_DIALOGUE_TAG,
		1,
		nullptr,
		ai_mission_dialogue_block_group_block);

	TAG_GROUP_V8(
		"airstrike",
		airstrike_group,
		AIRSTRIKE_TAG,
		1,
		nullptr,
		airstrike_block_group_block);

	TAG_GROUP_V8(
		"antenna",
		antenna_group,
		ANTENNA_TAG,
		1,
		nullptr,
		antenna_block_group_block);

	TAG_GROUP_V8(
		"area_screen_effect",
		area_screen_effect_group,
		AREA_SCREEN_EFFECT_TAG,
		1,
		nullptr,
		area_screen_effect_block_group_block);

	TAG_GROUP_V8(
		"armormod_globals",
		armormod_globals_group,
		ARMORMOD_GLOBALS_TAG,
		0,
		nullptr,
		armormod_globals_block_group_block);

	TAG_GROUP_V8(
		"atmosphere_fog",
		atmosphere_fog_group,
		ATMOSPHERE_FOG_TAG,
		1,
		nullptr,
		atmosphere_definition_block_group_block);

	TAG_GROUP_V8(
		"atmosphere_globals",
		atmosphere_globals_group,
		ATMOSPHERE_GLOBALS_TAG,
		1,
		nullptr,
		atmosphere_globals_block_group_block);

	TAG_GROUP_V8(
		"authored_light_probe",
		authored_light_probe_group,
		AUTHORED_LIGHT_PROBE_TAG,
		0,
		nullptr,
		authored_light_probe_block_group_block);

	TAG_GROUP_V8(
		"avatar_awards",
		avatar_awards_group,
		AVATAR_AWARDS_TAG,
		1,
		nullptr,
		avatar_awards_block_group_block);

	TAG_GROUP_V8(
		"big_battle_creature",
		big_battle_creature_group,
		BIG_BATTLE_CREATURE_TAG,
		1,
		nullptr,
		big_battle_creature_block_group_block);

	TAG_GROUP_V8(
		"bink",
		bink_group,
		BINK_TAG,
		1,
		nullptr,
		bink_block_group_block);

	TAG_GROUP_V8(
		"biped",
		biped_group,
		BIPED_TAG,
		3,
		&unit_group,
		biped_block_group_block);

	TAG_GROUP_V8(
		"bitmap",
		bitmap_group,
		BITMAP_TAG,
		7,
		nullptr,
		bitmap_block_group_block);

	TAG_GROUP_V8(
		"breakable_surface",
		breakable_surface_group,
		BREAKABLE_SURFACE_TAG,
		0,
		nullptr,
		breakable_surface_block_group_block);

	TAG_GROUP_V8(
		"cache_file_resource_gestalt",
		cache_file_resource_gestalt_group,
		CACHE_FILE_RESOURCE_GESTALT_TAG,
		0,
		nullptr,
		cache_file_resource_gestalt_block_group_block);

	TAG_GROUP_V8(
		"cache_file_resource_layout_table",
		cache_file_resource_layout_table_group,
		CACHE_FILE_RESOURCE_LAYOUT_TABLE_TAG,
		0,
		nullptr,
		cache_file_resource_layout_table_block_group_block);

	TAG_GROUP_V8(
		"cache_file_sound",
		cache_file_sound_group,
		CACHE_FILE_SOUND_TAG,
		1,
		nullptr,
		cache_file_sound_block_group_block);

	TAG_GROUP_V8(
		"camera_fx_settings",
		camera_fx_settings_group,
		CAMERA_FX_SETTINGS_TAG,
		1,
		nullptr,
		camera_fx_settings_block_group_block);

	TAG_GROUP_V8(
		"camera_shake",
		camera_shake_group,
		CAMERA_SHAKE_TAG,
		1,
		nullptr,
		camera_shake_block_group_block);

	TAG_GROUP_V8(
		"camera_track",
		camera_track_group,
		CAMERA_TRACK_TAG,
		2,
		nullptr,
		camera_track_block_group_block);

	TAG_GROUP_V8(
		"camo",
		camo_group,
		CAMO_TAG,
		1,
		nullptr,
		camo_block_group_block);

	TAG_GROUP_V8(
		"cellular_automata",
		cellular_automata_group,
		CELLULAR_AUTOMATA_TAG,
		2,
		nullptr,
		cellular_automata_block_group_block);

	TAG_GROUP_V8(
		"cellular_automata2d",
		cellular_automata2d_group,
		CELLULAR_AUTOMATA2D_TAG,
		1,
		nullptr,
		cellular_automata2d_block_group_block);

	TAG_GROUP_V8(
		"challenge_globals_definition",
		challenge_globals_definition_group,
		CHALLENGE_GLOBALS_DEFINITION_TAG,
		1,
		nullptr,
		challenge_globals_definition_block_group_block);

	TAG_GROUP_V8(
		"character",
		character_group,
		CHARACTER_TAG,
		1,
		nullptr,
		character_block_group_block);

	TAG_GROUP_V8(
		"cheap_light",
		cheap_light_group,
		CHEAP_LIGHT_TAG,
		1,
		nullptr,
		cheap_light_block_group_block);

	TAG_GROUP_V8(
		"cheap_particle_emitter",
		cheap_particle_emitter_group,
		CHEAP_PARTICLE_EMITTER_TAG,
		0,
		nullptr,
		cheap_particle_emitter_block_group_block);

	TAG_GROUP_V8(
		"cheap_particle_type_library",
		cheap_particle_type_library_group,
		CHEAP_PARTICLE_TYPE_LIBRARY_TAG,
		0,
		nullptr,
		cheap_particle_type_library_block_group_block);

	TAG_GROUP_V8(
		"cinematic",
		cinematic_group,
		CINEMATIC_TAG,
		1,
		nullptr,
		cinematic_block_group_block);

	TAG_GROUP_V8(
		"cinematic_scene",
		cinematic_scene_group,
		CINEMATIC_SCENE_TAG,
		1,
		nullptr,
		cinematic_scene_block_group_block);

	TAG_GROUP_V8(
		"cinematic_scene_data",
		cinematic_scene_data_group,
		CINEMATIC_SCENE_DATA_TAG,
		1,
		nullptr,
		cinematic_scene_data_block_group_block);

	TAG_GROUP_V8(
		"cinematic_transition",
		cinematic_transition_group,
		CINEMATIC_TRANSITION_TAG,
		1,
		nullptr,
		cinematic_transition_block_group_block);

	TAG_GROUP_V8(
		"cloth",
		cloth_group,
		CLOTH_TAG,
		0,
		nullptr,
		cloth_block_group_block);

	TAG_GROUP_V8(
		"collision_damage",
		collision_damage_group,
		COLLISION_DAMAGE_TAG,
		1,
		nullptr,
		collision_damage_block_group_block);

	TAG_GROUP_V8(
		"collision_model",
		collision_model_group,
		COLLISION_MODEL_TAG,
		10,
		nullptr,
		collision_model_block_group_block);

	TAG_GROUP_V8(
		"color_table",
		color_table_group,
		COLOR_TABLE_TAG,
		1,
		nullptr,
		color_table_block_group_block);

	TAG_GROUP_V8(
		"commendation_aggregator_list",
		commendation_aggregator_list_group,
		COMMENDATION_AGGREGATOR_LIST_TAG,
		0,
		nullptr,
		commendation_aggregator_list_block_group_block);

	TAG_GROUP_V8(
		"commendation_globals_definition",
		commendation_globals_definition_group,
		COMMENDATION_GLOBALS_DEFINITION_TAG,
		1,
		nullptr,
		commendation_globals_definition_block_group_block);

	TAG_GROUP_V8(
		"communication_sounds",
		communication_sounds_group,
		COMMUNICATION_SOUNDS_TAG,
		1,
		nullptr,
		communication_sounds_block_group_block);

	TAG_GROUP_V8(
		"controller_mapping",
		controller_mapping_group,
		CONTROLLER_MAPPING_TAG,
		1,
		nullptr,
		controller_mapping_block_group_block);

	TAG_GROUP_V8(
		"cookie_purchase_globals",
		cookie_purchase_globals_group,
		COOKIE_PURCHASE_GLOBALS_TAG,
		1,
		nullptr,
		cookie_purchase_globals_block_group_block);

	TAG_GROUP_V8(
		"coop_spawning_globals_definition",
		coop_spawning_globals_definition_group,
		COOP_SPAWNING_GLOBALS_DEFINITION_TAG,
		1,
		nullptr,
		coop_spawning_globals_definition_block_group_block);

	TAG_GROUP_V8(
		"crate",
		crate_group,
		CRATE_TAG,
		1,
		&object_group,
		crate_block_group_block);

	TAG_GROUP_V8(
		"creature",
		creature_group,
		CREATURE_TAG,
		1,
		&object_group,
		creature_block_group_block);

	TAG_GROUP_V8(
		"cui_logic",
		cui_logic_group,
		CUI_LOGIC_TAG,
		1,
		nullptr,
		cui_logic_block_group_block);

	TAG_GROUP_V8(
		"cui_screen",
		cui_screen_group,
		CUI_SCREEN_TAG,
		1,
		nullptr,
		cui_screen_block_group_block);

	TAG_GROUP_V8(
		"cui_static_data",
		cui_static_data_group,
		CUI_STATIC_DATA_TAG,
		1,
		nullptr,
		cui_static_data_block_group_block);

	TAG_GROUP_V8(
		"curve_scalar",
		curve_scalar_group,
		CURVE_SCALAR_TAG,
		1,
		nullptr,
		curve_scalar_block_group_block);

	TAG_GROUP_V8(
		"custom_app_globals",
		custom_app_globals_group,
		CUSTOM_APP_GLOBALS_TAG,
		1,
		nullptr,
		custom_app_globals_block_group_block);

	TAG_GROUP_V8(
		"damage_effect",
		damage_effect_group,
		DAMAGE_EFFECT_TAG,
		6,
		nullptr,
		damage_effect_block_group_block);

	TAG_GROUP_V8(
		"damage_response_definition",
		damage_response_definition_group,
		DAMAGE_RESPONSE_DEFINITION_TAG,
		1,
		nullptr,
		damage_response_definition_block_group_block);

	TAG_GROUP_V8(
		"death_program_selector",
		death_program_selector_group,
		DEATH_PROGRAM_SELECTOR_TAG,
		0,
		nullptr,
		death_program_selector_block_group_block);

	TAG_GROUP_V8(
		"decal_system",
		decal_system_group,
		DECAL_SYSTEM_TAG,
		1,
		nullptr,
		decal_system_block_group_block);

	TAG_GROUP_V8(
		"decorator_set",
		decorator_set_group,
		DECORATOR_SET_TAG,
		1,
		nullptr,
		decorator_set_block_group_block);

	TAG_GROUP_V8(
		"dependency",
		dependency_group,
		DEPENDENCY_TAG,
		1,
		nullptr,
		dependency_block_group_block);

	TAG_GROUP_V8(
		"detail_object_collection",
		detail_object_collection_group,
		DETAIL_OBJECT_COLLECTION_TAG,
		1,
		nullptr,
		detail_object_collection_block_group_block);

	TAG_GROUP_V8(
		"device",
		device_group,
		DEVICE_TAG,
		1,
		&object_group,
		device_block_group_block);

	TAG_GROUP_V8(
		"device_control",
		device_control_group,
		DEVICE_CONTROL_TAG,
		1,
		&device_group,
		device_control_block_group_block);

	TAG_GROUP_V8(
		"device_dispenser",
		device_dispenser_group,
		DEVICE_DISPENSER_TAG,
		0,
		&device_group,
		device_dispenser_block_group_block);

	TAG_GROUP_V8(
		"device_machine",
		device_machine_group,
		DEVICE_MACHINE_TAG,
		1,
		&device_group,
		device_machine_block_group_block);

	TAG_GROUP_V8(
		"device_terminal",
		device_terminal_group,
		DEVICE_TERMINAL_TAG,
		1,
		&device_group,
		device_terminal_block_group_block);

	TAG_GROUP_V8(
		"dialogue",
		dialogue_group,
		DIALOGUE_TAG,
		1,
		nullptr,
		dialogue_block_group_block);

	TAG_GROUP_V8(
		"effect",
		effect_group,
		EFFECT_TAG,
		4,
		nullptr,
		effect_block_group_block);

	TAG_GROUP_V8(
		"effect_global_force",
		effect_global_force_group,
		EFFECT_GLOBAL_FORCE_TAG,
		0,
		nullptr,
		effect_global_force_block_group_block);

	TAG_GROUP_V8(
		"effect_globals",
		effect_globals_group,
		EFFECT_GLOBALS_TAG,
		1,
		nullptr,
		effect_globals_block_group_block);

	TAG_GROUP_V8(
		"effect_scenery",
		effect_scenery_group,
		EFFECT_SCENERY_TAG,
		1,
		&object_group,
		effect_scenery_block_group_block);

	TAG_GROUP_V8(
		"emblem_library",
		emblem_library_group,
		EMBLEM_LIBRARY_TAG,
		1,
		nullptr,
		emblem_library_block_group_block);

	TAG_GROUP_V8(
		"entity",
		entity_group,
		ENTITY_TAG,
		0,
		&object_group,
		entity_block_group_block);

	TAG_GROUP_V8(
		"equipment",
		equipment_group,
		EQUIPMENT_TAG,
		2,
		&item_group,
		equipment_block_group_block);

	TAG_GROUP_V8(
		"firefight_globals",
		firefight_globals_group,
		FIREFIGHT_GLOBALS_TAG,
		0,
		nullptr,
		firefight_globals_block_group_block);

	TAG_GROUP_V8(
		"flock",
		flock_group,
		FLOCK_TAG,
		1,
		nullptr,
		flock_block_group_block);

	TAG_GROUP_V8(
		"fluid_dynamics",
		fluid_dynamics_group,
		FLUID_DYNAMICS_TAG,
		1,
		nullptr,
		fluid_dynamics_block_group_block);

	TAG_GROUP_V8(
		"forge_globals",
		forge_globals_group,
		FORGE_GLOBALS_TAG,
		0,
		nullptr,
		forge_globals_block_group_block);

	TAG_GROUP_V8(
		"formation",
		formation_group,
		FORMATION_TAG,
		1,
		nullptr,
		formation_block_group_block);

	TAG_GROUP_V8(
		"frame_event_list",
		frame_event_list_group,
		FRAME_EVENT_LIST_TAG,
		0,
		nullptr,
		frame_event_list_block_group_block);

	TAG_GROUP_V8(
		"fx_test",
		fx_test_group,
		FX_TEST_TAG,
		0,
		nullptr,
		fx_test_block_group_block);

	TAG_GROUP_V8(
		"game_completion_rewards_globals",
		game_completion_rewards_globals_group,
		GAME_COMPLETION_REWARDS_GLOBALS_TAG,
		1,
		nullptr,
		game_completion_rewards_globals_block_group_block);

	TAG_GROUP_V8(
		"game_engine_globals",
		game_engine_globals_group,
		GAME_ENGINE_GLOBALS_TAG,
		1,
		nullptr,
		game_engine_globals_block_group_block);

	TAG_GROUP_V8(
		"game_engine_settings_definition",
		game_engine_settings_definition_group,
		GAME_ENGINE_SETTINGS_DEFINITION_TAG,
		1,
		nullptr,
		game_engine_settings_definition_block_group_block);

	TAG_GROUP_V8(
		"game_globals_grenade_list",
		game_globals_grenade_list_group,
		GAME_GLOBALS_GRENADE_LIST_TAG,
		0,
		nullptr,
		game_globals_grenade_list_block_group_block);

	TAG_GROUP_V8(
		"game_globals_ordnance_list",
		game_globals_ordnance_list_group,
		GAME_GLOBALS_ORDNANCE_LIST_TAG,
		0,
		nullptr,
		game_globals_ordnance_list_block_group_block);

	TAG_GROUP_V8(
		"game_medal_globals",
		game_medal_globals_group,
		GAME_MEDAL_GLOBALS_TAG,
		1,
		nullptr,
		game_medal_globals_block_group_block);

	TAG_GROUP_V8(
		"game_performance_throttle",
		game_performance_throttle_group,
		GAME_PERFORMANCE_THROTTLE_TAG,
		1,
		nullptr,
		game_performance_throttle_block_group_block);

	TAG_GROUP_V8(
		"giant",
		giant_group,
		GIANT_TAG,
		1,
		&unit_group,
		giant_block_group_block);

	TAG_GROUP_V8(
		"global_cache_file_pixel_shaders",
		global_cache_file_pixel_shaders_group,
		GLOBAL_CACHE_FILE_PIXEL_SHADERS_TAG,
		1,
		nullptr,
		global_cache_file_pixel_shaders_block_group_block);

	TAG_GROUP_V8(
		"global_pixel_shader",
		global_pixel_shader_group,
		GLOBAL_PIXEL_SHADER_TAG,
		1,
		nullptr,
		global_pixel_shader_block_group_block);

	TAG_GROUP_V8(
		"global_vertex_shader",
		global_vertex_shader_group,
		GLOBAL_VERTEX_SHADER_TAG,
		1,
		nullptr,
		global_vertex_shader_block_group_block);

	TAG_GROUP_V8(
		"globals",
		globals_group,
		GLOBALS_TAG,
		3,
		nullptr,
		globals_block_group_block);

	TAG_GROUP_V8(
		"grounded_friction",
		grounded_friction_group,
		GROUNDED_FRICTION_TAG,
		0,
		nullptr,
		grounded_friction_block_group_block);

	TAG_GROUP_V8(
		"havok_collision_filter",
		havok_collision_filter_group,
		HAVOK_COLLISION_FILTER_TAG,
		1,
		nullptr,
		havok_collision_filter_block_group_block);

	TAG_GROUP_V8(
		"hlsl_include",
		hlsl_include_group,
		HLSL_INCLUDE_TAG,
		1,
		nullptr,
		hlsl_include_block_group_block);

	TAG_GROUP_V8(
		"hsc",
		hsc_group,
		HSC_TAG,
		1,
		nullptr,
		hs_source_files_block_group_block);

	TAG_GROUP_V8(
		"imposter_model",
		imposter_model_group,
		IMPOSTER_MODEL_TAG,
		1,
		nullptr,
		imposter_model_block_group_block);

	TAG_GROUP_V8(
		"incident_global_properties_definition",
		incident_global_properties_definition_group,
		INCIDENT_GLOBAL_PROPERTIES_DEFINITION_TAG,
		2,
		nullptr,
		incident_global_properties_definition_block_group_block);

	TAG_GROUP_V8(
		"incident_globals_definition",
		incident_globals_definition_group,
		INCIDENT_GLOBALS_DEFINITION_TAG,
		2,
		nullptr,
		incident_globals_definition_block_group_block);

	TAG_GROUP_V8(
		"instance_imposter_definition",
		instance_imposter_definition_group,
		INSTANCE_IMPOSTER_DEFINITION_TAG,
		3,
		nullptr,
		instance_imposter_definition_block_group_block);

	TAG_GROUP_V8(
		"item",
		item_group,
		ITEM_TAG,
		1,
		&object_group,
		item_block_group_block);

	TAG_GROUP_V8(
		"leaf_system",
		leaf_system_group,
		LEAF_SYSTEM_TAG,
		0,
		nullptr,
		leaf_system_block_group_block);

	TAG_GROUP_V8(
		"lens_flare",
		lens_flare_group,
		LENS_FLARE_TAG,
		2,
		nullptr,
		lens_flare_block_group_block);

	TAG_GROUP_V8(
		"light",
		light_group,
		LIGHT_TAG,
		5,
		nullptr,
		light_block_group_block);

	TAG_GROUP_V8(
		"light_cone",
		light_cone_group,
		LIGHT_CONE_TAG,
		0,
		nullptr,
		light_cone_block_group_block);

	TAG_GROUP_V8(
		"light_rig",
		light_rig_group,
		LIGHT_RIG_TAG,
		0,
		nullptr,
		light_rig_block_group_block);

	TAG_GROUP_V8(
		"light_volume_system",
		light_volume_system_group,
		LIGHT_VOLUME_SYSTEM_TAG,
		1,
		nullptr,
		light_volume_system_block_group_block);

	TAG_GROUP_V8(
		"lightmap_model_globals",
		lightmap_model_globals_group,
		LIGHTMAP_MODEL_GLOBALS_TAG,
		0,
		nullptr,
		lightmap_model_globals_block_group_block);

	TAG_GROUP_V8(
		"lightmapper_globals",
		lightmapper_globals_group,
		LIGHTMAPPER_GLOBALS_TAG,
		4,
		nullptr,
		lightmapper_globals_block_group_block);

	TAG_GROUP_V8(
		"load_screen",
		load_screen_group,
		LOAD_SCREEN_TAG,
		1,
		nullptr,
		loadscreenblock_group_block);

	TAG_GROUP_V8(
		"loadout_globals_definition",
		loadout_globals_definition_group,
		LOADOUT_GLOBALS_DEFINITION_TAG,
		1,
		nullptr,
		loadout_globals_definition_block_group_block);

	TAG_GROUP_V8(
		"location_name_globals_definition",
		location_name_globals_definition_group,
		LOCATION_NAME_GLOBALS_DEFINITION_TAG,
		1,
		nullptr,
		location_name_globals_definition_block_group_block);

	TAG_GROUP_V8(
		"main_menu_voiceover",
		main_menu_voiceover_group,
		MAIN_MENU_VOICEOVER_TAG,
		0,
		nullptr,
		main_menu_voiceover_block_group_block);

	TAG_GROUP_V8(
		"material",
		material_group,
		MATERIAL_TAG,
		1,
		nullptr,
		material_block_group_block);

	TAG_GROUP_V8(
		"material_effects",
		material_effects_group,
		MATERIAL_EFFECTS_TAG,
		1,
		nullptr,
		material_effects_block_group_block);

	TAG_GROUP_V8(
		"material_shader",
		material_shader_group,
		MATERIAL_SHADER_TAG,
		1,
		nullptr,
		material_shader_block_group_block);

	TAG_GROUP_V8(
		"material_shader_bank",
		material_shader_bank_group,
		MATERIAL_SHADER_BANK_TAG,
		1,
		nullptr,
		material_shader_bank_block_group_block);

	TAG_GROUP_V8(
		"medal_challenge_aggregator_list",
		medal_challenge_aggregator_list_group,
		MEDAL_CHALLENGE_AGGREGATOR_LIST_TAG,
		0,
		nullptr,
		medal_challenge_aggregator_list_block_group_block);

	TAG_GROUP_V8(
		"medal_commendation_aggregator_list",
		medal_commendation_aggregator_list_group,
		MEDAL_COMMENDATION_AGGREGATOR_LIST_TAG,
		0,
		nullptr,
		medal_commendation_aggregator_list_block_group_block);

	TAG_GROUP_V8(
		"megalo_string_id_table",
		megalo_string_id_table_group,
		MEGALO_STRING_ID_TABLE_TAG,
		1,
		nullptr,
		megalo_string_id_table_block_group_block);

	TAG_GROUP_V8(
		"megalogamengine_sounds",
		megalogamengine_sounds_group,
		MEGALOGAMENGINE_SOUNDS_TAG,
		1,
		nullptr,
		megalogamengine_sounds_block_group_block);

	TAG_GROUP_V8(
		"meter",
		meter_group,
		METER_TAG,
		1,
		nullptr,
		meter_block_group_block);

	TAG_GROUP_V8(
		"model",
		model_group,
		MODEL_TAG,
		1,
		nullptr,
		model_block_group_block);

	TAG_GROUP_V8(
		"model_animation_graph",
		model_animation_graph_group,
		MODEL_ANIMATION_GRAPH_TAG,
		1,
		nullptr,
		model_animation_graph_block_group_block);

	TAG_GROUP_V8(
		"model_dissolve_definition",
		model_dissolve_definition_group,
		MODEL_DISSOLVE_DEFINITION_TAG,
		0,
		nullptr,
		model_dissolve_definition_block_group_block);

	TAG_GROUP_V8(
		"muffin",
		muffin_group,
		MUFFIN_TAG,
		0,
		nullptr,
		muffin_block_group_block);

	TAG_GROUP_V8(
		"multilingual_unicode_string_list",
		multilingual_unicode_string_list_group,
		MULTILINGUAL_UNICODE_STRING_LIST_TAG,
		2,
		nullptr,
		multilingual_unicode_string_list_block_group_block);

	TAG_GROUP_V8(
		"multiplayerEffects",
		multiplayereffects_group,
		MULTIPLAYEREFFECTS_TAG,
		1,
		nullptr,
		multiplayereffects_block_group_block);

	TAG_GROUP_V8(
		"multiplayer_globals",
		multiplayer_globals_group,
		MULTIPLAYER_GLOBALS_TAG,
		1,
		nullptr,
		multiplayer_globals_block_group_block);

	TAG_GROUP_V8(
		"multiplayer_object_type_list",
		multiplayer_object_type_list_group,
		MULTIPLAYER_OBJECT_TYPE_LIST_TAG,
		1,
		nullptr,
		multiplayer_object_type_list_block_group_block);

	TAG_GROUP_V8(
		"multiplayer_scenario_description",
		multiplayer_scenario_description_group,
		MULTIPLAYER_SCENARIO_DESCRIPTION_TAG,
		1,
		nullptr,
		multiplayer_scenario_description_block_group_block);

	TAG_GROUP_V8(
		"multiplayer_variant_settings_interface_definition",
		multiplayer_variant_settings_interface_definition_group,
		MULTIPLAYER_VARIANT_SETTINGS_INTERFACE_DEFINITION_TAG,
		1,
		nullptr,
		multiplayer_variant_settings_interface_definition_block_group_block);

	TAG_GROUP_V8(
		"mux_generator",
		mux_generator_group,
		MUX_GENERATOR_TAG,
		1,
		nullptr,
		mux_generator_block_group_block);

	TAG_GROUP_V8(
		"new_cinematic_lighting",
		new_cinematic_lighting_group,
		NEW_CINEMATIC_LIGHTING_TAG,
		1,
		nullptr,
		new_cinematic_lighting_block_group_block);

	TAG_GROUP_V8(
		"object",
		object_group,
		OBJECT_TAG,
		1,
		nullptr,
		object_block_group_block);

	TAG_GROUP_V8(
		"particle",
		particle_group,
		PARTICLE_TAG,
		1,
		nullptr,
		particle_block_group_block);

	TAG_GROUP_V8(
		"particle_emitter_boat_hull_shape",
		particle_emitter_boat_hull_shape_group,
		PARTICLE_EMITTER_BOAT_HULL_SHAPE_TAG,
		1,
		nullptr,
		particle_emitter_boat_hull_shape_block_group_block);

	TAG_GROUP_V8(
		"particle_emitter_custom_points",
		particle_emitter_custom_points_group,
		PARTICLE_EMITTER_CUSTOM_POINTS_TAG,
		1,
		nullptr,
		particle_emitter_custom_points_block_group_block);

	TAG_GROUP_V8(
		"particle_model",
		particle_model_group,
		PARTICLE_MODEL_TAG,
		1,
		nullptr,
		particle_model_block_group_block);

	TAG_GROUP_V8(
		"particle_physics",
		particle_physics_group,
		PARTICLE_PHYSICS_TAG,
		1,
		nullptr,
		particle_physics_block_group_block);

	TAG_GROUP_V8(
		"particleman",
		particleman_group,
		PARTICLEMAN_TAG,
		1,
		nullptr,
		particleman_block_group_block);

	TAG_GROUP_V8(
		"patch_globals",
		patch_globals_group,
		PATCH_GLOBALS_TAG,
		0,
		nullptr,
		patch_globals_block_group_block);

	TAG_GROUP_V8(
		"pathfinding",
		pathfinding_group,
		PATHFINDING_TAG,
		3,
		nullptr,
		pathfinding_block_group_block);

	TAG_GROUP_V8(
		"pca_animation",
		pca_animation_group,
		PCA_ANIMATION_TAG,
		1,
		nullptr,
		pca_animation_block_group_block);

	TAG_GROUP_V8(
		"performance_template",
		performance_template_group,
		PERFORMANCE_TEMPLATE_TAG,
		1,
		nullptr,
		performance_template_block_group_block);

	TAG_GROUP_V8(
		"performance_throttles",
		performance_throttles_group,
		PERFORMANCE_THROTTLES_TAG,
		1,
		nullptr,
		performance_throttles_block_group_block);

	TAG_GROUP_V8(
		"pgcr_damage_type_image_mapping_definition",
		pgcr_damage_type_image_mapping_definition_group,
		PGCR_DAMAGE_TYPE_IMAGE_MAPPING_DEFINITION_TAG,
		0,
		nullptr,
		pgcr_damage_type_image_mapping_definition_block_group_block);

	TAG_GROUP_V8(
		"pgcr_enemy_to_category_mapping_definition",
		pgcr_enemy_to_category_mapping_definition_group,
		PGCR_ENEMY_TO_CATEGORY_MAPPING_DEFINITION_TAG,
		1,
		nullptr,
		pgcr_enemy_to_category_mapping_definition_block_group_block);

	TAG_GROUP_V8(
		"physics_model",
		physics_model_group,
		PHYSICS_MODEL_TAG,
		2,
		nullptr,
		physics_model_block_group_block);

	TAG_GROUP_V8(
		"pixel_shader",
		pixel_shader_group,
		PIXEL_SHADER_TAG,
		1,
		nullptr,
		pixel_shader_block_group_block);

	TAG_GROUP_V8(
		"planar_fog_parameters",
		planar_fog_parameters_group,
		PLANAR_FOG_PARAMETERS_TAG,
		1,
		nullptr,
		planar_fog_parameters_block_group_block);

	TAG_GROUP_V8(
		"player_enlistment_globals_definition",
		player_enlistment_globals_definition_group,
		PLAYER_ENLISTMENT_GLOBALS_DEFINITION_TAG,
		0,
		nullptr,
		player_enlistment_globals_definition_block_group_block);

	TAG_GROUP_V8(
		"player_grade_globals_definition",
		player_grade_globals_definition_group,
		PLAYER_GRADE_GLOBALS_DEFINITION_TAG,
		1,
		nullptr,
		player_grade_globals_definition_block_group_block);

	TAG_GROUP_V8(
		"player_model_customization_globals",
		player_model_customization_globals_group,
		PLAYER_MODEL_CUSTOMIZATION_GLOBALS_TAG,
		1,
		nullptr,
		player_model_customization_globals_block_group_block);

	TAG_GROUP_V8(
		"point_physics",
		point_physics_group,
		POINT_PHYSICS_TAG,
		1,
		nullptr,
		point_physics_block_group_block);

	TAG_GROUP_V8(
		"polyart_asset",
		polyart_asset_group,
		POLYART_ASSET_TAG,
		0,
		nullptr,
		polyart_asset_block_group_block);

	TAG_GROUP_V8(
		"portrait_poses_definition",
		portrait_poses_definition_group,
		PORTRAIT_POSES_DEFINITION_TAG,
		0,
		nullptr,
		portrait_poses_definition_block_group_block);

	TAG_GROUP_V8(
		"prefab",
		prefab_group,
		PREFAB_TAG,
		1,
		nullptr,
		prefab_block_group_block);

	TAG_GROUP_V8(
		"progression",
		progression_group,
		PROGRESSION_TAG,
		1,
		nullptr,
		progressionglobalsblock_group_block);

	TAG_GROUP_V8(
		"projectile",
		projectile_group,
		PROJECTILE_TAG,
		5,
		&object_group,
		projectile_block_group_block);

	TAG_GROUP_V8(
		"rain_definition",
		rain_definition_group,
		RAIN_DEFINITION_TAG,
		1,
		nullptr,
		rain_definition_block_group_block);

	TAG_GROUP_V8(
		"rasterizer_cache_file_globals",
		rasterizer_cache_file_globals_group,
		RASTERIZER_CACHE_FILE_GLOBALS_TAG,
		0,
		nullptr,
		rasterizer_cache_file_globals_block_group_block);

	TAG_GROUP_V8(
		"rasterizer_globals",
		rasterizer_globals_group,
		RASTERIZER_GLOBALS_TAG,
		1,
		nullptr,
		rasterizer_globals_block_group_block);

	TAG_GROUP_V8(
		"render_method",
		render_method_group,
		RENDER_METHOD_TAG,
		1,
		nullptr,
		render_method_block_group_block);

	TAG_GROUP_V8(
		"render_method_definition",
		render_method_definition_group,
		RENDER_METHOD_DEFINITION_TAG,
		1,
		nullptr,
		render_method_definition_block_group_block);

	TAG_GROUP_V8(
		"render_method_option",
		render_method_option_group,
		RENDER_METHOD_OPTION_TAG,
		1,
		nullptr,
		render_method_option_block_group_block);

	TAG_GROUP_V8(
		"render_method_template",
		render_method_template_group,
		RENDER_METHOD_TEMPLATE_TAG,
		1,
		nullptr,
		render_method_template_block_group_block);

	TAG_GROUP_V8(
		"render_model",
		render_model_group,
		RENDER_MODEL_TAG,
		5,
		nullptr,
		render_model_block_group_block);

	TAG_GROUP_V8(
		"render_model_lightmap_atlas",
		render_model_lightmap_atlas_group,
		RENDER_MODEL_LIGHTMAP_ATLAS_TAG,
		0,
		nullptr,
		render_model_lightmap_atlas_block_group_block);

	TAG_GROUP_V8(
		"render_water_ripple",
		render_water_ripple_group,
		RENDER_WATER_RIPPLE_TAG,
		0,
		nullptr,
		render_water_ripple_block_group_block);

	TAG_GROUP_V8(
		"reward_globals_definition",
		reward_globals_definition_group,
		REWARD_GLOBALS_DEFINITION_TAG,
		2,
		nullptr,
		reward_globals_definition_block_group_block);

	TAG_GROUP_V8(
		"rumble",
		rumble_group,
		RUMBLE_TAG,
		1,
		nullptr,
		rumble_block_group_block);

	TAG_GROUP_V8(
		"sandbox_text_value_pair_definition",
		sandbox_text_value_pair_definition_group,
		SANDBOX_TEXT_VALUE_PAIR_DEFINITION_TAG,
		1,
		nullptr,
		sandbox_text_value_pair_definition_block_group_block);

	TAG_GROUP_V8(
		"scenario",
		scenario_group,
		SCENARIO_TAG,
		2,
		nullptr,
		scenario_block_group_block);

	TAG_GROUP_V8(
		"scenario_interpolator",
		scenario_interpolator_group,
		SCENARIO_INTERPOLATOR_TAG,
		1,
		nullptr,
		scenario_interpolator_block_group_block);

	TAG_GROUP_V8(
		"scenario_lightmap",
		scenario_lightmap_group,
		SCENARIO_LIGHTMAP_TAG,
		1,
		nullptr,
		scenario_lightmap_block_group_block);

	TAG_GROUP_V8(
		"scenario_lightmap_bsp_data",
		scenario_lightmap_bsp_data_group,
		SCENARIO_LIGHTMAP_BSP_DATA_TAG,
		1,
		nullptr,
		scenario_lightmap_bsp_data_block_group_block);

	TAG_GROUP_V8(
		"scenario_ordnance_list",
		scenario_ordnance_list_group,
		SCENARIO_ORDNANCE_LIST_TAG,
		0,
		nullptr,
		scenario_ordnance_list_block_group_block);

	TAG_GROUP_V8(
		"scenario_required_resource",
		scenario_required_resource_group,
		SCENARIO_REQUIRED_RESOURCE_TAG,
		1,
		nullptr,
		scenario_required_resource_block_group_block);

	TAG_GROUP_V8(
		"scenario_structure_bsp",
		scenario_structure_bsp_group,
		SCENARIO_STRUCTURE_BSP_TAG,
		5,
		nullptr,
		scenario_structure_bsp_block_group_block);

	TAG_GROUP_V8(
		"scenario_structure_lighting_info",
		scenario_structure_lighting_info_group,
		SCENARIO_STRUCTURE_LIGHTING_INFO_TAG,
		1,
		nullptr,
		scenario_structure_lighting_info_block_group_block);

	TAG_GROUP_V8(
		"scenario_wetness_bsp_data",
		scenario_wetness_bsp_data_group,
		SCENARIO_WETNESS_BSP_DATA_TAG,
		1,
		nullptr,
		scenario_wetness_bsp_data_block_group_block);

	TAG_GROUP_V8(
		"scenery",
		scenery_group,
		SCENERY_TAG,
		1,
		&object_group,
		scenery_block_group_block);

	TAG_GROUP_V8(
		"script",
		script_group,
		SCRIPT_TAG,
		0,
		nullptr,
		script_block_group_block);

	TAG_GROUP_V8(
		"script_container",
		script_container_group,
		SCRIPT_CONTAINER_TAG,
		0,
		nullptr,
		script_container_block_group_block);

	TAG_GROUP_V8(
		"self_illumination",
		self_illumination_group,
		SELF_ILLUMINATION_TAG,
		0,
		nullptr,
		self_illumination_block_group_block);

	TAG_GROUP_V8(
		"shader",
		shader_group,
		SHADER_TAG,
		1,
		&render_method_group,
		shader_block_group_block);

	TAG_GROUP_V8(
		"shader_cortana",
		shader_cortana_group,
		SHADER_CORTANA_TAG,
		1,
		&render_method_group,
		shader_cortana_block_group_block);

	TAG_GROUP_V8(
		"shader_custom",
		shader_custom_group,
		SHADER_CUSTOM_TAG,
		1,
		&render_method_group,
		shader_custom_block_group_block);

	TAG_GROUP_V8(
		"shader_decal",
		shader_decal_group,
		SHADER_DECAL_TAG,
		1,
		&render_method_group,
		shader_decal_block_group_block);

	TAG_GROUP_V8(
		"shader_foliage",
		shader_foliage_group,
		SHADER_FOLIAGE_TAG,
		1,
		&render_method_group,
		shader_foliage_block_group_block);

	TAG_GROUP_V8(
		"shader_fur",
		shader_fur_group,
		SHADER_FUR_TAG,
		1,
		&render_method_group,
		shader_fur_block_group_block);

	TAG_GROUP_V8(
		"shader_fur_stencil",
		shader_fur_stencil_group,
		SHADER_FUR_STENCIL_TAG,
		1,
		&render_method_group,
		shader_fur_stencil_block_group_block);

	TAG_GROUP_V8(
		"shader_glass",
		shader_glass_group,
		SHADER_GLASS_TAG,
		1,
		&render_method_group,
		shader_glass_block_group_block);

	TAG_GROUP_V8(
		"shader_halogram",
		shader_halogram_group,
		SHADER_HALOGRAM_TAG,
		1,
		&render_method_group,
		shader_halogram_block_group_block);

	TAG_GROUP_V8(
		"shader_light_volume",
		shader_light_volume_group,
		SHADER_LIGHT_VOLUME_TAG,
		1,
		&render_method_group,
		shader_light_volume_block_group_block);

	TAG_GROUP_V8(
		"shader_mux",
		shader_mux_group,
		SHADER_MUX_TAG,
		1,
		&render_method_group,
		shader_mux_block_group_block);

	TAG_GROUP_V8(
		"shader_mux_material",
		shader_mux_material_group,
		SHADER_MUX_MATERIAL_TAG,
		1,
		&render_method_group,
		shader_mux_material_block_group_block);

	TAG_GROUP_V8(
		"shader_particle",
		shader_particle_group,
		SHADER_PARTICLE_TAG,
		1,
		&render_method_group,
		shader_particle_block_group_block);

	TAG_GROUP_V8(
		"shader_screen",
		shader_screen_group,
		SHADER_SCREEN_TAG,
		1,
		&render_method_group,
		shader_screen_block_group_block);

	TAG_GROUP_V8(
		"shader_skin",
		shader_skin_group,
		SHADER_SKIN_TAG,
		1,
		&render_method_group,
		shader_skin_block_group_block);

	TAG_GROUP_V8(
		"shader_terrain",
		shader_terrain_group,
		SHADER_TERRAIN_TAG,
		1,
		&render_method_group,
		shader_terrain_block_group_block);

	TAG_GROUP_V8(
		"shader_water",
		shader_water_group,
		SHADER_WATER_TAG,
		1,
		&render_method_group,
		shader_water_block_group_block);

	TAG_GROUP_V8(
		"shader_waterfall",
		shader_waterfall_group,
		SHADER_WATERFALL_TAG,
		1,
		&render_method_group,
		shader_waterfall_block_group_block);

	TAG_GROUP_V8(
		"shield_impact",
		shield_impact_group,
		SHIELD_IMPACT_TAG,
		1,
		nullptr,
		shield_impact_block_group_block);

	TAG_GROUP_V8(
		"silent_assist_globals",
		silent_assist_globals_group,
		SILENT_ASSIST_GLOBALS_TAG,
		0,
		nullptr,
		silent_assist_globals_block_group_block);

	TAG_GROUP_V8(
		"simulated_input",
		simulated_input_group,
		SIMULATED_INPUT_TAG,
		1,
		nullptr,
		simulated_input_block_group_block);

	TAG_GROUP_V8(
		"simulation_interpolation",
		simulation_interpolation_group,
		SIMULATION_INTERPOLATION_TAG,
		0,
		nullptr,
		simulation_interpolation_block_group_block);

	TAG_GROUP_V8(
		"sound",
		sound_group,
		SOUND_TAG,
		0,
		nullptr,
		sound_block_group_block);

	TAG_GROUP_V8(
		"sound2",
		sound2_group,
		SOUND2_TAG,
		4,
		nullptr,
		sound2_block_group_block);

	TAG_GROUP_V8(
		"sound_cache_file_gestalt",
		sound_cache_file_gestalt_group,
		SOUND_CACHE_FILE_GESTALT_TAG,
		1,
		nullptr,
		sound_cache_file_gestalt_block_group_block);

	TAG_GROUP_V8(
		"sound_classes",
		sound_classes_group,
		SOUND_CLASSES_TAG,
		1,
		nullptr,
		sound_classes_block_group_block);

	TAG_GROUP_V8(
		"sound_combiner",
		sound_combiner_group,
		SOUND_COMBINER_TAG,
		0,
		nullptr,
		sound_combiner_block_group_block);

	TAG_GROUP_V8(
		"sound_dialogue_constants",
		sound_dialogue_constants_group,
		SOUND_DIALOGUE_CONSTANTS_TAG,
		1,
		nullptr,
		sound_dialogue_constants_block_group_block);

	TAG_GROUP_V8(
		"sound_effect_collection",
		sound_effect_collection_group,
		SOUND_EFFECT_COLLECTION_TAG,
		1,
		nullptr,
		sound_effect_collection_block_group_block);

	TAG_GROUP_V8(
		"sound_effect_template",
		sound_effect_template_group,
		SOUND_EFFECT_TEMPLATE_TAG,
		1,
		nullptr,
		sound_effect_template_block_group_block);

	TAG_GROUP_V8(
		"sound_environment",
		sound_environment_group,
		SOUND_ENVIRONMENT_TAG,
		1,
		nullptr,
		sound_environment_block_group_block);

	TAG_GROUP_V8(
		"sound_global_propagation",
		sound_global_propagation_group,
		SOUND_GLOBAL_PROPAGATION_TAG,
		1,
		nullptr,
		sound_global_propagation_block_group_block);

	TAG_GROUP_V8(
		"sound_incident_response",
		sound_incident_response_group,
		SOUND_INCIDENT_RESPONSE_TAG,
		0,
		nullptr,
		sound_incident_response_block_group_block);

	TAG_GROUP_V8(
		"sound_looping",
		sound_looping_group,
		SOUND_LOOPING_TAG,
		3,
		nullptr,
		sound_looping_block_group_block);

	TAG_GROUP_V8(
		"sound_mix",
		sound_mix_group,
		SOUND_MIX_TAG,
		1,
		nullptr,
		sound_mix_block_group_block);

	TAG_GROUP_V8(
		"sound_old",
		sound_old_group,
		SOUND_OLD_TAG,
		4,
		nullptr,
		sound_old_block_group_block);

	TAG_GROUP_V8(
		"sound_radio_settings",
		sound_radio_settings_group,
		SOUND_RADIO_SETTINGS_TAG,
		1,
		nullptr,
		sound_radio_settings_block_group_block);

	TAG_GROUP_V8(
		"sound_response",
		sound_response_group,
		SOUND_RESPONSE_TAG,
		0,
		nullptr,
		sound_response_block_group_block);

	TAG_GROUP_V8(
		"sound_scenery",
		sound_scenery_group,
		SOUND_SCENERY_TAG,
		1,
		&object_group,
		sound_scenery_block_group_block);

	TAG_GROUP_V8(
		"soundbank",
		soundbank_group,
		SOUNDBANK_TAG,
		0,
		nullptr,
		soundbank_block_group_block);

	TAG_GROUP_V8(
		"spawner",
		spawner_group,
		SPAWNER_TAG,
		0,
		&entity_group,
		spawner_block_group_block);

	TAG_GROUP_V8(
		"spring_acceleration",
		spring_acceleration_group,
		SPRING_ACCELERATION_TAG,
		1,
		nullptr,
		spring_acceleration_block_group_block);

	TAG_GROUP_V8(
		"squad_template",
		squad_template_group,
		SQUAD_TEMPLATE_TAG,
		1,
		nullptr,
		squad_template_block_group_block);

	TAG_GROUP_V8(
		"ssao_definition",
		ssao_definition_group,
		SSAO_DEFINITION_TAG,
		1,
		nullptr,
		ssao_definition_block_group_block);

	TAG_GROUP_V8(
		"stereo_system",
		stereo_system_group,
		STEREO_SYSTEM_TAG,
		1,
		nullptr,
		stereo_system_block_group_block);

	TAG_GROUP_V8(
		"streamingzoneset",
		streamingzoneset_group,
		STREAMINGZONESET_TAG,
		1,
		nullptr,
		streamingzoneset_block_group_block);

	TAG_GROUP_V8(
		"structure_design",
		structure_design_group,
		STRUCTURE_DESIGN_TAG,
		1,
		nullptr,
		structure_design_block_group_block);

	TAG_GROUP_V8(
		"structure_meta",
		structure_meta_group,
		STRUCTURE_META_TAG,
		0,
		nullptr,
		structure_meta_block_group_block);

	TAG_GROUP_V8(
		"structure_seams",
		structure_seams_group,
		STRUCTURE_SEAMS_TAG,
		1,
		nullptr,
		structure_seams_block_group_block);

	TAG_GROUP_V8(
		"style",
		style_group,
		STYLE_TAG,
		1,
		nullptr,
		style_block_group_block);

	TAG_GROUP_V8(
		"style_sheet_list",
		style_sheet_list_group,
		STYLE_SHEET_LIST_TAG,
		1,
		nullptr,
		style_sheet_list_block_group_block);

	TAG_GROUP_V8(
		"survival_mode_globals",
		survival_mode_globals_group,
		SURVIVAL_MODE_GLOBALS_TAG,
		1,
		nullptr,
		survival_mode_globals_block_group_block);

	TAG_GROUP_V8(
		"tag_package_manifest",
		tag_package_manifest_group,
		TAG_PACKAGE_MANIFEST_TAG,
		0,
		nullptr,
		tag_package_manifest_block_group_block);

	TAG_GROUP_V8(
		"text_value_pair_definition",
		text_value_pair_definition_group,
		TEXT_VALUE_PAIR_DEFINITION_TAG,
		1,
		nullptr,
		text_value_pair_definition_block_group_block);

	TAG_GROUP_V8(
		"tracer_system",
		tracer_system_group,
		TRACER_SYSTEM_TAG,
		1,
		nullptr,
		tracer_system_block_group_block);

	TAG_GROUP_V8(
		"unit",
		unit_group,
		UNIT_TAG,
		3,
		&object_group,
		unit_block_group_block);

	TAG_GROUP_V8(
		"user_interface_globals_definition",
		user_interface_globals_definition_group,
		USER_INTERFACE_GLOBALS_DEFINITION_TAG,
		3,
		nullptr,
		user_interface_globals_definition_block_group_block);

	TAG_GROUP_V8(
		"user_interface_hud_globals_definition",
		user_interface_hud_globals_definition_group,
		USER_INTERFACE_HUD_GLOBALS_DEFINITION_TAG,
		1,
		nullptr,
		user_interface_hud_globals_definition_block_group_block);

	TAG_GROUP_V8(
		"user_interface_shared_globals_definition",
		user_interface_shared_globals_definition_group,
		USER_INTERFACE_SHARED_GLOBALS_DEFINITION_TAG,
		1,
		nullptr,
		user_interface_shared_globals_definition_block_group_block);

	TAG_GROUP_V8(
		"user_interface_sounds_definition",
		user_interface_sounds_definition_group,
		USER_INTERFACE_SOUNDS_DEFINITION_TAG,
		1,
		nullptr,
		user_interface_sounds_definition_block_group_block);

	TAG_GROUP_V8(
		"variant_globals",
		variant_globals_group,
		VARIANT_GLOBALS_TAG,
		2,
		nullptr,
		variant_globals_block_group_block);

	TAG_GROUP_V8(
		"vector_hud_definition",
		vector_hud_definition_group,
		VECTOR_HUD_DEFINITION_TAG,
		1,
		nullptr,
		vector_hud_definition_block_group_block);

	TAG_GROUP_V8(
		"vectorart_asset",
		vectorart_asset_group,
		VECTORART_ASSET_TAG,
		0,
		nullptr,
		vectorart_asset_block_group_block);

	TAG_GROUP_V8(
		"vehicle",
		vehicle_group,
		VEHICLE_TAG,
		1,
		&unit_group,
		vehicle_block_group_block);

	TAG_GROUP_V8(
		"vertex_shader",
		vertex_shader_group,
		VERTEX_SHADER_TAG,
		1,
		nullptr,
		vertex_shader_block_group_block);

	TAG_GROUP_V8(
		"vision_mode",
		vision_mode_group,
		VISION_MODE_TAG,
		3,
		nullptr,
		vision_mode_block_group_block);

	TAG_GROUP_V8(
		"water_physics_drag_properties",
		water_physics_drag_properties_group,
		WATER_PHYSICS_DRAG_PROPERTIES_TAG,
		1,
		nullptr,
		water_physics_drag_properties_block_group_block);

	TAG_GROUP_V8(
		"wave_template",
		wave_template_group,
		WAVE_TEMPLATE_TAG,
		1,
		nullptr,
		wave_template_block_group_block);

	TAG_GROUP_V8(
		"weapon",
		weapon_group,
		WEAPON_TAG,
		2,
		&item_group,
		weapon_block_group_block);

	TAG_GROUP_V8(
		"weather_globals",
		weather_globals_group,
		WEATHER_GLOBALS_TAG,
		1,
		nullptr,
		weather_globals_block_group_block);

	TAG_GROUP_V8(
		"wind",
		wind_group,
		WIND_TAG,
		1,
		nullptr,
		wind_block_group_block);

	TAG_BLOCK_FROM_STRUCT(
		animgraphdependencyblock_block,
		"AnimGraphDependencyBlock",
		"AnimGraphDependencyBlock",
		256,
		animgraphdependencyblock);

	TAG_BLOCK_FROM_STRUCT(
		bipedaimingjointfixupblock_block,
		"BipedAimingJointFixupBlock",
		"BipedAimingJointFixupBlock",
		2,
		bipedaimingjointfixupblock);

	TAG_BLOCK_FROM_STRUCT(
		bipedsoundrtpcblock_block,
		"BipedSoundRTPCBlock",
		"BipedSoundRTPCBlock",
		16,
		bipedsoundrtpcblock);

	TAG_BLOCK_FROM_STRUCT(
		bipedsoundsweetenerblock_block,
		"BipedSoundSweetenerBlock",
		"BipedSoundSweetenerBlock",
		16,
		bipedsoundsweetenerblock);

	TAG_BLOCK_FROM_STRUCT(
		commentsblock_block,
		"CommentsBlock",
		"CommentsBlock",
		65536,
		commentsblock);

	TAG_BLOCK_FROM_STRUCT(
		compositeaxisdefinition_block,
		"CompositeAxisDefinition",
		"CompositeAxisDefinition",
		16,
		compositeaxisdefinition);

	TAG_BLOCK_FROM_STRUCT(
		compositedeadzonedefinition_block,
		"CompositeDeadZoneDefinition",
		"CompositeDeadZoneDefinition",
		16,
		compositedeadzonedefinition);

	TAG_BLOCK_FROM_STRUCT(
		compositeentrydefinition_block,
		"CompositeEntryDefinition",
		"CompositeEntryDefinition",
		256,
		compositeentrydefinition);

	TAG_BLOCK_FROM_STRUCT(
		compositeentryvaluedefinition_block,
		"CompositeEntryValueDefinition",
		"CompositeEntryValueDefinition",
		16,
		compositeentryvaluedefinition);

	TAG_BLOCK_FROM_STRUCT(
		compositephasesetdefinition_block,
		"CompositePhaseSetDefinition",
		"CompositePhaseSetDefinition",
		16,
		compositephasesetdefinition);

	TAG_BLOCK_FROM_STRUCT(
		cookiepurchaseappearancedefinitionblock_block,
		"CookiePurchaseAppearanceDefinitionBlock",
		"CookiePurchaseAppearanceDefinitionBlock",
		512,
		cookiepurchaseappearancedefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		cookiepurchaseappearancedefinitionreferenceblock_block,
		"CookiePurchaseAppearanceDefinitionReferenceBlock",
		"CookiePurchaseAppearanceDefinitionReferenceBlock",
		200,
		cookiepurchaseappearancedefinitionreferenceblock);

	TAG_BLOCK_FROM_STRUCT(
		cookiepurchaseexternalunlockableblockappearancedefinition_block,
		"CookiePurchaseExternalUnlockableBlockAppearanceDefinition",
		"CookiePurchaseExternalUnlockableBlockAppearanceDefinition",
		32,
		cookiepurchaseexternalunlockableblockappearancedefinition);

	TAG_BLOCK_FROM_STRUCT(
		cookiepurchaseexternalunlockableblockloadoutdefinition_block,
		"CookiePurchaseExternalUnlockableBlockLoadoutDefinition",
		"CookiePurchaseExternalUnlockableBlockLoadoutDefinition",
		32,
		cookiepurchaseexternalunlockableblockloadoutdefinition);

	TAG_BLOCK_FROM_STRUCT(
		cookiepurchaseexternalunlockableblockordnancedefinition_block,
		"CookiePurchaseExternalUnlockableBlockOrdnanceDefinition",
		"CookiePurchaseExternalUnlockableBlockOrdnanceDefinition",
		32,
		cookiepurchaseexternalunlockableblockordnancedefinition);

	TAG_BLOCK_FROM_STRUCT(
		cookiepurchasefamilyappearancedefinitionblock_block,
		"CookiePurchaseFamilyAppearanceDefinitionBlock",
		"CookiePurchaseFamilyAppearanceDefinitionBlock",
		30,
		cookiepurchasefamilyappearancedefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		cookiepurchasefamilyloadoutdefinitionblock_block,
		"CookiePurchaseFamilyLoadoutDefinitionBlock",
		"CookiePurchaseFamilyLoadoutDefinitionBlock",
		30,
		cookiepurchasefamilyloadoutdefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		cookiepurchasefamilyordnancedefinitionblock_block,
		"CookiePurchaseFamilyOrdnanceDefinitionBlock",
		"CookiePurchaseFamilyOrdnanceDefinitionBlock",
		30,
		cookiepurchasefamilyordnancedefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		cookiepurchaseloadoutdefinitionblock_block,
		"CookiePurchaseLoadoutDefinitionBlock",
		"CookiePurchaseLoadoutDefinitionBlock",
		96,
		cookiepurchaseloadoutdefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		cookiepurchaseloadoutdefinitionreferenceblock_block,
		"CookiePurchaseLoadoutDefinitionReferenceBlock",
		"CookiePurchaseLoadoutDefinitionReferenceBlock",
		200,
		cookiepurchaseloadoutdefinitionreferenceblock);

	TAG_BLOCK_FROM_STRUCT(
		cookiepurchaseordnancedefinitionblock_block,
		"CookiePurchaseOrdnanceDefinitionBlock",
		"CookiePurchaseOrdnanceDefinitionBlock",
		32,
		cookiepurchaseordnancedefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		cookiepurchaseordnancedefinitionreferenceblock_block,
		"CookiePurchaseOrdnanceDefinitionReferenceBlock",
		"CookiePurchaseOrdnanceDefinitionReferenceBlock",
		200,
		cookiepurchaseordnancedefinitionreferenceblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentsoundrtpcblock_block,
		"EquipmentSoundRTPCBlock",
		"EquipmentSoundRTPCBlock",
		16,
		equipmentsoundrtpcblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentsoundsweetenerblock_block,
		"EquipmentSoundSweetenerBlock",
		"EquipmentSoundSweetenerBlock",
		16,
		equipmentsoundsweetenerblock);

	TAG_BLOCK_FROM_STRUCT(
		faceuserdatablock_block,
		"FaceUserDataBlock",
		"FaceUserDataBlock",
		262144,
		faceuserdatablock);

	TAG_BLOCK_FROM_STRUCT(
		fallbackhopperfileblock_block,
		"FallbackHopperFileBlock",
		"FallbackHopperFileBlock",
		300,
		fallbackhopperfileblock);

	TAG_BLOCK_FROM_STRUCT(
		gameenginefirefightplayergoalpropertiesblock_block,
		"GameEngineFirefightPlayerGoalPropertiesBlock",
		"GameEngineFirefightPlayerGoalPropertiesBlock",
		15,
		gameenginefirefightplayergoalpropertiesblock);

	TAG_BLOCK_FROM_STRUCT(
		gameenginefirefightvariantshellblock_block,
		"GameEngineFirefightVariantShellBlock",
		"GameEngineFirefightVariantShellBlock",
		128,
		gameenginefirefightvariantshellblock);

	TAG_BLOCK_FROM_STRUCT(
		gameenginefirefightvarianttag_block_group_block,
		"GameEngineFirefightVariantTag_block",
		"GameEngineFirefightVariantTag_block",
		1,
		gameenginefirefightvarianttag_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		gameenginefirefightwavepropertiesblock_block,
		"GameEngineFirefightWavePropertiesBlock",
		"GameEngineFirefightWavePropertiesBlock",
		30,
		gameenginefirefightwavepropertiesblock);

	TAG_BLOCK_FROM_STRUCT(
		gameglobalsgrenadeblock_block,
		"GameGlobalsGrenadeBlock",
		"GameGlobalsGrenadeBlock",
		8,
		gameglobalsgrenadeblock);

	TAG_BLOCK_FROM_STRUCT(
		gameglobalsordnanceblock_block,
		"GameGlobalsOrdnanceBlock",
		"GameGlobalsOrdnanceBlock",
		64,
		gameglobalsordnanceblock);

	TAG_BLOCK_FROM_STRUCT(
		hsimportmanifestblock_block,
		"HSImportManifestBlock",
		"HSImportManifestBlock",
		128,
		hsimportmanifestblock);

	TAG_BLOCK_FROM_STRUCT(
		hsimportmanifestentryblock_block,
		"HSImportManifestEntryBlock",
		"HSImportManifestEntryBlock",
		3072,
		hsimportmanifestentryblock);

	TAG_BLOCK_FROM_STRUCT(
		hsinstancedvariablesblock_block,
		"HSInstancedVariablesBlock",
		"HSInstancedVariablesBlock",
		128,
		hsinstancedvariablesblock);

	TAG_BLOCK_FROM_STRUCT(
		infinitymissionimagesdefinition_block,
		"InfinityMissionImagesDefinition",
		"InfinityMissionImagesDefinition",
		55,
		infinitymissionimagesdefinition);

	TAG_BLOCK_FROM_STRUCT(
		infinitymissionseasonimagesdefinition_block,
		"InfinityMissionSeasonImagesDefinition",
		"InfinityMissionSeasonImagesDefinition",
		3,
		infinitymissionseasonimagesdefinition);

	TAG_BLOCK_FROM_STRUCT(
		infinityuiimages_block_group_block,
		"InfinityUIImages_block",
		"InfinityUIImages_block",
		1,
		infinityuiimages_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		killcamcameraparamter_block_group_block,
		"KillCamCameraParamter_block",
		"KillCamCameraParamter_block",
		1,
		killcamcameraparamter_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		mobilenavmeshblock_block,
		"MobileNavMeshBlock",
		"MobileNavMeshBlock",
		128,
		mobilenavmeshblock);

	TAG_BLOCK_FROM_STRUCT(
		moppserializedhavokdatablock_block,
		"MoppSerializedHavokDataBlock",
		"MoppSerializedHavokDataBlock",
		64,
		moppserializedhavokdatablock);

	TAG_BLOCK_FROM_STRUCT(
		narrativeflagdefinitionblock_block,
		"NarrativeFlagDefinitionBlock",
		"NarrativeFlagDefinitionBlock",
		64,
		narrativeflagdefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		narrativeglobals_block_group_block,
		"NarrativeGlobals_block",
		"NarrativeGlobals_block",
		1,
		narrativeglobals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		navclimbblock_block,
		"NavClimbBlock",
		"NavClimbBlock",
		256,
		navclimbblock);

	TAG_BLOCK_FROM_STRUCT(
		navmeshattachmentblock_block,
		"NavMeshAttachmentBlock",
		"NavMeshAttachmentBlock",
		160,
		navmeshattachmentblock);

	TAG_BLOCK_FROM_STRUCT(
		navvolumeblock_block,
		"NavVolumeBlock",
		"NavVolumeBlock",
		256,
		navvolumeblock);

	TAG_BLOCK_FROM_STRUCT(
		ordnanceremappingblock_block,
		"OrdnanceRemappingBlock",
		"OrdnanceRemappingBlock",
		128,
		ordnanceremappingblock);

	TAG_BLOCK_FROM_STRUCT(
		ordnanceremappingvariantblock_block,
		"OrdnanceRemappingVariantBlock",
		"OrdnanceRemappingVariantBlock",
		64,
		ordnanceremappingvariantblock);

	TAG_BLOCK_FROM_STRUCT(
		pcagroupsettingsblock_block,
		"PCAGroupSettingsBlock",
		"PCAGroupSettingsBlock",
		2048,
		pcagroupsettingsblock);

	TAG_BLOCK_FROM_STRUCT(
		pcaimportedanimationdatablock_block,
		"PCAImportedAnimationDataBlock",
		"PCAImportedAnimationDataBlock",
		2048,
		pcaimportedanimationdatablock);

	TAG_BLOCK_FROM_STRUCT(
		pcaimportedframedatablock_block,
		"PCAImportedFrameDatablock",
		"PCAImportedFrameDatablock",
		67108864,
		pcaimportedframedatablock);

	TAG_BLOCK_FROM_STRUCT(
		pcaimportedmeshdatablock_block,
		"PCAImportedMeshDataBlock",
		"PCAImportedMeshDataBlock",
		8191,
		pcaimportedmeshdatablock);

	TAG_BLOCK_FROM_STRUCT(
		pcameshindexblock_block,
		"PCAMeshIndexBlock",
		"PCAMeshIndexBlock",
		8191,
		pcameshindexblock);

	TAG_BLOCK_FROM_STRUCT(
		playerordnancegroupblock_block,
		"PlayerOrdnanceGroupBlock",
		"PlayerOrdnanceGroupBlock",
		3,
		playerordnancegroupblock);

	TAG_BLOCK_FROM_STRUCT(
		playerordnanceitemblock_block,
		"PlayerOrdnanceItemBlock",
		"PlayerOrdnanceItemBlock",
		8,
		playerordnanceitemblock);

	TAG_BLOCK_FROM_STRUCT(
		projectilesoundrtpcblock_block,
		"ProjectileSoundRTPCBlock",
		"ProjectileSoundRTPCBlock",
		16,
		projectilesoundrtpcblock);

	TAG_BLOCK_FROM_STRUCT(
		puppetactionblock_block,
		"PuppetActionBlock",
		"PuppetActionBlock",
		256,
		puppetactionblock);

	TAG_BLOCK_FROM_STRUCT(
		puppetactionheaderblock_block,
		"PuppetActionHeaderBlock",
		"PuppetActionHeaderBlock",
		256,
		puppetactionheaderstruct);

	TAG_BLOCK_FROM_STRUCT(
		puppetanimationblock_block,
		"PuppetAnimationBlock",
		"PuppetAnimationBlock",
		256,
		puppetactionanimationstruct);

	TAG_BLOCK_FROM_STRUCT(
		puppetblock_block,
		"PuppetBlock",
		"PuppetBlock",
		32,
		puppetblock);

	TAG_BLOCK_FROM_STRUCT(
		puppetbranchblock_block,
		"PuppetBranchBlock",
		"PuppetBranchBlock",
		256,
		puppetsubactionbranchstruct);

	TAG_BLOCK_FROM_STRUCT(
		puppetheaderblock_block,
		"PuppetHeaderBlock",
		"PuppetHeaderBlock",
		32,
		puppetheaderstruct);

	TAG_BLOCK_FROM_STRUCT(
		puppetpathblock_block,
		"PuppetPathBlock",
		"PuppetPathBlock",
		256,
		puppetactionpathstruct);

	TAG_BLOCK_FROM_STRUCT(
		puppetpathpointblock_block,
		"PuppetPathPointBlock",
		"PuppetPathPointBlock",
		32,
		puppetpathpointstruct);

	TAG_BLOCK_FROM_STRUCT(
		puppetpointblock_block,
		"PuppetPointBlock",
		"PuppetPointBlock",
		256,
		puppetsubactionpointstruct);

	TAG_BLOCK_FROM_STRUCT(
		puppetscriptblock_block,
		"PuppetScriptBlock",
		"PuppetScriptBlock",
		256,
		puppetsubactionscriptstruct);

	TAG_BLOCK_FROM_STRUCT(
		puppetscripttextblock_block,
		"PuppetScriptTextBlock",
		"PuppetScriptTextBlock",
		8,
		puppetscripttextblock);

	TAG_BLOCK_FROM_STRUCT(
		puppetshowsblock_block,
		"PuppetShowsBlock",
		"PuppetShowsBlock",
		256,
		puppetshowsblock);

	TAG_BLOCK_FROM_STRUCT(
		puppetsubactionblock_block,
		"PuppetSubActionBlock",
		"PuppetSubActionBlock",
		256,
		puppetsubactionblock);

	TAG_BLOCK_FROM_STRUCT(
		puppetsubactionbranchelementblock_block,
		"PuppetSubActionBranchElementBlock",
		"PuppetSubActionBranchElementBlock",
		8,
		puppetsubactionbranchelementblock);

	TAG_BLOCK_FROM_STRUCT(
		puppetsubactionheaderblock_block,
		"PuppetSubActionHeaderBlock",
		"PuppetSubActionHeaderBlock",
		256,
		puppetsubactionheaderstruct);

	TAG_BLOCK_FROM_STRUCT(
		purchaseplayerappearanceposeblock_block,
		"PurchasePlayerAppearancePoseBlock",
		"PurchasePlayerAppearancePoseBlock",
		1,
		purchaseplayerappearanceposeblock);

	TAG_BLOCK_FROM_STRUCT(
		purchaseplayerordnanceitemblock_block,
		"PurchasePlayerOrdnanceItemBlock",
		"PurchasePlayerOrdnanceItemBlock",
		1,
		purchaseplayerordnanceitemblock);

	TAG_BLOCK_FROM_STRUCT(
		purchaseplayerordnanceslotblock_block,
		"PurchasePlayerOrdnanceSlotBlock",
		"PurchasePlayerOrdnanceSlotBlock",
		1,
		purchaseplayerordnanceslotblock);

	TAG_BLOCK_FROM_STRUCT(
		purchaseprerequisitepurchasedappearanceitemdefinitionblock_block,
		"PurchasePrerequisitePurchasedAppearanceItemDefinitionBlock",
		"PurchasePrerequisitePurchasedAppearanceItemDefinitionBlock",
		20,
		purchaseprerequisitepurchasedappearanceitemdefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		purchaseprerequisitepurchasedloadoutitemdefinitionblock_block,
		"PurchasePrerequisitePurchasedLoadoutItemDefinitionBlock",
		"PurchasePrerequisitePurchasedLoadoutItemDefinitionBlock",
		20,
		purchaseprerequisitepurchasedloadoutitemdefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		purchaseprerequisitepurchasedordnanceitemdefinitionblock_block,
		"PurchasePrerequisitePurchasedOrdnanceItemDefinitionBlock",
		"PurchasePrerequisitePurchasedOrdnanceItemDefinitionBlock",
		20,
		purchaseprerequisitepurchasedordnanceitemdefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		randomordnanceitemblock_block,
		"RandomOrdnanceItemBlock",
		"RandomOrdnanceItemBlock",
		24,
		randomordnanceitemblock);

	TAG_BLOCK_FROM_STRUCT(
		rendermodelbonegroupblock_block,
		"bone_group",
		"RenderModelBoneGroupBlock",
		64,
		rendermodelbonegroupblock);

	TAG_BLOCK_FROM_STRUCT(
		rendermodelnodeindexblock_block,
		"node_index",
		"RenderModelNodeIndexBlock",
		255,
		rendermodelnodeindexblock);

	TAG_BLOCK_FROM_STRUCT(
		rigidbodyserializedshapesblock_block,
		"RigidBodySerializedShapesBlock",
		"RigidBodySerializedShapesBlock",
		16384,
		rigidbodyserializedshapesblock);

	TAG_BLOCK_FROM_STRUCT(
		scenariodispenserblock_block,
		"ScenarioDispenserBlock",
		"ScenarioDispenserBlock",
		40,
		scenariodispenserblock);

	TAG_BLOCK_FROM_STRUCT(
		scenariodispenserpaletteblock_block,
		"ScenarioDispenserPaletteBlock",
		"ScenarioDispenserPaletteBlock",
		256,
		scenariodispenserpaletteblock);

	TAG_BLOCK_FROM_STRUCT(
		scenariounitrecordingblock_block,
		"ScenarioUnitRecordingBlock",
		"ScenarioUnitRecordingBlock",
		32,
		scenariounitrecordingblock_struct);

	TAG_BLOCK_FROM_STRUCT(
		sentrypropertiesblock_block,
		"SentryPropertiesBlock",
		"SentryPropertiesBlock",
		1,
		sentrypropertiesblock);

	TAG_BLOCK_FROM_STRUCT(
		serializedhavokgeometrydatablock_block,
		"SerializedHavokGeometryDataBlock",
		"SerializedHavokGeometryDataBlock",
		5,
		serializedhavokgeometrydatablock_struct);

	TAG_BLOCK_FROM_STRUCT(
		soundbankblock_block,
		"SoundBankBlock",
		"SoundBankBlock",
		8,
		soundbankblock);

	TAG_BLOCK_FROM_STRUCT(
		soundrtpcblock_block,
		"SoundRTPCBlock",
		"SoundRTPCBlock",
		16,
		soundrtpcblock);

	TAG_BLOCK_FROM_STRUCT(
		soundsubtitleblock_block,
		"SoundSubtitleBlock",
		"SoundSubtitleBlock",
		1024,
		soundsubtitleblock);

	TAG_BLOCK_FROM_STRUCT(
		soundsweetenerblock_block,
		"SoundSweetenerBlock",
		"SoundSweetenerBlock",
		16,
		soundsweetenerblock);

	TAG_BLOCK_FROM_STRUCT(
		spawnsettings_block_group_block,
		"SpawnSettings_block",
		"SpawnSettings_block",
		1,
		spawnsettings_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		streamingpackblock_block,
		"StreamingPackBlock",
		"StreamingPackBlock",
		20,
		streamingpackblock);

	TAG_BLOCK_FROM_STRUCT(
		streamingzonesetresourceidblock_block,
		"StreamingZoneSetResourceIdBlock",
		"StreamingZoneSetResourceIdBlock",
		4096,
		streamingzonesetresourceidblock);

	TAG_BLOCK_FROM_STRUCT(
		streamingzonesetresourcelevelsblock_block,
		"StreamingZoneSetResourceLevelsBlock",
		"StreamingZoneSetResourceLevelsBlock",
		4096,
		streamingzonesetresourcelevelsblock);

	TAG_BLOCK_FROM_STRUCT(
		streamingzonesetresourcesubregiondatablock_block,
		"StreamingZoneSetResourceSubregionDataBlock",
		"StreamingZoneSetResourceSubregionDataBlock",
		65536,
		streamingzonesetresourcesubregiondatablock);

	TAG_BLOCK_FROM_STRUCT(
		stringblock_block,
		"StringBlock",
		"StringBlock",
		1024,
		stringblock);

	TAG_BLOCK_FROM_STRUCT(
		subtracksblock_block,
		"SubTracksBlock",
		"SubTracksBlock",
		20,
		subtracksblock);

	TAG_BLOCK_FROM_STRUCT(
		suppressedincidentblockreferencedefinition_block,
		"SuppressedIncidentBlockReferenceDefinition",
		"SuppressedIncidentBlockReferenceDefinition",
		8,
		suppressedincidentblockreferencedefinition);

	TAG_BLOCK_FROM_STRUCT(
		suppressedincident_block_group_block,
		"SuppressedIncident_block",
		"SuppressedIncident_block",
		1,
		suppressedincident_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		swaptagreferencedefinition_block,
		"SwapTagReferenceDefinition",
		"SwapTagReferenceDefinition",
		128,
		swaptagreferencedefinition);

	TAG_BLOCK_FROM_STRUCT(
		synckeyblock_block,
		"SyncKeyBlock",
		"SyncKeyBlock",
		8,
		synckeyblock);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacegamescreensequencestepdefinition_block,
		"UserInterfaceGameScreenSequenceStepDefinition",
		"UserInterfaceGameScreenSequenceStepDefinition",
		5,
		userinterfacegamescreensequencestepdefinition);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacestylesheetalignmentblock_block,
		"UserInterfaceStyleSheetAlignmentBlock",
		"UserInterfaceStyleSheetAlignmentBlock",
		1,
		userinterfacestylesheetalignmentblock);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacestylesheetcolorblock_block,
		"UserInterfaceStyleSheetColorBlock",
		"UserInterfaceStyleSheetColorBlock",
		1,
		userinterfacestylesheetcolorblock);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacestylesheetdropshadowstyleblock_block,
		"UserInterfaceStyleSheetDropShadowStyleBlock",
		"UserInterfaceStyleSheetDropShadowStyleBlock",
		1,
		userinterfacestylesheetdropshadowstyleblock);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacestylesheetdropshadowblock_block,
		"UserInterfaceStyleSheetDropshadowBlock",
		"UserInterfaceStyleSheetDropshadowBlock",
		32,
		userinterfacestylesheetdropshadowblock);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacestylesheetfixedheightblock_block,
		"UserInterfaceStyleSheetFixedHeightBlock",
		"UserInterfaceStyleSheetFixedHeightBlock",
		1,
		userinterfacestylesheetfixedheightblock);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacestylesheetfontidblock_block,
		"UserInterfaceStyleSheetFontIdBlock",
		"UserInterfaceStyleSheetFontIdBlock",
		1,
		userinterfacestylesheetfontidblock);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacestylesheetgradientblock_block,
		"UserInterfaceStyleSheetGradientBlock",
		"UserInterfaceStyleSheetGradientBlock",
		32,
		userinterfacestylesheetgradientblock);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacestylesheetjustificationblock_block,
		"UserInterfaceStyleSheetJustificationBlock",
		"UserInterfaceStyleSheetJustificationBlock",
		1,
		userinterfacestylesheetjustificationblock);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacestylesheetlanguagesblock_block,
		"UserInterfaceStyleSheetLanguagesBlock",
		"UserInterfaceStyleSheetLanguagesBlock",
		17,
		userinterfacestylesheetlanguagesblock);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacestylesheetouterglowblock_block,
		"UserInterfaceStyleSheetOuterGlowBlock",
		"UserInterfaceStyleSheetOuterGlowBlock",
		32,
		userinterfacestylesheetouterglowblock);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacestylesheetscaleblock_block,
		"UserInterfaceStyleSheetScaleBlock",
		"UserInterfaceStyleSheetScaleBlock",
		1,
		userinterfacestylesheetscaleblock);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacestylesheettextcaseblock_block,
		"UserInterfaceStyleSheetTextCaseBlock",
		"UserInterfaceStyleSheetTextCaseBlock",
		1,
		userinterfacestylesheettextcaseblock);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacestylesheetsfontblock_block,
		"UserInterfaceStyleSheetsFontBlock",
		"UserInterfaceStyleSheetsFontBlock",
		64,
		userinterfacestylesheetsfontblock);

	TAG_BLOCK_FROM_STRUCT(
		userinterfacestylesheetsvisualblock_block,
		"UserInterfaceStyleSheetsVisualBlock",
		"UserInterfaceStyleSheetsVisualBlock",
		64,
		userinterfacestylesheetsvisualblock);

	TAG_BLOCK_FROM_STRUCT(
		weaponsoundrtpcblock_block,
		"WeaponSoundRTPCBlock",
		"WeaponSoundRTPCBlock",
		16,
		weaponsoundrtpcblock);

	TAG_BLOCK_FROM_STRUCT(
		weaponsoundsweetenerblock_block,
		"WeaponSoundSweetenerBlock",
		"WeaponSoundSweetenerBlock",
		16,
		weaponsoundsweetenerblock);

	TAG_BLOCK_FROM_STRUCT(
		weaponspecificmarkersblock_block,
		"WeaponSpecificMarkersBlock",
		"WeaponSpecificMarkersBlock",
		64,
		weaponspecificmarkersblock);

	TAG_BLOCK_FROM_STRUCT(
		achievements_block_group_block,
		"achievements_block",
		"achievements_block",
		1,
		achievements_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		acoustic_sector_point_block_block,
		"acoustic_sector_point_block",
		"acoustic_sector_point_block",
		32,
		acoustic_sector_point_block);

	TAG_BLOCK_FROM_STRUCT(
		active_camo_globals_block_block,
		"active_camo_globals_block",
		"active_camo_globals_block",
		1,
		active_camo_globals_block);

	TAG_BLOCK_FROM_STRUCT(
		active_camo_level_definition_block_block,
		"active_camo_level_definition_block",
		"active_camo_level_definition_block",
		5,
		active_camo_level_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		additional_node_data_block_block,
		"additional_node_data_block",
		"additional_node_data_block",
		255,
		additional_node_data_block);

	TAG_BLOCK_FROM_STRUCT(
		aiequipmenttraitappearanceblock_block,
		"aiEquipmentTraitAppearanceBlock",
		"aiEquipmentTraitAppearanceBlock",
		1,
		aiequipmenttraitappearanceblock);

	TAG_BLOCK_FROM_STRUCT(
		aiequipmenttraitsblock_block,
		"aiEquipmentTraitsBlock",
		"aiEquipmentTraitsBlock",
		1,
		aiequipmenttraitsblock);

	TAG_BLOCK_FROM_STRUCT(
		ai_cue_block_block,
		"ai_cue_block",
		"ai_cue_block",
		256,
		ai_cue_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		ai_cue_template_block_block,
		"ai_cue_template_block",
		"ai_cue_template_block",
		32,
		ai_cue_template_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		ai_deafening_encoded_pas_block_block,
		"ai_deafening_encoded_pas_block",
		"ai_deafening_encoded_pas_block",
		16368,
		ai_deafening_encoded_pas_block);

	TAG_BLOCK_FROM_STRUCT(
		ai_dialogue_globals_block_group_block,
		"ai_dialogue_globals_block",
		"ai_dialogue_globals_block",
		1,
		ai_dialogue_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_full_cue_block_block,
		"ai_full_cue_block",
		"ai_full_cue_block",
		256,
		ai_full_cue_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		ai_globals_block_group_block,
		"ai_globals_block",
		"ai_globals_block",
		1,
		ai_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_globals_custom_stimuli_block_block,
		"ai_globals_custom_stimuli_block",
		"ai_globals_custom_stimuli_block",
		128,
		ai_globals_custom_stimuli_block);

	TAG_BLOCK_FROM_STRUCT(
		ai_globals_data_block_block,
		"ai_globals_data_block",
		"ai_globals_data_block",
		1,
		ai_globals_data_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		ai_globals_formation_block_block,
		"ai_globals_formation_block",
		"ai_globals_formation_block",
		128,
		ai_globals_formation_block);

	TAG_BLOCK_FROM_STRUCT(
		ai_globals_gravemind_block_block,
		"ai_globals_gravemind_block",
		"ai_globals_gravemind_block",
		1,
		ai_globals_gravemind_block);

	TAG_BLOCK_FROM_STRUCT(
		ai_globals_performance_template_block_block,
		"ai_globals_performance_template_block",
		"ai_globals_performance_template_block",
		128,
		ai_globals_performance_template_block);

	TAG_BLOCK_FROM_STRUCT(
		ai_globals_performance_template_folder_block_block,
		"ai_globals_performance_template_folder_block",
		"ai_globals_performance_template_folder_block",
		32,
		ai_globals_performance_template_folder_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		ai_globals_performance_template_sub_folder_block_block,
		"ai_globals_performance_template_sub_folder_block",
		"ai_globals_performance_template_sub_folder_block",
		32,
		ai_globals_performance_template_sub_folder_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		ai_globals_squad_template_block_block,
		"ai_globals_squad_template_block",
		"ai_globals_squad_template_block",
		128,
		ai_globals_squad_template_block);

	TAG_BLOCK_FROM_STRUCT(
		ai_globals_squad_template_folder_block_block,
		"ai_globals_squad_template_folder_block",
		"ai_globals_squad_template_folder_block",
		32,
		ai_globals_squad_template_folder_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		ai_globals_squad_template_sub_folder_block_block,
		"ai_globals_squad_template_sub_folder_block",
		"ai_globals_squad_template_sub_folder_block",
		32,
		ai_globals_squad_template_sub_folder_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		ai_mission_dialogue_block_group_block,
		"ai_mission_dialogue_block",
		"ai_mission_dialogue_block",
		1,
		ai_mission_dialogue_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_quick_cue_block_block,
		"ai_quick_cue_block",
		"ai_quick_cue_block",
		256,
		ai_quick_cue_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		ai_recording_reference_block_block,
		"ai_recording_reference_block",
		"ai_recording_reference_block",
		128,
		ai_recording_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		ai_scenario_mission_dialogue_block_block,
		"ai_scenario_mission_dialogue_block",
		"ai_scenario_mission_dialogue_block",
		1,
		ai_scenario_mission_dialogue_block);

	TAG_BLOCK_FROM_STRUCT(
		ai_scene_block_block,
		"ai_scene_block",
		"ai_scene_block",
		100,
		ai_scene_block);

	TAG_BLOCK_FROM_STRUCT(
		ai_scene_role_block_block,
		"ai_scene_role_block",
		"ai_scene_role_block",
		10,
		ai_scene_role_block);

	TAG_BLOCK_FROM_STRUCT(
		ai_scene_role_variants_block_block,
		"ai_scene_role_variants_block",
		"ai_scene_role_variants_block",
		10,
		ai_scene_role_variants_block);

	TAG_BLOCK_FROM_STRUCT(
		ai_scene_trigger_block_block,
		"ai_scene_trigger_block",
		"ai_scene_trigger_block",
		1,
		ai_scene_trigger_block);

	TAG_BLOCK_FROM_STRUCT(
		ai_trait_grenade_block_block,
		"ai_trait_grenade_block",
		"ai_trait_grenade_block",
		2,
		ai_trait_grenade_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		ai_trait_luck_block_block,
		"ai_trait_luck_block",
		"ai_trait_luck_block",
		3,
		ai_trait_luck_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		ai_trait_sound_block_block,
		"ai_trait_sound_block",
		"ai_trait_sound_block",
		2,
		ai_trait_sound_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		ai_trait_vision_block_block,
		"ai_trait_vision_block",
		"ai_trait_vision_block",
		3,
		ai_trait_vision_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		airstrike_battery_block_block,
		"airstrike_battery_block",
		"airstrike_battery_block",
		1,
		airstrike_battery_block);

	TAG_BLOCK_FROM_STRUCT(
		airstrike_block_group_block,
		"airstrike_block",
		"airstrike_block",
		1,
		airstrike_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		airstrike_fire_location_block_block,
		"airstrike_fire_location_block",
		"airstrike_fire_location_block",
		16,
		airstrike_fire_location_block);

	TAG_BLOCK_FROM_STRUCT(
		alien_fighter_block_block,
		"alien_fighter_block",
		"alien_fighter_block",
		1,
		alien_fighter_block);

	TAG_BLOCK_FROM_STRUCT(
		alien_scout_block_block,
		"alien_scout_block",
		"alien_scout_block",
		1,
		alien_scout_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_blend_screen_block_block,
		"animation_blend_screen_block",
		"animation_blend_screen_block",
		1024,
		animation_blend_screen_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_component_argb_color_property_block,
		"animation_component_argb_color_property",
		"animation_component_argb_color_property",
		8192,
		animation_component_argb_color_property);

	TAG_BLOCK_FROM_STRUCT(
		animation_component_definition_block,
		"animation_component_definition",
		"animation_component_definition",
		8192,
		animation_component_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_component_real_property_block,
		"animation_component_real_property",
		"animation_component_real_property",
		8192,
		animation_component_real_property);

	TAG_BLOCK_FROM_STRUCT(
		animation_definition_block,
		"animation_definition",
		"animation_definition",
		8192,
		animation_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_dialogue_event_block_block,
		"animation_dialogue_event_block",
		"animation_dialogue_event_block",
		512,
		animation_dialogue_event_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_dialogue_event_block_extended_block,
		"animation_dialogue_event_block_extended",
		"animation_dialogue_event_block_extended",
		512,
		animation_dialogue_event_block_extended);

	TAG_BLOCK_FROM_STRUCT(
		animation_editor_only_definition_block,
		"animation_editor_only_definition",
		"animation_editor_only_definition",
		8192,
		animation_editor_only_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_effect_event_block_block,
		"animation_effect_event_block",
		"animation_effect_event_block",
		512,
		animation_effect_event_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_effects_event_block_extended_block,
		"animation_effects_event_block_extended",
		"animation_effects_event_block_extended",
		512,
		animation_effects_event_block_extended);

	TAG_BLOCK_FROM_STRUCT(
		animation_entry_block_block,
		"animation_entry_block",
		"animation_entry_block",
		256,
		animation_entry_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_extended_events_block,
		"animation_extended_events",
		"animation_extended_events",
		32,
		animation_extended_events_struct);

	TAG_BLOCK_FROM_STRUCT(
		animation_facial_wrinkle_events_block,
		"animation_facial_wrinkle_events",
		"animation_facial_wrinkle_events",
		32,
		animation_facial_wrinkle_events_struct);

	TAG_BLOCK_FROM_STRUCT(
		animation_frame_event_block_block,
		"animation_frame_event_block",
		"animation_frame_event_block",
		512,
		animation_frame_event_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		animation_function_block_block,
		"animation_function_block",
		"animation_function_block",
		16,
		animation_function_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_gait_block_block,
		"animation_gait_block",
		"animation_gait_block",
		32,
		animation_gait_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_gait_group_block_block,
		"animation_gait_group_block",
		"animation_gait_group_block",
		32,
		animation_gait_group_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_gait_item_block_block,
		"animation_gait_item_block",
		"animation_gait_item_block",
		32,
		animation_gait_item_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_graph_effect_reference_block_block,
		"animation_graph_effect_reference_block",
		"animation_graph_effect_reference_block",
		4096,
		animation_graph_effect_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_graph_node_block_block,
		"animation_graph_node_block",
		"animation_graph_node_block",
		255,
		animation_graph_node_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_graph_sound_reference_block_block,
		"animation_graph_sound_reference_block",
		"animation_graph_sound_reference_block",
		4096,
		animation_graph_sound_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_ik_block_block,
		"animation_ik_block",
		"animation_ik_block",
		64,
		animation_ik_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_ik_block_v1_block,
		"animation_ik_block_v1",
		"animation_ik_block_v1",
		64,
		animation_ik_block_v1);

	TAG_BLOCK_FROM_STRUCT(
		animation_ik_chain_block_block,
		"animation_ik_chain_block",
		"animation_ik_chain_block",
		4,
		animation_ik_chain_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_ik_chain_events_block,
		"animation_ik_chain_events",
		"animation_ik_chain_events",
		32,
		animation_ik_chain_events_struct);

	TAG_BLOCK_FROM_STRUCT(
		animation_ik_chain_proxies_block,
		"animation_ik_chain_proxies",
		"animation_ik_chain_proxies",
		8,
		animation_ik_chain_proxies_struct);

	TAG_BLOCK_FROM_STRUCT(
		animation_ik_set_block,
		"animation_ik_set",
		"animation_ik_set",
		32,
		animation_ik_set);

	TAG_BLOCK_FROM_STRUCT(
		animation_ik_set_item_block,
		"animation_ik_set_item",
		"animation_ik_set_item",
		8,
		animation_ik_set_item);

	TAG_BLOCK_FROM_STRUCT(
		animation_mode_block_block,
		"animation_mode_block",
		"animation_mode_block",
		512,
		animation_mode_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_node_mask_block_block,
		"animation_node_mask_block",
		"animation_node_mask_block",
		8,
		animation_node_mask_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_node_mask_entry_block_block,
		"animation_node_mask_entry_block",
		"animation_node_mask_entry_block",
		255,
		animation_node_mask_entry_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_object_functions_block,
		"animation_object_functions",
		"animation_object_functions",
		4,
		animation_object_functions_struct);

	TAG_BLOCK_FROM_STRUCT(
		animation_pool_block_block,
		"animation_pool_block",
		"animation_pool_block",
		2048,
		animation_pool_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		animation_property_keyframe_argb_color_value_block,
		"animation_property_keyframe_argb_color_value",
		"animation_property_keyframe_argb_color_value",
		8192,
		animation_property_keyframe_argb_color_value);

	TAG_BLOCK_FROM_STRUCT(
		animation_property_keyframe_real_value_block,
		"animation_property_keyframe_real_value",
		"animation_property_keyframe_real_value",
		8192,
		animation_property_keyframe_real_value);

	TAG_BLOCK_FROM_STRUCT(
		animation_ranged_action_block_block,
		"animation_ranged_action_block",
		"animation_ranged_action_block",
		16,
		animation_ranged_action_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_script_event_block_block,
		"animation_script_event_block",
		"animation_script_event_block",
		512,
		animation_script_event_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_script_event_block_extended_block,
		"animation_script_event_block_extended",
		"animation_script_event_block_extended",
		512,
		animation_script_event_block_extended);

	TAG_BLOCK_FROM_STRUCT(
		animation_set_block_block,
		"animation_set_block",
		"animation_set_block",
		64,
		animation_set_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_sound_event_block_block,
		"animation_sound_event_block",
		"animation_sound_event_block",
		512,
		animation_sound_event_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_sound_event_block_extended_block,
		"animation_sound_event_block_extended",
		"animation_sound_event_block_extended",
		512,
		animation_sound_event_block_extended);

	TAG_BLOCK_FROM_STRUCT(
		animation_sync_action_block_block,
		"animation_sync_action_block",
		"animation_sync_action_block",
		32,
		animation_sync_action_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_sync_action_group_block_block,
		"animation_sync_action_group_block",
		"animation_sync_action_group_block",
		16,
		animation_sync_action_group_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_sync_action_other_type_participant_block,
		"animation_sync_action_other_type_participant",
		"animation_sync_action_other_type_participant",
		6,
		animation_sync_action_other_type_participant);

	TAG_BLOCK_FROM_STRUCT(
		animation_sync_action_same_type_participant_block,
		"animation_sync_action_same_type_participant",
		"animation_sync_action_same_type_participant",
		6,
		animation_sync_action_same_type_participant);

	TAG_BLOCK_FROM_STRUCT(
		animation_transition_destination_block_block,
		"animation_transition_destination_block",
		"animation_transition_destination_block",
		32,
		animation_transition_destination_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_transition_source_block_block,
		"animation_transition_source_block",
		"animation_transition_source_block",
		256,
		animation_transition_source_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		animation_usage_block_block,
		"animation_usage_block",
		"animation_usage_block",
		25,
		animation_usage_block);

	TAG_BLOCK_FROM_STRUCT(
		animation_velocity_boundaries_block_block,
		"animation_velocity_boundaries_block",
		"animation_velocity_boundaries_block",
		1,
		animation_velocity_boundaries_block);

	TAG_BLOCK_FROM_STRUCT(
		antenna_block_group_block,
		"antenna_block",
		"antenna_block",
		1,
		antenna_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		antenna_vertex_block_block,
		"antenna_vertex_block",
		"antenna_vertex_block",
		20,
		antenna_vertex_block);

	TAG_BLOCK_FROM_STRUCT(
		anti_gravity_point_definition_block_block,
		"anti_gravity_point_definition_block",
		"anti_gravity_point_definition_block",
		16,
		anti_gravity_point_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		area_control_block_block,
		"area_control_block",
		"area_control_block",
		1,
		area_control_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		area_reference_block_block,
		"area_reference_block",
		"area_reference_block",
		64,
		area_reference_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		area_screen_effect_block_group_block,
		"area_screen_effect_block",
		"area_screen_effect_block",
		1,
		area_screen_effect_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		area_sector_point_block_block,
		"area_sector_point_block",
		"area_sector_point_block",
		32,
		area_sector_point_block);

	TAG_BLOCK_FROM_STRUCT(
		areas_block_block,
		"areas_block",
		"areas_block",
		128,
		areas_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		armor_modifier_block_block,
		"armor_modifier_block",
		"armor_modifier_block",
		512,
		armor_modifier_block);

	TAG_BLOCK_FROM_STRUCT(
		armormod_globals_block_group_block,
		"armormod_globals_block",
		"armormod_globals_block",
		1,
		armormod_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		atmosphere_definition_block_group_block,
		"atmosphere_definition_block",
		"atmosphere_definition_block",
		16,
		atmosphere_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		atmosphere_globals_block_group_block,
		"atmosphere_globals_block",
		"atmosphere_globals_block",
		1,
		atmosphere_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		attachment_block_block,
		"attachment_block",
		"attachment_block",
		4,
		attachment_block);

	TAG_BLOCK_FROM_STRUCT(
		aural_enhancement_audio_settings_block_block,
		"aural_enhancement_audio_settings_block",
		"aural_enhancement_audio_settings_block",
		1,
		aural_enhancement_audio_settings_block);

	TAG_BLOCK_FROM_STRUCT(
		authored_light_probe_block_group_block,
		"authored_light_probe_block",
		"authored_light_probe_block",
		1,
		authored_light_probe_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		authored_light_probe_lights_block_block,
		"authored_light_probe_lights_block",
		"authored_light_probe_lights_block",
		1,
		authored_light_probe_lights_block);

	TAG_BLOCK_FROM_STRUCT(
		avatar_awards_block_group_block,
		"avatar_awards_block",
		"avatar_awards_block",
		1,
		avatar_awards_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ball_and_socket_constraints_block_block,
		"ball_and_socket_constraints_block",
		"ball_and_socket_constraints_block",
		64,
		ball_and_socket_constraints_block);

	TAG_BLOCK_FROM_STRUCT(
		barrel_firing_effect_block_block,
		"barrel_firing_effect_block",
		"barrel_firing_effect_block",
		5,
		barrel_firing_effect_block);

	TAG_BLOCK_FROM_STRUCT(
		behavior_names_block_block,
		"behavior_names_block",
		"behavior_names_block",
		256,
		behavior_names_block);

	TAG_BLOCK_FROM_STRUCT(
		big_battle_creature_block_group_block,
		"big_battle_creature_block",
		"big_battle_creature_block",
		1,
		big_battle_creature_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		big_battle_creature_palette_block_block,
		"big_battle_creature_palette_block",
		"big_battle_creature_palette_block",
		256,
		big_battle_creature_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		binding_conversion_long_comparison_block_definition_block,
		"binding_conversion_long_comparison_block_definition",
		"binding_conversion_long_comparison_block_definition",
		1024,
		binding_conversion_long_comparison_block_definition);

	TAG_BLOCK_FROM_STRUCT(
		binkpaletteblock_block,
		"binkPaletteBlock",
		"binkPaletteBlock",
		32,
		binkpaletteblock);

	TAG_BLOCK_FROM_STRUCT(
		bink_block_group_block,
		"bink_block",
		"bink_block",
		1,
		bink_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		bink_block_index_flags_block_block,
		"bink_block_index_flags_block",
		"bink_block_index_flags_block",
		32,
		bink_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		biped_block_group_block,
		"biped",
		"biped_block",
		1,
		biped_group$2);

	TAG_BLOCK_FROM_STRUCT(
		biped_block_index_flags_block_block,
		"biped_block_index_flags_block",
		"biped_block_index_flags_block",
		256,
		biped_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		biped_camera_height_block_block,
		"biped_camera_height_block",
		"biped_camera_height_block",
		16,
		biped_camera_height_block);

	TAG_BLOCK_FROM_STRUCT(
		biped_grab_object_animation_set_block_block,
		"biped_grab_object_animation_set_block",
		"biped_grab_object_animation_set_block",
		16,
		biped_grab_object_animation_set_block);

	TAG_BLOCK_FROM_STRUCT(
		biped_movement_gate_block_block,
		"biped_movement_gate_block",
		"biped_movement_gate_block",
		16,
		biped_movement_gate_block);

	TAG_BLOCK_FROM_STRUCT(
		biped_wall_proximity_block_block,
		"biped_wall_proximity_block",
		"biped_wall_proximity_block",
		4,
		biped_wall_proximity_block);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_block_group_block,
		"bitmap_block",
		"bitmap_block",
		1,
		bitmap_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_data_block_def_block,
		"bitmap_data_block_def",
		"bitmap_data_block_def",
		65536,
		bitmap_data_block_def);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_group_sequence_block_def_block,
		"bitmap_group_sequence_block_def",
		"bitmap_group_sequence_block_def",
		256,
		bitmap_group_sequence_block_def);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_group_sprite_block_def_block,
		"bitmap_group_sprite_block_def",
		"bitmap_group_sprite_block_def",
		128,
		bitmap_group_sprite_block_def);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_texture_interleaved_interop_block_block,
		"bitmap_texture_interleaved_interop_block",
		"bitmap_texture_interleaved_interop_block",
		65536,
		bitmap_texture_interleaved_interop_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_texture_interop_block_block,
		"bitmap_texture_interop_block",
		"bitmap_texture_interop_block",
		65536,
		bitmap_texture_interop_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_tight_bounds_block_def_block,
		"bitmap_tight_bounds_block_def",
		"bitmap_tight_bounds_block_def",
		20,
		bitmap_tight_bounds_block_def);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_usage_block_block,
		"bitmap_usage_block",
		"bitmap_usage_block",
		1,
		bitmap_usage_block);

	TAG_BLOCK_FROM_STRUCT(
		blend_screen_item_definition_block_block,
		"blend_screen_item_definition_block",
		"blend_screen_item_definition_block",
		10,
		blend_screen_item_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		boarding_seat_block_block,
		"boarding_seat_block",
		"boarding_seat_block",
		64,
		boarding_seat_block);

	TAG_BLOCK_FROM_STRUCT(
		boat_block_block,
		"boat_block",
		"boat_block",
		1,
		boat_block);

	TAG_BLOCK_FROM_STRUCT(
		boat_engine_definition_block_block,
		"boat_engine_definition_block",
		"boat_engine_definition_block",
		1,
		boat_engine_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		boxes_block_block,
		"boxes_block",
		"boxes_block",
		16384,
		boxes_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		breakable_surface_block_group_block,
		"breakable_surface_block",
		"breakable_surface_block",
		1,
		breakable_surface_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		breakable_surface_key_table_block_block,
		"breakable_surface_key_table_block",
		"breakable_surface_key_table_block",
		32767,
		breakable_surface_key_table_block);

	TAG_BLOCK_FROM_STRUCT(
		breakable_surface_set_block_block,
		"breakable_surface_set_block",
		"breakable_surface_set_block",
		2048,
		breakable_surface_set_block);

	TAG_BLOCK_FROM_STRUCT(
		brute_grenade_block_block,
		"brute_grenade_block",
		"brute_grenade_block",
		1,
		brute_grenade_block);

	TAG_BLOCK_FROM_STRUCT(
		bsp2d_nodes_block_block,
		"bsp2d_nodes_block",
		"bsp2d_nodes_block",
		32767,
		bsp2d_nodes_block);

	TAG_BLOCK_FROM_STRUCT(
		bsp2d_references_block_block,
		"bsp2d_references_block",
		"bsp2d_references_block",
		196608,
		bsp2d_references_block);

	TAG_BLOCK_FROM_STRUCT(
		bsp3d_kd_supdernodes_block_block,
		"bsp3d_kd_supdernodes_block",
		"bsp3d_kd_supdernodes_block",
		2048,
		bsp3d_kd_supdernodes_block);

	TAG_BLOCK_FROM_STRUCT(
		bsp3d_nodes_block_block,
		"bsp3d_nodes_block",
		"bsp3d_nodes_block",
		8388608,
		bsp3d_nodes_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		bsp_cluster_to_room_bounds_block,
		"bsp_cluster_to_room_bounds",
		"bsp_cluster_to_room_bounds",
		32,
		bsp_cluster_to_room_bounds);

	TAG_BLOCK_FROM_STRUCT(
		bsp_cluster_to_room_indices_block,
		"bsp_cluster_to_room_indices",
		"bsp_cluster_to_room_indices",
		1024,
		bsp_cluster_to_room_indices);

	TAG_BLOCK_FROM_STRUCT(
		bsp_preplaced_decal_reference_block_block,
		"bsp_preplaced_decal_reference_block",
		"bsp_preplaced_decal_reference_block",
		6144,
		bsp_preplaced_decal_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		bsp_preplaced_decal_set_reference_block_block,
		"bsp_preplaced_decal_set_reference_block",
		"bsp_preplaced_decal_set_reference_block",
		6144,
		bsp_preplaced_decal_set_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		budget_reference_block_index_flags_block_block,
		"budget_reference_block_index_flags_block",
		"budget_reference_block_index_flags_block",
		1024,
		budget_reference_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		byte_block_block,
		"byte_block",
		"byte_block",
		1024,
		byte_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_bsp_attachment_block_block,
		"cache_file_bsp_attachment_block",
		"cache_file_bsp_attachment_block",
		32767,
		cache_file_bsp_attachment_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_bsp_game_attachments_block_block,
		"cache_file_bsp_game_attachments_block",
		"cache_file_bsp_game_attachments_block",
		32,
		cache_file_bsp_game_attachments_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_bsp_reference_block_block,
		"cache_file_bsp_reference_block",
		"cache_file_bsp_reference_block",
		32,
		cache_file_bsp_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_bsp_zone_block_block,
		"cache_file_bsp_zone_block",
		"cache_file_bsp_zone_block",
		32,
		cache_file_tag_zone_manifest_struct);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_character_usage_block_block,
		"cache_file_character_usage_block",
		"cache_file_character_usage_block",
		32767,
		cache_file_character_usage_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_cinematic_zone_block_block,
		"cache_file_cinematic_zone_block",
		"cache_file_cinematic_zone_block",
		32,
		cache_file_tag_zone_manifest_struct);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_codec_identifier_block_block,
		"cache_file_codec_identifier_block",
		"cache_file_codec_identifier_block",
		127,
		cache_file_codec_identifier_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_debug_resource_definition_block_block,
		"cache_file_debug_resource_definition_block",
		"cache_file_debug_resource_definition_block",
		16,
		cache_file_debug_resource_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_designer_zone_block_block,
		"cache_file_designer_zone_block",
		"cache_file_designer_zone_block",
		64,
		cache_file_tag_zone_manifest_struct);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_full_zone_sets_block_block,
		"cache_file_full_zone_sets_block",
		"cache_file_full_zone_sets_block",
		64,
		cache_file_tag_zone_manifest_struct);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_global_zone_block_block,
		"cache_file_global_zone_block",
		"cache_file_global_zone_block",
		1,
		cache_file_tag_zone_manifest_struct);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_interop_type_identifier_block_block,
		"cache_file_interop_type_identifier_block",
		"cache_file_interop_type_identifier_block",
		16,
		cache_file_interop_type_identifier_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_model_variant_usage_block_block,
		"cache_file_model_variant_usage_block",
		"cache_file_model_variant_usage_block",
		32767,
		cache_file_model_variant_usage_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_model_variant_usage_reference_block_block,
		"cache_file_model_variant_usage_reference_block",
		"cache_file_model_variant_usage_reference_block",
		32767,
		cache_file_model_variant_usage_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_resource_data_block_block,
		"cache_file_resource_data_block",
		"cache_file_resource_data_block",
		32767,
		cache_file_resource_data_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_resource_file_page_block_block,
		"cache_file_resource_file_page_block",
		"cache_file_resource_file_page_block",
		65535,
		cache_file_resource_page_struct);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_resource_fixup_location_block_block,
		"cache_file_resource_fixup_location_block",
		"cache_file_resource_fixup_location_block",
		32767,
		cache_file_resource_fixup_location_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_resource_gestalt_block_group_block,
		"cache_file_resource_gestalt_block",
		"cache_file_resource_gestalt_block",
		1,
		cache_file_resource_gestalt_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_resource_interop_location_block_block,
		"cache_file_resource_interop_location_block",
		"cache_file_resource_interop_location_block",
		32767,
		cache_file_resource_interop_location_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_resource_layout_block_block,
		"cache_file_resource_layout_block",
		"cache_file_resource_layout_block",
		32767,
		cache_file_resource_layout_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_resource_layout_table_block_group_block,
		"cache_file_resource_layout_table_block",
		"cache_file_resource_layout_table_block",
		1,
		cache_file_resource_layout_table_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_resource_owner_block_block,
		"cache_file_resource_owner_block",
		"cache_file_resource_owner_block",
		32767,
		cache_file_resource_owner_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_resource_owner_reference_block_block,
		"cache_file_resource_owner_reference_block",
		"cache_file_resource_owner_reference_block",
		32767,
		cache_file_resource_owner_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_resource_priority_data_block_block,
		"cache_file_resource_priority_data_block",
		"cache_file_resource_priority_data_block",
		3,
		cache_file_resource_priority_data_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_resource_section_block_block,
		"cache_file_resource_section_block",
		"cache_file_resource_section_block",
		32767,
		cache_file_resource_section_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_resource_streaming_subpage_block_block,
		"cache_file_resource_streaming_subpage_block",
		"cache_file_resource_streaming_subpage_block",
		32767,
		cache_file_resource_streaming_subpage_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_resource_streaming_subpage_table_block_block,
		"cache_file_resource_streaming_subpage_table_block",
		"cache_file_resource_streaming_subpage_table_block",
		32767,
		cache_file_resource_streaming_subpage_table_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_resource_type_identifier_block_block,
		"cache_file_resource_type_identifier_block",
		"cache_file_resource_type_identifier_block",
		16,
		cache_file_resource_type_identifier_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_shared_file_block_block,
		"cache_file_shared_file_block",
		"cache_file_shared_file_block",
		7,
		cache_file_shared_file_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_sound_block_group_block,
		"cache_file_sound_block",
		"cache_file_sound_block",
		1,
		cache_file_sound_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_tag_parentage_block_block,
		"cache_file_tag_parentage_block",
		"cache_file_tag_parentage_block",
		65534,
		cache_file_tag_parentage_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_tag_parentage_reference_block_block,
		"cache_file_tag_parentage_reference_block",
		"cache_file_tag_parentage_reference_block",
		65534,
		cache_file_tag_parentage_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_tag_resource_named_value_block_block,
		"cache_file_tag_resource_named_value_block",
		"cache_file_tag_resource_named_value_block",
		4096,
		cache_file_tag_resource_named_value_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_tag_resource_prediction_atom_block_block,
		"cache_file_tag_resource_prediction_atom_block",
		"cache_file_tag_resource_prediction_atom_block",
		32767,
		cache_file_tag_resource_prediction_atom_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_tag_resource_prediction_molecule_atom_reference_block_block,
		"cache_file_tag_resource_prediction_molecule_atom_reference_block",
		"cache_file_tag_resource_prediction_molecule_atom_reference_block",
		32767,
		cache_file_tag_resource_prediction_molecule_atom_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_tag_resource_prediction_molecule_block_block,
		"cache_file_tag_resource_prediction_molecule_block",
		"cache_file_tag_resource_prediction_molecule_block",
		32767,
		cache_file_tag_resource_prediction_molecule_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_tag_resource_prediction_molecule_keys_block_block,
		"cache_file_tag_resource_prediction_molecule_keys_block",
		"cache_file_tag_resource_prediction_molecule_keys_block",
		8192,
		cache_file_tag_resource_prediction_molecule_keys_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_tag_resource_prediction_quantum_block_block,
		"cache_file_tag_resource_prediction_quantum_block",
		"cache_file_tag_resource_prediction_quantum_block",
		61440,
		cache_file_tag_resource_prediction_quantum_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_tag_resource_properties_block_block,
		"cache_file_tag_resource_properties_block",
		"cache_file_tag_resource_properties_block",
		32767,
		cache_file_tag_resource_properties_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_tag_resource_usage_block_block,
		"cache_file_tag_resource_usage_block",
		"cache_file_tag_resource_usage_block",
		16,
		cache_file_tag_resource_usage_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_tag_resources_bitvector_block_block,
		"cache_file_tag_resources_bitvector_block",
		"cache_file_tag_resources_bitvector_block",
		32767,
		cache_file_tag_resources_bitvector_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_tag_zone_block_block,
		"cache_file_tag_zone_block",
		"cache_file_tag_zone_block",
		32767,
		cache_file_tag_zone_manifest_struct);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_zone_resource_visit_node_block_block,
		"cache_file_zone_resource_visit_node_block",
		"cache_file_zone_resource_visit_node_block",
		32767,
		cache_file_zone_resource_visit_node_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_zone_resource_visit_node_link_block_block,
		"cache_file_zone_resource_visit_node_link_block",
		"cache_file_zone_resource_visit_node_link_block",
		32767,
		cache_file_zone_resource_visit_node_link_block);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_zone_set_zone_usage_block_block,
		"cache_file_zone_set_zone_usage_block",
		"cache_file_zone_set_zone_usage_block",
		64,
		cache_file_zone_set_zone_usage_block);

	TAG_BLOCK_FROM_STRUCT(
		camera_block_block,
		"camera_block",
		"camera_block",
		1,
		camera_block);

	TAG_BLOCK_FROM_STRUCT(
		camera_fx_settings_block_group_block,
		"camera_fx_settings_block",
		"camera_fx_settings_block",
		1,
		camera_fx_settings_block);

	TAG_BLOCK_FROM_STRUCT(
		camera_shake_block_group_block,
		"camera_shake_block",
		"camera_shake_block",
		1,
		camera_shake_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		camera_track_block_group_block,
		"camera_track_block",
		"camera_track_block",
		1,
		camera_track_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		camera_track_control_point_block_block,
		"camera_track_control_point_block",
		"camera_track_control_point_block",
		16,
		camera_track_control_point_block);

	TAG_BLOCK_FROM_STRUCT(
		camo_block_group_block,
		"camo_block",
		"camo_block",
		1,
		camo_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		campaign_metagame_bucket_block_block,
		"campaign_metagame_bucket_block",
		"campaign_metagame_bucket_block",
		1,
		campaign_metagame_bucket_block);

	TAG_BLOCK_FROM_STRUCT(
		campaign_metagame_difficulty_scale_block_block,
		"campaign_metagame_difficulty_scale_block",
		"campaign_metagame_difficulty_scale_block",
		4,
		campaign_metagame_difficulty_scale_block);

	TAG_BLOCK_FROM_STRUCT(
		campaign_metagame_globals_block_block,
		"campaign_metagame_globals_block",
		"campaign_metagame_globals_block",
		1,
		campaign_metagame_globals_block);

	TAG_BLOCK_FROM_STRUCT(
		campaign_metagame_scenario_block_block,
		"campaign_metagame_scenario_block",
		"campaign_metagame_scenario_block",
		1,
		campaign_metagame_scenario_block);

	TAG_BLOCK_FROM_STRUCT(
		campaign_metagame_scenario_bonuses_block_block,
		"campaign_metagame_scenario_bonuses_block",
		"campaign_metagame_scenario_bonuses_block",
		8,
		campaign_metagame_scenario_bonuses_block);

	TAG_BLOCK_FROM_STRUCT(
		campaign_metagame_skull_block_block,
		"campaign_metagame_skull_block",
		"campaign_metagame_skull_block",
		17,
		campaign_metagame_skull_block);

	TAG_BLOCK_FROM_STRUCT(
		campaign_metagame_style_type_block_block,
		"campaign_metagame_style_type_block",
		"campaign_metagame_style_type_block",
		100,
		campaign_metagame_style_type_block);

	TAG_BLOCK_FROM_STRUCT(
		campaign_state_screen_script_block_definition_block,
		"campaign_state_screen_script_block_definition",
		"campaign_state_screen_script_block_definition",
		64,
		campaign_state_screen_script_block_definition);

	TAG_BLOCK_FROM_STRUCT(
		campaign_unspatialized_sounds_block_block,
		"campaign_unspatialized_sounds_block",
		"campaign_unspatialized_sounds_block",
		64,
		campaign_unspatialized_sounds_block);

	TAG_BLOCK_FROM_STRUCT(
		cell_block_block,
		"cell_block",
		"cell_block",
		10,
		cell_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cell_template_block_block,
		"cell_template_block",
		"cell_template_block",
		10,
		cell_template_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cellular_automata2d_block_group_block,
		"cellular_automata2d_block",
		"cellular_automata2d_block",
		1,
		cellular_automata2d_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cellular_automata_block_group_block,
		"cellular_automata_block",
		"cellular_automata_block",
		1,
		cellular_automata_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		challenge_block_block,
		"challenge_block",
		"challenge_block",
		200,
		challenge_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		challenge_category_block_block,
		"challenge_category_block",
		"challenge_category_block",
		5,
		challenge_category_block);

	TAG_BLOCK_FROM_STRUCT(
		challenge_globals_definition_block_group_block,
		"challenge_globals_definition_block",
		"challenge_globals_definition_block",
		1,
		challenge_globals_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		characterhopdefinitionblock_block,
		"characterHopDefinitionBlock",
		"characterHopDefinitionBlock",
		1,
		characterhopdefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		character_activity_object_block_block,
		"character_activity_object_block",
		"character_activity_object_block",
		32,
		character_activity_object_block);

	TAG_BLOCK_FROM_STRUCT(
		character_advance_block_block,
		"character_advance_block",
		"character_advance_block",
		1,
		character_advance_block);

	TAG_BLOCK_FROM_STRUCT(
		character_bishop_block_block,
		"character_bishop_block",
		"character_bishop_block",
		1,
		character_bishop_block);

	TAG_BLOCK_FROM_STRUCT(
		character_block_group_block,
		"character_block",
		"character_block",
		1,
		character_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_block_index_flags_block_block,
		"character_block_index_flags_block",
		"character_block_index_flags_block",
		64,
		character_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		character_boarding_block_block,
		"character_boarding_block",
		"character_boarding_block",
		1,
		character_boarding_block);

	TAG_BLOCK_FROM_STRUCT(
		character_bunker_block_block,
		"character_bunker_block",
		"character_bunker_block",
		1,
		character_bunker_block);

	TAG_BLOCK_FROM_STRUCT(
		character_charge_block_block,
		"character_charge_block",
		"character_charge_block",
		1,
		character_charge_block);

	TAG_BLOCK_FROM_STRUCT(
		character_charge_difficulty_limits_block_block,
		"character_charge_difficulty_limits_block",
		"character_charge_difficulty_limits_block",
		4,
		character_charge_difficulty_limits_block);

	TAG_BLOCK_FROM_STRUCT(
		character_combatform_block_block,
		"character_combatform_block",
		"character_combatform_block",
		1,
		character_combatform_block);

	TAG_BLOCK_FROM_STRUCT(
		character_combotron_child_block_block,
		"character_combotron_child_block",
		"character_combotron_child_block",
		1,
		character_combotron_child_block);

	TAG_BLOCK_FROM_STRUCT(
		character_combotron_parent_block_block,
		"character_combotron_parent_block",
		"character_combotron_parent_block",
		1,
		character_combotron_parent_block);

	TAG_BLOCK_FROM_STRUCT(
		character_cover_block_block,
		"character_cover_block",
		"character_cover_block",
		1,
		character_cover_block);

	TAG_BLOCK_FROM_STRUCT(
		character_cover_evasion_block_block,
		"character_cover_evasion_block",
		"character_cover_evasion_block",
		1,
		character_cover_evasion_block);

	TAG_BLOCK_FROM_STRUCT(
		character_cover_fight_block_block,
		"character_cover_fight_block",
		"character_cover_fight_block",
		1,
		character_cover_fight_block);

	TAG_BLOCK_FROM_STRUCT(
		character_distribution_block_block,
		"character_distribution_block",
		"character_distribution_block",
		8,
		character_distribution_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		character_emerge_block_block,
		"character_emerge_block",
		"character_emerge_block",
		1,
		character_emerge_block);

	TAG_BLOCK_FROM_STRUCT(
		character_emotions_block_block,
		"character_emotions_block",
		"character_emotions_block",
		1,
		character_emotions_block);

	TAG_BLOCK_FROM_STRUCT(
		character_emotions_situational_danger_block_block,
		"character_emotions_situational_danger_block",
		"character_emotions_situational_danger_block",
		14,
		character_emotions_situational_danger_block);

	TAG_BLOCK_FROM_STRUCT(
		character_engage_block_block,
		"character_engage_block",
		"character_engage_block",
		1,
		character_engage_block);

	TAG_BLOCK_FROM_STRUCT(
		character_engineer_block_block,
		"character_engineer_block",
		"character_engineer_block",
		1,
		character_engineer_block);

	TAG_BLOCK_FROM_STRUCT(
		character_equipment_block_block,
		"character_equipment_block",
		"character_equipment_block",
		8,
		character_equipment_block);

	TAG_BLOCK_FROM_STRUCT(
		character_equipment_usage_block_block,
		"character_equipment_usage_block",
		"character_equipment_usage_block",
		8,
		character_equipment_usage_block);

	TAG_BLOCK_FROM_STRUCT(
		character_evasion_block_block,
		"character_evasion_block",
		"character_evasion_block",
		1,
		character_evasion_block);

	TAG_BLOCK_FROM_STRUCT(
		character_fight_circle_block_block,
		"character_fight_circle_block",
		"character_fight_circle_block",
		1,
		character_fight_circle_block);

	TAG_BLOCK_FROM_STRUCT(
		character_firing_pattern_block_block,
		"character_firing_pattern_block",
		"character_firing_pattern_block",
		4,
		character_firing_pattern_block);

	TAG_BLOCK_FROM_STRUCT(
		character_firing_pattern_properties_block_block,
		"character_firing_pattern_properties_block",
		"character_firing_pattern_properties_block",
		100,
		character_firing_pattern_properties_block);

	TAG_BLOCK_FROM_STRUCT(
		character_firing_point_evaluator_block_block,
		"character_firing_point_evaluator_block",
		"character_firing_point_evaluator_block",
		11,
		character_firing_point_evaluator_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		character_flocking_block_block,
		"character_flocking_block",
		"character_flocking_block",
		1,
		character_flocking_block);

	TAG_BLOCK_FROM_STRUCT(
		character_flying_movement_block_block,
		"character_flying_movement_block",
		"character_flying_movement_block",
		32,
		character_flying_movement_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		character_forerunner_block_block,
		"character_forerunner_block",
		"character_forerunner_block",
		1,
		character_forerunner_block);

	TAG_BLOCK_FROM_STRUCT(
		character_general_block_block,
		"character_general_block",
		"character_general_block",
		1,
		character_general_block);

	TAG_BLOCK_FROM_STRUCT(
		character_gravity_jump_block_block,
		"character_gravity_jump_block",
		"character_gravity_jump_block",
		1,
		character_gravity_jump_block);

	TAG_BLOCK_FROM_STRUCT(
		character_grenades_block_block,
		"character_grenades_block",
		"character_grenades_block",
		10,
		character_grenades_block);

	TAG_BLOCK_FROM_STRUCT(
		character_guardian_block_block,
		"character_guardian_block",
		"character_guardian_block",
		1,
		character_guardian_block);

	TAG_BLOCK_FROM_STRUCT(
		character_hamstring_charge_block_block,
		"character_hamstring_charge_block",
		"character_hamstring_charge_block",
		1,
		character_hamstring_charge_block);

	TAG_BLOCK_FROM_STRUCT(
		character_handle_dismemberment_block_block,
		"character_handle_dismemberment_block",
		"character_handle_dismemberment_block",
		1,
		character_handle_dismemberment_block);

	TAG_BLOCK_FROM_STRUCT(
		character_hopping_block_block,
		"character_hopping_block",
		"character_hopping_block",
		1,
		character_hopping_block);

	TAG_BLOCK_FROM_STRUCT(
		character_idle_block_block,
		"character_idle_block",
		"character_idle_block",
		1,
		character_idle_block);

	TAG_BLOCK_FROM_STRUCT(
		character_inspect_block_block,
		"character_inspect_block",
		"character_inspect_block",
		1,
		character_inspect_block);

	TAG_BLOCK_FROM_STRUCT(
		character_interact_block_block,
		"character_interact_block",
		"character_interact_block",
		1,
		character_interact_block);

	TAG_BLOCK_FROM_STRUCT(
		character_kungfu_block_block,
		"character_kungfu_block",
		"character_kungfu_block",
		1,
		character_kungfu_block);

	TAG_BLOCK_FROM_STRUCT(
		character_look_block_block,
		"character_look_block",
		"character_look_block",
		1,
		character_look_block);

	TAG_BLOCK_FROM_STRUCT(
		character_morph_block_block,
		"character_morph_block",
		"character_morph_block",
		1,
		character_morph_block);

	TAG_BLOCK_FROM_STRUCT(
		character_movement_block_block,
		"character_movement_block",
		"character_movement_block",
		1,
		character_movement_block);

	TAG_BLOCK_FROM_STRUCT(
		character_movement_set_block_block,
		"character_movement_set_block",
		"character_movement_set_block",
		8,
		character_movement_set_block);

	TAG_BLOCK_FROM_STRUCT(
		character_pack_stalk_block_block,
		"character_pack_stalk_block",
		"character_pack_stalk_block",
		1,
		character_pack_stalk_block);

	TAG_BLOCK_FROM_STRUCT(
		character_pain_screen_block_block,
		"character_pain_screen_block",
		"character_pain_screen_block",
		1,
		character_pain_screen_block);

	TAG_BLOCK_FROM_STRUCT(
		character_palette_block_block,
		"character_palette_block",
		"character_palette_block",
		64,
		character_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		character_palette_choice_block_block,
		"character_palette_choice_block",
		"character_palette_choice_block",
		8,
		character_palette_choice_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		character_perception_block_block,
		"character_perception_block",
		"character_perception_block",
		8,
		character_perception_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		character_placement_block_block,
		"character_placement_block",
		"character_placement_block",
		1,
		character_placement_block);

	TAG_BLOCK_FROM_STRUCT(
		character_presearch_block_block,
		"character_presearch_block",
		"character_presearch_block",
		1,
		character_presearch_block);

	TAG_BLOCK_FROM_STRUCT(
		character_proto_spawn_block_block,
		"character_proto_spawn_block",
		"character_proto_spawn_block",
		1,
		character_proto_spawn_block);

	TAG_BLOCK_FROM_STRUCT(
		character_ready_block_block,
		"character_ready_block",
		"character_ready_block",
		1,
		character_ready_block);

	TAG_BLOCK_FROM_STRUCT(
		character_ref_choice_block_block,
		"character_ref_choice_block",
		"character_ref_choice_block",
		8,
		character_ref_choice_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		character_retreat_block_block,
		"character_retreat_block",
		"character_retreat_block",
		1,
		character_retreat_block);

	TAG_BLOCK_FROM_STRUCT(
		character_scarab_block_block,
		"character_scarab_block",
		"character_scarab_block",
		1,
		character_scarab_block);

	TAG_BLOCK_FROM_STRUCT(
		character_search_block_block,
		"character_search_block",
		"character_search_block",
		1,
		character_search_block);

	TAG_BLOCK_FROM_STRUCT(
		character_stimuli_response_block_block,
		"character_stimuli_response_block",
		"character_stimuli_response_block",
		16,
		character_stimuli_response_block);

	TAG_BLOCK_FROM_STRUCT(
		character_swarm_block_block,
		"character_swarm_block",
		"character_swarm_block",
		1,
		character_swarm_block);

	TAG_BLOCK_FROM_STRUCT(
		character_target_block_block,
		"character_target_block",
		"character_target_block",
		1,
		character_target_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		character_throttle_style_block_block,
		"character_throttle_style_block",
		"character_throttle_style_block",
		256,
		character_throttle_style_block);

	TAG_BLOCK_FROM_STRUCT(
		character_variants_block_block,
		"character_variants_block",
		"character_variants_block",
		64,
		character_variants_block);

	TAG_BLOCK_FROM_STRUCT(
		character_vehicle_block_block,
		"character_vehicle_block",
		"character_vehicle_block",
		100,
		character_vehicle_block);

	TAG_BLOCK_FROM_STRUCT(
		character_vehicle_boarding_block_block,
		"character_vehicle_boarding_block",
		"character_vehicle_boarding_block",
		32,
		character_vehicle_boarding_block);

	TAG_BLOCK_FROM_STRUCT(
		character_vitality_block_block,
		"character_vitality_block",
		"character_vitality_block",
		1,
		character_vitality_block);

	TAG_BLOCK_FROM_STRUCT(
		character_vocalization_block_block,
		"character_vocalization_block",
		"character_vocalization_block",
		1,
		character_vocalization_block);

	TAG_BLOCK_FROM_STRUCT(
		character_voice_block_block,
		"character_voice_block",
		"character_voice_block",
		64,
		character_voice_block);

	TAG_BLOCK_FROM_STRUCT(
		character_voice_properties_block_block,
		"character_voice_properties_block",
		"character_voice_properties_block",
		1,
		character_voice_properties_block);

	TAG_BLOCK_FROM_STRUCT(
		character_voice_region_filter_block_block,
		"character_voice_region_filter_block",
		"character_voice_region_filter_block",
		32,
		character_voice_region_filter_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		character_voice_region_permutation_filter_block_block,
		"character_voice_region_permutation_filter_block",
		"character_voice_region_permutation_filter_block",
		255,
		character_voice_region_permutation_filter_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		character_weapons_block_block,
		"character_weapons_block",
		"character_weapons_block",
		100,
		character_weapons_block);

	TAG_BLOCK_FROM_STRUCT(
		cheapparticleturbulencetypeblock_block,
		"cheapParticleTurbulenceTypeBlock",
		"cheapParticleTurbulenceTypeBlock",
		8,
		cheapparticleturbulencetypeblock);

	TAG_BLOCK_FROM_STRUCT(
		cheap_light_block_group_block,
		"cheap_light_block",
		"cheap_light_block",
		1,
		cheap_light_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cheap_light_marker_ref_block_block,
		"cheap_light_marker_ref_block",
		"cheap_light_marker_ref_block",
		1024,
		cheap_light_marker_ref_block);

	TAG_BLOCK_FROM_STRUCT(
		cheap_light_reference_block_block,
		"cheap_light_reference_block",
		"cheap_light_reference_block",
		1024,
		cheap_light_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		cheap_particle_bitmap_reference_block_block,
		"cheap_particle_bitmap_reference_block",
		"cheap_particle_bitmap_reference_block",
		63,
		cheap_particle_bitmap_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		cheap_particle_emitter_block_group_block,
		"cheap_particle_emitter_block",
		"cheap_particle_emitter_block",
		1,
		cheap_particle_emitter_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cheap_particle_type_block_block,
		"cheap_particle_type_block",
		"cheap_particle_type_block",
		255,
		cheap_particle_type_block);

	TAG_BLOCK_FROM_STRUCT(
		cheap_particle_type_library_block_group_block,
		"cheap_particle_type_library_block",
		"cheap_particle_type_library_block",
		1,
		cheap_particle_type_library_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cheat_powerups_block_block,
		"cheat_powerups_block",
		"cheat_powerups_block",
		20,
		cheat_powerups_block);

	TAG_BLOCK_FROM_STRUCT(
		cheat_weapons_block_block,
		"cheat_weapons_block",
		"cheat_weapons_block",
		20,
		cheat_weapons_block);

	TAG_BLOCK_FROM_STRUCT(
		chopper_block_block,
		"chopper_block",
		"chopper_block",
		1,
		chopper_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematicdatashotblock_block,
		"cinematicDataShotBlock",
		"cinematicDataShotBlock",
		64,
		cinematicdatashotblock);

	TAG_BLOCK_FROM_STRUCT(
		cinematicscenedataobjectblock_block,
		"cinematicSceneDataObjectBlock",
		"cinematicSceneDataObjectBlock",
		10000,
		cinematicscenedataobjectblock_struct);

	TAG_BLOCK_FROM_STRUCT(
		cinematicshottexturemovieblock_block,
		"cinematicShotTextureMovieBlock",
		"cinematicShotTextureMovieBlock",
		10000,
		cinematicshottexturemovieblock);

	TAG_BLOCK_FROM_STRUCT(
		cinematicstructurelightingblock_block,
		"cinematicStructureLightingBlock",
		"cinematicStructureLightingBlock",
		32,
		cinematicstructurelightingblock);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_block_group_block,
		"cinematic_block",
		"cinematic_block",
		1,
		cinematic_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_characters_block_block,
		"cinematic_characters_block",
		"cinematic_characters_block",
		16,
		cinematic_characters_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_dynamic_light_block_block,
		"cinematic_dynamic_light_block",
		"cinematic_dynamic_light_block",
		16,
		cinematic_dynamic_light_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_extra_camera_frame_block_block,
		"cinematic_extra_camera_frame_block",
		"cinematic_extra_camera_frame_block",
		10000,
		cinematic_extra_camera_frame_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_extra_camera_shot_block_block,
		"cinematic_extra_camera_shot_block",
		"cinematic_extra_camera_shot_block",
		10000,
		cinematic_extra_camera_shot_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_scene_block_group_block,
		"cinematic_scene_block",
		"cinematic_scene_block",
		1,
		cinematic_scene_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_scene_data_block_group_block,
		"cinematic_scene_data_block",
		"cinematic_scene_data_block",
		1,
		cinematic_scene_data_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_scene_object_block_block,
		"cinematic_scene_object_block",
		"cinematic_scene_object_block",
		10000,
		cinematic_scene_object_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_scene_reference_block_block,
		"cinematic_scene_reference_block",
		"cinematic_scene_reference_block",
		32,
		cinematic_scene_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_block_block,
		"cinematic_shot_block",
		"cinematic_shot_block",
		64,
		cinematic_shot_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_clip_block_block,
		"cinematic_shot_clip_block",
		"cinematic_shot_clip_block",
		32,
		cinematic_shot_clip_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_clip_subject_block_block,
		"cinematic_shot_clip_subject_block",
		"cinematic_shot_clip_subject_block",
		24,
		cinematic_shot_clip_subject_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_custom_script_block_block,
		"cinematic_shot_custom_script_block",
		"cinematic_shot_custom_script_block",
		10000,
		cinematic_shot_custom_script_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_dialogue_block_block,
		"cinematic_shot_dialogue_block",
		"cinematic_shot_dialogue_block",
		10000,
		cinematic_shot_dialogue_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_effect_block_block,
		"cinematic_shot_effect_block",
		"cinematic_shot_effect_block",
		10000,
		cinematic_shot_effect_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_extra_camera_block_block,
		"cinematic_shot_extra_camera_block",
		"cinematic_shot_extra_camera_block",
		10000,
		cinematic_shot_extra_camera_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_frame_block_block,
		"cinematic_shot_frame_block",
		"cinematic_shot_frame_block",
		10000,
		cinematic_shot_frame_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_frame_constant_block_block,
		"cinematic_shot_frame_constant_block",
		"cinematic_shot_frame_constant_block",
		10000,
		cinematic_shot_frame_constant_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_frame_dynamic_block_block,
		"cinematic_shot_frame_dynamic_block",
		"cinematic_shot_frame_dynamic_block",
		10000,
		cinematic_shot_frame_dynamic_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_lighting_block_block,
		"cinematic_shot_lighting_block",
		"cinematic_shot_lighting_block",
		10000,
		cinematic_shot_lighting_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_music_block_block,
		"cinematic_shot_music_block",
		"cinematic_shot_music_block",
		10000,
		cinematic_shot_music_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_object_function_block_block,
		"cinematic_shot_object_function_block",
		"cinematic_shot_object_function_block",
		10000,
		cinematic_shot_object_function_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_object_function_keyframe_block_block,
		"cinematic_shot_object_function_keyframe_block",
		"cinematic_shot_object_function_keyframe_block",
		10000,
		cinematic_shot_object_function_keyframe_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_playback_data_block_block,
		"cinematic_shot_playback_data_block",
		"cinematic_shot_playback_data_block",
		32,
		cinematic_shot_playback_data_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_screen_effect_block_block,
		"cinematic_shot_screen_effect_block",
		"cinematic_shot_screen_effect_block",
		10000,
		cinematic_shot_screen_effect_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_shot_user_input_constraints_block_block,
		"cinematic_shot_user_input_constraints_block",
		"cinematic_shot_user_input_constraints_block",
		10000,
		cinematic_shot_user_input_constraints_block);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_transition_block_group_block,
		"cinematic_transition_block",
		"cinematic_transition_block",
		1,
		cinematic_transition_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_transition_global_gain_block_block,
		"cinematic_transition_global_gain_block",
		"cinematic_transition_global_gain_block",
		1,
		cinematic_transition_global_gain_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_transition_looping_sound_reference_block_block,
		"cinematic_transition_looping_sound_reference_block",
		"cinematic_transition_looping_sound_reference_block",
		4,
		cinematic_transition_looping_sound_reference_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_transition_looping_sound_state_block_block,
		"cinematic_transition_looping_sound_state_block",
		"cinematic_transition_looping_sound_state_block",
		4,
		cinematic_transition_looping_sound_state_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_transition_sound_class_gain_block_block,
		"cinematic_transition_sound_class_gain_block",
		"cinematic_transition_sound_class_gain_block",
		8,
		cinematic_transition_sound_class_gain_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cinematic_transition_sound_reference_block_block,
		"cinematic_transition_sound_reference_block",
		"cinematic_transition_sound_reference_block",
		4,
		cinematic_transition_sound_reference_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cinematics_globals_block_block,
		"cinematics_globals_block",
		"cinematics_globals_block",
		1,
		cinematics_globals_block);

	TAG_BLOCK_FROM_STRUCT(
		cloth_block_group_block,
		"cloth_block",
		"cloth_block",
		1,
		cloth_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cloth_indices_block_block,
		"cloth_indices_block",
		"cloth_indices_block",
		1210,
		cloth_indices_block);

	TAG_BLOCK_FROM_STRUCT(
		cloth_links_block_block,
		"cloth_links_block",
		"cloth_links_block",
		1210,
		cloth_links_block);

	TAG_BLOCK_FROM_STRUCT(
		cloth_vertices_block_block,
		"cloth_vertices_block",
		"cloth_vertices_block",
		121,
		cloth_vertices_block);

	TAG_BLOCK_FROM_STRUCT(
		cluster_table_block_block,
		"cluster_table_block",
		"cluster_table_block",
		32767,
		cluster_table_block);

	TAG_BLOCK_FROM_STRUCT(
		cluster_wetness_offset_block_block,
		"cluster_wetness_offset_block",
		"cluster_wetness_offset_block",
		65535,
		cluster_wetness_offset_block);

	TAG_BLOCK_FROM_STRUCT(
		collision_bsp_physics_block_block,
		"collision_bsp_physics_block",
		"collision_bsp_physics_block",
		1024,
		collision_bsp_physics_block);

	TAG_BLOCK_FROM_STRUCT(
		collision_damage_block_group_block,
		"collision_damage_block",
		"collision_damage_block",
		1,
		collision_damage_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		collision_kd_hierarchy_static_hash_table_data_block_block,
		"collision_kd_hierarchy_static_hash_table_data_block",
		"collision_kd_hierarchy_static_hash_table_data_block",
		32767,
		collision_kd_hierarchy_static_hash_table_data_block);

	TAG_BLOCK_FROM_STRUCT(
		collision_kd_hierarchy_static_hash_table_headers_block_block,
		"collision_kd_hierarchy_static_hash_table_headers_block",
		"collision_kd_hierarchy_static_hash_table_headers_block",
		32767,
		collision_kd_hierarchy_static_hash_table_headers_block);

	TAG_BLOCK_FROM_STRUCT(
		collision_kd_hierarchy_static_hash_table_short_block_block,
		"collision_kd_hierarchy_static_hash_table_short_block",
		"collision_kd_hierarchy_static_hash_table_short_block",
		32767,
		collision_kd_hierarchy_static_hash_table_short_block);

	TAG_BLOCK_FROM_STRUCT(
		collision_kd_hierarchy_static_in_use_masks_block_block,
		"collision_kd_hierarchy_static_in_use_masks_block",
		"collision_kd_hierarchy_static_in_use_masks_block",
		2048,
		collision_kd_hierarchy_static_in_use_masks_block);

	TAG_BLOCK_FROM_STRUCT(
		collision_kd_hierarchy_static_nodes_block_block,
		"collision_kd_hierarchy_static_nodes_block",
		"collision_kd_hierarchy_static_nodes_block",
		32767,
		collision_kd_hierarchy_static_nodes_block);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_block_group_block,
		"collision_model_block",
		"collision_model_block",
		1,
		collision_model_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_bsp_block_block,
		"bsp",
		"collision_model_bsp_block",
		64,
		collision_model_bsp_struct);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_material_block_block,
		"material",
		"collision_model_material_block",
		32,
		collision_model_material_block);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_node_block_block,
		"collision_model_node_block",
		"collision_model_node_block",
		255,
		collision_model_node_block);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_pathfinding_sphere_block_block,
		"sphere",
		"collision_model_pathfinding_sphere_block",
		256,
		collision_model_pathfinding_sphere_block);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_permutation_block_block,
		"collision_model_permutation_block",
		"collision_model_permutation_block",
		255,
		collision_model_permutation_block);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_region_block_block,
		"region",
		"collision_model_region_block",
		32,
		collision_model_region_block);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_resource_bsp_block_block,
		"collision_model_resource_bsp_block",
		"collision_model_resource_bsp_block",
		522240,
		collision_model_bsp_struct);

	TAG_BLOCK_FROM_STRUCT(
		collision_sphere_block_block,
		"collision_sphere_block",
		"collision_sphere_block",
		8,
		collision_sphere_block);

	TAG_BLOCK_FROM_STRUCT(
		color_block_block,
		"color_block",
		"color_block",
		512,
		color_block);

	TAG_BLOCK_FROM_STRUCT(
		color_list_block_block,
		"color_list_block",
		"color_list_block",
		32,
		color_list_block);

	TAG_BLOCK_FROM_STRUCT(
		color_presets_block_block,
		"color_presets_block",
		"color_presets_block",
		64,
		color_presets_block);

	TAG_BLOCK_FROM_STRUCT(
		color_table_block_group_block,
		"color_table_block",
		"color_table_block",
		1,
		color_table_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		combat_cue_payload_block_block,
		"combat_cue_payload_block",
		"combat_cue_payload_block",
		1,
		combat_cue_payload_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		combat_sync_action_group_payload_block_block,
		"combat_sync_action_group_payload_block",
		"combat_sync_action_group_payload_block",
		1,
		combat_sync_action_group_payload_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		commandlinkblock_block,
		"commandLinkBlock",
		"commandLinkBlock",
		6,
		commandlinkblock);

	TAG_BLOCK_FROM_STRUCT(
		commendationaggregator_block,
		"commendationAggregator",
		"commendationAggregator",
		64,
		commendationaggregator);

	TAG_BLOCK_FROM_STRUCT(
		commendationaggregatordependent_block,
		"commendationAggregatorDependent",
		"commendationAggregatorDependent",
		12,
		commendationaggregatordependent_struct);

	TAG_BLOCK_FROM_STRUCT(
		commendationblock_block,
		"commendationBlock",
		"commendationBlock",
		160,
		commendationblock);

	TAG_BLOCK_FROM_STRUCT(
		commendationlevelblock_block,
		"commendationLevelBlock",
		"commendationLevelBlock",
		10,
		commendationlevelblock);

	TAG_BLOCK_FROM_STRUCT(
		commendationrewardblock_block,
		"commendationRewardBlock",
		"commendationRewardBlock",
		2,
		commendationrewardblock);

	TAG_BLOCK_FROM_STRUCT(
		commendation_aggregator_list_block_group_block,
		"commendation_aggregator_list_block",
		"commendation_aggregator_list_block",
		1,
		commendation_aggregator_list_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		commendation_globals_definition_block_group_block,
		"commendation_globals_definition_block",
		"commendation_globals_definition_block",
		1,
		commendation_globals_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		communication_sounds_block_group_block,
		"communication_sounds_block",
		"communication_sounds_block",
		1,
		communication_sounds_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		compiled_effects_block_block,
		"compiled_effects_block",
		"compiled_effects_block",
		2,
		compiled_effects_block);

	TAG_BLOCK_FROM_STRUCT(
		compiled_pixel_shader_block_block,
		"compiled_pixel_shader_block",
		"compiled_pixel_shader_block",
		10240,
		compiled_pixel_shader_block);

	TAG_BLOCK_FROM_STRUCT(
		compiled_pixel_shader_refererence_block_block,
		"compiled_pixel_shader_refererence_block",
		"compiled_pixel_shader_refererence_block",
		48,
		compiled_pixel_shader_refererence_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		compiled_shader_hash_block_block,
		"compiled_shader_hash_block",
		"compiled_shader_hash_block",
		10240,
		compiled_shader_hash_block);

	TAG_BLOCK_FROM_STRUCT(
		compiled_vertex_shader_block_block,
		"compiled_vertex_shader_block",
		"compiled_vertex_shader_block",
		10240,
		compiled_vertex_shader_block);

	TAG_BLOCK_FROM_STRUCT(
		compiled_vertex_shader_refererence_block_block,
		"compiled_vertex_shader_refererence_block",
		"compiled_vertex_shader_refererence_block",
		62,
		compiled_vertex_shader_refererence_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		component_definition_block,
		"component_definition",
		"component_definition",
		8192,
		component_definition);

	TAG_BLOCK_FROM_STRUCT(
		component_editor_only_definition_block,
		"component_editor_only_definition",
		"component_editor_only_definition",
		8192,
		component_editor_only_definition);

	TAG_BLOCK_FROM_STRUCT(
		component_index_block_definition_block,
		"component_index_block_definition",
		"component_index_block_definition",
		8192,
		component_index_block_definition);

	TAG_BLOCK_FROM_STRUCT(
		component_properties_definition_block,
		"component_properties_definition",
		"component_properties_definition",
		8192,
		component_properties_definition);

	TAG_BLOCK_FROM_STRUCT(
		compression_info_block_block,
		"compression_info_block",
		"compression_info_block",
		65536,
		compression_info_block);

	TAG_BLOCK_FROM_STRUCT(
		conical_projection_block_block,
		"conical_projection_block",
		"conical_projection_block",
		1,
		conical_projection_block);

	TAG_BLOCK_FROM_STRUCT(
		contact_point_block_block,
		"contact_point_block",
		"contact_point_block",
		3,
		contact_point_block);

	TAG_BLOCK_FROM_STRUCT(
		contact_point_block_v1_block,
		"contact_point_block_v1",
		"contact_point_block_v1",
		3,
		contact_point_block_v1);

	TAG_BLOCK_FROM_STRUCT(
		control_block_index_flags_block_block,
		"control_block_index_flags_block",
		"control_block_index_flags_block",
		256,
		control_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		controller_input_block_block,
		"controller_input_block",
		"controller_input_block",
		1,
		controller_input_block);

	TAG_BLOCK_FROM_STRUCT(
		controller_mapping_block_group_block,
		"controller_mapping_block",
		"controller_mapping_block",
		1,
		controller_mapping_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		controller_mapping_reference_block_block,
		"controller_mapping_reference_block",
		"controller_mapping_reference_block",
		7,
		controller_mapping_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		cookie_purchase_globals_block_group_block,
		"cookie_purchase_globals_block",
		"cookie_purchase_globals_block",
		1,
		cookie_purchase_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		coop_difficulty_block_block,
		"coop_difficulty_block",
		"coop_difficulty_block",
		1,
		coop_difficulty_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		coop_spawning_globals_definition_block_group_block,
		"coop_spawning_globals_definition_block",
		"coop_spawning_globals_definition_block",
		1,
		coop_spawning_globals_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		crate_block_group_block,
		"crate_block",
		"crate_block",
		1,
		crate_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		crate_block_index_flags_block_block,
		"crate_block_index_flags_block",
		"crate_block_index_flags_block",
		256,
		crate_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		creature_block_group_block,
		"creature_block",
		"creature_block",
		1,
		creature_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		creature_block_index_flags_block_block,
		"creature_block_index_flags_block",
		"creature_block_index_flags_block",
		256,
		creature_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		creature_scalar_timing_block_block,
		"creature_scalar_timing_block",
		"creature_scalar_timing_block",
		1,
		creature_scalar_timing_block);

	TAG_BLOCK_FROM_STRUCT(
		cs_animation_point_block_block,
		"cs_animation_point_block",
		"cs_animation_point_block",
		256,
		cs_animation_point_block);

	TAG_BLOCK_FROM_STRUCT(
		cs_point_block_block,
		"cs_point_block",
		"cs_point_block",
		32,
		cs_point_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		cs_point_set_block_block,
		"cs_point_set_block",
		"cs_point_set_block",
		200,
		cs_point_set_block);

	TAG_BLOCK_FROM_STRUCT(
		cs_script_data_block_block,
		"cs_script_data_block",
		"cs_script_data_block",
		1,
		cs_script_data_block);

	TAG_BLOCK_FROM_STRUCT(
		cubemap_reference_points_block_block,
		"cubemap_reference_points_block",
		"cubemap_reference_points_block",
		15,
		cubemap_reference_points_block);

	TAG_BLOCK_FROM_STRUCT(
		cui_active_roster_settings_block_block,
		"cui_active_roster_settings_block",
		"cui_active_roster_settings_block",
		1,
		cui_active_roster_settings_block);

	TAG_BLOCK_FROM_STRUCT(
		cui_component_screen_reference_block_definition_block,
		"cui_component_screen_reference_block_definition",
		"cui_component_screen_reference_block_definition",
		256,
		cui_component_screen_reference_block_definition);

	TAG_BLOCK_FROM_STRUCT(
		cui_logic_block_group_block,
		"cui_logic_block",
		"cui_logic_block",
		1,
		cui_logic_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cui_overlay_camera_block_definition_block,
		"cui_overlay_camera_block_definition",
		"cui_overlay_camera_block_definition",
		24,
		cui_overlay_camera_block_definition);

	TAG_BLOCK_FROM_STRUCT(
		cui_player_model_camera_settings_definition_block,
		"cui_player_model_camera_settings_definition",
		"cui_player_model_camera_settings_definition",
		32,
		cui_player_model_camera_settings_definition);

	TAG_BLOCK_FROM_STRUCT(
		cui_player_model_controller_settings_definition_block,
		"cui_player_model_controller_settings_definition",
		"cui_player_model_controller_settings_definition",
		32,
		cui_player_model_controller_settings_definition);

	TAG_BLOCK_FROM_STRUCT(
		cui_player_model_transition_settings_definition_block,
		"cui_player_model_transition_settings_definition",
		"cui_player_model_transition_settings_definition",
		1,
		cui_player_model_transition_settings_definition);

	TAG_BLOCK_FROM_STRUCT(
		cui_screen_block_group_block,
		"cui_screen_block",
		"cui_screen_block",
		1,
		cui_screen_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cui_static_data_block_group_block,
		"cui_static_data_block",
		"cui_static_data_block",
		1,
		cui_static_data_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		curve_scalar_block_group_block,
		"curve_scalar_block",
		"curve_scalar_block",
		1,
		curve_scalar_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		custom_app_block_block,
		"custom_app_block",
		"custom_app_block",
		64,
		custom_app_block);

	TAG_BLOCK_FROM_STRUCT(
		custom_app_damage_modifier_block_block,
		"custom_app_damage_modifier_block",
		"custom_app_damage_modifier_block",
		16,
		custom_app_damage_modifier_block);

	TAG_BLOCK_FROM_STRUCT(
		custom_app_globals_block_group_block,
		"custom_app_globals_block",
		"custom_app_globals_block",
		1,
		custom_app_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		custom_damage_response_label_block_block,
		"custom_damage_response_label_block",
		"custom_damage_response_label_block",
		8,
		custom_damage_response_label_block);

	TAG_BLOCK_FROM_STRUCT(
		custom_loadout_defaults_block_block,
		"custom_loadout_defaults_block",
		"custom_loadout_defaults_block",
		5,
		loadout_definition_struct);

	TAG_BLOCK_FROM_STRUCT(
		customized_model_player_bits_block_block,
		"customized_model_player_bits_block",
		"customized_model_player_bits_block",
		32,
		customized_model_player_bits_block);

	TAG_BLOCK_FROM_STRUCT(
		customized_model_selection_block_block,
		"customized_model_selection_block",
		"customized_model_selection_block",
		96,
		customized_model_selection_block);

	TAG_BLOCK_FROM_STRUCT(
		damage_animation_block_block,
		"damage_animation_block",
		"damage_animation_block",
		8,
		damage_animation_block);

	TAG_BLOCK_FROM_STRUCT(
		damage_constraint_info_block_block,
		"damage_constraint_info_block",
		"damage_constraint_info_block",
		16,
		damage_constraint_info_block);

	TAG_BLOCK_FROM_STRUCT(
		damage_direction_block_block,
		"damage_direction_block",
		"damage_direction_block",
		4,
		damage_direction_block);

	TAG_BLOCK_FROM_STRUCT(
		damage_effect_block_group_block,
		"damage_effect",
		"damage_effect_block",
		1,
		damage_effect_group$2);

	TAG_BLOCK_FROM_STRUCT(
		damage_effect_sound_block_block,
		"damage_effect_sound_block",
		"damage_effect_sound_block",
		4,
		damage_effect_sound_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		damage_globals_block_block,
		"damage_globals_block",
		"damage_globals_block",
		1,
		damage_globals_block);

	TAG_BLOCK_FROM_STRUCT(
		damage_group_block_block,
		"damage_group_block",
		"damage_group_block",
		512,
		damage_group_block);

	TAG_BLOCK_FROM_STRUCT(
		damage_region_block_block,
		"damage_region_block",
		"damage_region_block",
		11,
		damage_region_block);

	TAG_BLOCK_FROM_STRUCT(
		damage_response_class_block_block,
		"damage_response_class_block",
		"damage_response_class_block",
		2,
		damage_response_class_block);

	TAG_BLOCK_FROM_STRUCT(
		damage_response_definition_block_group_block,
		"damage_response_definition_block",
		"damage_response_definition_block",
		1,
		damage_response_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		damage_response_global_sound_effect_block_block,
		"damage_response_global_sound_effect_block",
		"damage_response_global_sound_effect_block",
		1,
		damage_response_global_sound_effect_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		damage_response_region_transition_block_block,
		"damage_response_region_transition_block",
		"damage_response_region_transition_block",
		16,
		damage_response_region_transition_block);

	TAG_BLOCK_FROM_STRUCT(
		damage_seat_info_block_block,
		"damage_seat_info_block",
		"damage_seat_info_block",
		16,
		damage_seat_info_block);

	TAG_BLOCK_FROM_STRUCT(
		damage_seat_region_setting_block_block,
		"damage_seat_region_setting_block",
		"damage_seat_region_setting_block",
		1,
		damage_seat_region_setting_block);

	TAG_BLOCK_FROM_STRUCT(
		damage_section_recharge_speed_curve_block_block,
		"damage_section_recharge_speed_curve_block",
		"damage_section_recharge_speed_curve_block",
		1,
		damage_section_recharge_speed_curve_block);

	TAG_BLOCK_FROM_STRUCT(
		damage_section_rendering_paramters_block,
		"damage_section_rendering_paramters",
		"damage_section_rendering_paramters",
		1,
		damage_section_rendering_paramters);

	TAG_BLOCK_FROM_STRUCT(
		damage_section_segmented_recharge_fraction_block,
		"damage_section_segmented_recharge_fraction",
		"damage_section_segmented_recharge_fraction",
		16,
		damage_section_segmented_recharge_fraction);

	TAG_BLOCK_FROM_STRUCT(
		damage_transfer_block_block,
		"damage_transfer_block",
		"damage_transfer_block",
		32,
		damage_transfer_block);

	TAG_BLOCK_FROM_STRUCT(
		death_program_damage_reporting_block_block,
		"death_program_damage_reporting_block",
		"death_program_damage_reporting_block",
		12,
		death_program_damage_reporting_block);

	TAG_BLOCK_FROM_STRUCT(
		death_program_selector_block_group_block,
		"death_program_selector_block",
		"death_program_selector_block",
		1,
		death_program_selector_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		death_program_special_block_block,
		"death_program_special_block",
		"death_program_special_block",
		5,
		death_program_special_block);

	TAG_BLOCK_FROM_STRUCT(
		death_program_velocity_gate_block_block,
		"death_program_velocity_gate_block",
		"death_program_velocity_gate_block",
		2,
		death_program_velocity_gate_block);

	TAG_BLOCK_FROM_STRUCT(
		debug_cache_file_combat_dialogue_zone_block_block,
		"debug_cache_file_combat_dialogue_zone_block",
		"debug_cache_file_combat_dialogue_zone_block",
		32767,
		debug_cache_file_zone_manifest_struct);

	TAG_BLOCK_FROM_STRUCT(
		debug_cache_file_model_variant_zone_block_block,
		"debug_cache_file_model_variant_zone_block",
		"debug_cache_file_model_variant_zone_block",
		32767,
		debug_cache_file_zone_manifest_struct);

	TAG_BLOCK_FROM_STRUCT(
		debug_cache_file_tag_zone_block_block,
		"debug_cache_file_tag_zone_block",
		"debug_cache_file_tag_zone_block",
		32767,
		debug_cache_file_zone_manifest_struct);

	TAG_BLOCK_FROM_STRUCT(
		decal_definition_block_block,
		"decal_definition_block",
		"decal_definition_block",
		16,
		decal_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		decal_system_block_group_block,
		"decal_system_block",
		"decal_system_block",
		1,
		decal_system_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_palette_block,
		"decorator_palette",
		"decorator_palette",
		8,
		decorator_palette);

	TAG_BLOCK_FROM_STRUCT(
		decorator_runtime_cluster_block_block,
		"decorator_runtime_cluster_block",
		"decorator_runtime_cluster_block",
		1429968,
		decorator_runtime_cluster_block);

	TAG_BLOCK_FROM_STRUCT(
		decorator_scenario_set_block_block,
		"decorator_scenario_set_block",
		"decorator_scenario_set_block",
		48,
		decorator_scenario_set_block);

	TAG_BLOCK_FROM_STRUCT(
		decorator_set_block_group_block,
		"decorator_set_block",
		"decorator_set_block",
		48,
		decorator_set_block);

	TAG_BLOCK_FROM_STRUCT(
		decorator_set_instance_name_block_block,
		"decorator_set_instance_name_block",
		"decorator_set_instance_name_block",
		32767,
		decorator_set_instance_name_block);

	TAG_BLOCK_FROM_STRUCT(
		default_node_orientations_block_block,
		"default_node_orientations_block",
		"default_node_orientations_block",
		255,
		default_node_orientations_block);

	TAG_BLOCK_FROM_STRUCT(
		default_stimulus_suppressor_block_block,
		"default_stimulus_suppressor_block",
		"default_stimulus_suppressor_block",
		4,
		default_stimulus_suppressor_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		default_textures_refs_block_block,
		"default_textures_refs_block",
		"default_textures_refs_block",
		32,
		default_textures_refs_block);

	TAG_BLOCK_FROM_STRUCT(
		dependency_block_group_block,
		"dependency_block",
		"dependency_block",
		1,
		dependency_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		detail_object_collection_block_group_block,
		"detail_object_collection_block",
		"detail_object_collection_block",
		1,
		detail_object_collection_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		detail_object_type_block_block,
		"detail_object_type_block",
		"detail_object_type_block",
		16,
		detail_object_type_block);

	TAG_BLOCK_FROM_STRUCT(
		deterministicspeecheventblock_block,
		"deterministicSpeechEventBlock",
		"deterministicSpeechEventBlock",
		32,
		deterministicspeecheventblock_struct);

	TAG_BLOCK_FROM_STRUCT(
		device_block_group_block,
		"device_block",
		"device_block",
		1,
		device_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		device_control_block_group_block,
		"device_control_block",
		"device_control_block",
		1,
		device_control_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		device_dispenser_block_group_block,
		"device_dispenser_block",
		"device_dispenser_block",
		1,
		device_dispenser_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		device_group_block_block,
		"device_group_block",
		"device_group_block",
		128,
		device_group_block);

	TAG_BLOCK_FROM_STRUCT(
		device_machine_block_group_block,
		"device_machine_block",
		"device_machine_block",
		1,
		device_machine_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		device_terminal_block_group_block,
		"device_terminal_block",
		"device_terminal_block",
		1,
		device_terminal_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		dialogue_block_group_block,
		"dialogue_block",
		"dialogue_block",
		1,
		dialogue_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		dialogue_data_block_block,
		"dialogue_data_block",
		"dialogue_data_block",
		158,
		dialogue_data_block);

	TAG_BLOCK_FROM_STRUCT(
		dialogue_variant_block_block,
		"dialogue_variant_block",
		"dialogue_variant_block",
		16,
		dialogue_variant_block);

	TAG_BLOCK_FROM_STRUCT(
		difficulty_block_block,
		"difficulty_block",
		"difficulty_block",
		1,
		difficulty_block);

	TAG_BLOCK_FROM_STRUCT(
		directionallightrigblock_block,
		"directionalLightRigBlock",
		"directionalLightRigBlock",
		16,
		directionallightrigblock);

	TAG_BLOCK_FROM_STRUCT(
		disallowed_weapons_for_trading_block_block,
		"disallowed_weapons_for_trading_block",
		"disallowed_weapons_for_trading_block",
		32,
		disallowed_weapons_for_trading_block);

	TAG_BLOCK_FROM_STRUCT(
		dispenser_block_index_flags_block_block,
		"dispenser_block_index_flags_block",
		"dispenser_block_index_flags_block",
		256,
		dispenser_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		dont_use_me_scenario_environment_object_block_block,
		"dont_use_me_scenario_environment_object_block",
		"dont_use_me_scenario_environment_object_block",
		4096,
		dont_use_me_scenario_environment_object_block);

	TAG_BLOCK_FROM_STRUCT(
		door_encoded_pas_block_block,
		"door_encoded_pas_block",
		"door_encoded_pas_block",
		8192,
		door_encoded_pas_block);

	TAG_BLOCK_FROM_STRUCT(
		dumpling_point_block_block,
		"dumpling_point_block",
		"dumpling_point_block",
		32,
		dumpling_point_block);

	TAG_BLOCK_FROM_STRUCT(
		dynamic_task_block_block,
		"dynamic_task_block",
		"dynamic_task_block",
		1,
		dynamic_task_block);

	TAG_BLOCK_FROM_STRUCT(
		edges_block_block,
		"edges_block",
		"edges_block",
		65535,
		edges_block);

	TAG_BLOCK_FROM_STRUCT(
		editor_comment_block_block,
		"editor_comment_block",
		"editor_comment_block",
		65536,
		editor_comment_block);

	TAG_BLOCK_FROM_STRUCT(
		effect_accelerations_block_block,
		"effect_accelerations_block",
		"effect_accelerations_block",
		32,
		effect_accelerations_block);

	TAG_BLOCK_FROM_STRUCT(
		effect_block_group_block,
		"effect_block",
		"effect_block",
		1,
		effect_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		effect_component_holdback_block_block,
		"effect_component_holdback_block",
		"effect_component_holdback_block",
		6,
		effect_component_holdback_block);

	TAG_BLOCK_FROM_STRUCT(
		effect_component_holdbacks_block_block,
		"effect_component_holdbacks_block",
		"effect_component_holdbacks_block",
		26,
		effect_component_holdbacks_block);

	TAG_BLOCK_FROM_STRUCT(
		effect_conical_distribution_block_block,
		"effect_conical_distribution_block",
		"effect_conical_distribution_block",
		1,
		effect_conical_distribution_block);

	TAG_BLOCK_FROM_STRUCT(
		effect_event_block_block,
		"effect_event_block",
		"effect_event_block",
		32,
		effect_event_block);

	TAG_BLOCK_FROM_STRUCT(
		effect_global_force_block_group_block,
		"effect_global_force_block",
		"effect_global_force_block",
		1,
		effect_global_force_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		effect_global_spawn_effects_block_block,
		"effect_global_spawn_effects_block",
		"effect_global_spawn_effects_block",
		1,
		effect_global_spawn_effects_block);

	TAG_BLOCK_FROM_STRUCT(
		effect_globals_block_group_block,
		"effect_globals_block",
		"effect_globals_block",
		1,
		effect_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		effect_locations_block_block,
		"effect_locations_block",
		"effect_locations_block",
		8,
		effect_locations_block);

	TAG_BLOCK_FROM_STRUCT(
		effect_looping_sound_block_block,
		"effect_looping_sound_block",
		"effect_looping_sound_block",
		2,
		effect_looping_sound_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		effect_part_block_block,
		"effect_part_block",
		"effect_part_block",
		32,
		effect_part_block);

	TAG_BLOCK_FROM_STRUCT(
		effect_scenery_block_group_block,
		"effect_scenery_block",
		"effect_scenery_block",
		1,
		effect_scenery_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		effect_scenery_block_index_flags_block_block,
		"effect_scenery_block_index_flags_block",
		"effect_scenery_block_index_flags_block",
		256,
		effect_scenery_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		emblem_back_list_block,
		"emblem_back_list",
		"emblem_back_list",
		256,
		emblem_back_list);

	TAG_BLOCK_FROM_STRUCT(
		emblem_bitmap_list_block,
		"emblem_bitmap_list",
		"emblem_bitmap_list",
		256,
		emblem_bitmap_list);

	TAG_BLOCK_FROM_STRUCT(
		emblem_front_list_block,
		"emblem_front_list",
		"emblem_front_list",
		256,
		emblem_front_list);

	TAG_BLOCK_FROM_STRUCT(
		emblem_library_block_group_block,
		"emblem_library_block",
		"emblem_library_block",
		1,
		emblem_library_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		emblem_runtime_back_list_block,
		"emblem_runtime_back_list",
		"emblem_runtime_back_list",
		256,
		emblem_runtime_back_list);

	TAG_BLOCK_FROM_STRUCT(
		emblem_runtime_front_list_block,
		"emblem_runtime_front_list",
		"emblem_runtime_front_list",
		256,
		emblem_runtime_front_list);

	TAG_BLOCK_FROM_STRUCT(
		emblem_shape_list_block,
		"emblem_shape_list",
		"emblem_shape_list",
		512,
		emblem_shape_list);

	TAG_BLOCK_FROM_STRUCT(
		emitterclipsphereblock_block,
		"emitterClipSphereBlock",
		"emitterClipSphereBlock",
		1,
		emitterclipsphereblock);

	TAG_BLOCK_FROM_STRUCT(
		emitterglobalforceblock_block,
		"emitterGlobalForceBlock",
		"emitterGlobalForceBlock",
		4,
		emitterglobalforceblock);

	TAG_BLOCK_FROM_STRUCT(
		encapsulatedproperties_block,
		"encapsulatedProperties",
		"encapsulatedProperties",
		64,
		encapsulatedproperties);

	TAG_BLOCK_FROM_STRUCT(
		encoded_room_distances_block_block,
		"encoded_room_distances_block",
		"encoded_room_distances_block",
		523776,
		encoded_room_distances_block);

	TAG_BLOCK_FROM_STRUCT(
		entity_block_group_block,
		"entity_block",
		"entity_block",
		1,
		entity_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitydatum_block,
		"equipmentAbilityDatum",
		"equipmentAbilityDatum",
		5,
		equipmentabilitydatum);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitypartcowcatcherblock_block,
		"equipmentAbilityPartCowCatcherBlock",
		"equipmentAbilityPartCowCatcherBlock",
		1,
		equipmentabilitypartcowcatcherblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeactiveshieldblock_block,
		"equipmentAbilityTypeActiveShieldBlock",
		"equipmentAbilityTypeActiveShieldBlock",
		1,
		equipmentabilitytypeactiveshieldblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeaispawnerblock_block,
		"equipmentAbilityTypeAiSpawnerBlock",
		"equipmentAbilityTypeAiSpawnerBlock",
		1,
		equipmentabilitytypeaispawnerblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeaitraitfieldblock_block,
		"equipmentAbilityTypeAiTraitFieldBlock",
		"equipmentAbilityTypeAiTraitFieldBlock",
		1,
		equipmentabilitytypeaitraitfieldblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeammopackblock_block,
		"equipmentAbilityTypeAmmoPackBlock",
		"equipmentAbilityTypeAmmoPackBlock",
		1,
		equipmentabilitytypeammopackblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeautoturretblock_block,
		"equipmentAbilityTypeAutoTurretBlock",
		"equipmentAbilityTypeAutoTurretBlock",
		1,
		equipmentabilitytypeautoturretblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeballlightningblock_block,
		"equipmentAbilityTypeBallLightningBlock",
		"equipmentAbilityTypeBallLightningBlock",
		1,
		equipmentabilitytypeballlightningblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypedaddyblock_block,
		"equipmentAbilityTypeDaddyBlock",
		"equipmentAbilityTypeDaddyBlock",
		1,
		equipmentabilitytypedaddyblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeengineershieldsblock_block,
		"equipmentAbilityTypeEngineerShieldsBlock",
		"equipmentAbilityTypeEngineerShieldsBlock",
		1,
		equipmentabilitytypeengineershieldsblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeequipmenthackerblock_block,
		"equipmentAbilityTypeEquipmentHackerBlock",
		"equipmentAbilityTypeEquipmentHackerBlock",
		1,
		equipmentabilitytypeequipmenthackerblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypehealthpackblock_block,
		"equipmentAbilityTypeHealthPackBlock",
		"equipmentAbilityTypeHealthPackBlock",
		1,
		equipmentabilitytypehealthpackblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypehologramblock_block,
		"equipmentAbilityTypeHologramBlock",
		"equipmentAbilityTypeHologramBlock",
		1,
		equipmentabilitytypehologramblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeinvincibilityblock_block,
		"equipmentAbilityTypeInvincibilityBlock",
		"equipmentAbilityTypeInvincibilityBlock",
		1,
		equipmentabilitytypeinvincibilityblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypejetpackblock_block,
		"equipmentAbilityTypeJetPackBlock",
		"equipmentAbilityTypeJetPackBlock",
		1,
		equipmentabilitytypejetpackblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypelaserdesignationblock_block,
		"equipmentAbilityTypeLaserDesignationBlock",
		"equipmentAbilityTypeLaserDesignationBlock",
		1,
		equipmentabilitytypelaserdesignationblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypemotiontrackernoiseblock_block,
		"equipmentAbilityTypeMotionTrackerNoiseBlock",
		"equipmentAbilityTypeMotionTrackerNoiseBlock",
		1,
		equipmentabilitytypemotiontrackernoiseblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypemultiplayerpowerupblock_block,
		"equipmentAbilityTypeMultiplayerPowerupBlock",
		"equipmentAbilityTypeMultiplayerPowerupBlock",
		1,
		equipmentabilitytypemultiplayerpowerupblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeplayertraitfieldblock_block,
		"equipmentAbilityTypePlayerTraitFieldBlock",
		"equipmentAbilityTypePlayerTraitFieldBlock",
		1,
		equipmentabilitytypeplayertraitfieldblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypepowerfistblock_block,
		"equipmentAbilityTypePowerFistBlock",
		"equipmentAbilityTypePowerFistBlock",
		1,
		equipmentabilitytypepowerfistblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeprojectilecollectorblock_block,
		"equipmentAbilityTypeProjectileCollectorBlock",
		"equipmentAbilityTypeProjectileCollectorBlock",
		1,
		equipmentabilitytypeprojectilecollectorblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeproximitymineblock_block,
		"equipmentAbilityTypeProximityMineBlock",
		"equipmentAbilityTypeProximityMineBlock",
		1,
		equipmentabilitytypeproximitymineblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytyperemotestrikeblock_block,
		"equipmentAbilityTypeRemoteStrikeBlock",
		"equipmentAbilityTypeRemoteStrikeBlock",
		1,
		equipmentabilitytyperemotestrikeblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytyperemotevehicleblock_block,
		"equipmentAbilityTypeRemoteVehicleBlock",
		"equipmentAbilityTypeRemoteVehicleBlock",
		1,
		equipmentabilitytyperemotevehicleblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytyperepulsorfieldblock_block,
		"equipmentAbilityTypeRepulsorFieldBlock",
		"equipmentAbilityTypeRepulsorFieldBlock",
		1,
		equipmentabilitytyperepulsorfieldblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeshapeshifterblock_block,
		"equipmentAbilityTypeShapeshifterBlock",
		"equipmentAbilityTypeShapeshifterBlock",
		1,
		equipmentabilitytypeshapeshifterblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeshieldprojectorblock_block,
		"equipmentAbilityTypeShieldProjectorBlock",
		"equipmentAbilityTypeShieldProjectorBlock",
		1,
		equipmentabilitytypeshieldprojectorblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypespawnerblock_block,
		"equipmentAbilityTypeSpawnerBlock",
		"equipmentAbilityTypeSpawnerBlock",
		1,
		equipmentabilitytypespawnerblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypespecialmoveblock_block,
		"equipmentAbilityTypeSpecialMoveBlock",
		"equipmentAbilityTypeSpecialMoveBlock",
		1,
		equipmentabilitytypespecialmoveblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypespecialweaponblock_block,
		"equipmentAbilityTypeSpecialWeaponBlock",
		"equipmentAbilityTypeSpecialWeaponBlock",
		1,
		equipmentabilitytypespecialweaponblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypesprintblock_block,
		"equipmentAbilityTypeSprintBlock",
		"equipmentAbilityTypeSprintBlock",
		1,
		equipmentabilitytypesprintblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypestasisfieldblock_block,
		"equipmentAbilityTypeStasisFieldBlock",
		"equipmentAbilityTypeStasisFieldBlock",
		1,
		equipmentabilitytypestasisfieldblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypesuicidebombblock_block,
		"equipmentAbilityTypeSuicideBombBlock",
		"equipmentAbilityTypeSuicideBombBlock",
		1,
		equipmentabilitytypesuicidebombblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypesuperjumpblock_block,
		"equipmentAbilityTypeSuperJumpBlock",
		"equipmentAbilityTypeSuperJumpBlock",
		1,
		equipmentabilitytypesuperjumpblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypeteleporterblock_block,
		"equipmentAbilityTypeTeleporterBlock",
		"equipmentAbilityTypeTeleporterBlock",
		1,
		equipmentabilitytypeteleporterblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypetreeoflifeblock_block,
		"equipmentAbilityTypeTreeOfLifeBlock",
		"equipmentAbilityTypeTreeOfLifeBlock",
		1,
		equipmentabilitytypetreeoflifeblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmentabilitytypevisionmodeblock_block,
		"equipmentAbilityTypeVisionModeBlock",
		"equipmentAbilityTypeVisionModeBlock",
		1,
		equipmentabilitytypevisionmodeblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmenteffectwiththresholdblock_block,
		"equipmentEffectWithThresholdBlock",
		"equipmentEffectWithThresholdBlock",
		10,
		equipmenteffectwiththresholdblock);

	TAG_BLOCK_FROM_STRUCT(
		equipmenthackerdrainlevel_block,
		"equipmentHackerDrainLevel",
		"equipmentHackerDrainLevel",
		8,
		equipmenthackerdrainlevel);

	TAG_BLOCK_FROM_STRUCT(
		equipmentspawninfluenceblock_block,
		"equipmentSpawnInfluenceBlock",
		"equipmentSpawnInfluenceBlock",
		18,
		equipmentspawninfluenceblock);

	TAG_BLOCK_FROM_STRUCT(
		equipment_block_group_block,
		"equipment_block",
		"equipment_block",
		1,
		equipment_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		equipment_block_index_flags_block_block,
		"equipment_block_index_flags_block",
		"equipment_block_index_flags_block",
		256,
		equipment_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		equipment_palette_choice_block_block,
		"equipment_palette_choice_block",
		"equipment_palette_choice_block",
		8,
		equipment_palette_choice_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		equipment_ref_choice_block_block,
		"equipment_ref_choice_block",
		"equipment_ref_choice_block",
		8,
		equipment_ref_choice_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		error_report_comments_block_block,
		"error report comment",
		"error_report_comments_block",
		1048576,
		error_report_comments_block);

	TAG_BLOCK_FROM_STRUCT(
		error_report_lines_block_block,
		"error report line",
		"error_report_lines_block",
		1048576,
		error_report_lines_block);

	TAG_BLOCK_FROM_STRUCT(
		error_report_quads_block_block,
		"error report quad",
		"error_report_quads_block",
		1048576,
		error_report_quads_block);

	TAG_BLOCK_FROM_STRUCT(
		error_report_triangles_block_block,
		"error report triangle",
		"error_report_triangles_block",
		1048576,
		error_report_triangles_block);

	TAG_BLOCK_FROM_STRUCT(
		error_report_vectors_block_block,
		"error report vector",
		"error_report_vectors_block",
		1048576,
		error_report_vectors_block);

	TAG_BLOCK_FROM_STRUCT(
		error_report_vertices_block_block,
		"error report vertex",
		"error_report_vertices_block",
		1048576,
		error_report_vertices_block);

	TAG_BLOCK_FROM_STRUCT(
		error_reports_block_block,
		"error report",
		"error_reports_block",
		1048576,
		error_reports_block);

	TAG_BLOCK_FROM_STRUCT(
		evaluator_definition_block_block,
		"evaluator_definition_block",
		"evaluator_definition_block",
		69,
		evaluator_definition_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		explicit_shader_refs_block_block,
		"explicit_shader_refs_block",
		"explicit_shader_refs_block",
		256,
		explicit_shader_refs_block);

	TAG_BLOCK_FROM_STRUCT(
		expression_block,
		"expression",
		"expression",
		128,
		expression);

	TAG_BLOCK_FROM_STRUCT(
		expression_step_block,
		"expression_step",
		"expression_step",
		32,
		expression_step);

	TAG_BLOCK_FROM_STRUCT(
		externparameterblock_block,
		"externParameterBlock",
		"externParameterBlock",
		255,
		externparameterblock);

	TAG_BLOCK_FROM_STRUCT(
		facial_animation_curve_block_block,
		"facial_animation_curve_block",
		"facial_animation_curve_block",
		34,
		facial_animation_curve_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		facial_animation_language_block_block,
		"facial_animation_language_block",
		"facial_animation_language_block",
		17,
		facial_animation_language_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		facial_animation_permutation_block_block,
		"facial_animation_permutation_block",
		"facial_animation_permutation_block",
		544,
		facial_animation_permutation_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		fik_anchor_node_block_block,
		"fik_anchor_node_block",
		"fik_anchor_node_block",
		5,
		fik_anchor_node_block);

	TAG_BLOCK_FROM_STRUCT(
		fire_bomb_grenade_block_block,
		"fire_bomb_grenade_block",
		"fire_bomb_grenade_block",
		1,
		fire_bomb_grenade_block);

	TAG_BLOCK_FROM_STRUCT(
		firefightwavetemplatesblock_block,
		"firefightWaveTemplatesBlock",
		"firefightWaveTemplatesBlock",
		128,
		firefightwavetemplatesblock_struct);

	TAG_BLOCK_FROM_STRUCT(
		firefight_globals_block_group_block,
		"firefight_globals_block",
		"firefight_globals_block",
		1,
		firefight_globals_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		firing_point_payload_block_block,
		"firing_point_payload_block",
		"firing_point_payload_block",
		1,
		firing_point_payload_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		firing_positions_block_block,
		"firing_positions_block",
		"firing_positions_block",
		2048,
		firing_positions_block);

	TAG_BLOCK_FROM_STRUCT(
		firstpersonphiddenbodyregionsblock_block,
		"firstPersonpHiddenBodyRegionsBlock",
		"firstPersonpHiddenBodyRegionsBlock",
		32,
		firstpersonphiddenbodyregionsblock);

	TAG_BLOCK_FROM_STRUCT(
		flight_reference_block_block,
		"flight_reference_block",
		"flight_reference_block",
		10,
		flight_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		flock_block_group_block,
		"flock_block",
		"flock_block",
		1,
		flock_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		flock_destination_block_block,
		"flock_destination_block",
		"flock_destination_block",
		10,
		flock_destination_block);

	TAG_BLOCK_FROM_STRUCT(
		flock_instance_block_block,
		"flock_instance_block",
		"flock_instance_block",
		50,
		flock_instance_block);

	TAG_BLOCK_FROM_STRUCT(
		flock_palette_block_block,
		"flock_palette_block",
		"flock_palette_block",
		50,
		flock_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		flock_source_block_block,
		"flock_source_block",
		"flock_source_block",
		10,
		flock_source_block);

	TAG_BLOCK_FROM_STRUCT(
		fluid_dynamics_block_group_block,
		"fluid_dynamics_block",
		"fluid_dynamics_block",
		1,
		fluid_dynamics_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		fluid_dynamics_inflow_block_block,
		"fluid_dynamics_inflow_block",
		"fluid_dynamics_inflow_block",
		16,
		fluid_dynamics_inflow_block);

	TAG_BLOCK_FROM_STRUCT(
		fluid_dynamics_obstacle_block_block,
		"fluid_dynamics_obstacle_block",
		"fluid_dynamics_obstacle_block",
		32,
		fluid_dynamics_obstacle_block);

	TAG_BLOCK_FROM_STRUCT(
		fluid_dynamics_outflow_block_block,
		"fluid_dynamics_outflow_block",
		"fluid_dynamics_outflow_block",
		16,
		fluid_dynamics_outflow_block);

	TAG_BLOCK_FROM_STRUCT(
		fluid_dynamics_squirter_block_block,
		"fluid_dynamics_squirter_block",
		"fluid_dynamics_squirter_block",
		16,
		fluid_dynamics_squirter_block);

	TAG_BLOCK_FROM_STRUCT(
		foot_lock_cycle_block_block,
		"foot_lock_cycle_block",
		"foot_lock_cycle_block",
		64,
		foot_lock_cycle_block);

	TAG_BLOCK_FROM_STRUCT(
		foot_tracking_block_block,
		"foot_tracking_block",
		"foot_tracking_block",
		32,
		foot_tracking_block);

	TAG_BLOCK_FROM_STRUCT(
		foot_tracking_defaults_block,
		"foot_tracking_defaults",
		"foot_tracking_defaults",
		32,
		foot_tracking_defaults);

	TAG_BLOCK_FROM_STRUCT(
		foot_tracking_member_block_block,
		"foot_tracking_member_block",
		"foot_tracking_member_block",
		32,
		foot_tracking_member_block);

	TAG_BLOCK_FROM_STRUCT(
		forge_color_block_block,
		"forge_color_block",
		"forge_color_block",
		8,
		forge_color_block);

	TAG_BLOCK_FROM_STRUCT(
		forge_globals_block_group_block,
		"forge_globals_block",
		"forge_globals_block",
		1,
		forge_globals_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		formation_block_group_block,
		"formation_block",
		"formation_block",
		1,
		formation_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		formation_point_definition_block,
		"formation_point_definition",
		"formation_point_definition",
		8,
		formation_point_definition);

	TAG_BLOCK_FROM_STRUCT(
		formation_primitive_definition_block,
		"formation_primitive_definition",
		"formation_primitive_definition",
		4,
		formation_primitive_definition);

	TAG_BLOCK_FROM_STRUCT(
		frame_event_list_block_group_block,
		"frame_event_list_block",
		"frame_event_list_block",
		1,
		frame_event_list_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		friction_point_definition_block_block,
		"friction_point_definition_block",
		"friction_point_definition_block",
		16,
		friction_point_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		functionparameterblock_block,
		"functionParameterBlock",
		"functionParameterBlock",
		255,
		functionparameterblock);

	TAG_BLOCK_FROM_STRUCT(
		function_overlay_animation_block_block,
		"function_overlay_animation_block",
		"function_overlay_animation_block",
		32,
		function_overlay_animation_block);

	TAG_BLOCK_FROM_STRUCT(
		function_overlay_item_definition_block_block,
		"function_overlay_item_definition_block",
		"function_overlay_item_definition_block",
		32,
		function_overlay_item_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		fx_property_block_block,
		"fx_property_block",
		"fx_property_block",
		256,
		fx_property_block);

	TAG_BLOCK_FROM_STRUCT(
		fx_property_default_block_block,
		"fx_property_default_block",
		"fx_property_default_block",
		64,
		fx_property_default_block);

	TAG_BLOCK_FROM_STRUCT(
		fx_test_block_group_block,
		"fx_test_block",
		"fx_test_block",
		1,
		fx_test_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		g_compositetag_block,
		"g_compositeTag",
		"g_compositeTag",
		256,
		g_compositetag_struct);

	TAG_BLOCK_FROM_STRUCT(
		g_null_block_block,
		"g_null_block",
		"g_null_block",
		0,
		g_null_block);

	TAG_BLOCK_FROM_STRUCT(
		g_scenario_editor_folder_block_block,
		"g_scenario_editor_folder_block",
		"g_scenario_editor_folder_block",
		32767,
		g_scenario_editor_folder_block);

	TAG_BLOCK_FROM_STRUCT(
		gameengineordnanceoptionsblock_block,
		"gameEngineOrdnanceOptionsBlock",
		"gameEngineOrdnanceOptionsBlock",
		1,
		gameengineordnanceoptionsblock);

	TAG_BLOCK_FROM_STRUCT(
		gamemedaltiers_block,
		"gameMedalTiers",
		"gameMedalTiers",
		10,
		gamemedaltiers);

	TAG_BLOCK_FROM_STRUCT(
		game_audibility_block_block,
		"game_audibility_block",
		"game_audibility_block",
		64,
		game_audibility_block);

	TAG_BLOCK_FROM_STRUCT(
		game_completion_rewards_definition_block_block,
		"game_completion_rewards_definition_block",
		"game_completion_rewards_definition_block",
		2,
		game_completion_rewards_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		game_completion_rewards_difficulty_block_block,
		"game_completion_rewards_difficulty_block",
		"game_completion_rewards_difficulty_block",
		1,
		game_completion_rewards_difficulty_block);

	TAG_BLOCK_FROM_STRUCT(
		game_completion_rewards_falloff_point_block_block,
		"game_completion_rewards_falloff_point_block",
		"game_completion_rewards_falloff_point_block",
		15,
		game_completion_rewards_falloff_point_block);

	TAG_BLOCK_FROM_STRUCT(
		game_completion_rewards_globals_block_group_block,
		"game_completion_rewards_globals_block",
		"game_completion_rewards_globals_block",
		1,
		game_completion_rewards_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_completion_rewards_multiplayer_block_block,
		"game_completion_rewards_multiplayer_block",
		"game_completion_rewards_multiplayer_block",
		1,
		game_completion_rewards_multiplayer_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_ai_traits_list_block_block,
		"game_engine_ai_traits_list_block",
		"game_engine_ai_traits_list_block",
		64,
		game_engine_ai_traits_list_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_campaign_variant_block_block,
		"game_engine_campaign_variant_block",
		"game_engine_campaign_variant_block",
		32,
		game_engine_campaign_variant_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_event_block_block,
		"game_engine_event_block",
		"game_engine_event_block",
		1000,
		game_engine_event_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_globals_block_group_block,
		"game_engine_globals_block",
		"game_engine_globals_block",
		1,
		game_engine_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_loadout_options_block_block,
		"game_engine_loadout_options_block",
		"game_engine_loadout_options_block",
		1,
		game_engine_loadout_options_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_loadout_palette_entry_block_block,
		"game_engine_loadout_palette_entry_block",
		"game_engine_loadout_palette_entry_block",
		6,
		game_engine_loadout_palette_entry_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_map_override_options_block_block,
		"game_engine_map_override_options_block",
		"game_engine_map_override_options_block",
		1,
		game_engine_map_override_options_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_miscellaneous_options_block_block,
		"game_engine_miscellaneous_options_block",
		"game_engine_miscellaneous_options_block",
		1,
		game_engine_miscellaneous_options_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_player_traits_block_block,
		"game_engine_player_traits_block",
		"game_engine_player_traits_block",
		1,
		game_engine_player_traits_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_player_traits_list_block_block,
		"game_engine_player_traits_list_block",
		"game_engine_player_traits_list_block",
		64,
		game_engine_player_traits_list_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_prototype_options_block_block,
		"game_engine_prototype_options_block",
		"game_engine_prototype_options_block",
		1,
		game_engine_prototype_options_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_respawn_options_block_block,
		"game_engine_respawn_options_block",
		"game_engine_respawn_options_block",
		1,
		game_engine_respawn_options_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_sandbox_variant_block_block,
		"game_engine_sandbox_variant_block",
		"game_engine_sandbox_variant_block",
		32,
		game_engine_sandbox_variant_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_settings_definition_block_group_block,
		"game_engine_settings_definition_block",
		"game_engine_settings_definition_block",
		1,
		game_engine_settings_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_social_options_block_block,
		"game_engine_social_options_block",
		"game_engine_social_options_block",
		1,
		game_engine_social_options_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_status_response_block_block,
		"game_engine_status_response_block",
		"game_engine_status_response_block",
		32,
		game_engine_status_response_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_survival_custom_skull_block_block,
		"game_engine_survival_custom_skull_block",
		"game_engine_survival_custom_skull_block",
		3,
		game_engine_survival_custom_skull_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_survival_round_properties_block_block,
		"game_engine_survival_round_properties_block",
		"game_engine_survival_round_properties_block",
		3,
		game_engine_survival_round_properties_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_survival_set_properties_block_block,
		"game_engine_survival_set_properties_block",
		"game_engine_survival_set_properties_block",
		10,
		game_engine_survival_set_properties_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_survival_variant_block_block,
		"game_engine_survival_variant_block",
		"game_engine_survival_variant_block",
		32,
		game_engine_survival_variant_block);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_team_options_block_block,
		"game_engine_team_options_block",
		"game_engine_team_options_block",
		1,
		game_engine_team_options_block);

	TAG_BLOCK_FROM_STRUCT(
		game_globals_damage_block_block,
		"game_globals_damage_block",
		"game_globals_damage_block",
		2,
		game_globals_damage_block);

	TAG_BLOCK_FROM_STRUCT(
		game_globals_grenade_list_block_group_block,
		"game_globals_grenade_list_block",
		"game_globals_grenade_list_block",
		1,
		game_globals_grenade_list_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_globals_ordnance_list_block_group_block,
		"game_globals_ordnance_list_block",
		"game_globals_ordnance_list_block",
		1,
		game_globals_ordnance_list_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_incident_daily_challenge_to_increment_block_block,
		"game_incident_daily_challenge_to_increment_block",
		"game_incident_daily_challenge_to_increment_block",
		64,
		game_incident_daily_challenge_to_increment_block);

	TAG_BLOCK_FROM_STRUCT(
		game_incident_response_block_block,
		"game_incident_response_block",
		"game_incident_response_block",
		32,
		game_incident_response_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		game_medal_block_block,
		"game_medal_block",
		"game_medal_block",
		256,
		game_medal_block);

	TAG_BLOCK_FROM_STRUCT(
		game_medal_globals_block_group_block,
		"game_medal_globals_block",
		"game_medal_globals_block",
		1,
		game_medal_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_performance_throttle_block_group_block,
		"game_performance_throttle_block",
		"game_performance_throttle_block",
		1,
		game_performance_throttle_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_performance_throttle_entries_block_block,
		"game_performance_throttle_entries_block",
		"game_performance_throttle_entries_block",
		32,
		game_performance_throttle_entries_block);

	TAG_BLOCK_FROM_STRUCT(
		game_portal_to_door_occluder_block_block,
		"game_portal_to_door_occluder_block",
		"game_portal_to_door_occluder_block",
		32,
		game_portal_to_door_occluder_block);

	TAG_BLOCK_FROM_STRUCT(
		game_portal_to_portal_mapping_block_block,
		"game_portal_to_portal_mapping_block",
		"game_portal_to_portal_mapping_block",
		128,
		game_portal_to_portal_mapping_block);

	TAG_BLOCK_FROM_STRUCT(
		gamepad_stick_info_block_block,
		"gamepad_stick_info_block",
		"gamepad_stick_info_block",
		1,
		gamepad_stick_info_block);

	TAG_BLOCK_FROM_STRUCT(
		garbage_collection_block_block,
		"garbage_collection_block",
		"garbage_collection_block",
		1,
		garbage_collection_block);

	TAG_BLOCK_FROM_STRUCT(
		gear_block_block,
		"gear_block",
		"gear_block",
		16,
		gear_block);

	TAG_BLOCK_FROM_STRUCT(
		gear_block_v1_block,
		"gear_block_v1",
		"gear_block_v1",
		16,
		gear_block_v1);

	TAG_BLOCK_FROM_STRUCT(
		giant_block_group_block,
		"giant_block",
		"giant_block",
		1,
		giant_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		giant_block_index_flags_block_block,
		"giant_block_index_flags_block",
		"giant_block_index_flags_block",
		256,
		giant_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		giant_buckle_parameters_block_block,
		"giant_buckle_parameters_block",
		"giant_buckle_parameters_block",
		3,
		giant_buckle_parameters_block);

	TAG_BLOCK_FROM_STRUCT(
		globalaimassistblock_block,
		"globalAimAssistBlock",
		"globalAimAssistBlock",
		3,
		globalaimassistblock);

	TAG_BLOCK_FROM_STRUCT(
		globalaimswimblock_block,
		"globalAimSwimBlock",
		"globalAimSwimBlock",
		3,
		globalaimswimblock);

	TAG_BLOCK_FROM_STRUCT(
		global_cache_file_pixel_shaders_block_group_block,
		"global_cache_file_pixel_shaders_block",
		"global_cache_file_pixel_shaders_block",
		1,
		global_cache_file_pixel_shaders_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_camera_impulse_block_block,
		"global_camera_impulse_block",
		"global_camera_impulse_block",
		1,
		global_camera_impulse_block);

	TAG_BLOCK_FROM_STRUCT(
		global_collision_bsp_block_block,
		"global_collision_bsp_block",
		"global_collision_bsp_block",
		1,
		global_collision_bsp_block);

	TAG_BLOCK_FROM_STRUCT(
		global_damage_info_block_block,
		"global_damage_info_block",
		"global_damage_info_block",
		1,
		global_damage_info_block);

	TAG_BLOCK_FROM_STRUCT(
		global_damage_nodes_block_block,
		"global_damage_nodes_block",
		"global_damage_nodes_block",
		255,
		global_damage_nodes_block);

	TAG_BLOCK_FROM_STRUCT(
		global_damage_section_block_block,
		"global_damage_section_block",
		"global_damage_section_block",
		16,
		global_damage_section_block);

	TAG_BLOCK_FROM_STRUCT(
		global_decorator_placement_block_block,
		"global_decorator_placement_block",
		"global_decorator_placement_block",
		262144,
		global_decorator_placement_block);

	TAG_BLOCK_FROM_STRUCT(
		global_decorator_type_block_block,
		"global_decorator_type_block",
		"global_decorator_type_block",
		254,
		global_decorator_type_struct);

	TAG_BLOCK_FROM_STRUCT(
		global_detail_object_block_block,
		"global_detail_object_block",
		"global_detail_object_block",
		2097152,
		global_detail_object_block);

	TAG_BLOCK_FROM_STRUCT(
		global_detail_object_cells_block_block,
		"global_detail_object_cells_block",
		"global_detail_object_cells_block",
		262144,
		global_detail_object_cells_block);

	TAG_BLOCK_FROM_STRUCT(
		global_detail_object_counts_block_block,
		"global_detail_object_counts_block",
		"global_detail_object_counts_block",
		8388608,
		global_detail_object_counts_block);

	TAG_BLOCK_FROM_STRUCT(
		global_error_report_categories_block_block,
		"error report category",
		"global_error_report_categories_block",
		512,
		global_error_report_categories_block);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_material_block_block,
		"material",
		"global_geometry_material_block",
		1024,
		global_geometry_material_block);

	TAG_BLOCK_FROM_STRUCT(
		global_instance_bucket_block_block,
		"global_instance_bucket_block",
		"global_instance_bucket_block",
		2048,
		global_instance_bucket_block);

	TAG_BLOCK_FROM_STRUCT(
		global_large_collision_bsp_block_block,
		"global_large_collision_bsp_block",
		"global_large_collision_bsp_block",
		1,
		global_large_collision_bsp_block);

	TAG_BLOCK_FROM_STRUCT(
		global_leaf_connection_block_block,
		"global_leaf_connection_block",
		"global_leaf_connection_block",
		1073741824,
		global_leaf_connection_block);

	TAG_BLOCK_FROM_STRUCT(
		global_map_leaf_block_block,
		"global_map_leaf_block",
		"global_map_leaf_block",
		134217728,
		global_map_leaf_block);

	TAG_BLOCK_FROM_STRUCT(
		global_mesh_block_block,
		"mesh",
		"global_mesh_block",
		8191,
		global_mesh_block);

	TAG_BLOCK_FROM_STRUCT(
		global_model_instance_group_block_block,
		"instance group",
		"global_model_instance_group_block",
		256,
		global_model_instance_group_block);

	TAG_BLOCK_FROM_STRUCT(
		global_muffin_type_block_block,
		"global_muffin_type_block",
		"global_muffin_type_block",
		16,
		global_muffin_type_struct);

	TAG_BLOCK_FROM_STRUCT(
		global_object_attachment_block_block,
		"global_object_attachment_block",
		"global_object_attachment_block",
		48,
		global_object_attachment_block);

	TAG_BLOCK_FROM_STRUCT(
		global_pixel_shader_block_group_block,
		"global_pixel_shader_block",
		"global_pixel_shader_block",
		1,
		global_pixel_shader_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		global_render_model_instance_placement_block_block,
		"global_render_model_instance_placement_block",
		"global_render_model_instance_placement_block",
		128,
		global_render_model_instance_placement_block);

	TAG_BLOCK_FROM_STRUCT(
		global_scenario_load_parameters_block_block,
		"scenario load parameters",
		"global_scenario_load_parameters_block",
		32,
		global_scenario_load_parameters_block);

	TAG_BLOCK_FROM_STRUCT(
		global_self_track_block_block,
		"self track log",
		"global_self_track_block",
		65535,
		global_self_track_block);

	TAG_BLOCK_FROM_STRUCT(
		global_shader_category_dependency_block,
		"global_shader_category_dependency",
		"global_shader_category_dependency",
		16,
		global_shader_category_dependency);

	TAG_BLOCK_FROM_STRUCT(
		global_shader_entry_point_block_block,
		"global_shader_entry_point_block",
		"global_shader_entry_point_block",
		80,
		global_shader_entry_point_block);

	TAG_BLOCK_FROM_STRUCT(
		global_shader_option_dependency_block,
		"global_shader_option_dependency",
		"global_shader_option_dependency",
		32,
		global_shader_option_dependency);

	TAG_BLOCK_FROM_STRUCT(
		global_target_tracking_parameters_block_block,
		"global_target_tracking_parameters_block",
		"global_target_tracking_parameters_block",
		1,
		global_target_tracking_parameters_block);

	TAG_BLOCK_FROM_STRUCT(
		global_team_role_block_block,
		"global_team_role_block",
		"global_team_role_block",
		8,
		global_team_role_block);

	TAG_BLOCK_FROM_STRUCT(
		global_textures_refs_block_block,
		"global_textures_refs_block",
		"global_textures_refs_block",
		255,
		global_textures_refs_block);

	TAG_BLOCK_FROM_STRUCT(
		global_vertex_shader_block_group_block,
		"global_vertex_shader_block",
		"global_vertex_shader_block",
		1,
		global_vertex_shader_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		global_vertex_shader_vertex_types_block_block,
		"global_vertex_shader_vertex_types_block",
		"global_vertex_shader_vertex_types_block",
		108,
		global_vertex_shader_vertex_types_block);

	TAG_BLOCK_FROM_STRUCT(
		global_z_reference_vector_block_block,
		"global_z_reference_vector_block",
		"global_z_reference_vector_block",
		262144,
		global_z_reference_vector_block);

	TAG_BLOCK_FROM_STRUCT(
		globals_block_group_block,
		"globals_block",
		"globals_block",
		1,
		globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		gpu_color_block_block,
		"gpu_color_block",
		"gpu_color_block",
		8,
		gpu_color_block);

	TAG_BLOCK_FROM_STRUCT(
		gpu_function_block_block,
		"gpu_function_block",
		"gpu_function_block",
		25,
		gpu_function_block);

	TAG_BLOCK_FROM_STRUCT(
		gpu_property_block_block,
		"gpu_property_block",
		"gpu_property_block",
		17,
		gpu_property_block);

	TAG_BLOCK_FROM_STRUCT(
		gpu_sprite_block_block,
		"gpu_sprite_block",
		"gpu_sprite_block",
		1,
		gpu_sprite_block);

	TAG_BLOCK_FROM_STRUCT(
		gpu_variants_block_block,
		"gpu_variants_block",
		"gpu_variants_block",
		16,
		gpu_variants_block);

	TAG_BLOCK_FROM_STRUCT(
		grounded_friction_block_group_block,
		"grounded_friction_block",
		"grounded_friction_block",
		1,
		grounded_friction_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		guardian_block_block,
		"guardian_block",
		"guardian_block",
		1,
		guardian_block);

	TAG_BLOCK_FROM_STRUCT(
		gui_alert_description_block_block,
		"gui_alert_description_block",
		"gui_alert_description_block",
		512,
		gui_alert_description_block);

	TAG_BLOCK_FROM_STRUCT(
		gui_dialog_description_block_block,
		"gui_dialog_description_block",
		"gui_dialog_description_block",
		256,
		gui_dialog_description_block);

	TAG_BLOCK_FROM_STRUCT(
		gui_portrait_pose_block_block,
		"gui_portrait_pose_block",
		"gui_portrait_pose_block",
		32,
		gui_portrait_pose_block);

	TAG_BLOCK_FROM_STRUCT(
		havok2_lists_block_block,
		"havok2_lists_block",
		"havok2_lists_block",
		64,
		havok2_lists_block);

	TAG_BLOCK_FROM_STRUCT(
		havok2_polyhedra_block_block,
		"havok2_polyhedra_block",
		"havok2_polyhedra_block",
		16384,
		havok2_polyhedra_block);

	TAG_BLOCK_FROM_STRUCT(
		havok_cleanup_resources_block_block,
		"havok_cleanup_resources_block",
		"havok_cleanup_resources_block",
		1,
		havok_cleanup_resources_block);

	TAG_BLOCK_FROM_STRUCT(
		havok_collision_filter_block_group_block,
		"havok_collision_filter_block",
		"havok_collision_filter_block",
		1,
		havok_collision_filter_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		havok_collision_filter_group_block_block,
		"havok_collision_filter_group_block",
		"havok_collision_filter_group_block",
		31,
		havok_collision_filter_group_block);

	TAG_BLOCK_FROM_STRUCT(
		hinge_constraints_block_block,
		"hinge_constraints_block",
		"hinge_constraints_block",
		64,
		hinge_constraints_block);

	TAG_BLOCK_FROM_STRUCT(
		hint_object_id_block_block,
		"hint_object_id_block",
		"hint_object_id_block",
		32,
		hint_object_id_block);

	TAG_BLOCK_FROM_STRUCT(
		hint_vertex_block_block,
		"hint_vertex_block",
		"hint_vertex_block",
		1024,
		hint_vertex_block);

	TAG_BLOCK_FROM_STRUCT(
		hlsl_include_block_group_block,
		"hlsl_include_block",
		"hlsl_include_block",
		1,
		hlsl_include_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hologramlightingblock_block,
		"hologramLightingBlock",
		"hologramLightingBlock",
		1,
		hologramlightingblock_struct);

	TAG_BLOCK_FROM_STRUCT(
		hologramlightingglobalsblock_block,
		"hologramLightingGlobalsBlock",
		"hologramLightingGlobalsBlock",
		1,
		hologramlightingglobalsblock);

	TAG_BLOCK_FROM_STRUCT(
		hs_globals_block_block,
		"hs_globals_block",
		"hs_globals_block",
		768,
		hs_globals_block);

	TAG_BLOCK_FROM_STRUCT(
		hs_references_block_block,
		"hs_references_block",
		"hs_references_block",
		1024,
		hs_references_block);

	TAG_BLOCK_FROM_STRUCT(
		hs_script_parameters_block_block,
		"hs_script_parameters_block",
		"hs_script_parameters_block",
		16,
		hs_script_parameters_block);

	TAG_BLOCK_FROM_STRUCT(
		hs_scripts_block_block,
		"hs_scripts_block",
		"hs_scripts_block",
		3072,
		hs_scripts_block);

	TAG_BLOCK_FROM_STRUCT(
		hs_source_files_block_group_block,
		"hs_source_files_block",
		"hs_source_files_block",
		128,
		hs_source_files_block);

	TAG_BLOCK_FROM_STRUCT(
		hs_source_reference_block_block,
		"hs_source_reference_block",
		"hs_source_reference_block",
		128,
		hs_source_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		hs_syntax_datum_block_block,
		"hs_syntax_datum_block",
		"hs_syntax_datum_block",
		65023,
		hs_syntax_datum_block);

	TAG_BLOCK_FROM_STRUCT(
		hs_unit_seat_block_block,
		"hs_unit_seat_block",
		"hs_unit_seat_block",
		65536,
		hs_unit_seat_block);

	TAG_BLOCK_FROM_STRUCT(
		hud_unit_sound_block_block,
		"hud_unit_sound_block",
		"hud_unit_sound_block",
		1,
		hud_unit_sound_block);

	TAG_BLOCK_FROM_STRUCT(
		hud_unit_sound_cue_block_block,
		"hud_unit_sound_cue_block",
		"hud_unit_sound_cue_block",
		16,
		hud_unit_sound_cue_block);

	TAG_BLOCK_FROM_STRUCT(
		human_jeep_block_block,
		"human_jeep_block",
		"human_jeep_block",
		1,
		human_jeep_block);

	TAG_BLOCK_FROM_STRUCT(
		human_plane_block_block,
		"human_plane_block",
		"human_plane_block",
		1,
		human_plane_block);

	TAG_BLOCK_FROM_STRUCT(
		human_tank_block_block,
		"human_tank_block",
		"human_tank_block",
		1,
		human_tank_struct);

	TAG_BLOCK_FROM_STRUCT(
		import_animation_event_block_block,
		"import_animation_event_block",
		"import_animation_event_block",
		4096,
		import_animation_event_block);

	TAG_BLOCK_FROM_STRUCT(
		import_frame_event_block_block,
		"import_frame_event_block",
		"import_frame_event_block",
		512,
		import_frame_event_block);

	TAG_BLOCK_FROM_STRUCT(
		imposter_mode_node_block_block,
		"imposter_mode_node_block",
		"imposter_mode_node_block",
		1024,
		imposter_mode_node_block);

	TAG_BLOCK_FROM_STRUCT(
		imposter_model_block_group_block,
		"imposter_model_block",
		"imposter_model_block",
		1,
		imposter_model_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		incident_accumulator_block_block,
		"incident_accumulator_block",
		"incident_accumulator_block",
		1,
		incident_accumulator_block);

	TAG_BLOCK_FROM_STRUCT(
		incident_accumulator_child_incident_block_block,
		"incident_accumulator_child_incident_block",
		"incident_accumulator_child_incident_block",
		60,
		incident_accumulator_child_incident_block);

	TAG_BLOCK_FROM_STRUCT(
		incident_definition_block_block,
		"incident_definition_block",
		"incident_definition_block",
		1000,
		incident_definition_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		incident_global_properties_definition_block_group_block,
		"incident_global_properties_definition_block",
		"incident_global_properties_definition_block",
		1,
		incident_global_properties_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		incident_globals_definition_block_group_block,
		"incident_globals_definition_block",
		"incident_globals_definition_block",
		1,
		incident_globals_definition_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		incident_sum_accumulator_block_block,
		"incident_sum_accumulator_block",
		"incident_sum_accumulator_block",
		1,
		incident_sum_accumulator_block);

	TAG_BLOCK_FROM_STRUCT(
		incident_sum_accumulator_child_incident_block_block,
		"incident_sum_accumulator_child_incident_block",
		"incident_sum_accumulator_child_incident_block",
		60,
		incident_sum_accumulator_child_incident_block);

	TAG_BLOCK_FROM_STRUCT(
		indexbuffersblock_block,
		"indexBuffersBlock",
		"indexBuffersBlock",
		1,
		indexbuffersblock_struct);

	TAG_BLOCK_FROM_STRUCT(
		index_buffers_block_block,
		"index_buffers_block",
		"index_buffers_block",
		8191,
		index_buffers_block);

	TAG_BLOCK_FROM_STRUCT(
		index_list_block_block,
		"index_list_block",
		"index_list_block",
		4096,
		index_list_block);

	TAG_BLOCK_FROM_STRUCT(
		indices_dword_block_block,
		"indices_dword_block",
		"indices_dword_block",
		2147483647,
		indices_dword_block);

	TAG_BLOCK_FROM_STRUCT(
		indices_word_block_block,
		"indices_word_block",
		"indices_word_block",
		2147483647,
		indices_word_block);

	TAG_BLOCK_FROM_STRUCT(
		influencerspawnsettingsblock_block,
		"influencerSpawnSettingsBlock",
		"influencerSpawnSettingsBlock",
		16,
		influencerspawnsettingsblock);

	TAG_BLOCK_FROM_STRUCT(
		inherited_animation_block_block,
		"inherited_animation_block",
		"inherited_animation_block",
		8,
		inherited_animation_block);

	TAG_BLOCK_FROM_STRUCT(
		inherited_animation_node_map_block_block,
		"inherited_animation_node_map_block",
		"inherited_animation_node_map_block",
		255,
		inherited_animation_node_map_block);

	TAG_BLOCK_FROM_STRUCT(
		inherited_animation_node_map_flag_block_block,
		"inherited_animation_node_map_flag_block",
		"inherited_animation_node_map_flag_block",
		255,
		inherited_animation_node_map_flag_block);

	TAG_BLOCK_FROM_STRUCT(
		input_mapping_function_block_block,
		"input_mapping_function_block",
		"input_mapping_function_block",
		1,
		input_mapping_function_block);

	TAG_BLOCK_FROM_STRUCT(
		instance_imposter_block_block,
		"instance_imposter_block",
		"instance_imposter_block",
		8192,
		instance_imposter_block);

	TAG_BLOCK_FROM_STRUCT(
		instance_imposter_checksum_block_block,
		"instance_imposter_checksum_block",
		"instance_imposter_checksum_block",
		8192,
		instance_imposter_checksum_block);

	TAG_BLOCK_FROM_STRUCT(
		instance_imposter_definition_block_group_block,
		"instance_imposter_definition_block",
		"instance_imposter_definition_block",
		1,
		instance_imposter_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		instance_index_word_block_block,
		"instance_index_word_block",
		"instance_index_word_block",
		65535,
		instance_index_word_block);

	TAG_BLOCK_FROM_STRUCT(
		instance_node_map_mapping_block_block,
		"instance_node_map_mapping_block",
		"instance_node_map_mapping_block",
		255,
		instance_node_map_mapping_block);

	TAG_BLOCK_FROM_STRUCT(
		instance_wetness_instance_block_block,
		"instance_wetness_instance_block",
		"instance_wetness_instance_block",
		65535,
		instance_wetness_instance_block);

	TAG_BLOCK_FROM_STRUCT(
		instantaneous_damage_repsonse_block_block,
		"instantaneous_damage_repsonse_block",
		"instantaneous_damage_repsonse_block",
		16,
		instantaneous_damage_repsonse_block);

	TAG_BLOCK_FROM_STRUCT(
		int_block_block$2,
		"int_block",
		"int_block",
		1024,
		int_block$2);

	TAG_BLOCK_FROM_STRUCT(
		int_block_block,
		"int_block",
		"int_block",
		1024,
		int_block);

	TAG_BLOCK_FROM_STRUCT(
		interface_tag_references_block,
		"interface_tag_references",
		"interface_tag_references",
		1,
		interface_tag_references);

	TAG_BLOCK_FROM_STRUCT(
		involuntary_data_block_block,
		"involuntary_data_block",
		"involuntary_data_block",
		100,
		involuntary_data_block);

	TAG_BLOCK_FROM_STRUCT(
		item_block_group_block,
		"item_block",
		"item_block",
		1,
		item_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		jackal_glider_block_block,
		"jackal_glider_block",
		"jackal_glider_block",
		1,
		jackal_glider_block);

	TAG_BLOCK_FROM_STRUCT(
		jetwash_definition_block_block,
		"jetwash_definition_block",
		"jetwash_definition_block",
		4,
		jetwash_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		large_bsp2d_nodes_block_block,
		"bsp2d node",
		"large_bsp2d_nodes_block",
		536870911,
		large_bsp2d_nodes_block);

	TAG_BLOCK_FROM_STRUCT(
		large_bsp2d_references_block_block,
		"bsp2d reference",
		"large_bsp2d_references_block",
		536870911,
		large_bsp2d_references_block);

	TAG_BLOCK_FROM_STRUCT(
		large_bsp3d_nodes_block_block,
		"bsp3d node",
		"large_bsp3d_nodes_block",
		536870911,
		large_bsp3d_nodes_block);

	TAG_BLOCK_FROM_STRUCT(
		large_edges_block_block,
		"edge",
		"large_edges_block",
		2621440,
		large_edges_block);

	TAG_BLOCK_FROM_STRUCT(
		large_leaves_block_block,
		"leaf",
		"large_leaves_block",
		134217728,
		large_leaves_block);

	TAG_BLOCK_FROM_STRUCT(
		large_surfaces_block_block,
		"large_surfaces_block",
		"large_surfaces_block",
		262136,
		large_surfaces_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		large_vertices_block_block,
		"vertex",
		"large_vertices_block",
		1310720,
		large_vertices_block);

	TAG_BLOCK_FROM_STRUCT(
		leaf_connection_vertex_block_block,
		"leaf_connection_vertex_block",
		"leaf_connection_vertex_block",
		512,
		leaf_connection_vertex_block);

	TAG_BLOCK_FROM_STRUCT(
		leaf_system_block_group_block,
		"leaf_system_block",
		"leaf_system_block",
		1,
		leaf_system_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		leaf_type_block_block,
		"leaf_type_block",
		"leaf_type_block",
		16,
		leaf_type_block);

	TAG_BLOCK_FROM_STRUCT(
		leaves_block_block,
		"leaves_block",
		"leaves_block",
		8388608,
		collision_leaf_struct);

	TAG_BLOCK_FROM_STRUCT(
		lens_flare_block_group_block,
		"lens_flare_block",
		"lens_flare_block",
		1,
		lens_flare_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lens_flare_color_animation_block_block,
		"lens_flare_color_animation_block",
		"lens_flare_color_animation_block",
		1,
		lens_flare_color_animation_block);

	TAG_BLOCK_FROM_STRUCT(
		lens_flare_reflection_block_block,
		"reflection",
		"lens_flare_reflection_block",
		32,
		lens_flare_reflection_block);

	TAG_BLOCK_FROM_STRUCT(
		lens_flare_scalar_animation_block_block,
		"lens_flare_scalar_animation_block",
		"lens_flare_scalar_animation_block",
		1,
		lens_flare_scalar_animation_block);

	TAG_BLOCK_FROM_STRUCT(
		light_block_group_block,
		"light_block",
		"light_block",
		1,
		light_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		light_cone_block_group_block,
		"light_cone_block",
		"light_cone_block",
		1,
		light_cone_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		light_rig_block_group_block,
		"light_rig_block",
		"light_rig_block",
		1,
		light_rig_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		light_volume_definition_block_block,
		"light_volume_definition_block",
		"light_volume_definition_block",
		16,
		light_volume_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		light_volume_precompiled_vert_block_block,
		"light_volume_precompiled_vert_block",
		"light_volume_precompiled_vert_block",
		128,
		light_volume_precompiled_vert_block);

	TAG_BLOCK_FROM_STRUCT(
		light_volume_system_block_group_block,
		"light_volume_system_block",
		"light_volume_system_block",
		1,
		light_volume_system_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lightmap_model_globals_block_group_block,
		"lightmap_model_globals_block",
		"lightmap_model_globals_block",
		1,
		lightmap_model_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lightmap_model_reference_block_block,
		"lightmap_model_reference_block",
		"lightmap_model_reference_block",
		32767,
		lightmap_model_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		lightmapper_globals_block_group_block,
		"lightmapper_globals_block",
		"lightmapper_globals_block",
		1,
		lightmapper_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		limited_hinge_constraints_block_block,
		"limited_hinge_constraints_block",
		"limited_hinge_constraints_block",
		64,
		limited_hinge_constraints_block);

	TAG_BLOCK_FROM_STRUCT(
		list_shapes_block_block,
		"list_shapes_block",
		"list_shapes_block",
		4096,
		list_shapes_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		lists_block_block,
		"lists_block",
		"lists_block",
		64,
		lists_block);

	TAG_BLOCK_FROM_STRUCT(
		loadscreenblock_group_block,
		"loadScreenBlock",
		"loadScreenBlock",
		1,
		loadscreenblock);

	TAG_BLOCK_FROM_STRUCT(
		loadscreenreferenceblock_block,
		"loadScreenReferenceBlock",
		"loadScreenReferenceBlock",
		32767,
		loadscreenreferenceblock);

	TAG_BLOCK_FROM_STRUCT(
		load_and_cruise_block_block,
		"load_and_cruise_block",
		"load_and_cruise_block",
		2,
		load_and_cruise_block);

	TAG_BLOCK_FROM_STRUCT(
		loadout_definition_block_block,
		"loadout_definition_block",
		"loadout_definition_block",
		128,
		loadout_definition_struct);

	TAG_BLOCK_FROM_STRUCT(
		loadout_globals_definition_block_group_block,
		"loadout_globals_definition_block",
		"loadout_globals_definition_block",
		1,
		loadout_globals_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		loadout_index_block_block,
		"loadout_index_block",
		"loadout_index_block",
		5,
		loadout_index_block);

	TAG_BLOCK_FROM_STRUCT(
		loadout_name_block_block,
		"loadout_name_block",
		"loadout_name_block",
		128,
		loadout_name_block);

	TAG_BLOCK_FROM_STRUCT(
		loadout_palette_definition_block_block,
		"loadout_palette_definition_block",
		"loadout_palette_definition_block",
		64,
		loadout_palette_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		location_name_block_block,
		"location_name_block",
		"location_name_block",
		255,
		location_name_block);

	TAG_BLOCK_FROM_STRUCT(
		location_name_globals_definition_block_group_block,
		"location_name_globals_definition_block",
		"location_name_globals_definition_block",
		1,
		location_name_globals_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		looping_sound_detail_block_block,
		"looping_sound_detail_block",
		"looping_sound_detail_block",
		12,
		looping_sound_detail_block);

	TAG_BLOCK_FROM_STRUCT(
		looping_sound_track_block_block,
		"looping_sound_track_block",
		"looping_sound_track_block",
		4,
		looping_sound_track_block);

	TAG_BLOCK_FROM_STRUCT(
		looping_sounds_block_block,
		"looping_sounds_block",
		"looping_sounds_block",
		60,
		looping_sounds_block);

	TAG_BLOCK_FROM_STRUCT(
		machine_block_index_flags_block_block,
		"machine_block_index_flags_block",
		"machine_block_index_flags_block",
		256,
		machine_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		magazine_objects_block,
		"magazine_objects",
		"magazine_objects",
		8,
		magazine_objects);

	TAG_BLOCK_FROM_STRUCT(
		magazines_block,
		"magazines",
		"magazines",
		2,
		magazines);

	TAG_BLOCK_FROM_STRUCT(
		main_menu_voiceover_block_group_block,
		"main_menu_voiceover_block",
		"main_menu_voiceover_block",
		1,
		main_menu_voiceover_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		main_menu_voiceover_lines_block_block,
		"main_menu_voiceover_lines_block",
		"main_menu_voiceover_lines_block",
		100,
		main_menu_voiceover_lines_block);

	TAG_BLOCK_FROM_STRUCT(
		mantis_block_block,
		"mantis_block",
		"mantis_block",
		1,
		mantis_block);

	TAG_BLOCK_FROM_STRUCT(
		mapvariantpalettedependencyblock_block,
		"mapVariantPaletteDependencyBlock",
		"mapVariantPaletteDependencyBlock",
		32767,
		mapvariantpalettedependencyblock);

	TAG_BLOCK_FROM_STRUCT(
		map_leaf_connection_index_block_block,
		"map_leaf_connection_index_block",
		"map_leaf_connection_index_block",
		1048576,
		map_leaf_connection_index_block);

	TAG_BLOCK_FROM_STRUCT(
		map_leaf_face_block_block,
		"map_leaf_face_block",
		"map_leaf_face_block",
		1048576,
		map_leaf_face_block);

	TAG_BLOCK_FROM_STRUCT(
		map_leaf_face_vertex_block_block,
		"map_leaf_face_vertex_block",
		"map_leaf_face_vertex_block",
		512,
		map_leaf_face_vertex_block);

	TAG_BLOCK_FROM_STRUCT(
		map_variant_object_variant_block_block,
		"map_variant_object_variant_block",
		"map_variant_object_variant_block",
		32,
		map_variant_object_variant_block);

	TAG_BLOCK_FROM_STRUCT(
		map_variant_palette_block_block,
		"map_variant_palette_block",
		"map_variant_palette_block",
		16,
		map_variant_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		map_variant_palette_entry_block_block,
		"map_variant_palette_entry_block",
		"map_variant_palette_entry_block",
		256,
		map_variant_palette_entry_block);

	TAG_BLOCK_FROM_STRUCT(
		mass_distributions_block_block,
		"mass_distributions_block",
		"mass_distributions_block",
		1024,
		mass_distributions_block);

	TAG_BLOCK_FROM_STRUCT(
		material_block_group_block,
		"material_block",
		"material_block",
		1,
		material_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		material_effect_block_v2_block,
		"material_effect_block_v2",
		"material_effect_block_v2",
		24,
		material_effect_block_v2);

	TAG_BLOCK_FROM_STRUCT(
		material_effect_material_block_block,
		"material_effect_material_block",
		"material_effect_material_block",
		500,
		material_effect_material_block);

	TAG_BLOCK_FROM_STRUCT(
		material_effects_block_group_block,
		"material_effects_block",
		"material_effects_block",
		1,
		material_effects_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		material_postprocess_block_block,
		"material_postprocess_block",
		"material_postprocess_block",
		1,
		material_postprocess_block);

	TAG_BLOCK_FROM_STRUCT(
		material_postprocess_texture_block_block,
		"material_postprocess_texture_block",
		"material_postprocess_texture_block",
		32,
		material_postprocess_texture_block);

	TAG_BLOCK_FROM_STRUCT(
		material_shader_bank_block_group_block,
		"material_shader_bank_block",
		"material_shader_bank_block",
		1,
		material_shader_bank_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		material_shader_block_group_block,
		"material_shader_block",
		"material_shader_block",
		1,
		material_shader_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		material_shader_function_parameter_block_block,
		"material_shader_function_parameter_block",
		"material_shader_function_parameter_block",
		111,
		material_shader_function_parameter_block);

	TAG_BLOCK_FROM_STRUCT(
		material_shader_parameter_block_block,
		"material_shader_parameter_block",
		"material_shader_parameter_block",
		111,
		material_shader_parameter_block);

	TAG_BLOCK_FROM_STRUCT(
		material_shader_source_file_block_block,
		"material_shader_source_file_block",
		"material_shader_source_file_block",
		256,
		material_shader_source_file_block);

	TAG_BLOCK_FROM_STRUCT(
		material_textures_refs_block_block,
		"material_textures_refs_block",
		"material_textures_refs_block",
		16,
		material_textures_refs_block);

	TAG_BLOCK_FROM_STRUCT(
		material_vertex_shader_entry_point_block_block,
		"material_vertex_shader_entry_point_block",
		"material_vertex_shader_entry_point_block",
		48,
		material_vertex_shader_entry_point_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		materials_block_block$2,
		"materials_block",
		"materials_block",
		256,
		materials_block$2);

	TAG_BLOCK_FROM_STRUCT(
		materials_block_block,
		"materials_block",
		"materials_block",
		64,
		materials_block);

	TAG_BLOCK_FROM_STRUCT(
		medalaggregatorentry_block,
		"medalAggregatorEntry",
		"medalAggregatorEntry",
		12,
		medalaggregatorentry);

	TAG_BLOCK_FROM_STRUCT(
		medalchallengeaggregator_block,
		"medalChallengeAggregator",
		"medalChallengeAggregator",
		64,
		medalchallengeaggregator);

	TAG_BLOCK_FROM_STRUCT(
		medalcommendationaggregator_block,
		"medalCommendationAggregator",
		"medalCommendationAggregator",
		64,
		medalcommendationaggregator);

	TAG_BLOCK_FROM_STRUCT(
		medal_challenge_aggregator_list_block_group_block,
		"medal_challenge_aggregator_list_block",
		"medal_challenge_aggregator_list_block",
		1,
		medal_challenge_aggregator_list_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		medal_commendation_aggregator_list_block_group_block,
		"medal_commendation_aggregator_list_block",
		"medal_commendation_aggregator_list_block",
		1,
		medal_commendation_aggregator_list_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		megalo_string_id_block_block,
		"megalo_string_id_block",
		"megalo_string_id_block",
		255,
		megalo_string_id_block);

	TAG_BLOCK_FROM_STRUCT(
		megalo_string_id_table_block_group_block,
		"megalo_string_id_table_block",
		"megalo_string_id_table_block",
		1,
		megalo_string_id_table_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		megalo_string_id_to_sprite_index_block_block,
		"megalo_string_id_to_sprite_index_block",
		"megalo_string_id_to_sprite_index_block",
		255,
		megalo_string_id_to_sprite_index_block);

	TAG_BLOCK_FROM_STRUCT(
		megalogamengine_sounds_block_group_block,
		"megalogamengine_sounds_block",
		"megalogamengine_sounds_block",
		1,
		megalogamengine_sounds_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		melee_damage_parameters_block_block,
		"melee_damage_parameters_block",
		"melee_damage_parameters_block",
		2,
		melee_damage_parameters_block);

	TAG_BLOCK_FROM_STRUCT(
		meter_block_group_block,
		"meter_block",
		"meter_block",
		1,
		meter_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		mission_dialogue_lines_block_block,
		"mission_dialogue_lines_block",
		"mission_dialogue_lines_block",
		500,
		mission_dialogue_lines_block);

	TAG_BLOCK_FROM_STRUCT(
		mission_dialogue_variants_block_block,
		"mission_dialogue_variants_block",
		"mission_dialogue_variants_block",
		10,
		mission_dialogue_variants_block);

	TAG_BLOCK_FROM_STRUCT(
		mode_or_stance_alias_block_block,
		"mode_or_stance_alias_block",
		"mode_or_stance_alias_block",
		64,
		mode_or_stance_alias_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		modeldissolvedatablock_block,
		"modelDissolveDataBlock",
		"modelDissolveDataBlock",
		13,
		modeldissolvedatablock);

	TAG_BLOCK_FROM_STRUCT(
		modeldissolveperregiontimeoffsetblock_block,
		"modelDissolvePerRegionTimeOffsetBlock",
		"modelDissolvePerRegionTimeOffsetBlock",
		32,
		modeldissolveperregiontimeoffsetblock);

	TAG_BLOCK_FROM_STRUCT(
		model_animation_graph_block_group_block,
		"model_animation_graph_block",
		"model_animation_graph_block",
		1,
		model_animation_graph_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		model_animation_tag_resource_group_block,
		"model_animation_tag_resource_group",
		"model_animation_tag_resource_group",
		6144,
		model_animation_tag_resource_group);

	TAG_BLOCK_FROM_STRUCT(
		model_animation_tag_resource_member_block,
		"model_animation_tag_resource_member",
		"model_animation_tag_resource_member",
		2048,
		model_animation_tag_resource_member);

	TAG_BLOCK_FROM_STRUCT(
		model_animation_variant_block_block,
		"model_animation_variant_block",
		"model_animation_variant_block",
		64,
		model_animation_variant_block);

	TAG_BLOCK_FROM_STRUCT(
		model_block_group_block,
		"model_block",
		"model_block",
		1,
		model_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		model_dissolve_definition_block_group_block,
		"model_dissolve_definition_block",
		"model_dissolve_definition_block",
		1,
		model_dissolve_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_game_mode_render_model_override_block,
		"game mode render model override",
		"model_game_mode_render_model_override",
		4,
		model_game_mode_render_model_override);

	TAG_BLOCK_FROM_STRUCT(
		model_instance_group_member_block_block,
		"instance group member",
		"model_instance_group_member_block",
		32,
		model_instance_group_member_block);

	TAG_BLOCK_FROM_STRUCT(
		model_material_block_new_block,
		"material",
		"model_material_block_new",
		32,
		model_material_block_new);

	TAG_BLOCK_FROM_STRUCT(
		model_node_block_block,
		"model_node_block",
		"model_node_block",
		255,
		model_node_block);

	TAG_BLOCK_FROM_STRUCT(
		model_occlusion_sphere_block_block,
		"model_occlusion_sphere_block",
		"model_occlusion_sphere_block",
		32,
		model_occlusion_sphere_block);

	TAG_BLOCK_FROM_STRUCT(
		model_permutation_block_block,
		"model_permutation_block",
		"model_permutation_block",
		255,
		model_permutation_block);

	TAG_BLOCK_FROM_STRUCT(
		model_references_block_block,
		"model_references_block",
		"model_references_block",
		32767,
		model_references_block);

	TAG_BLOCK_FROM_STRUCT(
		model_region_block_block,
		"model_region_block",
		"model_region_block",
		32,
		model_region_block);

	TAG_BLOCK_FROM_STRUCT(
		model_self_shadow_region_cast_override_block_block,
		"model_self_shadow_region_cast_override_block",
		"model_self_shadow_region_cast_override_block",
		32,
		model_self_shadow_region_cast_override_block);

	TAG_BLOCK_FROM_STRUCT(
		model_self_shadow_region_receive_override_block_block,
		"model_self_shadow_region_receive_override_block",
		"model_self_shadow_region_receive_override_block",
		32,
		model_self_shadow_region_receive_override_block);

	TAG_BLOCK_FROM_STRUCT(
		model_target_block_new_block,
		"model_target_block_new",
		"model_target_block_new",
		32,
		model_target_block_new);

	TAG_BLOCK_FROM_STRUCT(
		model_target_block_old_block,
		"model_target_block_old",
		"model_target_block_old",
		32,
		model_target_block_old);

	TAG_BLOCK_FROM_STRUCT(
		model_variant_block_block,
		"variant",
		"model_variant_block",
		64,
		model_variant_block);

	TAG_BLOCK_FROM_STRUCT(
		model_variant_muted_node_block_block,
		"muted node",
		"model_variant_muted_node_block",
		31,
		model_variant_muted_node_block);

	TAG_BLOCK_FROM_STRUCT(
		model_variant_object_block_block,
		"object",
		"model_variant_object_block",
		31,
		model_variant_object_block);

	TAG_BLOCK_FROM_STRUCT(
		model_variant_permutation_block_block,
		"permutation",
		"model_variant_permutation_block",
		255,
		model_variant_permutation_block);

	TAG_BLOCK_FROM_STRUCT(
		model_variant_region_block_block,
		"region",
		"model_variant_region_block",
		32,
		model_variant_region_block);

	TAG_BLOCK_FROM_STRUCT(
		model_variant_state_block_block,
		"model_variant_state_block",
		"model_variant_state_block",
		10,
		model_variant_state_block);

	TAG_BLOCK_FROM_STRUCT(
		mopp_code_data_definition_block_block,
		"mopp_code_data_definition_block",
		"mopp_code_data_definition_block",
		16777216,
		mopp_code_data_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		mopp_code_definition_block_block,
		"mopp_code_definition_block",
		"mopp_code_definition_block",
		32767,
		mopp_code_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		mopps_block_block,
		"mopps_block",
		"mopps_block",
		64,
		mopps_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		movement_mapping_block_block,
		"movement_mapping_block",
		"movement_mapping_block",
		8,
		movement_mapping_block);

	TAG_BLOCK_FROM_STRUCT(
		movement_stationary_pause_block_block,
		"movement_stationary_pause_block",
		"movement_stationary_pause_block",
		8,
		movement_stationary_pause_block);

	TAG_BLOCK_FROM_STRUCT(
		movement_throttle_block_block,
		"movement_throttle_block",
		"movement_throttle_block",
		16,
		movement_throttle_block);

	TAG_BLOCK_FROM_STRUCT(
		movement_throttle_control_block_block,
		"movement_throttle_control_block",
		"movement_throttle_control_block",
		10,
		movement_throttle_control_block);

	TAG_BLOCK_FROM_STRUCT(
		muffin_block_group_block,
		"muffin_block",
		"muffin_block",
		1,
		muffin_block);

	TAG_BLOCK_FROM_STRUCT(
		muffin_marker_block_block,
		"muffin_marker_block",
		"muffin_marker_block",
		32767,
		muffin_marker_block);

	TAG_BLOCK_FROM_STRUCT(
		muffin_permutation_name_block_block,
		"muffin_permutation_name_block",
		"muffin_permutation_name_block",
		32767,
		muffin_permutation_name_block);

	TAG_BLOCK_FROM_STRUCT(
		multi_spheres_block_block,
		"multi_spheres_block",
		"multi_spheres_block",
		16384,
		multi_spheres_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		multilingual_unicode_string_list_block_group_block,
		"multilingual_unicode_string_list_block",
		"multilingual_unicode_string_list_block",
		1,
		multilingual_unicode_string_list_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multilingual_unicode_string_reference_block_block,
		"multilingual_unicode_string_reference_block",
		"multilingual_unicode_string_reference_block",
		34816,
		multilingual_unicode_string_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		multiplayereffectsblock_block,
		"multiplayerEffectsBlock",
		"multiplayerEffectsBlock",
		2048,
		multiplayereffectsblock);

	TAG_BLOCK_FROM_STRUCT(
		multiplayereffects_block_group_block,
		"multiplayerEffects_block",
		"multiplayerEffects_block",
		1,
		multiplayereffects_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_color_block_block,
		"multiplayer_color_block",
		"multiplayer_color_block",
		32,
		multiplayer_color_block);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_color_block_block$2,
		"multiplayer_color_block",
		"multiplayer_color_block",
		32,
		multiplayer_color_block$2);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_constants_block_block,
		"multiplayer_constants_block",
		"multiplayer_constants_block",
		1,
		multiplayer_constants_block);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_equipment_collection_block_block,
		"multiplayer_equipment_collection_block",
		"multiplayer_equipment_collection_block",
		32,
		multiplayer_object_collection_struct);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_equipment_remap_table_block_block,
		"multiplayer_equipment_remap_table_block",
		"multiplayer_equipment_remap_table_block",
		32,
		multiplayer_equipment_remap_table_block);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_equipment_remap_table_entry_block_block,
		"multiplayer_equipment_remap_table_entry_block",
		"multiplayer_equipment_remap_table_entry_block",
		32,
		multiplayer_equipment_remap_table_entry_block);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_globals_block_group_block,
		"multiplayer_globals_block",
		"multiplayer_globals_block",
		1,
		multiplayer_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_grenade_collection_block_block,
		"multiplayer_grenade_collection_block",
		"multiplayer_grenade_collection_block",
		8,
		multiplayer_object_collection_struct);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_object_block_block,
		"multiplayer_object_block",
		"multiplayer_object_block",
		1,
		multiplayer_object_block);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_object_type_block_block,
		"multiplayer_object_type_block",
		"multiplayer_object_type_block",
		2048,
		multiplayer_object_type_block);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_object_type_list_block_group_block,
		"multiplayer_object_type_list_block",
		"multiplayer_object_type_list_block",
		1,
		multiplayer_object_type_list_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_runtime_block_block,
		"multiplayer_runtime_block",
		"multiplayer_runtime_block",
		1,
		multiplayer_runtime_block);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_scenario_description_block_group_block,
		"multiplayer_scenario_description_block",
		"multiplayer_scenario_description_block",
		1,
		multiplayer_scenario_description_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_universal_block_block,
		"multiplayer_universal_block",
		"multiplayer_universal_block",
		1,
		multiplayer_universal_block);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_variant_settings_interface_definition_block_group_block,
		"multiplayer_variant_settings_interface_definition_block",
		"multiplayer_variant_settings_interface_definition_block",
		1,
		multiplayer_variant_settings_interface_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_vehicle_collection_block_block,
		"multiplayer_vehicle_collection_block",
		"multiplayer_vehicle_collection_block",
		64,
		multiplayer_object_collection_struct);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_vehicle_remap_table_block_block,
		"multiplayer_vehicle_remap_table_block",
		"multiplayer_vehicle_remap_table_block",
		32,
		multiplayer_vehicle_remap_table_block);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_vehicle_remap_table_entry_block_block,
		"multiplayer_vehicle_remap_table_entry_block",
		"multiplayer_vehicle_remap_table_entry_block",
		32,
		multiplayer_vehicle_remap_table_entry_block);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_weapon_collection_block_block,
		"multiplayer_weapon_collection_block",
		"multiplayer_weapon_collection_block",
		64,
		multiplayer_object_collection_struct);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_weapon_remap_table_block_block,
		"multiplayer_weapon_remap_table_block",
		"multiplayer_weapon_remap_table_block",
		32,
		multiplayer_weapon_remap_table_block);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_weapon_remap_table_entry_block_block,
		"multiplayer_weapon_remap_table_entry_block",
		"multiplayer_weapon_remap_table_entry_block",
		32,
		multiplayer_weapon_remap_table_entry_block);

	TAG_BLOCK_FROM_STRUCT(
		mux_generator_block_group_block,
		"mux_generator_block",
		"mux_generator_block",
		1,
		mux_generator_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		mux_generator_material_block_block,
		"mux_generator_material_block",
		"mux_generator_material_block",
		16,
		mux_generator_material_block);

	TAG_BLOCK_FROM_STRUCT(
		named_location_volume_point_block_block,
		"named_location_volume_point_block",
		"named_location_volume_point_block",
		32,
		named_location_volume_point_block);

	TAG_BLOCK_FROM_STRUCT(
		new_animation_blend_screen_block_block,
		"new_animation_blend_screen_block",
		"new_animation_blend_screen_block",
		1024,
		new_animation_blend_screen_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		new_animation_function_overlay_block_block,
		"new_animation_function_overlay_block",
		"new_animation_function_overlay_block",
		32,
		new_animation_function_overlay_block);

	TAG_BLOCK_FROM_STRUCT(
		new_cinematic_lighting_block_group_block,
		"new_cinematic_lighting_block",
		"new_cinematic_lighting_block",
		1,
		new_cinematic_lighting_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		new_global_damage_section_block_block,
		"new_global_damage_section_block",
		"new_global_damage_section_block",
		16,
		new_global_damage_section_block);

	TAG_BLOCK_FROM_STRUCT(
		new_instantaneous_damage_response_block_block,
		"new_instantaneous_damage_response_block",
		"new_instantaneous_damage_response_block",
		16,
		new_instantaneous_damage_response_block);

	TAG_BLOCK_FROM_STRUCT(
		node_map_byte_block_block,
		"node_map_byte_block",
		"node_map_byte_block",
		255,
		node_map_byte_block);

	TAG_BLOCK_FROM_STRUCT(
		nodes_block_block,
		"nodes_block",
		"nodes_block",
		255,
		nodes_block);

	TAG_BLOCK_FROM_STRUCT(
		objectfunctionswitchblock_block,
		"objectFunctionSwitchBlock",
		"objectFunctionSwitchBlock",
		32,
		objectfunctionswitchblock);

	TAG_BLOCK_FROM_STRUCT(
		objectfunctionswitchfunctionblock_block,
		"objectFunctionSwitchFunctionBlock",
		"objectFunctionSwitchFunctionBlock",
		8,
		objectfunctionswitchfunctionblock);

	TAG_BLOCK_FROM_STRUCT(
		object_ai_properties_block_block,
		"object_ai_properties_block",
		"object_ai_properties_block",
		1,
		object_ai_properties_block);

	TAG_BLOCK_FROM_STRUCT(
		object_block_group_block,
		"object_block",
		"object_block",
		1,
		object_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		object_change_color_function_block,
		"object_change_color_function",
		"object_change_color_function",
		4,
		object_change_color_function);

	TAG_BLOCK_FROM_STRUCT(
		object_change_color_initial_permutation_block,
		"object_change_color_initial_permutation",
		"object_change_color_initial_permutation",
		32,
		object_change_color_initial_permutation);

	TAG_BLOCK_FROM_STRUCT(
		object_change_colors_block,
		"object_change_colors",
		"object_change_colors",
		4,
		object_change_colors);

	TAG_BLOCK_FROM_STRUCT(
		object_early_mover_obb_block_block,
		"object_early_mover_obb_block",
		"object_early_mover_obb_block",
		1,
		object_early_mover_obb_block);

	TAG_BLOCK_FROM_STRUCT(
		object_function_block_block,
		"object_function_block",
		"object_function_block",
		256,
		object_function_block);

	TAG_BLOCK_FROM_STRUCT(
		object_function_interpolation_block_block,
		"object_function_interpolation_block",
		"object_function_interpolation_block",
		2,
		object_function_interpolation_block);

	TAG_BLOCK_FROM_STRUCT(
		object_runtime_interpolator_functions_block_block,
		"object_runtime_interpolator_functions_block",
		"object_runtime_interpolator_functions_block",
		256,
		object_runtime_interpolator_functions_block);

	TAG_BLOCK_FROM_STRUCT(
		object_space_node_data_block_block,
		"object_space_node_data_block",
		"object_space_node_data_block",
		255,
		object_space_node_data_block);

	TAG_BLOCK_FROM_STRUCT(
		object_space_offset_node_block_block,
		"object_space_offset_node_block",
		"object_space_offset_node_block",
		16,
		object_space_offset_node_block);

	TAG_BLOCK_FROM_STRUCT(
		object_spawn_effects_block_block,
		"object_spawn_effects_block",
		"object_spawn_effects_block",
		1,
		object_spawn_effects_block);

	TAG_BLOCK_FROM_STRUCT(
		object_type_drag_properties_block_block,
		"object_type_drag_properties_block",
		"object_type_drag_properties_block",
		16,
		object_type_drag_properties_block);

	TAG_BLOCK_FROM_STRUCT(
		object_widget_block_block,
		"object_widget_block",
		"object_widget_block",
		4,
		object_widget_block);

	TAG_BLOCK_FROM_STRUCT(
		objectives_block_block,
		"objectives_block",
		"objectives_block",
		64,
		objectives_block);

	TAG_BLOCK_FROM_STRUCT(
		occluding_portal_to_portal_mapping_block_block,
		"occluding_portal_to_portal_mapping_block",
		"occluding_portal_to_portal_mapping_block",
		128,
		occluding_portal_to_portal_mapping_block);

	TAG_BLOCK_FROM_STRUCT(
		old_material_effect_material_block_block,
		"old_material_effect_material_block",
		"old_material_effect_material_block",
		33,
		old_material_effect_material_block);

	TAG_BLOCK_FROM_STRUCT(
		old_projectile_material_response_block_block,
		"old_projectile_material_response_block",
		"old_projectile_material_response_block",
		200,
		old_projectile_material_response_block);

	TAG_BLOCK_FROM_STRUCT(
		one_dependency_block_definition_block,
		"one_dependency_block_definition",
		"one_dependency_block_definition",
		10240,
		one_dependency_block_definition);

	TAG_BLOCK_FROM_STRUCT(
		opposing_objective_block_block,
		"opposing_objective_block",
		"opposing_objective_block",
		4,
		opposing_objective_block);

	TAG_BLOCK_FROM_STRUCT(
		optionalunitcamerablock_block,
		"optionalUnitCameraBlock",
		"optionalUnitCameraBlock",
		1,
		optionalunitcamerablock);

	TAG_BLOCK_FROM_STRUCT(
		order_completion_condition_block,
		"order_completion_condition",
		"order_completion_condition",
		5,
		order_completion_condition);

	TAG_BLOCK_FROM_STRUCT(
		order_ending_block_block,
		"order_ending_block",
		"order_ending_block",
		12,
		order_ending_block);

	TAG_BLOCK_FROM_STRUCT(
		orders_block_block,
		"orders_block",
		"orders_block",
		300,
		orders_block);

	TAG_BLOCK_FROM_STRUCT(
		overlay_definition_block,
		"overlay_definition",
		"overlay_definition",
		24,
		overlay_definition);

	TAG_BLOCK_FROM_STRUCT(
		overlay_editor_only_definition_block,
		"overlay_editor_only_definition",
		"overlay_editor_only_definition",
		24,
		overlay_editor_only_definition);

	TAG_BLOCK_FROM_STRUCT(
		overlay_group_definition_block_block,
		"overlay_group_definition_block",
		"overlay_group_definition_block",
		1056,
		overlay_group_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		part_block_block,
		"part_block",
		"part_block",
		255,
		part_block);

	TAG_BLOCK_FROM_STRUCT(
		particle_block_group_block,
		"particle_block",
		"particle_block",
		1,
		particle_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_controller_block,
		"particle_controller",
		"particle_controller",
		8,
		particle_controller);

	TAG_BLOCK_FROM_STRUCT(
		particle_controller_parameters_block,
		"particle_controller_parameters",
		"particle_controller_parameters",
		9,
		particle_controller_parameters);

	TAG_BLOCK_FROM_STRUCT(
		particle_emitter_boat_hull_group_block_block,
		"particle_emitter_boat_hull_group_block",
		"particle_emitter_boat_hull_group_block",
		16,
		particle_emitter_boat_hull_group_block);

	TAG_BLOCK_FROM_STRUCT(
		particle_emitter_boat_hull_shape_block_group_block,
		"particle_emitter_boat_hull_shape_block",
		"particle_emitter_boat_hull_shape_block",
		1,
		particle_emitter_boat_hull_shape_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_emitter_custom_point_block_block,
		"particle_emitter_custom_point_block",
		"particle_emitter_custom_point_block",
		32768,
		particle_emitter_custom_point_block);

	TAG_BLOCK_FROM_STRUCT(
		particle_emitter_custom_points_block_group_block,
		"particle_emitter_custom_points_block",
		"particle_emitter_custom_points_block",
		1,
		particle_emitter_custom_points_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_model_block_group_block,
		"particle_model_block",
		"particle_model_block",
		1,
		particle_model_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_physics_block_group_block,
		"particle_physics_block",
		"particle_physics_block",
		1,
		particle_physics_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_system_definition_block_new_block,
		"particle_system_definition_block_new",
		"particle_system_definition_block_new",
		32,
		particle_system_definition_block_new);

	TAG_BLOCK_FROM_STRUCT(
		particle_system_emitter_definition_block_block,
		"particle_system_emitter_definition_block",
		"particle_system_emitter_definition_block",
		8,
		particle_system_emitter_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		particleman_block_group_block,
		"particleman_block",
		"particleman_block",
		1,
		particleman_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		patch_globals_block_group_block,
		"patch_globals_block",
		"patch_globals_block",
		1,
		patch_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pathfinding_block_group_block,
		"pathfinding_block",
		"pathfinding_block",
		1,
		pathfinding_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		pathfinding_data_block_block,
		"pathfinding_data_block",
		"pathfinding_data_block",
		32,
		pathfinding_data_block);

	TAG_BLOCK_FROM_STRUCT(
		pathfinding_object_index_list_block_block,
		"pathfinding_object_index_list_block",
		"pathfinding_object_index_list_block",
		32,
		pathfinding_object_index_list_block);

	TAG_BLOCK_FROM_STRUCT(
		patrol_point_block_block,
		"patrol_point_block",
		"patrol_point_block",
		32,
		patrol_point_block);

	TAG_BLOCK_FROM_STRUCT(
		pca_animation_block_group_block,
		"pca_animation_block",
		"pca_animation_block",
		1,
		pca_animation_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		per_instance_lightmap_texcoords_block_block,
		"per_instance_lightmap_texcoords_block",
		"per_instance_lightmap_texcoords_block",
		65535,
		per_instance_lightmap_texcoords_block);

	TAG_BLOCK_FROM_STRUCT(
		per_instance_prt_data_block_block,
		"per_instance_prt_data_block",
		"per_instance_prt_data_block",
		65535,
		per_instance_prt_data_block);

	TAG_BLOCK_FROM_STRUCT(
		per_mesh_node_map_block_block,
		"per_mesh_node_map_block",
		"per_mesh_node_map_block",
		8191,
		per_mesh_node_map_block);

	TAG_BLOCK_FROM_STRUCT(
		per_mesh_prt_data_block_block,
		"per_mesh_prt_data_block",
		"per_mesh_prt_data_block",
		8191,
		per_mesh_prt_data_block);

	TAG_BLOCK_FROM_STRUCT(
		per_mesh_raw_data_block_block,
		"per_mesh_raw_data_block",
		"per_mesh_raw_data_block",
		8191,
		per_mesh_raw_data_block);

	TAG_BLOCK_FROM_STRUCT(
		per_mesh_subpart_visibility_block_block,
		"per_mesh_subpart_visibility_block",
		"per_mesh_subpart_visibility_block",
		64,
		per_mesh_subpart_visibility_block);

	TAG_BLOCK_FROM_STRUCT(
		performance_template_actor_block_block,
		"performance_template_actor_block",
		"performance_template_actor_block",
		16,
		performance_template_actor_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		performance_template_block_group_block,
		"performance_template_block",
		"performance_template_block",
		1,
		performance_template_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		performance_template_point_block_block,
		"performance_template_point_block",
		"performance_template_point_block",
		32,
		performance_template_point_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		performance_throttles_block_group_block,
		"performance_throttles_block",
		"performance_throttles_block",
		1,
		performance_throttles_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		performane_throttle_block_block,
		"performane_throttle_block",
		"performane_throttle_block",
		7,
		performane_throttle_block);

	TAG_BLOCK_FROM_STRUCT(
		permutations_block_block,
		"permutations_block",
		"permutations_block",
		255,
		permutations_block);

	TAG_BLOCK_FROM_STRUCT(
		pgcr_damage_type_image_block_block,
		"pgcr_damage_type_image_block",
		"pgcr_damage_type_image_block",
		98,
		pgcr_damage_type_image_block);

	TAG_BLOCK_FROM_STRUCT(
		pgcr_damage_type_image_mapping_definition_block_group_block,
		"pgcr_damage_type_image_mapping_definition_block",
		"pgcr_damage_type_image_mapping_definition_block",
		1,
		pgcr_damage_type_image_mapping_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pgcr_enemy_to_category_entry_block_block,
		"pgcr_enemy_to_category_entry_block",
		"pgcr_enemy_to_category_entry_block",
		16,
		pgcr_enemy_to_category_entry_block);

	TAG_BLOCK_FROM_STRUCT(
		pgcr_enemy_to_category_list_block_block,
		"pgcr_enemy_to_category_list_block",
		"pgcr_enemy_to_category_list_block",
		128,
		pgcr_enemy_to_category_list_block);

	TAG_BLOCK_FROM_STRUCT(
		pgcr_enemy_to_category_mapping_definition_block_group_block,
		"pgcr_enemy_to_category_mapping_definition_block",
		"pgcr_enemy_to_category_mapping_definition_block",
		1,
		pgcr_enemy_to_category_mapping_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pgcr_incident_block_block,
		"pgcr_incident_block",
		"pgcr_incident_block",
		50,
		pgcr_incident_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		pgcr_player_to_category_entry_block_block,
		"pgcr_player_to_category_entry_block",
		"pgcr_player_to_category_entry_block",
		1,
		pgcr_player_to_category_entry_block);

	TAG_BLOCK_FROM_STRUCT(
		phantom_types_block_block,
		"phantom_types_block",
		"phantom_types_block",
		16,
		phantom_types_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		phantoms_block_block,
		"phantoms_block",
		"phantoms_block",
		128,
		phantoms_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		physics_model_block_group_block,
		"physics_model_block",
		"physics_model_block",
		1,
		physics_model_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		physics_model_constraint_edge_constraint_block_block,
		"physics_model_constraint_edge_constraint_block",
		"physics_model_constraint_edge_constraint_block",
		64,
		physics_model_constraint_edge_constraint_block);

	TAG_BLOCK_FROM_STRUCT(
		physics_model_damped_spring_motor_block_block,
		"physics_model_damped_spring_motor_block",
		"physics_model_damped_spring_motor_block",
		64,
		physics_model_damped_spring_motor_block);

	TAG_BLOCK_FROM_STRUCT(
		physics_model_limited_hinge_motors_block_block,
		"physics_model_limited_hinge_motors_block",
		"physics_model_limited_hinge_motors_block",
		1,
		physics_model_limited_hinge_motors_block);

	TAG_BLOCK_FROM_STRUCT(
		physics_model_node_constraint_edge_block_block,
		"physics_model_node_constraint_edge_block",
		"physics_model_node_constraint_edge_block",
		4096,
		physics_model_node_constraint_edge_block);

	TAG_BLOCK_FROM_STRUCT(
		physics_model_position_motor_block_block,
		"physics_model_position_motor_block",
		"physics_model_position_motor_block",
		64,
		physics_model_position_motor_block);

	TAG_BLOCK_FROM_STRUCT(
		physics_model_powered_chain_constraints_block_block,
		"physics_model_powered_chain_constraints_block",
		"physics_model_powered_chain_constraints_block",
		64,
		physics_model_powered_chain_constraints_block);

	TAG_BLOCK_FROM_STRUCT(
		physics_model_powered_chain_nodes_block_block,
		"physics_model_powered_chain_nodes_block",
		"physics_model_powered_chain_nodes_block",
		255,
		physics_model_powered_chain_nodes_block);

	TAG_BLOCK_FROM_STRUCT(
		physics_model_powered_chains_block_block,
		"physics_model_powered_chains_block",
		"physics_model_powered_chains_block",
		64,
		physics_model_powered_chains_block);

	TAG_BLOCK_FROM_STRUCT(
		physics_model_ragdoll_motors_block_block,
		"physics_model_ragdoll_motors_block",
		"physics_model_ragdoll_motors_block",
		1,
		physics_model_ragdoll_motors_block);

	TAG_BLOCK_FROM_STRUCT(
		physics_transitions_block_block,
		"physics_transitions_block",
		"physics_transitions_block",
		4,
		physics_transitions_block);

	TAG_BLOCK_FROM_STRUCT(
		pills_block_block,
		"pills_block",
		"pills_block",
		16384,
		pills_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		pixel_entry_point_block_block,
		"pixel_entry_point_block",
		"pixel_entry_point_block",
		1024,
		pixel_entry_point_block);

	TAG_BLOCK_FROM_STRUCT(
		pixel_shader_block_group_block,
		"pixel_shader_block",
		"pixel_shader_block",
		1,
		pixel_shader_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		planar_fog_cluster_visibility_definition_block_block,
		"planar_fog_cluster_visibility_definition_block",
		"planar_fog_cluster_visibility_definition_block",
		255,
		planar_fog_cluster_visibility_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		planar_fog_definition_block_block,
		"planar_fog_definition_block",
		"planar_fog_definition_block",
		128,
		planar_fog_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		planar_fog_parameters_block_group_block,
		"planar_fog_parameters_block",
		"planar_fog_parameters_block",
		1,
		planar_fog_parameters_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		planar_fog_reference_definition_block_block,
		"planar_fog_reference_definition_block",
		"planar_fog_reference_definition_block",
		32767,
		planar_fog_reference_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		planar_fog_structure_visibility_definition_block_block,
		"planar_fog_structure_visibility_definition_block",
		"planar_fog_structure_visibility_definition_block",
		32,
		planar_fog_structure_visibility_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		planar_fog_triangle_block_block,
		"planar_fog_triangle_block",
		"planar_fog_triangle_block",
		32767,
		planar_fog_triangle_block);

	TAG_BLOCK_FROM_STRUCT(
		planar_fog_triangle_planes_block_block,
		"planar_fog_triangle_planes_block",
		"planar_fog_triangle_planes_block",
		512,
		planar_fog_triangle_planes_block);

	TAG_BLOCK_FROM_STRUCT(
		planar_fog_vertex_block_block,
		"planar_fog_vertex_block",
		"planar_fog_vertex_block",
		1536,
		planar_fog_vertex_block);

	TAG_BLOCK_FROM_STRUCT(
		planar_fog_zone_set_visibility_definition_block_block,
		"planar_fog_zone_set_visibility_definition_block",
		"planar_fog_zone_set_visibility_definition_block",
		1,
		planar_fog_zone_set_visibility_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		planes_block_block,
		"planes_block",
		"planes_block",
		536870911,
		planes_block);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_playback_block_block,
		"platform_sound_playback_block",
		"platform_sound_playback_block",
		128,
		platform_sound_playback_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_playback_component_block_block,
		"platform_sound_playback_component_block",
		"platform_sound_playback_component_block",
		16,
		platform_sound_playback_component_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_playback_lowpass_block_block,
		"platform_sound_playback_lowpass_block",
		"platform_sound_playback_lowpass_block",
		1,
		platform_sound_playback_lowpass_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		playerenlistmentdefinitionblock_block,
		"playerEnlistmentDefinitionBlock",
		"playerEnlistmentDefinitionBlock",
		15,
		playerenlistmentdefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		player_control_block_block,
		"player_control_block",
		"player_control_block",
		1,
		player_control_block);

	TAG_BLOCK_FROM_STRUCT(
		player_enlistment_globals_definition_block_group_block,
		"player_enlistment_globals_definition_block",
		"player_enlistment_globals_definition_block",
		1,
		player_enlistment_globals_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		player_grade_definition_block_block,
		"player_grade_definition_block",
		"player_grade_definition_block",
		127,
		player_grade_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		player_grade_globals_definition_block_group_block,
		"player_grade_globals_definition_block",
		"player_grade_globals_definition_block",
		1,
		player_grade_globals_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		player_information_block_block,
		"player_information_block",
		"player_information_block",
		3,
		player_information_block);

	TAG_BLOCK_FROM_STRUCT(
		player_model_customization_globals_block_group_block,
		"player_model_customization_globals_block",
		"player_model_customization_globals_block",
		1,
		player_model_customization_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		player_momentum_data_block_block,
		"player_momentum_data_block",
		"player_momentum_data_block",
		2,
		player_momentum_data_block);

	TAG_BLOCK_FROM_STRUCT(
		player_representation_block_block,
		"player_representation_block",
		"player_representation_block",
		3,
		player_representation_block);

	TAG_BLOCK_FROM_STRUCT(
		player_role_block_block,
		"player_role_block",
		"player_role_block",
		64,
		player_role_block);

	TAG_BLOCK_FROM_STRUCT(
		player_training_entry_data_block_block,
		"player_training_entry_data_block",
		"player_training_entry_data_block",
		35,
		player_training_entry_data_block);

	TAG_BLOCK_FROM_STRUCT(
		player_traits_appearance_block_block,
		"player_traits_appearance_block",
		"player_traits_appearance_block",
		1,
		player_traits_appearance_block);

	TAG_BLOCK_FROM_STRUCT(
		player_traits_movement_block_block,
		"player_traits_movement_block",
		"player_traits_movement_block",
		1,
		player_traits_movement_block);

	TAG_BLOCK_FROM_STRUCT(
		player_traits_sensors_block_block,
		"player_traits_sensors_block",
		"player_traits_sensors_block",
		1,
		player_traits_sensors_block);

	TAG_BLOCK_FROM_STRUCT(
		player_traits_vitality_block_block,
		"player_traits_vitality_block",
		"player_traits_vitality_block",
		1,
		player_traits_vitality_block);

	TAG_BLOCK_FROM_STRUCT(
		player_traits_weapons_block_block,
		"player_traits_weapons_block",
		"player_traits_weapons_block",
		1,
		player_traits_weapons_block);

	TAG_BLOCK_FROM_STRUCT(
		point_physics_block_group_block,
		"point_physics_block",
		"point_physics_block",
		1,
		point_physics_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		point_to_path_curve_block_block,
		"point_to_path_curve_block",
		"point_to_path_curve_block",
		64,
		point_to_path_curve_block);

	TAG_BLOCK_FROM_STRUCT(
		point_to_path_curve_point_block_block,
		"point_to_path_curve_point_block",
		"point_to_path_curve_point_block",
		1024,
		point_to_path_curve_point_block);

	TAG_BLOCK_FROM_STRUCT(
		polyartcamerablock_block,
		"polyartCameraBlock",
		"polyartCameraBlock",
		1,
		polyartcamerablock);

	TAG_BLOCK_FROM_STRUCT(
		polyartindexblock_block,
		"polyartIndexBlock",
		"polyartIndexBlock",
		32768,
		polyartindexblock);

	TAG_BLOCK_FROM_STRUCT(
		polyartvertexblock_block,
		"polyartVertexBlock",
		"polyartVertexBlock",
		32768,
		polyartvertexblock);

	TAG_BLOCK_FROM_STRUCT(
		polyart_asset_block_group_block,
		"polyart_asset_block",
		"polyart_asset_block",
		1,
		polyart_asset_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		polyhedra_block_block,
		"polyhedra_block",
		"polyhedra_block",
		16384,
		polyhedra_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		polyhedron_four_vectors_block_block,
		"polyhedron_four_vectors_block",
		"polyhedron_four_vectors_block",
		24576,
		polyhedron_four_vectors_block);

	TAG_BLOCK_FROM_STRUCT(
		polyhedron_plane_equations_block_block,
		"polyhedron_plane_equations_block",
		"polyhedron_plane_equations_block",
		131072,
		polyhedron_plane_equations_block);

	TAG_BLOCK_FROM_STRUCT(
		portrait_poses_definition_block_group_block,
		"portrait_poses_definition_block",
		"portrait_poses_definition_block",
		1,
		portrait_poses_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		powered_seat_block_block,
		"powered_seat_block",
		"powered_seat_block",
		2,
		powered_seat_block);

	TAG_BLOCK_FROM_STRUCT(
		predicted_bitmaps_block_block,
		"predicted_bitmaps_block",
		"predicted_bitmaps_block",
		8,
		predicted_bitmaps_block);

	TAG_BLOCK_FROM_STRUCT(
		predicted_data_block_block,
		"predicted_data_block",
		"predicted_data_block",
		32,
		predicted_data_block);

	TAG_BLOCK_FROM_STRUCT(
		prefab_block_group_block,
		"prefab_block",
		"prefab_block",
		1,
		prefab_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		prismatic_constraints_block_block,
		"prismatic_constraints_block",
		"prismatic_constraints_block",
		64,
		prismatic_constraints_block);

	TAG_BLOCK_FROM_STRUCT(
		probability_distribution_block_block,
		"probability_distribution_block",
		"probability_distribution_block",
		1,
		probability_distribution_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		progressionglobalsblock_group_block,
		"progressionGlobalsBlock",
		"progressionGlobalsBlock",
		1,
		progressionglobalsblock);

	TAG_BLOCK_FROM_STRUCT(
		projectiledistributioncustomvector_block,
		"projectileDistributionCustomVector",
		"projectileDistributionCustomVector",
		16,
		projectiledistributioncustomvector);

	TAG_BLOCK_FROM_STRUCT(
		projectilespawninfluenceblock_block,
		"projectileSpawnInfluenceBlock",
		"projectileSpawnInfluenceBlock",
		32,
		projectilespawninfluenceblock);

	TAG_BLOCK_FROM_STRUCT(
		projectile_block_group_block,
		"projectile",
		"projectile_block",
		1,
		projectile_group$2);

	TAG_BLOCK_FROM_STRUCT(
		projectile_material_response_block_block,
		"projectile_material_response_block",
		"projectile_material_response_block",
		200,
		projectile_material_response_block);

	TAG_BLOCK_FROM_STRUCT(
		propertycomponentptrvalue_block,
		"propertyComponentPtrValue",
		"propertyComponentPtrValue",
		8192,
		propertycomponentptrvalue);

	TAG_BLOCK_FROM_STRUCT(
		property_argb_color_value_block,
		"property_argb_color_value",
		"property_argb_color_value",
		8192,
		property_argb_color_value);

	TAG_BLOCK_FROM_STRUCT(
		property_binding_block,
		"property_binding",
		"property_binding",
		1024,
		property_binding);

	TAG_BLOCK_FROM_STRUCT(
		property_editor_only_definition_block,
		"property_editor_only_definition",
		"property_editor_only_definition",
		8192,
		property_editor_only_definition);

	TAG_BLOCK_FROM_STRUCT(
		property_long_value_block,
		"property_long_value",
		"property_long_value",
		8192,
		property_long_value);

	TAG_BLOCK_FROM_STRUCT(
		property_real_value_block,
		"property_real_value",
		"property_real_value",
		8192,
		property_real_value);

	TAG_BLOCK_FROM_STRUCT(
		property_string_id_value_block,
		"property_string_id_value",
		"property_string_id_value",
		8192,
		property_string_id_value);

	TAG_BLOCK_FROM_STRUCT(
		property_tag_reference_value_block,
		"property_tag_reference_value",
		"property_tag_reference_value",
		8192,
		property_tag_reference_value);

	TAG_BLOCK_FROM_STRUCT(
		property_text_value_block,
		"property_text_value",
		"property_text_value",
		8192,
		property_text_value);

	TAG_BLOCK_FROM_STRUCT(
		purchase_player_app_block_block,
		"purchase_player_app_block",
		"purchase_player_app_block",
		1,
		purchase_player_app_block);

	TAG_BLOCK_FROM_STRUCT(
		purchase_player_app_mod_slot_block_block,
		"purchase_player_app_mod_slot_block",
		"purchase_player_app_mod_slot_block",
		1,
		purchase_player_app_mod_slot_block);

	TAG_BLOCK_FROM_STRUCT(
		purchase_player_appearance_effect_emblem_index_block_block,
		"purchase_player_appearance_effect_emblem_index_block",
		"purchase_player_appearance_effect_emblem_index_block",
		32,
		purchase_player_appearance_effect_emblem_index_block);

	TAG_BLOCK_FROM_STRUCT(
		purchase_player_appearance_effect_model_permutation_block_block,
		"purchase_player_appearance_effect_model_permutation_block",
		"purchase_player_appearance_effect_model_permutation_block",
		1,
		purchase_player_appearance_effect_model_permutation_block);

	TAG_BLOCK_FROM_STRUCT(
		purchase_player_appearance_effect_non_model_permutation_block_block,
		"purchase_player_appearance_effect_non_model_permutation_block",
		"purchase_player_appearance_effect_non_model_permutation_block",
		2,
		purchase_player_appearance_effect_non_model_permutation_block);

	TAG_BLOCK_FROM_STRUCT(
		purchase_player_appearance_effect_visor_tint_block_block,
		"purchase_player_appearance_effect_visor_tint_block",
		"purchase_player_appearance_effect_visor_tint_block",
		1,
		purchase_player_appearance_effect_visor_tint_block);

	TAG_BLOCK_FROM_STRUCT(
		purchase_player_item_block_block,
		"purchase_player_item_block",
		"purchase_player_item_block",
		1,
		purchase_player_item_block);

	TAG_BLOCK_FROM_STRUCT(
		purchase_player_loadout_slot_block_block,
		"purchase_player_loadout_slot_block",
		"purchase_player_loadout_slot_block",
		1,
		purchase_player_loadout_slot_block);

	TAG_BLOCK_FROM_STRUCT(
		purchase_prerequisite_commendation_definition_block_block,
		"purchase_prerequisite_commendation_definition_block",
		"purchase_prerequisite_commendation_definition_block",
		1,
		purchase_prerequisite_commendation_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		purchase_prerequisite_grade_definition_block_block,
		"purchase_prerequisite_grade_definition_block",
		"purchase_prerequisite_grade_definition_block",
		1,
		purchase_prerequisite_grade_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		purchase_prerequisites_offer_definition_block_block,
		"purchase_prerequisites_offer_definition_block",
		"purchase_prerequisites_offer_definition_block",
		10,
		purchase_prerequisites_offer_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		purchase_prerequisites_unlockable_definition_block_block,
		"purchase_prerequisites_unlockable_definition_block",
		"purchase_prerequisites_unlockable_definition_block",
		10,
		purchase_prerequisites_unlockable_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		pvs_bound_object_identifiers_block_block,
		"pvs_bound_object_identifiers_block",
		"pvs_bound_object_identifiers_block",
		6304,
		pvs_bound_object_identifiers_block);

	TAG_BLOCK_FROM_STRUCT(
		pvs_bound_object_references_block_block,
		"pvs_bound_object_references_block",
		"pvs_bound_object_references_block",
		6304,
		pvs_bound_object_references_block);

	TAG_BLOCK_FROM_STRUCT(
		radial_distribution_block_block,
		"radial_distribution_block",
		"radial_distribution_block",
		1,
		radial_distribution_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		ragdoll_constraints_block_block,
		"ragdoll_constraints_block",
		"ragdoll_constraints_block",
		64,
		ragdoll_constraints_block);

	TAG_BLOCK_FROM_STRUCT(
		rain_definition_block_group_block,
		"rain_definition_block",
		"rain_definition_block",
		1,
		rain_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ranged_animation_entry_block_block,
		"ranged_animation_entry_block",
		"ranged_animation_entry_block",
		256,
		ranged_animation_entry_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		rasterizer_cache_file_globals_block_group_block,
		"rasterizer_cache_file_globals_block",
		"rasterizer_cache_file_globals_block",
		1,
		rasterizer_cache_file_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		rasterizer_constant_block_block,
		"rasterizer_constant_block",
		"rasterizer_constant_block",
		426,
		rasterizer_constant_block);

	TAG_BLOCK_FROM_STRUCT(
		rasterizer_globals_block_group_block,
		"rasterizer_globals_block",
		"rasterizer_globals_block",
		1,
		rasterizer_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		raw_blendshape_block_block,
		"raw_blendshape_block",
		"raw_blendshape_block",
		16777214,
		raw_blendshape_block);

	TAG_BLOCK_FROM_STRUCT(
		raw_imposter_brdf_block_block,
		"raw_imposter_brdf_block",
		"raw_imposter_brdf_block",
		65535,
		raw_imposter_brdf_block);

	TAG_BLOCK_FROM_STRUCT(
		raw_instance_imposter_block_block,
		"raw_instance_imposter_block",
		"raw_instance_imposter_block",
		65535,
		raw_instance_imposter_block);

	TAG_BLOCK_FROM_STRUCT(
		raw_texcoord_block_block,
		"raw_texcoord_block",
		"raw_texcoord_block",
		16777214,
		raw_texcoord_block);

	TAG_BLOCK_FROM_STRUCT(
		raw_vertex_block_block,
		"raw_vertex_block",
		"raw_vertex_block",
		16777214,
		raw_vertex_block);

	TAG_BLOCK_FROM_STRUCT(
		raw_water_append_block_block,
		"raw_water_append_block",
		"raw_water_append_block",
		65535,
		raw_water_append_block);

	TAG_BLOCK_FROM_STRUCT(
		raw_water_block_block,
		"raw_water_block",
		"raw_water_block",
		1024,
		raw_water_block);

	TAG_BLOCK_FROM_STRUCT(
		real_block_block,
		"real_block",
		"real_block",
		64,
		real_block);

	TAG_BLOCK_FROM_STRUCT(
		real_vector4d_block_block,
		"real_vector4d_block",
		"real_vector4d_block",
		1024,
		real_vector4d_block);

	TAG_BLOCK_FROM_STRUCT(
		real_vector4d_block_block$2,
		"real_vector4d_block",
		"real_vector4d_block",
		1024,
		real_vector4d_block$2);

	TAG_BLOCK_FROM_STRUCT(
		recorded_animation_block_block,
		"recorded_animation_block",
		"recorded_animation_block",
		1024,
		recorded_animation_block);

	TAG_BLOCK_FROM_STRUCT(
		region_name_block_block,
		"region_name_block",
		"region_name_block",
		1024,
		region_name_block);

	TAG_BLOCK_FROM_STRUCT(
		regions_block_block,
		"regions_block",
		"regions_block",
		32,
		regions_block);

	TAG_BLOCK_FROM_STRUCT(
		render_geometry_pvs_data_block_block,
		"render_geometry_pvs_data_block",
		"render_geometry_pvs_data_block",
		16,
		render_geometry_pvs_data_block);

	TAG_BLOCK_FROM_STRUCT(
		render_geometry_pvs_data_visibility_index_block_block,
		"render_geometry_pvs_data_visibility_index_block",
		"render_geometry_pvs_data_visibility_index_block",
		65535,
		render_geometry_pvs_data_visibility_index_block);

	TAG_BLOCK_FROM_STRUCT(
		render_geometry_pvs_data_visibility_value_block_block,
		"render_geometry_pvs_data_visibility_value_block",
		"render_geometry_pvs_data_visibility_value_block",
		65535,
		render_geometry_pvs_data_visibility_value_block);

	TAG_BLOCK_FROM_STRUCT(
		render_index_buffer_block_block,
		"render_index_buffer_block",
		"render_index_buffer_block",
		8191,
		render_index_buffer_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_animated_parameter_block_block,
		"render_method_animated_parameter_block",
		"render_method_animated_parameter_block",
		1024,
		render_method_animated_parameter_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_block_group_block,
		"render_method_block",
		"render_method_block",
		1,
		render_method_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_method_category_block_block,
		"render_method_category_block",
		"render_method_category_block",
		16,
		render_method_category_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_definition_block_group_block,
		"render_method_definition_block",
		"render_method_definition_block",
		1,
		render_method_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_method_entry_points_block_block,
		"render_method_entry_points_block",
		"render_method_entry_points_block",
		32,
		render_method_entry_points_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_locked_parameter_block_block,
		"render_method_locked_parameter_block",
		"render_method_locked_parameter_block",
		32,
		render_method_locked_parameter_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_option_block_group_block,
		"render_method_option_block",
		"render_method_option_block",
		1,
		render_method_option_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_method_option_parameter_block_block,
		"render_method_option_parameter_block",
		"render_method_option_parameter_block",
		32,
		render_method_option_parameter_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_options_block_block,
		"render_method_options_block",
		"render_method_options_block",
		32,
		render_method_options_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_parameter_block_block,
		"render_method_parameter_block",
		"render_method_parameter_block",
		64,
		render_method_parameter_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_pass_block_block,
		"render_method_pass_block",
		"render_method_pass_block",
		1024,
		render_method_pass_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_pass_category_dependencies_block,
		"render_method_pass_category_dependencies",
		"render_method_pass_category_dependencies",
		1,
		render_method_pass_category_dependencies);

	TAG_BLOCK_FROM_STRUCT(
		render_method_postprocess_block_block,
		"render_method_postprocess_block",
		"render_method_postprocess_block",
		1,
		render_method_postprocess_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_postprocess_pass_block_block,
		"render_method_postprocess_pass_block",
		"render_method_postprocess_pass_block",
		1024,
		render_method_postprocess_pass_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_postprocess_texture_block_block,
		"render_method_postprocess_texture_block",
		"render_method_postprocess_texture_block",
		64,
		render_method_postprocess_texture_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_routing_info_block_block,
		"render_method_routing_info_block",
		"render_method_routing_info_block",
		512,
		render_method_routing_info_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_template_block_group_block,
		"render_method_template_block",
		"render_method_template_block",
		1,
		render_method_template_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_method_template_constant_table_block_block,
		"render_method_template_constant_table_block",
		"render_method_template_constant_table_block",
		254,
		render_method_template_constant_table_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_template_pass_block_block,
		"render_method_template_pass_block",
		"render_method_template_pass_block",
		64,
		render_method_template_pass_block);

	TAG_BLOCK_FROM_STRUCT(
		render_method_template_platform_block_block,
		"render_method_template_platform_block",
		"render_method_template_platform_block",
		1,
		render_method_template_platform_block);

	TAG_BLOCK_FROM_STRUCT(
		render_model_block_group_block,
		"render_model_block",
		"render_model_block",
		1,
		render_model_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		render_model_lightmap_atlas_block_group_block,
		"render_model_lightmap_atlas_block",
		"render_model_lightmap_atlas_block",
		1,
		render_model_lightmap_atlas_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_marker_block_block,
		"marker",
		"render_model_marker_block",
		256,
		render_model_marker_block);

	TAG_BLOCK_FROM_STRUCT(
		render_model_marker_group_block_block,
		"marker group",
		"render_model_marker_group_block",
		4096,
		render_model_marker_group_block);

	TAG_BLOCK_FROM_STRUCT(
		render_model_node_block_block,
		"node",
		"render_model_node_block",
		255,
		render_model_node_block);

	TAG_BLOCK_FROM_STRUCT(
		render_model_permutation_block_block,
		"permutation",
		"render_model_permutation_block",
		255,
		render_model_permutation_block);

	TAG_BLOCK_FROM_STRUCT(
		render_model_region_block_block,
		"region",
		"render_model_region_block",
		32,
		render_model_region_block);

	TAG_BLOCK_FROM_STRUCT(
		render_vertex_buffer_block_block,
		"render_vertex_buffer_block",
		"render_vertex_buffer_block",
		65535,
		render_vertex_buffer_block);

	TAG_BLOCK_FROM_STRUCT(
		render_water_ripple_block_group_block,
		"render_water_ripple_block",
		"render_water_ripple_block",
		1,
		render_water_ripple_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		requisition_constants_block_block,
		"requisition_constants_block",
		"requisition_constants_block",
		1,
		requisition_constants_block);

	TAG_BLOCK_FROM_STRUCT(
		requisition_palette_block_block,
		"requisition_palette_block",
		"requisition_palette_block",
		64,
		requisition_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		resourcehandleblock_block,
		"resourceHandleBlock",
		"resourceHandleBlock",
		32767,
		resourcehandleblock);

	TAG_BLOCK_FROM_STRUCT(
		resource_category_block_block,
		"resource_category_block",
		"resource_category_block",
		32,
		resource_category_block);

	TAG_BLOCK_FROM_STRUCT(
		response_block_block,
		"response_block",
		"response_block",
		20,
		response_block);

	TAG_BLOCK_FROM_STRUCT(
		revenant_block_block,
		"revenant_block",
		"revenant_block",
		1,
		revenant_block);

	TAG_BLOCK_FROM_STRUCT(
		rewardblock_block,
		"rewardBlock",
		"rewardBlock",
		2,
		rewardblock);

	TAG_BLOCK_FROM_STRUCT(
		rewarddefinitionblock_block,
		"rewardDefinitionBlock",
		"rewardDefinitionBlock",
		256,
		rewarddefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		reward_globals_definition_block_group_block,
		"reward_globals_definition_block",
		"reward_globals_definition_block",
		1,
		reward_globals_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		rigid_bodies_block_block,
		"rigid_bodies_block",
		"rigid_bodies_block",
		64,
		rigid_bodies_block);

	TAG_BLOCK_FROM_STRUCT(
		rigid_body_indices_block_block,
		"rigid_body_indices_block",
		"rigid_body_indices_block",
		64,
		rigid_body_indices_block);

	TAG_BLOCK_FROM_STRUCT(
		room_door_portal_encoded_pas_block_block,
		"room_door_portal_encoded_pas_block",
		"room_door_portal_encoded_pas_block",
		4096,
		room_door_portal_encoded_pas_block);

	TAG_BLOCK_FROM_STRUCT(
		rules_block_block,
		"rules_block",
		"rules_block",
		16,
		rules_block);

	TAG_BLOCK_FROM_STRUCT(
		rumble_block_group_block,
		"rumble_block",
		"rumble_block",
		1,
		rumble_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		runtime_decorator_set_block_block,
		"runtime_decorator_set_block",
		"runtime_decorator_set_block",
		48,
		runtime_decorator_set_block);

	TAG_BLOCK_FROM_STRUCT(
		runtime_materials_block_block,
		"runtime_materials_block",
		"runtime_materials_block",
		512,
		runtime_materials_block);

	TAG_BLOCK_FROM_STRUCT(
		s_scenario_lightmap_silhouette_edge_block,
		"s_scenario_lightmap_silhouette_edge",
		"s_scenario_lightmap_silhouette_edge",
		65535,
		s_scenario_lightmap_silhouette_edge);

	TAG_BLOCK_FROM_STRUCT(
		s_scenario_lightmap_silhouette_group_block,
		"s_scenario_lightmap_silhouette_group",
		"s_scenario_lightmap_silhouette_group",
		65535,
		s_scenario_lightmap_silhouette_group);

	TAG_BLOCK_FROM_STRUCT(
		s_scenario_lightmap_silhouette_vertex_block,
		"s_scenario_lightmap_silhouette_vertex",
		"s_scenario_lightmap_silhouette_vertex",
		65535,
		s_scenario_lightmap_silhouette_vertex);

	TAG_BLOCK_FROM_STRUCT(
		sandbox_property_allowed_values_reference_block_block,
		"sandbox_property_allowed_values_reference_block",
		"sandbox_property_allowed_values_reference_block",
		64,
		sandbox_property_allowed_values_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		sandbox_text_value_pair_definition_block_group_block,
		"sandbox_text_value_pair_definition_block",
		"sandbox_text_value_pair_definition_block",
		1,
		sandbox_text_value_pair_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenarioattachedeffectsblock_block,
		"scenarioAttachedEffectsBlock",
		"scenarioAttachedEffectsBlock",
		1024,
		scenarioattachedeffectsblock);

	TAG_BLOCK_FROM_STRUCT(
		scenarioattachedlensflaresblock_block,
		"scenarioAttachedLensFlaresBlock",
		"scenarioAttachedLensFlaresBlock",
		1024,
		scenarioattachedlensflaresblock);

	TAG_BLOCK_FROM_STRUCT(
		scenarioattachedlightconesblock_block,
		"scenarioAttachedLightConesBlock",
		"scenarioAttachedLightConesBlock",
		512,
		scenarioattachedlightconesblock);

	TAG_BLOCK_FROM_STRUCT(
		scenariobspreferenceblock_block,
		"scenarioBspReferenceBlock",
		"scenarioBspReferenceBlock",
		32,
		scenariobspreferenceblock);

	TAG_BLOCK_FROM_STRUCT(
		scenariodesignerresourcedependenciesblock_block,
		"scenarioDesignerResourceDependenciesBlock",
		"scenarioDesignerResourceDependenciesBlock",
		16384,
		scenariodesignerresourcedependenciesblock);

	TAG_BLOCK_FROM_STRUCT(
		scenariodesignerzonetagreferenceblock_block,
		"scenarioDesignerZoneTagReferenceBlock",
		"scenarioDesignerZoneTagReferenceBlock",
		4352,
		scenariodesignerzonetagreferenceblock);

	TAG_BLOCK_FROM_STRUCT(
		scenariorandomordnancedroppointblock_block,
		"scenarioRandomOrdnanceDropPointBlock",
		"scenarioRandomOrdnanceDropPointBlock",
		256,
		scenariorandomordnancedroppointblock);

	TAG_BLOCK_FROM_STRUCT(
		scenariorandomordnancedropsetblock_block,
		"scenarioRandomOrdnanceDropSetBlock",
		"scenarioRandomOrdnanceDropSetBlock",
		32,
		scenariorandomordnancedropsetblock);

	TAG_BLOCK_FROM_STRUCT(
		scenariounsafespawnzonetriggervolumesblock_block,
		"scenarioUnsafeSpawnZoneTriggerVolumesBlock",
		"scenarioUnsafeSpawnZoneTriggerVolumesBlock",
		1024,
		scenariounsafespawnzonetriggervolumesblock);

	TAG_BLOCK_FROM_STRUCT(
		scenario_acoustic_sector_block_block,
		"scenario_acoustic_sector_block",
		"scenario_acoustic_sector_block",
		300,
		scenario_acoustic_sector_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_acoustic_transition_block_block,
		"scenario_acoustic_transition_block",
		"scenario_acoustic_transition_block",
		300,
		scenario_acoustic_transition_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_acoustics_palette_block_definition_block,
		"scenario_acoustics_palette_block_definition",
		"scenario_acoustics_palette_block_definition",
		128,
		scenario_acoustics_palette_block_definition_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_airprobes_block_block,
		"scenario_airprobes_block",
		"scenario_airprobes_block",
		4096,
		scenario_airprobes_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_atmosphere_dumpling_block_block,
		"scenario_atmosphere_dumpling_block",
		"scenario_atmosphere_dumpling_block",
		100,
		scenario_atmosphere_dumpling_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_atmosphere_palette_block_block,
		"scenario_atmosphere_palette_block",
		"scenario_atmosphere_palette_block",
		32,
		scenario_atmosphere_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_biped_block_block,
		"scenario_biped_block",
		"scenario_biped_block",
		256,
		scenario_biped_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_biped_palette_block_block,
		"scenario_biped_palette_block",
		"scenario_biped_palette_block",
		256,
		scenario_biped_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_block_group_block,
		"scenario_block",
		"scenario_block",
		1,
		scenario_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_budget_references_block_block,
		"scenario_budget_references_block",
		"scenario_budget_references_block",
		128,
		scenario_budget_references_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_camera_fx_palette_block_block,
		"scenario_camera_fx_palette_block",
		"scenario_camera_fx_palette_block",
		64,
		scenario_camera_fx_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cheap_particle_system_palette_block_block,
		"scenario_cheap_particle_system_palette_block",
		"scenario_cheap_particle_system_palette_block",
		20,
		scenario_cheap_particle_system_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cheap_particle_systems_block_block,
		"scenario_cheap_particle_systems_block",
		"scenario_cheap_particle_systems_block",
		100,
		scenario_cheap_particle_systems_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_child_references_block_block,
		"scenario_child_references_block",
		"scenario_child_references_block",
		16,
		scenario_child_references_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cinematic_lighting_palette_block_block,
		"scenario_cinematic_lighting_palette_block",
		"scenario_cinematic_lighting_palette_block",
		128,
		scenario_cinematic_lighting_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cinematics_block_block,
		"scenario_cinematics_block",
		"scenario_cinematics_block",
		32,
		scenario_cinematics_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cluster_acoustics_block_block,
		"scenario_cluster_acoustics_block",
		"scenario_cluster_acoustics_block",
		255,
		scenario_cluster_acoustics_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cluster_atmosphere_properties_block_block,
		"scenario_cluster_atmosphere_properties_block",
		"scenario_cluster_atmosphere_properties_block",
		255,
		scenario_cluster_atmosphere_properties_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cluster_camera_fx_properties_block_block,
		"scenario_cluster_camera_fx_properties_block",
		"scenario_cluster_camera_fx_properties_block",
		255,
		scenario_cluster_camera_fx_properties_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cluster_data_block_block,
		"scenario_cluster_data_block",
		"scenario_cluster_data_block",
		32,
		scenario_cluster_data_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cluster_points_block_block,
		"scenario_cluster_points_block",
		"scenario_cluster_points_block",
		255,
		scenario_cluster_points_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cluster_weather_properties_block_block,
		"scenario_cluster_weather_properties_block",
		"scenario_cluster_weather_properties_block",
		255,
		scenario_cluster_weather_properties_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_control_block_block,
		"scenario_control_block",
		"scenario_control_block",
		100,
		scenario_control_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_control_palette_block_block,
		"scenario_control_palette_block",
		"scenario_control_palette_block",
		256,
		scenario_control_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_crate_block_block,
		"scenario_crate_block",
		"scenario_crate_block",
		1536,
		scenario_crate_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_crate_palette_block_block,
		"scenario_crate_palette_block",
		"scenario_crate_palette_block",
		256,
		scenario_crate_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_creature_block_block,
		"scenario_creature_block",
		"scenario_creature_block",
		128,
		scenario_creature_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_creature_palette_block_block,
		"scenario_creature_palette_block",
		"scenario_creature_palette_block",
		256,
		scenario_creature_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cubemap_block_block,
		"scenario_cubemap_block",
		"scenario_cubemap_block",
		1024,
		scenario_cubemap_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cutscene_camera_point_block_block,
		"scenario_cutscene_camera_point_block",
		"scenario_cutscene_camera_point_block",
		512,
		scenario_cutscene_camera_point_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cutscene_flag_block_block,
		"scenario_cutscene_flag_block",
		"scenario_cutscene_flag_block",
		4096,
		scenario_cutscene_flag_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cutscene_title_block_block,
		"scenario_cutscene_title_block",
		"scenario_cutscene_title_block",
		128,
		scenario_cutscene_title_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_decal_palette_block_block,
		"scenario_decal_palette_block",
		"scenario_decal_palette_block",
		128,
		scenario_decal_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_decals_block_block,
		"scenario_decals_block",
		"scenario_decals_block",
		65536,
		scenario_decals_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_decorator_block_block,
		"scenario_decorator_block",
		"scenario_decorator_block",
		1,
		scenario_decorator_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_description_block_block,
		"scenario_description_block",
		"scenario_description_block",
		32,
		scenario_description_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_design_reference_block_block,
		"scenario_design_reference_block",
		"scenario_design_reference_block",
		8,
		scenario_design_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_designer_zone_block_block,
		"scenario_designer_zone_block",
		"scenario_designer_zone_block",
		64,
		scenario_designer_zone_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_detail_object_collection_palette_block_block,
		"scenario_detail_object_collection_palette_block",
		"scenario_detail_object_collection_palette_block",
		32,
		scenario_detail_object_collection_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_effect_scenery_block_block,
		"scenario_effect_scenery_block",
		"scenario_effect_scenery_block",
		512,
		scenario_effect_scenery_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_effect_scenery_palette_block_block,
		"scenario_effect_scenery_palette_block",
		"scenario_effect_scenery_palette_block",
		256,
		scenario_effect_scenery_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_equipment_block_block,
		"scenario_equipment_block",
		"scenario_equipment_block",
		256,
		scenario_equipment_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_equipment_palette_block_block,
		"scenario_equipment_palette_block",
		"scenario_equipment_palette_block",
		256,
		scenario_equipment_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_function_block_block,
		"scenario_function_block",
		"scenario_function_block",
		32,
		scenario_function_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_giant_block_block,
		"scenario_giant_block",
		"scenario_giant_block",
		32,
		scenario_giant_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_giant_palette_block_block,
		"scenario_giant_palette_block",
		"scenario_giant_palette_block",
		256,
		scenario_giant_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_interpolator_block_group_block,
		"scenario_interpolator_block",
		"scenario_interpolator_block",
		1,
		scenario_interpolator_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_interpolator_data_block_block,
		"scenario_interpolator_data_block",
		"scenario_interpolator_data_block",
		32,
		scenario_interpolator_data_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_kill_trigger_volumes_block_block,
		"scenario_kill_trigger_volumes_block",
		"scenario_kill_trigger_volumes_block",
		1024,
		scenario_kill_trigger_volumes_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lighting_zone_set_block_block,
		"scenario_lighting_zone_set_block",
		"scenario_lighting_zone_set_block",
		64,
		scenario_lighting_zone_set_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_adjacent_bounce_index_block_block,
		"scenario_lightmap_adjacent_bounce_index_block",
		"scenario_lightmap_adjacent_bounce_index_block",
		2147483647,
		scenario_lightmap_adjacent_bounce_index_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_adjacent_bounce_vertex_block_block,
		"scenario_lightmap_adjacent_bounce_vertex_block",
		"scenario_lightmap_adjacent_bounce_vertex_block",
		2147483647,
		scenario_lightmap_adjacent_bounce_vertex_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_airprobe_value_block,
		"scenario_lightmap_airprobe_value",
		"scenario_lightmap_airprobe_value",
		4096,
		scenario_lightmap_airprobe_value);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_block_group_block,
		"scenario_lightmap_block",
		"scenario_lightmap_block",
		1,
		scenario_lightmap_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_bsp_data_block_group_block,
		"scenario_lightmap_bsp_data_block",
		"scenario_lightmap_bsp_data_block",
		1,
		scenario_lightmap_bsp_data_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_bsp_data_reference_block_block,
		"scenario_lightmap_bsp_data_reference_block",
		"scenario_lightmap_bsp_data_reference_block",
		32,
		scenario_lightmap_bsp_data_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_cluster_data_block,
		"scenario_lightmap_cluster_data",
		"scenario_lightmap_cluster_data",
		65535,
		scenario_lightmap_cluster_data);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_dynamic_light_instance_block,
		"scenario_lightmap_dynamic_light_instance",
		"scenario_lightmap_dynamic_light_instance",
		2147483647,
		scenario_lightmap_dynamic_light_instance);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_dynamic_light_instance_data_block_block,
		"scenario_lightmap_dynamic_light_instance_data_block",
		"scenario_lightmap_dynamic_light_instance_data_block",
		65535,
		scenario_lightmap_dynamic_light_instance_data_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_global_perpixel_padding_data_block,
		"scenario_lightmap_global_perpixel_padding_data",
		"scenario_lightmap_global_perpixel_padding_data",
		1048576,
		scenario_lightmap_global_perpixel_padding_data);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_instance_data_block,
		"scenario_lightmap_instance_data",
		"scenario_lightmap_instance_data",
		65535,
		scenario_lightmap_instance_data);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_instance_index_block_block,
		"scenario_lightmap_instance_index_block",
		"scenario_lightmap_instance_index_block",
		65535,
		scenario_lightmap_instance_index_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_lightprobe_value_block,
		"scenario_lightmap_lightprobe_value",
		"scenario_lightmap_lightprobe_value",
		65535,
		scenario_lightmap_lightprobe_value);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_new_ao_data_block_block,
		"scenario_lightmap_new_ao_data_block",
		"scenario_lightmap_new_ao_data_block",
		2147483647,
		scenario_lightmap_new_ao_data_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_rasterized_chart_data_block,
		"scenario_lightmap_rasterized_chart_data",
		"scenario_lightmap_rasterized_chart_data",
		1048576,
		scenario_lightmap_rasterized_chart_data);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_rasterized_chart_element_block,
		"scenario_lightmap_rasterized_chart_element",
		"scenario_lightmap_rasterized_chart_element",
		4194304,
		scenario_lightmap_rasterized_chart_element);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_rasterized_chart_source_block,
		"scenario_lightmap_rasterized_chart_source",
		"scenario_lightmap_rasterized_chart_source",
		2147483647,
		scenario_lightmap_rasterized_chart_source);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lightmap_structure_light_instance_block,
		"scenario_lightmap_structure_light_instance",
		"scenario_lightmap_structure_light_instance",
		2147483647,
		scenario_lightmap_structure_light_instance);

	TAG_BLOCK_FROM_STRUCT(
		scenario_location_name_trigger_volumes_block_block,
		"scenario_location_name_trigger_volumes_block",
		"scenario_location_name_trigger_volumes_block",
		1024,
		scenario_location_name_trigger_volumes_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_machine_block_block,
		"scenario_machine_block",
		"scenario_machine_block",
		400,
		scenario_machine_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_machine_palette_block_block,
		"scenario_machine_palette_block",
		"scenario_machine_palette_block",
		256,
		scenario_machine_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_named_location_volume_block_block,
		"scenario_named_location_volume_block",
		"scenario_named_location_volume_block",
		128,
		scenario_named_location_volume_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_object_names_block_block,
		"scenario_object_names_block",
		"scenario_object_names_block",
		2048,
		scenario_object_names_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_object_node_orientations_bit_vector_block_block,
		"scenario_object_node_orientations_bit_vector_block",
		"scenario_object_node_orientations_bit_vector_block",
		64,
		scenario_object_node_orientations_bit_vector_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_object_node_orientations_block_block,
		"scenario_object_node_orientations_block",
		"scenario_object_node_orientations_block",
		1,
		scenario_object_node_orientations_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_object_node_orientations_orientations_block_block,
		"scenario_object_node_orientations_orientations_block",
		"scenario_object_node_orientations_orientations_block",
		1785,
		scenario_object_node_orientations_orientations_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_ordnance_list_block_group_block,
		"scenario_ordnance_list_block",
		"scenario_ordnance_list_block",
		1,
		scenario_ordnance_list_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_performance_actor_block_block,
		"scenario_performance_actor_block",
		"scenario_performance_actor_block",
		16,
		scenario_performance_actor_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_performance_line_animation_block_block,
		"scenario_performance_line_animation_block",
		"scenario_performance_line_animation_block",
		8,
		scenario_performance_line_animation_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_performance_line_block_block,
		"scenario_performance_line_block",
		"scenario_performance_line_block",
		256,
		scenario_performance_line_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_performance_line_dialog_block_block,
		"scenario_performance_line_dialog_block",
		"scenario_performance_line_dialog_block",
		4,
		scenario_performance_line_dialog_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_performance_line_point_interaction_block_block,
		"scenario_performance_line_point_interaction_block",
		"scenario_performance_line_point_interaction_block",
		16,
		scenario_performance_line_point_interaction_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_performance_line_scenery_sync_action_block_block,
		"scenario_performance_line_scenery_sync_action_block",
		"scenario_performance_line_scenery_sync_action_block",
		8,
		scenario_performance_line_scenery_sync_action_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_performance_line_script_fragment_block_block,
		"scenario_performance_line_script_fragment_block",
		"scenario_performance_line_script_fragment_block",
		16,
		scenario_performance_line_script_fragment_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_performance_line_sound_block_block,
		"scenario_performance_line_sound_block",
		"scenario_performance_line_sound_block",
		4,
		scenario_performance_line_sound_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_performance_line_sync_action_actor_block_block,
		"scenario_performance_line_sync_action_actor_block",
		"scenario_performance_line_sync_action_actor_block",
		16,
		scenario_performance_line_sync_action_actor_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_performance_line_sync_action_block_block,
		"scenario_performance_line_sync_action_block",
		"scenario_performance_line_sync_action_block",
		8,
		scenario_performance_line_sync_action_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_performance_task_block_block,
		"scenario_performance_task_block",
		"scenario_performance_task_block",
		8,
		scenario_performance_task_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_performances_block_block,
		"scenario_performances_block",
		"scenario_performances_block",
		256,
		scenario_performances_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_players_block_block,
		"scenario_players_block",
		"scenario_players_block",
		256,
		scenario_players_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_profiles_block_block,
		"scenario_profiles_block",
		"scenario_profiles_block",
		256,
		scenario_profiles_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_required_resource_block_group_block,
		"scenario_required_resource_block",
		"scenario_required_resource_block",
		1,
		scenario_required_resource_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_requisition_palette_block_block,
		"scenario_requisition_palette_block",
		"scenario_requisition_palette_block",
		64,
		scenario_requisition_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_requisition_trigger_volumes_block_block,
		"scenario_requisition_trigger_volumes_block",
		"scenario_requisition_trigger_volumes_block",
		1024,
		scenario_requisition_trigger_volumes_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_safe_zone_trigger_volumes_block_block,
		"scenario_safe_zone_trigger_volumes_block",
		"scenario_safe_zone_trigger_volumes_block",
		1024,
		scenario_safe_zone_trigger_volumes_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_scenery_block_block,
		"scenario_scenery_block",
		"scenario_scenery_block",
		2000,
		scenario_scenery_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_scenery_palette_block_block,
		"scenario_scenery_palette_block",
		"scenario_scenery_palette_block",
		256,
		scenario_scenery_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_sky_reference_block_block,
		"scenario_sky_reference_block",
		"scenario_sky_reference_block",
		32,
		scenario_sky_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_soft_ceilings_block_block,
		"scenario_soft_ceilings_block",
		"scenario_soft_ceilings_block",
		128,
		scenario_soft_ceilings_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_sound_scenery_block_block,
		"scenario_sound_scenery_block",
		"scenario_sound_scenery_block",
		512,
		scenario_sound_scenery_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_sound_scenery_palette_block_block,
		"scenario_sound_scenery_palette_block",
		"scenario_sound_scenery_palette_block",
		256,
		scenario_sound_scenery_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_spawn_data_block_block,
		"scenario_spawn_data_block",
		"scenario_spawn_data_block",
		1,
		scenario_spawn_data_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_spawner_block_block,
		"scenario_spawner_block",
		"scenario_spawner_block",
		128,
		scenario_spawner_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_spawner_palette_block_block,
		"scenario_spawner_palette_block",
		"scenario_spawner_palette_block",
		256,
		scenario_spawner_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_structure_bsp_block_group_block,
		"scenario_structure_bsp_block",
		"scenario_structure_bsp_block",
		1,
		scenario_structure_bsp_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_structure_bsp_reference_block_block,
		"scenario_structure_bsp_reference_block",
		"scenario_structure_bsp_reference_block",
		32,
		scenario_structure_bsp_reference_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_structure_lighting_info_block_group_block,
		"scenario_structure_lighting_info_block",
		"scenario_structure_lighting_info_block",
		1,
		scenario_structure_lighting_info_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_terminal_block_block,
		"scenario_terminal_block",
		"scenario_terminal_block",
		20,
		scenario_terminal_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_terminal_palette_block_block,
		"scenario_terminal_palette_block",
		"scenario_terminal_palette_block",
		256,
		scenario_terminal_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_trigger_volume_block_block,
		"scenario_trigger_volume_block",
		"scenario_trigger_volume_block",
		1024,
		scenario_trigger_volume_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_vehicle_block_block,
		"scenario_vehicle_block",
		"scenario_vehicle_block",
		256,
		scenario_vehicle_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_vehicle_palette_block_block,
		"scenario_vehicle_palette_block",
		"scenario_vehicle_palette_block",
		256,
		scenario_vehicle_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_weapon_block_block,
		"scenario_weapon_block",
		"scenario_weapon_block",
		128,
		scenario_weapon_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_weapon_palette_block_block,
		"scenario_weapon_palette_block",
		"scenario_weapon_palette_block",
		256,
		scenario_weapon_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_weather_dumpling_block_block,
		"scenario_weather_dumpling_block",
		"scenario_weather_dumpling_block",
		100,
		scenario_weather_dumpling_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_weather_palette_block_block,
		"scenario_weather_palette_block",
		"scenario_weather_palette_block",
		32,
		scenario_weather_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_wetness_bsp_data_block_group_block,
		"scenario_wetness_bsp_data_block",
		"scenario_wetness_bsp_data_block",
		1,
		scenario_wetness_bsp_data_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_zone_debugger_block_definition_block,
		"scenario_zone_debugger_block_definition",
		"scenario_zone_debugger_block_definition",
		1,
		scenario_zone_debugger_block_definition_struct);

	TAG_BLOCK_FROM_STRUCT(
		scenario_zone_set_block_block,
		"scenario_zone_set_block",
		"scenario_zone_set_block",
		64,
		scenario_zone_set_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_zone_set_bsp_bits_block_block,
		"scenario_zone_set_bsp_bits_block",
		"scenario_zone_set_bsp_bits_block",
		32,
		scenario_zone_set_bsp_bits_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_zone_set_bsp_checksum_block_block,
		"scenario_zone_set_bsp_checksum_block",
		"scenario_zone_set_bsp_checksum_block",
		32,
		scenario_zone_set_bsp_checksum_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_zone_set_bsp_pvs_block_block,
		"scenario_zone_set_bsp_pvs_block",
		"scenario_zone_set_bsp_pvs_block",
		32,
		scenario_zone_set_bsp_pvs_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_zone_set_bsp_seam_cluster_mappings_block_block,
		"scenario_zone_set_bsp_seam_cluster_mappings_block",
		"scenario_zone_set_bsp_seam_cluster_mappings_block",
		255,
		scenario_zone_set_bsp_seam_cluster_mappings_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_zone_set_budget_override_block_block,
		"scenario_zone_set_budget_override_block",
		"scenario_zone_set_budget_override_block",
		1,
		scenario_zone_set_budget_override_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_zone_set_cluster_pvs_bit_vector_block_block,
		"scenario_zone_set_cluster_pvs_bit_vector_block",
		"scenario_zone_set_cluster_pvs_bit_vector_block",
		8,
		scenario_zone_set_cluster_pvs_bit_vector_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_zone_set_cluster_pvs_block_block,
		"scenario_zone_set_cluster_pvs_block",
		"scenario_zone_set_cluster_pvs_block",
		255,
		scenario_zone_set_cluster_pvs_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_zone_set_cluster_reference_block_block,
		"scenario_zone_set_cluster_reference_block",
		"scenario_zone_set_cluster_reference_block",
		8160,
		scenario_zone_set_cluster_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_zone_set_lipsync_block_block,
		"scenario_zone_set_lipsync_block",
		"scenario_zone_set_lipsync_block",
		32767,
		scenario_zone_set_lipsync_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_zone_set_pvs_block_block,
		"scenario_zone_set_pvs_block",
		"scenario_zone_set_pvs_block",
		65,
		scenario_zone_set_pvs_block);

	TAG_BLOCK_FROM_STRUCT(
		scenario_zone_set_switch_trigger_volume_block_block,
		"scenario_zone_set_switch_trigger_volume_block",
		"scenario_zone_set_switch_trigger_volume_block",
		1024,
		scenario_zone_set_switch_trigger_volume_block);

	TAG_BLOCK_FROM_STRUCT(
		scene_object_attachment_block_block,
		"scene_object_attachment_block",
		"scene_object_attachment_block",
		10000,
		scene_object_attachment_block);

	TAG_BLOCK_FROM_STRUCT(
		scenery_block_group_block,
		"scenery",
		"scenery_block",
		1,
		scenery_group$2);

	TAG_BLOCK_FROM_STRUCT(
		scenery_block_index_flags_block_block,
		"scenery_block_index_flags_block",
		"scenery_block_index_flags_block",
		256,
		scenery_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		screen_space_light_shader_override_block_block,
		"screen_space_light_shader_override_block",
		"screen_space_light_shader_override_block",
		32767,
		screen_space_light_shader_override_block);

	TAG_BLOCK_FROM_STRUCT(
		scriptlistblock_block,
		"scriptListBlock",
		"scriptListBlock",
		128,
		scriptlistblock);

	TAG_BLOCK_FROM_STRUCT(
		script_block_group_block,
		"script_block",
		"script_block",
		1,
		script_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		script_container_block_group_block,
		"script_container_block",
		"script_container_block",
		1,
		script_container_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		script_fragment_block_block,
		"script_fragment_block",
		"script_fragment_block",
		1,
		script_fragment_block);

	TAG_BLOCK_FROM_STRUCT(
		script_payload_block_block,
		"script_payload_block",
		"script_payload_block",
		1,
		script_payload_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		scriptablelightrigblock_block,
		"scriptableLightRigBlock",
		"scriptableLightRigBlock",
		128,
		scriptablelightrigblock);

	TAG_BLOCK_FROM_STRUCT(
		seam_indices_block_definition_block,
		"seam_indices_block_definition",
		"seam_indices_block_definition",
		128,
		seam_indices_block_definition);

	TAG_BLOCK_FROM_STRUCT(
		seat_ejection_block_block,
		"seat_ejection_block",
		"seat_ejection_block",
		8,
		seat_ejection_block);

	TAG_BLOCK_FROM_STRUCT(
		secondary_set_trigger_block_block,
		"secondary_set_trigger_block",
		"secondary_set_trigger_block",
		1,
		secondary_set_trigger_block);

	TAG_BLOCK_FROM_STRUCT(
		self_illumination_block_group_block,
		"self_illumination_block",
		"self_illumination_block",
		1,
		self_illumination_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		self_illumination_state_block,
		"self_illumination_state",
		"self_illumination_state",
		16,
		self_illumination_state);

	TAG_BLOCK_FROM_STRUCT(
		shader_block_group_block,
		"shader_block",
		"shader_block",
		1,
		shader_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_cortana_block_group_block,
		"shader_cortana_block",
		"shader_cortana_block",
		1,
		shader_cortana_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_custom_block_group_block,
		"shader_custom_block",
		"shader_custom_block",
		1,
		shader_custom_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_decal_block_group_block,
		"shader_decal_block",
		"shader_decal_block",
		1,
		shader_decal_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_foliage_block_group_block,
		"shader_foliage_block",
		"shader_foliage_block",
		1,
		shader_foliage_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_fur_block_group_block,
		"shader_fur_block",
		"shader_fur_block",
		1,
		shader_fur_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_fur_stencil_block_group_block,
		"shader_fur_stencil_block",
		"shader_fur_stencil_block",
		1,
		shader_fur_stencil_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_glass_block_group_block,
		"shader_glass_block",
		"shader_glass_block",
		1,
		shader_glass_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_halogram_block_group_block,
		"shader_halogram_block",
		"shader_halogram_block",
		1,
		shader_halogram_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_light_volume_block_group_block,
		"shader_light_volume_block",
		"shader_light_volume_block",
		1,
		shader_light_volume_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_mux_block_group_block,
		"shader_mux_block",
		"shader_mux_block",
		1,
		shader_mux_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_mux_material_block_group_block,
		"shader_mux_material_block",
		"shader_mux_material_block",
		1,
		shader_mux_material_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_particle_block_group_block,
		"shader_particle_block",
		"shader_particle_block",
		1,
		shader_particle_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_screen_block_group_block,
		"shader_screen_block",
		"shader_screen_block",
		1,
		shader_screen_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_skin_block_group_block,
		"shader_skin_block",
		"shader_skin_block",
		1,
		shader_skin_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_terrain_block_group_block,
		"shader_terrain_block",
		"shader_terrain_block",
		1,
		shader_terrain_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_water_block_group_block,
		"shader_water_block",
		"shader_water_block",
		1,
		shader_water_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_waterfall_block_group_block,
		"shader_waterfall_block",
		"shader_waterfall_block",
		1,
		shader_waterfall_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shapenameblock_block,
		"shapeNameBlock",
		"shapeNameBlock",
		8192,
		shapenameblock);

	TAG_BLOCK_FROM_STRUCT(
		shared_model_animation_block_block,
		"shared_model_animation_block",
		"shared_model_animation_block",
		1,
		shared_model_animation_block);

	TAG_BLOCK_FROM_STRUCT(
		shared_static_data_codec_rotation_block_block,
		"shared_static_data_codec_rotation_block",
		"shared_static_data_codec_rotation_block",
		522240,
		shared_static_data_codec_rotation_block);

	TAG_BLOCK_FROM_STRUCT(
		shared_static_data_codec_scale_block_block,
		"shared_static_data_codec_scale_block",
		"shared_static_data_codec_scale_block",
		522240,
		shared_static_data_codec_scale_block);

	TAG_BLOCK_FROM_STRUCT(
		shared_static_data_codec_translation_block_block,
		"shared_static_data_codec_translation_block",
		"shared_static_data_codec_translation_block",
		522240,
		shared_static_data_codec_translation_block);

	TAG_BLOCK_FROM_STRUCT(
		shield_boost_block_block,
		"shield_boost_block",
		"shield_boost_block",
		1,
		shield_boost_block);

	TAG_BLOCK_FROM_STRUCT(
		shield_impact_block_group_block,
		"shield_impact_block",
		"shield_impact_block",
		1,
		shield_impact_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		short_block_block,
		"short_block",
		"short_block",
		1024,
		short_block);

	TAG_BLOCK_FROM_STRUCT(
		sidecarblock_block,
		"sidecarBlock",
		"sidecarBlock",
		1,
		sidecarblock);

	TAG_BLOCK_FROM_STRUCT(
		silentassistlevelblock_block,
		"silentAssistLevelBlock",
		"silentAssistLevelBlock",
		4,
		silentassistlevelblock);

	TAG_BLOCK_FROM_STRUCT(
		silent_assist_globals_block_group_block,
		"silent_assist_globals_block",
		"silent_assist_globals_block",
		1,
		silent_assist_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		simulated_input_block_group_block,
		"simulated_input_block",
		"simulated_input_block",
		1,
		simulated_input_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		simulation_interpolation_block_group_block,
		"simulation_interpolation_block",
		"simulation_interpolation_block",
		1,
		simulation_interpolation_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		single_achievement_definition_block_block,
		"single_achievement_definition_block",
		"single_achievement_definition_block",
		256,
		single_achievement_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		single_achievement_restricted_level_block_block,
		"single_achievement_restricted_level_block",
		"single_achievement_restricted_level_block",
		5,
		single_achievement_restricted_level_block);

	TAG_BLOCK_FROM_STRUCT(
		single_avatar_award_definition_block_block,
		"single_avatar_award_definition_block",
		"single_avatar_award_definition_block",
		3,
		single_avatar_award_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		single_screen_effect_block,
		"single_screen_effect",
		"single_screen_effect",
		8,
		single_screen_effect);

	TAG_BLOCK_FROM_STRUCT(
		single_variant_block_block,
		"single_variant_block",
		"single_variant_block",
		1024,
		single_variant_block);

	TAG_BLOCK_FROM_STRUCT(
		soft_ceiling_globals_block_block,
		"soft_ceiling_globals_block",
		"soft_ceiling_globals_block",
		1,
		soft_ceiling_globals_block);

	TAG_BLOCK_FROM_STRUCT(
		soft_surfaces_definition_block_block,
		"soft_surfaces_definition_block",
		"soft_surfaces_definition_block",
		1,
		soft_surfaces_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		solofogfunctionblock_block,
		"soloFogFunctionBlock",
		"soloFogFunctionBlock",
		1,
		solofogfunctionblock);

	TAG_BLOCK_FROM_STRUCT(
		sorting_position_block_block,
		"sorting_position_block",
		"sorting_position_block",
		65535,
		sorting_position_block);

	TAG_BLOCK_FROM_STRUCT(
		sound2_block_group_block,
		"sound2_block",
		"sound2_block",
		1,
		sound2_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		soundlipsyncinfoblock_block,
		"soundLipSyncInfoBlock",
		"soundLipSyncInfoBlock",
		1,
		soundlipsyncinfoblock_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_block_group_block,
		"sound_block",
		"sound_block",
		1,
		sound_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_block_block,
		"sound_block",
		"sound_block",
		2,
		sound_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_cache_file_gestalt_block_group_block,
		"sound_cache_file_gestalt_block",
		"sound_cache_file_gestalt_block",
		1,
		sound_cache_file_gestalt_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_class_block_block,
		"sound_class_block",
		"sound_class_block",
		71,
		sound_class_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_classes_block_group_block,
		"sound_classes_block",
		"sound_classes_block",
		1,
		sound_classes_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_combine_response_block_block,
		"sound_combine_response_block",
		"sound_combine_response_block",
		10,
		sound_combine_response_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_combiner_block_group_block,
		"sound_combiner_block",
		"sound_combiner_block",
		1,
		sound_combiner_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_combiner_definition_entry_block_block,
		"sound_combiner_definition_entry_block",
		"sound_combiner_definition_entry_block",
		32,
		sound_combiner_definition_entry_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_definition_language_permutation_info_block_block,
		"sound_definition_language_permutation_info_block",
		"sound_definition_language_permutation_info_block",
		1088,
		sound_definition_language_permutation_info_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_dialogue_constants_block_group_block,
		"sound_dialogue_constants_block",
		"sound_dialogue_constants_block",
		1,
		sound_dialogue_constants_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_collection_block_group_block,
		"sound_effect_collection_block",
		"sound_effect_collection_block",
		1,
		sound_effect_collection_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_template_additional_sound_input_block_block,
		"sound_effect_template_additional_sound_input_block",
		"sound_effect_template_additional_sound_input_block",
		1,
		sound_effect_template_additional_sound_input_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_template_block_group_block,
		"sound_effect_template_block",
		"sound_effect_template_block",
		1,
		sound_effect_template_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_template_parameter_block_block,
		"sound_effect_template_parameter_block",
		"sound_effect_template_parameter_block",
		128,
		sound_effect_template_parameter_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_templates_block_block,
		"sound_effect_templates_block",
		"sound_effect_templates_block",
		8,
		sound_effect_templates_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_environment_block_group_block,
		"sound_environment_block",
		"sound_environment_block",
		1,
		sound_environment_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_equalizer_band_settings_block_block,
		"sound_equalizer_band_settings_block",
		"sound_equalizer_band_settings_block",
		3,
		sound_equalizer_band_settings_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_extra_info_block_block,
		"sound_extra_info_block",
		"sound_extra_info_block",
		1,
		sound_extra_info_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_codec_block_block,
		"sound_gestalt_codec_block",
		"sound_gestalt_codec_block",
		32767,
		sound_gestalt_codec_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_custom_playback_block_block,
		"sound_gestalt_custom_playback_block",
		"sound_gestalt_custom_playback_block",
		32767,
		sound_gestalt_custom_playback_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_facial_animation_block_block,
		"sound_gestalt_facial_animation_block",
		"sound_gestalt_facial_animation_block",
		32767,
		sound_gestalt_facial_animation_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_import_names_block_block,
		"sound_gestalt_import_names_block",
		"sound_gestalt_import_names_block",
		32767,
		sound_gestalt_import_names_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_layer_markers_block_block,
		"sound_gestalt_layer_markers_block",
		"sound_gestalt_layer_markers_block",
		32767,
		sound_gestalt_layer_markers_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_permutation_languages_block_block,
		"sound_gestalt_permutation_languages_block",
		"sound_gestalt_permutation_languages_block",
		1048575,
		sound_gestalt_permutation_languages_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_permutations_block_block,
		"sound_gestalt_permutations_block",
		"sound_gestalt_permutations_block",
		1048575,
		sound_gestalt_permutations_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_pitch_range_parameters_block_block,
		"sound_gestalt_pitch_range_parameters_block",
		"sound_gestalt_pitch_range_parameters_block",
		32767,
		sound_gestalt_pitch_range_parameters_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_pitch_ranges_block_block,
		"sound_gestalt_pitch_ranges_block",
		"sound_gestalt_pitch_ranges_block",
		32767,
		sound_gestalt_pitch_ranges_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_playback_block_block,
		"sound_gestalt_playback_block",
		"sound_gestalt_playback_block",
		32767,
		sound_gestalt_playback_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_promotions_block_block,
		"sound_gestalt_promotions_block",
		"sound_gestalt_promotions_block",
		128,
		sound_gestalt_promotions_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_runtime_permutation_bit_vector_block_block,
		"sound_gestalt_runtime_permutation_bit_vector_block",
		"sound_gestalt_runtime_permutation_bit_vector_block",
		32767,
		sound_gestalt_runtime_permutation_bit_vector_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_scale_block_block,
		"sound_gestalt_scale_block",
		"sound_gestalt_scale_block",
		32767,
		sound_gestalt_scale_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_global_propagation_block_group_block,
		"sound_global_propagation_block",
		"sound_global_propagation_block",
		1,
		sound_global_propagation_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_globals_block_block,
		"sound_globals_block",
		"sound_globals_block",
		1,
		sound_globals_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_incident_response_block_group_block,
		"sound_incident_response_block",
		"sound_incident_response_block",
		1,
		sound_incident_response_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_incident_response_data_block_block,
		"sound_incident_response_data_block",
		"sound_incident_response_data_block",
		10,
		sound_incident_response_data_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_language_info_block_block,
		"sound_language_info_block",
		"sound_language_info_block",
		17,
		sound_language_info_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_looping_block_group_block,
		"sound_looping_block",
		"sound_looping_block",
		1,
		sound_looping_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_mix_block_group_block,
		"sound_mix_block",
		"sound_mix_block",
		1,
		sound_mix_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_old_block_group_block,
		"sound_old_block",
		"sound_old_block",
		1,
		sound_old_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_permutation_chunk_block_block,
		"sound_permutation_chunk_block",
		"sound_permutation_chunk_block",
		262140,
		sound_permutation_chunk_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_permutation_language_info_block,
		"sound_permutation_language_info",
		"sound_permutation_language_info",
		65535,
		sound_permutation_language_info);

	TAG_BLOCK_FROM_STRUCT(
		sound_permutation_languages_block_block,
		"sound_permutation_languages_block",
		"sound_permutation_languages_block",
		17,
		sound_permutation_languages_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_permutation_marker_block_block,
		"sound_permutation_marker_block",
		"sound_permutation_marker_block",
		65535,
		sound_permutation_marker_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_permutation_raw_info_block_block,
		"sound_permutation_raw_info_block",
		"sound_permutation_raw_info_block",
		34,
		sound_permutation_raw_info_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_permutations_block_block,
		"sound_permutations_block",
		"sound_permutations_block",
		32,
		sound_permutations_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_pitch_range_block_block,
		"sound_pitch_range_block",
		"sound_pitch_range_block",
		17,
		sound_pitch_range_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_pitch_range_distances_block_block,
		"sound_pitch_range_distances_block",
		"sound_pitch_range_distances_block",
		32767,
		sound_distance_parameters_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_pitch_range_language_info_block,
		"sound_pitch_range_language_info",
		"sound_pitch_range_language_info",
		65535,
		sound_pitch_range_language_info);

	TAG_BLOCK_FROM_STRUCT(
		sound_platform_sound_playback_block_block,
		"sound_platform_sound_playback_block",
		"sound_platform_sound_playback_block",
		1,
		sound_platform_sound_playback_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_promotion_rule_block_block,
		"sound_promotion_rule_block",
		"sound_promotion_rule_block",
		17,
		sound_promotion_rule_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_promotion_runtime_timer_block_block,
		"sound_promotion_runtime_timer_block",
		"sound_promotion_runtime_timer_block",
		17,
		sound_promotion_runtime_timer_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_radio_settings_block_group_block,
		"sound_radio_settings_block",
		"sound_radio_settings_block",
		1,
		sound_radio_settings_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_references_block_block,
		"sound_references_block",
		"sound_references_block",
		500,
		sound_references_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_response_block_group_block,
		"sound_response_block",
		"sound_response_block",
		1,
		sound_response_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_response_data_block_block,
		"sound_response_data_block",
		"sound_response_data_block",
		10,
		sound_response_data_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_response_definition_block_block,
		"sound_response_definition_block",
		"sound_response_definition_block",
		10,
		sound_response_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_response_permutation_block_block,
		"sound_response_permutation_block",
		"sound_response_permutation_block",
		10,
		sound_response_permutation_block);

	TAG_BLOCK_FROM_STRUCT(
		sound_scenery_block_group_block,
		"sound_scenery_block",
		"sound_scenery_block",
		1,
		sound_scenery_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_scenery_block_index_flags_block_block,
		"sound_scenery_block_index_flags_block",
		"sound_scenery_block_index_flags_block",
		256,
		sound_scenery_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sound_xma2_seek_table_block_block,
		"sound_xma2_seek_table_block",
		"sound_xma2_seek_table_block",
		16384,
		sound_xma2_seek_table_block);

	TAG_BLOCK_FROM_STRUCT(
		soundbank_block_group_block,
		"soundbank_block",
		"soundbank_block",
		1,
		soundbank_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		sounds_block_block,
		"sounds_block",
		"sounds_block",
		60,
		sounds_block);

	TAG_BLOCK_FROM_STRUCT(
		space_fighter_block_block,
		"space_fighter_block",
		"space_fighter_block",
		1,
		space_fighter_block);

	TAG_BLOCK_FROM_STRUCT(
		spawn_formation_block_block,
		"spawn_formation_block",
		"spawn_formation_block",
		8,
		spawn_formation_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		spawn_influence_weight_falloff_function_block_block,
		"spawn_influence_weight_falloff_function_block",
		"spawn_influence_weight_falloff_function_block",
		1,
		spawn_influence_weight_falloff_function_block);

	TAG_BLOCK_FROM_STRUCT(
		spawn_points_block_block,
		"spawn_points_block",
		"spawn_points_block",
		128,
		spawn_points_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		spawner_block_group_block,
		"spawner_block",
		"spawner_block",
		1,
		spawner_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		spawner_block_index_flags_block_block,
		"spawner_block_index_flags_block",
		"spawner_block_index_flags_block",
		256,
		spawner_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		special_movement_block_block,
		"special_movement_block",
		"special_movement_block",
		1,
		special_movement_block);

	TAG_BLOCK_FROM_STRUCT(
		specializedincidentcustomdatafilterblock_block,
		"specializedIncidentCustomDataFilterBlock",
		"specializedIncidentCustomDataFilterBlock",
		1,
		specializedincidentcustomdatafilterblock);

	TAG_BLOCK_FROM_STRUCT(
		specializedincidentdistancefilterblock_block,
		"specializedIncidentDistanceFilterBlock",
		"specializedIncidentDistanceFilterBlock",
		1,
		specializedincidentdistancefilterblock);

	TAG_BLOCK_FROM_STRUCT(
		specializedincidentgameoverblock_block,
		"specializedIncidentGameOverBlock",
		"specializedIncidentGameOverBlock",
		1,
		specializedincidentgameoverblock);

	TAG_BLOCK_FROM_STRUCT(
		specializedincidentrandomordnanceblock_block,
		"specializedIncidentRandomOrdnanceBlock",
		"specializedIncidentRandomOrdnanceBlock",
		16,
		specializedincidentrandomordnanceblock);

	TAG_BLOCK_FROM_STRUCT(
		specialized_incident_block_block,
		"specialized_incident_block",
		"specialized_incident_block",
		1,
		specialized_incident_block);

	TAG_BLOCK_FROM_STRUCT(
		specialized_incident_fanfare_block_block,
		"specialized_incident_fanfare_block",
		"specialized_incident_fanfare_block",
		1,
		specialized_incident_fanfare_block);

	TAG_BLOCK_FROM_STRUCT(
		specialized_incident_kill_implement_block_block,
		"specialized_incident_kill_implement_block",
		"specialized_incident_kill_implement_block",
		50,
		specialized_incident_kill_implement_block);

	TAG_BLOCK_FROM_STRUCT(
		specialized_incident_object_properties_block_block,
		"specialized_incident_object_properties_block",
		"specialized_incident_object_properties_block",
		10,
		specialized_incident_object_properties_block);

	TAG_BLOCK_FROM_STRUCT(
		specialized_incident_object_riding_in_vehicle_properties_block_block,
		"specialized_incident_object_riding_in_vehicle_properties_block",
		"specialized_incident_object_riding_in_vehicle_properties_block",
		10,
		specialized_incident_object_riding_in_vehicle_properties_block);

	TAG_BLOCK_FROM_STRUCT(
		specialized_incident_special_kill_type_block_block,
		"specialized_incident_special_kill_type_block",
		"specialized_incident_special_kill_type_block",
		10,
		specialized_incident_special_kill_type_block);

	TAG_BLOCK_FROM_STRUCT(
		spheres_block_block,
		"spheres_block",
		"spheres_block",
		16384,
		spheres_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		spring_acceleration_block_group_block,
		"spring_acceleration_block",
		"spring_acceleration_block",
		1,
		spring_acceleration_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		spring_linear_acceleration_block_block,
		"spring_linear_acceleration_block",
		"spring_linear_acceleration_block",
		3,
		spring_linear_acceleration_block);

	TAG_BLOCK_FROM_STRUCT(
		squad_groups_block_block,
		"squad_groups_block",
		"squad_groups_block",
		130,
		squad_groups_block);

	TAG_BLOCK_FROM_STRUCT(
		squad_patrol_block_block,
		"squad_patrol_block",
		"squad_patrol_block",
		16,
		squad_patrol_block);

	TAG_BLOCK_FROM_STRUCT(
		squad_patrol_member_block_block,
		"squad_patrol_member_block",
		"squad_patrol_member_block",
		64,
		squad_patrol_member_block);

	TAG_BLOCK_FROM_STRUCT(
		squad_patrol_point_block_block,
		"squad_patrol_point_block",
		"squad_patrol_point_block",
		48,
		squad_patrol_point_block);

	TAG_BLOCK_FROM_STRUCT(
		squad_patrol_transition_block_block,
		"squad_patrol_transition_block",
		"squad_patrol_transition_block",
		256,
		squad_patrol_transition_block);

	TAG_BLOCK_FROM_STRUCT(
		squad_patrol_waypoint_block_block,
		"squad_patrol_waypoint_block",
		"squad_patrol_waypoint_block",
		10,
		squad_patrol_waypoint_block);

	TAG_BLOCK_FROM_STRUCT(
		squad_template_block_group_block,
		"squad_template_block",
		"squad_template_block",
		1,
		squad_template_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		squads_block_block,
		"squads_block",
		"squads_block",
		256,
		squads_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		ssao_definition_block_group_block,
		"ssao_definition_block",
		"ssao_definition_block",
		1,
		ssao_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		states_block_block,
		"states_block",
		"states_block",
		16,
		states_block);

	TAG_BLOCK_FROM_STRUCT(
		static_data_column_block,
		"static_data_column",
		"static_data_column",
		128,
		static_data_column);

	TAG_BLOCK_FROM_STRUCT(
		static_data_row_block,
		"static_data_row",
		"static_data_row",
		256,
		properties_struct);

	TAG_BLOCK_FROM_STRUCT(
		static_data_table_block,
		"static_data_table",
		"static_data_table",
		128,
		static_data_table);

	TAG_BLOCK_FROM_STRUCT(
		stereo_system_block_group_block,
		"stereo_system_block",
		"stereo_system_block",
		1,
		stereo_system_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		stiff_spring_constraints_block_block,
		"stiff_spring_constraints_block",
		"stiff_spring_constraints_block",
		64,
		stiff_spring_constraints_block);

	TAG_BLOCK_FROM_STRUCT(
		stimulus_payload_block_block,
		"stimulus_payload_block",
		"stimulus_payload_block",
		1,
		stimulus_payload_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		stitchable_bitmap_texture_interop_block_block,
		"stitchable_bitmap_texture_interop_block",
		"stitchable_bitmap_texture_interop_block",
		65536,
		stitchable_bitmap_texture_interop_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		streamingzoneset_block_group_block,
		"streamingzoneset_block",
		"streamingzoneset_block",
		1,
		streamingzoneset_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		string_file_references_block,
		"string_file_references",
		"string_file_references",
		16,
		string_file_references);

	TAG_BLOCK_FROM_STRUCT(
		string_substitution_pair_block_block,
		"string_substitution_pair_block",
		"string_substitution_pair_block",
		2048,
		string_substitution_pair_block);

	TAG_BLOCK_FROM_STRUCT(
		structurebspfxmarkerblock_block,
		"structureBspFxMarkerBlock",
		"structureBspFxMarkerBlock",
		1024,
		structurebspfxmarkerblock);

	TAG_BLOCK_FROM_STRUCT(
		structureiohavokdatablock_block,
		"structureIOHavokDataBlock",
		"structureIOHavokDataBlock",
		1,
		structureiohavokdatablock_struct);

	TAG_BLOCK_FROM_STRUCT(
		structurelightingcinematiclightinstanceblock_block,
		"structureLightingCinematicLightInstanceBlock",
		"structureLightingCinematicLightInstanceBlock",
		32767,
		structurelightingcinematiclightinstanceblock_struct);

	TAG_BLOCK_FROM_STRUCT(
		structurelightingcinematicobjectblock_block,
		"structureLightingCinematicObjectBlock",
		"structureLightingCinematicObjectBlock",
		32767,
		structurelightingcinematicobjectblock);

	TAG_BLOCK_FROM_STRUCT(
		structuremetadatalightconemarkerblock_block,
		"structureMetadataLightConeMarkerBlock",
		"structureMetadataLightConeMarkerBlock",
		1024,
		structuremetadatalightconemarkerblock);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_block_block,
		"structure_bsp_cluster_block",
		"structure_bsp_cluster_block",
		255,
		structure_bsp_cluster_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_debug_info_block_block,
		"structure_bsp_cluster_debug_info_block",
		"structure_bsp_cluster_debug_info_block",
		255,
		structure_bsp_cluster_debug_info_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_portal_block_block,
		"structure_bsp_cluster_portal_block",
		"structure_bsp_cluster_portal_block",
		1000,
		structure_bsp_cluster_portal_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_portal_index_block_block,
		"structure_bsp_cluster_portal_index_block",
		"structure_bsp_cluster_portal_index_block",
		512,
		structure_bsp_cluster_portal_index_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_portal_vertex_block_block,
		"structure_bsp_cluster_portal_vertex_block",
		"structure_bsp_cluster_portal_vertex_block",
		128,
		structure_bsp_cluster_portal_vertex_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_conveyor_surface_block_block,
		"structure_bsp_conveyor_surface_block",
		"structure_bsp_conveyor_surface_block",
		512,
		structure_bsp_conveyor_surface_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_debug_info_block_block,
		"structure_bsp_debug_info_block",
		"structure_bsp_debug_info_block",
		1,
		structure_bsp_debug_info_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_debug_info_indices_block_block,
		"structure_bsp_debug_info_indices_block",
		"structure_bsp_debug_info_indices_block",
		32767,
		structure_bsp_debug_info_indices_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_debug_info_render_line_block_block,
		"structure_bsp_debug_info_render_line_block",
		"structure_bsp_debug_info_render_line_block",
		32767,
		structure_bsp_debug_info_render_line_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_detail_object_data_block_block,
		"structure_bsp_detail_object_data_block",
		"structure_bsp_detail_object_data_block",
		1,
		structure_bsp_detail_object_data_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_environment_object_block_block,
		"structure_bsp_environment_object_block",
		"structure_bsp_environment_object_block",
		16384,
		structure_bsp_environment_object_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_environment_object_palette_block_block,
		"structure_bsp_environment_object_palette_block",
		"structure_bsp_environment_object_palette_block",
		1024,
		structure_bsp_environment_object_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_fog_plane_debug_info_block_block,
		"structure_bsp_fog_plane_debug_info_block",
		"structure_bsp_fog_plane_debug_info_block",
		127,
		structure_bsp_fog_plane_debug_info_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_fog_zone_debug_info_block_block,
		"structure_bsp_fog_zone_debug_info_block",
		"structure_bsp_fog_zone_debug_info_block",
		127,
		structure_bsp_fog_zone_debug_info_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_instanced_geometry_definition_block_block,
		"structure_bsp_instanced_geometry_definition_block",
		"structure_bsp_instanced_geometry_definition_block",
		2048,
		structure_bsp_instanced_geometry_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_instanced_geometry_instances_block_block,
		"structure_bsp_instanced_geometry_instances_block",
		"structure_bsp_instanced_geometry_instances_block",
		8192,
		structure_bsp_instanced_geometry_instances_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_instanced_geometry_instances_names_block_block,
		"structure_bsp_instanced_geometry_instances_names_block",
		"structure_bsp_instanced_geometry_instances_names_block",
		8192,
		structure_bsp_instanced_geometry_instances_names_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_instanced_geometry_instances_without_names_block_block,
		"structure_bsp_instanced_geometry_instances_without_names_block",
		"structure_bsp_instanced_geometry_instances_without_names_block",
		8192,
		structure_bsp_instanced_geometry_instances_without_names_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_leaf_block_block,
		"structure_bsp_leaf_block",
		"structure_bsp_leaf_block",
		134217728,
		structure_bsp_leaf_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_marker_block_block,
		"structure_bsp_marker_block",
		"structure_bsp_marker_block",
		1024,
		structure_bsp_marker_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_marker_light_index_block,
		"structure_bsp_marker_light_index",
		"structure_bsp_marker_light_index",
		1024,
		structure_bsp_marker_light_index);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_marker_light_palette_block,
		"structure_bsp_marker_light_palette",
		"structure_bsp_marker_light_palette",
		1024,
		structure_bsp_marker_light_palette);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_obb_volume_block_block,
		"structure_bsp_obb_volume_block",
		"structure_bsp_obb_volume_block",
		4096,
		structure_bsp_obb_volume_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_raw_resources_block,
		"structure_bsp_raw_resources",
		"structure_bsp_raw_resources",
		1,
		structure_bsp_raw_resources);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_runtime_decal_block_block,
		"structure_bsp_runtime_decal_block",
		"structure_bsp_runtime_decal_block",
		6144,
		structure_bsp_runtime_decal_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_sky_owner_cluster_block_block,
		"structure_bsp_sky_owner_cluster_block",
		"structure_bsp_sky_owner_cluster_block",
		32,
		structure_bsp_sky_owner_cluster_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_sound_cluster_block_block,
		"structure_bsp_sound_cluster_block",
		"structure_bsp_sound_cluster_block",
		255,
		structure_bsp_sound_cluster_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_cluster_cubemap_block,
		"structure_cluster_cubemap",
		"structure_cluster_cubemap",
		32,
		structure_cluster_cubemap);

	TAG_BLOCK_FROM_STRUCT(
		structure_collision_materials_block_block,
		"structure_collision_materials_block",
		"structure_collision_materials_block",
		512,
		structure_collision_materials_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_cookie_cutter_definition_block,
		"structure_cookie_cutter_definition",
		"structure_cookie_cutter_definition",
		1024,
		structure_cookie_cutter_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_design_block_group_block,
		"structure_design_block",
		"structure_design_block",
		1,
		structure_design_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		structure_device_portal_association_block_block,
		"structure_device_portal_association_block",
		"structure_device_portal_association_block",
		128,
		structure_device_portal_association_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_edge_to_seam_edge_mapping_block_block,
		"structure_edge_to_seam_edge_mapping_block",
		"structure_edge_to_seam_edge_mapping_block",
		2621440,
		structure_edge_to_seam_edge_mapping_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_external_instanced_geometry_references_block_block,
		"structure_external_instanced_geometry_references_block",
		"structure_external_instanced_geometry_references_block",
		4096,
		structure_external_instanced_geometry_references_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_instance_cluster_definition_block,
		"structure_instance_cluster_definition",
		"structure_instance_cluster_definition",
		4096,
		structure_instance_cluster_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_instance_group_definition_block,
		"structure_instance_group_definition",
		"structure_instance_group_definition",
		4096,
		structure_instance_group_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_instance_imposter_info_block_block,
		"structure_instance_imposter_info_block",
		"structure_instance_imposter_info_block",
		8192,
		structure_instance_imposter_info_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_lighting_generic_light_definition_block_block,
		"structure_lighting_generic_light_definition_block",
		"structure_lighting_generic_light_definition_block",
		32767,
		structure_lighting_generic_light_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_lighting_generic_light_instance_block_block,
		"structure_lighting_generic_light_instance_block",
		"structure_lighting_generic_light_instance_block",
		32767,
		structure_lighting_generic_light_instance_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_manifest_bsp_block_block,
		"structure_manifest_bsp_block",
		"structure_manifest_bsp_block",
		64,
		structure_manifest_bsp_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_material_lighting_info_block_block,
		"structure_material_lighting_info_block",
		"structure_material_lighting_info_block",
		32767,
		structure_material_lighting_info_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_meta_block_group_block,
		"structure_meta_block",
		"structure_meta_block",
		1,
		structure_meta_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_portal_device_mapping_block_block,
		"structure_portal_device_mapping_block",
		"structure_portal_device_mapping_block",
		32,
		structure_portal_device_mapping_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_seam_block_block,
		"structure_seam_block",
		"structure_seam_block",
		128,
		structure_seam_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_seam_cluster_mapping_block_block,
		"structure_seam_cluster_mapping_block",
		"structure_seam_cluster_mapping_block",
		255,
		structure_seam_cluster_mapping_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_seam_edge_mapping_block_block,
		"structure_seam_edge_mapping_block",
		"structure_seam_edge_mapping_block",
		32767,
		structure_seam_edge_mapping_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_seam_final_edges_block_block,
		"structure_seam_final_edges_block",
		"structure_seam_final_edges_block",
		32767,
		structure_seam_final_edges_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_seam_final_planes_block_block,
		"structure_seam_final_planes_block",
		"structure_seam_final_planes_block",
		32767,
		structure_seam_final_planes_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_seam_final_points_block_block,
		"structure_seam_final_points_block",
		"structure_seam_final_points_block",
		32767,
		structure_seam_final_points_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_seam_final_triangles_block_block,
		"structure_seam_final_triangles_block",
		"structure_seam_final_triangles_block",
		32767,
		structure_seam_final_triangles_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_seam_mapping_block_block,
		"structure_seam_mapping_block",
		"structure_seam_mapping_block",
		128,
		structure_seam_mapping_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_seam_original_vertex_block_block,
		"structure_seam_original_vertex_block",
		"structure_seam_original_vertex_block",
		32767,
		structure_seam_original_vertex_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_seam_original_vertex_plane_normals_block_block,
		"structure_seam_original_vertex_plane_normals_block",
		"structure_seam_original_vertex_plane_normals_block",
		1024,
		structure_seam_original_vertex_plane_normals_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_seams_block_group_block,
		"structure_seams_block",
		"structure_seams_block",
		1,
		structure_seams_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_soft_ceiling_block_block,
		"structure_soft_ceiling_block",
		"structure_soft_ceiling_block",
		128,
		structure_soft_ceiling_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_soft_ceiling_triangle_block_block,
		"structure_soft_ceiling_triangle_block",
		"structure_soft_ceiling_triangle_block",
		32767,
		structure_soft_ceiling_triangle_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_sound_cluster_interior_cluster_indices_block,
		"structure_sound_cluster_interior_cluster_indices",
		"structure_sound_cluster_interior_cluster_indices",
		255,
		structure_sound_cluster_interior_cluster_indices);

	TAG_BLOCK_FROM_STRUCT(
		structure_sound_cluster_portal_designators_block,
		"structure_sound_cluster_portal_designators",
		"structure_sound_cluster_portal_designators",
		1000,
		structure_sound_cluster_portal_designators);

	TAG_BLOCK_FROM_STRUCT(
		structure_super_node_aabbs_block_block,
		"structure_super_node_aabbs_block",
		"structure_super_node_aabbs_block",
		32768,
		structure_super_node_aabbs_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_super_node_traversal_geometry_block_block,
		"structure_super_node_traversal_geometry_block",
		"structure_super_node_traversal_geometry_block",
		32767,
		structure_super_node_traversal_geometry_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_super_node_traversal_geometry_indices_block_block,
		"structure_super_node_traversal_geometry_indices_block",
		"structure_super_node_traversal_geometry_indices_block",
		1000,
		structure_super_node_traversal_geometry_indices_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_surface_block_block,
		"structure_surface_block",
		"structure_surface_block",
		262136,
		structure_surface_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_surface_to_triangle_mapping_block_block,
		"structure_surface_to_triangle_mapping_block",
		"structure_surface_to_triangle_mapping_block",
		2097088,
		structure_surface_to_triangle_mapping_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		structure_water_groups_block_block,
		"structure_water_groups_block",
		"structure_water_groups_block",
		1024,
		structure_water_groups_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_water_instance_debug_triangles_block_block,
		"structure_water_instance_debug_triangles_block",
		"structure_water_instance_debug_triangles_block",
		8192,
		structure_water_instance_debug_triangles_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_water_instance_planes_block_block,
		"structure_water_instance_planes_block",
		"structure_water_instance_planes_block",
		1024,
		structure_water_instance_planes_block);

	TAG_BLOCK_FROM_STRUCT(
		structure_water_instances_block_block,
		"structure_water_instances_block",
		"structure_water_instances_block",
		1024,
		structure_water_instances_block);

	TAG_BLOCK_FROM_STRUCT(
		style_block_group_block,
		"style_block",
		"style_block",
		1,
		style_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		style_palette_block_block,
		"style_palette_block",
		"style_palette_block",
		50,
		style_palette_block);

	TAG_BLOCK_FROM_STRUCT(
		style_sheet_list_block_group_block,
		"style_sheet_list_block",
		"style_sheet_list_block",
		1,
		style_sheet_list_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		subpart_block_block,
		"subpart_block",
		"subpart_block",
		65535,
		subpart_block);

	TAG_BLOCK_FROM_STRUCT(
		super_node_mappings_block_block$2,
		"super_node_mappings_block",
		"super_node_mappings_block",
		32767,
		super_node_mappings_block$2);

	TAG_BLOCK_FROM_STRUCT(
		super_node_mappings_block_block,
		"super_node_mappings_block",
		"super_node_mappings_block",
		2048,
		super_node_mappings_block);

	TAG_BLOCK_FROM_STRUCT(
		super_node_recursable_masks_block_block,
		"super_node_recursable_masks_block",
		"super_node_recursable_masks_block",
		2048,
		super_node_recursable_masks_block);

	TAG_BLOCK_FROM_STRUCT(
		suppressed_incident_block_block,
		"suppressed_incident_block",
		"suppressed_incident_block",
		1000,
		suppressed_incident_block);

	TAG_BLOCK_FROM_STRUCT(
		surfaces_block_block,
		"surfaces_block",
		"surfaces_block",
		32767,
		surfaces_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		survival_mode_globals_block_group_block,
		"survival_mode_globals_block",
		"survival_mode_globals_block",
		1,
		survival_mode_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		survival_mode_wave_templates_block,
		"survival_mode_wave_templates",
		"survival_mode_wave_templates",
		128,
		survival_mode_wave_templates_struct);

	TAG_BLOCK_FROM_STRUCT(
		survival_wave_squad_block_block,
		"survival_wave_squad_block",
		"survival_wave_squad_block",
		12,
		survival_wave_squad_block);

	TAG_BLOCK_FROM_STRUCT(
		tag_block_index_block_block,
		"tag_block_index_block",
		"tag_block_index_block",
		1024,
		tag_block_index_block);

	TAG_BLOCK_FROM_STRUCT(
		tag_package_manifest_block_group_block,
		"tag_package_manifest_block",
		"tag_package_manifest_block",
		1,
		tag_package_manifest_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		tag_patch_block_block,
		"tag_patch_block",
		"tag_patch_block",
		8192,
		tag_patch_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		task_direction_block_v2_block,
		"task_direction_block_v2",
		"task_direction_block_v2",
		1,
		task_direction_block_v2_struct);

	TAG_BLOCK_FROM_STRUCT(
		task_direction_point_block_block,
		"task_direction_point_block",
		"task_direction_point_block",
		8,
		task_direction_point_block);

	TAG_BLOCK_FROM_STRUCT(
		task_distribution_block_block,
		"task_distribution_block",
		"task_distribution_block",
		16,
		task_distribution_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		tasks_block_block,
		"tasks_block",
		"tasks_block",
		100,
		tasks_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		teamdefinitionblock_block,
		"teamDefinitionBlock",
		"teamDefinitionBlock",
		8,
		teamdefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		template_instantiation_block_definition_block,
		"template_instantiation_block_definition",
		"template_instantiation_block_definition",
		8192,
		template_instantiation_block_definition);

	TAG_BLOCK_FROM_STRUCT(
		terminal_block_index_flags_block_block,
		"terminal_block_index_flags_block",
		"terminal_block_index_flags_block",
		256,
		terminal_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		terminal_page_block_definition_block,
		"terminal_page_block_definition",
		"terminal_page_block_definition",
		32,
		terminal_page_block_definition);

	TAG_BLOCK_FROM_STRUCT(
		text_value_pair_definition_block_group_block,
		"text_value_pair_definition_block",
		"text_value_pair_definition_block",
		1,
		text_value_pair_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		text_value_pair_reference_block_block,
		"text_value_pair_reference_block",
		"text_value_pair_reference_block",
		100,
		text_value_pair_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		tint_colors_block_block,
		"tint_colors_block",
		"tint_colors_block",
		1,
		tint_colors_block);

	TAG_BLOCK_FROM_STRUCT(
		tracerdefinitionblock_block,
		"tracerDefinitionBlock",
		"tracerDefinitionBlock",
		16,
		tracerdefinitionblock);

	TAG_BLOCK_FROM_STRUCT(
		tracer_system_block_group_block,
		"tracer_system_block",
		"tracer_system_block",
		1,
		tracer_system_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		tracking_type_block_block,
		"tracking_type_block",
		"tracking_type_block",
		16,
		tracking_type_block);

	TAG_BLOCK_FROM_STRUCT(
		transparent_planes_block_block,
		"transparent_planes_block",
		"transparent_planes_block",
		32768,
		transparent_planes_block);

	TAG_BLOCK_FROM_STRUCT(
		triangle_mapping_block_block,
		"triangle_mapping_block",
		"triangle_mapping_block",
		2147483647,
		triangle_mapping_block);

	TAG_BLOCK_FROM_STRUCT(
		triangle_mapping_per_mesh_block_block,
		"triangle_mapping_per_mesh_block",
		"triangle_mapping_per_mesh_block",
		8191,
		triangle_mapping_per_mesh_block);

	TAG_BLOCK_FROM_STRUCT(
		triangles_block_block,
		"triangles_block",
		"triangles_block",
		16384,
		triangles_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		triangulation_entry_block_block,
		"triangulation_entry_block",
		"triangulation_entry_block",
		1,
		triangulation_entry_block);

	TAG_BLOCK_FROM_STRUCT(
		triangulation_point_block_block,
		"triangulation_point_block",
		"triangulation_point_block",
		255,
		triangulation_point_block);

	TAG_BLOCK_FROM_STRUCT(
		triangulation_triangle_block_block,
		"triangulation_triangle_block",
		"triangulation_triangle_block",
		255,
		triangulation_triangle_block);

	TAG_BLOCK_FROM_STRUCT(
		trigger_references_block,
		"trigger_references",
		"trigger_references",
		10,
		trigger_references);

	TAG_BLOCK_FROM_STRUCT(
		trigger_volume_mopp_code_block_block,
		"trigger_volume_mopp_code_block",
		"trigger_volume_mopp_code_block",
		1,
		trigger_volume_mopp_code_block);

	TAG_BLOCK_FROM_STRUCT(
		trigger_volume_point_block_block,
		"trigger_volume_point_block",
		"trigger_volume_point_block",
		32,
		trigger_volume_point_block);

	TAG_BLOCK_FROM_STRUCT(
		trigger_volume_runtime_triangles_block_block,
		"trigger_volume_runtime_triangles_block",
		"trigger_volume_runtime_triangles_block",
		30,
		trigger_volume_runtime_triangles_block);

	TAG_BLOCK_FROM_STRUCT(
		triggers_block_block,
		"triggers_block",
		"triggers_block",
		256,
		triggers_block);

	TAG_BLOCK_FROM_STRUCT(
		turret_block_block,
		"turret_block",
		"turret_block",
		1,
		turret_block);

	TAG_BLOCK_FROM_STRUCT(
		underwater_proxies_block_block,
		"underwater_proxies_block",
		"underwater_proxies_block",
		512,
		underwater_proxies_block);

	TAG_BLOCK_FROM_STRUCT(
		underwater_setting_block_block,
		"underwater_setting_block",
		"underwater_setting_block",
		16,
		underwater_setting_block);

	TAG_BLOCK_FROM_STRUCT(
		unit_block_group_block,
		"unit_block",
		"unit_block",
		1,
		unit_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_camera_acceleration_displacement_block_block,
		"unit_camera_acceleration_displacement_block",
		"unit_camera_acceleration_displacement_block",
		1,
		unit_camera_acceleration_displacement_block);

	TAG_BLOCK_FROM_STRUCT(
		unit_camera_track_block_block,
		"unit_camera_track_block",
		"unit_camera_track_block",
		3,
		unit_camera_track_block);

	TAG_BLOCK_FROM_STRUCT(
		unit_postures_block_block,
		"unit_postures_block",
		"unit_postures_block",
		20,
		unit_postures_block);

	TAG_BLOCK_FROM_STRUCT(
		unit_screen_effect_block_block,
		"unit_screen_effect_block",
		"unit_screen_effect_block",
		4,
		unit_screen_effect_block);

	TAG_BLOCK_FROM_STRUCT(
		unit_seat_block_block,
		"unit_seat_block",
		"unit_seat_block",
		64,
		unit_seat_block);

	TAG_BLOCK_FROM_STRUCT(
		unit_trick_definition_block_block,
		"unit_trick_definition_block",
		"unit_trick_definition_block",
		8,
		unit_trick_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		unit_weapon_block_block,
		"unit_weapon_block",
		"unit_weapon_block",
		4,
		unit_weapon_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		user_data_block_block,
		"user_data_block",
		"user_data_block",
		64,
		user_data_block);

	TAG_BLOCK_FROM_STRUCT(
		user_edge_block_block,
		"user_edge_block",
		"user_edge_block",
		4096,
		user_edge_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_block_block,
		"user_hint_block",
		"user_hint_block",
		1,
		user_hint_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_climb_block_block,
		"user_hint_climb_block",
		"user_hint_climb_block",
		200,
		user_hint_climb_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_cookie_cutter_block_block,
		"user_hint_cookie_cutter_block",
		"user_hint_cookie_cutter_block",
		512,
		user_hint_cookie_cutter_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_flight_block_block,
		"user_hint_flight_block",
		"user_hint_flight_block",
		256,
		user_hint_flight_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_flight_point_block_block,
		"user_hint_flight_point_block",
		"user_hint_flight_point_block",
		10,
		user_hint_flight_point_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_flood_block_block,
		"user_hint_flood_block",
		"user_hint_flood_block",
		1,
		user_hint_flood_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_flood_sector_block_block,
		"user_hint_flood_sector_block",
		"user_hint_flood_sector_block",
		1000,
		user_hint_flood_sector_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_giant_block_block,
		"user_hint_giant_block",
		"user_hint_giant_block",
		1,
		user_hint_giant_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_giant_rail_block_block,
		"user_hint_giant_rail_block",
		"user_hint_giant_rail_block",
		1000,
		user_hint_giant_rail_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_giant_sector_block_block,
		"user_hint_giant_sector_block",
		"user_hint_giant_sector_block",
		1000,
		user_hint_giant_sector_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_jump_block_block,
		"user_hint_jump_block",
		"user_hint_jump_block",
		1000,
		user_hint_jump_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_line_segment_block_block,
		"user_hint_line_segment_block",
		"user_hint_line_segment_block",
		1000,
		user_hint_line_segment_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_navmesh_area_block_block,
		"user_hint_navmesh_area_block",
		"user_hint_navmesh_area_block",
		512,
		user_hint_navmesh_area_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_parallelogram_block_block,
		"user_hint_parallelogram_block",
		"user_hint_parallelogram_block",
		1000,
		user_hint_parallelogram_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_sector_point_block_block,
		"user_hint_sector_point_block",
		"user_hint_sector_point_block",
		32,
		user_hint_sector_point_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_spline_block_block,
		"user_hint_spline_block",
		"user_hint_spline_block",
		256,
		user_hint_spline_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_spline_control_point_block_block,
		"user_hint_spline_control_point_block",
		"user_hint_spline_control_point_block",
		32,
		user_hint_spline_control_point_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_spline_intersect_point_block_block,
		"user_hint_spline_intersect_point_block",
		"user_hint_spline_intersect_point_block",
		2,
		user_hint_spline_intersect_point_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_volume_avoidance_block,
		"user_hint_volume_avoidance",
		"user_hint_volume_avoidance",
		512,
		user_hint_volume_avoidance_struct);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_well_block_block,
		"user_hint_well_block",
		"user_hint_well_block",
		1000,
		user_hint_well_block);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_well_point_block_block,
		"user_hint_well_point_block",
		"user_hint_well_point_block",
		1000,
		user_hint_well_point_block);

	TAG_BLOCK_FROM_STRUCT(
		user_interface_globals_definition_block_group_block,
		"user_interface_globals_definition_block",
		"user_interface_globals_definition_block",
		1,
		user_interface_globals_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_interface_hud_globals_definition_block_group_block,
		"user_interface_hud_globals_definition_block",
		"user_interface_hud_globals_definition_block",
		1,
		user_interface_hud_globals_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_interface_shared_globals_definition_block_group_block,
		"user_interface_shared_globals_definition_block",
		"user_interface_shared_globals_definition_block",
		1,
		user_interface_shared_globals_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_interface_sounds_definition_block_group_block,
		"user_interface_sounds_definition_block",
		"user_interface_sounds_definition_block",
		1,
		user_interface_sounds_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		variant_globals_block_group_block,
		"variant_globals_block",
		"variant_globals_block",
		1,
		variant_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		variant_option_block_block,
		"variant_option_block",
		"variant_option_block",
		16,
		variant_option_block);

	TAG_BLOCK_FROM_STRUCT(
		variant_setting_edit_reference_block_block,
		"variant_setting_edit_reference_block",
		"variant_setting_edit_reference_block",
		205,
		variant_setting_edit_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		vector_hud_definition_block_group_block,
		"vector_hud_definition_block",
		"vector_hud_definition_block",
		1,
		vector_hud_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vectorart_asset_block_group_block,
		"vectorart_asset_block",
		"vectorart_asset_block",
		1,
		vectorart_asset_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		vehiclespawninfluenceblock_block,
		"vehicleSpawnInfluenceBlock",
		"vehicleSpawnInfluenceBlock",
		18,
		vehiclespawninfluenceblock);

	TAG_BLOCK_FROM_STRUCT(
		vehicle_block_group_block,
		"vehicle",
		"vehicle_block",
		1,
		vehicle_group$2);

	TAG_BLOCK_FROM_STRUCT(
		vehicle_block_index_flags_block_block,
		"vehicle_block_index_flags_block",
		"vehicle_block_index_flags_block",
		256,
		vehicle_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		vehicle_suspension_block_block,
		"vehicle_suspension_block",
		"vehicle_suspension_block",
		32,
		vehicle_suspension_block);

	TAG_BLOCK_FROM_STRUCT(
		vertexblock_block,
		"vertexBlock",
		"vertexBlock",
		77824,
		vertexblock);

	TAG_BLOCK_FROM_STRUCT(
		vertexbuffersblock_block,
		"vertexBuffersBlock",
		"vertexBuffersBlock",
		1,
		vertexbuffersblock_struct);

	TAG_BLOCK_FROM_STRUCT(
		vertexkeyblock_block,
		"vertexKeyBlock",
		"vertexKeyBlock",
		16777214,
		vertexkeyblock);

	TAG_BLOCK_FROM_STRUCT(
		vertexshaderuniquebindinginfoblock_block,
		"vertexShaderUniqueBindingInfoBlock",
		"vertexShaderUniqueBindingInfoBlock",
		10240,
		vertexshaderuniquebindinginfoblock);

	TAG_BLOCK_FROM_STRUCT(
		vertex_buffers_block_block,
		"vertex_buffers_block",
		"vertex_buffers_block",
		65535,
		vertex_buffers_block);

	TAG_BLOCK_FROM_STRUCT(
		vertex_entry_point_block_block,
		"vertex_entry_point_block",
		"vertex_entry_point_block",
		108,
		vertex_entry_point_block);

	TAG_BLOCK_FROM_STRUCT(
		vertex_shader_block_group_block,
		"vertex_shader_block",
		"vertex_shader_block",
		1,
		vertex_shader_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		vertex_types_block_block,
		"vertex_types_block",
		"vertex_types_block",
		54,
		vertex_types_block);

	TAG_BLOCK_FROM_STRUCT(
		vertex_types_block_block$2,
		"vertex_types_block",
		"vertex_types_block",
		1024,
		vertex_types_block$2);

	TAG_BLOCK_FROM_STRUCT(
		vertices_block_block,
		"vertices_block",
		"vertices_block",
		131072,
		vertices_block);

	TAG_BLOCK_FROM_STRUCT(
		visionmodebipedpassblock_block,
		"visionModeBipedPassBlock",
		"visionModeBipedPassBlock",
		3,
		visionmodebipedpassblock);

	TAG_BLOCK_FROM_STRUCT(
		visionmodebipedpassesblock_block,
		"visionModeBipedPassesBlock",
		"visionModeBipedPassesBlock",
		1,
		visionmodebipedpassesblock);

	TAG_BLOCK_FROM_STRUCT(
		visionmodebipedthreatblock_block,
		"visionModeBipedThreatBlock",
		"visionModeBipedThreatBlock",
		1,
		visionmodebipedthreatblock);

	TAG_BLOCK_FROM_STRUCT(
		visionmodeenvironmentpassblock_block,
		"visionModeEnvironmentPassBlock",
		"visionModeEnvironmentPassBlock",
		1,
		visionmodeenvironmentpassblock);

	TAG_BLOCK_FROM_STRUCT(
		visionmodeordnancecrosshairblock_block,
		"visionModeOrdnanceCrosshairBlock",
		"visionModeOrdnanceCrosshairBlock",
		1,
		visionmodeordnancecrosshairblock);

	TAG_BLOCK_FROM_STRUCT(
		visionmodeordnancevehiclepassblock_block,
		"visionModeOrdnanceVehiclePassBlock",
		"visionModeOrdnanceVehiclePassBlock",
		1,
		visionmodeordnancevehiclepassblock);

	TAG_BLOCK_FROM_STRUCT(
		visionmodeordnancevehicletypeblock_block,
		"visionModeOrdnanceVehicleTypeBlock",
		"visionModeOrdnanceVehicleTypeBlock",
		64,
		visionmodeordnancevehicletypeblock);

	TAG_BLOCK_FROM_STRUCT(
		visionmodescreenpassblock_block,
		"visionModeScreenPassBlock",
		"visionModeScreenPassBlock",
		1,
		visionmodescreenpassblock);

	TAG_BLOCK_FROM_STRUCT(
		vision_mode_block_group_block,
		"vision_mode_block",
		"vision_mode_block",
		1,
		vision_mode_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		visor_color_block_block,
		"visor_color_block",
		"visor_color_block",
		32,
		visor_color_block);

	TAG_BLOCK_FROM_STRUCT(
		vocalization_definitions_block_block,
		"vocalization_definitions_block",
		"vocalization_definitions_block",
		500,
		vocalization_definitions_block);

	TAG_BLOCK_FROM_STRUCT(
		vocalization_patterns_block_block,
		"vocalization_patterns_block",
		"vocalization_patterns_block",
		1000,
		vocalization_patterns_block);

	TAG_BLOCK_FROM_STRUCT(
		vocalization_stimuli_block_definition_block,
		"vocalization_stimuli_block_definition",
		"vocalization_stimuli_block_definition",
		6,
		vocalization_stimuli_block_definition);

	TAG_BLOCK_FROM_STRUCT(
		volume_samples_block_block,
		"volume_samples_block",
		"volume_samples_block",
		128,
		volume_samples_block);

	TAG_BLOCK_FROM_STRUCT(
		vtol_block_block,
		"vtol_block",
		"vtol_block",
		1,
		vtol_block);

	TAG_BLOCK_FROM_STRUCT(
		vtol_speed_interpolated_block_block,
		"vtol_speed_interpolated_block",
		"vtol_speed_interpolated_block",
		2,
		vtol_speed_interpolated_block);

	TAG_BLOCK_FROM_STRUCT(
		walker_physics_leg_block_block,
		"walker_physics_leg_block",
		"walker_physics_leg_block",
		32,
		walker_physics_leg_block);

	TAG_BLOCK_FROM_STRUCT(
		water_bounding_box_block_block,
		"water_bounding_box_block",
		"water_bounding_box_block",
		8191,
		water_bounding_box_block);

	TAG_BLOCK_FROM_STRUCT(
		water_physics_drag_properties_block_group_block,
		"water_physics_drag_properties_block",
		"water_physics_drag_properties_block",
		1,
		water_physics_drag_properties_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		water_physics_hull_surface_definition_block_block,
		"water_physics_hull_surface_definition_block",
		"water_physics_hull_surface_definition_block",
		64,
		water_physics_hull_surface_definition_block);

	TAG_BLOCK_FROM_STRUCT(
		water_physics_material_override_block,
		"water_physics_material_override",
		"water_physics_material_override",
		512,
		water_physics_material_override);

	TAG_BLOCK_FROM_STRUCT(
		wave_squad_specification_struct_block,
		"wave_squad_specification_struct",
		"wave_squad_specification_struct",
		16,
		wave_squad_specification_struct_struct);

	TAG_BLOCK_FROM_STRUCT(
		wave_template_block_group_block,
		"wave_template_block",
		"wave_template_block",
		1,
		wave_template_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		weaponscaleshotlevelstruct_block,
		"weaponScaleshotLevelStruct",
		"weaponScaleshotLevelStruct",
		10,
		weaponscaleshotlevelstruct);

	TAG_BLOCK_FROM_STRUCT(
		weaponscaleshotstruct_block,
		"weaponScaleshotStruct",
		"weaponScaleshotStruct",
		1,
		weaponscaleshotstruct);

	TAG_BLOCK_FROM_STRUCT(
		weaponspawninfluenceblock_block,
		"weaponSpawnInfluenceBlock",
		"weaponSpawnInfluenceBlock",
		48,
		weaponspawninfluenceblock);

	TAG_BLOCK_FROM_STRUCT(
		weapon_barrel_first_person_offset_block_block,
		"weapon_barrel_first_person_offset_block",
		"weapon_barrel_first_person_offset_block",
		3,
		weapon_barrel_first_person_offset_block);

	TAG_BLOCK_FROM_STRUCT(
		weapon_barrel_function_block_block,
		"weapon_barrel_function_block",
		"weapon_barrel_function_block",
		1,
		weapon_barrel_function_block);

	TAG_BLOCK_FROM_STRUCT(
		weapon_barrels_block,
		"weapon_barrels",
		"weapon_barrels",
		2,
		weapon_barrels);

	TAG_BLOCK_FROM_STRUCT(
		weapon_block_group_block,
		"weapon_block",
		"weapon_block",
		1,
		weapon_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		weapon_block_index_flags_block_block,
		"weapon_block_index_flags_block",
		"weapon_block_index_flags_block",
		256,
		weapon_block_index_flags_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		weapon_class_block_block,
		"weapon_class_block",
		"weapon_class_block",
		64,
		weapon_class_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		weapon_class_lookup_block_block,
		"weapon_class_lookup_block",
		"weapon_class_lookup_block",
		64,
		weapon_class_lookup_block);

	TAG_BLOCK_FROM_STRUCT(
		weapon_distribution_block_block,
		"weapon_distribution_block",
		"weapon_distribution_block",
		8,
		weapon_distribution_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		weapon_first_person_interface_block_block,
		"weapon_first_person_interface_block",
		"weapon_first_person_interface_block",
		2,
		weapon_first_person_interface_block);

	TAG_BLOCK_FROM_STRUCT(
		weapon_palette_choice_block_block,
		"weapon_palette_choice_block",
		"weapon_palette_choice_block",
		8,
		weapon_palette_choice_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		weapon_ref_choice_block_block,
		"weapon_ref_choice_block",
		"weapon_ref_choice_block",
		8,
		weapon_ref_choice_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		weapon_screen_effect_block_block,
		"weapon_screen_effect_block",
		"weapon_screen_effect_block",
		4,
		weapon_screen_effect_block);

	TAG_BLOCK_FROM_STRUCT(
		weapon_trigger_charging_fire_fraction_block,
		"weapon_trigger_charging_fire_fraction",
		"weapon_trigger_charging_fire_fraction",
		16,
		weapon_trigger_charging_fire_fraction);

	TAG_BLOCK_FROM_STRUCT(
		weapon_triggers_block,
		"weapon_triggers",
		"weapon_triggers",
		2,
		weapon_triggers);

	TAG_BLOCK_FROM_STRUCT(
		weapon_type_block_block,
		"weapon_type_block",
		"weapon_type_block",
		64,
		weapon_type_block_struct);

	TAG_BLOCK_FROM_STRUCT(
		weather_globals_block_group_block,
		"weather_globals_block",
		"weather_globals_block",
		1,
		weather_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		wentness_bit_vector_block,
		"wentness_bit_vector",
		"wentness_bit_vector",
		65535,
		wentness_bit_vector);

	TAG_BLOCK_FROM_STRUCT(
		wentness_byte_vector_block,
		"wentness_byte_vector",
		"wentness_byte_vector",
		65535,
		wentness_byte_vector);

	TAG_BLOCK_FROM_STRUCT(
		widget_reference_block_block,
		"widget_reference_block",
		"widget_reference_block",
		1024,
		widget_reference_block);

	TAG_BLOCK_FROM_STRUCT(
		wind_block_group_block,
		"wind_block",
		"wind_block",
		1,
		wind_block);

	TAG_BLOCK_FROM_STRUCT(
		wolverine_block_block,
		"wolverine_block",
		"wolverine_block",
		1,
		wolverine_block);

	TAG_BLOCK_FROM_STRUCT(
		zone_block_block,
		"zone_block",
		"zone_block",
		128,
		zone_block);

	TAG_ARRAY_FROM_STRUCT(
		animation_velocity_boundaries$2,
		"animation_velocity_boundaries",
		8,
		animation_velocity_boundaries_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		area_cluster_occupancy_bitvector_array$2,
		"area_cluster_occupancy_bitvector_array",
		8,
		area_cluster_occupancy_bitvector_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		data_hash_definition$2,
		"data_hash_definition",
		20,
		data_hash_definition_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		dual_vmf_terms$2,
		"dual_vmf_terms",
		16,
		dual_vmf_terms_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		error_point_node_index_array$2,
		"error_point_node_index_array",
		4,
		error_point_node_index_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		error_point_node_weight_array$2,
		"error_point_node_weight_array",
		4,
		error_point_node_weight_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		error_report_line_point_array$2,
		"error_report_line_point_array",
		2,
		error_report_line_point_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		error_report_quad_point_array$2,
		"error_report_quad_point_array",
		4,
		error_report_quad_point_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		error_report_triangle_point_array$2,
		"error_report_triangle_point_array",
		3,
		error_report_triangle_point_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		file_location_indexes_array_definition$2,
		"file_location_indexes_array_definition",
		3,
		file_location_indexes_array_definition_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		g_cinematicshotflagarray$2,
		"g_cinematicShotFlagArray",
		2,
		g_cinematicshotflagarray);

	TAG_ARRAY_FROM_STRUCT(
		g_node_flag_storage_array$2,
		"g_node_flag_storage_array",
		8,
		g_node_flag_storage_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		game_engine_team_options_team_block$2,
		"game_engine_team_options_team_block",
		8,
		game_engine_team_options_team_block_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		gpu_color_sub_array$2,
		"gpu_color_sub_array",
		4,
		gpu_color_sub_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		gpu_function_sub_array$2,
		"gpu_function_sub_array",
		16,
		gpu_function_sub_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		gpu_property_sub_array$2,
		"gpu_property_sub_array",
		4,
		gpu_property_sub_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		gpu_single_constant_register_array$2,
		"gpu_single_constant_register_array",
		4,
		gpu_single_constant_register_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		half_sh_terms$2,
		"half_sh_terms",
		9,
		half_sh_terms_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		havok2_list_child_shape_storage$2,
		"havok2_list_child_shape_storage",
		4,
		havok2_list_child_shape_storage_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		havok2_rotated_vertices_storage$2,
		"havok2_rotated_vertices_storage",
		3,
		havok2_rotated_vertices_storage_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		location_offsets_array_definition$2,
		"location_offsets_array_definition",
		3,
		location_offsets_array_definition_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		model_state_permutation_index_array$2,
		"model_state_permutation_index_array",
		5,
		model_state_permutation_index_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		multi_sphere_vector_storage$2,
		"multi_sphere_vector_storage",
		8,
		multi_sphere_vector_storage_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		multilingual_unicode_string_list_language_pack_offsets$2,
		"multilingual_unicode_string_list_language_pack_offsets",
		17,
		multilingual_unicode_string_list_language_pack_offsets_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		node_indices_array$2,
		"node_indices_array",
		4,
		node_indices_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		node_weights_complete_array$2,
		"node_weights_complete_array",
		4,
		node_weights_complete_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		node_weights_implicit_array$2,
		"node_weights_implicit_array",
		3,
		node_weights_implicit_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		object_salt_storage_array$2,
		"object_salt_storage_array",
		32,
		object_salt_storage_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		radiance_transfer_matrix$2,
		"radiance_transfer_matrix",
		81,
		radiance_transfer_matrix_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		real_rgb_lightprobe_array$2,
		"real_rgb_lightprobe_array",
		27,
		real_rgb_lightprobe_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		render_interleaved_texture_array_definition,
		"render_interleaved_texture_array_definition",
		2,
		render_texture_format_definition);

	TAG_ARRAY_FROM_STRUCT(
		resource_hash_definition$2,
		"resource_hash_definition",
		20,
		resource_hash_definition_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		resource_layout_compressed_size_array_definition$2,
		"resource_layout_compressed_size_array_definition",
		3,
		resource_layout_compressed_size_array_definition_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		resource_layout_memory_size_array_definition$2,
		"resource_layout_memory_size_array_definition",
		3,
		resource_layout_memory_size_array_definition_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		resource_usage_page_size_array_definition$2,
		"resource_usage_page_size_array_definition",
		3,
		resource_usage_page_size_array_definition_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		runtime_queryable_properties$2,
		"runtime_queryable_properties",
		28,
		runtime_queryable_properties_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		runtime_queryable_properties$4,
		"runtime_queryable_properties",
		12,
		runtime_queryable_properties$3);

	TAG_ARRAY_FROM_STRUCT(
		runtime_region_index_array$2,
		"runtime_region_index_array",
		32,
		runtime_region_index_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		scenariofloatingshadowcascadesettingsarray$2,
		"scenarioFloatingShadowCascadeSettingsArray",
		4,
		scenariofloatingshadowcascadesettingsarray);

	TAG_ARRAY_FROM_STRUCT(
		scenario_trigger_volume_parameter_storage_array$2,
		"scenario_trigger_volume_parameter_storage_array",
		15,
		scenario_trigger_volume_parameter_storage_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		screen_transform_basis_array_definition$2,
		"screen_transform_basis_array_definition",
		9,
		screen_transform_basis_array_definition_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		sublocation_table_indexes_array_definition$2,
		"sublocation_table_indexes_array_definition",
		3,
		sublocation_table_indexes_array_definition_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		super_node_mapping_index_array$2,
		"super_node_mapping_index_array",
		31,
		super_node_mapping_index_array_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		supported_bitfield$2,
		"supported_bitfield",
		8,
		supported_bitfield_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		tag_resource_alignment_bits_array_definition$2,
		"tag_resource_alignment_bits_array_definition",
		3,
		tag_resource_alignment_bits_array_definition_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		vertex_buffer_indices_word_array$2,
		"vertex_buffer_indices_word_array",
		9,
		vertex_buffer_indices_word_array_struct_definition);

	#define ANIMGRAPHDEPENDENCYBLOCK_ID { 0x39127510, 0x2A154795, 0xB625EF56, 0xB30C28 }
	TAG_STRUCT(
		animgraphdependencyblock,
		"AnimGraphDependencyBlock",
		"AnimGraphDependencyBlock",
		"s_animgraphdependencyblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMGRAPHDEPENDENCYBLOCK_ID)
	{
		{ _field_tag_reference, "graph", &model_animation_graph_group_reference$3 },
		{ _field_terminator }
	};

	TAG_REFERENCE(model_animation_graph_group_reference$3, MODEL_ANIMATION_GRAPH_TAG);

	#define BIPEDAIMINGJOINTFIXUPBLOCK_ID { 0xABDDE304, 0x116F4CA8, 0x908F407E, 0x115097A5 }
	TAG_STRUCT(
		bipedaimingjointfixupblock,
		"BipedAimingJointFixupBlock",
		"BipedAimingJointFixupBlock",
		"s_bipedaimingjointfixupblock",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPEDAIMINGJOINTFIXUPBLOCK_ID)
	{
		{ _field_string_id, "rotation_node", nullptr, "bone to rotate to align marker" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_angle_bounds, "yaw bounds", nullptr, "degrees" },
		{ _field_angle_bounds, "pitch bounds", nullptr, "degrees" },
		{ _field_real, "max yaw velocity", nullptr, "degrees per second" },
		{ _field_real, "max pitch velocity", nullptr, "degrees per second" },
		{ _field_terminator }
	};

	#define BIPEDMOVEMENTHIPLEANINGSTRUCT_ID { 0x7BB8ADF6, 0x878942AB, 0xB4814282, 0x2B52E6CB }
	TAG_STRUCT(
		bipedmovementhipleaningstruct,
		"BipedMovementHipLeaningStruct",
		"BipedMovementHipLeaningStruct",
		"s_bipedmovementhipleaningstruct",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPEDMOVEMENTHIPLEANINGSTRUCT_ID)
	{
		FIELD_GROUP_BEGIN("Movement Hip Leaning"),
		FIELD_EXPLANATION("Movement Hip Leaning", "Allows a biped to lean based on movement."),
		{ _field_real, "prediction seconds", nullptr, "predict ahead to determine lean. 0= off, more time=more lean" },
		{ _field_real, "max lean angle", nullptr, "(degrees) maximum lean amount" },
		{ _field_real_fraction, "max vertical dip", nullptr, "(fraction of leg length)" },
		{ _field_real, "max lean angle sine", nullptr, "set on post-process, don't edit", FIELD_FLAG_UNKNOWN0 | FIELD_FLAG_READ_ONLY },
		{ _field_real, "max lean angle cosine", nullptr, "set on post-process, don't edit", FIELD_FLAG_UNKNOWN0 | FIELD_FLAG_READ_ONLY },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define BIPEDSOUNDRTPCBLOCK_ID { 0x8FE0C5DC, 0x1A32451A, 0x9C2DE06C, 0x44EC2C23 }
	TAG_STRUCT(
		bipedsoundrtpcblock,
		"BipedSoundRTPCBlock",
		"BipedSoundRTPCBlock",
		"s_bipedsoundrtpcblock",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPEDSOUNDRTPCBLOCK_ID)
	{
		{ _field_long_block_index, "Attachment Index", "Sound attachment to affect - leave empty for main body", &global_object_attachment_block_block },
		{ _field_string_id, "Function", "Function to drive the RTPC" },
		{ _field_string_id, "RTPC Name", "WWise RTPC string name" },
		{ _field_terminator }
	};

	#define BIPEDSOUNDSWEETENERBLOCK_ID { 0x1E90D57C, 0xEB4945F3, 0x9158FCF1, 0x3B53CA73 }
	TAG_STRUCT(
		bipedsoundsweetenerblock,
		"BipedSoundSweetenerBlock",
		"BipedSoundSweetenerBlock",
		"s_bipedsoundsweetenerblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPEDSOUNDSWEETENERBLOCK_ID)
	{
		{ _field_string_id, "Function", "Function to trigger the sweetener" },
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "Switch point", "value of the function (between 0 and 1) where the sound is triggered" },
		{ _field_long_integer, "Mode", "0 for triggering while function is decreasing, 1 for increasing (more modes to come?)" },
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(sound_combiner_group_sound_old_group_sound_group_reference, TAG_REFERENCE_FLAG_RESOLVED_BY_GAME)
	{
		SOUND_COMBINER_TAG,
		SOUND_OLD_TAG,
		SOUND_TAG,
		INVALID_TAG
	};

	#define COMMENTSBLOCK_ID { 0x947B5984, 0x2C6C4B19, 0x8087CA46, 0x21DD6749 }
	TAG_STRUCT(
		commentsblock,
		"CommentsBlock",
		"CommentsBlock",
		"s_commentsblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMMENTSBLOCK_ID)
	{
		{ _field_char_integer, "char" },
		{ _field_terminator }
	};

	#define COMPOSITEAXISDEFINITION_ID { 0x168DE62E, 0x9B0A4844, 0x8A388EE4, 0xE440F78E }
	TAG_STRUCT(
		compositeaxisdefinition,
		"CompositeAxisDefinition",
		"CompositeAxisDefinition",
		"s_compositeaxisdefinition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPOSITEAXISDEFINITION_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "animation source" },
		FIELD_CUSTOM("value", _tag_field_custom_type_custom_object_function_field),
		{ _field_string_id, "input function" },
		{ _field_real_bounds, "animation bounds" },
		{ _field_real_bounds, "input bounds" },
		{ _field_real_bounds, "clamp bounds" },
		{ _field_real, "blend limit" },
		{ _field_block, "dead zones", &compositedeadzonedefinition_block },
		{ _field_char_integer, "divisions" },
		{ _field_char_integer, "priority" },
		{ _field_char_integer, "update" },
		{ _field_char_integer, "functionIndex" },
		{ _field_long_flags, "flags", &compositeaxisflags },
		{ _field_terminator }
	};

	STRINGS(compositeaxisflags)
	{
		"wrapped",
		"clamped"
	};
	STRING_LIST(compositeaxisflags, compositeaxisflags_strings, _countof(compositeaxisflags_strings));

	#define COMPOSITEDEADZONEDEFINITION_ID { 0x48E34FCA, 0x2C9E462F, 0xAD47F2DC, 0xFFF4A197 }
	TAG_STRUCT(
		compositedeadzonedefinition,
		"CompositeDeadZoneDefinition",
		"CompositeDeadZoneDefinition",
		"s_compositedeadzonedefinition",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPOSITEDEADZONEDEFINITION_ID)
	{
		{ _field_real_bounds, "bounds" },
		{ _field_real, "rate" },
		{ _field_real, "center" },
		{ _field_real, "radius" },
		{ _field_real, "amount" },
		{ _field_long_integer, "delay" },
		{ _field_terminator }
	};

	#define COMPOSITEENTRYDEFINITION_ID { 0x76AF9875, 0xE0254663, 0xA0BF321B, 0xEEE3D79 }
	TAG_STRUCT(
		compositeentrydefinition,
		"CompositeEntryDefinition",
		"CompositeEntryDefinition",
		"s_compositeentrydefinition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPOSITEENTRYDEFINITION_ID)
	{
		{ _field_string_id, "source" },
		{ _field_block, "values", &compositeentryvaluedefinition_block },
		{ _field_long_integer, "overridden" },
		{ _field_short_integer, "animIndex" },
		{ _field_char_integer, "slideAxis" },
		FIELD_PAD("PAD", 1),
		{ _field_terminator }
	};

	#define COMPOSITEENTRYVALUEDEFINITION_ID { 0x2C6E4B32, 0xE3824A07, 0xB95A6F5D, 0x1FF851B6 }
	TAG_STRUCT(
		compositeentryvaluedefinition,
		"CompositeEntryValueDefinition",
		"CompositeEntryValueDefinition",
		"s_compositeentryvaluedefinition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPOSITEENTRYVALUEDEFINITION_ID)
	{
		{ _field_real, "value" },
		{ _field_terminator }
	};

	#define COMPOSITEPHASESETDEFINITION_ID { 0x1C6DD71A, 0x7ED4420, 0x97E43A00, 0x5F2604DA }
	TAG_STRUCT(
		compositephasesetdefinition,
		"CompositePhaseSetDefinition",
		"CompositePhaseSetDefinition",
		"s_compositephasesetdefinition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPOSITEPHASESETDEFINITION_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "timing source" },
		{ _field_block, "sync points", &synckeyblock_block },
		{ _field_data, "sync frames", &syncframesdefinition },
		{ _field_data, "facets", &facetdefinition },
		{ _field_data, "neighbors", &neighborsdefinition },
		{ _field_data, "containment", &containmentdefinition },
		{ _field_data, "example grid", &griddefinition },
		{ _field_real_bounds, "normalized bounds" },
		{ _field_char_integer, "offset" },
		FIELD_PAD("PAD", 1),
		{ _field_short_integer, "timingAnimIndex" },
		{ _field_terminator }
	};

	#define COOKIEPURCHASEAPPEARANCEDEFINITIONBLOCK_ID { 0x8A8AC979, 0x87C947CB, 0x9A2894E1, 0x6B04E6D1 }
	TAG_STRUCT(
		cookiepurchaseappearancedefinitionblock,
		"CookiePurchaseAppearanceDefinitionBlock",
		"CookiePurchaseAppearanceDefinitionBlock",
		"s_cookiepurchaseappearancedefinitionblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOKIEPURCHASEAPPEARANCEDEFINITIONBLOCK_ID)
	{
		{ _field_string_id, "purchase id" },
		{ _field_string_id, "display name" },
		{ _field_string_id, "display description" },
		{ _field_string_id, "Exit Experience Aggregate Group Name" },
		{ _field_byte_flags, "flags", &cookie_purchase_flags },
		FIELD_PAD("pad1", 3),
		{ _field_tag_reference, "display bitmap", &bitmap_group_reference$2 },
		{ _field_long_integer, "sprite index" },
		{ _field_tag_reference, "detail display bitmap", &bitmap_group_reference$2 },
		{ _field_long_integer, "cookie cost" },
		FIELD_GROUP_BEGIN("Prerequisites for visibility"),
		{ _field_struct, "visible prerequisites", &purchaseprerequisitesunifieddefinitionblock },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Prerequisites for purchasability"),
		{ _field_struct, "purchasable prerequisites", &purchaseprerequisitesunifieddefinitionblock },
		FIELD_GROUP_END(),
		{ _field_struct, "purchase player appearance", &purchaseplayerappearancestruct },
		{ _field_terminator }
	};

	STRINGS(cookie_purchase_flags)
	{
		"auto buy#this item is automatically given to the player when they meet the conditions",
		"default#this item will appear as \'worn\' when the player isn\'t wearing any item (for \'default\' items)",
		"doesn\'t count toward percent complete#this item will NOT count toward an overall completion value",
		"doesn\'t count toward new items#this item is never \'new\'",
		"lsp_authoritative#cannot be purchased locally, only LSP can set"
	};
	STRING_LIST(cookie_purchase_flags, cookie_purchase_flags_strings, _countof(cookie_purchase_flags_strings));

	TAG_REFERENCE(bitmap_group_reference$2, BITMAP_TAG);

	#define COOKIEPURCHASEAPPEARANCEDEFINITIONREFERENCEBLOCK_ID { 0x43E90CB6, 0x142B4894, 0x91159BF3, 0x27451D8B }
	TAG_STRUCT(
		cookiepurchaseappearancedefinitionreferenceblock,
		"CookiePurchaseAppearanceDefinitionReferenceBlock",
		"CookiePurchaseAppearanceDefinitionReferenceBlock",
		"s_cookiepurchaseappearancedefinitionreferenceblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOKIEPURCHASEAPPEARANCEDEFINITIONREFERENCEBLOCK_ID)
	{
		{ _field_struct, "purchasable item reference", &purchaseappearancedefinitionreferencestruct },
		{ _field_terminator }
	};

	#define COOKIEPURCHASEEXTERNALUNLOCKABLEBLOCKAPPEARANCEDEFINITION_ID { 0x42248106, 0x55394468, 0xB28B8E1C, 0x77C7FB }
	TAG_STRUCT(
		cookiepurchaseexternalunlockableblockappearancedefinition,
		"CookiePurchaseExternalUnlockableBlockAppearanceDefinition",
		"CookiePurchaseExternalUnlockableBlockAppearanceDefinition",
		"s_cookiepurchaseexternalunlockableblockappearancedefinition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOKIEPURCHASEEXTERNALUNLOCKABLEBLOCKAPPEARANCEDEFINITION_ID)
	{
		{ _field_block, "purchasable items", &cookiepurchaseappearancedefinitionreferenceblock_block },
		{ _field_terminator }
	};

	#define COOKIEPURCHASEEXTERNALUNLOCKABLEBLOCKLOADOUTDEFINITION_ID { 0x5DB72ECF, 0xDA3F49B1, 0x82D4E463, 0x3D71B0C2 }
	TAG_STRUCT(
		cookiepurchaseexternalunlockableblockloadoutdefinition,
		"CookiePurchaseExternalUnlockableBlockLoadoutDefinition",
		"CookiePurchaseExternalUnlockableBlockLoadoutDefinition",
		"s_cookiepurchaseexternalunlockableblockloadoutdefinition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOKIEPURCHASEEXTERNALUNLOCKABLEBLOCKLOADOUTDEFINITION_ID)
	{
		{ _field_block, "purchasable items", &cookiepurchaseloadoutdefinitionreferenceblock_block },
		{ _field_terminator }
	};

	#define COOKIEPURCHASEEXTERNALUNLOCKABLEBLOCKORDNANCEDEFINITION_ID { 0xF81C40BE, 0x6C4C4705, 0xBD553B5E, 0x1C80ABF4 }
	TAG_STRUCT(
		cookiepurchaseexternalunlockableblockordnancedefinition,
		"CookiePurchaseExternalUnlockableBlockOrdnanceDefinition",
		"CookiePurchaseExternalUnlockableBlockOrdnanceDefinition",
		"s_cookiepurchaseexternalunlockableblockordnancedefinition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOKIEPURCHASEEXTERNALUNLOCKABLEBLOCKORDNANCEDEFINITION_ID)
	{
		{ _field_block, "purchasable items", &cookiepurchaseordnancedefinitionreferenceblock_block },
		{ _field_terminator }
	};

	#define COOKIEPURCHASEFAMILYAPPEARANCEDEFINITIONBLOCK_ID { 0x1250D90C, 0xC1CE47A6, 0x928F09B8, 0x298F667 }
	TAG_STRUCT(
		cookiepurchasefamilyappearancedefinitionblock,
		"CookiePurchaseFamilyAppearanceDefinitionBlock",
		"CookiePurchaseFamilyAppearanceDefinitionBlock",
		"s_cookiepurchasefamilyappearancedefinitionblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOKIEPURCHASEFAMILYAPPEARANCEDEFINITIONBLOCK_ID)
	{
		{ _field_string_id, "display title", "If this is left blank, this family will be treated as a list of top-level items (items w/o a family, e.g. visor tints)." },
		{ _field_string_id, "display_description" },
		{ _field_tag_reference, "display bitmap", &bitmap_group_reference$2 },
		{ _field_long_integer, "sprite index" },
		{ _field_block, "purchasable items", &cookiepurchaseappearancedefinitionreferenceblock_block },
		{ _field_terminator }
	};

	#define COOKIEPURCHASEFAMILYLOADOUTDEFINITIONBLOCK_ID { 0x77DD9D2E, 0x4AA34EB4, 0x91DD8395, 0x5BF92C69 }
	TAG_STRUCT(
		cookiepurchasefamilyloadoutdefinitionblock,
		"CookiePurchaseFamilyLoadoutDefinitionBlock",
		"CookiePurchaseFamilyLoadoutDefinitionBlock",
		"s_cookiepurchasefamilyloadoutdefinitionblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOKIEPURCHASEFAMILYLOADOUTDEFINITIONBLOCK_ID)
	{
		{ _field_string_id, "display title", "If this is left blank, this family will be treated as a list of top-level items (items w/o a family, e.g. visor tints)." },
		{ _field_string_id, "display_description" },
		{ _field_tag_reference, "display bitmap", &bitmap_group_reference$2 },
		{ _field_long_integer, "sprite index" },
		{ _field_block, "purchasable items", &cookiepurchaseloadoutdefinitionreferenceblock_block },
		{ _field_terminator }
	};

	#define COOKIEPURCHASEFAMILYORDNANCEDEFINITIONBLOCK_ID { 0xA9BA8BFF, 0x4FB34205, 0xBC2111A2, 0x7A9367A2 }
	TAG_STRUCT(
		cookiepurchasefamilyordnancedefinitionblock,
		"CookiePurchaseFamilyOrdnanceDefinitionBlock",
		"CookiePurchaseFamilyOrdnanceDefinitionBlock",
		"s_cookiepurchasefamilyordnancedefinitionblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOKIEPURCHASEFAMILYORDNANCEDEFINITIONBLOCK_ID)
	{
		{ _field_string_id, "display title", "If this is left blank, this family will be treated as a list of top-level items (items w/o a family, e.g. visor tints)." },
		{ _field_string_id, "display_description" },
		{ _field_tag_reference, "display bitmap", &bitmap_group_reference$2 },
		{ _field_long_integer, "sprite index" },
		{ _field_block, "purchasable items", &cookiepurchaseordnancedefinitionreferenceblock_block },
		{ _field_terminator }
	};

	#define COOKIEPURCHASELOADOUTDEFINITIONBLOCK_ID { 0x21D3D862, 0xCB924A2B, 0xBF1F047B, 0x8FB5A80A }
	TAG_STRUCT(
		cookiepurchaseloadoutdefinitionblock,
		"CookiePurchaseLoadoutDefinitionBlock",
		"CookiePurchaseLoadoutDefinitionBlock",
		"s_cookiepurchaseloadoutdefinitionblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOKIEPURCHASELOADOUTDEFINITIONBLOCK_ID)
	{
		{ _field_string_id, "purchase id" },
		{ _field_string_id, "display name" },
		{ _field_string_id, "display description" },
		{ _field_string_id, "Exit Experience Aggregate Group Name" },
		{ _field_byte_flags, "flags", &cookie_purchase_flags },
		FIELD_PAD("pad1", 3),
		{ _field_tag_reference, "display bitmap", &bitmap_group_reference$2 },
		{ _field_long_integer, "sprite index" },
		{ _field_tag_reference, "detail display bitmap", &bitmap_group_reference$2 },
		{ _field_long_integer, "cookie cost" },
		FIELD_GROUP_BEGIN("Prerequisites for visibility"),
		{ _field_struct, "visible prerequisites", &purchaseprerequisitesunifieddefinitionblock },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Prerequisites for purchasability"),
		{ _field_struct, "purchasable prerequisites", &purchaseprerequisitesunifieddefinitionblock },
		FIELD_GROUP_END(),
		{ _field_string_id, "icon string id" },
		{ _field_struct, "purchase player loadout", &purchaseplayerloadoutstruct },
		{ _field_terminator }
	};

	#define COOKIEPURCHASELOADOUTDEFINITIONREFERENCEBLOCK_ID { 0x94040ED2, 0x27BB4352, 0x929211F9, 0x7A7241E3 }
	TAG_STRUCT(
		cookiepurchaseloadoutdefinitionreferenceblock,
		"CookiePurchaseLoadoutDefinitionReferenceBlock",
		"CookiePurchaseLoadoutDefinitionReferenceBlock",
		"s_cookiepurchaseloadoutdefinitionreferenceblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOKIEPURCHASELOADOUTDEFINITIONREFERENCEBLOCK_ID)
	{
		{ _field_struct, "purchasable item reference", &purchaseloadoutdefinitionreferencestruct },
		{ _field_terminator }
	};

	#define COOKIEPURCHASEORDNANCEDEFINITIONBLOCK_ID { 0x47C9F1A5, 0x3D984016, 0x9C9F2C7A, 0xAB4B242A }
	TAG_STRUCT(
		cookiepurchaseordnancedefinitionblock,
		"CookiePurchaseOrdnanceDefinitionBlock",
		"CookiePurchaseOrdnanceDefinitionBlock",
		"s_cookiepurchaseordnancedefinitionblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOKIEPURCHASEORDNANCEDEFINITIONBLOCK_ID)
	{
		{ _field_string_id, "purchase id" },
		{ _field_string_id, "display name" },
		{ _field_string_id, "display description" },
		{ _field_string_id, "Exit Experience Aggregate Group Name" },
		{ _field_byte_flags, "flags", &cookie_purchase_flags },
		FIELD_PAD("pad1", 3),
		{ _field_tag_reference, "display bitmap", &bitmap_group_reference$2 },
		{ _field_long_integer, "sprite index" },
		{ _field_tag_reference, "detail display bitmap", &bitmap_group_reference$2 },
		{ _field_long_integer, "cookie cost" },
		FIELD_GROUP_BEGIN("Prerequisites for visibility"),
		{ _field_struct, "visible prerequisites", &purchaseprerequisitesunifieddefinitionblock },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Prerequisites for purchasability"),
		{ _field_struct, "purchasable prerequisites", &purchaseprerequisitesunifieddefinitionblock },
		FIELD_GROUP_END(),
		{ _field_struct, "purchase player ordnance", &purchaseplayerordnancestruct },
		{ _field_terminator }
	};

	#define COOKIEPURCHASEORDNANCEDEFINITIONREFERENCEBLOCK_ID { 0xA3DD0BBB, 0xF3E84731, 0xB2EE9024, 0x8B6BC514 }
	TAG_STRUCT(
		cookiepurchaseordnancedefinitionreferenceblock,
		"CookiePurchaseOrdnanceDefinitionReferenceBlock",
		"CookiePurchaseOrdnanceDefinitionReferenceBlock",
		"s_cookiepurchaseordnancedefinitionreferenceblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOKIEPURCHASEORDNANCEDEFINITIONREFERENCEBLOCK_ID)
	{
		{ _field_struct, "purchasable item reference", &purchaseordnancedefinitionreferencestruct },
		{ _field_terminator }
	};

	#define EQUIPMENTSOUNDRTPCBLOCK_ID { 0x5C15BB60, 0x3F0D44C2, 0x9CCAF913, 0xAFF4B21B }
	TAG_STRUCT(
		equipmentsoundrtpcblock,
		"EquipmentSoundRTPCBlock",
		"EquipmentSoundRTPCBlock",
		"s_equipmentsoundrtpcblock",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTSOUNDRTPCBLOCK_ID)
	{
		{ _field_long_block_index, "Attachment Index", "Sound attachment to affect", &global_object_attachment_block_block },
		{ _field_string_id, "Function", "Function to drive the RTPC" },
		{ _field_string_id, "RTPC Name", "WWise RTPC string name" },
		{ _field_long_integer, "RTPC name hash value" },
		{ _field_terminator }
	};

	#define EQUIPMENTSOUNDSWEETENERBLOCK_ID { 0x4F774A69, 0xC6AC4AF2, 0xA2B9AD3E, 0x91289963 }
	TAG_STRUCT(
		equipmentsoundsweetenerblock,
		"EquipmentSoundSweetenerBlock",
		"EquipmentSoundSweetenerBlock",
		"s_equipmentsoundsweetenerblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTSOUNDSWEETENERBLOCK_ID)
	{
		{ _field_string_id, "Function", "Function to trigger the sweetener" },
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "Switch point", "value of the function (between 0 and 1) where the sound is triggered" },
		{ _field_long_integer, "Mode", "0 for triggering while function is decreasing, 1 for increasing (more modes to come?)" },
		{ _field_terminator }
	};

	#define FACEUSERDATABLOCK_ID { 0x40F96E3C, 0xA1EA4642, 0x9824E997, 0x515857CB }
	TAG_STRUCT(
		faceuserdatablock,
		"FaceUserDataBlock",
		"FaceUserDataBlock",
		"s_faceuserdatablock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FACEUSERDATABLOCK_ID)
	{
		{ _field_short_integer, "m_flags" },
		FIELD_PAD("pad", 2),
		{ _field_real, "currentMinPathDistance" },
		{ _field_real, "currentMinTargetApproachDistance" },
		{ _field_terminator }
	};

	#define FALLBACKHOPPERFILEBLOCK_ID { 0x6FD2A8F3, 0xBFB24154, 0x8162DC58, 0x1D7FC254 }
	TAG_STRUCT(
		fallbackhopperfileblock,
		"FallbackHopperFileBlock",
		"FallbackHopperFileBlock",
		"s_fallbackhopperfileblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FALLBACKHOPPERFILEBLOCK_ID)
	{
		{ _field_data, "file_data", &fallbackhopperfiledata },
		{ _field_long_string, "filename" },
		{ _field_terminator }
	};

	#define GAMEENGINEFIREFIGHTPLAYERGOALPROPERTIESBLOCK_ID { 0xF636456E, 0xCBB041F5, 0x94120EAB, 0x4B4CC2E }
	TAG_STRUCT(
		gameenginefirefightplayergoalpropertiesblock,
		"GameEngineFirefightPlayerGoalPropertiesBlock",
		"GameEngineFirefightPlayerGoalPropertiesBlock",
		"s_gameenginefirefightplayergoalpropertiesblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAMEENGINEFIREFIGHTPLAYERGOALPROPERTIESBLOCK_ID)
	{
		{ _field_char_enum, "Player Goal", &firefightgoal },
		{ _field_char_integer, "Lives" },
		{ _field_char_integer, "Time Limit", "minutes" },
		{ _field_byte_flags, "Wave Difficulty", &firefightwavedifficulty },
		{ _field_block, "Firefight Waves", &gameenginefirefightwavepropertiesblock_block },
		{ _field_long_flags, "Player Goal Flags", &gameengineplayergoalflags },
		{ _field_string_id, "spartan player traits" },
		{ _field_string_id, "ai traits" },
		{ _field_string, "Start Event" },
		{ _field_string, "End Event" },
		{ _field_long_flags, "skulls", MAKE_ALT_NAMES("primary skulls"), &skull_flags },
		{ _field_char_integer, "objective 1" },
		{ _field_char_integer, "objective 2" },
		{ _field_char_integer, "objective 3" },
		{ _field_char_integer, "objective 4" },
		{ _field_char_integer, "User Data" },
		{ _field_char_integer, "start location folder" },
		FIELD_PAD("BLAH", 2),
		{ _field_terminator }
	};

	STRINGS(firefightgoal)
	{
		"Object Destruction",
		"Object Delivery",
		"Location Arrival",
		"Time Passed",
		"No More Waves",
		"Kill Boss",
		"Defense",
		"Other"
	};
	STRING_LIST(firefightgoal, firefightgoal_strings, _countof(firefightgoal_strings));

	STRINGS(firefightwavedifficulty)
	{
		"Easy",
		"Medium",
		"Hard"
	};
	STRING_LIST(firefightwavedifficulty, firefightwavedifficulty_strings, _countof(firefightwavedifficulty_strings));

	STRINGS(gameengineplayergoalflags)
	{
		"Looping",
		"Random Waves"
	};
	STRING_LIST(gameengineplayergoalflags, gameengineplayergoalflags_strings, _countof(gameengineplayergoalflags_strings));

	STRINGS(skull_flags)
	{
		"skull_iron",
		"skull_black_eye",
		"skull_tough_luck",
		"skull_catch",
		"skull_fog",
		"skull_famine",
		"skull_thunderstorm",
		"skull_tilt",
		"skull_mythic",
		"skull_assassin",
		"skull_blind",
		"skull_superman",
		"skull_birthday_party",
		"skull_daddy",
		"skull_red",
		"skull_yellow",
		"skull_blue"
	};
	STRING_LIST(skull_flags, skull_flags_strings, _countof(skull_flags_strings));

	#define GAMEENGINEFIREFIGHTVARIANTSHELLBLOCK_ID { 0xD392368D, 0xBA17426C, 0x94047A97, 0x85056F66 }
	TAG_STRUCT(
		gameenginefirefightvariantshellblock,
		"GameEngineFirefightVariantShellBlock",
		"GameEngineFirefightVariantShellBlock",
		"s_gameenginefirefightvariantshellblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAMEENGINEFIREFIGHTVARIANTSHELLBLOCK_ID)
	{
		{ _field_tag_reference, "variant", &gameenginefirefightvarianttag_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(gameenginefirefightvarianttag_group_reference, GAMEENGINEFIREFIGHTVARIANTTAG_TAG);

	#define GAMEENGINEFIREFIGHTVARIANTTAG_BLOCK_STRUCT_ID { 0xB695034E, 0xB0F14A4C, 0xA75E0D82, 0xE5A7F4A4 }
	TAG_STRUCT(
		gameenginefirefightvarianttag_block_struct,
		"GameEngineFirefightVariantTag_block_struct",
		"GameEngineFirefightVariantTag_block_struct",
		"s_gameenginefirefightvarianttag_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAMEENGINEFIREFIGHTVARIANTTAG_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "variant", &gameenginefirefightvariantdefinition },
		{ _field_terminator }
	};

	#define GAMEENGINEFIREFIGHTWAVEPROPERTIESBLOCK_ID { 0xA5CF24B4, 0xEFA047A9, 0xB3D8E439, 0xCDDFDE02 }
	TAG_STRUCT(
		gameenginefirefightwavepropertiesblock,
		"GameEngineFirefightWavePropertiesBlock",
		"GameEngineFirefightWavePropertiesBlock",
		"s_gameenginefirefightwavepropertiesblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAMEENGINEFIREFIGHTWAVEPROPERTIESBLOCK_ID)
	{
		{ _field_string_id, "squad type", "survival_mode_get_wave_squad" },
		{ _field_char_enum, "Delivery type", &firefightwavedeliverymethod },
		{ _field_char_integer, "AI allowed before next wave spawns" },
		{ _field_char_integer, "Enemies Left Before HUD Marking" },
		{ _field_char_integer, "Wave Type" },
		{ _field_char_integer, "Weapon to drop" },
		{ _field_char_integer, "Vehicle to drop" },
		{ _field_char_integer, "Squad 1" },
		{ _field_char_integer, "Squad 2" },
		{ _field_string, "Start Event" },
		{ _field_string, "End Event" },
		{ _field_terminator }
	};

	STRINGS(firefightwavedeliverymethod)
	{
		"Dropship",
		"Monster Closet",
		"Drop Pod",
		"Test Spawn"
	};
	STRING_LIST(firefightwavedeliverymethod, firefightwavedeliverymethod_strings, _countof(firefightwavedeliverymethod_strings));

	#define GAMEGLOBALSGRENADEBLOCK_ID { 0xFB5FD410, 0x43B74B07, 0x94CDA4F5, 0x19F43A56 }
	TAG_STRUCT(
		gameglobalsgrenadeblock,
		"GameGlobalsGrenadeBlock",
		"GameGlobalsGrenadeBlock",
		"s_gameglobalsgrenadeblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAMEGLOBALSGRENADEBLOCK_ID)
	{
		{ _field_short_integer, "maximum count" },
		FIELD_PAD("CXVLKJE", 2),
		{ _field_short_integer, "initial count (Campaign)" },
		{ _field_short_integer, "initial count (Firefight)" },
		{ _field_short_integer, "initial count (Multiplayer)" },
		{ _field_short_integer, "grenadier extra count (Campaign)" },
		{ _field_short_integer, "grenadier extra count (Firefight)" },
		{ _field_short_integer, "grenadier extra count (Multiplayer)" },
		{ _field_real, "drop percentage (Campaign)" },
		{ _field_real, "drop percentage (Firefight)" },
		{ _field_real, "drop percentage (Multiplayer)" },
		{ _field_real, "resourceful scavenge percentage (Campaign)" },
		{ _field_real, "resourceful scavenge percentage (Firefight)" },
		{ _field_real, "resourceful scavenge percentage (Multiplayer)" },
		{ _field_tag_reference, "throwing effect", &effect_group_reference$3 },
		{ _field_tag_reference, "equipment", &equipment_group_reference$3 },
		{ _field_tag_reference, "projectile", &projectile_group_reference$3 },
		{ _field_tag_reference, "equipment (PvE)", &equipment_group_reference$3 },
		{ _field_tag_reference, "projectile (PvE)", &projectile_group_reference$3 },
		{ _field_terminator }
	};

	TAG_REFERENCE(effect_group_reference$3, EFFECT_TAG);

	TAG_REFERENCE(equipment_group_reference$3, EQUIPMENT_TAG);

	TAG_REFERENCE(projectile_group_reference$3, PROJECTILE_TAG);

	#define GAMEGLOBALSORDNANCEBLOCK_ID { 0xB1148A66, 0xD4744CB4, 0xAD66B2F7, 0x996F17D5 }
	TAG_STRUCT(
		gameglobalsordnanceblock,
		"GameGlobalsOrdnanceBlock",
		"GameGlobalsOrdnanceBlock",
		"s_gameglobalsordnanceblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAMEGLOBALSORDNANCEBLOCK_ID)
	{
		{ _field_string_id, "ordnance name" },
		{ _field_string, "ordnance internal name" },
		{ _field_long_integer, "activation point cost" },
		{ _field_string_id, "drop pod variant name", "is pod with this power weapon, else if blank is remote strike (remote strike equipment)" },
		{ _field_tag_reference, "remote strike equipment", &equipment_group_reference },
		{ _field_byte_integer, "sequence index" },
		{ _field_byte_integer, "equipment count" },
		{ _field_byte_flags, "premium flag", &guiordnanceprimiumflag },
		FIELD_PAD("PAD", 1),
		{ _field_real_point_3d, "navpoint marker offset" },
		{ _field_terminator }
	};

	TAG_REFERENCE(equipment_group_reference, EQUIPMENT_TAG);

	STRINGS(guiordnanceprimiumflag)
	{
		"premium ordnance"
	};
	STRING_LIST(guiordnanceprimiumflag, guiordnanceprimiumflag_strings, _countof(guiordnanceprimiumflag_strings));

	#define HSIMPORTMANIFESTBLOCK_ID { 0xCD668B7A, 0x34BB4A72, 0x8A0794E4, 0xB24C2B19 }
	TAG_STRUCT(
		hsimportmanifestblock,
		"HSImportManifestBlock",
		"HSImportManifestBlock",
		"s_hsimportmanifestblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HSIMPORTMANIFESTBLOCK_ID)
	{
		{ _field_tag, "callee tag" },
		{ _field_block, "script table", &hsimportmanifestentryblock_block },
		{ _field_block, "variable table", &hsimportmanifestentryblock_block },
		{ _field_terminator }
	};

	#define HSIMPORTMANIFESTENTRYBLOCK_ID { 0x698CF2F7, 0x448A41ED, 0x9D009D70, 0x71DF846A }
	TAG_STRUCT(
		hsimportmanifestentryblock,
		"HSImportManifestEntryBlock",
		"HSImportManifestEntryBlock",
		"s_hsimportmanifestentryblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HSIMPORTMANIFESTENTRYBLOCK_ID)
	{
		{ _field_string_id, "script name" },
		{ _field_long_integer, "argCount" },
		{ _field_long_integer, "index" },
		{ _field_terminator }
	};

	#define HSINSTANCEDVARIABLESBLOCK_ID { 0x749A4FA9, 0xB61D40B2, 0xA9E4C656, 0x226722FB }
	TAG_STRUCT(
		hsinstancedvariablesblock,
		"HSInstancedVariablesBlock",
		"HSInstancedVariablesBlock",
		"s_hsinstancedvariablesblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HSINSTANCEDVARIABLESBLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_enum, "type", &hs_types_enum },
		{ _field_long_integer, "initialization expression index" },
		{ _field_terminator }
	};

	STRINGS(hs_types_enum)
	{
		"unparsed",
		"special_form",
		"function_name",
		"passthrough",
		"void",
		"boolean",
		"real",
		"short",
		"long",
		"string",
		"script",
		"string_id",
		"unit_seat_mapping",
		"trigger_volume",
		"sound_event",
		"cutscene_flag",
		"cutscene_camera_point",
		"cutscene_title",
		"cutscene_recording",
		"device_group",
		"ai",
		"ai_command_list",
		"ai_command_script",
		"ai_behavior",
		"ai_orders",
		"ai_line",
		"starting_profile",
		"conversation",
		"player",
		"zone_set",
		"designer_zone",
		"point_reference",
		"point_set_reference",
		"style",
		"object_list",
		"folder",
		"sound",
		"effect",
		"damage",
		"looping_sound",
		"animation_graph",
		"damage_effect",
		"object_definition",
		"bitmap",
		"shader",
		"render_model",
		"structure_definition",
		"lightmap_definition",
		"cinematic_definition",
		"cinematic_scene_definition",
		"cinematic_scene_data_definition",
		"cinematic_transition_definition",
		"bink_definition",
		"cui_screen_definition",
		"any_tag",
		"any_tag_not_resolving",
		"game_difficulty",
		"team",
		"mp_team",
		"controller",
		"button_preset",
		"joystick_preset",
		"player_color",
		"player_model_choice",
		"voice_output_setting",
		"voice_mask",
		"subtitle_setting",
		"actor_type",
		"model_state",
		"event",
		"character_physics",
		"skull",
		"firing_point_evaluator",
		"damage_region",
		"currency_type",
		"delivery_method",
		"wave_difficulty",
		"firefight_goal",
		"firefight_wave_type",
		"font",
		"text_justification",
		"text_alignment",
		"text_drop_shadow_type",
		"havok_group",
		"object",
		"unit",
		"vehicle",
		"weapon",
		"device",
		"scenery",
		"effect_scenery",
		"object_name",
		"unit_name",
		"vehicle_name",
		"weapon_name",
		"device_name",
		"scenery_name",
		"effect_scenery_name",
		"cinematic_lightprobe",
		"animation_budget_reference",
		"looping_sound_budget_reference",
		"sound_budget_reference"
	};
	STRING_LIST(hs_types_enum, hs_types_enum_strings, _countof(hs_types_enum_strings));

	#define INFINITYMISSIONIMAGESDEFINITION_ID { 0xCCFE755, 0x34704BF3, 0xAC2769A3, 0x76B16EC8 }
	TAG_STRUCT(
		infinitymissionimagesdefinition,
		"InfinityMissionImagesDefinition",
		"InfinityMissionImagesDefinition",
		"s_infinitymissionimagesdefinition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INFINITYMISSIONIMAGESDEFINITION_ID)
	{
		{ _field_tag_reference, "card image", &bitmap_group_reference$2 },
		{ _field_tag_reference, "detail image", &bitmap_group_reference$2 },
		{ _field_tag_reference, "lobby image", &bitmap_group_reference$2 },
		{ _field_tag_reference, "match image", &bitmap_group_reference$2 },
		{ _field_terminator }
	};

	#define INFINITYMISSIONSEASONIMAGESDEFINITION_ID { 0x3FEA443C, 0xB8C04669, 0xA99A3532, 0x68153106 }
	TAG_STRUCT(
		infinitymissionseasonimagesdefinition,
		"InfinityMissionSeasonImagesDefinition",
		"InfinityMissionSeasonImagesDefinition",
		"s_infinitymissionseasonimagesdefinition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INFINITYMISSIONSEASONIMAGESDEFINITION_ID)
	{
		FIELD_EXPLANATION("Season Images", "This block should contain a season\'s worth of Infinity mission images"),
		{ _field_long_integer, "season number" },
		{ _field_tag_reference, "epilogue image", "displayed where the missions would be, when the epilogue is selected", &bitmap_group_reference$2 },
		{ _field_block, "season images", &infinitymissionimagesdefinition_block },
		{ _field_terminator }
	};

	#define INFINITYUIIMAGES_STRUCT_DEFINITION_ID { 0xD223EB5F, 0xCD5E44E1, 0xA3DEEA14, 0x416725BA }
	TAG_STRUCT(
		infinityuiimages_struct_definition,
		"InfinityUIImages_struct_definition",
		"InfinityUIImages_struct_definition",
		"s_infinityuiimages_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INFINITYUIIMAGES_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "seasons", &infinitymissionseasonimagesdefinition_block },
		{ _field_terminator }
	};

	#define KILLCAMCAMERAPARAMTER_STRUCT_DEFINITION_ID { 0xA995235B, 0xDCCD4C49, 0xA780B17C, 0xDB294281 }
	TAG_STRUCT(
		killcamcameraparamter_struct_definition,
		"KillCamCameraParamter_struct_definition",
		"KillCamCameraParamter_struct_definition",
		"s_killcamcameraparamter_struct_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		KILLCAMCAMERAPARAMTER_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "distance from camera" },
		{ _field_real, "height above object" },
		{ _field_real, "minimum velocity to update" },
		{ _field_terminator }
	};

	#define LIGHTSHAFTPARAMETERSDEFINITION_ID { 0x8893D72D, 0xCA8A49CB, 0xA26C4277, 0xF0677728 }
	TAG_STRUCT(
		lightshaftparametersdefinition,
		"LightShaftParametersDefinition",
		"LightShaftParametersDefinition",
		"s_lightshaftparametersdefinition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIGHTSHAFTPARAMETERSDEFINITION_ID)
	{
		{ _field_real_rgb_color, "light shaft tint color" },
		{ _field_real, "light shaft intensity" },
		{ _field_real, "light shaft decay rate" },
		{ _field_real, "maximum screen distance" },
		{ _field_real, "sample density" },
		{ _field_real, "minimum caster distance" },
		{ _field_terminator }
	};

	#define MOBILENAVMESHBLOCK_ID { 0x9417C730, 0x26644159, 0x9CEB6CB2, 0x8574A920 }
	TAG_STRUCT(
		mobilenavmeshblock,
		"MobileNavMeshBlock",
		"MobileNavMeshBlock",
		"s_mobilenavmeshblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MOBILENAVMESHBLOCK_ID,
		4)
	{
		{ _field_long_integer, "runtimeNavMesh", _field_id_zero_data },
		{ _field_long_integer, "runtimeNavGraph", _field_id_zero_data },
		{ _field_long_integer, "runtimeNavMediator", _field_id_zero_data },
		FIELD_PAD("pads2", 4),
		{ _field_data, "navGraphData", &navgraphdatadefinition },
		{ _field_data, "navMediatorData", &navmediatordatadefinition },
		{ _field_block, "faceUserData", &faceuserdatablock_block },
		{ _field_struct, "object id", &scenario_object_id_struct },
		{ _field_byte_flags, "flags", &mobilenavmeshflagsdefinition },
		FIELD_PAD("pads", 3),
		{ _field_terminator }
	};

	STRINGS(mobilenavmeshflagsdefinition)
	{
		"always loaded"
	};
	STRING_LIST(mobilenavmeshflagsdefinition, mobilenavmeshflagsdefinition_strings, _countof(mobilenavmeshflagsdefinition_strings));

	#define MOPPSERIALIZEDHAVOKDATABLOCK_ID { 0x93514036, 0x6411412D, 0x9DFEAC70, 0x1D84C668 }
	TAG_STRUCT(
		moppserializedhavokdatablock,
		"MoppSerializedHavokDataBlock",
		"MoppSerializedHavokDataBlock",
		"s_moppserializedhavokdatablock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MOPPSERIALIZEDHAVOKDATABLOCK_ID)
	{
		{ _field_struct, "base", &havok_primitive_struct },
		{ _field_long_integer, "version" },
		{ _field_long_integer, "Runtime Deserialized Shape Pointer", _field_id_zero_data },
		{ _field_data, "Serialized Havok Data", &havokserializabledatadefinition },
		{ _field_data, "Serialized Havok Data Any Temp", &havokserializabledatadefinition },
		{ _field_terminator }
	};

	#define NARRATIVEFLAGDEFINITIONBLOCK_ID { 0xB43281FC, 0x4C5E4268, 0x84E34E80, 0x246ADD95 }
	TAG_STRUCT(
		narrativeflagdefinitionblock,
		"NarrativeFlagDefinitionBlock",
		"NarrativeFlagDefinitionBlock",
		"s_narrativeflagdefinitionblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NARRATIVEFLAGDEFINITIONBLOCK_ID)
	{
		{ _field_long_integer, "Index" },
		{ _field_char_enum, "Type", &narrativeflagtypeenum },
		FIELD_PAD("fsarewrsda", 3),
		{ _field_terminator }
	};

	STRINGS(narrativeflagtypeenum)
	{
		"Unknown",
		"Terminal"
	};
	STRING_LIST(narrativeflagtypeenum, narrativeflagtypeenum_strings, _countof(narrativeflagtypeenum_strings));

	#define NARRATIVEGLOBALS_STRUCT_DEFINITION_ID { 0xF1FDAAB, 0x1EA04A95, 0x956C4623, 0xEDDE356C }
	TAG_STRUCT(
		narrativeglobals_struct_definition,
		"NarrativeGlobals_struct_definition",
		"NarrativeGlobals_struct_definition",
		"s_narrativeglobals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NARRATIVEGLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "Narrative Flag Definitions", &narrativeflagdefinitionblock_block },
		{ _field_terminator }
	};

	#define NAVCLIMBBLOCK_ID { 0x5C34E203, 0xF75D4F21, 0xB9392D66, 0x4B604601 }
	TAG_STRUCT(
		navclimbblock,
		"NavClimbBlock",
		"NavClimbBlock",
		"s_navclimbblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NAVCLIMBBLOCK_ID,
		4)
	{
		{ _field_long_integer, "runtimeNavMesh", _field_id_zero_data },
		{ _field_long_integer, "runtimeNavGraph", _field_id_zero_data },
		{ _field_long_integer, "runtimeNavMediator", _field_id_zero_data },
		FIELD_PAD("pads", 4),
		{ _field_data, "navGraphData", &navgraphdatadefinition },
		{ _field_data, "navMediatorData", &navmediatordatadefinition },
		{ _field_block, "faceUserData", &faceuserdatablock_block },
		{ _field_short_integer, "zoneIndex" },
		{ _field_short_integer, "areaIndex" },
		FIELD_PAD("pads2", 8),
		{ _field_terminator }
	};

	#define NAVMESHATTACHMENTBLOCK_ID { 0x2D17D937, 0x4B834305, 0x97485CEC, 0x205D022E }
	TAG_STRUCT(
		navmeshattachmentblock,
		"NavMeshAttachmentBlock",
		"NavMeshAttachmentBlock",
		"s_navmeshattachmentblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NAVMESHATTACHMENTBLOCK_ID)
	{
		{ _field_dword_integer, "navMeshUID" },
		{ _field_terminator }
	};

	#define NAVMESHATTACHMENTSSTRUCT_ID { 0x39206AE0, 0xEC31496C, 0x8A09F9EF, 0x9A3E893B }
	TAG_STRUCT(
		navmeshattachmentsstruct,
		"NavMeshAttachmentsStruct",
		"NavMeshAttachmentsStruct",
		"s_navmeshattachmentsstruct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NAVMESHATTACHMENTSSTRUCT_ID)
	{
		{ _field_block, "attachments", &navmeshattachmentblock_block },
		{ _field_terminator }
	};

	#define NAVVOLUMEBLOCK_ID { 0x967C1DD5, 0x6B6D4334, 0x884F288F, 0xD1AEBBC8 }
	TAG_STRUCT(
		navvolumeblock,
		"NavVolumeBlock",
		"NavVolumeBlock",
		"s_navvolumeblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NAVVOLUMEBLOCK_ID)
	{
		{ _field_short_integer, "zoneIndex" },
		{ _field_short_integer, "areaIndex" },
		{ _field_long_integer, "runtimeNavVolume", _field_id_zero_data },
		{ _field_long_integer, "runtimeNavMediator", _field_id_zero_data },
		{ _field_data, "navMediatorData", &navmediatordatadefinition },
		{ _field_terminator }
	};

	#define ORDNANCEREMAPPINGBLOCK_ID { 0xF68C5861, 0xC7BA4AB4, 0xAC1388FD, 0x730ACEA8 }
	TAG_STRUCT(
		ordnanceremappingblock,
		"OrdnanceRemappingBlock",
		"OrdnanceRemappingBlock",
		"s_ordnanceremappingblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ORDNANCEREMAPPINGBLOCK_ID)
	{
		{ _field_string_id, "from", "This must match one of the global ordnance objects." },
		{ _field_string_id, "to", "This must match one of the global ordnance objects." },
		{ _field_terminator }
	};

	#define ORDNANCEREMAPPINGVARIANTBLOCK_ID { 0x9AEAD981, 0xF9F147D4, 0x9D76F0E6, 0x1EA7C0E6 }
	TAG_STRUCT(
		ordnanceremappingvariantblock,
		"OrdnanceRemappingVariantBlock",
		"OrdnanceRemappingVariantBlock",
		"s_ordnanceremappingvariantblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ORDNANCEREMAPPINGVARIANTBLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string, "internal name" },
		{ _field_block, "remappings", &ordnanceremappingblock_block },
		{ _field_terminator }
	};

	#define PCAANIMATIONDATASTRUCT_ID { 0xBB388541, 0xC4374DDA, 0x9ED407B4, 0x4762E780 }
	TAG_STRUCT(
		pcaanimationdatastruct,
		"PCAAnimationDataStruct",
		"PCAAnimationDataStruct",
		"s_pcaanimationdatastruct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PCAANIMATIONDATASTRUCT_ID)
	{
		FIELD_EXPLANATION("Group Settings", "For each PCA Group desired, provide a unique name and desired number of blend shapes.\nThen, assign animations to these groups by setting their pca group name field"),
		{ _field_block, "PCA Groups", &pcagroupsettingsblock_block },
		FIELD_EXPLANATION("PCA Animation Tag", "This is where all the imported pca blend shape animation will be stored.\nIf any animations in this graph contain PCA blend shape animation,\ncreate a unique pca_animation tag for this animation graph and link it here.\nOtherwise, one will be created for you."),
		{ _field_tag_reference, "pca animation", &pca_animation_group_reference },
		{ _field_long_integer, "PCA Animation Count" },
		{ _field_long_integer, "PCA Checksum" },
		{ _field_terminator }
	};

	TAG_REFERENCE(pca_animation_group_reference, PCA_ANIMATION_TAG);

	#define PCAGROUPSETTINGSBLOCK_ID { 0xD0D44006, 0x2B0C4A76, 0xBBB72712, 0xAA03726E }
	TAG_STRUCT(
		pcagroupsettingsblock,
		"PCAGroupSettingsBlock",
		"PCAGroupSettingsBlock",
		"s_pcagroupsettingsblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PCAGROUPSETTINGSBLOCK_ID)
	{
		{ _field_string_id, "Group Name" },
		{ _field_long_integer, "Desired Mesh Count" },
		{ _field_terminator }
	};

	#define PCAIMPORTEDANIMATIONDATABLOCK_ID { 0x959FD2F8, 0xBBC14296, 0xADCD7D1C, 0x128A561C }
	TAG_STRUCT(
		pcaimportedanimationdatablock,
		"PCAImportedAnimationDataBlock",
		"PCAImportedAnimationDataBlock",
		"s_pcaimportedanimationdatablock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PCAIMPORTEDANIMATIONDATABLOCK_ID)
	{
		{ _field_string_id, "Name" },
		{ _field_long_integer, "Offset" },
		{ _field_long_integer, "Count" },
		{ _field_long_integer, "PCA Shape Offset" },
		{ _field_long_integer, "PCA coefficient Count" },
		FIELD_EXPLANATION("Resource Data", "coefficients"),
		{ _field_pageable_resource, "CoefficientResource", &pca_coefficients_resource_definition },
		{ _field_terminator }
	};

	#define PCAIMPORTEDFRAMEDATABLOCK_ID { 0xE5333434, 0x6554F48, 0x821AF6F8, 0x556FB3B5 }
	TAG_STRUCT(
		pcaimportedframedatablock,
		"PCAImportedFrameDatablock",
		"PCAImportedFrameDatablock",
		"s_pcaimportedframedatablock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PCAIMPORTEDFRAMEDATABLOCK_ID)
	{
		{ _field_data, "Coefficients", &pcacoefficientsdefinition },
		{ _field_terminator }
	};

	#define PCAIMPORTEDMESHDATABLOCK_ID { 0x3F7A00D0, 0x1FE3442A, 0xAED7FE34, 0x26590547 }
	TAG_STRUCT(
		pcaimportedmeshdatablock,
		"PCAImportedMeshDataBlock",
		"PCAImportedMeshDataBlock",
		"s_pcaimportedmeshdatablock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_RESOURCES | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PCAIMPORTEDMESHDATABLOCK_ID)
	{
		{ _field_long_integer, "render mesh index" },
		{ _field_long_integer, "vertices per shape" },
		{ _field_long_integer, "vertex buffer index" },
		{ _field_real_vector_3d, "position scale" },
		{ _field_real, "tension scale" },
		{ _field_real_vector_3d, "position offset" },
		{ _field_real, "tension offset" },
		{ _field_real_vector_3d, "normal scale" },
		{ _field_real, "stretch scale" },
		{ _field_real_vector_3d, "normal offset" },
		{ _field_real, "stretch offset" },
		FIELD_EXPLANATION("Animations", "all imported animations for this mesh"),
		{ _field_block, "animations", &pcaimportedanimationdatablock_block },
		FIELD_EXPLANATION("Vertices", "all imported blend shape vertices for this mesh"),
		{ _field_block, "raw blendshape verts", &raw_blendshape_block_block },
		{ _field_terminator }
	};

	#define PCAMESHINDEXBLOCK_ID { 0x47C61323, 0x1F274D16, 0x97CD4802, 0xCCA9FFA4 }
	TAG_STRUCT(
		pcameshindexblock,
		"PCAMeshIndexBlock",
		"PCAMeshIndexBlock",
		"s_pcameshindexblock",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PCAMESHINDEXBLOCK_ID)
	{
		{ _field_long_block_index, "mesh index", &global_mesh_block_block },
		{ _field_terminator }
	};

	#define PLAYERORDNANCEGROUPBLOCK_ID { 0x5C352C76, 0xBB3449B2, 0xB202321F, 0xE2FC9E1C }
	TAG_STRUCT(
		playerordnancegroupblock,
		"PlayerOrdnanceGroupBlock",
		"PlayerOrdnanceGroupBlock",
		"s_playerordnancegroupblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYERORDNANCEGROUPBLOCK_ID)
	{
		{ _field_block, "Player ordnance drops", &playerordnanceitemblock_block },
		{ _field_terminator }
	};

	#define PLAYERORDNANCEITEMBLOCK_ID { 0x5FFE0CCB, 0x27E84523, 0xADA8BA59, 0x747B2D50 }
	TAG_STRUCT(
		playerordnanceitemblock,
		"PlayerOrdnanceItemBlock",
		"PlayerOrdnanceItemBlock",
		"s_playerordnanceitemblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYERORDNANCEITEMBLOCK_ID)
	{
		{ _field_string, "ordnance name", "This must match one of the global ordnance objects." },
		{ _field_real, "ordnance frequency", "chance that an ordnance from this group will be chosen" },
		{ _field_terminator }
	};

	#define PROJECTILESOUNDRTPCBLOCK_ID { 0xD38131FC, 0x16674727, 0x88CA938F, 0x7263022B }
	TAG_STRUCT(
		projectilesoundrtpcblock,
		"ProjectileSoundRTPCBlock",
		"ProjectileSoundRTPCBlock",
		"s_projectilesoundrtpcblock",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROJECTILESOUNDRTPCBLOCK_ID)
	{
		{ _field_long_block_index, "Attachment Index", "Sound attachment to affect - leave empty for main body", &global_object_attachment_block_block },
		{ _field_string_id, "Function", "Function to drive the RTPC" },
		{ _field_string_id, "RTPC Name", "WWise RTPC string name" },
		{ _field_terminator }
	};

	#define PUPPETACTIONANIMATIONSTRUCT_ID { 0x5982A171, 0x1CD747BF, 0x990B8738, 0x4F5013E6 }
	TAG_STRUCT(
		puppetactionanimationstruct,
		"PuppetActionAnimationStruct",
		"PuppetActionAnimationStruct",
		"s_puppetactionanimationstruct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETACTIONANIMATIONSTRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_struct, "position", &puppetpathpointstruct },
		{ _field_byte_flags, "flags", &puppetanimationflagsdefinition },
		{ _field_char_enum, "posType", &animpositiontypeenum },
		FIELD_PAD("pad", 2),
		{ _field_long_integer, "startFrame" },
		{ _field_long_integer, "endFrame" },
		{ _field_long_integer, "repeatCount" },
		{ _field_real, "scale" },
		{ _field_string_id, "conditionScriptName" },
		{ _field_long_integer, "condition" },
		{ _field_terminator }
	};

	STRINGS(puppetanimationflagsdefinition)
	{
		"Looping",
		"Reverse",
		"Reset Object Position",
		"ICS",
		"ICS Reset Camera",
		"Additional"
	};
	STRING_LIST(puppetanimationflagsdefinition, puppetanimationflagsdefinition_strings, _countof(puppetanimationflagsdefinition_strings));

	STRINGS(animpositiontypeenum)
	{
		"Teleport",
		"Attach",
		"Free"
	};
	STRING_LIST(animpositiontypeenum, animpositiontypeenum_strings, _countof(animpositiontypeenum_strings));

	#define PUPPETACTIONBLOCK_ID { 0x93A734EC, 0xF65F4437, 0x8BF9E4FE, 0xD8806C4B }
	TAG_STRUCT(
		puppetactionblock,
		"PuppetActionBlock",
		"PuppetActionBlock",
		"s_puppetactionblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETACTIONBLOCK_ID)
	{
		{ _field_struct, "header", &puppetactionheaderstruct },
		{ _field_struct, "animation", &puppetactionanimationstruct },
		{ _field_struct, "path", &puppetactionpathstruct },
		{ _field_long_string, "comment" },
		{ _field_long_string, "animCondition" },
		{ _field_dword_integer, "color" },
		{ _field_byte_flags, "editorFlags", &puppeteditorflagsdefinition },
		FIELD_PAD("pad", 3),
		{ _field_long_integer, "startFrame" },
		{ _field_long_integer, "endFrame" },
		{ _field_long_integer, "blendFrame" },
		{ _field_long_integer, "startPixel" },
		{ _field_long_integer, "endPixel" },
		{ _field_long_integer, "blendPixel" },
		{ _field_long_integer, "blendInDrag" },
		{ _field_long_integer, "lengthDrag" },
		{ _field_terminator }
	};

	STRINGS(puppeteditorflagsdefinition)
	{
		"Muted",
		"Expanded"
	};
	STRING_LIST(puppeteditorflagsdefinition, puppeteditorflagsdefinition_strings, _countof(puppeteditorflagsdefinition_strings));

	#define PUPPETACTIONHEADERSTRUCT_ID { 0xFA200369, 0xBB6D48F8, 0x9B156C53, 0x5A91C58B }
	TAG_STRUCT(
		puppetactionheaderstruct,
		"PuppetActionHeaderStruct",
		"PuppetActionHeaderStruct",
		"s_puppetactionheaderstruct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETACTIONHEADERSTRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_integer, "id" },
		{ _field_long_integer, "blendIn" },
		{ _field_long_integer, "length" },
		{ _field_long_integer, "comment" },
		{ _field_char_enum, "blendType", &puppetactionblendtypeenum },
		{ _field_char_enum, "type", &puppetactiontypeenum },
		{ _field_short_integer, "dataIndex" },
		{ _field_terminator }
	};

	STRINGS(puppetactionblendtypeenum)
	{
		"Linear",
		"Smooth"
	};
	STRING_LIST(puppetactionblendtypeenum, puppetactionblendtypeenum_strings, _countof(puppetactionblendtypeenum_strings));

	STRINGS(puppetactiontypeenum)
	{
		"Animation",
		"Path"
	};
	STRING_LIST(puppetactiontypeenum, puppetactiontypeenum_strings, _countof(puppetactiontypeenum_strings));

	#define PUPPETACTIONPATHSTRUCT_ID { 0x7BEF7478, 0x58614EB4, 0x9EFA2425, 0xEFBCD9DA }
	TAG_STRUCT(
		puppetactionpathstruct,
		"PuppetActionPathStruct",
		"PuppetActionPathStruct",
		"s_puppetactionpathstruct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETACTIONPATHSTRUCT_ID)
	{
		{ _field_real, "throttle" },
		{ _field_block, "points", &puppetpathpointblock_block },
		{ _field_terminator }
	};

	#define PUPPETBLOCK_ID { 0xCF621B18, 0xAB9F429E, 0xBBB7E1AF, 0x81A270C5 }
	TAG_STRUCT(
		puppetblock,
		"PuppetBlock",
		"PuppetBlock",
		"s_puppetblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETBLOCK_ID)
	{
		{ _field_struct, "header", &puppetheaderstruct },
		{ _field_block, "actions", &puppetactionblock_block },
		{ _field_block, "subActions", &puppetsubactionblock_block },
		{ _field_block, "subTracks", &subtracksblock_block },
		{ _field_long_string, "comment" },
		{ _field_long_string, "startScript" },
		{ _field_long_string, "endScript" },
		{ _field_short_integer, "height" },
		{ _field_byte_flags, "editorFlags", &puppeteditorflagsdefinition },
		FIELD_PAD("pad", 1),
		{ _field_terminator }
	};

	#define PUPPETHEADERSTRUCT_ID { 0xC023483C, 0x3B97483F, 0x83E7754E, 0x39F683AC }
	TAG_STRUCT(
		puppetheaderstruct,
		"PuppetHeaderStruct",
		"PuppetHeaderStruct",
		"s_puppetheaderstruct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETHEADERSTRUCT_ID)
	{
		{ _field_byte_flags, "flags", &puppetflagsdefinition },
		{ _field_char_enum, "indexType", &puppetindextypeenum },
		FIELD_PAD("pad", 2),
		{ _field_string_id, "name" },
		{ _field_tag_reference, "type", &biped_group_character_group_crate_group_device_machine_group_scenery_group_vehicle_group_reference },
		{ _field_string_id, "objectName" },
		{ _field_long_integer, "index" },
		{ _field_struct, "position", &puppetpathpointstruct },
		{ _field_string_id, "startScriptName" },
		{ _field_string_id, "endScriptName" },
		{ _field_short_integer, "startScript" },
		{ _field_short_integer, "endScript" },
		{ _field_short_integer, "firstAction" },
		{ _field_short_integer, "actionCount" },
		{ _field_short_integer, "firstSubAction" },
		{ _field_short_integer, "subActionCount" },
		{ _field_tag_reference, "additionalAnimations", &model_animation_graph_group_reference$4 },
		{ _field_terminator }
	};

	STRINGS(puppetflagsdefinition)
	{
		"Optional",
		"Player",
		"Force Position",
		"Create If Missing",
		"Destroy When Finished",
		"Abort On Damage",
		"Abort On Alert",
		"Abort Show"
	};
	STRING_LIST(puppetflagsdefinition, puppetflagsdefinition_strings, _countof(puppetflagsdefinition_strings));

	STRINGS(puppetindextypeenum)
	{
		"Name",
		"AI",
		"Global",
		"Puppet",
		"Point Set",
		"Flag"
	};
	STRING_LIST(puppetindextypeenum, puppetindextypeenum_strings, _countof(puppetindextypeenum_strings));

	TAG_REFERENCE_GROUP(biped_group_character_group_crate_group_device_machine_group_scenery_group_vehicle_group_reference, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY)
	{
		BIPED_TAG,
		CHARACTER_TAG,
		CRATE_TAG,
		DEVICE_MACHINE_TAG,
		SCENERY_TAG,
		VEHICLE_TAG,
		INVALID_TAG
	};

	TAG_REFERENCE(model_animation_graph_group_reference$4, MODEL_ANIMATION_GRAPH_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define PUPPETPATHPOINTSTRUCT_ID { 0xAC79CA3, 0x908646D8, 0x98358F46, 0xAA2AEE0F }
	TAG_STRUCT(
		puppetpathpointstruct,
		"PuppetPathPointStruct",
		"PuppetPathPointStruct",
		"s_puppetpathpointstruct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETPATHPOINTSTRUCT_ID)
	{
		{ _field_char_enum, "type", &puppetpathpointtypeenum },
		{ _field_byte_flags, "flags", &puppetpathpointflagsdefinition },
		{ _field_char_enum, "indexType", &puppetindextypeenum },
		FIELD_PAD("pad", 1),
		{ _field_string_id, "objectName" },
		{ _field_long_integer, "index" },
		{ _field_string_id, "marker" },
		{ _field_real_point_3d, "pos" },
		{ _field_real_euler_angles_3d, "rot" },
		{ _field_terminator }
	};

	STRINGS(puppetpathpointtypeenum)
	{
		"Current",
		"Object",
		"Point Set",
		"Flag",
		"Custom"
	};
	STRING_LIST(puppetpathpointtypeenum, puppetpathpointtypeenum_strings, _countof(puppetpathpointtypeenum_strings));

	STRINGS(puppetpathpointflagsdefinition)
	{
		"Has Rotation",
		"Don\'t Stop"
	};
	STRING_LIST(puppetpathpointflagsdefinition, puppetpathpointflagsdefinition_strings, _countof(puppetpathpointflagsdefinition_strings));

	#define PUPPETSCRIPTTEXTBLOCK_ID { 0x4AD570DA, 0x6D0A485F, 0xB0FF6BB8, 0xF9175535 }
	TAG_STRUCT(
		puppetscripttextblock,
		"PuppetScriptTextBlock",
		"PuppetScriptTextBlock",
		"s_puppetscripttextblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETSCRIPTTEXTBLOCK_ID)
	{
		{ _field_long_string, "scriptText" },
		{ _field_terminator }
	};

	#define PUPPETSHOWSBLOCK_ID { 0x9562EFA6, 0xC5864192, 0x80EB546F, 0x8BF6C569 }
	TAG_STRUCT(
		puppetshowsblock,
		"PuppetShowsBlock",
		"PuppetShowsBlock",
		"s_puppetshowsblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETSHOWSBLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "designerZone" },
		{ _field_struct, "manual bsp flags", &manualbspflagsreferences },
		{ _field_byte_flags, "flags", &puppetshowflagsdefinition },
		FIELD_PAD("pad", 3),
		{ _field_string, "icsPoint0" },
		{ _field_string, "icsPoint1" },
		{ _field_string, "icsPoint2" },
		{ _field_string, "icsPoint3" },
		{ _field_long_integer, "lastActionId" },
		{ _field_block, "puppets", &puppetblock_block },
		{ _field_block, "puppetHeaders", &puppetheaderblock_block },
		{ _field_block, "actions", &puppetactionheaderblock_block },
		{ _field_block, "subActions", &puppetsubactionheaderblock_block },
		{ _field_block, "animations", &puppetanimationblock_block },
		{ _field_block, "paths", &puppetpathblock_block },
		{ _field_block, "points", &puppetpointblock_block },
		{ _field_block, "branches", &puppetbranchblock_block },
		{ _field_block, "scripts", &puppetscriptblock_block },
		{ _field_block, "comments", &commentsblock_block },
		{ _field_terminator }
	};

	STRINGS(puppetshowflagsdefinition)
	{
		"Coop ICS",
		"Immediate ICS"
	};
	STRING_LIST(puppetshowflagsdefinition, puppetshowflagsdefinition_strings, _countof(puppetshowflagsdefinition_strings));

	#define PUPPETSUBACTIONBLOCK_ID { 0x3BE78714, 0xC7934182, 0xBE95FF53, 0xF480FB09 }
	TAG_STRUCT(
		puppetsubactionblock,
		"PuppetSubActionBlock",
		"PuppetSubActionBlock",
		"s_puppetsubactionblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETSUBACTIONBLOCK_ID)
	{
		{ _field_struct, "header", &puppetsubactionheaderstruct },
		{ _field_struct, "point", &puppetsubactionpointstruct },
		{ _field_struct, "branch", &puppetsubactionbranchstruct },
		{ _field_struct, "script", &puppetsubactionscriptstruct },
		{ _field_long_string, "comment" },
		{ _field_long_string, "startCondition" },
		{ _field_long_string, "endCondition" },
		{ _field_long_string, "scriptText" },
		{ _field_block, "branchConditions", &puppetscripttextblock_block },
		{ _field_dword_integer, "color" },
		{ _field_byte_integer, "subTrack" },
		{ _field_byte_flags, "editorFlags", &puppeteditorflagsdefinition },
		FIELD_PAD("pad", 2),
		{ _field_long_integer, "startFrame" },
		{ _field_long_integer, "endFrame" },
		{ _field_long_integer, "startPixel" },
		{ _field_long_integer, "endPixel" },
		{ _field_long_integer, "subTrackDrag" },
		{ _field_long_integer, "startOffsetDrag" },
		{ _field_long_integer, "endOffsetDrag" },
		{ _field_terminator }
	};

	#define PUPPETSUBACTIONBRANCHELEMENTBLOCK_ID { 0x70F50344, 0x451E4F1D, 0x94DBF6FD, 0x3C9FB3D8 }
	TAG_STRUCT(
		puppetsubactionbranchelementblock,
		"PuppetSubActionBranchElementBlock",
		"PuppetSubActionBranchElementBlock",
		"s_puppetsubactionbranchelementblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETSUBACTIONBRANCHELEMENTBLOCK_ID)
	{
		{ _field_long_integer, "targetAction" },
		{ _field_string_id, "conditionScriptName" },
		{ _field_long_integer, "condition" },
		{ _field_terminator }
	};

	#define PUPPETSUBACTIONBRANCHSTRUCT_ID { 0x726B629A, 0x429D4389, 0x90127AED, 0x78D58747 }
	TAG_STRUCT(
		puppetsubactionbranchstruct,
		"PuppetSubActionBranchStruct",
		"PuppetSubActionBranchStruct",
		"s_puppetsubactionbranchstruct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETSUBACTIONBRANCHSTRUCT_ID)
	{
		{ _field_block, "elements", &puppetsubactionbranchelementblock_block },
		{ _field_terminator }
	};

	#define PUPPETSUBACTIONHEADERSTRUCT_ID { 0x939C4DED, 0x98064334, 0xB0808526, 0xE32FC69E }
	TAG_STRUCT(
		puppetsubactionheaderstruct,
		"PuppetSubActionHeaderStruct",
		"PuppetSubActionHeaderStruct",
		"s_puppetsubactionheaderstruct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETSUBACTIONHEADERSTRUCT_ID)
	{
		{ _field_char_enum, "type", &puppetsubactiontypeenum },
		{ _field_char_enum, "startType", &subactiontimetypeenum },
		{ _field_char_enum, "endType", &subactiontimetypeenum },
		FIELD_PAD("pad1", 1),
		{ _field_long_integer, "startAction" },
		{ _field_long_integer, "startOffset" },
		{ _field_string_id, "startConditionScriptName" },
		{ _field_string_id, "endConditionScriptName" },
		{ _field_short_integer, "startCondition" },
		{ _field_short_integer, "endCondition" },
		{ _field_long_integer, "endAction" },
		{ _field_long_integer, "endOffset" },
		{ _field_long_integer, "comment" },
		{ _field_short_integer, "dataIndex" },
		FIELD_PAD("pad2", 2),
		{ _field_terminator }
	};

	STRINGS(puppetsubactiontypeenum)
	{
		"Look At",
		"Face",
		"Shoot At",
		"Overlay",
		"Effect",
		"Sound",
		"Looping Sound",
		"Dialogue",
		"Branch",
		"Script"
	};
	STRING_LIST(puppetsubactiontypeenum, puppetsubactiontypeenum_strings, _countof(puppetsubactiontypeenum_strings));

	STRINGS(subactiontimetypeenum)
	{
		"Offset From Start",
		"Offset From End",
		"Condition"
	};
	STRING_LIST(subactiontimetypeenum, subactiontimetypeenum_strings, _countof(subactiontimetypeenum_strings));

	#define PUPPETSUBACTIONPOINTSTRUCT_ID { 0x584F4F7A, 0x49054FE7, 0x8D7EA9C1, 0xE034E98F }
	TAG_STRUCT(
		puppetsubactionpointstruct,
		"PuppetSubActionPointStruct",
		"PuppetSubActionPointStruct",
		"s_puppetsubactionpointstruct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETSUBACTIONPOINTSTRUCT_ID)
	{
		{ _field_struct, "point", &puppetpathpointstruct },
		{ _field_tag_reference, "asset", &effect_group_sound_group_sound_looping_group_ai_mission_dialogue_group_reference },
		{ _field_byte_flags, "flags", &subactionpointflagsdefinition },
		FIELD_PAD("pad", 3),
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(effect_group_sound_group_sound_looping_group_ai_mission_dialogue_group_reference)
	{
		EFFECT_TAG,
		SOUND_TAG,
		SOUND_LOOPING_TAG,
		AI_MISSION_DIALOGUE_TAG,
		INVALID_TAG
	};

	STRINGS(subactionpointflagsdefinition)
	{
		"Looping Effect",
		"Attached Effect"
	};
	STRING_LIST(subactionpointflagsdefinition, subactionpointflagsdefinition_strings, _countof(subactionpointflagsdefinition_strings));

	#define PUPPETSUBACTIONSCRIPTSTRUCT_ID { 0x9481F465, 0xC8D546E8, 0x94DAE439, 0xC1BBE1C9 }
	TAG_STRUCT(
		puppetsubactionscriptstruct,
		"PuppetSubActionScriptStruct",
		"PuppetSubActionScriptStruct",
		"s_puppetsubactionscriptstruct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PUPPETSUBACTIONSCRIPTSTRUCT_ID)
	{
		{ _field_string_id, "scriptName" },
		{ _field_long_integer, "script" },
		{ _field_terminator }
	};

	#define PURCHASEAPPEARANCEDEFINITIONREFERENCESTRUCT_ID { 0x48833527, 0xA603470E, 0x9BD2329F, 0x76E43668 }
	TAG_STRUCT(
		purchaseappearancedefinitionreferencestruct,
		"PurchaseAppearanceDefinitionReferenceStruct",
		"PurchaseAppearanceDefinitionReferenceStruct",
		"s_purchaseappearancedefinitionreferencestruct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASEAPPEARANCEDEFINITIONREFERENCESTRUCT_ID)
	{
		{ _field_short_block_index, "item reference", &cookiepurchaseappearancedefinitionblock_block },
		FIELD_PAD("pad1", 2),
		{ _field_terminator }
	};

	#define PURCHASELOADOUTDEFINITIONREFERENCESTRUCT_ID { 0x74268E4, 0x4CD54AC6, 0xA50A5222, 0xC59797D2 }
	TAG_STRUCT(
		purchaseloadoutdefinitionreferencestruct,
		"PurchaseLoadoutDefinitionReferenceStruct",
		"PurchaseLoadoutDefinitionReferenceStruct",
		"s_purchaseloadoutdefinitionreferencestruct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASELOADOUTDEFINITIONREFERENCESTRUCT_ID)
	{
		{ _field_short_block_index, "item reference", &cookiepurchaseloadoutdefinitionblock_block },
		FIELD_PAD("pad1", 2),
		{ _field_terminator }
	};

	#define PURCHASEORDNANCEDEFINITIONREFERENCESTRUCT_ID { 0x9B560063, 0x138A4E32, 0x8D089C68, 0x9FB1BF32 }
	TAG_STRUCT(
		purchaseordnancedefinitionreferencestruct,
		"PurchaseOrdnanceDefinitionReferenceStruct",
		"PurchaseOrdnanceDefinitionReferenceStruct",
		"s_purchaseordnancedefinitionreferencestruct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASEORDNANCEDEFINITIONREFERENCESTRUCT_ID)
	{
		{ _field_short_block_index, "item reference", &cookiepurchaseordnancedefinitionblock_block },
		FIELD_PAD("pad1", 2),
		{ _field_terminator }
	};

	#define PURCHASEPLAYERAPPEARANCEPOSEBLOCK_ID { 0xA06F2621, 0xD35C48B2, 0x90F96D3C, 0x9CC32FC5 }
	TAG_STRUCT(
		purchaseplayerappearanceposeblock,
		"PurchasePlayerAppearancePoseBlock",
		"PurchasePlayerAppearancePoseBlock",
		"s_purchaseplayerappearanceposeblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASEPLAYERAPPEARANCEPOSEBLOCK_ID)
	{
		{ _field_string_id, "pose name" },
		{ _field_terminator }
	};

	#define PURCHASEPLAYERAPPEARANCESTRUCT_ID { 0xC34CFE9C, 0x283240B7, 0x83483A7B, 0xBBFE2AB4 }
	TAG_STRUCT(
		purchaseplayerappearancestruct,
		"PurchasePlayerAppearanceStruct",
		"PurchasePlayerAppearanceStruct",
		"s_purchaseplayerappearancestruct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASEPLAYERAPPEARANCESTRUCT_ID)
	{
		{ _field_block, "permutations", &purchase_player_appearance_effect_model_permutation_block_block },
		{ _field_block, "armor effects permutations", &purchase_player_appearance_effect_non_model_permutation_block_block },
		{ _field_block, "visor tints", &purchase_player_appearance_effect_visor_tint_block_block },
		{ _field_block, "emblem indices", &purchase_player_appearance_effect_emblem_index_block_block },
		{ _field_block, "portrait poses", &purchaseplayerappearanceposeblock_block },
		{ _field_terminator }
	};

	#define PURCHASEPLAYERLOADOUTSTRUCT_ID { 0x8323E16A, 0x197C4288, 0x81964917, 0xCE56F651 }
	TAG_STRUCT(
		purchaseplayerloadoutstruct,
		"PurchasePlayerLoadoutStruct",
		"PurchasePlayerLoadoutStruct",
		"s_purchaseplayerloadoutstruct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASEPLAYERLOADOUTSTRUCT_ID)
	{
		{ _field_block, "items", &purchase_player_item_block_block },
		{ _field_block, "apps", &purchase_player_app_block_block },
		{ _field_block, "loadout slots", &purchase_player_loadout_slot_block_block },
		{ _field_block, "app and mod slots", &purchase_player_app_mod_slot_block_block },
		{ _field_terminator }
	};

	#define PURCHASEPLAYERORDNANCEITEMBLOCK_ID { 0xA0B64FD3, 0x6ADB4425, 0xADAD3F94, 0x2604A7D9 }
	TAG_STRUCT(
		purchaseplayerordnanceitemblock,
		"PurchasePlayerOrdnanceItemBlock",
		"PurchasePlayerOrdnanceItemBlock",
		"s_purchaseplayerordnanceitemblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASEPLAYERORDNANCEITEMBLOCK_ID)
	{
		{ _field_string_id, "ordnance_name", "This must match one of the global ordnance objects." },
		{ _field_terminator }
	};

	#define PURCHASEPLAYERORDNANCESLOTBLOCK_ID { 0x7BE3DDEA, 0x4CAB4B00, 0xBEC4F180, 0x47ACB4DF }
	TAG_STRUCT(
		purchaseplayerordnanceslotblock,
		"PurchasePlayerOrdnanceSlotBlock",
		"PurchasePlayerOrdnanceSlotBlock",
		"s_purchaseplayerordnanceslotblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASEPLAYERORDNANCESLOTBLOCK_ID)
	{
		{ _field_byte_integer, "slot_count", "Total slots you're allowed." },
		{ _field_terminator }
	};

	#define PURCHASEPLAYERORDNANCESTRUCT_ID { 0x9D6BC685, 0x26C04A2E, 0xB2A12034, 0xE3A23772 }
	TAG_STRUCT(
		purchaseplayerordnancestruct,
		"PurchasePlayerOrdnanceStruct",
		"PurchasePlayerOrdnanceStruct",
		"s_purchaseplayerordnancestruct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASEPLAYERORDNANCESTRUCT_ID)
	{
		{ _field_block, "ordnance items", &purchaseplayerordnanceitemblock_block },
		{ _field_block, "ordnance slots", &purchaseplayerordnanceslotblock_block },
		{ _field_terminator }
	};

	#define PURCHASEPREREQUISITEPURCHASEDAPPEARANCEITEMDEFINITIONBLOCK_ID { 0x125F94AF, 0x47D24BB4, 0xB12F2DB9, 0xB4614E8E }
	TAG_STRUCT(
		purchaseprerequisitepurchasedappearanceitemdefinitionblock,
		"PurchasePrerequisitePurchasedAppearanceItemDefinitionBlock",
		"PurchasePrerequisitePurchasedAppearanceItemDefinitionBlock",
		"s_purchaseprerequisitepurchasedappearanceitemdefinitionblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASEPREREQUISITEPURCHASEDAPPEARANCEITEMDEFINITIONBLOCK_ID)
	{
		{ _field_struct, "item reference", &purchaseappearancedefinitionreferencestruct },
		{ _field_terminator }
	};

	#define PURCHASEPREREQUISITEPURCHASEDLOADOUTITEMDEFINITIONBLOCK_ID { 0x56ECE124, 0x7ACA4648, 0x81DE2BA5, 0x80468087 }
	TAG_STRUCT(
		purchaseprerequisitepurchasedloadoutitemdefinitionblock,
		"PurchasePrerequisitePurchasedLoadoutItemDefinitionBlock",
		"PurchasePrerequisitePurchasedLoadoutItemDefinitionBlock",
		"s_purchaseprerequisitepurchasedloadoutitemdefinitionblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASEPREREQUISITEPURCHASEDLOADOUTITEMDEFINITIONBLOCK_ID)
	{
		{ _field_struct, "item reference", &purchaseloadoutdefinitionreferencestruct },
		{ _field_terminator }
	};

	#define PURCHASEPREREQUISITEPURCHASEDORDNANCEITEMDEFINITIONBLOCK_ID { 0x9F9F3603, 0xE3A84826, 0xAB19354F, 0xC2E3BC35 }
	TAG_STRUCT(
		purchaseprerequisitepurchasedordnanceitemdefinitionblock,
		"PurchasePrerequisitePurchasedOrdnanceItemDefinitionBlock",
		"PurchasePrerequisitePurchasedOrdnanceItemDefinitionBlock",
		"s_purchaseprerequisitepurchasedordnanceitemdefinitionblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASEPREREQUISITEPURCHASEDORDNANCEITEMDEFINITIONBLOCK_ID)
	{
		{ _field_struct, "item reference", &purchaseordnancedefinitionreferencestruct },
		{ _field_terminator }
	};

	#define PURCHASEPREREQUISITESUNIFIEDDEFINITIONBLOCK_ID { 0xF5FA6611, 0xE7704556, 0x9523C551, 0xFC8C0B41 }
	TAG_STRUCT(
		purchaseprerequisitesunifieddefinitionblock,
		"PurchasePrerequisitesUnifiedDefinitionBlock",
		"PurchasePrerequisitesUnifiedDefinitionBlock",
		"s_purchaseprerequisitesunifieddefinitionblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASEPREREQUISITESUNIFIEDDEFINITIONBLOCK_ID)
	{
		{ _field_string_id, "prerequisite purchased item error string" },
		{ _field_string_id, "prerequisite unlockable error string" },
		{ _field_string_id, "prerequisite offers error string" },
		{ _field_long_integer, "prerequisite enlistment count" },
		{ _field_block, "prerequisite grades", &purchase_prerequisite_grade_definition_block_block },
		{ _field_block, "prerequisite commendations", &purchase_prerequisite_commendation_definition_block_block },
		{ _field_block, "prerequisite appearance purchased items", &purchaseprerequisitepurchasedappearanceitemdefinitionblock_block },
		{ _field_block, "prerequisite loadout purchased items", &purchaseprerequisitepurchasedloadoutitemdefinitionblock_block },
		{ _field_block, "prerequisite ordnance purchased items", &purchaseprerequisitepurchasedordnanceitemdefinitionblock_block },
		{ _field_block, "prerequisite unlockables", &purchase_prerequisites_unlockable_definition_block_block },
		{ _field_block, "prerequisite offers", &purchase_prerequisites_offer_definition_block_block },
		{ _field_terminator }
	};

	#define RANDOMORDNANCEITEMBLOCK_ID { 0x55D5EEA, 0x705E45C9, 0xA93EEA28, 0x51622165 }
	TAG_STRUCT(
		randomordnanceitemblock,
		"RandomOrdnanceItemBlock",
		"RandomOrdnanceItemBlock",
		"s_randomordnanceitemblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RANDOMORDNANCEITEMBLOCK_ID)
	{
		{ _field_string_id, "ordnance_name", "This must match one of the global ordnance objects." },
		{ _field_terminator }
	};

	#define RENDERMODELBONEGROUPBLOCK_ID { 0xCECE183, 0xA7D74D0A, 0xA78A641B, 0xA8E8A6D }
	TAG_STRUCT(
		rendermodelbonegroupblock,
		"bone_group",
		"RenderModelBoneGroupBlock",
		"s_rendermodelbonegroupblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDERMODELBONEGROUPBLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "bones", &rendermodelnodeindexblock_block },
		{ _field_terminator }
	};

	#define RENDERMODELNODEINDEXBLOCK_ID { 0xEA52C9C3, 0x6EAF447E, 0x8B78348F, 0x9B765F30 }
	TAG_STRUCT(
		rendermodelnodeindexblock,
		"node_index",
		"RenderModelNodeIndexBlock",
		"s_rendermodelnodeindexblock",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDERMODELNODEINDEXBLOCK_ID)
	{
		{ _field_short_block_index, "node index", &render_model_node_block_block },
		{ _field_terminator }
	};

	#define RIGIDBODYSERIALIZEDSHAPESBLOCK_ID { 0x7AF718AD, 0x225C48BE, 0xB2985BDF, 0x8251524D }
	TAG_STRUCT(
		rigidbodyserializedshapesblock,
		"RigidBodySerializedShapesBlock",
		"RigidBodySerializedShapesBlock",
		"s_rigidbodyserializedshapesblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RIGIDBODYSERIALIZEDSHAPESBLOCK_ID)
	{
		{ _field_block, "Mopp Serialized Havok Data", &moppserializedhavokdatablock_block },
		{ _field_terminator }
	};

	#define SCENARIODISPENSERBLOCK_ID { 0x39795D38, 0x466141C4, 0xAFC2C37E, 0x99484D07 }
	TAG_STRUCT(
		scenariodispenserblock,
		"ScenarioDispenserBlock",
		"ScenarioDispenserBlock",
		"s_scenariodispenserblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIODISPENSERBLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenariodispenserpaletteblock_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "device data", &scenario_device_struct },
		{ _field_struct, "dispenser data", &scenariodispenserstruct },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		{ _field_terminator }
	};

	#define SCENARIODISPENSERPALETTEBLOCK_ID { 0x53B17F4, 0x2124761, 0xAE5E9461, 0x1EF58F3A }
	TAG_STRUCT(
		scenariodispenserpaletteblock,
		"ScenarioDispenserPaletteBlock",
		"ScenarioDispenserPaletteBlock",
		"s_scenariodispenserpaletteblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIODISPENSERPALETTEBLOCK_ID)
	{
		{ _field_tag_reference, "name", &device_dispenser_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(device_dispenser_group_reference, DEVICE_DISPENSER_TAG);

	#define SCENARIODISPENSERSTRUCT_ID { 0x84208927, 0xD6114C54, 0xA8CE7861, 0xB638A761 }
	TAG_STRUCT(
		scenariodispenserstruct,
		"ScenarioDispenserStruct",
		"ScenarioDispenserStruct",
		"s_scenariodispenserstruct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIODISPENSERSTRUCT_ID)
	{
		{ _field_byte_flags, "flags", &scenariodispenserflags },
		FIELD_PAD("pad", 3),
		{ _field_terminator }
	};

	STRINGS(scenariodispenserflags)
	{
		"usable from front only"
	};
	STRING_LIST(scenariodispenserflags, scenariodispenserflags_strings, _countof(scenariodispenserflags_strings));

	#define SCENARIOENTITYSTRUCT_ID { 0x5D32E50B, 0x2D59498A, 0xB59C777F, 0x8DE7F945 }
	TAG_STRUCT(
		scenarioentitystruct,
		"ScenarioEntityStruct",
		"ScenarioEntityStruct",
		"s_scenarioentitystruct",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIOENTITYSTRUCT_ID)
	{
		{ _field_real, "Entity Placeholder" },
		{ _field_terminator }
	};

	#define SCENARIOSPAWNERSTRUCT_ID { 0x2A28D8B0, 0xBA34E72, 0xB05C421E, 0x29871410 }
	TAG_STRUCT(
		scenariospawnerstruct,
		"ScenarioSpawnerStruct",
		"ScenarioSpawnerStruct",
		"s_scenariospawnerstruct",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIOSPAWNERSTRUCT_ID)
	{
		{ _field_real, "Spawner Placeholder" },
		{ _field_terminator }
	};

	#define SCENARIOUNITRECORDINGBLOCK_STRUCT_ID { 0x76AC662, 0x1CCA4061, 0x800A10D5, 0x3522A841 }
	TAG_STRUCT(
		scenariounitrecordingblock_struct,
		"ScenarioUnitRecordingBlock_struct",
		"ScenarioUnitRecordingBlock_struct",
		"s_scenariounitrecordingblock_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIOUNITRECORDINGBLOCK_STRUCT_ID)
	{
		{ _field_string, "name" },
		{ _field_long_integer, "sampling rate" },
		{ _field_long_integer, "num samples" },
		{ _field_long_integer, "Unit Recording version" },
		{ _field_data, "Unit Recording Data", &scenariounitrecordingdatadefinition },
		{ _field_terminator }
	};

	#define SENTRYPROPERTIESBLOCK_ID { 0x219B49E2, 0x77D04F5E, 0xB773D8E3, 0x249343D6 }
	TAG_STRUCT(
		sentrypropertiesblock,
		"SentryPropertiesBlock",
		"SentryPropertiesBlock",
		"s_sentrypropertiesblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SENTRYPROPERTIESBLOCK_ID)
	{
		{ _field_byte_flags, "behavior", &sentryturretbehaviorflagdefinition },
		FIELD_PAD("flagPad", 3),
		{ _field_real, "sight cone angle", "the cone that this sentry actually sees with; only used when scanning", "degrees" },
		{ _field_real, "alert range", "how far the sentry can see (sentry will track enemies within alert range, but not necessarily fire)", "world units" },
		{ _field_real, "attack range", "how far the sentry can shoot", "world units" },
		{ _field_real, "attack range score multiplier", "0 = No preference to targets in attack range; 0.5 = Targets in attack range get 50% score bonus" },
		{ _field_real, "light vehicle range scale", "0 = Default of 1; 1.5 = light vehicles are attacked at 1.5x attack range" },
		{ _field_real, "heavy vehicle range scale", "0 = Default of 1; 1.5 = light vehicles are attacked at 1.5x attack range" },
		{ _field_real, "flying vehicle range scale", "0 = Default of 1; 1.5 = light vehicles are attacked at 1.5x attack range" },
		{ _field_real, "light vehicle score bonus", "0 = No bonus preference for light vehicles; 0.5 = 50% score bonus for light vehicles" },
		{ _field_real, "heavy vehicle score bonus", "0 = No bonus preference for heavy vehicles; 0.5 = 50% score bonus for heavy vehicles" },
		{ _field_real, "flying vehicle score bonus", "0 = No bonus preference for flying vehicles; 0.5 = 50% score bonus for flying vehicles" },
		{ _field_real, "primary fire time", "how long the sentry waits before using its primary weapon barrel", "seconds" },
		{ _field_real, "secondary fire time", "how long the sentry waits before using its secondary weapon barrel", "seconds" },
		{ _field_tag_reference, "player entered alert range sound", "1st person sound to play when targeted player enters sentry's alert range", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "player exited alert range sound", "1st person sound to play when targeted player leaves sentry's alert range", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_terminator }
	};

	STRINGS(sentryturretbehaviorflagdefinition)
	{
		"performs yaw scanning",
		"secondary barrel starts enabled",
		"suppress secondary barrel for light vehicles#Can be used to prevent turret from using its big guns on a mongoose",
		"only use vehicle range scale if secondary barrel active",
		"only use vehicle score bonus if secondary barrel active"
	};
	STRING_LIST(sentryturretbehaviorflagdefinition, sentryturretbehaviorflagdefinition_strings, _countof(sentryturretbehaviorflagdefinition_strings));

	#define SERIALIZEDHAVOKGEOMETRYDATABLOCK_STRUCT_ID { 0xB831D0B0, 0x123446F2, 0x832BB0CF, 0x6CDDB759 }
	TAG_STRUCT(
		serializedhavokgeometrydatablock_struct,
		"SerializedHavokGeometryDataBlock_struct",
		"SerializedHavokGeometryDataBlock_struct",
		"s_serializedhavokgeometrydatablock_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SERIALIZEDHAVOKGEOMETRYDATABLOCK_STRUCT_ID)
	{
		{ _field_data, "Serialized Havok Data", &hkserializedcompressedmoppshapedata },
		{ _field_data, "Serialized Static Havok Data", &hkserializedcompressedstaticmeshshapedata },
		{ _field_long_integer, "collision type" },
		{ _field_long_integer, "RuntimeDeserializedBody Pointer" },
		{ _field_long_integer, "RuntimeDeserializedData Pointer" },
		{ _field_terminator }
	};

	#define SMOOTHSTOPPINGSTRUCT_ID { 0x1C96E22C, 0x1A2446F9, 0x9AAD81A4, 0xD9438878 }
	TAG_STRUCT(
		smoothstoppingstruct,
		"SmoothStoppingStruct",
		"SmoothStoppingStruct",
		"s_smoothstoppingstruct",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SMOOTHSTOPPINGSTRUCT_ID)
	{
		FIELD_GROUP_BEGIN("Smooth Stopping"),
		{ _field_short_enum, "settings options", &character_smooth_movement_settings_options },
		FIELD_EXPLANATION("Override Settings", "The following setting are applied when the Override option is chosen"),
		FIELD_PAD("csst_pad_2", 2),
		{ _field_real_bounds, "Stopping Distance", "Distance at which to begin slowing to a stop. Range provides variance.", nullptr, "[wu]" },
		{ _field_real_bounds, "Arrival Throttle", "Throttle magnitude desired upon arrival. Should be non zero, and greater than 0.1 to avoid super-slow stops", "range (0.05, 1.0)" },
		{ _field_real_bounds, "Stopping Power", "Power value used to determine stopping curve. Values <1 produce sharper stops, >1 produce more ease-in.", "exponent" },
		{ _field_real_bounds, "Idle Time", "seconds to idle when stopped.", "exponent" },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(character_smooth_movement_settings_options)
	{
		"Use Engine Default Settings",
		"Use Override Settings Below",
		"Disable"
	};
	STRING_LIST(character_smooth_movement_settings_options, character_smooth_movement_settings_options_strings, _countof(character_smooth_movement_settings_options_strings));

	#define SMOOTHTHROTTLESTRUCT_ID { 0xF42E4991, 0x8CCF4EFA, 0x930F7B51, 0x3B875FFE }
	TAG_STRUCT(
		smooththrottlestruct,
		"SmoothThrottleStruct",
		"SmoothThrottleStruct",
		"s_smooththrottlestruct",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SMOOTHTHROTTLESTRUCT_ID)
	{
		FIELD_GROUP_BEGIN("Smooth Throttle"),
		{ _field_short_enum, "settings options", &character_smooth_movement_settings_options },
		FIELD_EXPLANATION("Override Settings", "The following setting are applied when the Override option is chosen"),
		FIELD_PAD("csts_pad_2", 2),
		{ _field_real, "Starting Rate", "interpolation weight used for the first frame of movement from a stopped position.", "(0.0 to 1.0)" },
		{ _field_real, "Stopping Rate", "interpolation weight used for transitioning to a zero (stopped) throttle.", "(0.0 to 1.0)" },
		{ _field_real, "Max Linear Acceleration", "maximum linear acceleration limit for throttle magnitude during regular movement.", "throttle units per tick" },
		{ _field_real, "Max Linear Deceleration", "maximum linear deceleration limit for throttle magnitude during regular movement.", "throttle units per tick" },
		{ _field_angle, "Max Angular Acceleration", "maximum angular acceleration/deceleration limit for throttle changes.", "degrees per tick" },
		{ _field_real, "Max Reversal Linear Acceleration", "maximum linear Accel/Decel limit for throttle magnitude when reversing direction.", "throttle units per tick" },
		{ _field_angle, "Max Reversal Angular Acceleration", "maximum angular Accel/Decel limit for throttle heading when reversing direction.", "degrees per tick" },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define SOUNDBANKBLOCK_ID { 0xBA6C3A66, 0xF2B240C5, 0x8DB3E00A, 0x6129DCB6 }
	TAG_STRUCT(
		soundbankblock,
		"SoundBankBlock",
		"SoundBankBlock",
		"s_soundbankblock",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUNDBANKBLOCK_ID)
	{
		{ _field_string_id, "Sound bank name", "Name of the main sound bank." },
		{ _field_terminator }
	};

	#define SOUNDRTPCBLOCK_ID { 0x6EDCFD78, 0x11474177, 0xB8274D64, 0x1DD674B5 }
	TAG_STRUCT(
		soundrtpcblock,
		"SoundRTPCBlock",
		"SoundRTPCBlock",
		"s_soundrtpcblock",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUNDRTPCBLOCK_ID)
	{
		{ _field_long_block_index, "Attachment Index", "Sound attachment to affect", &global_object_attachment_block_block },
		{ _field_string_id, "Function", "Function to drive the RTPC" },
		{ _field_string_id, "RTPC Name", "WWise RTPC string name" },
		{ _field_long_integer, "RTPC name hash value" },
		{ _field_terminator }
	};

	#define SOUNDSUBTITLEBLOCK_ID { 0x1031970B, 0xDBCF4F62, 0xB1B5F44, 0x119CDDCF }
	TAG_STRUCT(
		soundsubtitleblock,
		"SoundSubtitleBlock",
		"SoundSubtitleBlock",
		"s_soundsubtitleblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUNDSUBTITLEBLOCK_ID)
	{
		{ _field_long_integer, "tagIndex" },
		{ _field_string_id, "subtitleName" },
		{ _field_terminator }
	};

	#define SOUNDSWEETENERBLOCK_ID { 0x443F16AA, 0x7A814B2A, 0x81FB74DE, 0xF7A23C5C }
	TAG_STRUCT(
		soundsweetenerblock,
		"SoundSweetenerBlock",
		"SoundSweetenerBlock",
		"s_soundsweetenerblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUNDSWEETENERBLOCK_ID)
	{
		{ _field_string_id, "Function", "Function to trigger the sweetener" },
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "Switch point", "value of the function (between 0 and 1) where the sound is triggered" },
		{ _field_long_integer, "Mode", "0 for triggering while function is decreasing, 1 for increasing (more modes to come?)" },
		{ _field_terminator }
	};

	#define SPAWNSETTINGS_STRUCT_DEFINITION_ID { 0xD4FD6AF4, 0xF1D44565, 0xB4FF38A0, 0xC43A50F8 }
	TAG_STRUCT(
		spawnsettings_struct_definition,
		"SpawnSettings_struct_definition",
		"SpawnSettings_struct_definition",
		"s_spawnsettings_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPAWNSETTINGS_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "minimum spawn time", "Absolute floor.  Used to put a few-frame delay between death and instaspawn.  Will not override longer minimum times.", "seconds" },
		{ _field_real, "min acceptable spawn score", "spawns with a score lower than this will never be used" },
		FIELD_EXPLANATION("Spawn Randomization", "Values that affect randomization of respawn point selection\nRuntime will use the largest of \'% best weight to use\' and \'Min absolute weight range\'"),
		{ _field_real, "maximum random spawn bias", "Controls how large of a random value gets added to each spawn point", "0 disables" },
		{ _field_real_fraction, "% num spawn points to use", "Example -\nOn a map with 140 respawn points, a value of 0.1 here\nwill choose randomly between up to the best 14 points.\nNumber of points considered is also limited by the following parameters and flags.\nIf next two parameters are 0, only points with the exact same weight as the highest\nscoring respawn point will be considered.  If 'Min absolute weight range' is 25 then\nthe best 'X' points within 25 points of the highest scoring point will be considered.", "0 uses only best point" },
		{ _field_real_fraction, "% best weight to use", "Example -\nValue of 0.25 will consider all points with weight within 25% of the highest scoring point.\nNote - At run-time, the larger of '% best weight to use' and 'Min absolute weight range' will be used.\nFor instance if '% best weight' is 0.1 and 'Min absolute weight' is 5.0' a max weight\nof 150 will use 15, but a max weight of 10 will fall back on the min weight of 5", "0 disables" },
		{ _field_real, "Min absolute weight range", "Example -\nValue of 50 will consider all points within 50 of the highest scoring point.\nNote - At run-time, the larger of '% best weight to use' and 'Min absolute weight range' will be used.\n", "0 disables" },
		{ _field_long_flags, "Flags", &spawnsettingsflagsdefinition },
		FIELD_EXPLANATION("Spawn Settings", "block index 0: influencer - Enemy Forbid\nblock index 1: influencer - Enemy Bias\nblock index 2: influencer - Ally Bias\nblock index 3: influencer - Selected Ally Bias\nblock index 4: influencer - Dead Teammate\nblock index 5: influencer - Respawn Zone\nblock index 6: influencer - Weapon\nblock index 7: influencer - Vehicle\nblock index 8: influencer - Projectile\nblock index 9: influencer - Equipment\nblock index 10: influencer - Fireteam 1 zone\nblock index 11: influencer - Fireteam 2 zone\nblock index 12: influencer - Fireteam 3 zone\nblock index 13: influencer - Fireteam 4 zone\nblock index 14: influencer - Drop Pod\nblock index 15: influencer - Auto Turret\n"),
		{ _field_block, "Spawn Settings", &influencerspawnsettingsblock_block },
		FIELD_EXPLANATION("ENEMY FORBID", "This is a tight cylinder around the player with a strong negative weight. It serves to protect players from spawning close to an enemy, or having and enemy spawn close to them."),
		{ _field_real, "ef full weight radius", nullptr, "wu" },
		{ _field_real, "ef fall-off radius", nullptr, "wu" },
		{ _field_block, "ef falloff function", "Multiplier applied to weight (domain is full weight radius to fall-off radius, range should be 0 to 1).", &spawn_influence_weight_falloff_function_block_block },
		{ _field_real, "ef upper height", nullptr, "wu" },
		{ _field_real, "ef lower height", nullptr, "wu" },
		{ _field_real, "ef weight" },
		FIELD_EXPLANATION("ENEMY BIAS", "This is a larger cylinder, with a size set specifically for the size of the map. It has a weak negative weight which falls to zero towards the outer radius. It serves to bias players away from spawning near enemies, or in enemy held areas."),
		{ _field_real, "eb full weight radius", nullptr, "wu" },
		{ _field_real, "eb fall-off radius", nullptr, "wu" },
		{ _field_block, "eb falloff function", "Multiplier applied to weight (domain is full weight radius to fall-off radius, range should be 0 to 1).", &spawn_influence_weight_falloff_function_block_block },
		{ _field_real, "eb upper height", nullptr, "wu" },
		{ _field_real, "eb lower height", nullptr, "wu" },
		{ _field_real, "eb weight" },
		FIELD_EXPLANATION("ALLY BIAS", "This is a larger cylinder, with a size set specifically for the size of the map. It has a weak positive weight which falls to zero towards the outer radius. It serves to bias players towards spawning with allies, or in areas which are controlled by friendly players."),
		{ _field_real, "ab full weight radius", nullptr, "wu" },
		{ _field_real, "ab fall-off radius", nullptr, "wu" },
		{ _field_block, "ab falloff function", "Multiplier applied to weight (domain is full weight radius to fall-off radius, range should be 0 to 1).", &spawn_influence_weight_falloff_function_block_block },
		{ _field_real, "ab upper height", nullptr, "wu" },
		{ _field_real, "ab lower height", nullptr, "wu" },
		{ _field_real, "ab weight" },
		FIELD_EXPLANATION("SELECTED ALLY BIAS", "Same as ALLY BIAS, but used when the ally is selected in the dead-camera."),
		{ _field_real, "sab full weight radius", nullptr, "wu" },
		{ _field_real, "sab fall-off radius", nullptr, "wu" },
		{ _field_block, "sab falloff function", "Multiplier applied to weight (domain is full weight radius to fall-off radius, range should be 0 to 1).", &spawn_influence_weight_falloff_function_block_block },
		{ _field_real, "sab upper height", nullptr, "wu" },
		{ _field_real, "sab lower height", nullptr, "wu" },
		{ _field_real, "sab weight" },
		FIELD_EXPLANATION("DEAD TEAMMATE BIAS", "Dead teammate influences are cylinders centered upon the body of a dead teammate (or the player�s own dead body)."),
		{ _field_real, "dt full weight radius", nullptr, "wu" },
		{ _field_real, "dt fall-off radius", nullptr, "wu" },
		{ _field_block, "dt falloff function", "Multiplier applied to weight (domain is full weight radius to fall-off radius, range should be 0 to 1).", &spawn_influence_weight_falloff_function_block_block },
		{ _field_real, "dt upper height", nullptr, "wu" },
		{ _field_real, "dt lower height", nullptr, "wu" },
		{ _field_real, "dt weight" },
		{ _field_real, "dead teammate influence duration", nullptr, "seconds" },
		FIELD_EXPLANATION("DROP POD BIAS", "Drop pods influences are cylinders centered on unclaimed ordnance."),
		{ _field_real, "Drop Pod full weight radius", nullptr, "wu" },
		{ _field_real, "Drop Pod fall-off radius", nullptr, "wu" },
		{ _field_block, "Drop Pod falloff function", "Multiplier applied to weight (domain is full weight radius to fall-off radius, range should be 0 to 1).", &spawn_influence_weight_falloff_function_block_block },
		{ _field_real, "Drop Pod upper height", nullptr, "wu" },
		{ _field_real, "Drop Pod lower height", nullptr, "wu" },
		{ _field_real, "Drop Pod weight" },
		FIELD_EXPLANATION("PLAYER AUTO TURRET BIAS", "Auto Turret influences are cylinders centered on players\' auto turrets."),
		{ _field_real, "Auto Turret full weight radius", nullptr, "wu" },
		{ _field_real, "Auto Turret fall-off radius", nullptr, "wu" },
		{ _field_block, "Auto Turret falloff function", "Multiplier applied to weight (domain is full weight radius to fall-off radius, range should be 0 to 1).", &spawn_influence_weight_falloff_function_block_block },
		{ _field_real, "Auto Turret upper height", nullptr, "wu" },
		{ _field_real, "Auto Turret lower height", nullptr, "wu" },
		{ _field_real, "Auto Turret weight" },
		FIELD_EXPLANATION("WEAPON INFLUENCERS", "These influencers are induced by weapons either weilded or carried in the player\'s backpack"),
		{ _field_block, "weapon influencers", &weaponspawninfluenceblock_block },
		FIELD_EXPLANATION("VEHICLE INFLUENCERS", "These influencers are induced by vehicles."),
		{ _field_block, "vehicle influencers", &vehiclespawninfluenceblock_block },
		FIELD_EXPLANATION("PROJECTILE INFLUENCERS", "These influencers are induced by projectiles."),
		{ _field_block, "projectile influencers", &projectilespawninfluenceblock_block },
		FIELD_EXPLANATION("EQUIPMENT INFLUENCERS", "These influencers are induced by equipment."),
		{ _field_block, "equipment influencers", &equipmentspawninfluenceblock_block },
		{ _field_terminator }
	};

	STRINGS(spawnsettingsflagsdefinition)
	{
		"Allow negative weights in randomization#If checked, negative weighted respawn points are treated the same as ones with positive weight.\nIf not checked, negative respawn points aren\'t grouped with positive weighted respawn points."
	};
	STRING_LIST(spawnsettingsflagsdefinition, spawnsettingsflagsdefinition_strings, _countof(spawnsettingsflagsdefinition_strings));

	#define STREAMINGPACKBLOCK_ID { 0x3D42E3DF, 0xF0B74E4A, 0xB9FE7D41, 0x8FA6B7D5 }
	TAG_STRUCT(
		streamingpackblock,
		"StreamingPackBlock",
		"StreamingPackBlock",
		"s_streamingpackblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STREAMINGPACKBLOCK_ID)
	{
		{ _field_long_flags, "flags", &streamingpackblockflags },
		{ _field_string, "Streaming pck file", "Name of the stream pack file" },
		{ _field_terminator }
	};

	STRINGS(streamingpackblockflags)
	{
		"Language pack",
		"Sound bank pack"
	};
	STRING_LIST(streamingpackblockflags, streamingpackblockflags_strings, _countof(streamingpackblockflags_strings));

	#define STREAMINGZONESETRESOURCEIDBLOCK_ID { 0xB75F1E6A, 0xC7404EA3, 0x9887D440, 0x19A74440 }
	TAG_STRUCT(
		streamingzonesetresourceidblock,
		"StreamingZoneSetResourceIdBlock",
		"StreamingZoneSetResourceIdBlock",
		"s_streamingzonesetresourceidblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STREAMINGZONESETRESOURCEIDBLOCK_ID)
	{
		{ _field_tag_reference, "streaming_reference_tag", &bitmap_group_reference$5 },
		{ _field_terminator }
	};

	TAG_REFERENCE(bitmap_group_reference$5, BITMAP_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR);

	#define STREAMINGZONESETRESOURCELEVELSBLOCK_ID { 0x6AF99B48, 0x35C844BC, 0xBD960219, 0x46328592 }
	TAG_STRUCT(
		streamingzonesetresourcelevelsblock,
		"StreamingZoneSetResourceLevelsBlock",
		"StreamingZoneSetResourceLevelsBlock",
		"s_streamingzonesetresourcelevelsblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STREAMINGZONESETRESOURCELEVELSBLOCK_ID)
	{
		{ _field_byte_integer, "streaming subregion requested resolution" },
		{ _field_terminator }
	};

	#define STREAMINGZONESETRESOURCESUBREGIONDATABLOCK_ID { 0x3659BA90, 0xEB274E39, 0x8321B278, 0x21709F01 }
	TAG_STRUCT(
		streamingzonesetresourcesubregiondatablock,
		"StreamingZoneSetResourceSubregionDataBlock",
		"StreamingZoneSetResourceSubregionDataBlock",
		"s_streamingzonesetresourcesubregiondatablock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STREAMINGZONESETRESOURCESUBREGIONDATABLOCK_ID)
	{
		{ _field_long_integer, "block offset X" },
		{ _field_long_integer, "block offset Y" },
		{ _field_real, "min Z" },
		{ _field_real, "max Z" },
		{ _field_block, "resource levels", &streamingzonesetresourcelevelsblock_block },
		{ _field_terminator }
	};

	#define STRINGBLOCK_ID { 0xB75016D8, 0xEA3C4FFD, 0x87191515, 0x56803132 }
	TAG_STRUCT(
		stringblock,
		"StringBlock",
		"StringBlock",
		"s_stringblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRINGBLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	#define SUBTRACKSBLOCK_ID { 0xF9329491, 0xB5DC4B17, 0x907B46B1, 0x9065CF79 }
	TAG_STRUCT(
		subtracksblock,
		"SubTracksBlock",
		"SubTracksBlock",
		"s_subtracksblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SUBTRACKSBLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	#define SUPPRESSEDINCIDENTBLOCKREFERENCEDEFINITION_ID { 0x6BB34F94, 0x60A4411A, 0x9BA76EA7, 0x91D1D9A8 }
	TAG_STRUCT(
		suppressedincidentblockreferencedefinition,
		"SuppressedIncidentBlockReferenceDefinition",
		"SuppressedIncidentBlockReferenceDefinition",
		"s_suppressedincidentblockreferencedefinition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SUPPRESSEDINCIDENTBLOCKREFERENCEDEFINITION_ID)
	{
		{ _field_tag_reference, "suppression block", &suppressedincident_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(suppressedincident_group_reference, SUPPRESSEDINCIDENT_TAG);

	#define SUPPRESSEDINCIDENT_STRUCT_DEFINITION_ID { 0xD30BEC71, 0x3F404567, 0x83A6CB68, 0xF2572EFF }
	TAG_STRUCT(
		suppressedincident_struct_definition,
		"SuppressedIncident_struct_definition",
		"SuppressedIncident_struct_definition",
		"s_suppressedincident_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SUPPRESSEDINCIDENT_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "suppressed incidents", &suppressed_incident_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_terminator }
	};

	#define SWAPTAGREFERENCEDEFINITION_ID { 0x60312DAA, 0xFAEB4AB4, 0xB8D8FC27, 0xED5127A8 }
	TAG_STRUCT(
		swaptagreferencedefinition,
		"SwapTagReferenceDefinition",
		"SwapTagReferenceDefinition",
		"s_swaptagreferencedefinition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SWAPTAGREFERENCEDEFINITION_ID)
	{
		{ _field_tag_reference, "original tag", &_reference$12 },
		{ _field_tag_reference, "replacement tag", &_reference$12 },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference$12, INVALID_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define SYNCKEYBLOCK_ID { 0xFB3CC58F, 0xFAD949D9, 0x8879258F, 0x357D1085 }
	TAG_STRUCT(
		synckeyblock,
		"SyncKeyBlock",
		"SyncKeyBlock",
		"s_synckeyblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SYNCKEYBLOCK_ID)
	{
		{ _field_short_enum, "key", &frame_event_type_new },
		{ _field_terminator }
	};

	STRINGS(frame_event_type_new)
	{
		"none",
		"primary keyframe{primary_keyframe}",
		"secondary keyframe{secondary_keyframe}",
		"tertiary keyframe",
		"left foot{left_foot}",
		"right foot{right_foot}",
		"allow interruption{allow_interruption}",
		"do not allow interruption",
		"both-feet shuffle",
		"body impact",
		"left foot lock",
		"left foot unlock",
		"right foot lock",
		"right foot unlock",
		"blend range marker",
		"stride expansion",
		"stride contraction",
		"ragdoll keyframe",
		"drop weapon keyframe",
		"match a",
		"match b",
		"match c",
		"match d",
		"jetpack closed",
		"jetpack open",
		"sound event",
		"effect event"
	};
	STRING_LIST(frame_event_type_new, frame_event_type_new_strings, _countof(frame_event_type_new_strings));

	#define USERINTERFACEGAMESCREENSEQUENCESTEPDEFINITION_ID { 0x790FA350, 0xA4944DE5, 0x837B32AD, 0x52620CA4 }
	TAG_STRUCT(
		userinterfacegamescreensequencestepdefinition,
		"UserInterfaceGameScreenSequenceStepDefinition",
		"UserInterfaceGameScreenSequenceStepDefinition",
		"s_userinterfacegamescreensequencestepdefinition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACEGAMESCREENSEQUENCESTEPDEFINITION_ID)
	{
		{ _field_byte_flags, "flags", &uigamestartsequenceflagsdefinition },
		FIELD_PAD("UMPKIU", 3),
		{ _field_tag_reference, "screen", &cui_screen_group_reference$2 },
		{ _field_short_integer, "startTime", nullptr, "ticks" },
		{ _field_short_integer, "endTime", nullptr, "ticks" },
		{ _field_terminator }
	};

	STRINGS(uigamestartsequenceflagsdefinition)
	{
		"show loadout menu",
		"loadout menu close ends sequence"
	};
	STRING_LIST(uigamestartsequenceflagsdefinition, uigamestartsequenceflagsdefinition_strings, _countof(uigamestartsequenceflagsdefinition_strings));

	TAG_REFERENCE(cui_screen_group_reference$2, CUI_SCREEN_TAG);

	#define USERINTERFACESTYLESHEETALIGNMENTBLOCK_ID { 0x4B81A801, 0x5BCB44F2, 0x85CE1AFF, 0x52B2B89C }
	TAG_STRUCT(
		userinterfacestylesheetalignmentblock,
		"UserInterfaceStyleSheetAlignmentBlock",
		"UserInterfaceStyleSheetAlignmentBlock",
		"s_userinterfacestylesheetalignmentblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACESTYLESHEETALIGNMENTBLOCK_ID)
	{
		{ _field_long_enum, "alignment", &alignment_enum },
		{ _field_terminator }
	};

	STRINGS(alignment_enum)
	{
		"top",
		"bottom",
		"center"
	};
	STRING_LIST(alignment_enum, alignment_enum_strings, _countof(alignment_enum_strings));

	#define USERINTERFACESTYLESHEETCOLORBLOCK_ID { 0x5FAF93B6, 0x5AF943A6, 0xA7655CBE, 0xF33914E7 }
	TAG_STRUCT(
		userinterfacestylesheetcolorblock,
		"UserInterfaceStyleSheetColorBlock",
		"UserInterfaceStyleSheetColorBlock",
		"s_userinterfacestylesheetcolorblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACESTYLESHEETCOLORBLOCK_ID)
	{
		{ _field_real_argb_color, "color" },
		{ _field_terminator }
	};

	#define USERINTERFACESTYLESHEETDROPSHADOWSTYLEBLOCK_ID { 0xD10ED3B2, 0x6C5D4A22, 0x85467B00, 0x716A2FEC }
	TAG_STRUCT(
		userinterfacestylesheetdropshadowstyleblock,
		"UserInterfaceStyleSheetDropShadowStyleBlock",
		"UserInterfaceStyleSheetDropShadowStyleBlock",
		"s_userinterfacestylesheetdropshadowstyleblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACESTYLESHEETDROPSHADOWSTYLEBLOCK_ID)
	{
		{ _field_long_enum, "drop shadow style", &drop_shadow_style_enum },
		{ _field_terminator }
	};

	STRINGS(drop_shadow_style_enum)
	{
		"none",
		"drop",
		"outline"
	};
	STRING_LIST(drop_shadow_style_enum, drop_shadow_style_enum_strings, _countof(drop_shadow_style_enum_strings));

	#define USERINTERFACESTYLESHEETDROPSHADOWBLOCK_ID { 0xDA87E841, 0x4AF40A3, 0xA13AC821, 0xA28E40C4 }
	TAG_STRUCT(
		userinterfacestylesheetdropshadowblock,
		"UserInterfaceStyleSheetDropshadowBlock",
		"UserInterfaceStyleSheetDropshadowBlock",
		"s_userinterfacestylesheetdropshadowblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACESTYLESHEETDROPSHADOWBLOCK_ID)
	{
		{ _field_string_id, "dropshadow name" },
		{ _field_real_argb_color, "color" },
		{ _field_real, "angle" },
		{ _field_real, "distance" },
		{ _field_real, "spread" },
		{ _field_real, "size" },
		{ _field_terminator }
	};

	#define USERINTERFACESTYLESHEETFIXEDHEIGHTBLOCK_ID { 0x84C93CAC, 0x83CD4CCC, 0x998C57E3, 0xBF18BC0B }
	TAG_STRUCT(
		userinterfacestylesheetfixedheightblock,
		"UserInterfaceStyleSheetFixedHeightBlock",
		"UserInterfaceStyleSheetFixedHeightBlock",
		"s_userinterfacestylesheetfixedheightblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACESTYLESHEETFIXEDHEIGHTBLOCK_ID)
	{
		{ _field_real, "height" },
		{ _field_terminator }
	};

	#define USERINTERFACESTYLESHEETFONTIDBLOCK_ID { 0x5BE81BA7, 0x18004680, 0xA65EB74C, 0x4E929FBD }
	TAG_STRUCT(
		userinterfacestylesheetfontidblock,
		"UserInterfaceStyleSheetFontIdBlock",
		"UserInterfaceStyleSheetFontIdBlock",
		"s_userinterfacestylesheetfontidblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACESTYLESHEETFONTIDBLOCK_ID)
	{
		{ _field_long_enum, "font id", &global_font_id_enum_definition },
		{ _field_terminator }
	};

	STRINGS(global_font_id_enum_definition)
	{
		"terminal font",
		"baksheesh_15_font",
		"baksheesh_16_font",
		"baksheesh_17_font",
		"baksheesh_18_font",
		"baksheesh_20_font",
		"baksheesh_21_font",
		"baksheesh_22_font",
		"baksheesh_28_font",
		"baksheesh_36_font",
		"baksheesh_38_font",
		"baksheesh_bold_16_font",
		"baksheesh_bold_20_font",
		"baksheesh_bold_21_font",
		"baksheesh_bold_23_font",
		"baksheesh_bold_24_font",
		"baksheesh_thin_36",
		"baksheesh_thin_42",
		"arame_regular_16",
		"arame_regular_18",
		"arame_regular_23",
		"arame_stencil_16",
		"arame_stencil_18",
		"arame_stencil_23",
		"arame_thin_14",
		"arame_thin_16",
		"arame_thin_18",
		"arame_thin_23",
		"arame_extra_01",
		"arame_extra_02",
		"arame_extra_03"
	};
	STRING_LIST(global_font_id_enum_definition, global_font_id_enum_definition_strings, _countof(global_font_id_enum_definition_strings));

	#define USERINTERFACESTYLESHEETGRADIENTBLOCK_ID { 0x1AC5DF38, 0x6EA64B1C, 0xAA35ED88, 0x791D8F42 }
	TAG_STRUCT(
		userinterfacestylesheetgradientblock,
		"UserInterfaceStyleSheetGradientBlock",
		"UserInterfaceStyleSheetGradientBlock",
		"s_userinterfacestylesheetgradientblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACESTYLESHEETGRADIENTBLOCK_ID)
	{
		{ _field_string_id, "gradient name" },
		{ _field_real_argb_color, "color1" },
		{ _field_real_argb_color, "color2" },
		{ _field_real_argb_color, "color3" },
		{ _field_real_argb_color, "color4" },
		{ _field_real, "angle" },
		{ _field_real, "scale" },
		{ _field_real_vector_2d, "offset" },
		{ _field_long_integer, "number of colors" },
		{ _field_long_enum, "gradient shape", &gradient_shape_enum },
		{ _field_terminator }
	};

	STRINGS(gradient_shape_enum)
	{
		"linear",
		"circular",
		"diamond",
		"square"
	};
	STRING_LIST(gradient_shape_enum, gradient_shape_enum_strings, _countof(gradient_shape_enum_strings));

	#define USERINTERFACESTYLESHEETJUSTIFICATIONBLOCK_ID { 0x7A8DC166, 0x65D643A1, 0xB0736299, 0xEDDA2DF0 }
	TAG_STRUCT(
		userinterfacestylesheetjustificationblock,
		"UserInterfaceStyleSheetJustificationBlock",
		"UserInterfaceStyleSheetJustificationBlock",
		"s_userinterfacestylesheetjustificationblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACESTYLESHEETJUSTIFICATIONBLOCK_ID)
	{
		{ _field_long_enum, "justification", &justification_enum },
		{ _field_terminator }
	};

	STRINGS(justification_enum)
	{
		"left",
		"right",
		"center"
	};
	STRING_LIST(justification_enum, justification_enum_strings, _countof(justification_enum_strings));

	#define USERINTERFACESTYLESHEETLANGUAGESBLOCK_ID { 0xB9A0F180, 0xC79A4D66, 0xAEE61E30, 0x3F3DCC4F }
	TAG_STRUCT(
		userinterfacestylesheetlanguagesblock,
		"UserInterfaceStyleSheetLanguagesBlock",
		"UserInterfaceStyleSheetLanguagesBlock",
		"s_userinterfacestylesheetlanguagesblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACESTYLESHEETLANGUAGESBLOCK_ID)
	{
		{ _field_long_enum, "language", &style_sheet_language_enum_definition },
		{ _field_block, "font style sheets", &userinterfacestylesheetsfontblock_block },
		{ _field_block, "visual style sheets", &userinterfacestylesheetsvisualblock_block },
		{ _field_terminator }
	};

	STRINGS(style_sheet_language_enum_definition)
	{
		"english",
		"japanese",
		"german",
		"french",
		"spanish",
		"mexican spanish",
		"italian",
		"korean",
		"chinese-traditional",
		"chinese-simplified",
		"portuguese",
		"polish",
		"russian",
		"danish",
		"finnish",
		"dutch",
		"norwegian"
	};
	STRING_LIST(style_sheet_language_enum_definition, style_sheet_language_enum_definition_strings, _countof(style_sheet_language_enum_definition_strings));

	#define USERINTERFACESTYLESHEETOUTERGLOWBLOCK_ID { 0xC337C467, 0x110E4346, 0x8C3AECD1, 0x9D9D6605 }
	TAG_STRUCT(
		userinterfacestylesheetouterglowblock,
		"UserInterfaceStyleSheetOuterGlowBlock",
		"UserInterfaceStyleSheetOuterGlowBlock",
		"s_userinterfacestylesheetouterglowblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACESTYLESHEETOUTERGLOWBLOCK_ID)
	{
		{ _field_string_id, "outer glow name" },
		{ _field_real_argb_color, "color" },
		{ _field_real, "spread" },
		{ _field_real, "size" },
		{ _field_terminator }
	};

	#define USERINTERFACESTYLESHEETSCALEBLOCK_ID { 0xC5F63A73, 0xD27A4AB9, 0x98FA924C, 0xED24C942 }
	TAG_STRUCT(
		userinterfacestylesheetscaleblock,
		"UserInterfaceStyleSheetScaleBlock",
		"UserInterfaceStyleSheetScaleBlock",
		"s_userinterfacestylesheetscaleblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACESTYLESHEETSCALEBLOCK_ID)
	{
		{ _field_real, "value" },
		{ _field_terminator }
	};

	#define USERINTERFACESTYLESHEETTEXTCASEBLOCK_ID { 0xB05F2549, 0x82BB4259, 0x8F19D0C0, 0x516F62B1 }
	TAG_STRUCT(
		userinterfacestylesheettextcaseblock,
		"UserInterfaceStyleSheetTextCaseBlock",
		"UserInterfaceStyleSheetTextCaseBlock",
		"s_userinterfacestylesheettextcaseblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACESTYLESHEETTEXTCASEBLOCK_ID)
	{
		{ _field_long_enum, "text case", &text_case_enum },
		{ _field_terminator }
	};

	STRINGS(text_case_enum)
	{
		"normal",
		"uppercase",
		"lowercase"
	};
	STRING_LIST(text_case_enum, text_case_enum_strings, _countof(text_case_enum_strings));

	#define USERINTERFACESTYLESHEETSFONTBLOCK_ID { 0xB11128E6, 0x68214537, 0xA8E93260, 0x4E69F10F }
	TAG_STRUCT(
		userinterfacestylesheetsfontblock,
		"UserInterfaceStyleSheetsFontBlock",
		"UserInterfaceStyleSheetsFontBlock",
		"s_userinterfacestylesheetsfontblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACESTYLESHEETSFONTBLOCK_ID)
	{
		{ _field_string_id, "style sheet name" },
		{ _field_block, "font id", &userinterfacestylesheetfontidblock_block },
		{ _field_block, "text case", &userinterfacestylesheettextcaseblock_block },
		{ _field_block, "justification", &userinterfacestylesheetjustificationblock_block },
		{ _field_block, "alignment", &userinterfacestylesheetalignmentblock_block },
		{ _field_block, "scale", &userinterfacestylesheetscaleblock_block },
		{ _field_block, "fixed height", &userinterfacestylesheetfixedheightblock_block },
		{ _field_terminator }
	};

	#define USERINTERFACESTYLESHEETSVISUALBLOCK_ID { 0x47874FB6, 0x2A7B457C, 0xACFAFE1A, 0xBCCC9980 }
	TAG_STRUCT(
		userinterfacestylesheetsvisualblock,
		"UserInterfaceStyleSheetsVisualBlock",
		"UserInterfaceStyleSheetsVisualBlock",
		"s_userinterfacestylesheetsvisualblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USERINTERFACESTYLESHEETSVISUALBLOCK_ID)
	{
		{ _field_string_id, "style sheet name" },
		{ _field_block, "drop shadow style", &userinterfacestylesheetdropshadowstyleblock_block },
		{ _field_block, "text color", &userinterfacestylesheetcolorblock_block },
		{ _field_block, "drop shadow color", &userinterfacestylesheetcolorblock_block },
		{ _field_string_id, "gradient name" },
		{ _field_string_id, "dropshadow name" },
		{ _field_string_id, "outer glow name" },
		{ _field_terminator }
	};

	#define VOLUMEFOGPARAMETERSDEFINITION_ID { 0xB9DBF7F3, 0xD9624CCE, 0xA7F3E00E, 0x10284AE }
	TAG_STRUCT(
		volumefogparametersdefinition,
		"VolumeFogParametersDefinition",
		"VolumeFogParametersDefinition",
		"s_volumefogparametersdefinition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VOLUMEFOGPARAMETERSDEFINITION_ID)
	{
		{ _field_real_rgb_color, "volume fog color" },
		{ _field_real, "volume fog color intensity" },
		{ _field_terminator }
	};

	#define WEAPONBARRELIRONSIGHTSSTRUCT_ID { 0x94301EC6, 0x12674924, 0xA2D79AE7, 0x9E4F10DE }
	TAG_STRUCT(
		weaponbarrelironsightsstruct,
		"WeaponBarrelIronSightsStruct",
		"WeaponBarrelIronSightsStruct",
		"s_weaponbarrelironsightsstruct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPONBARRELIRONSIGHTSSTRUCT_ID)
	{
		{ _field_real, "spread multiplier", "multiplies the spread error - use < 1.0 for more accuracy" },
		{ _field_real, "movement multiplier", "multipliers player maximum move speed" },
		{ _field_real, "aim speed multiplier" },
		{ _field_real, "auto zoom out time", "tick delay before zooming out upon release of iron sights zoom -- use 0 for single-zoom weapons, 5-10 for multi-zooms like sniper rifle" },
		{ _field_terminator }
	};

	#define WEAPONSOUNDRTPCBLOCK_ID { 0xE1F6E77A, 0x861C42FD, 0x959C4F0C, 0x143B5506 }
	TAG_STRUCT(
		weaponsoundrtpcblock,
		"WeaponSoundRTPCBlock",
		"WeaponSoundRTPCBlock",
		"s_weaponsoundrtpcblock",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPONSOUNDRTPCBLOCK_ID)
	{
		{ _field_long_block_index, "Attachment Index", "Sound attachment to affect - leave empty for main body", &global_object_attachment_block_block },
		{ _field_string_id, "Function", "Function to drive the RTPC" },
		{ _field_string_id, "RTPC Name", "WWise RTPC string name" },
		{ _field_long_integer, "RTPC name hash value" },
		{ _field_terminator }
	};

	#define WEAPONSOUNDSWEETENERBLOCK_ID { 0x2FD5FE86, 0x34154543, 0xB2B22E12, 0xE0FE66F0 }
	TAG_STRUCT(
		weaponsoundsweetenerblock,
		"WeaponSoundSweetenerBlock",
		"WeaponSoundSweetenerBlock",
		"s_weaponsoundsweetenerblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPONSOUNDSWEETENERBLOCK_ID)
	{
		{ _field_string_id, "Function", "Function to trigger the sweetener" },
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "Switch point", "value of the function (between 0 and 1) where the sound is triggered" },
		{ _field_long_integer, "Mode", "0 for triggering while function is decreasing, 1 for increasing (more modes to come?)" },
		{ _field_terminator }
	};

	#define WEAPONSPECIFICMARKERSBLOCK_ID { 0x6EDCC4BF, 0x9740432D, 0x85F0E1C2, 0x1CA4087B }
	TAG_STRUCT(
		weaponspecificmarkersblock,
		"WeaponSpecificMarkersBlock",
		"WeaponSpecificMarkersBlock",
		"s_weaponspecificmarkersblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPONSPECIFICMARKERSBLOCK_ID)
	{
		{ _field_string_id, "complete weapon name" },
		{ _field_string_id, "weapon class" },
		{ _field_string_id, "weapon name" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "right hand marker" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "left hand marker" },
		{ _field_terminator }
	};

	#define ACHIEVEMENTS_STRUCT_DEFINITION_ID { 0x21EA12AC, 0x29164C0A, 0x91892198, 0xD2724D89 }
	TAG_STRUCT(
		achievements_struct_definition,
		"achievements_struct_definition",
		"achievements_struct_definition",
		"s_achievements_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ACHIEVEMENTS_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "achievement", &single_achievement_definition_block_block },
		{ _field_terminator }
	};

	#define ACOUSTIC_SECTOR_POINT_BLOCK_ID { 0x4A9991E9, 0x655449F3, 0xA90B1648, 0x795B9508 }
	TAG_STRUCT(
		acoustic_sector_point_block,
		"acoustic_sector_point_block",
		"acoustic_sector_point_block",
		"s_acoustic_sector_point_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ACOUSTIC_SECTOR_POINT_BLOCK_ID)
	{
		{ _field_real_point_3d, "position" },
		{ _field_terminator }
	};

	#define ACTIVE_CAMO_GLOBALS_BLOCK_ID { 0x4034FF5E, 0x39D84C2D, 0x916CA4FB, 0xC7983BC }
	TAG_STRUCT(
		active_camo_globals_block,
		"active_camo_globals_block",
		"active_camo_globals_block",
		"s_active_camo_globals_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ACTIVE_CAMO_GLOBALS_BLOCK_ID)
	{
		{ _field_real, "biped speed reference", "for bipeds, the speed at which you are on the far right of the 'speed to max camo' graph", "wu/s" },
		{ _field_real, "vehicle speed reference", "for vehicles, the speed at which you are on the far right of the 'speed to max camo' graph", "wu/s" },
		{ _field_real_fraction, "camo value for game name", "minimum active camo percentage at which a player's game name will start becoming visible" },
		{ _field_struct, "camo value to distortion", &scalar_function_named_struct },
		{ _field_struct, "camo value to transparency", "maps active-camo percentage to alpha for THIRD PERSON rendering", &scalar_function_named_struct },
		{ _field_struct, "camo value to fp transparency", "maps active-camo percentage to alpha for FIRST PERSON rendering", &scalar_function_named_struct },
		{ _field_struct, "camo distortion texture strength", &scalar_function_named_struct },
		{ _field_real_vector_2d, "camo distortion scale" },
		{ _field_real_vector_2d, "camo distortion translate speed" },
		{ _field_tag_reference, "camo distortion texture", &bitmap_group_reference$3 },
		{ _field_real, "camo depth bias max distance", "This is used to deal with ugly rendering artifacts when camo is not fully on" },
		{ _field_struct, "camo depth bias function", "This is used to deal with ugly rendering artifacts when camo is not fully on", &scalar_function_named_struct },
		{ _field_block, "camo levels", &active_camo_level_definition_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(bitmap_group_reference$3, BITMAP_TAG);

	#define ACTIVE_CAMO_LEVEL_DEFINITION_BLOCK_ID { 0xE283DEAA, 0xD17B46FF, 0x8002F669, 0xF186E377 }
	TAG_STRUCT(
		active_camo_level_definition_block,
		"active_camo_level_definition_block",
		"active_camo_level_definition_block",
		"s_active_camo_level_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ACTIVE_CAMO_LEVEL_DEFINITION_BLOCK_ID)
	{
		{ _field_real, "grenade throw penalty", "reduces camo value by this much when throwing a grenade", "0..1" },
		{ _field_real, "melee penalty", "reduces camo by this much when meleeing", "0..1" },
		{ _field_real, "minimum dinged value", "when taking damage or doing other actions that reduce camo, we will never drop below this value" },
		{ _field_real, "interpolation time", "time it takes to interpolate from 0.0 to 1.0", "s" },
		{ _field_struct, "speed to maximum camo", &scalar_function_named_struct },
		{ _field_terminator }
	};

	#define ACTIVE_CAMO_PERCEPTION_PROPERTIES_ID { 0x2171E4A2, 0xBBD048D7, 0x80519BC3, 0xA65A5598 }
	TAG_STRUCT(
		active_camo_perception_properties,
		"active_camo_perception_properties",
		"active_camo_perception_properties",
		"s_active_camo_perception_properties",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ACTIVE_CAMO_PERCEPTION_PROPERTIES_ID)
	{
		{ _field_real_fraction, "partial invis amount", "this amount of active camouflage makes a target 'partially invisible'", nullptr, "[0,1]" },
		{ _field_real, "partial invis vision distance", "maximum vision distance for partially invisible targets. 0= unlimited", "world units" },
		{ _field_real, "partial invis awareness multiplier", "multiplier on our awareness speed for partially invisible targets. 0= no change. Should be in (0, 1].", nullptr, "[0,1]" },
		{ _field_real_fraction, "full invis amount", "this amount of active camouflage makes a target 'fully invisible'", nullptr, "[0,1]" },
		{ _field_real, "full invis vision distance", "maximum vision distance for fully invisible targets. 0= unlimited", "world units" },
		{ _field_real, "full invis awareness multiplier", "multiplier on our awareness speed for fully invisible targets. 0= no change. Should be in (0, 1].", nullptr, "[0,1]" },
		{ _field_terminator }
	};

	#define ADDITIONAL_NODE_DATA_BLOCK_ID { 0x29A1DD97, 0xBB8948F7, 0xB606A4F9, 0xA4728C90 }
	TAG_STRUCT(
		additional_node_data_block,
		"additional_node_data_block",
		"additional_node_data_block",
		"s_additional_node_data_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ADDITIONAL_NODE_DATA_BLOCK_ID)
	{
		{ _field_string_id, "node name" },
		{ _field_real_quaternion, "default rotation" },
		{ _field_real_point_3d, "default translation" },
		{ _field_real, "default scale" },
		{ _field_real_point_3d, "min bounds" },
		{ _field_real_point_3d, "max bounds" },
		{ _field_terminator }
	};

	#define AIEQUIPMENTTRAITAPPEARANCEBLOCK_ID { 0xA2186C77, 0x36B54B46, 0xA9AFB3E7, 0xC45F17C8 }
	TAG_STRUCT(
		aiequipmenttraitappearanceblock,
		"aiEquipmentTraitAppearanceBlock",
		"aiEquipmentTraitAppearanceBlock",
		"s_aiequipmenttraitappearanceblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AIEQUIPMENTTRAITAPPEARANCEBLOCK_ID)
	{
		FIELD_EXPLANATION("Appearance Traits", "Traits that affect the AI\'s appearance"),
		{ _field_char_enum, "active camo setting", &player_trait_active_camo },
		FIELD_PAD("pad", 3),
		{ _field_terminator }
	};

	STRINGS(player_trait_active_camo)
	{
		"unchanged",
		"off",
		"poor",
		"good",
		"excellent",
		"invisible"
	};
	STRING_LIST(player_trait_active_camo, player_trait_active_camo_strings, _countof(player_trait_active_camo_strings));

	#define AIEQUIPMENTTRAITSBLOCK_ID { 0xA4BC8CA7, 0xF0E14FAE, 0x98292262, 0xF2809C3A }
	TAG_STRUCT(
		aiequipmenttraitsblock,
		"aiEquipmentTraitsBlock",
		"aiEquipmentTraitsBlock",
		"s_aiequipmenttraitsblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AIEQUIPMENTTRAITSBLOCK_ID)
	{
		{ _field_block, "appearance traits", &aiequipmenttraitappearanceblock_block },
		{ _field_terminator }
	};

	#define AI_CUE_BLOCK_STRUCT_ID { 0x48B57F37, 0xDAD74E23, 0xAFAEB2CC, 0x3A1D25D7 }
	TAG_STRUCT(
		ai_cue_block_struct,
		"ai_cue_block_struct",
		"ai_cue_block_struct",
		"s_ai_cue_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_CUE_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_byte_flags, "flags", &cue_flags },
		{ _field_char_integer, "quick cue" },
		{ _field_short_integer, "editor folder" },
		{ _field_real_point_3d, "position" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_real_euler_angles_2d, "facing (yaw, pitch)", nullptr, "degrees" },
		{ _field_real, "roll" },
		FIELD_GROUP_BEGIN("distribution"),
		{ _field_struct, "distribution", &cue_distribution_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("payload"),
		{ _field_struct, "payload", &cue_payload_struct },
		FIELD_GROUP_END(),
		FIELD_PAD("no-cue-definition-index", 4),
		{ _field_terminator }
	};

	STRINGS(cue_flags)
	{
		"not initially placed",
		"passive stimulus"
	};
	STRING_LIST(cue_flags, cue_flags_strings, _countof(cue_flags_strings));

	#define AI_CUE_TEMPLATE_BLOCK_STRUCT_ID { 0x6A4327A8, 0x23424013, 0x82100EBF, 0x905BE117 }
	TAG_STRUCT(
		ai_cue_template_block_struct,
		"ai_cue_template_block_struct",
		"ai_cue_template_block_struct",
		"s_ai_cue_template_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_CUE_TEMPLATE_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_flags, "template_flags", &cue_template_flags },
		{ _field_block, "firing points", &firing_point_payload_block_block },
		{ _field_block, "stimulus", &stimulus_payload_block_block },
		{ _field_block, "combat cue", &combat_cue_payload_block_block },
		{ _field_terminator }
	};

	STRINGS(cue_template_flags)
	{
		"ignored",
		"passive stimulus"
	};
	STRING_LIST(cue_template_flags, cue_template_flags_strings, _countof(cue_template_flags_strings));

	#define AI_DEAFENING_ENCODED_PAS_BLOCK_ID { 0x8229AF1A, 0x7484AF9, 0xB927F592, 0xE928E357 }
	TAG_STRUCT(
		ai_deafening_encoded_pas_block,
		"ai_deafening_encoded_pas_block",
		"ai_deafening_encoded_pas_block",
		"s_ai_deafening_encoded_pas_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_DEAFENING_ENCODED_PAS_BLOCK_ID)
	{
		{ _field_long_integer, "encoded data" },
		{ _field_terminator }
	};

	#define AI_DIALOGUE_GLOBALS_STRUCT_DEFINITION_ID { 0x28A04827, 0x55DC4CE6, 0x95458C49, 0x9C6549DC }
	TAG_STRUCT(
		ai_dialogue_globals_struct_definition,
		"ai_dialogue_globals_struct_definition",
		"ai_dialogue_globals_struct_definition",
		"s_ai_dialogue_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_DIALOGUE_GLOBALS_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Global timing", nullptr),
		{ _field_real_bounds, "strike delay bounds", nullptr, "secs" },
		{ _field_real, "remind delay", nullptr, "secs" },
		{ _field_real, "cover curse chance" },
		FIELD_EXPLANATION("Player look settings", "used to play look and look_longtime dialogue in campain and firefight"),
		{ _field_real, "player look max distance", "defaults to 10 wu", "wu" },
		{ _field_real, "player look", "defaults to 3 secs", "secs" },
		{ _field_real, "player look long time", "defaults to 15 secs", "secs" },
		FIELD_EXPLANATION("Spartan nearby search distance", "this is used when checking if the player is with other spartan ais."),
		{ _field_real, "spartan nearby search distance", "defaults to 7 wu", "wu" },
		FIELD_EXPLANATION("Face friendly player distance", "when talking to friendly players within this distance, if not in combat, we will turn to face them."),
		{ _field_real, "face friendly player distance", "0: disable facing behavior", "wu" },
		FIELD_EXPLANATION("Space dialogue effect", "at some point this will be moved into the patterns block..."),
		{ _field_string_id, "space dialogue effect", "used for dialog lines started by a pattern with \"speaker in space\" set" },
		FIELD_EXPLANATION("Default stimulus suppressors", "when these stimuli are active on an actor, default stimulus permutations will be suppressed."),
		{ _field_block, "default stimulus suppressors", &default_stimulus_suppressor_block_block },
		FIELD_EXPLANATION("Imported Data. Don't touch me.", nullptr),
		{ _field_block, "vocalizations", &vocalization_definitions_block_block },
		{ _field_block, "patterns", &vocalization_patterns_block_block },
		FIELD_PAD("WWKMVLL", 12),
		{ _field_block, "dialogue data", &dialogue_data_block_block },
		{ _field_block, "involuntary data", &involuntary_data_block_block },
		{ _field_block, "predicted vocalizations", &predicted_data_block_block },
		{ _field_terminator }
	};

	#define AI_FULL_CUE_BLOCK_STRUCT_ID { 0x140AEEEF, 0xDB74495E, 0x9B67740E, 0xB59FA71 }
	TAG_STRUCT(
		ai_full_cue_block_struct,
		"ai_full_cue_block_struct",
		"ai_full_cue_block_struct",
		"s_ai_full_cue_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_FULL_CUE_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_byte_flags, "flags", &cue_flags },
		{ _field_char_integer, "quick cue" },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		{ _field_real_point_3d, "position" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_real_euler_angles_2d, "facing" },
		{ _field_real, "roll" },
		FIELD_EXPLANATION("Distribution", "The following blocks describe who will receive this cue."),
		FIELD_GROUP_BEGIN("distribution"),
		{ _field_struct, "distribution", &cue_distribution_struct },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Payload", "The following blocks describe the type of stimulus and related payload; you should only specify one."),
		FIELD_GROUP_BEGIN("payload"),
		{ _field_struct, "payload", &cue_payload_struct },
		FIELD_GROUP_END(),
		{ _field_long_block_index, "cue definition index", &ai_cue_block_block },
		{ _field_terminator }
	};

	#define AI_GLOBALS_CUSTOM_STIMULI_BLOCK_ID { 0xA198B553, 0x7BC942E7, 0xBD3BC6BE, 0x7D86F5DF }
	TAG_STRUCT(
		ai_globals_custom_stimuli_block,
		"ai_globals_custom_stimuli_block",
		"ai_globals_custom_stimuli_block",
		"s_ai_globals_custom_stimuli_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_GLOBALS_CUSTOM_STIMULI_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	#define AI_GLOBALS_DATA_BLOCK_STRUCT_ID { 0x1D0F80A0, 0xA5BD4A1B, 0x9A070B18, 0xA8706C11 }
	TAG_STRUCT(
		ai_globals_data_block_struct,
		"ai_globals_data_block_struct",
		"ai_globals_data_block_struct",
		"s_ai_globals_data_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_GLOBALS_DATA_BLOCK_STRUCT_ID)
	{
		{ _field_real, "AI infantry-on-AI weapon damage scale", "Global scale on weapon damage made by AI on other AI", nullptr, "[0,1]" },
		{ _field_real, "AI vehicle-on-AI weapon damage scale", "Global scale on weapon damage made by AI in a vehicle on other AI", nullptr, "[0,1]" },
		{ _field_real, "AI player vehicle-on-AI weapon damage scale", "Global scale on weapon damage made by AI in a vehicle with the player on other AI", nullptr, "[0,1]" },
		{ _field_real, "danger broadly facing" },
		{ _field_real, "danger shooting near" },
		{ _field_real, "danger shooting at" },
		{ _field_real, "danger extremely close" },
		{ _field_real, "danger shield damage" },
		{ _field_real, "danger exetended shield damage" },
		{ _field_real, "danger body damage" },
		{ _field_real, "danger extended body damage" },
		{ _field_tag_reference, "global dialogue tag", &ai_dialogue_globals_group_reference },
		{ _field_string_id, "default mission dialogue sound effect" },
		{ _field_real, "jump down", nullptr, "wu/tick" },
		{ _field_real, "jump step", nullptr, "wu/tick" },
		{ _field_real, "jump crouch", nullptr, "wu/tick" },
		{ _field_real, "jump stand", nullptr, "wu/tick" },
		{ _field_real, "jump storey", nullptr, "wu/tick" },
		{ _field_real, "jump tower", nullptr, "wu/tick" },
		FIELD_PAD("jump leap placeholder", 4),
		{ _field_real, "max jump down height down", nullptr, "wu" },
		{ _field_real, "max jump down height step", nullptr, "wu" },
		{ _field_real, "max jump down height crouch", nullptr, "wu" },
		{ _field_real, "max jump down height stand", nullptr, "wu" },
		{ _field_real, "max jump down height storey", nullptr, "wu" },
		{ _field_real, "max jump down height tower", nullptr, "wu" },
		FIELD_PAD("another leap placeholder", 4),
		{ _field_real_bounds, "hoist step", nullptr, "wus" },
		{ _field_real_bounds, "hoist crouch", nullptr, "wus" },
		{ _field_real_bounds, "hoist stand", nullptr, "wus" },
		{ _field_real_bounds, "vault step", nullptr, "wus" },
		{ _field_real_bounds, "vault crouch", nullptr, "wus" },
		FIELD_EXPLANATION("PATHFINDING SEARCH RANGES", "The maximum ranges to which firing point evaluations will do pathfinding searches. INCREASING THESE VALUES WILL ALMOST CERTAINLY HAVE A NEGATIVE IMPACT ON PERFORMANCE."),
		{ _field_real, "search range infantry", nullptr, "wus" },
		{ _field_real, "search range flying", nullptr, "wus" },
		{ _field_real, "search range vehicle", nullptr, "wus" },
		{ _field_real, "search range giant", nullptr, "wus" },
		{ _field_block, "gravemind properties", &ai_globals_gravemind_block_block },
		{ _field_real, "scary target threhold", "A target of this scariness is offically considered scary (by combat dialogue, etc.)" },
		{ _field_real, "scary weapon threhold", "A weapon of this scariness is offically considered scary (by combat dialogue, etc.)" },
		{ _field_real, "player scariness" },
		{ _field_real, "berserking actor scariness" },
		{ _field_real, "kamikazeing actor scariness" },
		{ _field_real, "invincible scariness", "when an actor's target is invincible, he is this much more scared" },
		FIELD_EXPLANATION("RESURRECTION", "A few properties to help define when it is safe for a mission critical character to ressurect."),
		{ _field_real, "min death time", "I will be dead for at least this long", "seconds" },
		{ _field_real, "projectile distance", "If there is a projectile within this distance of me, I'll stay dead", "wu" },
		{ _field_real, "idle clump distance", "If there is any enemy clump within this distance of me, I'll stay dead", "wu" },
		{ _field_real, "dangerous clump distance", "If there is any enemy clump with a status higher than idle within this distance of me, I'll stay dead", "wu" },
		FIELD_EXPLANATION("TELEPORTATION", "A few properties to help define when it is safe for a mission critical character to teleport."),
		{ _field_real, "cover search duration", "The number of seconds that must elapse before we try to look for a firing point behind cover to teleport to.", "seconds" },
		{ _field_real, "task direction search duration", "The number of seconds we try to look for a firing point that aligns us with the actor's task direction.", "seconds" },
		{ _field_block, "spawn formations", &ai_globals_formation_block_block },
		{ _field_block, "squad template folders", &ai_globals_squad_template_folder_block_block },
		{ _field_block, "performance template folders", &ai_globals_performance_template_folder_block_block },
		{ _field_block, "custom stimuli", &ai_globals_custom_stimuli_block_block },
		{ _field_block, "cue templates", &ai_cue_template_block_block },
		FIELD_EXPLANATION("CLUMP THROTTLING", "Some values to help you control how much guys will throttle when they want to stick with the rest of their squad."),
		{ _field_real, "stop dist", "At this distance from the squad, stop.", "wu" },
		{ _field_real, "resume dist", "At this distance from the squad, start again.", "wu" },
		{ _field_real, "min dist", "Start throttling back at this distance", "wu" },
		{ _field_real, "max dist", "Maximum trottle scale at this distance", "wu" },
		{ _field_real, "min scale", "Minimum throttle value.", "0-1" },
		FIELD_EXPLANATION("SQUAD PATROLLING", "Parameters related to squad patrolling."),
		{ _field_real, "passthrough chance", "Chance of passing through a patrol objective without pausing" },
		{ _field_real, "search phase skip chance", "Chance of skipping the search phase when stopped at a patrol objective" },
		{ _field_real, "patrol transition timeout", "If the squad takes more than this time to get to their new patrol point, cancel it and go on to the next.", "seconds" },
		{ _field_real, "patrol maneuver timeout", "If the squad takes longer than this time to reposition within a patrol point (e.g. searching and pausing), cancel the point and go on to the next.", "seconds" },
		{ _field_real_bounds, "patrol search firing point time", "spend this amount of time at a search firing position when in search phase", "seconds" },
		{ _field_real, "patrol isolation distance", "If you are more than this distance from your nearest squadmate, you are officially isolated.", "wus" },
		{ _field_real, "patrol isolation time", "If you are isolated for more than this time, you get deleted.", "seconds" },
		FIELD_EXPLANATION("KUNGFU CONTROL", "These parameters control how the kung-fu circle works (i.e. when tasks have kungfu-count associated with them)"),
		{ _field_real, "kungfu deactivation delay", "When a task is disallowed from shooting, turn it off after this delay", "seconds" },
		FIELD_GROUP_BEGIN("Presearch Child Counts (0 means no limit)"),
		{ _field_short_integer, "suppressing fire count" },
		{ _field_short_integer, "uncover count" },
		{ _field_short_integer, "leap on cover count" },
		{ _field_short_integer, "destroy cover count" },
		{ _field_short_integer, "guard count" },
		{ _field_short_integer, "investigate count" },
		FIELD_GROUP_END(),
		{ _field_block, "vision traits", &ai_trait_vision_block_block },
		{ _field_block, "sound traits", &ai_trait_sound_block_block },
		{ _field_block, "luck traits", &ai_trait_luck_block_block },
		{ _field_block, "grenade traits", &ai_trait_grenade_block_block },
		FIELD_GROUP_BEGIN("Search Pattern Specification"),
		{ _field_real, "max decay time" },
		{ _field_real, "decay time ping" },
		{ _field_real, "search pattern radius" },
		{ _field_short_integer, "search pattern shell count" },
		{ _field_short_integer_bounds, "search pattern cells per shell range" },
		FIELD_PAD("MOOOOOOO", 2),
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	TAG_REFERENCE(ai_dialogue_globals_group_reference, AI_DIALOGUE_GLOBALS_TAG);

	#define AI_GLOBALS_FORMATION_BLOCK_ID { 0x33FDDAB4, 0x3B8542AB, 0x9FC8A81A, 0x4E45A898 }
	TAG_STRUCT(
		ai_globals_formation_block,
		"ai_globals_formation_block",
		"ai_globals_formation_block",
		"s_ai_globals_formation_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_GLOBALS_FORMATION_BLOCK_ID)
	{
		{ _field_tag_reference, "formation", &formation_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(formation_group_reference, FORMATION_TAG);

	#define AI_GLOBALS_GRAVEMIND_BLOCK_ID { 0x5D6B3B9D, 0x1FC047FE, 0x8CDF19E7, 0xA287DA56 }
	TAG_STRUCT(
		ai_globals_gravemind_block,
		"ai_globals_gravemind_block",
		"ai_globals_gravemind_block",
		"s_ai_globals_gravemind_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_GLOBALS_GRAVEMIND_BLOCK_ID)
	{
		{ _field_real, "min retreat time", nullptr, "secs" },
		{ _field_real, "ideal retreat time", nullptr, "secs" },
		{ _field_real, "max retreat time", nullptr, "secs" },
		{ _field_terminator }
	};

	#define AI_GLOBALS_PERFORMANCE_TEMPLATE_BLOCK_ID { 0x8C59034C, 0x88C84BA4, 0xA2A249A4, 0xF4376EA3 }
	TAG_STRUCT(
		ai_globals_performance_template_block,
		"ai_globals_performance_template_block",
		"ai_globals_performance_template_block",
		"s_ai_globals_performance_template_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_GLOBALS_PERFORMANCE_TEMPLATE_BLOCK_ID)
	{
		{ _field_tag_reference, "thespian_template", &performance_template_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(performance_template_group_reference, PERFORMANCE_TEMPLATE_TAG);

	#define AI_GLOBALS_PERFORMANCE_TEMPLATE_FOLDER_BLOCK_STRUCT_ID { 0x2D27FA1B, 0xF6AD417B, 0x962BF0DA, 0xAAD11C5 }
	TAG_STRUCT(
		ai_globals_performance_template_folder_block_struct,
		"ai_globals_performance_template_folder_block_struct",
		"ai_globals_performance_template_folder_block_struct",
		"s_ai_globals_performance_template_folder_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_GLOBALS_PERFORMANCE_TEMPLATE_FOLDER_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "folder name" },
		{ _field_block, "sub folders", &ai_globals_performance_template_sub_folder_block_block },
		{ _field_block, "templates", &ai_globals_performance_template_block_block },
		{ _field_terminator }
	};

	#define AI_GLOBALS_PERFORMANCE_TEMPLATE_SUB_FOLDER_BLOCK_STRUCT_ID { 0xF6323DEC, 0xAC0C4CD9, 0xA340402D, 0x5B7A8313 }
	TAG_STRUCT(
		ai_globals_performance_template_sub_folder_block_struct,
		"ai_globals_performance_template_sub_folder_block_struct",
		"ai_globals_performance_template_sub_folder_block_struct",
		"s_ai_globals_performance_template_sub_folder_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_GLOBALS_PERFORMANCE_TEMPLATE_SUB_FOLDER_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "sub folder name" },
		{ _field_block, "templates", &ai_globals_performance_template_block_block },
		{ _field_terminator }
	};

	#define AI_GLOBALS_SQUAD_TEMPLATE_BLOCK_ID { 0xB77AC649, 0x5B2E4CA5, 0xA7AC56CB, 0x82C99E1B }
	TAG_STRUCT(
		ai_globals_squad_template_block,
		"ai_globals_squad_template_block",
		"ai_globals_squad_template_block",
		"s_ai_globals_squad_template_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_GLOBALS_SQUAD_TEMPLATE_BLOCK_ID)
	{
		{ _field_tag_reference, "squad_template", &squad_template_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(squad_template_group_reference, SQUAD_TEMPLATE_TAG);

	#define AI_GLOBALS_SQUAD_TEMPLATE_FOLDER_BLOCK_STRUCT_ID { 0xFCA99DE5, 0xF2F54C0F, 0xB4F47498, 0x3B390792 }
	TAG_STRUCT(
		ai_globals_squad_template_folder_block_struct,
		"ai_globals_squad_template_folder_block_struct",
		"ai_globals_squad_template_folder_block_struct",
		"s_ai_globals_squad_template_folder_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_GLOBALS_SQUAD_TEMPLATE_FOLDER_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "folder name" },
		{ _field_block, "sub folders", &ai_globals_squad_template_sub_folder_block_block },
		{ _field_block, "templates", &ai_globals_squad_template_block_block },
		{ _field_terminator }
	};

	#define AI_GLOBALS_SQUAD_TEMPLATE_SUB_FOLDER_BLOCK_STRUCT_ID { 0x411A7443, 0xDC4A4D55, 0xB4E36B7B, 0x17E72E0 }
	TAG_STRUCT(
		ai_globals_squad_template_sub_folder_block_struct,
		"ai_globals_squad_template_sub_folder_block_struct",
		"ai_globals_squad_template_sub_folder_block_struct",
		"s_ai_globals_squad_template_sub_folder_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_GLOBALS_SQUAD_TEMPLATE_SUB_FOLDER_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "sub folder name" },
		{ _field_block, "templates", &ai_globals_squad_template_block_block },
		{ _field_terminator }
	};

	#define AI_GLOBALS_STRUCT_DEFINITION_ID { 0xEFB33B8C, 0x80EC4724, 0x9858CAF2, 0x53DD39B3 }
	TAG_STRUCT(
		ai_globals_struct_definition,
		"ai_globals_struct_definition",
		"ai_globals_struct_definition",
		"s_ai_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_GLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "data", &ai_globals_data_block_block },
		{ _field_terminator }
	};

	#define AI_MISSION_DIALOGUE_STRUCT_DEFINITION_ID { 0x7A2D35B4, 0xCD53450D, 0xAEB0B227, 0x6940C1F4 }
	TAG_STRUCT(
		ai_mission_dialogue_struct_definition,
		"ai_mission_dialogue_struct_definition",
		"ai_mission_dialogue_struct_definition",
		"s_ai_mission_dialogue_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_MISSION_DIALOGUE_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "lines", &mission_dialogue_lines_block_block },
		{ _field_terminator }
	};

	#define AI_QUICK_CUE_BLOCK_STRUCT_ID { 0xA141B018, 0xEDC04D19, 0xABF077FB, 0x88C1F73 }
	TAG_STRUCT(
		ai_quick_cue_block_struct,
		"ai_quick_cue_block_struct",
		"ai_quick_cue_block_struct",
		"s_ai_quick_cue_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_QUICK_CUE_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_byte_flags, "flags", &quick_cue_flags },
		FIELD_PAD("post-flags", 1),
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		{ _field_real_point_3d, "position" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_real_euler_angles_2d, "facing" },
		{ _field_real, "roll" },
		{ _field_block, "tasks", &task_distribution_block_block },
		{ _field_short_block_index, "character", &character_palette_block_block },
		{ _field_short_block_index, "weapon", &scenario_weapon_palette_block_block },
		{ _field_string_id, "template" },
		{ _field_long_block_index, "cue definition index", &ai_cue_block_block },
		{ _field_terminator }
	};

	STRINGS(quick_cue_flags)
	{
		"don\'t distribute to children"
	};
	STRING_LIST(quick_cue_flags, quick_cue_flags_strings, _countof(quick_cue_flags_strings));

	#define AI_RECORDING_REFERENCE_BLOCK_ID { 0x5E862427, 0xA53A4CE0, 0xB153EC6F, 0x5E93FE9C }
	TAG_STRUCT(
		ai_recording_reference_block,
		"ai_recording_reference_block",
		"ai_recording_reference_block",
		"s_ai_recording_reference_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_RECORDING_REFERENCE_BLOCK_ID)
	{
		{ _field_string, "recording name" },
		FIELD_PAD("INYRGOR", 8),
		{ _field_terminator }
	};

	#define AI_SCENARIO_MISSION_DIALOGUE_BLOCK_ID { 0xCF7DF219, 0x442542E9, 0xB68E0E7E, 0xDE85A19D }
	TAG_STRUCT(
		ai_scenario_mission_dialogue_block,
		"ai_scenario_mission_dialogue_block",
		"ai_scenario_mission_dialogue_block",
		"s_ai_scenario_mission_dialogue_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_SCENARIO_MISSION_DIALOGUE_BLOCK_ID)
	{
		{ _field_tag_reference, "mission dialogue", &ai_mission_dialogue_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(ai_mission_dialogue_group_reference, AI_MISSION_DIALOGUE_TAG);

	#define AI_SCENE_BLOCK_ID { 0x9265CAD2, 0x80B9454D, 0xB8A86BFD, 0xB708BD17 }
	TAG_STRUCT(
		ai_scene_block,
		"ai_scene_block",
		"ai_scene_block",
		"s_ai_scene_block",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_SCENE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_flags, "flags", &scene_flags },
		{ _field_block, "trigger conditions", &ai_scene_trigger_block_block },
		FIELD_USELESS_PAD("value", 32),
		{ _field_block, "roles", &ai_scene_role_block_block },
		{ _field_terminator }
	};

	STRINGS(scene_flags)
	{
		"scene can play multiple times",
		"enable combat dialogue"
	};
	STRING_LIST(scene_flags, scene_flags_strings, _countof(scene_flags_strings));

	#define AI_SCENE_ROLE_BLOCK_ID { 0x6C92A6B, 0x349D43D3, 0x8915D8F3, 0x4A28DC0C }
	TAG_STRUCT(
		ai_scene_role_block,
		"ai_scene_role_block",
		"ai_scene_role_block",
		"s_ai_scene_role_block",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_SCENE_ROLE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_enum, "group", &role_group_enum },
		FIELD_PAD("XZUW", 2),
		FIELD_USELESS_PAD("value", 36),
		{ _field_block, "role variants", &ai_scene_role_variants_block_block },
		{ _field_terminator }
	};

	STRINGS(role_group_enum)
	{
		"group 1",
		"group 2",
		"group 3"
	};
	STRING_LIST(role_group_enum, role_group_enum_strings, _countof(role_group_enum_strings));

	#define AI_SCENE_ROLE_VARIANTS_BLOCK_ID { 0x20B5EEB2, 0x6BD64491, 0xA3E87909, 0xC58A4822 }
	TAG_STRUCT(
		ai_scene_role_variants_block,
		"ai_scene_role_variants_block",
		"ai_scene_role_variants_block",
		"s_ai_scene_role_variants_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_SCENE_ROLE_VARIANTS_BLOCK_ID)
	{
		{ _field_string_id, "variant designation" },
		{ _field_terminator }
	};

	#define AI_SCENE_TRIGGER_BLOCK_ID { 0x1D8A8E7B, 0xE8B24BB6, 0x9E90F7D4, 0x225EF2B1 }
	TAG_STRUCT(
		ai_scene_trigger_block,
		"ai_scene_trigger_block",
		"ai_scene_trigger_block",
		"s_ai_scene_trigger_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_SCENE_TRIGGER_BLOCK_ID)
	{
		{ _field_short_enum, "combination rule", &combination_rules_enum },
		FIELD_PAD("NJBJMKU", 2),
		{ _field_block, "triggers", &trigger_references_block },
		{ _field_terminator }
	};

	STRINGS(combination_rules_enum)
	{
		"OR",
		"AND"
	};
	STRING_LIST(combination_rules_enum, combination_rules_enum_strings, _countof(combination_rules_enum_strings));

	#define AI_SPAWN_CONDITIONS_STRUCT_ID { 0xF95BF66A, 0x46764415, 0xB6C52F11, 0xEFDE15CF }
	TAG_STRUCT(
		ai_spawn_conditions_struct,
		"ai_spawn_conditions_struct",
		"ai_spawn_conditions_struct",
		"s_ai_spawn_conditions_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_SPAWN_CONDITIONS_STRUCT_ID)
	{
		{ _field_word_flags, "difficulty flags", &global_campaign_difficulty_enum },
		FIELD_PAD("post-difficulty-flags-padding", 2),
		{ _field_terminator }
	};

	STRINGS(global_campaign_difficulty_enum)
	{
		"easy",
		"normal",
		"heroic",
		"legendary"
	};
	STRING_LIST(global_campaign_difficulty_enum, global_campaign_difficulty_enum_strings, _countof(global_campaign_difficulty_enum_strings));

	#define AI_TRAIT_GRENADE_BLOCK_STRUCT_ID { 0xB0F3099, 0x3F954756, 0x83E0F6F3, 0x74E85796 }
	TAG_STRUCT(
		ai_trait_grenade_block_struct,
		"ai_trait_grenade_block_struct",
		"ai_trait_grenade_block_struct",
		"s_ai_trait_grenade_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_TRAIT_GRENADE_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("Grenade Traits", "Traits that affect the AI\'s grenade use"),
		{ _field_real, "velocity scale", "Scale the velocity at which AI throws grenades" },
		{ _field_real, "throw grenade delay scale", "Scale the time between grenade throws." },
		{ _field_real, "don't drop grenades chance scale" },
		{ _field_real, "grenade uncover chance scale" },
		{ _field_real, "retreat throw grenade chance scale" },
		{ _field_real, "anti vehicle grenade chance scale" },
		{ _field_real, "throw grenade chance scale" },
		{ _field_terminator }
	};

	#define AI_TRAIT_LUCK_BLOCK_STRUCT_ID { 0xB158B95F, 0xF7DA4CF9, 0xBC3FD0FD, 0x8A9DD1B2 }
	TAG_STRUCT(
		ai_trait_luck_block_struct,
		"ai_trait_luck_block_struct",
		"ai_trait_luck_block_struct",
		"s_ai_trait_luck_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_TRAIT_LUCK_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("Luck Traits", "Traits that affect the AI\'s luck"),
		{ _field_real, "evasion chance scale", "Scale the chance of evading fire." },
		{ _field_real, "grenade dive chance scale", "Scale the chance of diving from grenades." },
		{ _field_real, "broken kamikaze chance scale", "Scale the chance of going kamikaze when broken." },
		{ _field_real, "leader dead retreat chance scale", "Scale the chance of retreating when your leader dies." },
		{ _field_real, "dive retreat chance scale", "Scale the chance of retreating after a dive." },
		{ _field_real, "shield depleted berserk chance scale", "Scale the chance of berserking when your shield is depleted." },
		{ _field_real, "leader abandoned berserk chance scale", "Scale the chance of a leader berserking when all his followers die." },
		{ _field_real, "melee attack delay timer scale", "Scale the time between melee attacks." },
		{ _field_real, "melee chance scale", "Scale the chance of meleeing." },
		{ _field_real, "melee leap delay timer scale", "Scale the delay for performing melee leaps." },
		{ _field_real, "throw grenade delay scale", "Scale the time between grenade throws." },
		{ _field_terminator }
	};

	#define AI_TRAIT_SOUND_BLOCK_STRUCT_ID { 0xFC75461E, 0xA8274506, 0x91D2A359, 0x1B2BB7D6 }
	TAG_STRUCT(
		ai_trait_sound_block_struct,
		"ai_trait_sound_block_struct",
		"ai_trait_sound_block_struct",
		"s_ai_trait_sound_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_TRAIT_SOUND_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("Sound Traits", "Traits that affect the AI\'s sound awareness"),
		{ _field_real, "hearing distance scale", "Scale the character's hearing distance." },
		{ _field_terminator }
	};

	#define AI_TRAIT_VISION_BLOCK_STRUCT_ID { 0x5E1B04EF, 0x590F4CBB, 0x9A08D75A, 0xC4860BF8 }
	TAG_STRUCT(
		ai_trait_vision_block_struct,
		"ai_trait_vision_block_struct",
		"ai_trait_vision_block_struct",
		"s_ai_trait_vision_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AI_TRAIT_VISION_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("Vision Traits", "Traits that affect the AI\'s vision"),
		{ _field_real, "vision distance scale", "Scale the distance at which an AI can see their target." },
		{ _field_real, "vision angle scale", "Scale the angles of the AI's vision cone." },
		{ _field_terminator }
	};

	#define AIM_ASSIST_STRUCT_ID { 0xFD3F0BC9, 0x19DE4608, 0xA91A35B8, 0xAC45727 }
	TAG_STRUCT(
		aim_assist_struct,
		"aim_assist_struct",
		"aim_assist_struct",
		"s_aim_assist_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AIM_ASSIST_STRUCT_ID)
	{
		{ _field_real, "autoaim stick time", "the number of seconds that the crosshair needs to be on target before the larger autoaim stick kicks in", "seconds", FIELD_FLAG_UNKNOWN0 },
		{ _field_angle, "autoaim stick angle", "the maximum angle that autoaim works to 'stick' a target.  set to zero to use default behavior.", "degrees", FIELD_FLAG_UNKNOWN0 },
		{ _field_angle, "autoaim angle", "the maximum angle that autoaim works at full strength", "degrees", FIELD_FLAG_UNKNOWN0 },
		{ _field_real, "autoaim range", "the maximum distance that autoaim works at full strength", "world units", FIELD_FLAG_UNKNOWN0 },
		{ _field_real, "autoaim falloff range", "at what point the autoaim starts falling off", "world units", FIELD_FLAG_UNKNOWN0 },
		{ _field_real, "autoaim near falloff range", "at what point the autoaim reaches full power", "world units", FIELD_FLAG_UNKNOWN0 },
		{ _field_angle, "magnetism angle", "the maximum angle that magnetism works at full strength", "degrees", FIELD_FLAG_UNKNOWN0 },
		{ _field_real, "magnetism range", "the maximum distance that magnetism works at full strength", "world units", FIELD_FLAG_UNKNOWN0 },
		{ _field_real, "magnetism falloff range", "at what point magnetism starts falling off", "world units", FIELD_FLAG_UNKNOWN0 },
		{ _field_real, "magnetism near falloff range", "at what point magnetism reaches full power", "world units", FIELD_FLAG_UNKNOWN0 },
		{ _field_angle, "deviation angle", "the maximum angle that a projectile is allowed to deviate from the gun barrel due to autoaim OR network lead vector reconstruction", "degrees", FIELD_FLAG_UNKNOWN0 },
		FIELD_PAD("ZHV", 4),
		FIELD_PAD("CVYGPMLMX", 16),
		FIELD_PAD("UQXKLVAXI", 4),
		{ _field_terminator }
	};

	#define AIRSTRIKE_BATTERY_BLOCK_ID { 0xE2478600, 0x27BE4DD0, 0x9B3DEB6C, 0xD71074B3 }
	TAG_STRUCT(
		airstrike_battery_block,
		"airstrike_battery_block",
		"airstrike_battery_block",
		"s_airstrike_battery_block",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AIRSTRIKE_BATTERY_BLOCK_ID)
	{
		{ _field_real, "launch radius", "each shot will be fired with a random offset in this radius in the x/y plane above the target location", "wu" },
		{ _field_real, "launch z height", "strike will be launched at this plane height above the target location", "wu" },
		{ _field_real, "launch warmup", "seconds to wait before launching the strike", "seconds" },
		{ _field_real, "launch arrival", "seconds to wait until the launch site marker is removed", "seconds" },
		{ _field_real, "launch cooldown", "seconds to wait before the next launch will be ready", "seconds" },
		{ _field_real, "launch duration", "how long a launch should take to fire all rounds", "seconds" },
		{ _field_long_integer, "shots per launch", "number of rounds to fire per launch" },
		{ _field_tag_reference, "fire effect", "the effect that will be created when the strike fires.", &effect_group_reference },
		{ _field_tag_reference, "fire effect (indoor)", "the effect that will be created when the strike fires and is indoors", &effect_group_reference },
		{ _field_block, "fire offsets", &airstrike_fire_location_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(effect_group_reference, EFFECT_TAG);

	#define AIRSTRIKE_FIRE_LOCATION_BLOCK_ID { 0xE2478600, 0x27BE4DD0, 0x93DEB6C, 0xD71074B3 }
	TAG_STRUCT(
		airstrike_fire_location_block,
		"airstrike_fire_location_block",
		"airstrike_fire_location_block",
		"s_airstrike_fire_location_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AIRSTRIKE_FIRE_LOCATION_BLOCK_ID)
	{
		{ _field_real_point_2d, "offset" },
		{ _field_terminator }
	};

	#define AIRSTRIKE_STRUCT_DEFINITION_ID { 0x74418E97, 0x4B464172, 0xBA070FC0, 0x21EC279C }
	TAG_STRUCT(
		airstrike_struct_definition,
		"airstrike_struct_definition",
		"airstrike_struct_definition",
		"s_airstrike_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AIRSTRIKE_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "batteries", &airstrike_battery_block_block },
		{ _field_terminator }
	};

	#define ALIEN_FIGHTER_BLOCK_ID { 0x1F64F81E, 0x24D64BCB, 0x828FBA10, 0xABC09BAB }
	TAG_STRUCT(
		alien_fighter_block,
		"alien_fighter_block",
		"alien_fighter_block",
		"s_alien_fighter_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ALIEN_FIGHTER_BLOCK_ID)
	{
		{ _field_struct, "steering control", &vehicle_steering_control_struct },
		{ _field_struct, "turning control", &vehicle_turning_control_struct },
		FIELD_EXPLANATION("velocity control variables", nullptr),
		{ _field_real, "maximum forward speed" },
		{ _field_real, "maximum reverse speed" },
		{ _field_real, "speed acceleration" },
		{ _field_real, "speed deceleration" },
		{ _field_real, "maximum left slide" },
		{ _field_real, "maximum right slide" },
		{ _field_real, "slide acceleration" },
		{ _field_real, "slide deceleration" },
		{ _field_real, "slide accel against direction", "acceleration when trying to throttle against current slide direction" },
		FIELD_EXPLANATION("torque scale", "how hard the vehicle trys to rotate to it\'s desired rotation"),
		{ _field_real, "flying torque scale", "big vehicles need to scale this down.  0 defaults to 1, which is generally a good value." },
		FIELD_EXPLANATION("fixed gun offset", "this offset will be aligned to the units aiming vector instead of the vehicle forward vector"),
		{ _field_angle, "fixed gun yaw" },
		{ _field_angle, "fixed gun pitch" },
		FIELD_EXPLANATION("alien fighter trick variables", nullptr),
		{ _field_real, "maximum trick frequency" },
		{ _field_real, "loop trick duration" },
		{ _field_real, "roll trick duration" },
		FIELD_EXPLANATION("alien fighter fake flight control", nullptr),
		{ _field_real, "zero gravity speed" },
		{ _field_real, "full gravity speed" },
		{ _field_real, "strafe boost scale" },
		{ _field_real, "off stick deceleration scale" },
		{ _field_real, "cruising throttle" },
		{ _field_real, "dive speed scale" },
		{ _field_terminator }
	};

	#define ALIEN_SCOUT_BLOCK_ID { 0x44F7199E, 0x44564222, 0xB555F347, 0x2AE7DC1C }
	TAG_STRUCT(
		alien_scout_block,
		"alien_scout_block",
		"alien_scout_block",
		"s_alien_scout_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ALIEN_SCOUT_BLOCK_ID)
	{
		{ _field_struct, "steering control", &vehicle_steering_control_struct },
		FIELD_EXPLANATION("velocity control variables", nullptr),
		{ _field_real, "maximum forward speed" },
		{ _field_real, "maximum reverse speed" },
		{ _field_real, "speed acceleration" },
		{ _field_real, "speed deceleration" },
		{ _field_real, "maximum left slide" },
		{ _field_real, "maximum right slide" },
		{ _field_real, "slide acceleration" },
		{ _field_real, "slide deceleration" },
		{ _field_real, "slide accel against direction", "acceleration when trying to throttle against current slide direction" },
		{ _field_real, "slide speed at top speed", "the slide speeds are interpolated down to this value, reaching it when the vehicle is moving at its top speed", "wu/s" },
		FIELD_EXPLANATION("specific types", "different types are treated differently alien scout controller"),
		{ _field_char_enum, "specific type", &alien_scout_specific_type_enum },
		{ _field_byte_flags, "flags", &alien_scout_flags },
		FIELD_PAD("NPBE", 2),
		{ _field_real, "drag coeficient" },
		{ _field_real, "constant deceleration" },
		{ _field_real, "torque scale", "0 defaults to 1" },
		FIELD_EXPLANATION("engine object function", nullptr),
		{ _field_struct, "engine gravity function", &engine_function_struct },
		FIELD_EXPLANATION("contrail object function", nullptr),
		{ _field_struct, "contrail gravity function", &engine_function_struct },
		FIELD_EXPLANATION("engine rotation function", nullptr),
		{ _field_real_bounds, "gear rotation speed", "cycles per second idle to full throttle" },
		{ _field_struct, "steering animation", &steering_animation_struct },
		{ _field_terminator }
	};

	STRINGS(alien_scout_specific_type_enum)
	{
		"none",
		"ghost",
		"spectre",
		"wraith",
		"hover craft"
	};
	STRING_LIST(alien_scout_specific_type_enum, alien_scout_specific_type_enum_strings, _countof(alien_scout_specific_type_enum_strings));

	STRINGS(alien_scout_flags)
	{
		"locked camera"
	};
	STRING_LIST(alien_scout_flags, alien_scout_flags_strings, _countof(alien_scout_flags_strings));

	#define ANGULAR_VELOCITY_LOWER_BOUND_STRUCT_ID { 0x8365B7E9, 0x92B540F0, 0xB71DED6E, 0x1F92083C }
	VERSIONED_TAG_STRUCT(
		angular_velocity_lower_bound_struct,
		"angular_velocity_lower_bound_struct",
		"angular_velocity_lower_bound_struct",
		"s_angular_velocity_lower_bound_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANGULAR_VELOCITY_LOWER_BOUND_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_angle, "guided angular velocity (lower)", nullptr, "degrees per second" },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	#define ANIMATION_AIMING_SCREEN_STRUCT_ID { 0xA933DD9C, 0x21874089, 0xA3990F17, 0xDD3043 }
	TAG_STRUCT(
		animation_aiming_screen_struct,
		"animation_aiming_screen_struct",
		"animation_aiming_screen_struct",
		"s_animation_aiming_screen_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_AIMING_SCREEN_STRUCT_ID)
	{
		{ _field_angle, "right yaw per frame" },
		{ _field_angle, "left yaw per frame" },
		{ _field_short_integer, "right frame count" },
		{ _field_short_integer, "left frame count" },
		{ _field_angle, "down pitch per frame" },
		{ _field_angle, "up pitch per frame" },
		{ _field_short_integer, "down pitch frame count" },
		{ _field_short_integer, "up pitch frame count" },
		{ _field_terminator }
	};

	#define ANIMATION_BLEND_SCREEN_BLOCK_ID { 0xED41E38F, 0x7F884652, 0xAC5624AC, 0x23F6E113 }
	TAG_STRUCT(
		animation_blend_screen_block,
		"animation_blend_screen_block",
		"animation_blend_screen_block",
		"s_animation_blend_screen_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_BLEND_SCREEN_BLOCK_ID)
	{
		{ _field_string_id, "label" },
		{ _field_struct, "aiming screen", &animation_aiming_screen_struct },
		{ _field_terminator }
	};

	#define ANIMATION_CODEC_DATA_STRUCT_ID { 0xA5200D6D, 0x10A34D1E, 0xBDB5A4C5, 0x8252592 }
	TAG_STRUCT(
		animation_codec_data_struct,
		"animation_codec_data_struct",
		"animation_codec_data_struct",
		"s_animation_codec_data_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_CODEC_DATA_STRUCT_ID)
	{
		FIELD_EXPLANATION("CODEC-SPECIFIC DATA", "fields used by varous compression codecs to store shared or global data for this graph. Do not manually edit."),
		{ _field_struct, "shared_static_codec", &shared_static_data_codec_graph_data_struct },
		{ _field_terminator }
	};

	#define ANIMATION_COMPONENT_ARGB_COLOR_PROPERTY_ID { 0xF78AE30C, 0x400115B4, 0x80F685AF, 0xE11A81EC }
	TAG_STRUCT(
		animation_component_argb_color_property,
		"animation_component_argb_color_property",
		"animation_component_argb_color_property",
		"s_animation_component_argb_color_property",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_COMPONENT_ARGB_COLOR_PROPERTY_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_enum, "composition", &animation_property_composition_type },
		{ _field_byte_flags, "flags", &animation_property_flags },
		FIELD_PAD("pad0", 1),
		{ _field_long_integer, "total milliseconds" },
		{ _field_block, "argb color keyframes", &animation_property_keyframe_argb_color_value_block },
		{ _field_terminator }
	};

	STRINGS(animation_property_composition_type)
	{
		"relative to current",
		"absolute to screen",
		"absolute to parent"
	};
	STRING_LIST(animation_property_composition_type, animation_property_composition_type_strings, _countof(animation_property_composition_type_strings));

	STRINGS(animation_property_flags)
	{
		"loop"
	};
	STRING_LIST(animation_property_flags, animation_property_flags_strings, _countof(animation_property_flags_strings));

	#define ANIMATION_COMPONENT_DEFINITION_ID { 0x37944A2F, 0x45B1B916, 0x3E72528B, 0xBE822639 }
	TAG_STRUCT(
		animation_component_definition,
		"animation_component_definition",
		"animation_component_definition",
		"s_animation_component_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_COMPONENT_DEFINITION_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_integer, "total milliseconds" },
		{ _field_block, "real properties", &animation_component_real_property_block },
		{ _field_block, "argb color properties", &animation_component_argb_color_property_block },
		{ _field_terminator }
	};

	#define ANIMATION_COMPONENT_REAL_PROPERTY_ID { 0xAD69E811, 0x433F6A19, 0x387DC3A8, 0x5FDA1B89 }
	TAG_STRUCT(
		animation_component_real_property,
		"animation_component_real_property",
		"animation_component_real_property",
		"s_animation_component_real_property",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_COMPONENT_REAL_PROPERTY_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_enum, "composition", &animation_property_composition_type },
		{ _field_byte_flags, "flags", &animation_property_flags },
		FIELD_PAD("pad0", 1),
		{ _field_long_integer, "total milliseconds" },
		{ _field_block, "real keyframes", &animation_property_keyframe_real_value_block },
		{ _field_terminator }
	};

	#define ANIMATION_DEFINITION_ID { 0x28C2D946, 0x48183940, 0x28327897, 0x19C0A450 }
	TAG_STRUCT(
		animation_definition,
		"animation_definition",
		"animation_definition",
		"s_animation_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_DEFINITION_ID)
	{
		{ _field_string_id, "name" },
		{ _field_real, "time base offset" },
		{ _field_real, "time exponential offset" },
		{ _field_char_enum, "animation input", &animationinputtype },
		FIELD_PAD("pad0", 3),
		{ _field_block, "components", &animation_component_definition_block },
		{ _field_terminator }
	};

	STRINGS(animationinputtype)
	{
		"time",
		"binding"
	};
	STRING_LIST(animationinputtype, animationinputtype_strings, _countof(animationinputtype_strings));

	#define ANIMATION_DIALOGUE_EVENT_BLOCK_ID { 0x2A844863, 0x9AAD473C, 0x93A75C3E, 0xD1BF6F0E }
	TAG_STRUCT(
		animation_dialogue_event_block,
		"animation_dialogue_event_block",
		"animation_dialogue_event_block",
		"s_animation_dialogue_event_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_DIALOGUE_EVENT_BLOCK_ID)
	{
		{ _field_short_enum, "dialogue event", &animation_dialogue_event_enum },
		{ _field_short_integer, "frame" },
		{ _field_terminator }
	};

	STRINGS(animation_dialogue_event_enum)
	{
		"bump",
		"dive",
		"evade",
		"lift",
		"sigh",
		"contempt",
		"anger",
		"fear",
		"relief",
		"sprint",
		"sprint_end",
		"ass_grabber",
		"kill_ass",
		"ass_grabbed",
		"die_ass"
	};
	STRING_LIST(animation_dialogue_event_enum, animation_dialogue_event_enum_strings, _countof(animation_dialogue_event_enum_strings));

	#define ANIMATION_DIALOGUE_EVENT_BLOCK_EXTENDED_ID { 0x649B1755, 0x29134CBC, 0xBCF06814, 0x624F5E32 }
	TAG_STRUCT(
		animation_dialogue_event_block_extended,
		"animation_dialogue_event_block_extended",
		"animation_dialogue_event_block_extended",
		"s_animation_dialogue_event_block_extended",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_DIALOGUE_EVENT_BLOCK_EXTENDED_ID)
	{
		{ _field_short_block_index, "frame event", &import_frame_event_block_block },
		{ _field_short_enum, "dialogue event", &animation_dialogue_event_enum },
		{ _field_short_integer, "frame offset", "If a frame event is set, this number is relative to frame event, otherwise it's absolute." },
		FIELD_PAD("pad", 2),
		{ _field_terminator }
	};

	#define ANIMATION_EDITOR_ONLY_DEFINITION_ID { 0xC40BEC36, 0x4C9065D3, 0x6192C5BE, 0x9CAE89F6 }
	TAG_STRUCT(
		animation_editor_only_definition,
		"animation_editor_only_definition",
		"animation_editor_only_definition",
		"s_animation_editor_only_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_EDITOR_ONLY_DEFINITION_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "components editor only", &component_editor_only_definition_block },
		{ _field_terminator }
	};

	#define ANIMATION_EFFECT_EVENT_BLOCK_ID { 0xE4CD0730, 0x8A8342C9, 0xB1A8EE0B, 0x73E441C9 }
	VERSIONED_TAG_STRUCT(
		animation_effect_event_block,
		"animation_effect_event_block",
		"animation_effect_event_block",
		"s_animation_effect_event_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_EFFECT_EVENT_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 6 },
		{ _field_short_block_index, "effect", &animation_graph_effect_reference_block_block },
		{ _field_short_integer, "frame" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_char_enum, "damage effect reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("eefpd1", 3),
		
		{ _struct_version_mode_equal, 1, 2 },
		{ _field_short_block_index, "effect", &animation_graph_effect_reference_block_block },
		{ _field_short_integer, "frame" },
		
		{ _struct_version_mode_equal, 0, 4 },
		{ _field_short_block_index, "effect", &animation_graph_effect_reference_block_block },
		{ _field_short_integer, "frame" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		
		{ _field_terminator }
	};

	STRINGS(global_damage_reporting_enum_definition)
	{
		"unknown",
		"teh guardians",
		"scripting",
		"ai suicide",
		"forerunner smg",
		"spread gun",
		"forerunner rifle",
		"forerunner sniper",
		"bishop beam",
		"bolt pistol",
		"pulse grenade",
		"incineration launcher",
		"magnum pistol",
		"assault rifle",
		"marksman rifle",
		"shotgun",
		"battle rifle",
		"sniper rifle",
		"rocket launcher",
		"spartan laser",
		"frag grenade",
		"sticky grenade launcher",
		"light machine gun",
		"rail gun",
		"plasma pistol",
		"needler",
		"gravity hammer",
		"energy sword",
		"plasma grenade",
		"carbine",
		"beam rifle",
		"assault carbine",
		"concussion rifle",
		"fuel rod cannon",
		"ghost",
		"revenant driver",
		"revenant gunner",
		"wraith",
		"wraith anti-infantry",
		"banshee",
		"banshee bomb",
		"seraph",
		"revenant deux driver",
		"revenant deux gunner",
		"lich driver",
		"lich gunner",
		"mongoose",
		"warthog driver",
		"warthog gunner",
		"warthog gunner gauss",
		"warthog gunner rocket",
		"scorpion",
		"scorpion gunner",
		"falcon driver",
		"falcon gunner",
		"wasp driver",
		"wasp gunner",
		"wasp gunner heavy",
		"mech melee",
		"mech chaingun",
		"mech cannon",
		"mech rocket",
		"broadsword",
		"broadsword missile",
		"tortoise driver",
		"tortoise gunner",
		"MAC cannon",
		"Target designator",
		"Ordnance drop pod",
		"Orbital cruise missile",
		"Portable shield",
		"Personal auto turret",
		"Thruster pack",
		"falling damage",
		"generic collision damage",
		"generic melee damage",
		"generic explosion",
		"fire damage",
		"birthday party explosion",
		"flag melee damage",
		"bomb melee damage",
		"bomb explosion damage",
		"ball melee damage",
		"teleporter",
		"transfer damage",
		"armor lock crush",
		"human turret",
		"plasma cannon",
		"plasma mortar",
		"plasma turret",
		"shade turret",
		"forerunner turret",
		"tank",
		"chopper",
		"hornet",
		"mantis",
		"magnum pistol ctf",
		"flood prongs"
	};
	STRING_LIST(global_damage_reporting_enum_definition, global_damage_reporting_enum_definition_strings, _countof(global_damage_reporting_enum_definition_strings));

	#define ANIMATION_EFFECTS_EVENT_BLOCK_EXTENDED_ID { 0x8ED7D41D, 0x73CF4055, 0xA152950D, 0x9C9C10B5 }
	TAG_STRUCT(
		animation_effects_event_block_extended,
		"animation_effects_event_block_extended",
		"animation_effects_event_block_extended",
		"s_animation_effects_event_block_extended",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_EFFECTS_EVENT_BLOCK_EXTENDED_ID)
	{
		{ _field_short_block_index, "frame event", &import_frame_event_block_block },
		FIELD_PAD("pad", 2),
		{ _field_short_block_index, "effect", &animation_graph_effect_reference_block_block },
		{ _field_short_integer, "frame offset", "If a frame event is set, this number is relative to frame event, otherwise it's absolute." },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_char_enum, "damage effect reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("pad_2", 3),
		{ _field_terminator }
	};

	#define ANIMATION_ENTRY_BLOCK_ID { 0xED625457, 0xB4F24A9B, 0x864B5469, 0x3C760EF5 }
	TAG_STRUCT(
		animation_entry_block,
		"animation_entry_block",
		"animation_entry_block",
		"s_animation_entry_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_ENTRY_BLOCK_ID)
	{
		{ _field_string_id, "label" },
		{ _field_short_block_index, "overlay group", MAKE_ALT_NAMES("pose overlay|overlay"), &overlay_group_definition_block_block },
		{ _field_short_block_index, "ik set", &animation_ik_set_block },
		{ _field_struct, "animation", &animation_index_struct },
		{ _field_terminator }
	};

	#define ANIMATION_EXTENDED_EVENTS_STRUCT_ID { 0x20B7F541, 0x876B4FA9, 0xAD5F76AC, 0x2667B4FA }
	TAG_STRUCT(
		animation_extended_events_struct,
		"animation_extended_events_struct",
		"animation_extended_events_struct",
		"s_animation_extended_events_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_EXTENDED_EVENTS_STRUCT_ID)
	{
		FIELD_EXPLANATION("IMPORTED EXTENDED DATA EVENT INFO", nullptr),
		{ _field_string_id, "name" },
		{ _field_short_integer, "start frame" },
		{ _field_short_integer, "frame count" },
		{ _field_real, "default value" },
		{ _field_short_integer, "data index" },
		FIELD_PAD("pants", 2),
		{ _field_terminator }
	};

	#define ANIMATION_FACIAL_WRINKLE_EVENTS_STRUCT_ID { 0x5D78B2BA, 0x41204C75, 0xAAC24254, 0xA7383DE1 }
	TAG_STRUCT(
		animation_facial_wrinkle_events_struct,
		"animation_facial_wrinkle_events_struct",
		"animation_facial_wrinkle_events_struct",
		"s_animation_facial_wrinkle_events_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_FACIAL_WRINKLE_EVENTS_STRUCT_ID)
	{
		FIELD_EXPLANATION("REFERENCE FACIAL WRINKLE EVENT INFO", nullptr),
		{ _field_string_id, "wrinkle name" },
		{ _field_real, "default value" },
		FIELD_EXPLANATION("IMPORTED FACIAL WRINKLE INFO", nullptr),
		{ _field_short_integer, "start frame" },
		{ _field_short_integer, "frame count" },
		{ _field_char_enum, "region", &animation_facial_wrinkle_region },
		FIELD_PAD("PADDNG", 3),
		FIELD_EXPLANATION("POST PROCESS WRINKLE EVENT INFO", nullptr),
		{ _field_short_integer, "wrinkle data index" },
		FIELD_PAD("aikcep", 2),
		{ _field_terminator }
	};

	STRINGS(animation_facial_wrinkle_region)
	{
		"Upper Brow",
		"Center Brow",
		"Left Squint",
		"Right Squint",
		"Left Smile",
		"Right Smile",
		"Left Sneer",
		"Right Sneer"
	};
	STRING_LIST(animation_facial_wrinkle_region, animation_facial_wrinkle_region_strings, _countof(animation_facial_wrinkle_region_strings));

	#define ANIMATION_FRAME_EVENT_BLOCK_STRUCT_ID { 0x4B542454, 0x8634540, 0x94899D46, 0x7CF531E1 }
	TAG_STRUCT(
		animation_frame_event_block_struct,
		"animation_frame_event_block_struct",
		"animation_frame_event_block_struct",
		"s_animation_frame_event_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_FRAME_EVENT_BLOCK_STRUCT_ID)
	{
		{ _field_short_enum, "type", &frame_event_type_new },
		{ _field_short_integer, "frame" },
		{ _field_terminator }
	};

	#define ANIMATION_FUNCTION_BLOCK_ID { 0xEA6DD3E1, 0x42A447C1, 0xA68A00FD, 0xDD681208 }
	TAG_STRUCT(
		animation_function_block,
		"animation_function_block",
		"animation_function_block",
		"s_animation_function_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_FUNCTION_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_struct, "function", &scalar_function_named_struct },
		{ _field_terminator }
	};

	#define ANIMATION_GAIT_BLOCK_ID { 0x1A9E57D4, 0x76F24572, 0x9C1B7CA7, 0x96F136C6 }
	TAG_STRUCT(
		animation_gait_block,
		"animation_gait_block",
		"animation_gait_block",
		"s_animation_gait_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_GAIT_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "slow gait name" },
		{ _field_string_id, "intermediate gait name", "animation name used for the speed variations" },
		{ _field_string_id, "fast gait name" },
		{ _field_short_enum, "move state", &animation_gait_directions },
		FIELD_PAD("pad", 2),
		{ _field_terminator }
	};

	STRINGS(animation_gait_directions)
	{
		"move_front",
		"move_back",
		"move_left",
		"move_right",
		"turn_left",
		"turn_right"
	};
	STRING_LIST(animation_gait_directions, animation_gait_directions_strings, _countof(animation_gait_directions_strings));

	#define ANIMATION_GAIT_GROUP_BLOCK_ID { 0xA7445115, 0x80D3421A, 0xB4D73C75, 0xCF80911B }
	TAG_STRUCT(
		animation_gait_group_block,
		"animation_gait_group_block",
		"animation_gait_group_block",
		"s_animation_gait_group_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_GAIT_GROUP_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "animation gaits", &animation_gait_item_block_block },
		{ _field_terminator }
	};

	#define ANIMATION_GAIT_ITEM_BLOCK_ID { 0xE81E90AA, 0x3B3E499E, 0xAD373A6C, 0xD8A879E6 }
	TAG_STRUCT(
		animation_gait_item_block,
		"animation_gait_item_block",
		"animation_gait_item_block",
		"s_animation_gait_item_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_GAIT_ITEM_BLOCK_ID)
	{
		{ _field_short_block_index, "animation gait", &animation_gait_block_block },
		FIELD_PAD("agibfap", 2),
		{ _field_terminator }
	};

	#define ANIMATION_GRAPH_CONTENTS_STRUCT_ID { 0xBC004E8A, 0x1CC048DD, 0xBF08E736, 0x8D4C66FE }
	TAG_STRUCT(
		animation_graph_contents_struct,
		"animation_graph_contents_struct",
		"animation_graph_contents_struct",
		"s_animation_graph_contents_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_GRAPH_CONTENTS_STRUCT_ID)
	{
		FIELD_EXPLANATION("MODE-n-STATE GRAPH", nullptr),
		{ _field_short_block_index, "default gait group", &animation_gait_group_block_block },
		FIELD_PAD("agcsfap", 2),
		{ _field_block, "modes", &animation_mode_block_block },
		FIELD_EXPLANATION("SPECIAL CASE ANIMS", nullptr),
		{ _field_block, "vehicle suspension", &vehicle_suspension_block_block },
		{ _field_block, "function overlays", MAKE_ALT_NAMES("object overlays"), &function_overlay_animation_block_block },
		{ _field_terminator }
	};

	#define ANIMATION_GRAPH_DEFINITIONS_STRUCT_ID { 0x7378A5C8, 0x70D449B0, 0x88828F27, 0x7D26A6A7 }
	TAG_STRUCT(
		animation_graph_definitions_struct,
		"animation_graph_definitions_struct",
		"animation_graph_definitions_struct",
		"s_animation_graph_definitions_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_GRAPH_DEFINITIONS_STRUCT_ID)
	{
		FIELD_EXPLANATION("GRAPH DATA", nullptr),
		{ _field_tag_reference, "parent animation graph", &model_animation_graph_group_reference$2 },
		{ _field_byte_flags, "inheritance flags", &public_animation_graph_flags },
		{ _field_byte_flags, "private flags", &private_animation_graph_flags },
		{ _field_short_integer, "animation codec pack" },
		{ _field_short_enum, "force compression setting", &compression_force_settings },
		{ _field_word_flags, "misc graph flags", &animation_graph_misc_flags },
		{ _field_long_integer, "skeleton checksum" },
		{ _field_long_integer, "skeleton checksum lite" },
		{ _field_tag_reference, "imported events", &frame_event_list_group_reference },
		{ _field_block, "node usage", &animation_usage_block_block },
		{ _field_block, "node masks", &animation_node_mask_block_block },
		{ _field_block, "functions", &animation_function_block_block },
		{ _field_block, "model animation variants", &model_animation_variant_block_block },
		{ _field_block, "skeleton nodes", &animation_graph_node_block_block },
		{ _field_block, "sound references", "Legacy field - please edit in new frame event tag below", &animation_graph_sound_reference_block_block },
		{ _field_block, "effect references", "Legacy field - please edit in new frame event tag below", &animation_graph_effect_reference_block_block },
		{ _field_block, "blend screens", "Legacy field - please edit in NEW blend screens tag below", &animation_blend_screen_block_block },
		{ _field_block, "foot markers", &foot_tracking_member_block_block },
		{ _field_block, "animations", &animation_pool_block_block, _tag_field_attributed_definition_block_wide_field_default },
		{ _field_block, "NEW blend screens", &new_animation_blend_screen_block_block },
		{ _field_block, "NEW function overlays", &new_animation_function_overlay_block_block },
		{ _field_block, "overlay groups", MAKE_ALT_NAMES("pose overlays|NEW overlays"), &overlay_group_definition_block_block },
		{ _field_block, "gaits", &animation_gait_block_block },
		{ _field_block, "gait groups", &animation_gait_group_block_block },
		{ _field_block, "ik data", &animation_ik_block_block },
		{ _field_block, "ik sets", &animation_ik_set_block },
		{ _field_block, "ik chains", &animation_ik_chain_block_block },
		{ _field_block, "composites", &g_compositetag_block },
		{ _field_struct, "pca data", &pcaanimationdatastruct },
		{ _field_terminator }
	};

	TAG_REFERENCE(model_animation_graph_group_reference$2, MODEL_ANIMATION_GRAPH_TAG);

	STRINGS(public_animation_graph_flags)
	{
		"inherit root trans scale only",
		"inherit for use on player"
	};
	STRING_LIST(public_animation_graph_flags, public_animation_graph_flags_strings, _countof(public_animation_graph_flags_strings));

	STRINGS(private_animation_graph_flags)
	{
		"prepared for cache",
		"use a single mixing board{unused smelly flag}",
		"imported with codec compressors",
		"uses data driven animation",
		"written to cache",
		"animation data reordered",
		"ready for use"
	};
	STRING_LIST(private_animation_graph_flags, private_animation_graph_flags_strings, _countof(private_animation_graph_flags_strings));

	STRINGS(compression_force_settings)
	{
		"none",
		"medium compression",
		"rough compression",
		"uncompressed",
		"old codec",
		"reach medium compression",
		"reach rough compression"
	};
	STRING_LIST(compression_force_settings, compression_force_settings_strings, _countof(compression_force_settings_strings));

	STRINGS(animation_graph_misc_flags)
	{
		"ignore gaits"
	};
	STRING_LIST(animation_graph_misc_flags, animation_graph_misc_flags_strings, _countof(animation_graph_misc_flags_strings));

	TAG_REFERENCE(frame_event_list_group_reference, FRAME_EVENT_LIST_TAG);

	#define ANIMATION_GRAPH_EFFECT_REFERENCE_BLOCK_ID { 0x3CF4A82F, 0x85234898, 0xB66DD8B6, 0xB88F8280 }
	TAG_STRUCT(
		animation_graph_effect_reference_block,
		"animation_graph_effect_reference_block",
		"animation_graph_effect_reference_block",
		"s_animation_graph_effect_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_GRAPH_EFFECT_REFERENCE_BLOCK_ID)
	{
		{ _field_tag_reference, "effect", &effect_group_reference },
		{ _field_word_flags, "flags", &key_event_flags_enum },
		{ _field_word_flags, "internal_flags", &key_event_internal_flags_enum },
		{ _field_tag_reference, "model", "optional. only allow this event when used on this model", &model_group_reference$3 },
		{ _field_string_id, "variant", "optional. only allow this event when used on this model variant" },
		{ _field_terminator }
	};

	STRINGS(key_event_flags_enum)
	{
		"allow on player",
		"left arm only",
		"right arm only",
		"first-person only",
		"third-person only",
		"forward only",
		"reverse only",
		"fp no aged weapons"
	};
	STRING_LIST(key_event_flags_enum, key_event_flags_enum_strings, _countof(key_event_flags_enum_strings));

	STRINGS(key_event_internal_flags_enum)
	{
		"model_index_required"
	};
	STRING_LIST(key_event_internal_flags_enum, key_event_internal_flags_enum_strings, _countof(key_event_internal_flags_enum_strings));

	TAG_REFERENCE(model_group_reference$3, MODEL_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define ANIMATION_GRAPH_NODE_BLOCK_ID { 0xA1BC3EC9, 0xA8A1454C, 0x8C893F2D, 0x2CAC1368 }
	VERSIONED_TAG_STRUCT(
		animation_graph_node_block,
		"animation_graph_node_block",
		"animation_graph_node_block",
		"s_animation_graph_node_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_GRAPH_NODE_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 13 },
		{ _field_string_id, "name" },
		{ _field_short_block_index, "next sibling node index", &animation_graph_node_block_block },
		{ _field_short_block_index, "first child node index", &animation_graph_node_block_block },
		{ _field_short_block_index, "parent node index", &animation_graph_node_block_block },
		{ _field_byte_flags, "model flags", &animation_node_model_flags },
		{ _field_byte_flags, "node joint flags", &node_joint_flags },
		{ _field_byte_flags, "additional flags", &node_info_flags },
		FIELD_PAD("NOD", 3),
		{ _field_real_vector_3d, "base vector" },
		{ _field_real, "vector range" },
		{ _field_real, "z_pos" },
		{ _field_long_integer, "frame_ID1" },
		{ _field_long_integer, "frame_ID2" },
		
		{ _struct_version_mode_equal, 0, 9 },
		{ _field_old_string_id, "name" },
		{ _field_short_block_index, "next sibling node index", &animation_graph_node_block_block },
		{ _field_short_block_index, "first child node index", &animation_graph_node_block_block },
		{ _field_short_block_index, "parent node index", &animation_graph_node_block_block },
		FIELD_PAD("ZOI", 2),
		{ _field_long_flags, "Node joint flags", &node_joint_flags },
		{ _field_real_vector_3d, "base vector" },
		{ _field_real, "vector range" },
		{ _field_real, "z_pos" },
		
		{ _field_terminator }
	};

	STRINGS(animation_node_model_flags)
	{
		"primary model",
		"secondary model",
		"local root",
		"left hand",
		"right hand",
		"left arm member"
	};
	STRING_LIST(animation_node_model_flags, animation_node_model_flags_strings, _countof(animation_node_model_flags_strings));

	STRINGS(node_joint_flags)
	{
		"ball-socket",
		"hinge",
		"no movement"
	};
	STRING_LIST(node_joint_flags, node_joint_flags_strings, _countof(node_joint_flags_strings));

	STRINGS(node_info_flags)
	{
		"important for imposter"
	};
	STRING_LIST(node_info_flags, node_info_flags_strings, _countof(node_info_flags_strings));

	#define ANIMATION_GRAPH_SOUND_REFERENCE_BLOCK_ID { 0x9E2008A6, 0x15384504, 0x86E98642, 0x770EB5DF }
	TAG_STRUCT(
		animation_graph_sound_reference_block,
		"animation_graph_sound_reference_block",
		"animation_graph_sound_reference_block",
		"s_animation_graph_sound_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_GRAPH_SOUND_REFERENCE_BLOCK_ID)
	{
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_word_flags, "flags", &key_event_flags_enum },
		{ _field_word_flags, "internal_flags", &key_event_internal_flags_enum },
		{ _field_tag_reference, "model", "optional. only allow this event when used on this model", &model_group_reference$3 },
		{ _field_string_id, "variant", "optional. only allow this event when used on this model variant" },
		{ _field_terminator }
	};

	#define ANIMATION_IK_BLOCK_ID { 0x732332F9, 0xD36A4D89, 0x8815B353, 0xC36A39FC }
	TAG_STRUCT(
		animation_ik_block,
		"animation_ik_block",
		"animation_ik_block",
		"s_animation_ik_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_IK_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "source marker", "the marker name on this object where the point of attachment is" },
		{ _field_long_enum, "attach to", &animation_ik_target_enum_definition },
		{ _field_string_id, "destination marker", "the marker name of the attachment destination point" },
		{ _field_real_point_3d, "pole marker" },
		{ _field_terminator }
	};

	STRINGS(animation_ik_target_enum_definition)
	{
		"parent",
		"NYI any child",
		"primary weapon",
		"secondary weapon"
	};
	STRING_LIST(animation_ik_target_enum_definition, animation_ik_target_enum_definition_strings, _countof(animation_ik_target_enum_definition_strings));

	#define ANIMATION_IK_BLOCK_V1_ID { 0x298A3519, 0x24ED45D8, 0xB9C03830, 0x956878DD }
	TAG_STRUCT(
		animation_ik_block_v1,
		"animation_ik_block_v1",
		"animation_ik_block_v1",
		"s_animation_ik_block_v1",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_IK_BLOCK_V1_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker", "the marker name on the object being attached" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "attach to marker", "the marker name object (weapon, vehicle, etc.) the above marker is being attached to" },
		{ _field_terminator }
	};

	#define ANIMATION_IK_CHAIN_BLOCK_ID { 0xF5CF2BD8, 0x628649D3, 0xA1BEB57B, 0xAF40B16B }
	TAG_STRUCT(
		animation_ik_chain_block,
		"animation_ik_chain_block",
		"animation_ik_chain_block",
		"s_animation_ik_chain_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_IK_CHAIN_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_enum, "type", &animation_ik_chain_type_enumeration },
		FIELD_PAD("aikcbp", 2),
		{ _field_short_block_index, "start node", MAKE_ALT_NAMES("grandparent node"), &animation_graph_node_block_block },
		{ _field_short_block_index, "effector node", &animation_graph_node_block_block },
		{ _field_short_integer, "rank", "calculated during post process where rank is default ordinal for solving" },
		{ _field_short_integer, "antecedents", "calculated during post process where bit index represents chain index" },
		{ _field_terminator }
	};

	STRINGS(animation_ik_chain_type_enumeration)
	{
		"standard"
	};
	STRING_LIST(animation_ik_chain_type_enumeration, animation_ik_chain_type_enumeration_strings, _countof(animation_ik_chain_type_enumeration_strings));

	#define ANIMATION_IK_CHAIN_EVENTS_STRUCT_ID { 0x93101E5, 0x2C2B4D5E, 0xB71AF5DE, 0x699BE416 }
	TAG_STRUCT(
		animation_ik_chain_events_struct,
		"animation_ik_chain_events_struct",
		"animation_ik_chain_events_struct",
		"s_animation_ik_chain_events_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_IK_CHAIN_EVENTS_STRUCT_ID)
	{
		FIELD_EXPLANATION("REFERENCE IK CHAIN INFO", nullptr),
		{ _field_string_id, "chain name" },
		{ _field_short_enum, "chain type", &animation_ik_chain_type_enumeration },
		{ _field_short_block_index, "chain start node", &animation_graph_node_block_block },
		{ _field_short_block_index, "chain effector node", &animation_graph_node_block_block },
		FIELD_EXPLANATION("IMPORTED IK CHAIN INFO", nullptr),
		{ _field_short_enum, "chain usage", &animation_ik_chain_event_usage },
		{ _field_string_id, "proxy marker" },
		{ _field_long_integer, "proxy id" },
		{ _field_char_enum, "event type", &animation_ik_chain_event_type },
		{ _field_byte_integer, "effector transform data index" },
		{ _field_byte_integer, "effector weight data index" },
		{ _field_byte_integer, "pole point data index" },
		FIELD_EXPLANATION("POST PROCESS IK CHAIN INFO", nullptr),
		{ _field_byte_integer, "chain index" },
		FIELD_PAD("aikcep", 3),
		{ _field_terminator }
	};

	STRINGS(animation_ik_chain_event_usage)
	{
		"none",
		"world",
		"self",
		"parent",
		"primary weapon",
		"secondary weapon",
		"assassination"
	};
	STRING_LIST(animation_ik_chain_event_usage, animation_ik_chain_event_usage_strings, _countof(animation_ik_chain_event_usage_strings));

	STRINGS(animation_ik_chain_event_type)
	{
		"active",
		"passive"
	};
	STRING_LIST(animation_ik_chain_event_type, animation_ik_chain_event_type_strings, _countof(animation_ik_chain_event_type_strings));

	#define ANIMATION_IK_CHAIN_PROXIES_STRUCT_ID { 0xCC1A00C4, 0x38D4FBB, 0x8F1F3051, 0xA19647E0 }
	TAG_STRUCT(
		animation_ik_chain_proxies_struct,
		"animation_ik_chain_proxies_struct",
		"animation_ik_chain_proxies_struct",
		"s_animation_ik_chain_proxies_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_IK_CHAIN_PROXIES_STRUCT_ID)
	{
		{ _field_long_integer, "id" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "target marker" },
		{ _field_byte_integer, "proxy transform data index" },
		FIELD_PAD("aikcpp", 3),
		{ _field_terminator }
	};

	#define ANIMATION_IK_SET_ID { 0xBC56DF32, 0xC0D04CDF, 0xBC3D6BF1, 0x5E7C50D8 }
	TAG_STRUCT(
		animation_ik_set,
		"animation_ik_set",
		"animation_ik_set",
		"s_animation_ik_set",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_IK_SET_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "ik points", &animation_ik_set_item_block },
		{ _field_terminator }
	};

	#define ANIMATION_IK_SET_ITEM_ID { 0xB344E2ED, 0x59874CF7, 0x8590B239, 0xFB3DEA22 }
	TAG_STRUCT(
		animation_ik_set_item,
		"animation_ik_set_item",
		"animation_ik_set_item",
		"s_animation_ik_set_item",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_IK_SET_ITEM_ID)
	{
		{ _field_short_block_index, "ik point", &animation_ik_block_block },
		{ _field_word_flags, "flags", &animation_ik_set_item_flags },
		{ _field_terminator }
	};

	STRINGS(animation_ik_set_item_flags)
	{
		"disable"
	};
	STRING_LIST(animation_ik_set_item_flags, animation_ik_set_item_flags_strings, _countof(animation_ik_set_item_flags_strings));

	#define ANIMATION_INDEX_STRUCT_ID { 0x460AC446, 0x6E044055, 0xB5772485, 0xC9FCAEC3 }
	TAG_STRUCT(
		animation_index_struct,
		"animation_index_struct",
		"animation_index_struct",
		"s_animation_index_struct",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_INDEX_STRUCT_ID)
	{
		{ _field_short_integer, "graph index" },
		{ _field_short_block_index, "animation", &animation_pool_block_block },
		{ _field_terminator }
	};

	#define ANIMATION_MODE_BLOCK_ID { 0x8D89D744, 0x83E7433C, 0xB92A43A6, 0x63E43E4 }
	TAG_STRUCT(
		animation_mode_block,
		"animation_mode_block",
		"animation_mode_block",
		"s_animation_mode_block",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_MODE_BLOCK_ID)
	{
		{ _field_string_id, "label" },
		{ _field_short_block_index, "overlay group", MAKE_ALT_NAMES("pose overlay|overlay"), &overlay_group_definition_block_block },
		{ _field_short_block_index, "ik set", &animation_ik_set_block },
		{ _field_long_flags, "flags", &animation_mode_flags },
		{ _field_block, "weapon class", &weapon_class_block_block },
		{ _field_block, "mode ik", &animation_ik_block_v1_block },
		{ _field_block, "foot defaults", &foot_tracking_defaults_block },
		{ _field_terminator }
	};

	STRINGS(animation_mode_flags)
	{
		"this is a stance"
	};
	STRING_LIST(animation_mode_flags, animation_mode_flags_strings, _countof(animation_mode_flags_strings));

	#define ANIMATION_NODE_MASK_BLOCK_ID { 0xBC821943, 0x591C4DFA, 0xBF374F7B, 0x7E2BDCD8 }
	TAG_STRUCT(
		animation_node_mask_block,
		"animation_node_mask_block",
		"animation_node_mask_block",
		"s_animation_node_mask_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_NODE_MASK_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "nodes", &animation_node_mask_entry_block_block },
		{ _field_array, "node flags", &g_node_flag_storage_array$2 },
		{ _field_terminator }
	};

	#define ANIMATION_NODE_MASK_ENTRY_BLOCK_ID { 0x7A9DBE1F, 0x6A2B4DED, 0xBE03214D, 0xD964D836 }
	TAG_STRUCT(
		animation_node_mask_entry_block,
		"animation_node_mask_entry_block",
		"animation_node_mask_entry_block",
		"s_animation_node_mask_entry_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_NODE_MASK_ENTRY_BLOCK_ID)
	{
		{ _field_short_block_index, "node", &animation_graph_node_block_block },
		FIELD_PAD("anbfp", 2),
		{ _field_terminator }
	};

	#define ANIMATION_OBJECT_FUNCTIONS_STRUCT_ID { 0x2C6B2EE2, 0xFC974C48, 0x9127F7F0, 0xEBF8E914 }
	TAG_STRUCT(
		animation_object_functions_struct,
		"animation_object_functions_struct",
		"animation_object_functions_struct",
		"s_animation_object_functions_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_OBJECT_FUNCTIONS_STRUCT_ID)
	{
		{ _field_string_id, "real_name" },
		{ _field_long_enum, "name", &animation_object_function_name },
		{ _field_short_integer, "start frame" },
		{ _field_short_integer, "frame count" },
		{ _field_struct, "function curve", &scalar_function_named_struct },
		{ _field_terminator }
	};

	STRINGS(animation_object_function_name)
	{
		"animation_object_function_a",
		"animation_object_function_b",
		"animation_object_function_c",
		"animation_object_function_d"
	};
	STRING_LIST(animation_object_function_name, animation_object_function_name_strings, _countof(animation_object_function_name_strings));

	#define ANIMATION_POOL_BLOCK_STRUCT_ID { 0x23454382, 0xA8A14CE8, 0xA1D2C1FD, 0x7F41203E }
	TAG_STRUCT(
		animation_pool_block_struct,
		"animation_pool_block_struct",
		"animation_pool_block_struct",
		"s_animation_pool_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_POOL_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_real, "weight" },
		{ _field_short_integer, "loop frame index" },
		{ _field_word_flags, "user flags", MAKE_ALT_NAMES("playback flags"), &animation_index_flags },
		{ _field_real, "override blend in time", MAKE_ALT_NAMES("override blend time") },
		{ _field_real, "override blend out time" },
		{ _field_short_block_index, "parent animation", &animation_pool_block_block },
		{ _field_short_block_index, "next animation", &animation_pool_block_block },
		{ _field_word_flags, "production flags", &production_status_flags },
		{ _field_short_block_index, "composite", &g_compositetag_block },
		FIELD_EXPLANATION("PCA Group Link", "If this animation contains PCA blend shape animation,\nprovide the name of the PCA Group to which it belongs.\nThese groups should be present in the PCA Groups block."),
		{ _field_string_id, "pca group name" },
		FIELD_EXPLANATION("Shared Animation Data", "data which may be shared by one or more animations"),
		{ _field_struct, "shared animation reference", &shared_animation_reference_block },
		{ _field_block, "shared animation data", &shared_model_animation_block_block },
		{ _field_terminator }
	};

	STRINGS(animation_index_flags)
	{
		"disable interpolation in{disable interpolation_in}",
		"disable interpolation out{disable interpolation_out}",
		"disable mode ik",
		"disable weapon ik",
		"disable weapon aim/1st person",
		"disable look screen",
		"disable transition adjustment",
		"force weapon ik on",
		"use custom blend-in time#when possible, interpolate into this animation using the \'blend in\' time value below",
		"enable animated source interpolation",
		"disable ik sets",
		"disable ik chains",
		"translate and scale root only#ignore all transtion and scale on all nodes except the root",
		"enable blend-out on replacement anims#fade out this animation as they reach the end of the animation.",
		"use custom blend-out time#when possible, fade this animation out over the \'blend out\' time below (requires \'enable blend-out\' above, replacement anims only)",
		"override player input with motion#use the movement data in this anim instead of player physics (player only)"
	};
	STRING_LIST(animation_index_flags, animation_index_flags_strings, _countof(animation_index_flags_strings));

	STRINGS(production_status_flags)
	{
		"do not monitor changes",
		"verify sound events",
		"do not inherit for player graphs",
		"has errors or warnings",
		"keep raw data in tag",
		"allow ball-roll on foot#prevents foot-ik from settling"
	};
	STRING_LIST(production_status_flags, production_status_flags_strings, _countof(production_status_flags_strings));

	#define ANIMATION_PROPERTY_KEYFRAME_ARGB_COLOR_VALUE_ID { 0xF1EB2044, 0x455A54EA, 0x853771B2, 0xECC1161 }
	TAG_STRUCT(
		animation_property_keyframe_argb_color_value,
		"animation_property_keyframe_argb_color_value",
		"animation_property_keyframe_argb_color_value",
		"s_animation_property_keyframe_argb_color_value",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_PROPERTY_KEYFRAME_ARGB_COLOR_VALUE_ID)
	{
		{ _field_long_integer, "duration", "the amount of time from the previous keyframe to this keyframe", "milliseconds" },
		{ _field_real_argb_color, "color", "the value when the current time is on this keyframe" },
		{ _field_struct, "transition function", &animation_scalar_function },
		{ _field_terminator }
	};

	#define ANIMATION_PROPERTY_KEYFRAME_REAL_VALUE_ID { 0xB0607499, 0x47B406C2, 0xB23AF68C, 0x3D147AFE }
	TAG_STRUCT(
		animation_property_keyframe_real_value,
		"animation_property_keyframe_real_value",
		"animation_property_keyframe_real_value",
		"s_animation_property_keyframe_real_value",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_PROPERTY_KEYFRAME_REAL_VALUE_ID)
	{
		{ _field_long_integer, "duration", "the amount of time from the previous keyframe to this keyframe", "milliseconds" },
		{ _field_real, "value", "the value when the current time is on this keyframe" },
		{ _field_struct, "transition function", &animation_scalar_function },
		{ _field_terminator }
	};

	#define ANIMATION_RANGED_ACTION_BLOCK_ID { 0x95A9A8F2, 0x9CE4561, 0xB1077B2B, 0xA6B04BCF }
	TAG_STRUCT(
		animation_ranged_action_block,
		"animation_ranged_action_block",
		"animation_ranged_action_block",
		"s_animation_ranged_action_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_RANGED_ACTION_BLOCK_ID)
	{
		{ _field_string_id, "label" },
		{ _field_block, "animations", &ranged_animation_entry_block_block },
		{ _field_block, "triangulation data", &triangulation_entry_block_block },
		{ _field_short_enum, "horizontal source", &ranged_action_variable_sources },
		{ _field_short_enum, "vertical source", &ranged_action_variable_sources },
		{ _field_short_enum, "start key", &frame_event_type_new },
		{ _field_short_enum, "end key", &frame_event_type_new },
		{ _field_terminator }
	};

	STRINGS(ranged_action_variable_sources)
	{
		"none",
		"offset x",
		"offset y",
		"offset z",
		"offset horizontal",
		"negative offset x",
		"negative offset y"
	};
	STRING_LIST(ranged_action_variable_sources, ranged_action_variable_sources_strings, _countof(ranged_action_variable_sources_strings));

	#define ANIMATION_SCALAR_FUNCTION_ID { 0x93DF7492, 0x416A1688, 0x609C91AE, 0xC3D187EE }
	TAG_STRUCT(
		animation_scalar_function,
		"animation_scalar_function",
		"animation_scalar_function",
		"s_animation_scalar_function",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_SCALAR_FUNCTION_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "scalar function", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define ANIMATION_SCRIPT_EVENT_BLOCK_ID { 0x9E86771B, 0x3D44413, 0xBDD6E1C3, 0xF22F7BB5 }
	TAG_STRUCT(
		animation_script_event_block,
		"animation_script_event_block",
		"animation_script_event_block",
		"s_animation_script_event_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_SCRIPT_EVENT_BLOCK_ID)
	{
		{ _field_string_id, "script name" },
		{ _field_short_integer, "frame" },
		FIELD_PAD("pad", 2),
		{ _field_terminator }
	};

	#define ANIMATION_SCRIPT_EVENT_BLOCK_EXTENDED_ID { 0xF1014928, 0xA2A149E4, 0x8DBE6E9, 0x5734AC5E }
	TAG_STRUCT(
		animation_script_event_block_extended,
		"animation_script_event_block_extended",
		"animation_script_event_block_extended",
		"s_animation_script_event_block_extended",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_SCRIPT_EVENT_BLOCK_EXTENDED_ID)
	{
		{ _field_short_block_index, "frame event", &import_frame_event_block_block },
		{ _field_short_integer, "frame offset", "If a frame event is set, this number is relative to frame event, otherwise it's absolute." },
		{ _field_string_id, "script name" },
		{ _field_terminator }
	};

	#define ANIMATION_SET_BLOCK_ID { 0x76D6B7C8, 0x96FE4EBE, 0xA4EA7C64, 0xFD2B9FDA }
	TAG_STRUCT(
		animation_set_block,
		"animation_set_block",
		"animation_set_block",
		"s_animation_set_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_SET_BLOCK_ID)
	{
		{ _field_string_id, "label" },
		{ _field_short_block_index, "overlay group", MAKE_ALT_NAMES("pose overlay|overlay"), &overlay_group_definition_block_block },
		{ _field_short_block_index, "ik set", &animation_ik_set_block },
		{ _field_short_block_index, "gait group", &animation_gait_group_block_block },
		FIELD_PAD("asbfap", 2),
		{ _field_block, "actions", &animation_entry_block_block },
		{ _field_block, "overlay animations", MAKE_ALT_NAMES("overlays"), &animation_entry_block_block },
		{ _field_block, "death and damage", &damage_animation_block_block },
		{ _field_block, "transitions", &animation_transition_source_block_block },
		{ _field_block, "velocity boundaries", &animation_velocity_boundaries_block_block },
		{ _field_terminator }
	};

	#define ANIMATION_SOUND_EVENT_BLOCK_ID { 0xB35BC4A2, 0x13E84535, 0x99DC4BB0, 0x8C7AEE2F }
	TAG_STRUCT(
		animation_sound_event_block,
		"animation_sound_event_block",
		"animation_sound_event_block",
		"s_animation_sound_event_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_SOUND_EVENT_BLOCK_ID)
	{
		{ _field_short_block_index, "sound", &animation_graph_sound_reference_block_block },
		{ _field_short_integer, "frame" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_terminator }
	};

	#define ANIMATION_SOUND_EVENT_BLOCK_EXTENDED_ID { 0xA93991CB, 0xED064EBA, 0x911B680B, 0xB23DDA26 }
	TAG_STRUCT(
		animation_sound_event_block_extended,
		"animation_sound_event_block_extended",
		"animation_sound_event_block_extended",
		"s_animation_sound_event_block_extended",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_SOUND_EVENT_BLOCK_EXTENDED_ID)
	{
		{ _field_short_block_index, "frame event", &import_frame_event_block_block },
		FIELD_PAD("pad", 2),
		{ _field_short_block_index, "sound", &animation_graph_sound_reference_block_block },
		{ _field_short_integer, "frame offset", "If a frame event is set, this number is relative to frame event, otherwise it's absolute." },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_terminator }
	};

	#define ANIMATION_SYNC_ACTION_BLOCK_ID { 0xBDCF8448, 0x72E64BF0, 0xA4F898C8, 0xE77BBEFB }
	TAG_STRUCT(
		animation_sync_action_block,
		"animation_sync_action_block",
		"animation_sync_action_block",
		"s_animation_sync_action_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_SYNC_ACTION_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "same type participants", &animation_sync_action_same_type_participant_block },
		{ _field_block, "other participants", &animation_sync_action_other_type_participant_block },
		{ _field_terminator }
	};

	#define ANIMATION_SYNC_ACTION_GROUP_BLOCK_ID { 0x9718D376, 0x77E847EF, 0x8249C13C, 0x31158650 }
	TAG_STRUCT(
		animation_sync_action_group_block,
		"animation_sync_action_group_block",
		"animation_sync_action_group_block",
		"s_animation_sync_action_group_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_SYNC_ACTION_GROUP_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "sync actions", &animation_sync_action_block_block },
		{ _field_terminator }
	};

	#define ANIMATION_SYNC_ACTION_OTHER_TYPE_PARTICIPANT_ID { 0x273EAFFB, 0xCA1144ED, 0x8801C947, 0x43CC2243 }
	TAG_STRUCT(
		animation_sync_action_other_type_participant,
		"animation_sync_action_other_type_participant",
		"animation_sync_action_other_type_participant",
		"s_animation_sync_action_other_type_participant",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_SYNC_ACTION_OTHER_TYPE_PARTICIPANT_ID)
	{
		{ _field_long_flags, "flags", &animation_sync_action_other_type_flags_definition },
		{ _field_tag_reference, "object type", &unit_group_scenery_group_reference },
		{ _field_terminator }
	};

	STRINGS(animation_sync_action_other_type_flags_definition)
	{
		"Supports any type",
		"Disabled"
	};
	STRING_LIST(animation_sync_action_other_type_flags_definition, animation_sync_action_other_type_flags_definition_strings, _countof(animation_sync_action_other_type_flags_definition_strings));

	TAG_REFERENCE_GROUP(unit_group_scenery_group_reference, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY)
	{
		UNIT_TAG,
		SCENERY_TAG,
		INVALID_TAG
	};

	#define ANIMATION_SYNC_ACTION_SAME_TYPE_PARTICIPANT_ID { 0x9B2539FA, 0x54BF4D31, 0x85ACE0CF, 0x278CFCA8 }
	TAG_STRUCT(
		animation_sync_action_same_type_participant,
		"animation_sync_action_same_type_participant",
		"animation_sync_action_same_type_participant",
		"s_animation_sync_action_same_type_participant",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_SYNC_ACTION_SAME_TYPE_PARTICIPANT_ID)
	{
		{ _field_long_flags, "flags", &animation_sync_action_flags_definition },
		{ _field_struct, "animation", &animation_index_struct },
		{ _field_real_point_3d, "start offset" },
		{ _field_real_vector_3d, "start facing" },
		{ _field_real_point_3d, "end offset" },
		{ _field_real, "time_until_hurt" },
		{ _field_real_point_3d, "apex offset" },
		{ _field_terminator }
	};

	STRINGS(animation_sync_action_flags_definition)
	{
		"Initiator",
		"Critical Participant",
		"Disabled",
		"Airborne"
	};
	STRING_LIST(animation_sync_action_flags_definition, animation_sync_action_flags_definition_strings, _countof(animation_sync_action_flags_definition_strings));

	#define ANIMATION_TRANSITION_DESTINATION_BLOCK_ID { 0xFA4C76F9, 0xB84A45F0, 0xAC868FEA, 0xE0D1DC8B }
	TAG_STRUCT(
		animation_transition_destination_block,
		"animation_transition_destination_block",
		"animation_transition_destination_block",
		"s_animation_transition_destination_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_TRANSITION_DESTINATION_BLOCK_ID)
	{
		{ _field_string_id, "mode name", "name of the mode this transition ends in" },
		{ _field_string_id, "state name", "name of the state this transition ends in" },
		{ _field_struct, "animation", &animation_index_struct },
		{ _field_terminator }
	};

	#define ANIMATION_TRANSITION_SOURCE_BLOCK_STRUCT_ID { 0x21A980DD, 0x4CB746B8, 0xAB7E811F, 0x14E7A714 }
	TAG_STRUCT(
		animation_transition_source_block_struct,
		"animation_transition_source_block_struct",
		"animation_transition_source_block_struct",
		"s_animation_transition_source_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_TRANSITION_SOURCE_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "state name", "name of the state this transition starts in" },
		{ _field_block, "destinations", &animation_transition_destination_block_block },
		{ _field_terminator }
	};

	#define ANIMATION_USAGE_BLOCK_ID { 0x342555EE, 0x4EF942A3, 0x81E1346D, 0x6713E115 }
	TAG_STRUCT(
		animation_usage_block,
		"animation_usage_block",
		"animation_usage_block",
		"s_animation_usage_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_USAGE_BLOCK_ID)
	{
		{ _field_short_enum, "usage", &animation_usage_enumeration },
		{ _field_short_block_index, "node to use", &animation_graph_node_block_block },
		{ _field_terminator }
	};

	STRINGS(animation_usage_enumeration)
	{
		"physics control",
		"camera control",
		"origin marker",
		"left clavicle",
		"left upperarm",
		"pose blend pitch",
		"pose blend yaw",
		"pedestal",
		"pelvis",
		"left foot",
		"right foot",
		"damage root gut",
		"damage root chest",
		"damage root head",
		"damage root left shoulder",
		"damage root left arm",
		"damage root left leg",
		"damage root left foot",
		"damage root right shoulder",
		"damage root right arm",
		"damage root right leg",
		"damage root right foot",
		"left hand",
		"right hand",
		"weapon ik"
	};
	STRING_LIST(animation_usage_enumeration, animation_usage_enumeration_strings, _countof(animation_usage_enumeration_strings));

	#define ANIMATION_VELOCITY_BOUNDARIES_STRUCT_DEFINITION_ID { 0xD512B001, 0x58E04B93, 0x8363AD46, 0x72E1442C }
	TAG_STRUCT(
		animation_velocity_boundaries_struct_definition,
		"animation_velocity_boundaries",
		"animation_velocity_boundaries",
		"s_animation_velocity_boundaries",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_VELOCITY_BOUNDARIES_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "values" },
		{ _field_terminator }
	};

	#define ANIMATION_VELOCITY_BOUNDARIES_BLOCK_ID { 0x7DB78F23, 0xF92412A, 0xA5FFBF86, 0x73473212 }
	TAG_STRUCT(
		animation_velocity_boundaries_block,
		"animation_velocity_boundaries_block",
		"animation_velocity_boundaries_block",
		"s_animation_velocity_boundaries_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANIMATION_VELOCITY_BOUNDARIES_BLOCK_ID)
	{
		{ _field_array, "velocity boundary entries", &animation_velocity_boundaries$2 },
		{ _field_terminator }
	};

	#define ANTENNA_STRUCT_DEFINITION_ID { 0xB3BE1D39, 0xEF274B86, 0x866479C8, 0xE030C9EE }
	TAG_STRUCT(
		antenna_struct_definition,
		"antenna_struct_definition",
		"antenna_struct_definition",
		"s_antenna_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN3 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANTENNA_STRUCT_DEFINITION_ID)
	{
		{ _field_old_string_id, "attachment marker name", "the marker name where the antenna should be attached" },
		{ _field_tag_reference, "bitmaps", &bitmap_group_reference$6 },
		{ _field_tag_reference, "physics", &point_physics_group_reference },
		{ _field_real_fraction, "spring strength coefficient", "strength of the spring (larger values make the spring stronger)" },
		{ _field_real, "texel to world width scale" },
		{ _field_real, "falloff pixels" },
		{ _field_real, "cutoff pixels" },
		{ _field_real, "point of bend", "[0,1]" },
		{ _field_real, "starting bend", "[0,1]" },
		{ _field_real, "ending bend", "[0,1]" },
		{ _field_real, "runtime total length" },
		{ _field_block, "vertices", &antenna_vertex_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(bitmap_group_reference$6, BITMAP_TAG);

	TAG_REFERENCE(point_physics_group_reference, POINT_PHYSICS_TAG);

	#define ANTENNA_VERTEX_BLOCK_ID { 0x5F3BF4F0, 0x7754476A, 0x8359AD41, 0xAB160F49 }
	TAG_STRUCT(
		antenna_vertex_block,
		"antenna_vertex_block",
		"antenna_vertex_block",
		"s_antenna_vertex_block",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANTENNA_VERTEX_BLOCK_ID)
	{
		{ _field_real_euler_angles_2d, "angles", "direction toward next vertex", FIELD_FLAG_UNKNOWN0 },
		{ _field_real, "length", "distance between this vertex and the next", "world units" },
		{ _field_short_integer, "sequence index", "bitmap group sequence index for this vertex's texture" },
		FIELD_PAD("NTCTQQF", 2),
		{ _field_real_argb_color, "color", "color at this vertex" },
		{ _field_real_argb_color, "LOD color", "color at this vertex for the low-LOD line primitives", FIELD_FLAG_UNKNOWN0 },
		{ _field_real, "hermite t" },
		{ _field_real_vector_3d, "vector to next" },
		{ _field_terminator }
	};

	#define ANTI_GRAVITY_POINT_DEFINITION_BLOCK_ID { 0x9001A182, 0x8DF4B6F, 0x8425443F, 0xF6CA64AD }
	TAG_STRUCT(
		anti_gravity_point_definition_block,
		"anti_gravity_point_definition_block",
		"anti_gravity_point_definition_block",
		"s_anti_gravity_point_definition_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ANTI_GRAVITY_POINT_DEFINITION_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_long_flags, "flags", &anti_gravity_point_definition_flags },
		{ _field_long_enum, "damping", &anti_gravity_point_definition_damping },
		FIELD_IFP_BEGIN(),
		{ _field_real, "antigrav strength" },
		{ _field_real, "antigrav height" },
		{ _field_real, "antigrav compression damping", MAKE_ALT_NAMES("antigrav damp factor") },
		{ _field_real, "antigrav extension damping" },
		{ _field_real, "antigrav normal k1" },
		{ _field_real, "antigrav normal k0" },
		{ _field_real, "radius" },
		FIELD_IFP_END(),
		{ _field_string_id, "collision global material name" },
		{ _field_short_integer, "runtime global material index" },
		{ _field_short_integer, "WU" },
		{ _field_string_id, "damage source region name" },
		{ _field_real, "default state error" },
		{ _field_real, "minor damage error" },
		{ _field_real, "medium damage error" },
		{ _field_real, "major damage error" },
		{ _field_real, "destroyed state error" },
		{ _field_terminator }
	};

	STRINGS(anti_gravity_point_definition_flags)
	{
		"gets damage from region",
		"only active on water"
	};
	STRING_LIST(anti_gravity_point_definition_flags, anti_gravity_point_definition_flags_strings, _countof(anti_gravity_point_definition_flags_strings));

	STRINGS(anti_gravity_point_definition_damping)
	{
		"normal",
		"damped left",
		"damped right",
		"undamped left",
		"undamped right"
	};
	STRING_LIST(anti_gravity_point_definition_damping, anti_gravity_point_definition_damping_strings, _countof(anti_gravity_point_definition_damping_strings));

	#define AREA_CLUSTER_OCCUPANCY_BITVECTOR_ARRAY_STRUCT_DEFINITION_ID { 0xC8420AC3, 0x96874B81, 0x8F07ACCE, 0xEDD9DE36 }
	TAG_STRUCT(
		area_cluster_occupancy_bitvector_array_struct_definition,
		"area_cluster_occupancy_bitvector_array",
		"area_cluster_occupancy_bitvector_array",
		"s_area_cluster_occupancy_bitvector_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AREA_CLUSTER_OCCUPANCY_BITVECTOR_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "bitvector data" },
		{ _field_terminator }
	};

	#define AREA_CONTROL_BLOCK_STRUCT_ID { 0x865D9C15, 0x26384F67, 0x8F336B17, 0xE28A73DE }
	TAG_STRUCT(
		area_control_block_struct,
		"area_control_block_struct",
		"area_control_block_struct",
		"s_area_control_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AREA_CONTROL_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("AREA CONTROL", "Higher level scale controls for camera shake, camera impulse and rumble."),
		{ _field_word_flags, "flags", &area_control_flags },
		FIELD_PAD("DRCS", 2),
		FIELD_EXPLANATION("Distance Falloff", "controls the maximum distance and the distance falloff of this effect\nNOTE: not used for scenario global effects"),
		{ _field_real, "maximum distance", "the maximum distance this player feedback will affect", "world units" },
		{ _field_struct, "distance falloff", &area_control_scalar_function_struct },
		FIELD_EXPLANATION("Angle Falloff", "controls the falloff of this effect based on how close you are to looking directly at it\nNOTE: not used for scenario global effects"),
		{ _field_struct, "angle falloff", &area_control_scalar_function_struct },
		FIELD_EXPLANATION("Object Falloff", "applies a falloff based on an object function - ignored if the effect is not attached to an object"),
		{ _field_struct, "object falloff", &area_control_scalar_object_function_struct },
		{ _field_terminator }
	};

	STRINGS(area_control_flags)
	{
		"distance_falloff",
		"angle_falloff",
		"object function falloff",
		"use unit position#use the head position and facing vector of the unit instead of the player camera"
	};
	STRING_LIST(area_control_flags, area_control_flags_strings, _countof(area_control_flags_strings));

	#define AREA_CONTROL_SCALAR_FUNCTION_STRUCT_ID { 0x3EF80F86, 0xF31468C, 0xB4C40EA2, 0x6E38CA3A }
	TAG_STRUCT(
		area_control_scalar_function_struct,
		"area_control_scalar_function_struct",
		"area_control_scalar_function_struct",
		"s_area_control_scalar_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AREA_CONTROL_SCALAR_FUNCTION_STRUCT_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define AREA_CONTROL_SCALAR_OBJECT_FUNCTION_STRUCT_ID { 0x3D2F4F41, 0xF93C4657, 0xA70770A2, 0x7413F8E }
	TAG_STRUCT(
		area_control_scalar_object_function_struct,
		"area_control_scalar_object_function_struct",
		"area_control_scalar_object_function_struct",
		"s_area_control_scalar_object_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AREA_CONTROL_SCALAR_OBJECT_FUNCTION_STRUCT_ID)
	{
		{ _field_string_id, "Input Variable", _field_id_function_input_scalar },
		{ _field_string_id, "Range Variable", _field_id_function_input_range },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define AREA_REFERENCE_BLOCK_STRUCT_ID { 0xF805BB85, 0x40034CC8, 0xA7CED22B, 0xC5D6C669 }
	TAG_STRUCT(
		area_reference_block_struct,
		"area_reference_block_struct",
		"area_reference_block_struct",
		"s_area_reference_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AREA_REFERENCE_BLOCK_STRUCT_ID)
	{
		{ _field_short_enum, "area type", &zone_set_type_enum },
		{ _field_byte_flags, "flags", &zone_set_flags },
		FIELD_PAD("no-character-flags-padding", 1),
		{ _field_short_block_index, "zone", &zone_block_block },
		{ _field_short_block_index_custom_search, "area", &custom_area_block_index_definition },
		{ _field_angle, "yaw" },
		{ _field_long_integer, "connection flags 0" },
		{ _field_long_integer, "connection flags 1" },
		{ _field_long_integer, "connection flags 2" },
		{ _field_long_integer, "connection flags 3" },
		{ _field_terminator }
	};

	STRINGS(zone_set_type_enum)
	{
		"normal{core}",
		"search",
		"core{leader}"
	};
	STRING_LIST(zone_set_type_enum, zone_set_type_enum_strings, _countof(zone_set_type_enum_strings));

	STRINGS(zone_set_flags)
	{
		"goal",
		"direction valid*!"
	};
	STRING_LIST(zone_set_flags, zone_set_flags_strings, _countof(zone_set_flags_strings));

	#define AREA_SCREEN_EFFECT_STRUCT_DEFINITION_ID { 0xE25095D4, 0x57E84346, 0xAA15B7AB, 0x8088091E }
	TAG_STRUCT(
		area_screen_effect_struct_definition,
		"area_screen_effect_struct_definition",
		"area_screen_effect_struct_definition",
		"s_area_screen_effect_struct_definition",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AREA_SCREEN_EFFECT_STRUCT_DEFINITION_ID)
	{
		{ _field_word_flags, "global flags", &area_screen_effect_global_flags_definition },
		{ _field_word_flags, "global hidden flags", &area_screen_effect_global_hidden_flags_definition },
		{ _field_block, "screen effects", &single_screen_effect_block },
		{ _field_terminator }
	};

	STRINGS(area_screen_effect_global_flags_definition)
	{
		"play sequentially - ignore delay settings",
		"debug this screen effect",
		"force delete when attached to dead object",
		"force max one per object",
		"force looping (dangerous; lasts forever)",
		"only spawn killcam version during killcam"
	};
	STRING_LIST(area_screen_effect_global_flags_definition, area_screen_effect_global_flags_definition_strings, _countof(area_screen_effect_global_flags_definition_strings));

	STRINGS(area_screen_effect_global_hidden_flags_definition)
	{
		"update thread",
		"render thread"
	};
	STRING_LIST(area_screen_effect_global_hidden_flags_definition, area_screen_effect_global_hidden_flags_definition_strings, _countof(area_screen_effect_global_hidden_flags_definition_strings));

	#define AREA_SECTOR_POINT_BLOCK_ID { 0x40B3B9F7, 0xF0C94F35, 0xB1D416B3, 0x93918A26 }
	TAG_STRUCT(
		area_sector_point_block,
		"area_sector_point_block",
		"area_sector_point_block",
		"s_area_sector_point_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AREA_SECTOR_POINT_BLOCK_ID)
	{
		{ _field_real_point_3d, "point" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_real_euler_angles_2d, "normal" },
		{ _field_terminator }
	};

	#define AREAS_BLOCK_STRUCT_ID { 0x65351716, 0xEEF54EC7, 0xB16396B1, 0x2F48E3D7 }
	TAG_STRUCT(
		areas_block_struct,
		"areas_block_struct",
		"areas_block_struct",
		"s_areas_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AREAS_BLOCK_STRUCT_ID)
	{
		FIELD_CUSTOM("value", _field_id_default),
		FIELD_CUSTOM("value", _field_id_default),
		FIELD_CUSTOM("value", _field_id_default),
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_long_integer, "hkaiVolume vtable", _field_id_zero_data },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		{ _field_string, "name" },
		{ _field_long_flags, "area flags", &area_flags },
		{ _field_real_point_3d, "runtime relative mean point" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_real, "runtime standard deviation" },
		{ _field_short_integer, "runtime starting index" },
		{ _field_short_integer, "runtime count" },
		{ _field_struct, "Nav Mesh Attachments", &navmeshattachmentsstruct },
		{ _field_array, "cluster occupancy", &area_cluster_occupancy_bitvector_array$2 },
		{ _field_block, "flight_hints", &flight_reference_block_block },
		{ _field_block, "points", &area_sector_point_block_block },
		FIELD_EXPLANATION("Generation Properties", nullptr),
		{ _field_short_enum, "preset", &generate_preset_enum, _field_id_ugpc },
		{ _field_short_integer, "runtimeCarverInversion" },
		{ _field_long_flags, "flags", &generate_flags },
		{ _field_real, "extrusion" },
		{ _field_real, "sink" },
		{ _field_angle, "firing point orientation" },
		{ _field_angle, "grid orientation" },
		{ _field_real, "nav volume cell size" },
		{ _field_real, "spacing" },
		{ _field_real, "airborne spacing" },
		{ _field_real, "min cover length" },
		{ _field_real, "cover spacing" },
		{ _field_real, "cover offset distance" },
		{ _field_real, "too close distance" },
		{ _field_terminator }
	};

	STRINGS(area_flags)
	{
		"vehicle area",
		"wall climb",
		"manual reference frame",
		"turret deployment area",
		"invalid sector def!",
		"air volume navigation",
		"generate wall climb nav mesh"
	};
	STRING_LIST(area_flags, area_flags_strings, _countof(area_flags_strings));

	STRINGS(generate_preset_enum)
	{
		"high density{dense}",
		"medium density",
		"low density{loose}",
		"high density vehicle",
		"medium density vehicle{vehicle}",
		"airborne",
		"engineer",
		"dogfight",
		"dropship",
		"orbital",
		"bishop high density",
		"bishop medium density",
		"bishop low density"
	};
	STRING_LIST(generate_preset_enum, generate_preset_enum_strings, _countof(generate_preset_enum_strings));

	STRINGS(generate_flags)
	{
		"exclude cover",
		"ignore existing",
		"generate radial",
		"don\'t stagger",
		"airborne",
		"airborne stagger",
		"continue casting"
	};
	STRING_LIST(generate_flags, generate_flags_strings, _countof(generate_flags_strings));

	#define ARMOR_MODIFIER_BLOCK_ID { 0x1D0D482B, 0xAB145C0, 0x86B6EF80, 0x3FDE838A }
	TAG_STRUCT(
		armor_modifier_block,
		"armor_modifier_block",
		"armor_modifier_block",
		"s_armor_modifier_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ARMOR_MODIFIER_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_real, "damage multiplier" },
		{ _field_terminator }
	};

	#define ARMORMOD_GLOBALS_STRUCT_DEFINITION_ID { 0xBA3D69E0, 0x5E314FDE, 0x992D73B7, 0xB75EB20 }
	TAG_STRUCT(
		armormod_globals_struct_definition,
		"armormod_globals_struct_definition",
		"armormod_globals_struct_definition",
		"s_armormod_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ARMORMOD_GLOBALS_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("explode on death", nullptr),
		{ _field_tag_reference, "projectile", "spawned by Explode On Death armormod", &projectile_group_reference },
		FIELD_EXPLANATION("aural enhancement", nullptr),
		{ _field_tag_reference, "looping sound effect", &sound_looping_group_reference },
		{ _field_real, "near threshold", "beyond this distance volume is attenuated, far audio settings are applied", "world units" },
		{ _field_real, "attenuation pct", "how much to attenuate volume" },
		{ _field_block, "near audio settings", &aural_enhancement_audio_settings_block_block },
		{ _field_block, "far audio settings", &aural_enhancement_audio_settings_block_block },
		FIELD_EXPLANATION("Enhanced HUD (battle awareness)", nullptr),
		{ _field_real, "range", nullptr, "world units" },
		FIELD_EXPLANATION("Stealth", nullptr),
		{ _field_byte_flags, "flags", &stealthflagsdefs },
		FIELD_PAD("agspad", 3),
		{ _field_real, "stealth ping frequency", "how often stealthed unit will ping", "seconds" },
		{ _field_real, "stealth ping duration", "length of ping", "seconds" },
		{ _field_terminator }
	};

	TAG_REFERENCE(projectile_group_reference, PROJECTILE_TAG);

	TAG_REFERENCE(sound_looping_group_reference, SOUND_LOOPING_TAG);

	STRINGS(stealthflagsdefs)
	{
		"is invisible to X-ray",
		"pings invisible on radar edge on foot#if enabled player will not ping on the radar gutter (circumference of radar) when on foot",
		"pings invisible on radar edge if driving#if enabled player will not ping on the radar gutter (circumference of radar) when driving a vehicle",
		"pings invisible on radar edge if in vehicle#if enabled player will not ping on the radar gutter (circumference of radar) when riding in a vehicle, in any seat",
		"pings invisible on radar edge only for enemy team#if this is enabled, stealth player will only not ping for the enemy team",
		"is invisible to turrets when camo is active",
		"use mod ping frequency and duration#enabling this will use the values set below for the radar ping and frequency",
		"disable footstep audio"
	};
	STRING_LIST(stealthflagsdefs, stealthflagsdefs_strings, _countof(stealthflagsdefs_strings));

	#define ATMOSPHERE_DEFINITION_BLOCK_ID { 0xA4C4E5E8, 0x40A7425B, 0x83DB142C, 0x3F7926B0 }
	TAG_STRUCT(
		atmosphere_definition_block,
		"atmosphere_definition_block",
		"atmosphere_definition_block",
		"s_atmosphere_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ATMOSPHERE_DEFINITION_BLOCK_ID)
	{
		{ _field_word_flags, "Flags", &atmosphere_flags },
		{ _field_byte_integer, "Version" },
		FIELD_PAD("ABCDEFGH", 1),
		FIELD_EXPLANATION("Ambient Fog Parameters", "All heights are absolute world space height\n"),
		{ _field_real, "distance bias", "negative means into the screen", "world units" },
		FIELD_GROUP_BEGIN("Sky Fog"),
		{ _field_struct, "sky fog", &solo_fog_parameters_struct_definition },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Ground Fog"),
		{ _field_struct, "ground fog", &solo_fog_parameters_struct_definition },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Ceiling Fog BEWARE"),
		{ _field_struct, "ceiling fog", &solo_fog_parameters_struct_definition },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Fog Light"),
		{ _field_struct, "fog light", &fog_light_struct_definition },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Patchy Fog Per-Cluster Parameters", "Sheet density.............Intensity scaling factor applied to all sheets\nFull intensity height.....Height above 0 below which fog should be at full intensity\nHalf intensity height.....Height at which fog should be attenuated to half intensity\nWind......................Direction and intensity of fog motion due to wind\n\n"),
		{ _field_real, "Sheet density" },
		{ _field_real_rgb_color, "Color tint" },
		{ _field_real_rgb_color, "Color tint inner" },
		{ _field_real, "Intensity" },
		{ _field_real, "Full intensity height" },
		{ _field_real, "Half intensity height" },
		{ _field_real_vector_3d, "Wind direction" },
		{ _field_real, "Reference plane height" },
		FIELD_GROUP_BEGIN("Volume Fog"),
		{ _field_struct, "volume fog", &volumefogparametersdefinition },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Light Shafts"),
		{ _field_struct, "light shaft", &lightshaftparametersdefinition },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Weather effect", "Effect tag to create nearby raindrops, snowflakes, etc.\nParticle systems from this effect will follow the camera and wrap seamlessly as you turn or move.\n\n"),
		{ _field_tag_reference, "Weather effect", &effect_group_reference },
		{ _field_terminator }
	};

	STRINGS(atmosphere_flags)
	{
		"Sky Fog Enabled",
		"Ground Fog Enabled",
		"Ceiling Fog Enabled",
		"Fog Light Enabled",
		"Patchy Fog Enabled",
		"Sky Fog Height Camera Relative",
		"Ground Fog Height Camera Relative",
		"Use Floating Shadow for Fog Light",
		"Only use fog light for light shafts"
	};
	STRING_LIST(atmosphere_flags, atmosphere_flags_strings, _countof(atmosphere_flags_strings));

	#define ATMOSPHERE_GLOBALS_STRUCT_DEFINITION_ID { 0x3EBF8816, 0xC94C4915, 0xB3C990D2, 0x7039F615 }
	TAG_STRUCT(
		atmosphere_globals_struct_definition,
		"atmosphere_globals_struct_definition",
		"atmosphere_globals_struct_definition",
		"s_atmosphere_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ATMOSPHERE_GLOBALS_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Patchy Fog Global Parameters", "Fog Bitmap................Noise texture to use on the screen-aligned sheets of fog\nTexture repeat rate.......Scaling factor to apply to fog UV coordinates\nDistance between sheets...Separating distance between sheets of fog\nDepth fade factor.........Lower values (approaching 0) cause a smoother fade at scene boundaries. Larger values (1 or more) make for a sharp transition\n\nFalloff start distance....Distance (in world units) at which to begin fading out patchy fog (default: 5)\nDistance falloff power....Rate at which to begin attenuating patchy fog settings (default: 2)\nTransparent sort distance..Distance from the camera where we sort the patchy fog effect (default: 100)\nwind strength across distance..Multiplies the wind strength based upon distance from player\n\n"),
		{ _field_tag_reference, "Fog Bitmap", &bitmap_group_reference$2 },
		{ _field_real, "Texture repeat rate" },
		{ _field_real, "Distance between sheets" },
		{ _field_real, "Depth fade factor" },
		{ _field_real, "Transparent sort distance" },
		{ _field_char_enum, "Transparent sort layer", &global_sort_layer_enum_defintion },
		FIELD_PAD("UNdfdfdSED", 3),
		{ _field_struct, "wind strength across distance", &scalar_function_named_struct_default_one },
		{ _field_block, "underwater settings", &underwater_setting_block_block },
		{ _field_terminator }
	};

	STRINGS(global_sort_layer_enum_defintion)
	{
		"invalid",
		"pre-pass",
		"normal",
		"post-pass"
	};
	STRING_LIST(global_sort_layer_enum_defintion, global_sort_layer_enum_defintion_strings, _countof(global_sort_layer_enum_defintion_strings));

	#define ATTACHMENT_BLOCK_ID { 0xDB309672, 0x396440FD, 0x8DB1932A, 0xD3071736 }
	TAG_STRUCT(
		attachment_block,
		"attachment_block",
		"attachment_block",
		"s_attachment_block",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ATTACHMENT_BLOCK_ID)
	{
		{ _field_byte_flags, "flags", &attachment_flags },
		FIELD_PAD("gerrrrr", 3),
		{ _field_tag_reference, "type", &effect_group_sound_old_group_material_effects_group_reference },
		{ _field_char_enum, "trigger", &attachment_type_enum },
		{ _field_byte_integer, "skip fraction", "0 will always play, 127 will be extremely rare", nullptr, "[0-127]" },
		{ _field_char_enum, "primary scale", &game_state_type_enum },
		{ _field_char_enum, "secondary scale", &game_state_type_enum },
		{ _field_terminator }
	};

	STRINGS(attachment_flags)
	{
		"disabled for debugging"
	};
	STRING_LIST(attachment_flags, attachment_flags_strings, _countof(attachment_flags_strings));

	TAG_REFERENCE_GROUP(effect_group_sound_old_group_material_effects_group_reference)
	{
		EFFECT_TAG,
		SOUND_OLD_TAG,
		MATERIAL_EFFECTS_TAG,
		INVALID_TAG
	};

	STRINGS(attachment_type_enum)
	{
		"birth",
		"collision",
		"death",
		"first collision"
	};
	STRING_LIST(attachment_type_enum, attachment_type_enum_strings, _countof(attachment_type_enum_strings));

	STRINGS(game_state_type_enum)
	{
		"particle age",
		"system age{emitter age}",
		"particle random",
		"system random{emitter random}",
		"particle correlation 1{particle random 1}",
		"particle correlation 2{particle random 2}",
		"particle correlation 3{particle random 3}",
		"particle correlation 4{particle random 4}",
		"system correlation 1{emitter correlation 1}{emitter random 1}",
		"system correlation 2{emitter correlation 2}{emitter random 2}",
		"particle emission time{emitter time}{particle emit time}",
		"location lod{system lod}",
		"game time",
		"effect a scale",
		"effect b scale",
		"particle rotation{physics rotation}",
		"location random",
		"distance from emitter",
		"particle simulation a",
		"particle simulation b",
		"particle velocity",
		"invalid state --- please set again"
	};
	STRING_LIST(game_state_type_enum, game_state_type_enum_strings, _countof(game_state_type_enum_strings));

	#define AURAL_ENHANCEMENT_AUDIO_SETTINGS_BLOCK_ID { 0x6D429CC4, 0x18EA4C2D, 0x8C429766, 0xC595AEF5 }
	TAG_STRUCT(
		aural_enhancement_audio_settings_block,
		"aural_enhancement_audio_settings_block",
		"aural_enhancement_audio_settings_block",
		"s_aural_enhancement_audio_settings_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AURAL_ENHANCEMENT_AUDIO_SETTINGS_BLOCK_ID)
	{
		{ _field_real, "frequency", "beeps per second" },
		{ _field_real, "duty cycle pct" },
		{ _field_terminator }
	};

	#define AUTHORED_LIGHT_PROBE_BLOCK_STRUCT_ID { 0x6156E0EA, 0x199B52E8, 0x6AFCC92D, 0xD2FFEBEB }
	TAG_STRUCT(
		authored_light_probe_block_struct,
		"authored_light_probe_block_struct",
		"authored_light_probe_block_struct",
		"s_authored_light_probe_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AUTHORED_LIGHT_PROBE_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("Character Lighting", "\n"),
		{ _field_block, "Lights", &authored_light_probe_lights_block_block },
		FIELD_CUSTOM("Authored Light Probe Intensity Scale", _tag_field_custom_type_slider),
		{ _field_real, "Authored Light Probe Intensity Scale", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Generated Air Probe Intensity Scale", _tag_field_custom_type_slider),
		{ _field_real, "Generated Air Probe Intensity Scale", _tag_field_custom_type_slider },
		{ _field_array, "raw sh data", &real_rgb_lightprobe_array$2 },
		{ _field_char_enum, "Is Camera-space", &midnight_boolean_enum_definition },
		{ _field_char_enum, "Apply to First Person Geometry", &midnight_boolean_enum_definition },
		FIELD_PAD("pdd", 2),
		FIELD_EXPLANATION("Object Shadows (all objects, not just characters)", "\n"),
		FIELD_CUSTOM("IO Direct Lighting Minimum Percentage (When in Shadow)", _tag_field_custom_type_slider),
		{ _field_real, "IO Direct Lighting Minimum Percentage (When in Shadow)", _tag_field_custom_type_slider },
		{ _field_terminator }
	};

	STRINGS(midnight_boolean_enum_definition)
	{
		"Off",
		"On"
	};
	STRING_LIST(midnight_boolean_enum_definition, midnight_boolean_enum_definition_strings, _countof(midnight_boolean_enum_definition_strings));

	#define AUTHORED_LIGHT_PROBE_LIGHTS_BLOCK_ID { 0xC2EA80AD, 0xE1B9C6AD, 0x667ED3BE, 0x79A6A3FF }
	TAG_STRUCT(
		authored_light_probe_lights_block,
		"authored_light_probe_lights_block",
		"authored_light_probe_lights_block",
		"s_authored_light_probe_lights_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AUTHORED_LIGHT_PROBE_LIGHTS_BLOCK_ID)
	{
		FIELD_CUSTOM("Authored Light Probe", _field_id_authored_light_probe),
		FIELD_CUSTOM("Direction 1", _tag_field_custom_type_slider),
		{ _field_real, "Direction 1", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Front-Back 1", _tag_field_custom_type_slider),
		{ _field_real, "Front-Back 1", _tag_field_custom_type_slider },
		{ _field_real_rgb_color, "Direct color 1" },
		FIELD_CUSTOM("Direct intensity 1", _tag_field_custom_type_slider),
		{ _field_real, "Direct intensity 1", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Direction 2", _tag_field_custom_type_slider),
		{ _field_real, "Direction 2", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Front-Back 2", _tag_field_custom_type_slider),
		{ _field_real, "Front-Back 2", _tag_field_custom_type_slider },
		{ _field_real_rgb_color, "Direct color 2" },
		FIELD_CUSTOM("Direct intensity 2", _tag_field_custom_type_slider),
		{ _field_real, "Direct intensity 2", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Authored Light Probe Intensity Scale", _tag_field_custom_type_slider),
		{ _field_real, "Authored Light Probe Intensity Scale", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Generated Air Probe Intensity Scale", _tag_field_custom_type_slider),
		{ _field_real, "Generated Air Probe Intensity Scale", _tag_field_custom_type_slider },
		{ _field_terminator }
	};

	#define AVATAR_AWARDS_STRUCT_DEFINITION_ID { 0xE7F475A4, 0xCEA745F5, 0xB17719E4, 0x82815003 }
	TAG_STRUCT(
		avatar_awards_struct_definition,
		"avatar_awards_struct_definition",
		"avatar_awards_struct_definition",
		"s_avatar_awards_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		AVATAR_AWARDS_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "avatar_award", &single_avatar_award_definition_block_block },
		{ _field_terminator }
	};

	#define BALL_AND_SOCKET_CONSTRAINTS_BLOCK_ID { 0x96EF29F8, 0xD4CB4C71, 0x8E24795D, 0xBC63D57D }
	TAG_STRUCT(
		ball_and_socket_constraints_block,
		"ball_and_socket_constraints_block",
		"ball_and_socket_constraints_block",
		"s_ball_and_socket_constraints_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BALL_AND_SOCKET_CONSTRAINTS_BLOCK_ID)
	{
		{ _field_struct, "constraint bodies", &constraint_bodies_struct },
		FIELD_PAD("UPDLSKB", 4),
		{ _field_terminator }
	};

	#define BARREL_FIRING_EFFECT_BLOCK_ID { 0x28BBFA00, 0x756842B0, 0x94E75CD1, 0xB8E7F4E6 }
	VERSIONED_TAG_STRUCT(
		barrel_firing_effect_block,
		"barrel_firing_effect_block",
		"barrel_firing_effect_block",
		"s_barrel_firing_effect_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BARREL_FIRING_EFFECT_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 17 },
		{ _field_short_integer, "shot count lower bound", "the minimum number of times this firing effect will be used, once it has been chosen" },
		{ _field_short_integer, "shot count upper bound", "the maximum number of times this firing effect will be used, once it has been chosen" },
		{ _field_tag_reference, "firing effect", "this effect is used when the weapon is loaded and fired normally", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "critical effect", "this effect is used when the weapon is loaded and will do critical damage", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "misfire effect", "this effect is used when the weapon is loaded but fired while overheated", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "empty effect", "this effect is used when the weapon is not loaded", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "optional secondary firing effect", "this effect is used when the weapon is not loaded", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "firing damage", "this effect is used when the weapon is loaded and fired normally", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "critical damage", "this effect is used when the weapon is loaded and will do critical damage", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "misfire damage", "this effect is used when the weapon is loaded but fired while overheated", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "empty damage", "this effect is used when the weapon is not loaded", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "optional secondary firing damage", "this effect is used when the weapon is loaded and fired normally", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "firing rider damage", "this effect is used when the weapon is loaded and fired normally", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "critical rider damage", "this effect is used when the weapon is loaded and will do critical damage", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "misfire rider damage", "this effect is used when the weapon is loaded but fired while overheated", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "empty rider damage", "this effect is used when the weapon is not loaded", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "optional secondary firing rider damage", "this effect is used when the weapon is loaded and fired normally", &damage_effect_group_damage_response_definition_group_reference },
		
		{ _struct_version_mode_equal, 0, 11 },
		{ _field_short_integer, "shot count lower bound", "the minimum number of times this firing effect will be used, once it has been chosen" },
		{ _field_short_integer, "shot count upper bound", "the maximum number of times this firing effect will be used, once it has been chosen" },
		FIELD_PAD("YOVCOMT", 32),
		{ _field_tag_reference, "firing effect", "this effect is used when the weapon is loaded and fired normally", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "critical effect", "this effect is used when the weapon is loaded and will do critical damage", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "misfire effect", "this effect is used when the weapon is loaded but fired while overheated", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "empty effect", "this effect is used when the weapon is not loaded", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "firing damage", "this effect is used when the weapon is loaded and fired normally", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "critical damage", "this effect is used when the weapon is loaded and will do critical damage", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "misfire damage", "this effect is used when the weapon is loaded but fired while overheated", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "empty damage", "this effect is used when the weapon is not loaded", &damage_effect_group_damage_response_definition_group_reference },
		
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(sound_old_group_effect_group_reference)
	{
		SOUND_OLD_TAG,
		EFFECT_TAG,
		INVALID_TAG
	};

	TAG_REFERENCE_GROUP(damage_effect_group_damage_response_definition_group_reference)
	{
		DAMAGE_EFFECT_TAG,
		DAMAGE_RESPONSE_DEFINITION_TAG,
		INVALID_TAG
	};

	#define BEHAVIOR_NAMES_BLOCK_ID { 0x3B1809CC, 0x71BE4135, 0xA509EB0E, 0x42358E50 }
	TAG_STRUCT(
		behavior_names_block,
		"behavior_names_block",
		"behavior_names_block",
		"s_behavior_names_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BEHAVIOR_NAMES_BLOCK_ID)
	{
		{ _field_string, "behavior name" },
		{ _field_terminator }
	};

	#define BIG_BATTLE_CREATURE_BLOCK_STRUCT_ID { 0xC9CAA3F, 0xE6544B0A, 0x970A3001, 0xC88B7C27 }
	TAG_STRUCT(
		big_battle_creature_block_struct,
		"big_battle_creature_block_struct",
		"big_battle_creature_block_struct",
		"s_big_battle_creature_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIG_BATTLE_CREATURE_BLOCK_STRUCT_ID)
	{
		FIELD_GROUP_BEGIN("CREATURE"),
		{ _field_long_flags, "flags", &creature_definition_flags },
		{ _field_short_enum, "default team", &unit_default_teams },
		{ _field_short_enum, "motion sensor blip size", &global_chud_blip_type_definition },
		{ _field_angle, "turning velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "turning acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual turning modifier", nullptr, nullptr, "[0,1]" },
		{ _field_real, "autoaim width", nullptr, "world units" },
		{ _field_struct, "physics", &character_physics_struct },
		{ _field_tag_reference, "impact damage", &damage_effect_group_reference },
		{ _field_tag_reference, "impact shield damage", "if not specified, uses 'impact damage'", &damage_effect_group_reference },
		{ _field_block, "campaign metagame bucket", &campaign_metagame_bucket_block_block },
		FIELD_EXPLANATION("death and destruction", nullptr),
		{ _field_real_bounds, "destroy after death time", "if non-zero, the creature will destroy itself upon death after this much time", "seconds" },
		FIELD_EXPLANATION("big battle", "The following fields only affect creatures configured as boids for big battle"),
		{ _field_long_flags, "big battle flags", &creature_big_battle_definition_flags },
		{ _field_tag_reference, "big battle weapon emitter", &cheap_particle_emitter_group_reference },
		{ _field_real_point_3d, "big battle weapon offset" },
		{ _field_tag_reference, "big battle weapon emitter 2", "if you leave this empty, only the first emitter will fire", &cheap_particle_emitter_group_reference },
		{ _field_real_point_3d, "big battle weapon offset 2" },
		{ _field_block, "big battle weapon fire timing", &creature_scalar_timing_block_block },
		{ _field_tag_reference, "big battle expensive weapon effect", "this fires a full effect from location up, oriented along vehicle's forward and up axes", &effect_group_reference },
		{ _field_real_bounds, "expensive weapon fire time", nullptr, "seconds" },
		{ _field_tag_reference, "big battle death effect", &effect_group_reference },
		FIELD_GROUP_END(),
		{ _field_tag_reference, "imposter model", &imposter_model_group_reference },
		{ _field_terminator }
	};

	STRINGS(creature_definition_flags)
	{
		"unused",
		"immune to falling damage",
		"rotate while airborne",
		"zapped by shields",
		"attach upon impact",
		"not on motion sensor",
		"force ground movement"
	};
	STRING_LIST(creature_definition_flags, creature_definition_flags_strings, _countof(creature_definition_flags_strings));

	STRINGS(unit_default_teams)
	{
		"default",
		"player",
		"human",
		"covenant",
		"brute",
		"mule",
		"spare",
		"covenant_player",
		"forerunner"
	};
	STRING_LIST(unit_default_teams, unit_default_teams_strings, _countof(unit_default_teams_strings));

	STRINGS(global_chud_blip_type_definition)
	{
		"medium",
		"small",
		"large"
	};
	STRING_LIST(global_chud_blip_type_definition, global_chud_blip_type_definition_strings, _countof(global_chud_blip_type_definition_strings));

	TAG_REFERENCE(damage_effect_group_reference, DAMAGE_EFFECT_TAG);

	STRINGS(creature_big_battle_definition_flags)
	{
		"boid aims at big battle target#setting this forces boid to aim at target instead of firing straight ahead",
		"boids fly with no pitch#flying boids will always stay level when changing altitude",
		"boids fly non-directionally#flying boids will move like helicopters"
	};
	STRING_LIST(creature_big_battle_definition_flags, creature_big_battle_definition_flags_strings, _countof(creature_big_battle_definition_flags_strings));

	TAG_REFERENCE(cheap_particle_emitter_group_reference, CHEAP_PARTICLE_EMITTER_TAG);

	TAG_REFERENCE(imposter_model_group_reference, IMPOSTER_MODEL_TAG);

	#define BIG_BATTLE_CREATURE_PALETTE_BLOCK_ID { 0x9E063558, 0x110D4709, 0x8B0E106E, 0x2EBF24EE }
	TAG_STRUCT(
		big_battle_creature_palette_block,
		"big_battle_creature_palette_block",
		"big_battle_creature_palette_block",
		"s_big_battle_creature_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIG_BATTLE_CREATURE_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "reference", &big_battle_creature_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(big_battle_creature_group_reference, BIG_BATTLE_CREATURE_TAG);

	#define BINDING_CONVERSION_LONG_COMPARISON_BLOCK_DEFINITION_ID { 0x6D6E5043, 0x13D046D7, 0xB40DF853, 0xD5C4E390 }
	TAG_STRUCT(
		binding_conversion_long_comparison_block_definition,
		"binding_conversion_long_comparison_block_definition",
		"binding_conversion_long_comparison_block_definition",
		"s_binding_conversion_long_comparison_block_definition",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BINDING_CONVERSION_LONG_COMPARISON_BLOCK_DEFINITION_ID)
	{
		{ _field_string_id, "target component name" },
		{ _field_string_id, "target property name" },
		{ _field_char_enum, "comparison operator", &binding_conversion_comparison_operator_enum_definition },
		FIELD_PAD("pad0", 3),
		{ _field_long_integer, "comparison value" },
		{ _field_terminator }
	};

	STRINGS(binding_conversion_comparison_operator_enum_definition)
	{
		"equality",
		"inequality",
		"less than",
		"less than or equal",
		"greater than or equal",
		"greater than"
	};
	STRING_LIST(binding_conversion_comparison_operator_enum_definition, binding_conversion_comparison_operator_enum_definition_strings, _countof(binding_conversion_comparison_operator_enum_definition_strings));

	#define BINKPALETTEBLOCK_ID { 0xF6345413, 0x5834047, 0x8366C46E, 0xD3F4905E }
	TAG_STRUCT(
		binkpaletteblock,
		"binkPaletteBlock",
		"binkPaletteBlock",
		"s_binkpaletteblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BINKPALETTEBLOCK_ID)
	{
		{ _field_tag_reference, "reference", &bink_group_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(bink_group_reference$2, BINK_TAG);

	#define BINK_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0x51BDB563, 0x39E8469B, 0x998DB016, 0x62EF70DF }
	TAG_STRUCT(
		bink_block_index_flags_block_struct,
		"bink_block_index_flags_block_struct",
		"bink_block_index_flags_block_struct",
		"s_bink_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BINK_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &binkpaletteblock_block },
		{ _field_terminator }
	};

	#define BINK_RESOURCE_STRUCT_ID { 0xD0B4CCE8, 0x76C64FEB, 0xA54C008A, 0x6D5D24CD }
	TAG_STRUCT(
		bink_resource_struct,
		"bink_resource_struct",
		"bink_resource_struct",
		"s_bink_resource_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BINK_RESOURCE_STRUCT_ID)
	{
		{ _field_data, "bink data", &bink_resource_data },
		{ _field_terminator }
	};

	#define BINK_STRUCT_DEFINITION_ID { 0x4F2A6045, 0x63FF4A67, 0x81F2A8BD, 0xCF491D3A }
	TAG_STRUCT(
		bink_struct_definition,
		"bink_struct_definition",
		"bink_struct_definition",
		"s_bink_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BINK_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "frame count" },
		{ _field_pageable_resource, "bink resource", &bink_resource },
		{ _field_tag_reference, "external sound track", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_terminator }
	};

	#define BIPED_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0xAE76A8B1, 0xEEE349D5, 0x8E0EB470, 0xCF3F6160 }
	TAG_STRUCT(
		biped_block_index_flags_block_struct,
		"biped_block_index_flags_block_struct",
		"biped_block_index_flags_block_struct",
		"s_biped_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPED_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_biped_palette_block_block },
		{ _field_terminator }
	};

	#define BIPED_CAMERA_HEIGHT_BLOCK_ID { 0x5E996FBA, 0xD7CD4C2A, 0x893DD1ED, 0x4E4058FF }
	TAG_STRUCT(
		biped_camera_height_block,
		"biped_camera_height_block",
		"biped_camera_height_block",
		"s_biped_camera_height_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPED_CAMERA_HEIGHT_BLOCK_ID)
	{
		{ _field_string_id, "weapon class" },
		{ _field_real, "standing height", nullptr, "wu" },
		{ _field_real, "crouching height", nullptr, "wu" },
		{ _field_terminator }
	};

	#define BIPED_GRAB_BIPED_DATA_STRUCT_ID { 0x3356D931, 0xCB37420D, 0xAC9B3B8F, 0xA4A1CACD }
	TAG_STRUCT(
		biped_grab_biped_data_struct,
		"biped_grab_biped_data_struct",
		"biped_grab_biped_data_struct",
		"s_biped_grab_biped_data_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPED_GRAB_BIPED_DATA_STRUCT_ID)
	{
		FIELD_GROUP_BEGIN("grab biped"),
		FIELD_EXPLANATION("grab biped fields", "Allows a biped to grab and be grabbed by other bipeds."),
		{ _field_string_id, "grab biped animation class" },
		{ _field_char_enum, "throw biped control mode", &grab_biped_throw_control_modes },
		FIELD_PAD("hurgh", 3),
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(grab_biped_throw_control_modes)
	{
		"camera facing",
		"control stick direction"
	};
	STRING_LIST(grab_biped_throw_control_modes, grab_biped_throw_control_modes_strings, _countof(grab_biped_throw_control_modes_strings));

	#define BIPED_GRAB_OBJECT_ANIMATION_SET_BLOCK_ID { 0x780145CA, 0xEE214EE8, 0xB1227279, 0x52CBFAA5 }
	TAG_STRUCT(
		biped_grab_object_animation_set_block,
		"biped_grab_object_animation_set_block",
		"biped_grab_object_animation_set_block",
		"s_biped_grab_object_animation_set_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPED_GRAB_OBJECT_ANIMATION_SET_BLOCK_ID)
	{
		{ _field_string_id, "animation set name" },
		{ _field_string_id, "attach marker", "The marker on the biped to which we attach the grabbed object." },
		{ _field_real, "throw speed" },
		{ _field_terminator }
	};

	#define BIPED_GRAB_OBJECT_DATA_STRUCT_ID { 0x62E91941, 0x927649BD, 0x93129581, 0x268B9207 }
	TAG_STRUCT(
		biped_grab_object_data_struct,
		"biped_grab_object_data_struct",
		"biped_grab_object_data_struct",
		"s_biped_grab_object_data_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPED_GRAB_OBJECT_DATA_STRUCT_ID)
	{
		FIELD_GROUP_BEGIN("grab object"),
		FIELD_EXPLANATION("grab object fields", "Allows a biped to grab and throw crate objects."),
		{ _field_block, "grab object animation sets", &biped_grab_object_animation_set_block_block },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define BIPED_GROUND_FITTING_DATA_STRUCT_ID { 0x8E954938, 0x813744E7, 0xBA856A03, 0x1B7808B0 }
	VERSIONED_TAG_STRUCT(
		biped_ground_fitting_data_struct,
		"biped_ground_fitting_data_struct",
		"biped_ground_fitting_data_struct",
		"s_biped_ground_fitting_data_struct",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPED_GROUND_FITTING_DATA_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 51 },
		FIELD_GROUP_BEGIN("ground fitting"),
		FIELD_EXPLANATION("ground fitting data", nullptr),
		{ _field_long_flags, "ground fitting flags", &biped_ground_fitting_flags_definition },
		{ _field_real_fraction, "ground normal dampening", nullptr, "react to slope changes (0=slow, 1= fast)" },
		{ _field_real, "root offset max scale idle", nullptr, "vertical drop to ground allowed (0=none, 1=full)", MAKE_ALT_NAMES("root offset max scale") },
		{ _field_real, "root offset max scale moving", nullptr, "vertical drop to ground allowed (0=none, 1=full)" },
		{ _field_real_fraction, "root offset dampening", nullptr, "react to root changes (0=slow, 1= fast)" },
		{ _field_real_fraction, "following cam scale", nullptr, "root offset effect on following cam (0=none, 1=full)" },
		{ _field_real_fraction, "root leaning scale", nullptr, "lean into slopes (0=none, 1=full)" },
		{ _field_real, "stance width scale", nullptr, "scale pill width to use as stance radius" },
		{ _field_angle, "foot roll max", nullptr, "orient to ground slope (degrees)" },
		{ _field_angle, "foot pitch max", nullptr, "orient to ground slope (degrees)" },
		{ _field_real_fraction, "foot normal dampening", nullptr, "(0=slow, 1= fast)" },
		{ _field_real, "foot fitting test distance" },
		{ _field_real_fraction, "foot displacement upward dampening", nullptr, "(0=slow, 1= fast)" },
		{ _field_real_fraction, "foot displacement downward dampening", nullptr, "(0=slow, 1= fast)" },
		{ _field_real, "foot pull threshold distance idle", nullptr, "amount past the authored plane the foot can be pulled (wu)" },
		{ _field_real, "foot pull threshold distance moving", nullptr, "amount past the authored plane the foot can be pulled (wu)" },
		{ _field_real, "foot turn minimum radius", nullptr, "minimum radius at which foot is fit to turn radius" },
		{ _field_real, "foot turn maximum radius", nullptr, "maximum radius at which foot is fit to turn radius" },
		{ _field_real, "foot turn threshold radius", nullptr, "foot is fit to turn radius fully at minimum plus threshold and above" },
		{ _field_real, "foot turn rate dampening", nullptr, "(0=slow, 1=fast)" },
		{ _field_real, "foot turn weight dampening", nullptr, "dampening of fitting value for fit to turn radius(0=none, 1=fast)" },
		{ _field_real, "foot turn blend on time", nullptr, "time to blend on the foot turn effect (seconds)" },
		{ _field_real, "foot turn blend off time", nullptr, "time to blend off the foot turn effect (seconds)" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("pivot-on-foot"),
		FIELD_EXPLANATION("pivot-on-foot data", nullptr),
		{ _field_real_fraction, "pivot-on-foot scale", nullptr, "(0=none, 1= full)" },
		{ _field_real, "pivot min foot delta", nullptr, "vert world units to find lowest foot" },
		{ _field_real, "pivot stride length scale", "leg length * this = stride length" },
		{ _field_real_fraction, "pivot throttle scale", nullptr, "pivoting slows throttle (0=none, 1= full)" },
		{ _field_real_fraction, "pivot offset dampening", nullptr, "react to pivot changes (0=slow, 1= fast)" },
		{ _field_real_fraction, "pivot force turn rate", nullptr, "turn no matter what the pivot state is (0=control turn, 1= always turn)" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Ground fitting pelvis elevation settings"),
		{ _field_real, "ideal pelvis over high foot scale", "ideal ratio of distance from the pelvis to pedestal to place pelvis over the highest foot", "ratio of pedestal to pelvis distance " },
		{ _field_real, "ideal pelvis over low foot scale", "ideal ratio of distance from the pelvis to pedestal to place pelvis over the lowest foot", "ratio of pedestal to pelvis distance " },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Ledge Push"),
		FIELD_EXPLANATION("Pushing over Ledges", "When a locked foot is unsupported, meaning it can\'t reach the ground, the biped is considered to be hanging over a ledge. You can provide a velocity that will either push the character over the ledge or away from it"),
		{ _field_real, "push over mag", nullptr, "magnitude of throttle to push over ledges. 0= no push" },
		{ _field_real, "push back mag", nullptr, "magnitude of throttle to push back from ledges. 0= no push" },
		{ _field_real, "ledgeIKSuccessRange", nullptr, "when unable to IK at least this close, consider the IK failed." },
		{ _field_real, "ledge warning time", nullptr, "secs to warn the player before pushing over a ledge" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Foot locking"),
		{ _field_real, "footlock Scale", "how much this biped respects foot lock events", "(0-1) " },
		{ _field_real, "footlock Min Throttle", "throttle at which foot lock should be fully on (footlockScale)", "(0-1) " },
		{ _field_real, "footlock Max Throttle", "throttle at which foot lock should be fully off", "(0-1) " },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	STRINGS(biped_ground_fitting_flags_definition)
	{
		"foot fixup enabled",
		"root offset enabled",
		"free foot enabled:deprecated#deprecated",
		"z leg enabled",
		"foot pull pinned",
		"footlock adjusts root:deprecated#deprecated",
		"raycast vehicles#slow",
		"foot fixup on composites:deprecated#deprecated",
		"allow feet below grade#noramlly, we will force the feet to lock to the ground surface",
		"use biped up direction#for characters that climb walls",
		"snap marker above contact#prevents ground marker from going below the contact point"
	};
	STRING_LIST(biped_ground_fitting_flags_definition, biped_ground_fitting_flags_definition_strings, _countof(biped_ground_fitting_flags_definition_strings));

	#define BIPED_GROUP$2_ID { 0x6855591D, 0xC7A2477E, 0xBB97CD08, 0xE97A8C61 }
	VERSIONED_TAG_STRUCT(
		biped_group$2,
		"biped",
		"biped_group",
		"s_biped_group$2",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPED_GROUP$2_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 82 },
		{ _field_struct, "unit", &unit_struct_definition }, // structure_version:1
		FIELD_GROUP_BEGIN("$$$ BIPED $$$"),
		{ _field_angle, "moving turning speed", nullptr, "degrees per second" },
		{ _field_long_flags, "flags", &biped_definition_flags },
		{ _field_angle, "stationary turning threshold" },
		FIELD_USELESS_PAD("value", 16),
		FIELD_USELESS_PAD("value", 32),
		{ _field_tag_reference, "death program selector", &death_program_selector_group_reference },
		{ _field_string_id, "ragdoll region name", "when the biped transitions to ragdoll, this region will change to the destroyed state" },
		{ _field_string_id, "assassination chud text", "The string id for the assassination action text in the CHUD" },
		FIELD_EXPLANATION("jumping and landing", nullptr),
		{ _field_real, "jump velocity", nullptr, "world units per second" },
		{ _field_block, "tricks", &unit_trick_definition_block_block },
		FIELD_USELESS_PAD("value", 28),
		{ _field_real, "maximum soft landing time", "the longest amount of time the biped can take to recover from a soft landing", "seconds" },
		{ _field_real, "maximum hard landing time", "the longest amount of time the biped can take to recover from a hard landing", "seconds" },
		{ _field_real, "minimum soft landing velocity", "below this velocity the biped does not react when landing", "world units per second" },
		{ _field_real, "minimum hard landing velocity", "below this velocity the biped will not do a soft landing when returning to the ground", "world units per second" },
		{ _field_real, "maximum hard landing velocity", "the velocity corresponding to the maximum landing time", "world units per second" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real, "stun duration", "0 is the default.  Bipeds are stunned when damaged by vehicle collisions, also some are when they take emp damage" },
		FIELD_EXPLANATION("camera, collision, and autoaim", nullptr),
		{ _field_real, "standing camera height", nullptr, "world units" },
		{ _field_real, "running camera height", nullptr, "world units" },
		{ _field_real, "crouching camera height", nullptr, "world units" },
		{ _field_real, "crouch walking camera height", nullptr, "world units" },
		{ _field_real, "crouch transition time", nullptr, "seconds" },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "camera height velocity function", &mapping_function }, // structure_version:2
		{ _field_block, "camera heights", &biped_camera_height_block_block },
		{ _field_angle, "camera interpolation start", "looking-downward angle that starts camera interpolation to fp position", "degrees" },
		{ _field_angle, "camera interpolation end", "looking-downward angle at which camera interpolation to fp position is complete", "degrees" },
		{ _field_real_vector_3d, "camera offset", "amount of fp camera movement in (forward, right, down) when pitched down by 'camera interpolation end' above", "wu" },
		{ _field_real, "root offset camera scale" },
		{ _field_real, "root offset camera dampening" },
		{ _field_real, "autoaim width", nullptr, "world units" },
		{ _field_short_integer, "runtime physics control node index" },
		FIELD_PAD("JWSSY", 2),
		{ _field_real, "runtime cosine stationary turning threshold" },
		{ _field_real, "runtime crouch transition velocity" },
		{ _field_real, "runtime_camera_height_velocity" },
		{ _field_short_integer, "runtime pelvis node index" },
		{ _field_short_integer, "runtime head node index" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_block, "wall proximity feelers", &biped_wall_proximity_block_block },
		{ _field_tag_reference, "area damage effect", &effect_group_reference },
		{ _field_tag_reference, "health station recharge effect", &effect_group_reference },
		{ _field_block, "movement gates", &biped_movement_gate_block_block },
		{ _field_block, "movement gates crouching", &biped_movement_gate_block_block },
		{ _field_real, "jump aim offset distance", nullptr, "world units" },
		{ _field_real, "jump aim offset duration", nullptr, "seconds" },
		{ _field_real, "land aim offset distance", nullptr, "world units" },
		{ _field_real, "land aim offset duration", nullptr, "seconds" },
		{ _field_real, "aim compensate minimum distance", nullptr, "world units" },
		{ _field_real, "aim compensate maximum distance", nullptr, "world units" },
		{ _field_struct, "physics", &character_physics_struct },
		{ _field_block, "contact points", "these are the points where the biped touches the ground", &contact_point_block_block },
		{ _field_tag_reference, "reanimation character", "when the flood reanimate this guy, he turns into a ...", &character_group_reference$2 },
		{ _field_tag_reference, "reanimation/morph muffins", "the kind of muffins I create to cover my horrible transformation", &muffin_group_reference },
		{ _field_tag_reference, "death spawn character", "when I die, out of the ashes of my death crawls a ...", &character_group_reference$2 },
		{ _field_short_integer, "death spawn count" },
		FIELD_PAD("TQYQEWG", 2),
		{ _field_struct, "leaping data", &biped_leaping_data_struct },
		{ _field_struct, "vaulting data", &biped_vaulting_data_struct },
		{ _field_struct, "grab biped data", &biped_grab_biped_data_struct },
		{ _field_struct, "grab object data", &biped_grab_object_data_struct },
		{ _field_struct, "ground fitting data", &biped_ground_fitting_data_struct }, // structure_version:1
		{ _field_tag_reference, "death particleize", "optional particleization effect definition, if you want this to particleize when it dies", &particleman_group_reference },
		{ _field_real, "movement speed scale" },
		{ _field_struct, "movement hip lean", &bipedmovementhipleaningstruct },
		FIELD_GROUP_END(),
		{ _field_tag_reference, "Player biped sound bank", "Intended for biped vehicles (ie mantis)", &soundbank_group_reference },
		{ _field_tag_reference, "RegenField Looping Sound", "plays when player is inside a RegenField", &sound_looping_group_reference$2 },
		{ _field_tag_reference, "Crouch down sound", "plays when player starts crouching", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "Crouch up sound", "plays when player stands up", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "Shield impact override", "overrides shield impact sound, like when in a Mantis", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "Non shield impact override", "overrides regular impact sound, like when in a Mantis", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "Sound radius multiplier", "increases radius of other sounds when piloting this biped (mech)" },
		{ _field_block, "Sound RTPCs", &bipedsoundrtpcblock_block },
		{ _field_block, "Sound Sweeteners", &bipedsoundsweetenerblock_block },
		{ _field_block, "Aiming Fixup", &bipedaimingjointfixupblock_block },
		{ _field_tag_reference, "Self Illumination", &self_illumination_group_reference },
		
		{ _struct_version_mode_equal, 1, 265 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ UNIT $$$"),
		{ _field_long_flags, "flags", &unit_flags_part1, _field_id_dumb },
		{ _field_long_flags, "flags2", &unit_flags_part2, _field_id_dumb },
		{ _field_short_enum, "default team", &unit_default_teams$2 },
		{ _field_short_enum, "constant sound volume", &ai_sound_volume_enum },
		{ _field_tag_reference, "hologram unit reference", &biped_group_vehicle_group_reference },
		{ _field_block, "campaign metagame bucket", &campaign_metagame_bucket_block_block },
		{ _field_block, "screen effects", &unit_screen_effect_block_block },
		{ _field_real, "camera stiffness" },
		{ _field_struct, "unit camera", &unit_camera_struct },
		FIELD_EXPLANATION("sync action camera fields", nullptr),
		{ _field_struct, "sync action camera", &unit_camera_struct },
		{ _field_tag_reference, "assasination start damage response", &damage_response_definition_group_reference },
		{ _field_tag_reference, "assassination weapon", &weapon_group_reference },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon stow marker", "the anchor we attach the knife to when we stow it" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon out marker", "the anchor we attach the knife to when we pull it out" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon anchor marker", "the marker on the knife that we anchor to the biped" },
		{ _field_tag_reference, "seat acceleration", &spring_acceleration_group_reference },
		FIELD_GROUP_BEGIN("pings"),
		{ _field_real, "soft ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "soft ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "hard ping interrupt time", nullptr, "seconds" },
		{ _field_real, "soft death direction speed threshold", "moving faster than this means you will soft death in the movement direction. zero defaults to damage direction.", "wu/s" },
		{ _field_real, "hard death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death time", nullptr, "seconds" },
		{ _field_real, "pain screen duration", "The duration of the pain function\n0 defaults to 0.5", "seconds" },
		{ _field_real, "pain screen region fade out duration", "The time it takes to fade out a damage region that is no longer the most recent damage region to be hit", "seconds" },
		{ _field_real_fraction, "pain screen region fade out weight threshold", "The threshold weight below which the focus channel must fall before we can cross fade to another region.", nullptr, "[0,1]" },
		{ _field_angle, "pain screen angle tolerance", "The tolerance angle between next and previous damage directions, below which we randomly vary the ping direction.", "degrees" },
		{ _field_angle, "pain screen angle randomness", "The maximum random angle to vary the incoming ping direction by if it's too close to the previous ping.", "degrees" },
		{ _field_real, "defensive screen duration", "The duration of the defensive function\n0 defaults to 2.0", "seconds" },
		{ _field_real_fraction, "defensive screen scrub fallback fraction", "When receiving multiple pings, this is the min percentage of the defensive screen scrub value will fallback to.", nullptr, "[0,1]" },
		FIELD_GROUP_END(),
		{ _field_real, "distance of dive anim", "this must be set to tell the AI how far it should expect our dive animation to move us", "world units" },
		{ _field_real_fraction, "terminal velocity fall ratio", "ratio of airborne_arc animation to switch off falling overlay" },
		FIELD_GROUP_BEGIN("stun"),
		{ _field_real, "stun movement penalty", "1.0 prevents moving while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun turning penalty", "1.0 prevents turning while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun jumping penalty", "1.0 prevents jumping while stunned", nullptr, "[0,1]" },
		{ _field_real, "minimum stun time", "all stunning damage will last for at least this long", "seconds" },
		{ _field_real, "maximum stun time", "no stunning damage will last for longer than this", "seconds" },
		FIELD_GROUP_END(),
		{ _field_real, "feign death chance", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign repeat chance", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "spawned turret character", "automatically created character when this unit is driven", &character_group_reference },
		{ _field_short_integer_bounds, "spawned actor count", "number of actors which we spawn" },
		{ _field_real, "spawned velocity", "velocity at which we throw spawned actors" },
		FIELD_GROUP_BEGIN("aiming/looking"),
		{ _field_string_id, "target aiming pivot marker name", "set this to have your weapon barrel point at its calcualed target instead of matching the aiming of the unit controlling it.  This marker should be along the barrel at point that doesn't move when the barrel pitches up and down." },
		{ _field_angle, "aiming velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "aiming acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual aiming modifier", nullptr, nullptr, "[0,1]" },
		{ _field_angle, "looking velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "looking acceleration maximum", nullptr, "degrees per second squared" },
		FIELD_GROUP_END(),
		{ _field_real, "object velocity maximum", "Debug value for object velocity that corresponds to a blend screen weight of 1, 0 defaults to 5.0", "world units per second" },
		{ _field_string_id, "right_hand_node", "where the primary weapon is attached" },
		{ _field_string_id, "left_hand_node", "where the seconday weapon is attached (for dual-pistol modes)" },
		{ _field_struct, "more damn nodes", &unit_additional_node_names_struct }, // structure_version:1
		{ _field_short_enum, "melee damage class", &global_melee_class_enum_definition },
		FIELD_PAD("PAD", 2),
		FIELD_GROUP_BEGIN("melee damage"),
		{ _field_tag_reference, "melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "native melee override", "when set, characters will melee with these settings rather than their actual held weapon. (for characters that melee with an off hand)", &weapon_group_reference },
		{ _field_struct, "your momma", &unit_boarding_melee_struct }, // structure_version:2
		FIELD_GROUP_END(),
		{ _field_short_enum, "motion sensor blip size", &global_chud_blip_type_definition },
		{ _field_short_enum, "item owner size", &unit_item_owner_size_enum },
		{ _field_string_id, "equipment variant name" },
		{ _field_string_id, "grounded equipment variant name" },
		{ _field_block, "postures", &unit_postures_block_block },
		{ _field_block, "Hud audio cues", &hud_unit_sound_block_block },
		{ _field_block, "dialogue variants", &dialogue_variant_block_block },
		FIELD_GROUP_BEGIN("standard grenade throw"),
		{ _field_real, "grenade angle", nullptr, "degrees" },
		{ _field_real, "grenade angle max elevation", nullptr, "degrees" },
		{ _field_real, "grenade angle min elevation", nullptr, "degrees" },
		{ _field_real, "grenade velocity", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("sprinting grenade throw"),
		{ _field_real, "grenade angle (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade angle max elevation (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade angle min elevation (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade velocity (sprinting)", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("primary weapon toss"),
		{ _field_real, "weapon angle", nullptr, "degrees" },
		{ _field_real, "weapon angle max elevation", nullptr, "degrees" },
		{ _field_real, "weapon angle min elevation", nullptr, "degrees" },
		{ _field_real, "weapon velocity", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		{ _field_short_enum, "grenade type", &global_grenade_type_enum },
		{ _field_short_integer, "grenade count" },
		{ _field_block, "powered seats", &powered_seat_block_block },
		{ _field_block, "weapons", &unit_weapon_block_block },
		{ _field_block, "target tracking", &global_target_tracking_parameters_block_block },
		{ _field_block, "seats", &unit_seat_block_block },
		FIELD_GROUP_BEGIN("open/close"),
		{ _field_real, "opening time", "how long the unit takes to open when the hs_function unit_open is called\nThe current open state can be retrieved from the object function unit_open", "s" },
		{ _field_real, "closing time", "you don't have to go home, but you can't stay here", "s" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("EMP Disabling"),
		{ _field_real, "emp disabled time", nullptr, "seconds" },
		{ _field_real, "emp disabled time (PVP)", "Set to -1 for not disabled in MP but disabled in SP", "seconds " },
		{ _field_tag_reference, "emp disabled effect", &effect_group_reference },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Boost"),
		{ _field_struct, "boost", &unit_boost_struct },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Lipsync", nullptr),
		{ _field_struct, "lipsync", &unit_lipsync_scales_struct }, // structure_version:1
		FIELD_EXPLANATION("Exit and Detach", nullptr),
		{ _field_tag_reference, "exit and detach damage", &damage_effect_group_reference },
		{ _field_tag_reference, "exit and detach weapon", &weapon_group_reference$2 },
		FIELD_EXPLANATION("Experience", nullptr),
		{ _field_short_integer, "experience for kill" },
		{ _field_short_integer, "experience for assist" },
		{ _field_tag_reference, "hero assist equipment", "this is where you stick an equipment that the biped will always have, to implement the bizarrely named hero assist", &equipment_group_reference },
		{ _field_real, "bailout threshold", "the speed above which units will bail out of a vehicle instead of just exiting", "wu/s" },
		FIELD_GROUP_END(),
		{ _field_real_fraction, "iron sight weapon dampening", "when using iron sights, how much to scale the weapon overlays to steady the gun (0 = rock steady, 1= no dampening)", "(0-1)" },
		FIELD_GROUP_BEGIN("Birthing"),
		{ _field_struct, "birth", &unit_birth_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ BIPED $$$"),
		{ _field_angle, "moving turning speed", nullptr, "degrees per second" },
		{ _field_long_flags, "flags", &biped_definition_flags },
		{ _field_angle, "stationary turning threshold" },
		FIELD_USELESS_PAD("value", 16),
		FIELD_USELESS_PAD("value", 32),
		{ _field_tag_reference, "death program selector", &death_program_selector_group_reference },
		{ _field_string_id, "ragdoll region name", "when the biped transitions to ragdoll, this region will change to the destroyed state" },
		{ _field_string_id, "assassination chud text", "The string id for the assassination action text in the CHUD" },
		FIELD_EXPLANATION("jumping and landing", nullptr),
		{ _field_real, "jump velocity", nullptr, "world units per second" },
		{ _field_block, "tricks", &unit_trick_definition_block_block },
		FIELD_USELESS_PAD("value", 28),
		{ _field_real, "maximum soft landing time", "the longest amount of time the biped can take to recover from a soft landing", "seconds" },
		{ _field_real, "maximum hard landing time", "the longest amount of time the biped can take to recover from a hard landing", "seconds" },
		{ _field_real, "minimum soft landing velocity", "below this velocity the biped does not react when landing", "world units per second" },
		{ _field_real, "minimum hard landing velocity", "below this velocity the biped will not do a soft landing when returning to the ground", "world units per second" },
		{ _field_real, "maximum hard landing velocity", "the velocity corresponding to the maximum landing time", "world units per second" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real, "stun duration", "0 is the default.  Bipeds are stunned when damaged by vehicle collisions, also some are when they take emp damage" },
		FIELD_EXPLANATION("camera, collision, and autoaim", nullptr),
		{ _field_real, "standing camera height", nullptr, "world units" },
		{ _field_real, "running camera height", nullptr, "world units" },
		{ _field_real, "crouching camera height", nullptr, "world units" },
		{ _field_real, "crouch walking camera height", nullptr, "world units" },
		{ _field_real, "crouch transition time", nullptr, "seconds" },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "camera height velocity function", &mapping_function }, // structure_version:2
		{ _field_block, "camera heights", &biped_camera_height_block_block },
		{ _field_angle, "camera interpolation start", "looking-downward angle that starts camera interpolation to fp position", "degrees" },
		{ _field_angle, "camera interpolation end", "looking-downward angle at which camera interpolation to fp position is complete", "degrees" },
		{ _field_real_vector_3d, "camera offset", "amount of fp camera movement in (forward, right, down) when pitched down by 'camera interpolation end' above", "wu" },
		{ _field_real, "root offset camera scale" },
		{ _field_real, "root offset camera dampening" },
		{ _field_real, "autoaim width", nullptr, "world units" },
		{ _field_short_integer, "runtime physics control node index" },
		FIELD_PAD("JWSSY", 2),
		{ _field_real, "runtime cosine stationary turning threshold" },
		{ _field_real, "runtime crouch transition velocity" },
		{ _field_real, "runtime_camera_height_velocity" },
		{ _field_short_integer, "runtime pelvis node index" },
		{ _field_short_integer, "runtime head node index" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_block, "wall proximity feelers", &biped_wall_proximity_block_block },
		{ _field_tag_reference, "area damage effect", &effect_group_reference },
		{ _field_tag_reference, "health station recharge effect", &effect_group_reference },
		{ _field_block, "movement gates", &biped_movement_gate_block_block },
		{ _field_block, "movement gates crouching", &biped_movement_gate_block_block },
		{ _field_real, "jump aim offset distance", nullptr, "world units" },
		{ _field_real, "jump aim offset duration", nullptr, "seconds" },
		{ _field_real, "land aim offset distance", nullptr, "world units" },
		{ _field_real, "land aim offset duration", nullptr, "seconds" },
		{ _field_real, "aim compensate minimum distance", nullptr, "world units" },
		{ _field_real, "aim compensate maximum distance", nullptr, "world units" },
		{ _field_struct, "physics", &character_physics_struct },
		{ _field_block, "contact points", "these are the points where the biped touches the ground", &contact_point_block_block },
		{ _field_tag_reference, "reanimation character", "when the flood reanimate this guy, he turns into a ...", &character_group_reference$2 },
		{ _field_tag_reference, "reanimation/morph muffins", "the kind of muffins I create to cover my horrible transformation", &muffin_group_reference },
		{ _field_tag_reference, "death spawn character", "when I die, out of the ashes of my death crawls a ...", &character_group_reference$2 },
		{ _field_short_integer, "death spawn count" },
		FIELD_PAD("TQYQEWG", 2),
		{ _field_struct, "leaping data", &biped_leaping_data_struct },
		{ _field_struct, "vaulting data", &biped_vaulting_data_struct },
		{ _field_struct, "grab biped data", &biped_grab_biped_data_struct },
		{ _field_struct, "grab object data", &biped_grab_object_data_struct },
		{ _field_struct, "ground fitting data", &biped_ground_fitting_data_struct }, // structure_version:1
		{ _field_tag_reference, "death particleize", "optional particleization effect definition, if you want this to particleize when it dies", &particleman_group_reference },
		{ _field_real, "movement speed scale" },
		{ _field_struct, "movement hip lean", &bipedmovementhipleaningstruct },
		FIELD_GROUP_END(),
		{ _field_tag_reference, "Player biped sound bank", "Intended for biped vehicles (ie mantis)", &soundbank_group_reference },
		{ _field_tag_reference, "RegenField Looping Sound", "plays when player is inside a RegenField", &sound_looping_group_reference$2 },
		{ _field_tag_reference, "Crouch down sound", "plays when player starts crouching", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "Crouch up sound", "plays when player stands up", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "Shield impact override", "overrides shield impact sound, like when in a Mantis", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "Non shield impact override", "overrides regular impact sound, like when in a Mantis", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "Sound radius multiplier", "increases radius of other sounds when piloting this biped (mech)" },
		{ _field_block, "Sound RTPCs", &bipedsoundrtpcblock_block },
		{ _field_block, "Sound Sweeteners", &bipedsoundsweetenerblock_block },
		{ _field_block, "Aiming Fixup", &bipedaimingjointfixupblock_block },
		{ _field_tag_reference, "Self Illumination", &self_illumination_group_reference },
		
		{ _struct_version_mode_equal, 0, 251 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ UNIT $$$"),
		{ _field_long_flags, "flags", &unit_flags_part1, _field_id_dumb },
		{ _field_long_flags, "flags2", &unit_flags_part2, _field_id_dumb },
		{ _field_short_enum, "default team", &unit_default_teams$2 },
		{ _field_short_enum, "constant sound volume", &ai_sound_volume_enum },
		{ _field_tag_reference, "hologram unit reference", &biped_group_vehicle_group_reference },
		{ _field_block, "campaign metagame bucket", &campaign_metagame_bucket_block_block },
		{ _field_block, "screen effects", &unit_screen_effect_block_block },
		{ _field_real, "camera stiffness" },
		{ _field_struct, "unit camera", &unit_camera_struct },
		FIELD_EXPLANATION("sync action camera fields", nullptr),
		{ _field_struct, "sync action camera", &unit_camera_struct },
		{ _field_tag_reference, "assasination start damage response", &damage_response_definition_group_reference },
		{ _field_tag_reference, "assassination weapon", &weapon_group_reference },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon stow marker", "the anchor we attach the knife to when we stow it" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon out marker", "the anchor we attach the knife to when we pull it out" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon anchor marker", "the marker on the knife that we anchor to the biped" },
		{ _field_tag_reference, "seat acceleration", &spring_acceleration_group_reference },
		FIELD_GROUP_BEGIN("pings"),
		{ _field_real, "soft ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "soft ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "hard ping interrupt time", nullptr, "seconds" },
		{ _field_real, "soft death direction speed threshold", "moving faster than this means you will soft death in the movement direction. zero defaults to damage direction.", "wu/s" },
		{ _field_real, "hard death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death time", nullptr, "seconds" },
		{ _field_real, "pain screen duration", "The duration of the pain function\n0 defaults to 0.5", "seconds" },
		{ _field_real, "pain screen region fade out duration", "The time it takes to fade out a damage region that is no longer the most recent damage region to be hit", "seconds" },
		{ _field_real_fraction, "pain screen region fade out weight threshold", "The threshold weight below which the focus channel must fall before we can cross fade to another region.", nullptr, "[0,1]" },
		{ _field_angle, "pain screen angle tolerance", "The tolerance angle between next and previous damage directions, below which we randomly vary the ping direction.", "degrees" },
		{ _field_angle, "pain screen angle randomness", "The maximum random angle to vary the incoming ping direction by if it's too close to the previous ping.", "degrees" },
		{ _field_real, "defensive screen duration", "The duration of the defensive function\n0 defaults to 2.0", "seconds" },
		{ _field_real_fraction, "defensive screen scrub fallback fraction", "When receiving multiple pings, this is the min percentage of the defensive screen scrub value will fallback to.", nullptr, "[0,1]" },
		FIELD_GROUP_END(),
		{ _field_real, "distance of dive anim", "this must be set to tell the AI how far it should expect our dive animation to move us", "world units" },
		{ _field_real_fraction, "terminal velocity fall ratio", "ratio of airborne_arc animation to switch off falling overlay" },
		FIELD_GROUP_BEGIN("stun"),
		{ _field_real, "stun movement penalty", "1.0 prevents moving while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun turning penalty", "1.0 prevents turning while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun jumping penalty", "1.0 prevents jumping while stunned", nullptr, "[0,1]" },
		{ _field_real, "minimum stun time", "all stunning damage will last for at least this long", "seconds" },
		{ _field_real, "maximum stun time", "no stunning damage will last for longer than this", "seconds" },
		FIELD_GROUP_END(),
		{ _field_real, "feign death chance", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign repeat chance", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "spawned turret character", "automatically created character when this unit is driven", &character_group_reference },
		{ _field_short_integer_bounds, "spawned actor count", "number of actors which we spawn" },
		{ _field_real, "spawned velocity", "velocity at which we throw spawned actors" },
		FIELD_GROUP_BEGIN("aiming/looking"),
		{ _field_string_id, "target aiming pivot marker name", "set this to have your weapon barrel point at its calcualed target instead of matching the aiming of the unit controlling it.  This marker should be along the barrel at point that doesn't move when the barrel pitches up and down." },
		{ _field_angle, "aiming velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "aiming acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual aiming modifier", nullptr, nullptr, "[0,1]" },
		{ _field_angle, "looking velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "looking acceleration maximum", nullptr, "degrees per second squared" },
		FIELD_GROUP_END(),
		{ _field_real, "object velocity maximum", "Debug value for object velocity that corresponds to a blend screen weight of 1, 0 defaults to 5.0", "world units per second" },
		{ _field_string_id, "right_hand_node", "where the primary weapon is attached" },
		{ _field_string_id, "left_hand_node", "where the seconday weapon is attached (for dual-pistol modes)" },
		{ _field_struct, "more damn nodes", &unit_additional_node_names_struct }, // structure_version:1
		{ _field_short_enum, "melee damage class", &global_melee_class_enum_definition },
		FIELD_PAD("PAD", 2),
		FIELD_GROUP_BEGIN("melee damage"),
		{ _field_tag_reference, "melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "native melee override", "when set, characters will melee with these settings rather than their actual held weapon. (for characters that melee with an off hand)", &weapon_group_reference },
		{ _field_struct, "your momma", &unit_boarding_melee_struct }, // structure_version:2
		FIELD_GROUP_END(),
		{ _field_short_enum, "motion sensor blip size", &global_chud_blip_type_definition },
		{ _field_short_enum, "item owner size", &unit_item_owner_size_enum },
		{ _field_string_id, "equipment variant name" },
		{ _field_string_id, "grounded equipment variant name" },
		{ _field_block, "postures", &unit_postures_block_block },
		{ _field_block, "Hud audio cues", &hud_unit_sound_block_block },
		{ _field_block, "dialogue variants", &dialogue_variant_block_block },
		FIELD_GROUP_BEGIN("standard grenade throw"),
		{ _field_real, "grenade angle", nullptr, "degrees" },
		{ _field_real, "grenade angle max elevation", nullptr, "degrees" },
		{ _field_real, "grenade angle min elevation", nullptr, "degrees" },
		{ _field_real, "grenade velocity", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("sprinting grenade throw"),
		{ _field_real, "grenade angle (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade angle max elevation (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade angle min elevation (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade velocity (sprinting)", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("primary weapon toss"),
		{ _field_real, "weapon angle", nullptr, "degrees" },
		{ _field_real, "weapon angle max elevation", nullptr, "degrees" },
		{ _field_real, "weapon angle min elevation", nullptr, "degrees" },
		{ _field_real, "weapon velocity", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		{ _field_short_enum, "grenade type", &global_grenade_type_enum },
		{ _field_short_integer, "grenade count" },
		{ _field_block, "powered seats", &powered_seat_block_block },
		{ _field_block, "weapons", &unit_weapon_block_block },
		{ _field_block, "target tracking", &global_target_tracking_parameters_block_block },
		{ _field_block, "seats", &unit_seat_block_block },
		FIELD_GROUP_BEGIN("open/close"),
		{ _field_real, "opening time", "how long the unit takes to open when the hs_function unit_open is called\nThe current open state can be retrieved from the object function unit_open", "s" },
		{ _field_real, "closing time", "you don't have to go home, but you can't stay here", "s" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("EMP Disabling"),
		{ _field_real, "emp disabled time", nullptr, "seconds" },
		{ _field_real, "emp disabled time (PVP)", "Set to -1 for not disabled in MP but disabled in SP", "seconds " },
		{ _field_tag_reference, "emp disabled effect", &effect_group_reference },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Boost"),
		{ _field_struct, "boost", &unit_boost_struct },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Lipsync", nullptr),
		{ _field_struct, "lipsync", &unit_lipsync_scales_struct }, // structure_version:1
		FIELD_EXPLANATION("Exit and Detach", nullptr),
		{ _field_tag_reference, "exit and detach damage", &damage_effect_group_reference },
		{ _field_tag_reference, "exit and detach weapon", &weapon_group_reference$2 },
		FIELD_EXPLANATION("Experience", nullptr),
		{ _field_short_integer, "experience for kill" },
		{ _field_short_integer, "experience for assist" },
		{ _field_tag_reference, "hero assist equipment", "this is where you stick an equipment that the biped will always have, to implement the bizarrely named hero assist", &equipment_group_reference },
		{ _field_real, "bailout threshold", "the speed above which units will bail out of a vehicle instead of just exiting", "wu/s" },
		FIELD_GROUP_END(),
		{ _field_real_fraction, "iron sight weapon dampening", "when using iron sights, how much to scale the weapon overlays to steady the gun (0 = rock steady, 1= no dampening)", "(0-1)" },
		FIELD_GROUP_BEGIN("Birthing"),
		{ _field_struct, "birth", &unit_birth_struct },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("$$$ BIPED $$$", nullptr),
		{ _field_angle, "moving turning speed", nullptr, "degrees per second" },
		FIELD_SKIP("ZLR", 4),
		{ _field_angle, "stationary turning threshold" },
		FIELD_PAD("VSGXKYYX", 16),
		{ _field_short_enum, "old obsolete A in", &biped_function_modes_v1 },
		{ _field_short_enum, "old obsolete B in", &biped_function_modes_v1 },
		{ _field_short_enum, "old obsolete C in", &biped_function_modes_v1 },
		{ _field_short_enum, "old obsolete D in", &biped_function_modes_v1 },
		{ _field_tag_reference, "DON'T USE", &damage_effect_group_reference },
		FIELD_EXPLANATION("flying", nullptr),
		{ _field_angle, "bank angle", "angle at which we bank left/right when sidestepping or turning while moving forwards", "degrees" },
		{ _field_real, "bank apply time", "time it takes us to apply a bank", "seconds" },
		{ _field_real, "bank decay time", "time it takes us to recover from a bank", "seconds" },
		{ _field_real, "pitch ratio", "amount that we pitch up/down when moving up or down" },
		{ _field_real, "max velocity", "max velocity when not crouching", "world units per second" },
		{ _field_real, "max sidestep velocity", "max sideways or up/down velocity when not crouching", "world units per second" },
		{ _field_real, "acceleration", nullptr, "world units per second squared" },
		{ _field_real, "deceleration", nullptr, "world units per second squared" },
		{ _field_angle, "angular velocity maximum", "turn rate", "degrees per second" },
		{ _field_angle, "angular acceleration maximum", "turn acceleration rate", "degrees per second squared" },
		{ _field_real, "crouch velocity modifier", "how much slower we fly if crouching (zero = same speed)", nullptr, "[0,1]" },
		FIELD_PAD("GIJHIEKMF", 8),
		FIELD_EXPLANATION("movement", nullptr),
		{ _field_angle, "maximum slope angle", nullptr, "degrees" },
		{ _field_angle, "downhill falloff angle", nullptr, "degrees" },
		{ _field_angle, "downhill cutoff angle", nullptr, "degrees" },
		{ _field_real, "downhill velocity scale" },
		{ _field_angle, "uphill falloff angle", nullptr, "degrees" },
		{ _field_angle, "uphill cutoff angle", nullptr, "degrees" },
		{ _field_real, "uphill velocity scale" },
		FIELD_PAD("DX", 24),
		{ _field_tag_reference, "UNUSED", &material_effects_group_reference },
		FIELD_PAD("XAIJ", 24),
		FIELD_EXPLANATION("jumping and landing", nullptr),
		{ _field_real, "jump velocity", nullptr, "world units per second" },
		FIELD_PAD("SCPHCXJ", 28),
		{ _field_real, "maximum soft landing time", "the longest amount of time the biped can take to recover from a soft landing", "seconds" },
		{ _field_real, "maximum hard landing time", "the longest amount of time the biped can take to recover from a hard landing", "seconds" },
		{ _field_real, "minimum soft landing velocity", "below this velocity the biped does not react when landing", "world units per second" },
		{ _field_real, "minimum hard landing velocity", "below this velocity the biped will not do a soft landing when returning to the ground", "world units per second" },
		{ _field_real, "maximum hard landing velocity", "the velocity corresponding to the maximum landing time", "world units per second" },
		{ _field_real, "death hard landing velocity", "the maximum velocity with which a character can strike the ground and live", "world units per second" },
		FIELD_PAD("GNSH", 20),
		FIELD_EXPLANATION("camera, collision, and autoaim", nullptr),
		{ _field_real, "standing camera height", nullptr, "world units" },
		{ _field_real, "crouching camera height", nullptr, "world units" },
		{ _field_real, "crouch transition time", nullptr, "seconds" },
		{ _field_angle, "camera interpolation start", "looking-downward angle that starts camera interpolation to fp position", "degrees" },
		{ _field_angle, "camera interpolation end", "looking-downward angle at which camera interpolation to fp position is complete", "degrees" },
		{ _field_real, "camera forward movement scale", "amount of fp camera movement forward and back (1.0 is full)" },
		{ _field_real, "camera side movement scale", "amount of fp camera movement side-to-side (1.0 is full)" },
		{ _field_real, "camera vertical movement scale", "amount of fp camera movement vertically (1.0 is full)" },
		{ _field_real, "camera exclusion distance", "fp camera must always be at least this far out from root node", "world units" },
		{ _field_real, "standing collision height", nullptr, "world units" },
		{ _field_real, "crouching collision height", nullptr, "world units" },
		{ _field_real, "collision radius", nullptr, "world units" },
		{ _field_real, "collision mass", nullptr, "world mass units" },
		{ _field_string_id, "collision global material name", "collision material used when biped is alive" },
		FIELD_PAD("DKKHJ", 2),
		FIELD_PAD("ENRDF", 2),
		{ _field_string_id, "dead collision global material name", "collision material used when biped is dead" },
		FIELD_PAD("GEPNFIEB", 24),
		{ _field_real, "autoaim width", nullptr, "world units" },
		FIELD_PAD("ISIUMK", 140),
		{ _field_block, "contact points", "these are the points where the biped touches the ground", &contact_point_block_v1_block },
		{ _field_block, "pill shapes", "No point editing these.  They get filled out at map load.", &pills_block_block },
		
		{ _field_terminator }
	};

	STRINGS(biped_definition_flags)
	{
		"turns without animating",
		"has physical rigid bodies when alive",
		"immune to falling damage",
		"has animated jetpack",
		"unused1!",
		"unused2!",
		"random speed increase",
		"unused3!",
		"spawn death children on destroy",
		"stunned by emp damage",
		"dead physics when stunned",
		"always ragdoll when dead",
		"snaps turns",
		"sync action always projects on ground",
		"orient facing to movement (Mantis)"
	};
	STRING_LIST(biped_definition_flags, biped_definition_flags_strings, _countof(biped_definition_flags_strings));

	TAG_REFERENCE(death_program_selector_group_reference, DEATH_PROGRAM_SELECTOR_TAG);

	TAG_REFERENCE(character_group_reference$2, CHARACTER_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY | TAG_REFERENCE_FLAG_NOT_A_RESOURCE_DEPENDENCY);

	TAG_REFERENCE(muffin_group_reference, MUFFIN_TAG);

	TAG_REFERENCE(particleman_group_reference, PARTICLEMAN_TAG);

	TAG_REFERENCE(soundbank_group_reference, SOUNDBANK_TAG, TAG_REFERENCE_FLAG_RESOLVED_BY_GAME);

	TAG_REFERENCE(sound_looping_group_reference$2, SOUND_LOOPING_TAG, TAG_REFERENCE_FLAG_RESOLVED_BY_GAME);

	TAG_REFERENCE(self_illumination_group_reference, SELF_ILLUMINATION_TAG);

	STRINGS(navmeshcuttingoverrideenum)
	{
		"Default",
		"Cut",
		"NotCut"
	};
	STRING_LIST(navmeshcuttingoverrideenum, navmeshcuttingoverrideenum_strings, _countof(navmeshcuttingoverrideenum_strings));

	STRINGS(booleanoverrideenum)
	{
		"Default",
		"Yes",
		"No"
	};
	STRING_LIST(booleanoverrideenum, booleanoverrideenum_strings, _countof(booleanoverrideenum_strings));

	STRINGS(object_definition_flags)
	{
		"does not cast shadow",
		"children do not cast shadow",
		"first class child",
		"object samples lightprobes only",
		"object uses only own static lightmap",
		"search cardinal direction lightmaps on failure",
		"preserves initial damage owner",
		"not a pathfinding obstacle",
		"extension of parent#object uses parent\'s markers",
		"does not cause collision damage",
		"early mover",
		"early mover localized physics",
		"object scales attachments",
		"inherits player\'s appearance",
		"non physical in map editor",
		"object is always on the ceiling",
		"sample enviroment lighting only ignore object lighting",
		"effects created by this object do not spawn objects in multiplayer",
		"does not collide with camera#force camera not to collide with object.  By default small sweetener objects do not collide",
		"force collide with camera#force the camera to collide with this object,  By default small sweetener objects do not collide",
		"damage not blocked by obstructions#AOE damage being applied to this object does not test for obstrutions.",
		"does not damage breakable surfaces",
		"early mover localize projectiles",
		"requires shadow bounds visibility test",
		"grab parent object in forge editing",
		"never use imposter for shadow generation",
		"Hoistable from stand",
		"Hoistable from crouch",
		"vaultable",
		"collides with own projectiles",
		"object rejects dynamic decals"
	};
	STRING_LIST(object_definition_flags, object_definition_flags_strings, _countof(object_definition_flags_strings));

	STRINGS(lightmap_shadow_mode_enum)
	{
		"default",
		"never",
		"always",
		"blur"
	};
	STRING_LIST(lightmap_shadow_mode_enum, lightmap_shadow_mode_enum_strings, _countof(lightmap_shadow_mode_enum_strings));

	STRINGS(sweetener_size_enum)
	{
		"default",
		"small",
		"medium",
		"large"
	};
	STRING_LIST(sweetener_size_enum, sweetener_size_enum_strings, _countof(sweetener_size_enum_strings));

	STRINGS(water_density_type_enum)
	{
		"default",
		"super_floater",
		"floater",
		"neutral",
		"sinker",
		"super_sinker",
		"none"
	};
	STRING_LIST(water_density_type_enum, water_density_type_enum_strings, _countof(water_density_type_enum_strings));

	TAG_REFERENCE(multilingual_unicode_string_list_group_reference, MULTILINGUAL_UNICODE_STRING_LIST_TAG);

	TAG_REFERENCE(model_group_reference$2, MODEL_TAG);

	TAG_REFERENCE(crate_group_reference, CRATE_TAG);

	TAG_REFERENCE(collision_damage_group_reference, COLLISION_DAMAGE_TAG);

	TAG_REFERENCE(material_effects_group_reference, MATERIAL_EFFECTS_TAG);

	STRINGS(object_definition_secondary_flags)
	{
		"does not affect projectile aiming",
		"update state animation and keyframe rigid bodies every frame"
	};
	STRING_LIST(object_definition_secondary_flags, object_definition_secondary_flags_strings, _countof(object_definition_secondary_flags_strings));

	TAG_REFERENCE(simulation_interpolation_group_reference, SIMULATION_INTERPOLATION_TAG);

	STRINGS(unit_flags_part1)
	{
		"circular aiming",
		"destroyed after dying",
		"half-speed interpolation",
		"fires from camera",
		"entrance inside bounding sphere",
		"doesn\'t show readied weapon",
		"causes passenger dialogue",
		"resists pings",
		"melee attack is fatal",
		"don\'t reface during pings",
		"has no aiming",
		"impact melee attaches to unit",
		"impact melee dies on shields",
		"cannot open doors automatically",
		"melee attackers cannot attach",
		"not instantly killed by melee",
		"flashlight power doesnt transfer to weapon",
		"runs around flaming",
		"top level for AOE damage",
		"special cinematic unit",
		"ignored by autoaiming",
		"shields fry infection forms",
		"use velocity as acceleration",
		"can dual wield",
		"acts as gunner for parent",
		"controlled by parent gunner",
		"parent\'s primary weapon",
		"parent\'s secondary weapon",
		"unit has boost",
		"unit has vectored thrust",
		"allow aim while opening or closing",
		"compute acceleration from aiming"
	};
	STRING_LIST(unit_flags_part1, unit_flags_part1_strings, _countof(unit_flags_part1_strings));

	STRINGS(unit_flags_part2)
	{
		"override all pings",
		"unit supports bailout",
		"flying_or_vehicle_hard_pings_allowed",
		"attempt to fire from weapon matching camera#if this unit \"fires from camera\", this flag attempts to match the result, but have the projectile actually come out of the gun",
		"treat as vehicle #Treats a non-vehicle unit as a vehicle for gameplay purposes.  Mantis (biped) hack.",
		"dropped weapons can dissolve",
		"hard pings not allowed for driver-less vehicle",
		"No friendly bump damage #Unit does not inflict collision damage to friendly units",
		"ignores attachment feedback forced hard pings#ignores hard pings forced by attachment of sticky grenade",
		"unit appears on radar as dot not sprite#do not try to find a sprite for this unit.  Just draw a dot.",
		"suppress radar blip",
		"do not ignore parents for line of sight tests#ai that are operating this unit will not ignore the unit\'s parents when doing line of sight tests (Mammoth turret hack)",
		"do not pass attached AOE damage to children#projectiles attached to this object do not do attached damage to the object\'s children (regular aoe damage is still done to top level aoe children)",
		"do not generate AI line of fire pill for unit#even if this vehicle is being driven by a friendly character, don\'t generate a pill for it during ai line of fire checks (for very large vehicles i.e. the lich)"
	};
	STRING_LIST(unit_flags_part2, unit_flags_part2_strings, _countof(unit_flags_part2_strings));

	STRINGS(unit_default_teams$2)
	{
		"default",
		"player",
		"human",
		"covenant",
		"brute",
		"mule",
		"spare",
		"covenant_player",
		"forerunner"
	};
	STRING_LIST(unit_default_teams$2, unit_default_teams$2_strings, _countof(unit_default_teams$2_strings));

	STRINGS(ai_sound_volume_enum)
	{
		"silent#ai will not respond to this sound",
		"quiet",
		"medium",
		"shout",
		"loud#ai can hear this sound at any range"
	};
	STRING_LIST(ai_sound_volume_enum, ai_sound_volume_enum_strings, _countof(ai_sound_volume_enum_strings));

	TAG_REFERENCE_GROUP(biped_group_vehicle_group_reference)
	{
		BIPED_TAG,
		VEHICLE_TAG,
		INVALID_TAG
	};

	TAG_REFERENCE(damage_response_definition_group_reference, DAMAGE_RESPONSE_DEFINITION_TAG);

	TAG_REFERENCE(weapon_group_reference, WEAPON_TAG);

	TAG_REFERENCE(spring_acceleration_group_reference, SPRING_ACCELERATION_TAG);

	TAG_REFERENCE(character_group_reference, CHARACTER_TAG);

	STRINGS(global_melee_class_enum_definition)
	{
		"default class",
		"elite class"
	};
	STRING_LIST(global_melee_class_enum_definition, global_melee_class_enum_definition_strings, _countof(global_melee_class_enum_definition_strings));

	STRINGS(unit_item_owner_size_enum)
	{
		"small",
		"medium",
		"large",
		"huge"
	};
	STRING_LIST(unit_item_owner_size_enum, unit_item_owner_size_enum_strings, _countof(unit_item_owner_size_enum_strings));

	STRINGS(global_grenade_type_enum)
	{
		"human fragmentation",
		"covenant plasma",
		"pulse grenade",
		"grenade type 3",
		"grenade type 4",
		"grenade type 5",
		"grenade type 6",
		"grenade type 7"
	};
	STRING_LIST(global_grenade_type_enum, global_grenade_type_enum_strings, _countof(global_grenade_type_enum_strings));

	TAG_REFERENCE(weapon_group_reference$2, WEAPON_TAG);

	STRINGS(biped_function_modes_v1)
	{
		"none",
		"flying velocity"
	};
	STRING_LIST(biped_function_modes_v1, biped_function_modes_v1_strings, _countof(biped_function_modes_v1_strings));

	#define BIPED_LEAPING_DATA_STRUCT_ID { 0x8D1584BD, 0xB9A24D94, 0xAB6217DD, 0x65BD78D0 }
	TAG_STRUCT(
		biped_leaping_data_struct,
		"biped_leaping_data_struct",
		"biped_leaping_data_struct",
		"s_biped_leaping_data_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPED_LEAPING_DATA_STRUCT_ID)
	{
		FIELD_GROUP_BEGIN("wall-leaping"),
		FIELD_EXPLANATION("wall-leaping fields", nullptr),
		{ _field_long_flags, "leap flags", &biped_leap_flags_definition },
		{ _field_real_fraction, "dampening scale", nullptr, nullptr, "[0,1] 1= very slow changes" },
		{ _field_real_fraction, "roll delay", nullptr, nullptr, "[0,1] 1= roll fast and late" },
		{ _field_real_fraction, "cannonball off-axis scale", nullptr, nullptr, "[0,1] weight" },
		{ _field_real_fraction, "cannonball off-track scale", nullptr, nullptr, "[0,1] weight" },
		{ _field_angle_bounds, "cannonball roll bounds", nullptr, "degrees per second" },
		{ _field_real_bounds, "anticipation ratio bounds", nullptr, "current velocity/leap velocity" },
		{ _field_real_bounds, "reaction force bounds", nullptr, "units per second" },
		{ _field_real_fraction, "lobbing desire", nullptr, "1= heavy arc, 0= no arc" },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(biped_leap_flags_definition)
	{
		"force early roll"
	};
	STRING_LIST(biped_leap_flags_definition, biped_leap_flags_definition_strings, _countof(biped_leap_flags_definition_strings));

	#define BIPED_MOVEMENT_GATE_BLOCK_ID { 0xE1AABC0A, 0x4127B5EF, 0xA2BF1821, 0xAEC9C18A }
	TAG_STRUCT(
		biped_movement_gate_block,
		"biped_movement_gate_block",
		"biped_movement_gate_block",
		"s_biped_movement_gate_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPED_MOVEMENT_GATE_BLOCK_ID)
	{
		{ _field_real, "period", nullptr, "seconds" },
		{ _field_real, "z offset", nullptr, "world units" },
		{ _field_real, "constant z offset", "camera z is modified by this constant z value", "world units" },
		{ _field_real, "y offset", nullptr, "world units" },
		{ _field_real, "speed threshold", nullptr, "world units per second" },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "default function", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define BIPED_VAULTING_DATA_STRUCT_ID { 0x34215BE1, 0xC36F4C81, 0x87730F91, 0x58CF50C2 }
	TAG_STRUCT(
		biped_vaulting_data_struct,
		"biped_vaulting_data_struct",
		"biped_vaulting_data_struct",
		"s_biped_vaulting_data_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPED_VAULTING_DATA_STRUCT_ID)
	{
		FIELD_GROUP_BEGIN("vaulting"),
		FIELD_EXPLANATION("vaulting fields", "The cost of the vault check is scaled by max horizontal distance divided by min object size.  Try to keep that number reasonably low."),
		{ _field_real_bounds, "vault height bounds", nullptr, "wus" },
		{ _field_real, "vault max horizontal distance", nullptr, "wus" },
		{ _field_real_fraction, "vault arc amount", nullptr, "1= heavy arc, 0= no arc" },
		{ _field_real, "vault min object size", nullptr, "wus" },
		{ _field_real, "search width", nullptr, "wus, the side-to-side width of the search path" },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define BIPED_WALL_PROXIMITY_BLOCK_ID { 0x6ADD7B21, 0x29074976, 0x83B082B3, 0x4DB6C6A1 }
	TAG_STRUCT(
		biped_wall_proximity_block,
		"biped_wall_proximity_block",
		"biped_wall_proximity_block",
		"s_biped_wall_proximity_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BIPED_WALL_PROXIMITY_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_real, "search distance", nullptr, "wu" },
		{ _field_real, "compression time", nullptr, "s" },
		{ _field_real, "extension time", nullptr, "s" },
		{ _field_long_enum, "composition mode", "if multiple markers share the same name, this specifies how to compose their search values", &biped_wall_proximity_composition_mode },
		{ _field_string_id, "output function name", "creates an object function with this name that you can use to drive an overlay animation" },
		{ _field_terminator }
	};

	STRINGS(biped_wall_proximity_composition_mode)
	{
		"most compressed#pick the marker that has the closest obstacle",
		"least compressed#pick the marker that has the furthest obstacle",
		"average#average the distances from each marker"
	};
	STRING_LIST(biped_wall_proximity_composition_mode, biped_wall_proximity_composition_mode_strings, _countof(biped_wall_proximity_composition_mode_strings));

	#define BITMAP_BLOCK_STRUCT_ID { 0x2335AB52, 0xC24A4268, 0x94728F7D, 0xD36D1923 }
	TAG_STRUCT(
		bitmap_block_struct,
		"bitmap_block_struct",
		"bitmap_block_struct",
		"s_bitmap_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BITMAP_BLOCK_STRUCT_ID)
	{
		FIELD_CUSTOM("show bitmap", _tag_field_custom_type_bitmap_group),
		FIELD_EXPLANATION("IMPORT SETTINGS", "The settings here affect how the bitmap is imported.\nAny changes you make will not take effect until you reimport the bitmap.\n"),
		{ _field_long_enum, "Usage", "choose how you are using this bitmap", &bitmap_usage_global_enum },
		{ _field_word_flags, "Flags", &bitmap_group_flags_def },
		{ _field_short_integer, "sprite spacing", "number of pixels between adjacent sprites (0 uses default, negative numbers set no spacing)" },
		{ _field_real, "bump map height", "the apparent height of the bump map above the triangle it is textured onto, in texture repeats (i.e., 1.0 would be as high as the texture is wide)", "repeats" },
		{ _field_real_fraction, "fade factor", "used by detail maps and illum maps.  0 means fade by last mipmap, 1 means fade by first mipmap", nullptr, "[0,1]" },
		{ _field_real, "blur", "how much to blur the input image", "pixels" },
		{ _field_real, "mip map blur", "how much to blur as each mip level is being downsampled", "pixels" },
		{ _field_char_enum, "curve mode", "automatic chooses FAST if your bitmap is bright, and PRETTY if your bitmap has dark bits", &bitmap_curve_override_enum },
		{ _field_char_integer, "max mipmap level", "0 = use default defined by usage" },
		{ _field_short_integer, "max resolution", "0 = do not downsample source image" },
		{ _field_short_integer, "atlas", "index into global atlas if the texture is missing its required resources and has been atlased" },
		{ _field_short_enum, "force bitmap format", "overrides the format defined by usage", &bitmap_usage_format_def },
		{ _field_real, "tight bounds threshold", "This is the level cutoff for tight bounds.  0.0 is monochrome black, 1.0 is monochrome white", nullptr, "[0.0 - 1.0]" },
		{ _field_block, "usage override", &bitmap_usage_block_block },
		{ _field_block, "manual_sequences", &bitmap_group_sequence_block_def_block },
		FIELD_EXPLANATION("IMPORT DATA", "\n\n\n\n\n\n\n\n\n\n\n\n\n***************************************************************************************************************************\n\nEverything below this line is bitmap data.  It is updated when you reimport the bitmap.\n\nAny changes you make below will be lost in the next reimport, and may even cause \'bad things\' to happen.\n\n***************************************************************************************************************************\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"),
		{ _field_block, "tight bounds", &bitmap_tight_bounds_block_def_block },
		{ _field_data, "source data", &bitmap_group_source_data_def },
		{ _field_data, "processed pixel data", &bitmap_group_pixel_data_def },
		{ _field_block, "sequences", &bitmap_group_sequence_block_def_block },
		{ _field_block, "bitmaps", &bitmap_data_block_def_block },
		{ _field_data, "xenon processed pixel data", &bitmap_group_xenon_pixel_data_def },
		{ _field_block, "xenon bitmaps", &bitmap_data_block_def_block },
		{ _field_block, "hardware textures", &bitmap_texture_interop_block_block },
		{ _field_block, "stitchable hardware textures", &stitchable_bitmap_texture_interop_block_block },
		{ _field_block, "interleaved hardware textures", &bitmap_texture_interleaved_interop_block_block },
		{ _field_terminator }
	};

	STRINGS(bitmap_usage_global_enum)
	{
		"Diffuse Map",
		"Specular Map",
		"Bump Map (from Height Map)",
		"Detail Bump Map (from Height Map - fades out)",
		"Detail Map",
		"Self-Illum Map",
		"Change Color Map",
		"Cube Map (Reflection Map)",
		"Sprite (Additive, Black Background)",
		"Sprite (Blend, White Background)",
		"Sprite (Double Multiply, Gray Background)",
		"Interface Bitmap",
		"Warp Map (EMBM)",
		"Vector Map",
		"3D Texture",
		"Float Map (WARNING: HUGE)",
		"Half float Map (HALF HUGE)",
		"Height Map (for Parallax)",
		"ZBrush Bump Map (from Bump Map)",
		"Normal Map (aka zbump)",
		"Detail ZBrush Bump Map",
		"Detail Normal Map",
		"Blend Map (linear for terrains)",
		"Palettized --- effects only",
		"CHUD related bitmap",
		"Lightmap Array",
		"Water Array",
		"Interface Sprite",
		"Interface Gradient",
		"Material Map",
		"Smoke Warp",
		"Mux Material Blend Map",
		"Cubemap Gel",
		"Lens Flare gamma 2.2 -- effects only",
		"Signed Noise",
		"Roughness Map (auto)",
		"Normal Map (from Standard Orientation of Maya, Modo, Zbrush)",
		"Color Grading",
		"Detail Normal Map (from Standard Orientation with distance fade)",
		"Diffuse Texture Array",
		"Palettized Texture Array"
	};
	STRING_LIST(bitmap_usage_global_enum, bitmap_usage_global_enum_strings, _countof(bitmap_usage_global_enum_strings));

	STRINGS(bitmap_group_flags_def)
	{
		"bitmap is TILED#affects how height maps are converted to bump maps",
		"use less blurry bump map#uses a sharper (and noisier) method of calculating bump maps from height maps",
		"dither when compressing#lets the compressor use dithering",
		"generate random sprites#repopulates the manual sequences with random sprites upon reimport",
		"using tag_interop and tag_resource!*#FOR INTERNAL USE ONLY - DO NOT MODIFY",
		"ignore alpha channel#if you have an alpha channel but do not care about it, set this flag",
		"alpha channel stores TRANSPARENCY#if your alpha channel represents transparency (alpha blend or alpha-test only), set this bit to stop color bleeding on edges",
		"preserve alpha channel in mipmaps for ALPHA TEST{prefer to use alpha value as a weight to build mipmap}#this will artificially thicken the alpha channel in mip maps, which can keep your bitmap from disappearing in the distance when you are using alpha test",
		"only use on demand&UI on demand bitmap#this bitmap will always be demand loaded, only supported by UI",
		"generate tight bounds#generate a polygonal bounding box around the non-empty pixels to save fill rate cost",
		"tight bounds from alpha channel#unchecked, tight bounds are generated from the color channel",
		"do not generate required section#bitmap will have data split between medium and low optional sections",
		"do not allow stitching#bitmap will not be available for stitching (2-priority only) - note, raises REQUIRED resource level",
		"apply max resolution after slicing#allows use of \"max resolution\" on bitmaps that have multiple frames, but may be buggy...?",
		"generate black-point tight bounds#generate a set of polygonal bounding boxes for various alpha black points"
	};
	STRING_LIST(bitmap_group_flags_def, bitmap_group_flags_def_strings, _countof(bitmap_group_flags_def_strings));

	STRINGS(bitmap_curve_override_enum)
	{
		"choose best#will choose FAST if your bitmap is bright",
		"force FAST#forces FAST mode, but causes banding in dark areas",
		"force PRETTY#chooses the best looking curve, probably slower"
	};
	STRING_LIST(bitmap_curve_override_enum, bitmap_curve_override_enum_strings, _countof(bitmap_curve_override_enum_strings));

	STRINGS(bitmap_usage_format_def)
	{
		"Use Default (defined by usage)",
		"Best Compressed Color Format",
		"Best Uncompressed Color Format",
		"Best Compressed Bump Format",
		"Best Uncompressed Bump Format",
		"Best Compressed Monochrome Format",
		"Best Uncompressed Monochrome Format",
		"Best Compressed Monochrome Format without alpha",
		"unused2!",
		"unused3!",
		"unused4!",
		"unused5!",
		"unused6!",
		"--- Color and Alpha formats ---",
		"DXT1 (Compressed Color + Color-Key Alpha)",
		"DXT3 (Compressed Color + 4-bit Alpha)",
		"DXT5 (Compressed Color + Compressed 8-bit Alpha)",
		"24-bit Color + 8-bit Alpha",
		"8-bit Monochrome + 8-bit Alpha",
		"   Channel Mask (3-bit Color + 1-bit Alpha)",
		"   30-bit Color + 2-bit Alpha",
		"   48-bit Color + 16-bit Alpha",
		"   HALF Color + Alpha",
		"   FLOAT Color + Alpha",
		"AY8 (8-bit Intensity replicated to ARGB)",
		"DXT3A (4-bit Intensity replicated to ARGB)",
		"DXT5A (DXT-compressed Intensity replicated to ARGB)",
		"Compressed Monochrome + Alpha",
		"A4R4G4B4 (12-bit color + 4-bit alpha)",
		"--- Color only formats ---",
		"8-bit Monochrome",
		"   Compressed 24-bit Color",
		"   32-bit Color (R11G11B10)",
		"   16-bit Monochrome",
		"   16-bit Red + Green Only",
		"   16 bit signed ARGB",
		"   HALF Red Only",
		"   FLOAT Red Only",
		"   HALF Red + Green Only",
		"   FLOAT Red + Green Only",
		"   HALF Monochrome",
		"Compressed 4-bit Monochrome",
		"Compressed Interpolated Monochrome",
		"DXT5 red",
		"DXT5 green",
		"DXT5 blue",
		"--- Alpha only formats ---",
		"DXT3A (4-bit Alpha)",
		"DXT5A (8-bit Compressed Alpha)",
		"8-bit Alpha",
		"unused13!",
		"unused14!",
		"unused15!",
		"--- Normal map formats ---",
		"DXN Compressed Normals (better)",
		"CTX1 Compressed Normals (smaller)",
		"16-bit Normals",
		"32-bit Normals",
		"8-bit 4-channel Vector"
	};
	STRING_LIST(bitmap_usage_format_def, bitmap_usage_format_def_strings, _countof(bitmap_usage_format_def_strings));

	#define BITMAP_DATA_BLOCK_DEF_ID { 0xDEB0516A, 0x21C4498, 0x9941C6CD, 0xC294AA69 }
	VERSIONED_TAG_STRUCT(
		bitmap_data_block_def,
		"bitmap_data_block_def",
		"bitmap_data_block_def",
		"s_bitmap_data_block_def",
		SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BITMAP_DATA_BLOCK_DEF_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 20 },
		{ _field_short_integer, "width", "DO NOT CHANGE", "pixels" },
		{ _field_short_integer, "height", "DO NOT CHANGE", "pixels" },
		{ _field_char_integer, "depth", "DO NOT CHANGE", "pixels" },
		{ _field_byte_flags, "more flags", &bitmap_more_flags_definition },
		{ _field_char_enum, "type", "DO NOT CHANGE", &bitmap_types },
		{ _field_char_integer, "four times log2 size", "DO NOT CHANGE" },
		{ _field_short_enum, "format", "DO NOT CHANGE", &bitmap_formats },
		{ _field_byte_flags, "flags", &bitmap_flags },
		{ _field_char_integer, "exponent bias" },
		{ _field_point_2d, "registration point", "the 'center' of the bitmap - i.e. for particles" },
		{ _field_char_integer, "mipmap count", "DO NOT CHANGE (not counting the highest resolution)" },
		{ _field_char_enum, "curve", "how to convert from pixel value to linear", &bitmap_curve_enum },
		{ _field_char_block_index, "interleaved interop", &bitmap_texture_interleaved_interop_block_block },
		{ _field_char_integer, "interleaved texture index" },
		{ _field_long_integer, "pixels offset", "DO NOT CHANGE (offset of the beginning of this bitmap, into pixel data)", "bytes" },
		{ _field_long_integer, "pixels size", "DO NOT CHANGE (total bytes used by this bitmap)", "bytes" },
		{ _field_long_integer, "medium res pixels size", "DO NOT CHANGE" },
		{ _field_long_integer, "high res pixels size", "DO NOT CHANGE" },
		{ _field_long_integer, "hardware format" },
		{ _field_long_integer, "runtime tag base address" },
		
		{ _struct_version_mode_equal, 0, 15 },
		{ _field_tag, "signature" },
		{ _field_short_integer, "width", nullptr, "pixels" },
		{ _field_short_integer, "height", nullptr, "pixels" },
		{ _field_short_integer, "depth", "depth is 1 for 2D textures and cube maps", "pixels" },
		{ _field_short_enum, "type", "determines bitmap 'geometry'", &bitmap_types },
		{ _field_short_enum, "format", "determines how pixels are represented internally", &bitmap_formats },
		{ _field_word_flags, "flags", &bitmap_flags },
		{ _field_point_2d, "registration point" },
		{ _field_short_integer, "mipmap count" },
		FIELD_PAD("LIXVT", 2),
		{ _field_long_integer, "pixels offset" },
		FIELD_PAD("DQHVF", 4),
		FIELD_PAD("DFEQIFITH", 4),
		FIELD_PAD("GFTORTKQQ", 4),
		FIELD_PAD("TKNMMAWFC", 8),
		
		{ _field_terminator }
	};

	STRINGS(bitmap_more_flags_definition)
	{
		"xbox360 medium resolution offset is valid!*#DO NOT CHANGE",
		"xbox360 pitch (memory spacing)!*#DO NOT CHANGE",
		"xbox360 byte order!*#DO NOT CHANGE",
		"xbox360 tiled texture!*#DO NOT CHANGE",
		"xbox360 created correctly (hack for bumpmaps)!*#DO NOT CHANGE",
		"xbox360 high resolution offset is valid!*#DO NOT CHANGE",
		"xbox360 use interleaved textures!*#DO NOT CHANGE",
		"xbox360 use on demand only!*#DO NOT CHANGE"
	};
	STRING_LIST(bitmap_more_flags_definition, bitmap_more_flags_definition_strings, _countof(bitmap_more_flags_definition_strings));

	STRINGS(bitmap_types)
	{
		"2D texture",
		"3D texture",
		"cube map",
		"array"
	};
	STRING_LIST(bitmap_types, bitmap_types_strings, _countof(bitmap_types_strings));

	STRINGS(bitmap_formats)
	{
		"a8",
		"y8",
		"ay8",
		"a8y8",
		"unused1",
		"unused2",
		"r5g6b5",
		"unused3",
		"a1r5g5b5",
		"a4r4g4b4",
		"x8r8g8b8",
		"a8r8g8b8",
		"unused4",
		"dxt5_bias_alpha",
		"dxt1",
		"dxt3",
		"dxt5",
		"a4r4g4b4 font",
		"unused7",
		"unused8",
		"software rgbfp32",
		"unused9",
		"v8u8",
		"g8b8",
		"abgrfp32",
		"abgrfp16",
		"16f_mono",
		"16f_red",
		"q8w8v8u8",
		"a2r10g10b10",
		"a16b16g16r16",
		"v16u16",
		"l16",
		"r16g16",
		"signedr16g16b16a16",
		"dxt3a",
		"dxt5a",
		"dxt3a_1111",
		"dxn",
		"ctx1",
		"dxt3a_alpha",
		"dxt3a_mono",
		"dxt5a_alpha",
		"dxt5a_mono",
		"dxn_mono_alpha",
		"dxt5_red",
		"dxt5_green",
		"dxt5_blue",
		"depth 24"
	};
	STRING_LIST(bitmap_formats, bitmap_formats_strings, _countof(bitmap_formats_strings));

	STRINGS(bitmap_flags)
	{
		"power of two dimensions*#DO NOT CHANGE",
		"compressed*#DO NOT CHANGE",
		"swap axes*#DO NOT CHANGE"
	};
	STRING_LIST(bitmap_flags, bitmap_flags_strings, _countof(bitmap_flags_strings));

	STRINGS(bitmap_curve_enum)
	{
		"unknown",
		"xRGB (gamma about 2.0){SRGB (gamma 2.2)}",
		"gamma 2.0",
		"linear",
		"offset log",
		"sRGB (gamma 2.2)"
	};
	STRING_LIST(bitmap_curve_enum, bitmap_curve_enum_strings, _countof(bitmap_curve_enum_strings));

	#define BITMAP_GROUP_SEQUENCE_BLOCK_DEF_ID { 0x15026732, 0x9E8B45CE, 0xB853499B, 0x557C9320 }
	TAG_STRUCT(
		bitmap_group_sequence_block_def,
		"bitmap_group_sequence_block_def",
		"bitmap_group_sequence_block_def",
		"s_bitmap_group_sequence_block_def",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BITMAP_GROUP_SEQUENCE_BLOCK_DEF_ID)
	{
		{ _field_string, "name" },
		{ _field_short_integer, "first bitmap index" },
		{ _field_short_integer, "bitmap count" },
		FIELD_PAD("OTXYKQ", 16),
		{ _field_block, "sprites", &bitmap_group_sprite_block_def_block },
		{ _field_terminator }
	};

	#define BITMAP_GROUP_SPRITE_BLOCK_DEF_ID { 0xBBF4F819, 0xF00A42DC, 0xA731202E, 0x289D9752 }
	TAG_STRUCT(
		bitmap_group_sprite_block_def,
		"bitmap_group_sprite_block_def",
		"bitmap_group_sprite_block_def",
		"s_bitmap_group_sprite_block_def",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BITMAP_GROUP_SPRITE_BLOCK_DEF_ID)
	{
		{ _field_short_integer, "bitmap index" },
		FIELD_PAD("D", 2),
		FIELD_PAD("GMLJPJIMC", 4),
		{ _field_real, "left" },
		{ _field_real, "right" },
		{ _field_real, "top" },
		{ _field_real, "bottom" },
		{ _field_real_point_2d, "registration point" },
		{ _field_terminator }
	};

	#define BITMAP_TEXTURE_INTERLEAVED_INTEROP_BLOCK_STRUCT_ID { 0x6CAC3A05, 0x36414556, 0xB586A7E8, 0x731BD25 }
	TAG_STRUCT(
		bitmap_texture_interleaved_interop_block_struct,
		"bitmap_texture_interleaved_interop_block_struct",
		"bitmap_texture_interleaved_interop_block_struct",
		"s_bitmap_texture_interleaved_interop_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BITMAP_TEXTURE_INTERLEAVED_INTEROP_BLOCK_STRUCT_ID)
	{
		{ _field_pageable_resource, "interleaved texture resource", &bitmap_texture_interleaved_interop_resource },
		{ _field_terminator }
	};

	#define BITMAP_TEXTURE_INTERLEAVED_INTEROP_RESOURCE_STRUCT_ID { 0x1D36B11D, 0x7C714D24, 0x9EDAE21F, 0xA0629172 }
	TAG_STRUCT(
		bitmap_texture_interleaved_interop_resource_struct,
		"bitmap_texture_interleaved_interop_resource_struct",
		"bitmap_texture_interleaved_interop_resource_struct",
		"s_bitmap_texture_interleaved_interop_resource_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BITMAP_TEXTURE_INTERLEAVED_INTEROP_RESOURCE_STRUCT_ID)
	{
		{ _field_api_interop, "interleaved texture interop", &render_texture_interleaved_interop_definition },
		{ _field_terminator }
	};

	#define BITMAP_TEXTURE_INTEROP_BLOCK_STRUCT_ID { 0xCBC28AC7, 0x279B478F, 0xAF316019, 0xFD14E270 }
	TAG_STRUCT(
		bitmap_texture_interop_block_struct,
		"bitmap_texture_interop_block_struct",
		"bitmap_texture_interop_block_struct",
		"s_bitmap_texture_interop_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BITMAP_TEXTURE_INTEROP_BLOCK_STRUCT_ID)
	{
		{ _field_pageable_resource, "texture resource", &bitmap_texture_interop_resource },
		{ _field_terminator }
	};

	#define BITMAP_TEXTURE_INTEROP_RESOURCE_STRUCT_ID { 0xA9542662, 0xC80B42AB, 0x89C0049A, 0xF33BFF9C }
	TAG_STRUCT(
		bitmap_texture_interop_resource_struct,
		"bitmap_texture_interop_resource_struct",
		"bitmap_texture_interop_resource_struct",
		"s_bitmap_texture_interop_resource_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BITMAP_TEXTURE_INTEROP_RESOURCE_STRUCT_ID)
	{
		{ _field_api_interop, "texture interop", &render_texture_interop_definition },
		{ _field_terminator }
	};

	#define BITMAP_TIGHT_BOUNDS_BLOCK_DEF_ID { 0x999753DF, 0x8AB54C19, 0xBDEDB3D3, 0x2D83450D }
	TAG_STRUCT(
		bitmap_tight_bounds_block_def,
		"bitmap_tight_bounds_block_def",
		"bitmap_tight_bounds_block_def",
		"s_bitmap_tight_bounds_block_def",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BITMAP_TIGHT_BOUNDS_BLOCK_DEF_ID)
	{
		{ _field_real_point_2d, "uv" },
		{ _field_terminator }
	};

	#define BITMAP_USAGE_BLOCK_ID { 0x9E0AE90, 0x64F444D8, 0xAFC0FAB5, 0xBDCBD57 }
	TAG_STRUCT(
		bitmap_usage_block,
		"bitmap_usage_block",
		"bitmap_usage_block",
		"s_bitmap_usage_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BITMAP_USAGE_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_real, "source gamma", nullptr, "0.0 to use xenon curve (default)" },
		{ _field_long_enum, "bitmap curve", &bitmap_curve_enum },
		{ _field_byte_flags, "flags", &bitmap_usage_flags_def },
		{ _field_char_enum, "slicer", &bitmap_usage_slicer_def },
		{ _field_byte_flags, "dicer flags", &bitmap_usage_dicer_flags_def },
		{ _field_char_enum, "packer", &bitmap_usage_packer_def },
		{ _field_byte_flags, "packer flags", &bitmap_usage_packer_flags_def },
		{ _field_char_enum, "type", &bitmap_types },
		{ _field_char_integer, "mipmap limit" },
		{ _field_char_enum, "smallest mip", &bitmap_smallest_mip_def },
		{ _field_char_enum, "downsample filter", &bitmap_usage_downsample_filter_def },
		{ _field_char_integer, "filter radius bias" },
		{ _field_word_flags, "downsample flags", &bitmap_usage_downsample_flags_def },
		{ _field_real_rgb_color, "sprite background color" },
		{ _field_char_enum, "swizzle red", &bitmap_usage_swizzle_def },
		{ _field_char_enum, "swizzle green", &bitmap_usage_swizzle_def },
		{ _field_char_enum, "swizzle blue", &bitmap_usage_swizzle_def },
		{ _field_char_enum, "swizzle alpha", &bitmap_usage_swizzle_def },
		{ _field_long_enum, "bitmap format", &bitmap_usage_format_def },
		{ _field_terminator }
	};

	STRINGS(bitmap_usage_flags_def)
	{
		"Ignore Curve Override",
		"Dont Allow Size Optimization",
		"Swap Axes"
	};
	STRING_LIST(bitmap_usage_flags_def, bitmap_usage_flags_def_strings, _countof(bitmap_usage_flags_def_strings));

	STRINGS(bitmap_usage_slicer_def)
	{
		"Automatically Determine Slicer",
		"No Slicing (each source bitmap generates one element)",
		"Color Plate Slicer",
		"Cube Map Slicer",
		"Color Grading Slicer"
	};
	STRING_LIST(bitmap_usage_slicer_def, bitmap_usage_slicer_def_strings, _countof(bitmap_usage_slicer_def_strings));

	STRINGS(bitmap_usage_dicer_flags_def)
	{
		"Convert Plate Color Key to Alpha Channel",
		"Rotate Cube Map to Match DirectX Format",
		"Sprites- Shrink Elements to Smallest Non-Zero Alpha Region",
		"Sprites- Shrink Elements to Smallest Non-Zero Color And Alpha Region",
		"Unsigned -> Signed Scale and Bias",
		"Color Grading sRGB Correction"
	};
	STRING_LIST(bitmap_usage_dicer_flags_def, bitmap_usage_dicer_flags_def_strings, _countof(bitmap_usage_dicer_flags_def_strings));

	STRINGS(bitmap_usage_packer_def)
	{
		"No packing",
		"Sprite Pack (packs elements into as few bitmaps as possible)",
		"Sprite Pack if needed (packs elements into as few bitmaps as possible)",
		"3D Pack (packs elements into a 3D bitmap)"
	};
	STRING_LIST(bitmap_usage_packer_def, bitmap_usage_packer_def_strings, _countof(bitmap_usage_packer_def_strings));

	STRINGS(bitmap_usage_packer_flags_def)
	{
		"Shrink Sprite Texture Pages Tightly to Content"
	};
	STRING_LIST(bitmap_usage_packer_flags_def, bitmap_usage_packer_flags_def_strings, _countof(bitmap_usage_packer_flags_def_strings));

	STRINGS(bitmap_smallest_mip_def)
	{
		"1 pixel",
		"2 pixel",
		"4 pixel",
		"8 pixel",
		"16 pixel",
		"32 pixel",
		"64 pixel",
		"128 pixel",
		"256 pixel",
		"512 pixel",
		"1024 pixel"
	};
	STRING_LIST(bitmap_smallest_mip_def, bitmap_smallest_mip_def_strings, _countof(bitmap_smallest_mip_def_strings));

	STRINGS(bitmap_usage_downsample_filter_def)
	{
		"Point Sampled",
		"Box Filter",
		"Blackman Filter",
		"Lanczos Filter",
		"Nuttall Filter",
		"Blackman-Harris Filter",
		"Blackman-Nuttall Filter",
		"Flat Top Filter",
		"Extreme Filter"
	};
	STRING_LIST(bitmap_usage_downsample_filter_def, bitmap_usage_downsample_filter_def_strings, _countof(bitmap_usage_downsample_filter_def_strings));

	STRINGS(bitmap_usage_downsample_flags_def)
	{
		"Sprites - Color Bleed in Zero Alpha Regions",
		"Pre-Multiply Alpha (before downsampling)",
		"Post-Divide Alpha (after downsampling)",
		"Height Map - Convert to Bump Map",
		"Detail Map - Fade to Gray",
		"Signed -> Unsigned Scale and Bias",
		"Illum Map - Fade to Black",
		"ZBump - Scale by height and renormalize",
		"Cubemap - Fix seams",
		"Calculate specular power",
		"Downsample Bumps in Angular Space",
		"Standard Orientation of Normals in Angular Space and Renormalize",
		"Generate RGB luminance into alpha channel"
	};
	STRING_LIST(bitmap_usage_downsample_flags_def, bitmap_usage_downsample_flags_def_strings, _countof(bitmap_usage_downsample_flags_def_strings));

	STRINGS(bitmap_usage_swizzle_def)
	{
		"Default",
		"Source Red Channel",
		"Source Green Channel",
		"Source Blue Channel",
		"Source Alpha Channel",
		"Set to 1.0",
		"Set to 0.0",
		"Set to 0.5",
		"Random"
	};
	STRING_LIST(bitmap_usage_swizzle_def, bitmap_usage_swizzle_def_strings, _countof(bitmap_usage_swizzle_def_strings));

	#define BLEND_SCREEN_ITEM_DEFINITION_BLOCK_ID { 0xE8D056F9, 0xE4964C6B, 0xB217CB43, 0x50267C7B }
	TAG_STRUCT(
		blend_screen_item_definition_block,
		"blend_screen_item_definition_block",
		"blend_screen_item_definition_block",
		"s_blend_screen_item_definition_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BLEND_SCREEN_ITEM_DEFINITION_BLOCK_ID)
	{
		{ _field_short_block_index, "blend screen", &new_animation_blend_screen_block_block },
		{ _field_word_flags, "flags", &pose_overlay_item_definition_block_flags },
		{ _field_short_block_index, "node mask", &animation_node_mask_block_block },
		FIELD_PAD("bsidbfp", 2),
		{ _field_terminator }
	};

	STRINGS(pose_overlay_item_definition_block_flags)
	{
		"disable"
	};
	STRING_LIST(pose_overlay_item_definition_block_flags, pose_overlay_item_definition_block_flags_strings, _countof(pose_overlay_item_definition_block_flags_strings));

	#define BOARDING_SEAT_BLOCK_ID { 0x355B4BFC, 0x76F044A3, 0xB2456430, 0x1E8E4B6E }
	TAG_STRUCT(
		boarding_seat_block,
		"boarding_seat_block",
		"boarding_seat_block",
		"s_boarding_seat_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BOARDING_SEAT_BLOCK_ID)
	{
		{ _field_short_block_index, "seat", &unit_seat_block_block },
		FIELD_PAD("PAD", 2),
		{ _field_terminator }
	};

	#define BOAT_BLOCK_ID { 0xDC1EBF40, 0xF37D4D6F, 0x93B188D5, 0x27A035CC }
	TAG_STRUCT(
		boat_block,
		"boat_block",
		"boat_block",
		"s_boat_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BOAT_BLOCK_ID)
	{
		{ _field_byte_flags, "flags", &boat_flags$2 },
		FIELD_PAD("blah", 3),
		{ _field_angle, "tank control forward arc", "only used when 'use tank controls' is checked above", "degrees" },
		{ _field_struct, "steering control", &vehicle_steering_control_struct },
		{ _field_struct, "turning control", &vehicle_turning_control_struct },
		{ _field_real, "gravity scale", "0 means 0.  How hard is it to type 1?" },
		{ _field_struct, "engine", &global_vehicle_engine_struct },
		{ _field_block, "boat engine", &boat_engine_definition_block_block },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "hull marker name", "the name of the hull surface used to spew effects along the hull of the vehicle." },
		{ _field_terminator }
	};

	STRINGS(boat_flags$2)
	{
		"brick on throttle#use this for torpedoes",
		"use tank controls"
	};
	STRING_LIST(boat_flags$2, boat_flags$2_strings, _countof(boat_flags$2_strings));

	#define BOAT_ENGINE_DEFINITION_BLOCK_ID { 0xABDB591, 0xC7DE0129, 0x9087807F, 0xE1AB4B36 }
	TAG_STRUCT(
		boat_engine_definition_block,
		"boat_engine_definition_block",
		"boat_engine_definition_block",
		"s_boat_engine_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BOAT_ENGINE_DEFINITION_BLOCK_ID)
	{
		{ _field_byte_flags, "flags", &boat_flags },
		FIELD_PAD("blah", 3),
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "propeller marker name" },
		{ _field_real_fraction, "out of water thrust scale" },
		{ _field_real_fraction, "out of water torque scale" },
		{ _field_real, "propeller radius", "used to interpolate out-of-water thrust", "wu" },
		{ _field_real, "propeller torque scale", "(fake physics mode only)\nScale value for pitch when thrusting" },
		{ _field_real, "reverse linear acceleration" },
		{ _field_real, "linear acceleration" },
		{ _field_real, "angular acceleration" },
		FIELD_EXPLANATION("Stabilization", nullptr),
		{ _field_angle, "stabilization angular acceleration", "how quickly the boat can accelerate to the desired orientation", "deg/s/s" },
		{ _field_angle, "stabilization desired inclination", "how far pitched back the boat tries to achieve (0 is perfectly flat)", "deg" },
		FIELD_EXPLANATION("drag", nullptr),
		{ _field_real, "drag input range velocity", nullptr, "wu/s" },
		{ _field_struct, "normal drag", &scalar_function_named_struct },
		{ _field_struct, "boost drag", &scalar_function_named_struct },
		{ _field_struct, "air drag", &scalar_function_named_struct },
		{ _field_terminator }
	};

	STRINGS(boat_flags)
	{
		"uses fake physics"
	};
	STRING_LIST(boat_flags, boat_flags_strings, _countof(boat_flags_strings));

	#define BOAT_PHYSICS_DEFINITION_STRUCT_ID { 0x10ACB591, 0xC7CEB2A9, 0xA01201F5, 0xE12ABB68 }
	TAG_STRUCT(
		boat_physics_definition_struct,
		"boat_physics_definition_struct",
		"boat_physics_definition_struct",
		"s_boat_physics_definition_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BOAT_PHYSICS_DEFINITION_STRUCT_ID)
	{
		FIELD_EXPLANATION("water hull physics", nullptr),
		{ _field_real, "ground vertical extrusion", "for hull surfaces that drive on ground this is how far we pretend the water is above everything physical" },
		{ _field_terminator }
	};

	#define BOXES_BLOCK_STRUCT_ID { 0xD726D425, 0x6D9147FF, 0xB52DC314, 0xEBCCB77C }
	TAG_STRUCT(
		boxes_block_struct,
		"boxes_block_struct",
		"boxes_block_struct",
		"s_boxes_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BOXES_BLOCK_STRUCT_ID,
		4)
	{
		{ _field_struct, "base", &havok_primitive_struct },
		{ _field_struct, "box shape", &havok_convex_shape_struct },
		FIELD_PAD("algn3473", 12),
		{ _field_real_vector_3d, "half extents" },
		{ _field_real, "havok w half extents" },
		{ _field_struct, "convex transform shape", &havok_convex_transform_shape_struct },
		{ _field_terminator }
	};

	#define BREAKABLE_SURFACE_KEY_TABLE_BLOCK_ID { 0x9815598B, 0x36884E51, 0x81CF6CB8, 0xAA8F19CD }
	TAG_STRUCT(
		breakable_surface_key_table_block,
		"breakable_surface_key_table_block",
		"breakable_surface_key_table_block",
		"s_breakable_surface_key_table_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BREAKABLE_SURFACE_KEY_TABLE_BLOCK_ID)
	{
		{ _field_short_integer, "instanced geometry index" },
		{ _field_byte_integer, "breakable surface set index" },
		{ _field_byte_integer, "breakable surface index" },
		{ _field_long_integer, "seed surface index" },
		{ _field_real, "x0" },
		{ _field_real, "x1" },
		{ _field_real, "y0" },
		{ _field_real, "y1" },
		{ _field_real, "z0" },
		{ _field_real, "z1" },
		{ _field_terminator }
	};

	#define BREAKABLE_SURFACE_SET_BLOCK_ID { 0x1CAF3641, 0x92334C3F, 0x9991A6AC, 0xCB69431A }
	TAG_STRUCT(
		breakable_surface_set_block,
		"breakable_surface_set_block",
		"breakable_surface_set_block",
		"s_breakable_surface_set_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BREAKABLE_SURFACE_SET_BLOCK_ID)
	{
		{ _field_array, "supported bitfield", &supported_bitfield$2 },
		{ _field_terminator }
	};

	#define BREAKABLE_SURFACE_STRUCT_DEFINITION_ID { 0x7CC19130, 0xBD5344AB, 0x8BA2CB75, 0xDAA60C73 }
	TAG_STRUCT(
		breakable_surface_struct_definition,
		"breakable_surface_struct_definition",
		"breakable_surface_struct_definition",
		"s_breakable_surface_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BREAKABLE_SURFACE_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("VITALITY", "If the damage is below the lower bound, the surface won\'t break.\nIf the damage is above the upper bound, the surface always breaks.\nIn the middle, the surface will break with a weighted random chance.\nNegative values mean that the surface will never break from that kind of damage."),
		{ _field_real_bounds, "direct damage vitality", "this is damage from bullets hitting the surface" },
		{ _field_real_bounds, "collision damage impulse thresholds", "not really vitality - this is mass * velocity into the surface.  Running player bipeds cap out around 255\nrun 'event_display_category physics:breakable_surfaces verbose' to get verbose information about damage to breakable surfaces" },
		{ _field_real_bounds, "AoE damage vitality", "not actually in use yet..." },
		{ _field_tag_reference, "effect", &effect_group_reference },
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_block, "particle effects", &particle_system_definition_block_new_block },
		{ _field_real, "particle density" },
		{ _field_tag_reference, "crack bitmap", &bitmap_group_reference$2 },
		{ _field_tag_reference, "hole bitmap", &bitmap_group_reference$2 },
		{ _field_terminator }
	};

	#define BRUTE_GRENADE_BLOCK_ID { 0x7CFB56DB, 0x21F54A49, 0x9344DC0D, 0xD4B6598 }
	TAG_STRUCT(
		brute_grenade_block,
		"brute_grenade_block",
		"brute_grenade_block",
		"s_brute_grenade_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BRUTE_GRENADE_BLOCK_ID)
	{
		{ _field_angle, "minimum angular vel", "degrees/sec" },
		{ _field_angle, "maximum angular vel", "degrees/sec" },
		{ _field_angle, "spin angular vel", "degrees/sec" },
		{ _field_real, "angular damping", "0==nothing 30==almost comlete damping" },
		{ _field_real, "drag angle k" },
		{ _field_real, "drag speed k" },
		{ _field_real, "drag exponent" },
		{ _field_real, "attach sample radius" },
		{ _field_real, "attach acc k" },
		{ _field_real, "attach acc s" },
		{ _field_real, "attach acc e" },
		{ _field_real, "attach acc damping" },
		{ _field_terminator }
	};

	#define BSP2D_NODES_BLOCK_ID { 0x6CD60C8C, 0xC73B4124, 0xB339408C, 0x966AD3BE }
	TAG_STRUCT(
		bsp2d_nodes_block,
		"bsp2d_nodes_block",
		"bsp2d_nodes_block",
		"s_bsp2d_nodes_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BSP2D_NODES_BLOCK_ID,
		4)
	{
		{ _field_real_plane_2d, "plane" },
		{ _field_short_integer, "left child" },
		{ _field_short_integer, "right child" },
		{ _field_terminator }
	};

	#define BSP2D_REFERENCES_BLOCK_ID { 0x591E809E, 0x8C38445F, 0xB889DE6F, 0x3B5474FF }
	TAG_STRUCT(
		bsp2d_references_block,
		"bsp2d_references_block",
		"bsp2d_references_block",
		"s_bsp2d_references_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BSP2D_REFERENCES_BLOCK_ID,
		2)
	{
		{ _field_short_integer, "plane" },
		{ _field_short_integer, "bsp2d node" },
		{ _field_terminator }
	};

	#define BSP3D_KD_SUPDERNODES_BLOCK_ID { 0xABCDC201, 0x10124FA9, 0xA7400AB4, 0xE01AB4BC }
	TAG_STRUCT(
		bsp3d_kd_supdernodes_block,
		"bsp3d_kd_supdernodes_block",
		"bsp3d_kd_supdernodes_block",
		"s_bsp3d_kd_supdernodes_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BSP3D_KD_SUPDERNODES_BLOCK_ID,
		7)
	{
		{ _field_real, "plane 0" },
		{ _field_real, "plane 1" },
		{ _field_real, "plane 2" },
		{ _field_real, "plane 3" },
		{ _field_real, "plane 4" },
		{ _field_real, "plane 5" },
		{ _field_real, "plane 6" },
		{ _field_real, "plane 7" },
		{ _field_real, "plane 8" },
		{ _field_real, "plane 9" },
		{ _field_real, "plane10" },
		{ _field_real, "plane11" },
		{ _field_real, "plane12" },
		{ _field_real, "plane13" },
		{ _field_real, "plane14" },
		{ _field_long_integer, "plane dimensions" },
		{ _field_long_integer, "child index 0" },
		{ _field_long_integer, "child index 1" },
		{ _field_long_integer, "child index 2" },
		{ _field_long_integer, "child index 3" },
		{ _field_long_integer, "child index 4" },
		{ _field_long_integer, "child index 5" },
		{ _field_long_integer, "child index 6" },
		{ _field_long_integer, "child index 7" },
		{ _field_long_integer, "child index 8" },
		{ _field_long_integer, "child index 9" },
		{ _field_long_integer, "child index10" },
		{ _field_long_integer, "child index11" },
		{ _field_long_integer, "child index12" },
		{ _field_long_integer, "child index13" },
		{ _field_long_integer, "child index14" },
		{ _field_long_integer, "child index15" },
		{ _field_terminator }
	};

	#define BSP3D_NODES_BLOCK_STRUCT_ID { 0xB5D8FC21, 0xFF8E48E7, 0x92611F52, 0x3E7371A3 }
	TAG_STRUCT(
		bsp3d_nodes_block_struct,
		"bsp3d_nodes_block_struct",
		"bsp3d_nodes_block_struct",
		"s_bsp3d_nodes_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BSP3D_NODES_BLOCK_STRUCT_ID,
		3)
	{
		{ _field_int64_integer, "node data designator" },
		{ _field_terminator }
	};

	#define BSP_CLUSTER_TO_ROOM_BOUNDS_ID { 0xABDDE059, 0xBF8E4C35, 0xB3B79A93, 0x7AB91ED6 }
	TAG_STRUCT(
		bsp_cluster_to_room_bounds,
		"bsp_cluster_to_room_bounds",
		"bsp_cluster_to_room_bounds",
		"s_bsp_cluster_to_room_bounds",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BSP_CLUSTER_TO_ROOM_BOUNDS_ID)
	{
		{ _field_long_integer, "first room index" },
		{ _field_long_integer, "room index count" },
		{ _field_terminator }
	};

	#define BSP_CLUSTER_TO_ROOM_INDICES_ID { 0x6A9CB1C, 0xDEEA451B, 0x89E0296C, 0x362F4EB6 }
	TAG_STRUCT(
		bsp_cluster_to_room_indices,
		"bsp_cluster_to_room_indices",
		"bsp_cluster_to_room_indices",
		"s_bsp_cluster_to_room_indices",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BSP_CLUSTER_TO_ROOM_INDICES_ID)
	{
		{ _field_short_integer, "room index" },
		{ _field_terminator }
	};

	#define BSP_PREPLACED_DECAL_REFERENCE_BLOCK_ID { 0xE6FD463F, 0xE03645F2, 0xAB632862, 0x8D637AB }
	TAG_STRUCT(
		bsp_preplaced_decal_reference_block,
		"bsp_preplaced_decal_reference_block",
		"bsp_preplaced_decal_reference_block",
		"s_bsp_preplaced_decal_reference_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BSP_PREPLACED_DECAL_REFERENCE_BLOCK_ID)
	{
		{ _field_short_integer, "index start" },
		{ _field_short_integer, "index count" },
		{ _field_short_integer, "vertex start" },
		{ _field_short_integer, "vertex count" },
		{ _field_short_integer, "definition block index" },
		FIELD_PAD("paddddg", 2),
		{ _field_real_point_2d, "spirit corner" },
		{ _field_real_vector_2d, "spirit size" },
		{ _field_terminator }
	};

	#define BSP_PREPLACED_DECAL_SET_REFERENCE_BLOCK_ID { 0xA3345A30, 0xF7654F6F, 0xAE72426D, 0x15740B0B }
	TAG_STRUCT(
		bsp_preplaced_decal_set_reference_block,
		"bsp_preplaced_decal_set_reference_block",
		"bsp_preplaced_decal_set_reference_block",
		"s_bsp_preplaced_decal_set_reference_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BSP_PREPLACED_DECAL_SET_REFERENCE_BLOCK_ID)
	{
		{ _field_long_integer, "decal definition index" },
		{ _field_char_integer, "location bsp 0" },
		{ _field_byte_integer, "location cluster 0" },
		{ _field_char_integer, "location bsp 1" },
		{ _field_byte_integer, "location cluster 1" },
		{ _field_char_integer, "location bsp 2" },
		{ _field_byte_integer, "location cluster 2" },
		{ _field_char_integer, "location bsp 3" },
		{ _field_byte_integer, "location cluster 3" },
		{ _field_real_point_3d, "center" },
		{ _field_short_integer, "first decal ref index" },
		{ _field_short_integer, "decal ref count" },
		{ _field_terminator }
	};

	#define BUDGET_REFERENCE_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0xFD713DEA, 0x786402E, 0xA77EA27B, 0xD760F6BF }
	TAG_STRUCT(
		budget_reference_block_index_flags_block_struct,
		"budget_reference_block_index_flags_block_struct",
		"budget_reference_block_index_flags_block_struct",
		"s_budget_reference_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BUDGET_REFERENCE_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_budget_references_block_block },
		{ _field_terminator }
	};

	#define BYTE_BLOCK_ID { 0x4CC74B22, 0x2D104585, 0xA78C9E3C, 0x146D5E15 }
	TAG_STRUCT(
		byte_block,
		"byte_block",
		"byte_block",
		"s_byte_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		BYTE_BLOCK_ID)
	{
		{ _field_byte_integer, "Value" },
		{ _field_terminator }
	};

	#define CACHE_FILE_BSP_ATTACHMENT_BLOCK_ID { 0x8A7031E2, 0xC4C94AC7, 0x89C74C82, 0xC996E277 }
	TAG_STRUCT(
		cache_file_bsp_attachment_block,
		"cache_file_bsp_attachment_block",
		"cache_file_bsp_attachment_block",
		"s_cache_file_bsp_attachment_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_BSP_ATTACHMENT_BLOCK_ID)
	{
		{ _field_tag_reference, "attachment", &_reference$6 },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference$6, INVALID_TAG, TAG_REFERENCE_FLAG_NOT_A_RESOURCE_DEPENDENCY);

	#define CACHE_FILE_BSP_GAME_ATTACHMENTS_BLOCK_STRUCT_ID { 0xE0BB848D, 0xE4CB4E34, 0x80F3985E, 0x9450C40 }
	TAG_STRUCT(
		cache_file_bsp_game_attachments_block_struct,
		"cache_file_bsp_game_attachments_block_struct",
		"cache_file_bsp_game_attachments_block_struct",
		"s_cache_file_bsp_game_attachments_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_BSP_GAME_ATTACHMENTS_BLOCK_STRUCT_ID)
	{
		{ _field_block, "static", &cache_file_bsp_attachment_block_block },
		{ _field_block, "persistent", &cache_file_bsp_attachment_block_block },
		{ _field_block, "dynamic", &cache_file_bsp_attachment_block_block },
		{ _field_terminator }
	};

	#define CACHE_FILE_BSP_REFERENCE_BLOCK_ID { 0x84874E4D, 0xDBA4456E, 0x8BC8229B, 0xA6B4A90D }
	TAG_STRUCT(
		cache_file_bsp_reference_block,
		"cache_file_bsp_reference_block",
		"cache_file_bsp_reference_block",
		"s_cache_file_bsp_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_BSP_REFERENCE_BLOCK_ID)
	{
		{ _field_tag_reference, "bsp", &_reference$6 },
		{ _field_terminator }
	};

	#define CACHE_FILE_CHARACTER_USAGE_BLOCK_ID { 0x7DCD4D50, 0xCCC04A10, 0xA5187197, 0xDCC31708 }
	TAG_STRUCT(
		cache_file_character_usage_block,
		"cache_file_character_usage_block",
		"cache_file_character_usage_block",
		"s_cache_file_character_usage_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_CHARACTER_USAGE_BLOCK_ID)
	{
		{ _field_short_block_index, "model", &cache_file_resource_owner_block_block },
		FIELD_PAD("sdfasfas", 2),
		{ _field_block, "used model variants", &cache_file_model_variant_usage_reference_block_block },
		{ _field_terminator }
	};

	#define CACHE_FILE_CODEC_IDENTIFIER_BLOCK_ID { 0x98BC457E, 0x5FEA4C26, 0x9C9EFCF1, 0xFB46C21F }
	TAG_STRUCT(
		cache_file_codec_identifier_block,
		"cache_file_codec_identifier_block",
		"cache_file_codec_identifier_block",
		"s_cache_file_codec_identifier_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_CODEC_IDENTIFIER_BLOCK_ID)
	{
		{ _field_long_integer, "identifier part 0" },
		{ _field_long_integer, "identifier part 1" },
		{ _field_long_integer, "identifier part 2" },
		{ _field_long_integer, "identifier part 3" },
		{ _field_terminator }
	};

	#define CACHE_FILE_DEBUG_RESOURCE_DEFINITION_BLOCK_ID { 0x6D56BE92, 0xE91F4C91, 0x901F2870, 0xADDF2F38 }
	TAG_STRUCT(
		cache_file_debug_resource_definition_block,
		"cache_file_debug_resource_definition_block",
		"cache_file_debug_resource_definition_block",
		"s_cache_file_debug_resource_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_DEBUG_RESOURCE_DEFINITION_BLOCK_ID)
	{
		{ _field_block, "categories", &resource_category_block_block },
		{ _field_terminator }
	};

	#define CACHE_FILE_INTEROP_TYPE_IDENTIFIER_BLOCK_ID { 0x946946AC, 0x22F84B4A, 0x8DC4B9C6, 0xB9CDE8FE }
	TAG_STRUCT(
		cache_file_interop_type_identifier_block,
		"cache_file_interop_type_identifier_block",
		"cache_file_interop_type_identifier_block",
		"s_cache_file_interop_type_identifier_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_INTEROP_TYPE_IDENTIFIER_BLOCK_ID)
	{
		{ _field_long_integer, "identifier part 0" },
		{ _field_long_integer, "identifier part 1" },
		{ _field_long_integer, "identifier part 2" },
		{ _field_long_integer, "identifier part 3" },
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	#define CACHE_FILE_MODEL_VARIANT_USAGE_BLOCK_ID { 0x2321AB6C, 0xB74547EF, 0x8B8E12EA, 0x7D729350 }
	TAG_STRUCT(
		cache_file_model_variant_usage_block,
		"cache_file_model_variant_usage_block",
		"cache_file_model_variant_usage_block",
		"s_cache_file_model_variant_usage_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_MODEL_VARIANT_USAGE_BLOCK_ID)
	{
		{ _field_short_block_index, "model", &cache_file_resource_owner_block_block },
		FIELD_PAD("sdfasfas", 2),
		{ _field_string_id, "variant" },
		{ _field_block, "used materials", &cache_file_resource_owner_reference_block_block },
		{ _field_terminator }
	};

	#define CACHE_FILE_MODEL_VARIANT_USAGE_REFERENCE_BLOCK_ID { 0x48A5C4F6, 0x17C44C21, 0x8BB1975C, 0x887DC11F }
	TAG_STRUCT(
		cache_file_model_variant_usage_reference_block,
		"cache_file_model_variant_usage_reference_block",
		"cache_file_model_variant_usage_reference_block",
		"s_cache_file_model_variant_usage_reference_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_MODEL_VARIANT_USAGE_REFERENCE_BLOCK_ID)
	{
		{ _field_short_block_index, "model variant", &cache_file_model_variant_usage_block_block },
		{ _field_terminator }
	};

	#define CACHE_FILE_RESOURCE_DATA_BLOCK_ID { 0x7EF6B5D, 0x210B4AD1, 0x9DEC2F43, 0xE9DCB6A4 }
	TAG_STRUCT(
		cache_file_resource_data_block,
		"cache_file_resource_data_block",
		"cache_file_resource_data_block",
		"s_cache_file_resource_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_RESOURCE_DATA_BLOCK_ID)
	{
		{ _field_tag_reference, "owner tag", &_reference$6 },
		{ _field_short_integer, "resource salt" },
		{ _field_char_block_index, "resource type index", &cache_file_resource_type_identifier_block_block },
		{ _field_char_integer, "control alignment bits" },
		{ _field_long_integer, "control size" },
		{ _field_word_flags, "flags", &cache_file_resource_data_flags_definition },
		{ _field_short_block_index, "page", &cache_file_resource_section_block_block },
		{ _field_long_integer, "root fixup" },
		{ _field_block, "control fixups", &cache_file_resource_fixup_location_block_block },
		{ _field_block, "interop locations", &cache_file_resource_interop_location_block_block },
		{ _field_block, "priority level data", &cache_file_resource_priority_data_block_block },
		{ _field_terminator }
	};

	STRINGS(cache_file_resource_data_flags_definition)
	{
		"has highest priority data",
		"has medium priority data",
		"has low priority data"
	};
	STRING_LIST(cache_file_resource_data_flags_definition, cache_file_resource_data_flags_definition_strings, _countof(cache_file_resource_data_flags_definition_strings));

	#define CACHE_FILE_RESOURCE_FIXUP_LOCATION_BLOCK_ID { 0xFEA3F8F7, 0x966E4EFE, 0xBA0B07A9, 0x40C2D4EC }
	TAG_STRUCT(
		cache_file_resource_fixup_location_block,
		"cache_file_resource_fixup_location_block",
		"cache_file_resource_fixup_location_block",
		"s_cache_file_resource_fixup_location_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_RESOURCE_FIXUP_LOCATION_BLOCK_ID)
	{
		{ _field_long_integer, "encoded fixup location" },
		{ _field_long_integer, "encoded fixup value" },
		{ _field_terminator }
	};

	#define CACHE_FILE_RESOURCE_GESTALT_BLOCK_STRUCT_ID { 0x84D7FF6E, 0xDE544E80, 0x8139DE61, 0x36DCA9DB }
	TAG_STRUCT(
		cache_file_resource_gestalt_block_struct,
		"cache_file_resource_gestalt_block_struct",
		"cache_file_resource_gestalt_block_struct",
		"s_cache_file_resource_gestalt_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_RESOURCE_GESTALT_BLOCK_STRUCT_ID)
	{
		{ _field_short_enum, "scenario type", &scenario_type_enum },
		{ _field_word_flags, "scenario flags", &scenario_flags },
		{ _field_block, "resource type identifiers", &cache_file_resource_type_identifier_block_block, _tag_field_attributed_definition_block_wide_field_default },
		{ _field_block, "interop type identifiers", &cache_file_interop_type_identifier_block_block, _tag_field_attributed_definition_block_wide_field_default },
		{ _field_block, "codec identifiers", &cache_file_codec_identifier_block_block, _tag_field_attributed_definition_block_wide_field_default },
		{ _field_block, "shared files", &cache_file_shared_file_block_block },
		{ _field_block, "file pages", &cache_file_resource_file_page_block_block, _tag_field_attributed_definition_block_wide_field_default },
		{ _field_block, "streaming subpage tables", &cache_file_resource_streaming_subpage_table_block_block },
		{ _field_block, "sections", &cache_file_resource_section_block_block },
		{ _field_block, "resources", &cache_file_resource_data_block_block, _tag_field_attributed_definition_block_wide_field_default },
		{ _field_block, "designer zone manifests", &cache_file_designer_zone_block_block },
		{ _field_block, "global zone manifest", &cache_file_global_zone_block_block },
		{ _field_block, "hs zone manifest", &cache_file_tag_zone_block_block },
		{ _field_block, "unattached designer zone manifest", &cache_file_tag_zone_block_block },
		{ _field_block, "dvd forbidden zone manifest", &cache_file_tag_zone_block_block },
		{ _field_block, "dvd always streaming zone manifest", &cache_file_tag_zone_block_block },
		{ _field_block, "default bsp zone manifests", &cache_file_bsp_zone_block_block },
		{ _field_block, "static bsp zone manifests", &cache_file_tag_zone_block_block },
		{ _field_block, "dynamic bsp zone manifests", &cache_file_tag_zone_block_block },
		{ _field_block, "cinematic zone manifests", &cache_file_cinematic_zone_block_block },
		{ _field_block, "required map variant manifests", &cache_file_tag_zone_block_block },
		{ _field_block, "sandbox map variant manifests", &cache_file_tag_zone_block_block },
		{ _field_block, "zone only zone set manifests", &cache_file_tag_zone_block_block },
		{ _field_block, "expected zone set manifests", &cache_file_tag_zone_block_block },
		{ _field_block, "fully populated zone set manifests", &cache_file_full_zone_sets_block_block },
		{ _field_block, "zone set zone usage", &cache_file_zone_set_zone_usage_block_block },
		{ _field_block, "bsp references", &cache_file_bsp_reference_block_block },
		{ _field_block, "resource owners", &cache_file_resource_owner_block_block },
		{ _field_block, "model variant usage", &cache_file_model_variant_usage_block_block },
		{ _field_block, "character usage", &cache_file_character_usage_block_block },
		{ _field_data, "naive resource control data", &naive_control_data_definition },
		{ _field_long_integer, "minimum complete resource size" },
		{ _field_long_integer, "minimum required resource size" },
		{ _field_long_integer, "minimum dvd resource size" },
		{ _field_long_integer, "global required resource size", "intersection of resources amongst all zone sets" },
		{ _field_long_integer, "total optional control data size" },
		{ _field_block, "overall resource usage", &cache_file_tag_resource_usage_block_block },
		{ _field_block, "bsp game attachments", &cache_file_bsp_game_attachments_block_block },
		{ _field_block, "model variant zones", &debug_cache_file_model_variant_zone_block_block },
		{ _field_block, "combat dialogue zones", &debug_cache_file_combat_dialogue_zone_block_block },
		{ _field_block, "tag zones", &debug_cache_file_tag_zone_block_block },
		{ _field_block, "debug resource definitions", &cache_file_debug_resource_definition_block_block, _tag_field_attributed_definition_block_wide_field_default },
		{ _field_block, "resource layouts", &cache_file_resource_layout_block_block, _tag_field_attributed_definition_block_wide_field_default },
		{ _field_block, "resource properties", &cache_file_tag_resource_properties_block_block, _tag_field_attributed_definition_block_wide_field_default },
		{ _field_block, "parentages", &cache_file_tag_parentage_block_block, _tag_field_attributed_definition_block_wide_field_default },
		{ _field_struct, "prediction table", &cache_file_tag_resource_prediction_table },
		{ _field_long_integer, "Mat is in a really bad mood campaign id" },
		{ _field_long_integer, "Next time we don't put things that the game depends on outside of tool, guerilla, or sapien map id" },
		{ _field_terminator }
	};

	STRINGS(scenario_type_enum)
	{
		"solo",
		"multiplayer",
		"main menu",
		"multiplayer shared",
		"single player shared"
	};
	STRING_LIST(scenario_type_enum, scenario_type_enum_strings, _countof(scenario_type_enum_strings));

	STRINGS(scenario_flags)
	{
		"always draw sky!#always draw sky 0, even if no +sky polygons are visible",
		"don\'t strip pathfinding#always leave pathfinding in, even for a multiplayer scenario",
		"symmetric multiplayer map!",
		"quick loading (cinematic only) scenario",
		"characters use previous mission weapons",
		"lightmaps smooth palettes with neighbors!",
		"snap to white at start",
		"override globals!",
		"big vehicle use center point for light sampling!",
		"don\'t use campaign sharing",
		"ignore size and can\'t ship",
		"always run lightmaps per-bsp",
		"in space#so we can hide hud elements like the compass",
		"survival#so we can strip the elite from the global player representations",
		"do not strip variants#so we can test the impact of variant stripping"
	};
	STRING_LIST(scenario_flags, scenario_flags_strings, _countof(scenario_flags_strings));

	#define CACHE_FILE_RESOURCE_INTEROP_LOCATION_BLOCK_ID { 0x5A424E33, 0x52034BD5, 0xB69A55CD, 0x95A55DA9 }
	TAG_STRUCT(
		cache_file_resource_interop_location_block,
		"cache_file_resource_interop_location_block",
		"cache_file_resource_interop_location_block",
		"s_cache_file_resource_interop_location_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_RESOURCE_INTEROP_LOCATION_BLOCK_ID)
	{
		{ _field_long_integer, "encoded interop location" },
		{ _field_long_block_index, "interop type index", &cache_file_interop_type_identifier_block_block },
		{ _field_terminator }
	};

	#define CACHE_FILE_RESOURCE_LAYOUT_BLOCK_STRUCT_ID { 0xAF086415, 0x9CB7429E, 0xB4D397A6, 0xAD19864 }
	TAG_STRUCT(
		cache_file_resource_layout_block_struct,
		"cache_file_resource_layout_block_struct",
		"cache_file_resource_layout_block_struct",
		"s_cache_file_resource_layout_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_RESOURCE_LAYOUT_BLOCK_STRUCT_ID)
	{
		{ _field_array, "memory sizes", &resource_layout_memory_size_array_definition$2 },
		{ _field_array, "compressed sizes", &resource_layout_compressed_size_array_definition$2 },
		{ _field_long_integer, "deferred required resource size" },
		{ _field_long_integer, "unused resource size" },
		{ _field_word_flags, "global zone attachment", &cache_file_resource_global_zone_attachment_flags },
		FIELD_PAD("global-zone-attachment-pad", 2),
		{ _field_long_block_flags, "bsp zone attachment", &cache_file_bsp_zone_block_block },
		{ _field_qword_integer, "designer zone attachment" },
		{ _field_long_block_flags, "cinematic zone attachment", &cache_file_cinematic_zone_block_block },
		FIELD_PAD("64 bit alignment pad", 4),
		{ _field_terminator }
	};

	STRINGS(cache_file_resource_global_zone_attachment_flags)
	{
		"global",
		"script",
		"hdd only",
		"always streaming",
		"unattached"
	};
	STRING_LIST(cache_file_resource_global_zone_attachment_flags, cache_file_resource_global_zone_attachment_flags_strings, _countof(cache_file_resource_global_zone_attachment_flags_strings));

	#define CACHE_FILE_RESOURCE_LAYOUT_TABLE_BLOCK_STRUCT_ID { 0x3FC58CEB, 0x3F3647DE, 0x9126EA74, 0xF2ED0990 }
	TAG_STRUCT(
		cache_file_resource_layout_table_block_struct,
		"cache_file_resource_layout_table_block_struct",
		"cache_file_resource_layout_table_block_struct",
		"s_cache_file_resource_layout_table_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_RESOURCE_LAYOUT_TABLE_BLOCK_STRUCT_ID)
	{
		{ _field_block, "codec identifiers", &cache_file_codec_identifier_block_block, _tag_field_attributed_definition_block_wide_field_default },
		{ _field_block, "shared files", &cache_file_shared_file_block_block },
		{ _field_block, "file pages", &cache_file_resource_file_page_block_block, _tag_field_attributed_definition_block_wide_field_default },
		{ _field_block, "streaming subpage tables", &cache_file_resource_streaming_subpage_table_block_block },
		{ _field_block, "sections", &cache_file_resource_section_block_block },
		{ _field_long_integer, "required location count" },
		{ _field_long_integer, "required dvd location count" },
		{ _field_terminator }
	};

	#define CACHE_FILE_RESOURCE_OWNER_BLOCK_ID { 0xEEF8F43D, 0x5D8249C7, 0x8CD02DD1, 0x34A61C28 }
	TAG_STRUCT(
		cache_file_resource_owner_block,
		"cache_file_resource_owner_block",
		"cache_file_resource_owner_block",
		"s_cache_file_resource_owner_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_RESOURCE_OWNER_BLOCK_ID)
	{
		{ _field_tag_reference, "resource owner", &_reference$6 },
		{ _field_long_integer, "actual tag index" },
		{ _field_terminator }
	};

	#define CACHE_FILE_RESOURCE_OWNER_REFERENCE_BLOCK_ID { 0x182CCAC9, 0x87284EE2, 0xA12E1B0F, 0xEEAE5B58 }
	TAG_STRUCT(
		cache_file_resource_owner_reference_block,
		"cache_file_resource_owner_reference_block",
		"cache_file_resource_owner_reference_block",
		"s_cache_file_resource_owner_reference_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_RESOURCE_OWNER_REFERENCE_BLOCK_ID)
	{
		{ _field_short_block_index, "tag", &cache_file_resource_owner_block_block },
		{ _field_terminator }
	};

	#define CACHE_FILE_RESOURCE_PAGE_STRUCT_ID { 0xA82CDAB9, 0xAF1B4171, 0x816BA199, 0xDD8E6C9C }
	TAG_STRUCT(
		cache_file_resource_page_struct,
		"cache_file_resource_page_struct",
		"cache_file_resource_page_struct",
		"s_cache_file_resource_page_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_RESOURCE_PAGE_STRUCT_ID)
	{
		{ _field_short_integer, "header salt at runtime" },
		{ _field_byte_flags, "flags", &cache_file_tag_resource_page_flags },
		{ _field_char_block_index, "codec", &cache_file_codec_identifier_block_block },
		{ _field_short_block_index, "shared file", &cache_file_shared_file_block_block },
		{ _field_short_integer, "shared file location index" },
		{ _field_long_integer, "file offset" },
		{ _field_long_integer, "file size" },
		{ _field_long_integer, "size" },
		{ _field_struct, "checksum", &resource_checksum_struct },
		{ _field_short_integer, "resource reference count" },
		{ _field_short_block_index, "streaming subpage table", &cache_file_resource_streaming_subpage_table_block_block },
		{ _field_terminator }
	};

	STRINGS(cache_file_tag_resource_page_flags)
	{
		"valid checksum",
		"shared and required",
		"dvd only shared and required",
		"dvd only and required",
		"referenced by cache file header",
		"only full valid checksum"
	};
	STRING_LIST(cache_file_tag_resource_page_flags, cache_file_tag_resource_page_flags_strings, _countof(cache_file_tag_resource_page_flags_strings));

	#define CACHE_FILE_RESOURCE_PRIORITY_DATA_BLOCK_ID { 0x57E10DCD, 0x9B0435D, 0x989C704E, 0xC205B3F3 }
	TAG_STRUCT(
		cache_file_resource_priority_data_block,
		"cache_file_resource_priority_data_block",
		"cache_file_resource_priority_data_block",
		"s_cache_file_resource_priority_data_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_RESOURCE_PRIORITY_DATA_BLOCK_ID)
	{
		{ _field_long_integer, "naive data offset" },
		{ _field_terminator }
	};

	#define CACHE_FILE_RESOURCE_SECTION_BLOCK_ID { 0xE8CE3689, 0x412848DF, 0x8D98BA3D, 0x43333461 }
	TAG_STRUCT(
		cache_file_resource_section_block,
		"cache_file_resource_section_block",
		"cache_file_resource_section_block",
		"s_cache_file_resource_section_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_RESOURCE_SECTION_BLOCK_ID)
	{
		{ _field_array, "page offsets", &location_offsets_array_definition$2 },
		{ _field_array, "file page indexes", &file_location_indexes_array_definition$2 },
		{ _field_array, "subpage table indexes", &sublocation_table_indexes_array_definition$2 },
		{ _field_terminator }
	};

	#define CACHE_FILE_RESOURCE_STREAMING_SUBPAGE_BLOCK_ID { 0x184D947A, 0x728243C5, 0x8329E7B3, 0xF3FB0838 }
	TAG_STRUCT(
		cache_file_resource_streaming_subpage_block,
		"cache_file_resource_streaming_subpage_block",
		"cache_file_resource_streaming_subpage_block",
		"s_cache_file_resource_streaming_subpage_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_RESOURCE_STREAMING_SUBPAGE_BLOCK_ID)
	{
		{ _field_long_integer, "memory offset" },
		{ _field_long_integer, "memory size" },
		{ _field_terminator }
	};

	#define CACHE_FILE_RESOURCE_STREAMING_SUBPAGE_TABLE_BLOCK_ID { 0x41CFEA33, 0xC3564990, 0xABA22B6B, 0xF24EB390 }
	TAG_STRUCT(
		cache_file_resource_streaming_subpage_table_block,
		"cache_file_resource_streaming_subpage_table_block",
		"cache_file_resource_streaming_subpage_table_block",
		"s_cache_file_resource_streaming_subpage_table_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_RESOURCE_STREAMING_SUBPAGE_TABLE_BLOCK_ID)
	{
		{ _field_long_integer, "total memory size" },
		{ _field_block, "streaming subpages", &cache_file_resource_streaming_subpage_block_block },
		{ _field_terminator }
	};

	#define CACHE_FILE_RESOURCE_TYPE_IDENTIFIER_BLOCK_ID { 0xA2D1A781, 0xD56446D0, 0xA06621D2, 0x648D26B3 }
	TAG_STRUCT(
		cache_file_resource_type_identifier_block,
		"cache_file_resource_type_identifier_block",
		"cache_file_resource_type_identifier_block",
		"s_cache_file_resource_type_identifier_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_RESOURCE_TYPE_IDENTIFIER_BLOCK_ID)
	{
		{ _field_long_integer, "identifier part 0" },
		{ _field_long_integer, "identifier part 1" },
		{ _field_long_integer, "identifier part 2" },
		{ _field_long_integer, "identifier part 3" },
		{ _field_long_integer, "definition flags" },
		{ _field_string_id, "name" },
		{ _field_array, "page alignment bits", &tag_resource_alignment_bits_array_definition$2 },
		FIELD_PAD("pad0", 2),
		{ _field_terminator }
	};

	#define CACHE_FILE_SHARED_FILE_BLOCK_ID { 0x13027DEC, 0xFA9E4C11, 0xBD81B8E7, 0xD68881E9 }
	TAG_STRUCT(
		cache_file_shared_file_block,
		"cache_file_shared_file_block",
		"cache_file_shared_file_block",
		"s_cache_file_shared_file_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_SHARED_FILE_BLOCK_ID)
	{
		{ _field_long_string, "dvd relative path" },
		{ _field_word_flags, "flags", &cache_file_shared_file_flags_definition },
		{ _field_short_integer, "global shared location offset" },
		{ _field_long_integer, "io offset" },
		{ _field_terminator }
	};

	STRINGS(cache_file_shared_file_flags_definition)
	{
		"use header io offset",
		"not required",
		"use header locations"
	};
	STRING_LIST(cache_file_shared_file_flags_definition, cache_file_shared_file_flags_definition_strings, _countof(cache_file_shared_file_flags_definition_strings));

	#define CACHE_FILE_SOUND_STRUCT_DEFINITION_ID { 0x63E9C33, 0xDDF646F7, 0xB9AD58DE, 0x19E86FD6 }
	TAG_STRUCT(
		cache_file_sound_struct_definition,
		"cache_file_sound_struct_definition",
		"cache_file_sound_struct_definition",
		"s_cache_file_sound_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_SOUND_STRUCT_DEFINITION_ID)
	{
		{ _field_word_flags, "flags", &sound_definition_flags },
		{ _field_char_enum, "sound class", &sound_class_enum },
		{ _field_char_integer, "pitch range count" },
		{ _field_short_integer, "codec index" },
		{ _field_short_integer, "first pitch range index" },
		{ _field_short_integer, "first language duration pitch range index" },
		{ _field_short_integer, "runtime gestalt index storage" },
		{ _field_short_integer, "sub priority" },
		{ _field_short_integer, "playback index" },
		{ _field_short_integer, "scale index" },
		{ _field_char_integer, "promotion index" },
		{ _field_char_integer, "custom playback index" },
		{ _field_short_integer, "extra info index" },
		FIELD_PAD("pad", 2),
		{ _field_long_integer, "maximum play time", nullptr, "ms" },
		{ _field_pageable_resource, "sound data resource", &sound_resource_definition },
		{ _field_terminator }
	};

	STRINGS(sound_definition_flags)
	{
		"fit to adpcm blocksize",
		"always spatialize#always play as 3d sound, even in first person",
		"never obstruct#disable occlusion/obstruction for this sound",
		"internal don\'t touch!",
		"facial animation data stripped!",
		"use huge sound transmission",
		"link count to owner unit",
		"pitch range is language",
		"don\'t use sound class speaker flag",
		"don\'t use lipsync data",
		"instant sound propagation",
		"fake spatialization with distance",
		"play permutations in order#picks the first permutation randomly"
	};
	STRING_LIST(sound_definition_flags, sound_definition_flags_strings, _countof(sound_definition_flags_strings));

	STRINGS(sound_class_enum)
	{
		"projectile_impact",
		"projectile_detonation",
		"projectile_flyby",
		"projectile_detonation_lod",
		"weapon_fire",
		"weapon_ready",
		"weapon_reload",
		"weapon_empty",
		"weapon_charge",
		"weapon_overheat",
		"weapon_idle",
		"weapon_melee",
		"weapon_animation",
		"object_impacts",
		"particle_impacts",
		"weapon_fire_lod",
		"water_transitions",
		"lowpass_effects",
		"unit_footsteps",
		"unit_dialog",
		"unit_animation",
		"unit_unused!",
		"vehicle_collision",
		"vehicle_engine",
		"vehicle_animation",
		"vehicle_engine_lod",
		"device_door",
		"device_unused0!",
		"device_machinery",
		"device_stationary",
		"device_unused1!",
		"device_unused2!",
		"music",
		"ambient_nature",
		"ambient_machinery",
		"ambient_stationary",
		"huge_ass",
		"object_looping",
		"cinematic_music",
		"unknown_unused0!",
		"unknown_unused1!",
		"ambient_flock",
		"no_pad",
		"no_pad_stationary",
		"equipment_effect",
		"mission_dialog",
		"cinematic_dialog",
		"scripted_cinematic_foley",
		"game_event",
		"ui",
		"test",
		"multiplayer_dialog",
		"ambient_nature_details",
		"ambient_machinery_details",
		"inside_surround_tail",
		"outside_surround_tail",
		"vehicle_detonation",
		"ambient_detonation",
		"first_person_inside",
		"first_person_outside",
		"first_person_anywhere",
		"space_projectile_detonation",
		"space_projectile_flyby",
		"space_vehicle_engine",
		"space_weapon_fire",
		"player_voice_team",
		"player_voice_proxy",
		"projectile_impact_postpone",
		"unit_footsteps_postpone",
		"weapon_ready_third_person",
		"ui_music"
	};
	STRING_LIST(sound_class_enum, sound_class_enum_strings, _countof(sound_class_enum_strings));

	#define CACHE_FILE_TAG_PARENTAGE_BLOCK_STRUCT_ID { 0x30B9A8D9, 0x80FD41FD, 0xBE990CAA, 0x8CF7F824 }
	TAG_STRUCT(
		cache_file_tag_parentage_block_struct,
		"cache_file_tag_parentage_block_struct",
		"cache_file_tag_parentage_block_struct",
		"s_cache_file_tag_parentage_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_TAG_PARENTAGE_BLOCK_STRUCT_ID)
	{
		{ _field_tag_reference, "tag", &_reference$6 },
		{ _field_word_flags, "flags", &cache_file_tag_parentage_flags_definition },
		{ _field_short_integer, "resource owner index" },
		{ _field_block, "parents", &cache_file_tag_parentage_reference_block_block, _tag_field_attributed_definition_block_wide_field_default },
		{ _field_block, "children", &cache_file_tag_parentage_reference_block_block, _tag_field_attributed_definition_block_wide_field_default },
		{ _field_terminator }
	};

	STRINGS(cache_file_tag_parentage_flags_definition)
	{
		"loaded by game",
		"unloaded"
	};
	STRING_LIST(cache_file_tag_parentage_flags_definition, cache_file_tag_parentage_flags_definition_strings, _countof(cache_file_tag_parentage_flags_definition_strings));

	#define CACHE_FILE_TAG_PARENTAGE_REFERENCE_BLOCK_ID { 0xC273771E, 0x99C645BA, 0xB30E3EC4, 0x968468FB }
	TAG_STRUCT(
		cache_file_tag_parentage_reference_block,
		"cache_file_tag_parentage_reference_block",
		"cache_file_tag_parentage_reference_block",
		"s_cache_file_tag_parentage_reference_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_TAG_PARENTAGE_REFERENCE_BLOCK_ID)
	{
		{ _field_long_block_index, "link", &cache_file_tag_parentage_block_block },
		{ _field_terminator }
	};

	#define CACHE_FILE_TAG_RESOURCE_NAMED_VALUE_BLOCK_ID { 0xE15017A2, 0xAB51458E, 0xB4ADB126, 0x18477B8E }
	TAG_STRUCT(
		cache_file_tag_resource_named_value_block,
		"cache_file_tag_resource_named_value_block",
		"cache_file_tag_resource_named_value_block",
		"s_cache_file_tag_resource_named_value_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_TAG_RESOURCE_NAMED_VALUE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_enum, "type", &named_value_type_enum },
		{ _field_long_integer, "row" },
		{ _field_string_id, "string value" },
		{ _field_real, "real value" },
		{ _field_long_integer, "int value" },
		{ _field_terminator }
	};

	STRINGS(named_value_type_enum)
	{
		"unknown",
		"string",
		"real",
		"int"
	};
	STRING_LIST(named_value_type_enum, named_value_type_enum_strings, _countof(named_value_type_enum_strings));

	#define CACHE_FILE_TAG_RESOURCE_PREDICTION_ATOM_BLOCK_ID { 0xD4DF8812, 0xE9CC40B4, 0x83EC0650, 0xC2C8AC6 }
	TAG_STRUCT(
		cache_file_tag_resource_prediction_atom_block,
		"cache_file_tag_resource_prediction_atom_block",
		"cache_file_tag_resource_prediction_atom_block",
		"s_cache_file_tag_resource_prediction_atom_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_TAG_RESOURCE_PREDICTION_ATOM_BLOCK_ID)
	{
		{ _field_short_integer, "index salt" },
		{ _field_word_integer, "prediction quantum count" },
		{ _field_long_block_index, "first prediction quantum index", &cache_file_tag_resource_prediction_quantum_block_block },
		{ _field_terminator }
	};

	#define CACHE_FILE_TAG_RESOURCE_PREDICTION_MOLECULE_ATOM_REFERENCE_BLOCK_ID { 0xF49C2052, 0xC3B94427, 0xB175D8B8, 0x44EC4F73 }
	TAG_STRUCT(
		cache_file_tag_resource_prediction_molecule_atom_reference_block,
		"cache_file_tag_resource_prediction_molecule_atom_reference_block",
		"cache_file_tag_resource_prediction_molecule_atom_reference_block",
		"s_cache_file_tag_resource_prediction_molecule_atom_reference_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_TAG_RESOURCE_PREDICTION_MOLECULE_ATOM_REFERENCE_BLOCK_ID)
	{
		{ _field_long_integer, "prediction atom handle" },
		{ _field_terminator }
	};

	#define CACHE_FILE_TAG_RESOURCE_PREDICTION_MOLECULE_BLOCK_ID { 0x335E8A1B, 0x745046FF, 0xA6B7B810, 0xC0F7C4B7 }
	TAG_STRUCT(
		cache_file_tag_resource_prediction_molecule_block,
		"cache_file_tag_resource_prediction_molecule_block",
		"cache_file_tag_resource_prediction_molecule_block",
		"s_cache_file_tag_resource_prediction_molecule_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_TAG_RESOURCE_PREDICTION_MOLECULE_BLOCK_ID)
	{
		{ _field_word_integer, "prediction atom count" },
		{ _field_short_block_index, "first prediction atom index", &cache_file_tag_resource_prediction_atom_block_block },
		{ _field_word_integer, "prediction quantum count" },
		{ _field_word_integer, "first prediction quantum index" },
		{ _field_terminator }
	};

	#define CACHE_FILE_TAG_RESOURCE_PREDICTION_MOLECULE_KEYS_BLOCK_ID { 0xB205AA17, 0xED834796, 0xB4669D18, 0x47F86845 }
	TAG_STRUCT(
		cache_file_tag_resource_prediction_molecule_keys_block,
		"cache_file_tag_resource_prediction_molecule_keys_block",
		"cache_file_tag_resource_prediction_molecule_keys_block",
		"s_cache_file_tag_resource_prediction_molecule_keys_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_TAG_RESOURCE_PREDICTION_MOLECULE_KEYS_BLOCK_ID)
	{
		{ _field_long_integer, "index a" },
		{ _field_long_integer, "index b" },
		{ _field_long_integer, "index c" },
		{ _field_terminator }
	};

	#define CACHE_FILE_TAG_RESOURCE_PREDICTION_QUANTUM_BLOCK_ID { 0xB0C3E6A3, 0x6B6C44A1, 0x9C87B72D, 0xEF8EF158 }
	TAG_STRUCT(
		cache_file_tag_resource_prediction_quantum_block,
		"cache_file_tag_resource_prediction_quantum_block",
		"cache_file_tag_resource_prediction_quantum_block",
		"s_cache_file_tag_resource_prediction_quantum_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_TAG_RESOURCE_PREDICTION_QUANTUM_BLOCK_ID)
	{
		{ _field_long_integer, "internal resource handle" },
		{ _field_terminator }
	};

	#define CACHE_FILE_TAG_RESOURCE_PREDICTION_TABLE_ID { 0x8AC05042, 0xF5CF4649, 0x91F59F02, 0xC1CF8172 }
	TAG_STRUCT(
		cache_file_tag_resource_prediction_table,
		"cache_file_tag_resource_prediction_table",
		"cache_file_tag_resource_prediction_table",
		"s_cache_file_tag_resource_prediction_table",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_TAG_RESOURCE_PREDICTION_TABLE_ID)
	{
		{ _field_block, "prediction quanta", &cache_file_tag_resource_prediction_quantum_block_block },
		{ _field_block, "prediction atoms", &cache_file_tag_resource_prediction_atom_block_block },
		{ _field_block, "prediction molecule atoms", &cache_file_tag_resource_prediction_molecule_atom_reference_block_block },
		{ _field_block, "prediction molecules", &cache_file_tag_resource_prediction_molecule_block_block },
		{ _field_block, "prediction molecule keys", &cache_file_tag_resource_prediction_molecule_keys_block_block },
		{ _field_terminator }
	};

	#define CACHE_FILE_TAG_RESOURCE_PROPERTIES_BLOCK_ID { 0x884D15C8, 0x1E404784, 0xB1E4362C, 0x2E44E7E3 }
	TAG_STRUCT(
		cache_file_tag_resource_properties_block,
		"cache_file_tag_resource_properties_block",
		"cache_file_tag_resource_properties_block",
		"s_cache_file_tag_resource_properties_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_TAG_RESOURCE_PROPERTIES_BLOCK_ID)
	{
		{ _field_block, "named values", &cache_file_tag_resource_named_value_block_block },
		{ _field_terminator }
	};

	#define CACHE_FILE_TAG_RESOURCE_USAGE_BLOCK_STRUCT_ID { 0x7E3FC27D, 0xB104D30, 0xBE6C359D, 0xBB4988CB }
	TAG_STRUCT(
		cache_file_tag_resource_usage_block_struct,
		"cache_file_tag_resource_usage_block_struct",
		"cache_file_tag_resource_usage_block_struct",
		"s_cache_file_tag_resource_usage_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_TAG_RESOURCE_USAGE_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_array, "page sizes", &resource_usage_page_size_array_definition$2 },
		{ _field_long_integer, "deferred required size" },
		{ _field_long_integer, "streamed resource size" },
		{ _field_long_integer, "dvd in-memory resource size" },
		{ _field_terminator }
	};

	#define CACHE_FILE_TAG_RESOURCES_BITVECTOR_BLOCK_ID { 0xF5CB474E, 0xF51C465F, 0x9DD77EAF, 0x5070BA68 }
	TAG_STRUCT(
		cache_file_tag_resources_bitvector_block,
		"cache_file_tag_resources_bitvector_block",
		"cache_file_tag_resources_bitvector_block",
		"s_cache_file_tag_resources_bitvector_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_TAG_RESOURCES_BITVECTOR_BLOCK_ID)
	{
		{ _field_long_integer, "32 bits" },
		{ _field_terminator }
	};

	#define CACHE_FILE_TAG_ZONE_MANIFEST_STRUCT_ID { 0x97526DBD, 0xD3046F2, 0x846E0460, 0xDADC74B2 }
	TAG_STRUCT(
		cache_file_tag_zone_manifest_struct,
		"cache_file_tag_zone_manifest_struct",
		"cache_file_tag_zone_manifest_struct",
		"s_cache_file_tag_zone_manifest_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_TAG_ZONE_MANIFEST_STRUCT_ID)
	{
		{ _field_block, "cached resource bitvector", &cache_file_tag_resources_bitvector_block_block },
		{ _field_block, "streamed resource bitvector", &cache_file_tag_resources_bitvector_block_block },
		{ _field_string_id, "name" },
		{ _field_array, "page sizes", &resource_usage_page_size_array_definition$2 },
		{ _field_long_integer, "deferred required size" },
		{ _field_long_integer, "streamed resource size" },
		{ _field_long_integer, "dvd in-memory resource size" },
		{ _field_block, "resource usage", &cache_file_tag_resource_usage_block_block },
		{ _field_block, "budget usage", &cache_file_tag_resource_usage_block_block },
		{ _field_block, "unique budget usage", &cache_file_tag_resource_usage_block_block },
		{ _field_block, "active resource owners", &cache_file_tag_resources_bitvector_block_block },
		{ _field_block, "top level resource owners", &cache_file_tag_resources_bitvector_block_block },
		{ _field_block, "visitation hierarchy", &cache_file_zone_resource_visit_node_block_block },
		{ _field_long_integer, "active bsp mask" },
		{ _field_long_integer, "touched bsp mask" },
		{ _field_long_integer, "cinematic zone mask" },
		{ _field_qword_integer, "designer zone mask" },
		{ _field_terminator }
	};

	#define CACHE_FILE_ZONE_RESOURCE_VISIT_NODE_BLOCK_STRUCT_ID { 0x17C375BA, 0xE7B7481F, 0xAF7D1577, 0xFAC6CD4A }
	TAG_STRUCT(
		cache_file_zone_resource_visit_node_block_struct,
		"cache_file_zone_resource_visit_node_block_struct",
		"cache_file_zone_resource_visit_node_block_struct",
		"s_cache_file_zone_resource_visit_node_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_EXIST_IN_CACHE_BUILD,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_ZONE_RESOURCE_VISIT_NODE_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "parent tag", &cache_file_resource_owner_block_block },
		FIELD_PAD("sdfasfas", 2),
		{ _field_block, "children", &cache_file_zone_resource_visit_node_link_block_block },
		{ _field_terminator }
	};

	#define CACHE_FILE_ZONE_RESOURCE_VISIT_NODE_LINK_BLOCK_ID { 0x22319003, 0x8D884426, 0xAF2ED443, 0xE9B58033 }
	TAG_STRUCT(
		cache_file_zone_resource_visit_node_link_block,
		"cache_file_zone_resource_visit_node_link_block",
		"cache_file_zone_resource_visit_node_link_block",
		"s_cache_file_zone_resource_visit_node_link_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_ZONE_RESOURCE_VISIT_NODE_LINK_BLOCK_ID)
	{
		{ _field_short_block_index, "child tag", &cache_file_zone_resource_visit_node_block_block },
		{ _field_terminator }
	};

	#define CACHE_FILE_ZONE_SET_ZONE_USAGE_BLOCK_ID { 0xFA90B323, 0xCE6D4D2B, 0xA8722EA8, 0xB3830975 }
	TAG_STRUCT(
		cache_file_zone_set_zone_usage_block,
		"cache_file_zone_set_zone_usage_block",
		"cache_file_zone_set_zone_usage_block",
		"s_cache_file_zone_set_zone_usage_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CACHE_FILE_ZONE_SET_ZONE_USAGE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_flags, "flags", &scenario_zone_set_flags_definition },
		{ _field_long_block_flags, "required bsp zones", &cache_file_bsp_zone_block_block },
		{ _field_long_block_flags, "expected touched bsp zones", &cache_file_bsp_zone_block_block },
		{ _field_qword_integer, "required designer zones" },
		{ _field_qword_integer, "expected designer zones" },
		{ _field_long_block_flags, "required cinematic zones", &cache_file_cinematic_zone_block_block },
		{ _field_long_block_index, "hint previous zone set", &cache_file_zone_set_zone_usage_block_block },
		{ _field_terminator }
	};

	STRINGS(scenario_zone_set_flags_definition)
	{
		"begin loading next level",
		"debug purposes only",
		"interal zone set*!",
		"disable sky clearing",
		"override sky clear color"
	};
	STRING_LIST(scenario_zone_set_flags_definition, scenario_zone_set_flags_definition_strings, _countof(scenario_zone_set_flags_definition_strings));

	#define CAMERA_BLOCK_ID { 0x5544FB06, 0xF3D04476, 0xA51F6257, 0x6BA634E2 }
	TAG_STRUCT(
		camera_block,
		"camera_block",
		"camera_block",
		"s_camera_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_BLOCK_ID)
	{
		{ _field_tag_reference, "default unit camera track", &camera_track_group_reference },
		FIELD_EXPLANATION("SANDBOX", nullptr),
		{ _field_struct, "pitch to vertical offset", &scalar_function_named_struct },
		FIELD_EXPLANATION("CAMERA UNIVERSALS", nullptr),
		{ _field_real, "field of view", nullptr, "degrees" },
		{ _field_real, "yaw scale" },
		{ _field_real, "pitch scale" },
		{ _field_real, "forward scale" },
		{ _field_real, "side scale" },
		{ _field_real, "up scale" },
		FIELD_EXPLANATION("DEAD CAMERA", nullptr),
		{ _field_real, "transition time", "time it takes for the camera to move from the initial distance to the final distance", "seconds" },
		{ _field_real, "falling death transition time", "time it takes for the camera to move to its final position during a falling death", "seconds" },
		{ _field_real, "initial distance", "on the first frame after death, this is how far out of the body the camera will be", "wu" },
		{ _field_real, "final distance", "how far from the body the camera will settle", "wu" },
		{ _field_real, "dead cam z offset", "how far above the body the camera focuses on", "wu" },
		{ _field_real, "dead cam maximum elevation", "the highest angle the camera can raise to (prevents it from flipping over the vertical axis)", "radians" },
		{ _field_real, "dead cam movement delay", "delay in tracking the killer", "seconds" },
		{ _field_real, "time_to_auto_switch_to_orbiting", "how long the death camera lasts before auto-switching to orbiting camera", "seconds" },
		{ _field_real, "ignore_stick_time", "how long the death camera ignores stick inputs and keeps turning towards the killer (should be non-zero because user could have died while running or looking around)", "seconds" },
		{ _field_real, "ignore_button_time", "how long the death camera ignores shoulder button inputs and keeps turning towards the killer", "seconds" },
		{ _field_real, "dead camera minimum falling velocity", "minimum velocity to switch to fell to death behavior (when biped is not actually falling to death)" },
		FIELD_EXPLANATION("FLYING CAMERA", nullptr),
		{ _field_real, "maximum boost speed", "the scaling factor for the left stick when the left trigger is fully depressed" },
		{ _field_real, "time to maximum_boost", "seconds. while pegging boost, time to reach maximum speed" },
		{ _field_short_enum, "boost function", &global_transition_functions_enum },
		FIELD_PAD("hoist", 2),
		{ _field_real, "zoomed field of view", "field of view when zoomed", "degrees" },
		{ _field_real, "zoomed look speed", "scaling factor for look speed when zoomed" },
		{ _field_real, "bounding sphere radius", "radius of sphere for collision", "wu" },
		{ _field_real, "flying cam movement delay", "how quickly the camera responds to the user's input", "seconds" },
		{ _field_real, "zoom transition time", "how long it takes to zoom in or out", "seconds" },
		{ _field_real, "vertical movement time to max speed" },
		{ _field_short_enum, "vertical movement function", &global_transition_functions_enum },
		FIELD_PAD("moist", 2),
		{ _field_real, "survival switch time", "how long it takes in survival mode before switching to flying camera", "seconds" },
		FIELD_EXPLANATION("ORBITING CAMERA", nullptr),
		{ _field_real, "minimum distance", nullptr, "wu" },
		{ _field_real, "maximum distance", nullptr, "wu" },
		{ _field_real, "orbit cam movement delay", "how quickly the camera responds to the user's input", "seconds" },
		{ _field_real, "orbit cam z offset", "how far above the object's root node to position the camera's focus point", "wu" },
		{ _field_real, "orbit cam minimum elevation", "lowest angle the camera can be moved to", "radians" },
		{ _field_real, "orbit cam maximum elevation", "highest angle the camera can be moved to", "radians" },
		FIELD_EXPLANATION("SAVED FILMS", nullptr),
		{ _field_real, "max playback speed", "how fast the film plays when the trigger is fully depressed" },
		{ _field_real, "fade out time", "how long it takes for the screen to fade out when rewinding", "seconds" },
		{ _field_real, "fade in time", "see above", "seconds" },
		FIELD_EXPLANATION("IN GAME", nullptr),
		{ _field_real, "enter vehicle transition time", "how long it takes the camera to move from first to third person when entering a vehicle", "seconds" },
		{ _field_real, "exit vehicle transition time", "see above", "seconds" },
		FIELD_EXPLANATION("CAMERA OBSTRUCTION", nullptr),
		{ _field_struct, "obstruction", &camera_obstruction_struct },
		{ _field_terminator }
	};

	TAG_REFERENCE(camera_track_group_reference, CAMERA_TRACK_TAG);

	STRINGS(global_transition_functions_enum)
	{
		"linear",
		"early",
		"very early",
		"late",
		"very late",
		"cosine",
		"one",
		"zero"
	};
	STRING_LIST(global_transition_functions_enum, global_transition_functions_enum_strings, _countof(global_transition_functions_enum_strings));

	#define CAMERA_FRAME_CONSTANT_STRUCT_ID { 0x12ABA01E, 0x9C34EC1, 0x9BEE2E9, 0xE1741C6A }
	TAG_STRUCT(
		camera_frame_constant_struct,
		"camera_frame_constant_struct",
		"camera_frame_constant_struct",
		"s_camera_frame_constant_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FRAME_CONSTANT_STRUCT_ID)
	{
		{ _field_real, "focal length" },
		{ _field_long_integer, "depth of field" },
		{ _field_real, "near focal plane distance" },
		{ _field_real, "far focal plane distance" },
		{ _field_real, "near focal depth" },
		{ _field_real, "far focal depth" },
		{ _field_real, "near blur amount" },
		{ _field_real, "far blur amount" },
		{ _field_terminator }
	};

	#define CAMERA_FRAME_DYNAMIC_STRUCT_ID { 0xC705DD64, 0x32F8496A, 0x824ED19E, 0x17E1B595 }
	TAG_STRUCT(
		camera_frame_dynamic_struct,
		"camera_frame_dynamic_struct",
		"camera_frame_dynamic_struct",
		"s_camera_frame_dynamic_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FRAME_DYNAMIC_STRUCT_ID)
	{
		{ _field_real_point_3d, "camera position" },
		{ _field_real_vector_3d, "camera forward" },
		{ _field_real_vector_3d, "camera up" },
		{ _field_terminator }
	};

	#define CAMERA_FRAME_STRUCT_ID { 0x24513EF2, 0x4F2E45C3, 0x8BDA4BB, 0xE783FA56 }
	TAG_STRUCT(
		camera_frame_struct,
		"camera_frame_struct",
		"camera_frame_struct",
		"s_camera_frame_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FRAME_STRUCT_ID)
	{
		{ _field_struct, "dynamic data", &camera_frame_dynamic_struct },
		{ _field_struct, "constant data", &camera_frame_constant_struct },
		{ _field_terminator }
	};

	#define CAMERA_FX_BLING_ANGLE_STRUCT_ID { 0x31CE204D, 0x92C4581, 0xA500B810, 0x18D31B80 }
	TAG_STRUCT(
		camera_fx_bling_angle_struct,
		"camera_fx_bling_angle_struct",
		"camera_fx_bling_angle_struct",
		"s_camera_fx_bling_angle_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_BLING_ANGLE_STRUCT_ID)
	{
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_no_auto_adjust },
		FIELD_PAD("ILJS", 2),
		{ _field_real, "bling angle" },
		{ _field_real, "maximum change" },
		{ _field_real, "blend speed (0-1)" },
		{ _field_terminator }
	};

	STRINGS(camera_fx_parameter_flags_no_auto_adjust)
	{
		"use default (ignore these values)",
		"maximum change is relative",
		"(unused)!",
		"bit3!",
		"fixed!",
		"(unused2)!",
		"fixed2!"
	};
	STRING_LIST(camera_fx_parameter_flags_no_auto_adjust, camera_fx_parameter_flags_no_auto_adjust_strings, _countof(camera_fx_parameter_flags_no_auto_adjust_strings));

	#define CAMERA_FX_BLING_COUNT_STRUCT_ID { 0x8457D09C, 0xCB004AEB, 0x87C29399, 0xF221FEF5 }
	TAG_STRUCT(
		camera_fx_bling_count_struct,
		"camera_fx_bling_count_struct",
		"camera_fx_bling_count_struct",
		"s_camera_fx_bling_count_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_BLING_COUNT_STRUCT_ID)
	{
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_bling_spikes },
		{ _field_short_integer, "bling spikes" },
		{ _field_terminator }
	};

	STRINGS(camera_fx_parameter_flags_bling_spikes)
	{
		"use default (ignore these values)",
		"maximum change is relative",
		"(unused)!",
		"double sided bling",
		"fixed!",
		"(unused2)!",
		"fixed2!"
	};
	STRING_LIST(camera_fx_parameter_flags_bling_spikes, camera_fx_parameter_flags_bling_spikes_strings, _countof(camera_fx_parameter_flags_bling_spikes_strings));

	#define CAMERA_FX_BLING_INTENSITY_STRUCT_ID { 0xE8F1A4E1, 0xC00F4456, 0x8EE2967B, 0x6D8FA42B }
	TAG_STRUCT(
		camera_fx_bling_intensity_struct,
		"camera_fx_bling_intensity_struct",
		"camera_fx_bling_intensity_struct",
		"s_camera_fx_bling_intensity_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_BLING_INTENSITY_STRUCT_ID)
	{
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_no_auto_adjust },
		FIELD_PAD("QREWRER", 2),
		{ _field_real, "bling intensity" },
		{ _field_real, "maximum change" },
		{ _field_real, "blend speed (0-1)" },
		{ _field_terminator }
	};

	#define CAMERA_FX_BLING_SIZE_STRUCT_ID { 0xF54F8BED, 0xE5544B4E, 0x926E406D, 0xEFE013B9 }
	TAG_STRUCT(
		camera_fx_bling_size_struct,
		"camera_fx_bling_size_struct",
		"camera_fx_bling_size_struct",
		"s_camera_fx_bling_size_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_BLING_SIZE_STRUCT_ID)
	{
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_no_auto_adjust },
		FIELD_PAD("LSDFPO", 2),
		{ _field_real, "bling length" },
		{ _field_real, "maximum change" },
		{ _field_real, "blend speed (0-1)" },
		{ _field_terminator }
	};

	#define CAMERA_FX_BLOOM_HIGHLIGHT_STRUCT_ID { 0x5C28BDB2, 0x7AA74136, 0x95D02E4D, 0x477781EA }
	TAG_STRUCT(
		camera_fx_bloom_highlight_struct,
		"camera_fx_bloom_highlight_struct",
		"camera_fx_bloom_highlight_struct",
		"s_camera_fx_bloom_highlight_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_BLOOM_HIGHLIGHT_STRUCT_ID)
	{
		FIELD_EXPLANATION("HIGHLIGHT BLOOM", "These parameters control bloom off the highlights (really bright stuff)"),
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_no_auto_adjust },
		FIELD_PAD("LOTPRER", 2),
		{ _field_real, "highlight bloom", MAKE_ALT_NAMES("bloom point") },
		{ _field_real, "maximum change" },
		{ _field_real, "blend speed (0-1)" },
		{ _field_terminator }
	};

	#define CAMERA_FX_BLOOM_INHERENT_STRUCT_ID { 0x1889C932, 0xA56D48C8, 0xB0B3D7D4, 0x1DCD5F7 }
	TAG_STRUCT(
		camera_fx_bloom_inherent_struct,
		"camera_fx_bloom_inherent_struct",
		"camera_fx_bloom_inherent_struct",
		"s_camera_fx_bloom_inherent_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_BLOOM_INHERENT_STRUCT_ID)
	{
		FIELD_EXPLANATION("INHERENT BLOOM", "These parameters control bloom off everything (bright and dark)"),
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_no_auto_adjust },
		FIELD_PAD("ERIRLE", 2),
		{ _field_real, "inherent bloom" },
		{ _field_real, "maximum change" },
		{ _field_real, "blend speed (0-1)" },
		{ _field_terminator }
	};

	#define CAMERA_FX_BLOOM_INTENSITY_STRUCT_ID { 0xA87763D2, 0xF5B240F3, 0xA22524B0, 0xF5DFD719 }
	TAG_STRUCT(
		camera_fx_bloom_intensity_struct,
		"camera_fx_bloom_intensity_struct",
		"camera_fx_bloom_intensity_struct",
		"s_camera_fx_bloom_intensity_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_BLOOM_INTENSITY_STRUCT_ID)
	{
		FIELD_EXPLANATION("BLOOM INTENSITY", "These parameters control how bright the bloom is, relative to the underlying scene"),
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_no_auto_adjust },
		FIELD_PAD("SEMIFMD", 2),
		{ _field_real, "bloom intensity" },
		{ _field_real, "maximum change" },
		{ _field_real, "blend speed (0-1)" },
		{ _field_terminator }
	};

	#define CAMERA_FX_BLOOM_LARGE_COLOR_STRUCT_ID { 0x3318D9F0, 0x2EC4CD5, 0xADE89517, 0x292B6B5 }
	TAG_STRUCT(
		camera_fx_bloom_large_color_struct,
		"camera_fx_bloom_large_color_struct",
		"camera_fx_bloom_large_color_struct",
		"s_camera_fx_bloom_large_color_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_BLOOM_LARGE_COLOR_STRUCT_ID)
	{
		FIELD_EXPLANATION("BLOOM LARGE COLOR", "These parameters control the color of the large bloom"),
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_no_auto_adjust },
		FIELD_PAD("KKROFI", 2),
		{ _field_real_rgb_color, "large color" },
		{ _field_terminator }
	};

	#define CAMERA_FX_BLOOM_MEDIUM_COLOR_STRUCT_ID { 0xA8C89B4A, 0x156A41DD, 0xBCA2746E, 0x49C59B4A }
	TAG_STRUCT(
		camera_fx_bloom_medium_color_struct,
		"camera_fx_bloom_medium_color_struct",
		"camera_fx_bloom_medium_color_struct",
		"s_camera_fx_bloom_medium_color_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_BLOOM_MEDIUM_COLOR_STRUCT_ID)
	{
		FIELD_EXPLANATION("BLOOM MEDIUM COLOR", "These parameters control the color of the medium bloom"),
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_no_auto_adjust },
		FIELD_PAD("LEORPP", 2),
		{ _field_real_rgb_color, "medium color" },
		{ _field_terminator }
	};

	#define CAMERA_FX_BLOOM_SELF_ILLUM_STRUCT_ID { 0xC4818F7F, 0xC84D4C8F, 0x949CB9BD, 0x418899B7 }
	TAG_STRUCT(
		camera_fx_bloom_self_illum_struct,
		"camera_fx_bloom_self_illum_struct",
		"camera_fx_bloom_self_illum_struct",
		"s_camera_fx_bloom_self_illum_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_BLOOM_SELF_ILLUM_STRUCT_ID)
	{
		FIELD_EXPLANATION("SELF-ILLUM BLOOM", "These parameters control off of self-illum pixels"),
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_no_auto_adjust },
		FIELD_PAD("ERIRLE", 2),
		{ _field_real, "self-illum bloom bloom" },
		{ _field_real, "maximum change" },
		{ _field_real, "blend speed (0-1)" },
		{ _field_terminator }
	};

	#define CAMERA_FX_BLOOM_SMALL_COLOR_STRUCT_ID { 0x36F650D6, 0x8BC24EAA, 0x80D95DD3, 0xC20AACC8 }
	TAG_STRUCT(
		camera_fx_bloom_small_color_struct,
		"camera_fx_bloom_small_color_struct",
		"camera_fx_bloom_small_color_struct",
		"s_camera_fx_bloom_small_color_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_BLOOM_SMALL_COLOR_STRUCT_ID)
	{
		FIELD_EXPLANATION("BLOOM SMALL COLOR", "These parameters control the color of the small bloom"),
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_no_auto_adjust },
		FIELD_PAD("JSIRWSFGAOD", 2),
		{ _field_real_rgb_color, "small color" },
		{ _field_terminator }
	};

	#define CAMERA_FX_COLOR_GRADING_STRUCT_ID { 0x20D7EB22, 0x88C04602, 0xBEB7FEF7, 0x42178564 }
	TAG_STRUCT(
		camera_fx_color_grading_struct,
		"camera_fx_color_grading_struct",
		"camera_fx_color_grading_struct",
		"s_camera_fx_color_grading_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_COLOR_GRADING_STRUCT_ID)
	{
		FIELD_EXPLANATION("Color Grading", "set the color grading texture"),
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_no_auto_adjust },
		FIELD_PAD("SKHFDNV", 2),
		{ _field_tag_reference, "color grading texture", &bitmap_group_reference$2 },
		{ _field_terminator }
	};

	#define CAMERA_FX_EXPOSURE_SENSITIVITY_STRUCT_ID { 0xB2285D8B, 0x80E54585, 0xA4116DDE, 0x5A2A16B5 }
	TAG_STRUCT(
		camera_fx_exposure_sensitivity_struct,
		"camera_fx_exposure_sensitivity_struct",
		"camera_fx_exposure_sensitivity_struct",
		"s_camera_fx_exposure_sensitivity_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_EXPOSURE_SENSITIVITY_STRUCT_ID)
	{
		FIELD_EXPLANATION("AUTO EXPOSURE SENSITIVITY", "How sensitive auto exposure is to small bright patches on the screen (like the sun)"),
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_no_auto_adjust },
		FIELD_PAD("MAKAMAKAHEY", 2),
		{ _field_real, "sensitivity (0-1)" },
		{ _field_terminator }
	};

	#define CAMERA_FX_EXPOSURE_STRUCT_ID { 0x1FBECC29, 0x38C74B70, 0xAF139847, 0x3C5FD67B }
	TAG_STRUCT(
		camera_fx_exposure_struct,
		"camera_fx_exposure_struct",
		"camera_fx_exposure_struct",
		"s_camera_fx_exposure_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_EXPOSURE_STRUCT_ID)
	{
		FIELD_IFP_BEGIN(),
		FIELD_EXPLANATION("EXPOSURE", "Controls the brightness of the scene, like exposure time on your camera.\nThe actual exposure always blends towards the target exposure.\nWith auto-exposure on, the target exposure is calculated relative to the brightness of what is on screen.\n"),
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_auto_adjust },
		FIELD_PAD("MKRGRF", 2),
		{ _field_real, "exposure", "the target exposure (ONLY USED WHEN AUTO-EXPOSURE IS OFF)", "stops" },
		{ _field_real, "maximum change", "the maximum allowed change in exposure between frames", "stops" },
		{ _field_real, "blend speed (0-1)", "1 is instantaneous, 0.01 is a good speed, 0.001 is slower", "percent per frame" },
		{ _field_real, "minimum", "the absolute target exposure is clamped to this range", "stops" },
		{ _field_real, "maximum", "the absolute target exposure is clamped to this range", "stops" },
		FIELD_IFP_END(),
		{ _field_real, "auto-exposure screen brightness", "how bright you want the screen to be - auto-exposure will make it happen", nullptr, "[0.0001-1]" },
		FIELD_IFP_BEGIN(),
		{ _field_real, "auto-exposure delay", "how long to wait before auto-exposure kicks in to adjust the exposure", nullptr, "[0.1-1]seconds" },
		FIELD_IFP_END(),
		{ _field_terminator }
	};

	STRINGS(camera_fx_parameter_flags_auto_adjust)
	{
		"use default (ignore these values)",
		"maximum change is relative",
		"auto-adjust target",
		"bit3!",
		"fixed!",
		"(unused2)!",
		"fixed2!"
	};
	STRING_LIST(camera_fx_parameter_flags_auto_adjust, camera_fx_parameter_flags_auto_adjust_strings, _countof(camera_fx_parameter_flags_auto_adjust_strings));

	#define CAMERA_FX_FILMIC_TONE_CURVE_STRUCT_ID { 0x50612BFA, 0x4C8940DC, 0x9911F845, 0x5C3B5FB1 }
	TAG_STRUCT(
		camera_fx_filmic_tone_curve_struct,
		"camera_fx_filmic_tone_curve_struct",
		"camera_fx_filmic_tone_curve_struct",
		"s_camera_fx_filmic_tone_curve_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_FILMIC_TONE_CURVE_STRUCT_ID)
	{
		FIELD_EXPLANATION("Filmic Tone Curve", "set the values for the filmic tone curve"),
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_enabled },
		FIELD_PAD("MKRGRF", 2),
		{ _field_real, "shoulder strength", "How intense the shoulder is" },
		{ _field_real, "linear strength", "How intense the linear portion is" },
		{ _field_real, "linear angle", "Angle of linear portion of curve" },
		{ _field_real, "toe strength", "How intense the toe is" },
		{ _field_real, "toe numerator", "Numerator of toe slope" },
		{ _field_real, "toe denominator", "Denominator of toe slope" },
		{ _field_real, "linear white point", "The white point in linear space" },
		{ _field_terminator }
	};

	STRINGS(camera_fx_parameter_flags_enabled)
	{
		"use default (ignore these values)",
		"maximum change is relative",
		"(unused)!",
		"bit3!",
		"fixed!",
		"enabled",
		"fixed2!"
	};
	STRING_LIST(camera_fx_parameter_flags_enabled, camera_fx_parameter_flags_enabled_strings, _countof(camera_fx_parameter_flags_enabled_strings));

	#define CAMERA_FX_SELF_ILLUM_PREFERRED_STRUCT_ID { 0xE684AD74, 0xC6D54D23, 0x996036C6, 0xC011911B }
	TAG_STRUCT(
		camera_fx_self_illum_preferred_struct,
		"camera_fx_self_illum_preferred_struct",
		"camera_fx_self_illum_preferred_struct",
		"s_camera_fx_self_illum_preferred_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_SELF_ILLUM_PREFERRED_STRUCT_ID)
	{
		FIELD_EXPLANATION("SELF ILLUM EXPOSURE", "These parameters control the self-illumination exposure\npreferred is the preferred exposure, and scale controls\nhow much it varies from the preferred exposure"),
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_no_auto_adjust },
		FIELD_PAD("JJFJFJKE", 2),
		{ _field_real, "preferred exposure", "the preferred exposure for self illum", "stops" },
		{ _field_real, "maximum change" },
		{ _field_real, "blend speed (0-1)" },
		{ _field_terminator }
	};

	#define CAMERA_FX_SELF_ILLUM_SCALE_STRUCT_ID { 0x4545C700, 0x22624FE4, 0xB9FDE3E7, 0x1696B87B }
	TAG_STRUCT(
		camera_fx_self_illum_scale_struct,
		"camera_fx_self_illum_scale_struct",
		"camera_fx_self_illum_scale_struct",
		"s_camera_fx_self_illum_scale_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_SELF_ILLUM_SCALE_STRUCT_ID)
	{
		FIELD_EXPLANATION("SELF ILLUM CHANGE", "How much self illum exposure is allowed to change\n0 means no change at all, 1 means it will\nequal the normal exposure"),
		{ _field_word_flags, "flags", &camera_fx_parameter_flags_no_auto_adjust },
		FIELD_PAD("WOOGATCHOU", 2),
		{ _field_real, "exposure change", "how much the self illum is allowed to change, as a percentage of the normal exposure change", nullptr, "[0-1]" },
		{ _field_real, "maximum change" },
		{ _field_real, "blend speed (0-1)" },
		{ _field_terminator }
	};

	#define CAMERA_FX_SETTINGS_BLOCK_ID { 0xC7122CD7, 0x3134944, 0xAAB3E3D9, 0xBFBE70FD }
	TAG_STRUCT(
		camera_fx_settings_block,
		"camera_fx_settings_block",
		"camera_fx_settings_block",
		"s_camera_fx_settings_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_FX_SETTINGS_BLOCK_ID)
	{
		FIELD_IFP_BEGIN(),
		{ _field_struct, "exposure", &camera_fx_exposure_struct },
		{ _field_struct, "auto_exposure_sensitivity", &camera_fx_exposure_sensitivity_struct },
		{ _field_struct, "bloom_highlight", MAKE_ALT_NAMES("bloom_point"), &camera_fx_bloom_highlight_struct },
		{ _field_struct, "bloom_inherent", &camera_fx_bloom_inherent_struct },
		{ _field_struct, "bloom_self_illum", &camera_fx_bloom_self_illum_struct },
		{ _field_struct, "bloom_intensity", &camera_fx_bloom_intensity_struct },
		{ _field_struct, "bloom_large_color", &camera_fx_bloom_large_color_struct },
		{ _field_struct, "bloom_medium_color", &camera_fx_bloom_medium_color_struct },
		{ _field_struct, "bloom_small_color", &camera_fx_bloom_small_color_struct },
		{ _field_struct, "bling_intensity", &camera_fx_bling_intensity_struct },
		{ _field_struct, "bling_size", &camera_fx_bling_size_struct },
		{ _field_struct, "bling_angle", &camera_fx_bling_angle_struct },
		{ _field_struct, "bling_count", &camera_fx_bling_count_struct },
		{ _field_struct, "self_illum_preferred", &camera_fx_self_illum_preferred_struct },
		{ _field_struct, "self_illum_scale", &camera_fx_self_illum_scale_struct },
		{ _field_struct, "color_grading", &camera_fx_color_grading_struct },
		{ _field_struct, "filmic_tone_curve", &camera_fx_filmic_tone_curve_struct },
		FIELD_IFP_END(),
		{ _field_terminator }
	};

	#define CAMERA_IMPULSE_STRUCT_ID { 0xE55AD1CC, 0x22484F82, 0xAAEE9A87, 0xE60B4CDF }
	TAG_STRUCT(
		camera_impulse_struct,
		"camera_impulse_struct",
		"camera_impulse_struct",
		"s_camera_impulse_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_IMPULSE_STRUCT_ID)
	{
		{ _field_real, "impulse duration", nullptr, "seconds" },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "mapping", &mapping_function }, // structure_version:2
		{ _field_angle, "rotation", nullptr, "degrees" },
		{ _field_real, "pushback", nullptr, "world units" },
		{ _field_real_bounds, "jitter", nullptr, "world units" },
		{ _field_terminator }
	};

	#define CAMERA_OBSTRUCTION_STRUCT_ID { 0x3A9D370F, 0x57744B3B, 0x863CAE2F, 0x93F2A8CC }
	TAG_STRUCT(
		camera_obstruction_struct,
		"camera_obstruction_struct",
		"camera_obstruction_struct",
		"s_camera_obstruction_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_OBSTRUCTION_STRUCT_ID)
	{
		{ _field_real_fraction, "cylinder fraction", "controls how far from the focus point the outer raycasts start.  0 == cone, 1 == cylinder" },
		{ _field_angle, "obstruction test angle", "how wide of a cone to test", "degrees" },
		{ _field_real, "obstruction max inward accel", "how quickly the camera moves inward when it anticipates a collision", "1.0/s/s" },
		{ _field_real, "obstruction max outward accel", "how quickly the camera returns to a normal position when its anticipated distance is further than its current", "1.0/s/s" },
		{ _field_real, "obstruction max velocity", "maximum speed the camera can move", "1.0/s" },
		{ _field_real, "obstruction return delay", "when the camera wants to start moving back out, wait this long before doing so", "s" },
		{ _field_terminator }
	};

	#define CAMERA_SHAKE_STRUCT_ID { 0x21432949, 0x6E214B80, 0x8BD2D31B, 0x44AC9FAE }
	TAG_STRUCT(
		camera_shake_struct,
		"camera_shake_struct",
		"camera_shake_struct",
		"s_camera_shake_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_SHAKE_STRUCT_ID)
	{
		{ _field_real, "shake duration", "the effect will last for this duration.", "seconds" },
		FIELD_EXPLANATION("procedural camera shake", nullptr),
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "mapping", &mapping_function }, // structure_version:2
		{ _field_real, "random translation", "random translation in all directions", "world units" },
		{ _field_angle, "random rotation", "random rotation in all directions", "degrees" },
		{ _field_real, "wobble function period", nullptr, "seconds" },
		{ _field_real_fraction, "wobble weight", "a value of 0.0 signifies that the wobble function has no effect; a value of 1.0 the wobble function completely scales the translational\n and rotational magnitudes.  The less the weight, the less the effect wobble has." },
		{ _field_short_enum, "wobble function", "a function to perturb the effect's behavior over time", &global_periodic_functions_enum },
		FIELD_EXPLANATION("animated camera shake", nullptr),
		{ _field_char_enum, "animated shake playback", &animated_camera_shake_playback_type_enum },
		{ _field_char_enum, "animated shake weight", &animated_camera_shake_weight_type_enum },
		{ _field_tag_reference, "animation graph", &model_animation_graph_group_reference },
		{ _field_string_id, "animation name" },
		{ _field_real, "zoom penalty linear ", "multiplier penalty that increases linearly with zoom over 1" },
		{ _field_real, "zoom penalty squareroot ", "multiplier penalty that increases with square root of zoom over 1" },
		{ _field_terminator }
	};

	STRINGS(global_periodic_functions_enum)
	{
		"one",
		"zero",
		"cosine",
		"cosine (variable period)",
		"diagonal wave",
		"diagonal wave (variable period)",
		"slide",
		"slide (variable period)",
		"noise",
		"jitter",
		"wander",
		"spark"
	};
	STRING_LIST(global_periodic_functions_enum, global_periodic_functions_enum_strings, _countof(global_periodic_functions_enum_strings));

	STRINGS(animated_camera_shake_playback_type_enum)
	{
		"looping",
		"frame ratio"
	};
	STRING_LIST(animated_camera_shake_playback_type_enum, animated_camera_shake_playback_type_enum_strings, _countof(animated_camera_shake_playback_type_enum_strings));

	STRINGS(animated_camera_shake_weight_type_enum)
	{
		"effect scale",
		"full"
	};
	STRING_LIST(animated_camera_shake_weight_type_enum, animated_camera_shake_weight_type_enum_strings, _countof(animated_camera_shake_weight_type_enum_strings));

	TAG_REFERENCE(model_animation_graph_group_reference, MODEL_ANIMATION_GRAPH_TAG);

	#define CAMERA_SHAKE_STRUCT_DEFINITION_ID { 0x85B81D32, 0x7C1249A5, 0x863CDDB2, 0xA7052723 }
	TAG_STRUCT(
		camera_shake_struct_definition,
		"camera_shake_struct_definition",
		"camera_shake_struct_definition",
		"s_camera_shake_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_SHAKE_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("camera impulse", nullptr),
		{ _field_struct, "camera impulse", &camera_impulse_struct },
		FIELD_EXPLANATION("camera shake", nullptr),
		{ _field_struct, "camera shake", &camera_shake_struct },
		{ _field_terminator }
	};

	#define CAMERA_TRACK_CONTROL_POINT_BLOCK_ID { 0x549FEEF0, 0xCAD54130, 0x9685AB6F, 0x75D07A1F }
	TAG_STRUCT(
		camera_track_control_point_block,
		"camera_track_control_point_block",
		"camera_track_control_point_block",
		"s_camera_track_control_point_block",
		SET_UNKNOWN4 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_TRACK_CONTROL_POINT_BLOCK_ID)
	{
		{ _field_real_vector_3d, "position" },
		{ _field_real_quaternion, "orientation" },
		FIELD_USELESS_PAD("value", 32),
		{ _field_terminator }
	};

	#define CAMERA_TRACK_STRUCT_DEFINITION_ID { 0x3215F817, 0x264E4A98, 0x8165BFA1, 0xAACA3E6F }
	TAG_STRUCT(
		camera_track_struct_definition,
		"camera_track_struct_definition",
		"camera_track_struct_definition",
		"s_camera_track_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMERA_TRACK_STRUCT_DEFINITION_ID)
	{
		{ _field_long_flags, "flags", &camera_track_flags },
		{ _field_block, "control points", &camera_track_control_point_block_block },
		FIELD_USELESS_PAD("value", 32),
		{ _field_terminator }
	};

	STRING_LIST(camera_track_flags, empty_string_list, 0);

	#define CAMO_SCALAR_FUNCTION_STRUCT_ID { 0xD6E8140F, 0xB16B4278, 0x9B69A726, 0x95B494AC }
	TAG_STRUCT(
		camo_scalar_function_struct,
		"camo_scalar_function_struct",
		"camo_scalar_function_struct",
		"s_camo_scalar_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMO_SCALAR_FUNCTION_STRUCT_ID)
	{
		{ _field_string_id, "Input Variable", _field_id_function_input_scalar },
		{ _field_string_id, "Range Variable", _field_id_function_input_range },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define CAMO_STRUCT_DEFINITION_ID { 0xFD484E57, 0xEAA0419E, 0x95BA9341, 0xED21A3D5 }
	TAG_STRUCT(
		camo_struct_definition,
		"camo_struct_definition",
		"camo_struct_definition",
		"s_camo_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMO_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Active Camo Controls", nullptr),
		{ _field_word_flags, "Flags", &camo_flags },
		FIELD_PAD("KKHKKHKKL", 2),
		{ _field_struct, "Active Camo Amount", &camo_scalar_function_struct },
		{ _field_struct, "Shadow Amount", &camo_scalar_function_struct },
		{ _field_terminator }
	};

	STRINGS(camo_flags)
	{
		"also apply to object children"
	};
	STRING_LIST(camo_flags, camo_flags_strings, _countof(camo_flags_strings));

	#define CAMPAIGN_METAGAME_BUCKET_BLOCK_ID { 0x63D7EE66, 0xCFE44D6F, 0xBC5A8E71, 0x7128E562 }
	TAG_STRUCT(
		campaign_metagame_bucket_block,
		"campaign_metagame_bucket_block",
		"campaign_metagame_bucket_block",
		"s_campaign_metagame_bucket_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMPAIGN_METAGAME_BUCKET_BLOCK_ID)
	{
		{ _field_byte_flags, "flags", &campaign_metagame_bucket_flags },
		{ _field_char_enum, "type", &campaign_metagame_bucket_type_enum },
		{ _field_char_enum, "class", &campaign_metagame_bucket_class_enum },
		FIELD_PAD("pad0", 1),
		{ _field_short_integer, "point count" },
		FIELD_PAD("pad1", 2),
		{ _field_terminator }
	};

	STRINGS(campaign_metagame_bucket_flags)
	{
		"only counts with riders"
	};
	STRING_LIST(campaign_metagame_bucket_flags, campaign_metagame_bucket_flags_strings, _countof(campaign_metagame_bucket_flags_strings));

	STRINGS(campaign_metagame_bucket_type_enum)
	{
		"brute",
		"grunt",
		"jackel",
		"skirmisher",
		"marine",
		"spartan",
		"bugger",
		"hunter",
		"flood_infection",
		"flood_carrier",
		"flood_combat",
		"flood_pure",
		"sentinel",
		"elite",
		"engineer",
		"mule",
		"turret",
		"mongoose",
		"warthog",
		"scorpion",
		"hornet",
		"pelican",
		"revenant",
		"seraph",
		"shade",
		"watchtower",
		"ghost",
		"chopper",
		"mauler",
		"wraith",
		"banshee",
		"phantom",
		"scarab",
		"guntower",
		"tuning_fork",
		"broadsword",
		"mammoth",
		"lich",
		"mantis",
		"wasp",
		"phaeton",
		"bishop",
		"knight",
		"pawn"
	};
	STRING_LIST(campaign_metagame_bucket_type_enum, campaign_metagame_bucket_type_enum_strings, _countof(campaign_metagame_bucket_type_enum_strings));

	STRINGS(campaign_metagame_bucket_class_enum)
	{
		"infantry",
		"leader",
		"hero",
		"specialist",
		"light vehicle",
		"heavy vehicle",
		"giant vehicle",
		"standard vehicle"
	};
	STRING_LIST(campaign_metagame_bucket_class_enum, campaign_metagame_bucket_class_enum_strings, _countof(campaign_metagame_bucket_class_enum_strings));

	#define CAMPAIGN_METAGAME_DIFFICULTY_SCALE_BLOCK_ID { 0x4C1DFA8F, 0x201E4EAA, 0xAD8B851B, 0x7D67E295 }
	TAG_STRUCT(
		campaign_metagame_difficulty_scale_block,
		"campaign_metagame_difficulty_scale_block",
		"campaign_metagame_difficulty_scale_block",
		"s_campaign_metagame_difficulty_scale_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMPAIGN_METAGAME_DIFFICULTY_SCALE_BLOCK_ID)
	{
		{ _field_real, "difficulty multiplier" },
		{ _field_terminator }
	};

	#define CAMPAIGN_METAGAME_GLOBALS_BLOCK_ID { 0x84D6CB38, 0x9F7147BA, 0x80478800, 0x26D5C }
	TAG_STRUCT(
		campaign_metagame_globals_block,
		"campaign_metagame_globals_block",
		"campaign_metagame_globals_block",
		"s_campaign_metagame_globals_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMPAIGN_METAGAME_GLOBALS_BLOCK_ID)
	{
		{ _field_block, "styles", &campaign_metagame_style_type_block_block },
		{ _field_block, "difficulty", &campaign_metagame_difficulty_scale_block_block },
		{ _field_block, "skulls", MAKE_ALT_NAMES("Primary Skulls"), &campaign_metagame_skull_block_block },
		{ _field_long_integer, "friendly_death_point_count" },
		{ _field_long_integer, "player_death_point_count" },
		{ _field_long_integer, "player_betrayal_point_count" },
		{ _field_real, "transient score time", "how long does transient score stay onscreen", "s", MAKE_ALT_NAMES("multi kill window") },
		{ _field_real, "EMP kill window", "time after taking a guys shields down with emp damage you have to get the emp kill bonus (seconds)" },
		{ _field_terminator }
	};

	#define CAMPAIGN_METAGAME_SCENARIO_BLOCK_ID { 0x59269CAB, 0x380A4488, 0x9D7D8B32, 0xD61CB01A }
	TAG_STRUCT(
		campaign_metagame_scenario_block,
		"campaign_metagame_scenario_block",
		"campaign_metagame_scenario_block",
		"s_campaign_metagame_scenario_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMPAIGN_METAGAME_SCENARIO_BLOCK_ID)
	{
		{ _field_real, "par score" },
		{ _field_block, "time bonuses", &campaign_metagame_scenario_bonuses_block_block },
		{ _field_terminator }
	};

	#define CAMPAIGN_METAGAME_SCENARIO_BONUSES_BLOCK_ID { 0xDD111048, 0xEEC841D1, 0x860C878F, 0xD680F7F4 }
	TAG_STRUCT(
		campaign_metagame_scenario_bonuses_block,
		"campaign_metagame_scenario_bonuses_block",
		"campaign_metagame_scenario_bonuses_block",
		"s_campaign_metagame_scenario_bonuses_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMPAIGN_METAGAME_SCENARIO_BONUSES_BLOCK_ID)
	{
		{ _field_real, "time", "if you finish in under this time you get the following bonus" },
		{ _field_real, "score multiplier" },
		{ _field_terminator }
	};

	#define CAMPAIGN_METAGAME_SKULL_BLOCK_ID { 0x8F1530D9, 0xC5CC4C93, 0xA6739313, 0xD5C8BAAE }
	TAG_STRUCT(
		campaign_metagame_skull_block,
		"campaign_metagame_skull_block",
		"campaign_metagame_skull_block",
		"s_campaign_metagame_skull_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMPAIGN_METAGAME_SKULL_BLOCK_ID)
	{
		{ _field_real, "difficulty multiplier" },
		{ _field_terminator }
	};

	#define CAMPAIGN_METAGAME_STYLE_TYPE_BLOCK_ID { 0x5DFA1230, 0x8A3D4653, 0x9E93D875, 0xAFD34842 }
	TAG_STRUCT(
		campaign_metagame_style_type_block,
		"campaign_metagame_style_type_block",
		"campaign_metagame_style_type_block",
		"s_campaign_metagame_style_type_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMPAIGN_METAGAME_STYLE_TYPE_BLOCK_ID)
	{
		{ _field_string_id, "incident name" },
		{ _field_real, "style multiplier" },
		{ _field_terminator }
	};

	#define CAMPAIGN_STATE_SCREEN_SCRIPT_BLOCK_DEFINITION_ID { 0x94A0C938, 0x2B6549A6, 0xBD541503, 0xC73BBD58 }
	TAG_STRUCT(
		campaign_state_screen_script_block_definition,
		"campaign_state_screen_script_block_definition",
		"campaign_state_screen_script_block_definition",
		"s_campaign_state_screen_script_block_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMPAIGN_STATE_SCREEN_SCRIPT_BLOCK_DEFINITION_ID)
	{
		{ _field_long_integer, "map ID" },
		{ _field_string_id, "screen script name" },
		{ _field_tag_reference, "music override", &sound_looping_group_reference$2 },
		{ _field_terminator }
	};

	#define CAMPAIGN_UNSPATIALIZED_SOUNDS_BLOCK_ID { 0x56405873, 0x5E06469C, 0x86CCC3CD, 0x243AB85C }
	TAG_STRUCT(
		campaign_unspatialized_sounds_block,
		"campaign_unspatialized_sounds_block",
		"campaign_unspatialized_sounds_block",
		"s_campaign_unspatialized_sounds_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CAMPAIGN_UNSPATIALIZED_SOUNDS_BLOCK_ID)
	{
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_terminator }
	};

	#define CELL_BLOCK_STRUCT_ID { 0x3EBCDDBB, 0xE05345C9, 0x81A0110C, 0xABA2BEDD }
	TAG_STRUCT(
		cell_block_struct,
		"cell_block_struct",
		"cell_block_struct",
		"s_cell_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CELL_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("Character Build", "Specify the distribution of characters and weapons in the cell sub-folders"),
		{ _field_string_id, "name" },
		{ _field_struct, "place on", &ai_spawn_conditions_struct },
		{ _field_short_integer, "normal diff count", "initial number of actors on normal difficulty" },
		{ _field_short_enum, "major upgrade", &major_upgrade_enum },
		{ _field_block, "character type", &character_palette_choice_block_block },
		{ _field_block, "initial weapon", &weapon_palette_choice_block_block },
		{ _field_block, "initial secondary weapon", &weapon_palette_choice_block_block },
		{ _field_block, "initial equipment", &equipment_palette_choice_block_block },
		{ _field_short_enum, "grenade type", &global_ai_grenade_type_enum },
		{ _field_short_block_index, "vehicle type", &scenario_vehicle_palette_block_block },
		{ _field_string_id, "vehicle variant" },
		{ _field_string_id, "Placement script", _field_id_halo_script_block },
		{ _field_short_integer, "placement script index" },
		FIELD_PAD("plsc", 2),
		{ _field_string_id, "activity name" },
		{ _field_string_id, "movement set" },
		{ _field_short_block_index_custom_search, "point set", &custom_point_set_block_index_definition },
		{ _field_short_enum, "patrol mode", &patrol_mode_enum },
		{ _field_block, "points", &patrol_point_block_block },
		{ _field_terminator }
	};

	STRINGS(major_upgrade_enum)
	{
		"normal",
		"few",
		"many",
		"none",
		"all"
	};
	STRING_LIST(major_upgrade_enum, major_upgrade_enum_strings, _countof(major_upgrade_enum_strings));

	STRINGS(global_ai_grenade_type_enum)
	{
		"NONE",
		"Human grenade",
		"Covenant Plasma",
		"Brute claymore",
		"Firebomb"
	};
	STRING_LIST(global_ai_grenade_type_enum, global_ai_grenade_type_enum_strings, _countof(global_ai_grenade_type_enum_strings));

	STRINGS(patrol_mode_enum)
	{
		"ping-pong",
		"loop",
		"random"
	};
	STRING_LIST(patrol_mode_enum, patrol_mode_enum_strings, _countof(patrol_mode_enum_strings));

	#define CELL_TEMPLATE_BLOCK_STRUCT_ID { 0x84753568, 0x2BD14D62, 0xB1F8C1FD, 0xBE899C68 }
	TAG_STRUCT(
		cell_template_block_struct,
		"cell_template_block_struct",
		"cell_template_block_struct",
		"s_cell_template_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CELL_TEMPLATE_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_struct, "place on", &ai_spawn_conditions_struct },
		{ _field_short_integer, "normal diff count", "initial number of actors on normal difficulty" },
		{ _field_short_enum, "major upgrade", &major_upgrade_enum },
		FIELD_EXPLANATION("Character Build", "Specify the distribution of characters and weapons in the following blocks"),
		{ _field_block, "character type", &character_ref_choice_block_block, _tag_field_attributed_definition_block_grid_view_by_default },
		{ _field_block, "initial weapon", &weapon_ref_choice_block_block, _tag_field_attributed_definition_block_grid_view_by_default },
		{ _field_block, "initial secondary weapon", &weapon_ref_choice_block_block, _tag_field_attributed_definition_block_grid_view_by_default },
		{ _field_block, "initial equipment", &equipment_ref_choice_block_block, _tag_field_attributed_definition_block_grid_view_by_default },
		{ _field_short_enum, "grenade type", &global_ai_grenade_type_enum },
		FIELD_PAD("post-grenade", 2),
		{ _field_tag_reference, "vehicle type", &vehicle_group_reference$3 },
		{ _field_string_id, "vehicle variant" },
		{ _field_string_id, "activity name" },
		{ _field_terminator }
	};

	TAG_REFERENCE(vehicle_group_reference$3, VEHICLE_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define CELLULAR_AUTOMATA2D_STRUCT_DEFINITION_ID { 0x58015675, 0xB4FA436F, 0xAAB9EC7C, 0x90E51960 }
	TAG_STRUCT(
		cellular_automata2d_struct_definition,
		"cellular_automata2d_struct_definition",
		"cellular_automata2d_struct_definition",
		"s_cellular_automata2d_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN3 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CELLULAR_AUTOMATA2D_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("properties", nullptr),
		{ _field_short_integer, "updates per second", nullptr, "Hz" },
		FIELD_PAD("IFJ", 2),
		{ _field_real, "dead cell penalty" },
		{ _field_real, "live cell bonus" },
		FIELD_PAD("EPTNF", 80),
		FIELD_EXPLANATION("height map", nullptr),
		{ _field_short_integer, "width", nullptr, "cells" },
		{ _field_short_integer, "height", nullptr, "cells" },
		{ _field_real, "cell width", nullptr, "world units" },
		{ _field_real, "height", nullptr, "world units" },
		{ _field_real_vector_2d, "velocity", nullptr, "cells/update" },
		FIELD_PAD("KHXCI", 28),
		{ _field_old_string_id, "marker" },
		{ _field_long_flags, "interpolation flags", &global_rgb_interpolation_flags },
		{ _field_real_rgb_color, "base color" },
		{ _field_real_rgb_color, "peak color" },
		FIELD_PAD("IXKLNR", 76),
		FIELD_EXPLANATION("detail map", nullptr),
		{ _field_short_integer, "width", nullptr, "cells" },
		{ _field_short_integer, "height", nullptr, "cells" },
		{ _field_real, "cell width", nullptr, "world units" },
		{ _field_real_vector_2d, "velocity", nullptr, "cells/update" },
		FIELD_PAD("JXB", 48),
		{ _field_old_string_id, "marker" },
		{ _field_short_integer, "texture width", nullptr, "cells" },
		FIELD_PAD("HNOIXYJ", 2),
		FIELD_PAD("DDIGC", 48),
		{ _field_tag_reference, "texture", &bitmap_group_reference$2 },
		FIELD_PAD("HSJQLXWS", 160),
		{ _field_block, "rules", &rules_block_block },
		{ _field_terminator }
	};

	STRINGS(global_rgb_interpolation_flags)
	{
		"blend in hsv#blends colors in hsv rather than rgb space",
		"...more colors#blends colors through more hues (goes the long way around the color wheel)"
	};
	STRING_LIST(global_rgb_interpolation_flags, global_rgb_interpolation_flags_strings, _countof(global_rgb_interpolation_flags_strings));

	#define CELLULAR_AUTOMATA_STRUCT_DEFINITION_ID { 0xA8E224D3, 0x1BD34E44, 0xBABD0523, 0x5DE7F39D }
	TAG_STRUCT(
		cellular_automata_struct_definition,
		"cellular_automata_struct_definition",
		"cellular_automata_struct_definition",
		"s_cellular_automata_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN3 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CELLULAR_AUTOMATA_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("parameters", nullptr),
		{ _field_short_integer, "updates per second", nullptr, "Hz" },
		{ _field_short_integer, "x (width)", nullptr, "cells" },
		{ _field_short_integer, "y (depth)", nullptr, "cells" },
		{ _field_short_integer, "z (height)", nullptr, "cells" },
		{ _field_real, "x (width)", nullptr, "world units" },
		{ _field_real, "y (depth)", nullptr, "world units" },
		{ _field_real, "z (height)", nullptr, "world units" },
		FIELD_PAD("EUJRJIT", 32),
		{ _field_old_string_id, "marker" },
		FIELD_EXPLANATION("cell birth", nullptr),
		{ _field_real_fraction, "cell birth chance", nullptr, nullptr, "[0,1]" },
		FIELD_PAD("HXYEZXXRO", 32),
		FIELD_EXPLANATION("gene mutation", nullptr),
		{ _field_long_integer, "cell gene mutates 1 in", nullptr, "times" },
		{ _field_long_integer, "virus gene mutations 1 in", nullptr, "times" },
		FIELD_PAD("AM", 32),
		FIELD_EXPLANATION("cell infection", nullptr),
		{ _field_short_integer_bounds, "infected cell lifespan", "the lifespan of a cell once infected", "updates" },
		{ _field_short_integer, "minimum infection age", "no cell can be infected before it has been alive this number of updates", "updates" },
		FIELD_PAD("GCKNPCPT", 2),
		{ _field_real_fraction, "cell infection chance", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "infection threshold", "0.0 is most difficult for the virus, 1.0 means any virus can infect any cell", nullptr, "[0,1]" },
		FIELD_PAD("SGUUFL", 32),
		FIELD_EXPLANATION("initial state", nullptr),
		{ _field_real_fraction, "new cell filled chance", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "new cell infected chance", nullptr, nullptr, "[0,1]" },
		FIELD_PAD("YKYHDOBT", 32),
		FIELD_EXPLANATION("detail texture", nullptr),
		{ _field_real_fraction, "detail texture change chance", nullptr, nullptr, "[0,1]" },
		FIELD_PAD("GPMSPRZN", 32),
		{ _field_short_integer, "detail texture width", "the number of cells repeating across the detail texture in both dimensions", "cells" },
		FIELD_PAD("BXHH", 2),
		{ _field_tag_reference, "detail texture", &bitmap_group_reference$2 },
		FIELD_EXPLANATION("mask texture", nullptr),
		FIELD_PAD("VPK", 32),
		{ _field_tag_reference, "mask bitmap", &bitmap_group_reference$2 },
		FIELD_PAD("BW", 240),
		{ _field_terminator }
	};

	#define CHALLENGE_BLOCK_STRUCT_ID { 0xAE40AC39, 0xD24F44B4, 0x8FD89CFF, 0x20129E29 }
	TAG_STRUCT(
		challenge_block_struct,
		"challenge_block_struct",
		"challenge_block_struct",
		"s_challenge_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHALLENGE_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "challenge_name" },
		{ _field_string_id, "display_string", "in the UI, name and description" },
		{ _field_string_id, "display_name", "in the UI, name" },
		{ _field_string_id, "display_description", "in the UI, description" },
		{ _field_string_id, "completion_toast_string", "in the UI, the text on the toast when you complete this challenge" },
		{ _field_long_integer, "required_progress_count", "How many times this challenge must be progressed to complete it (unless overridden by LSP)." },
		{ _field_long_integer, "cookies reward", "cookies for completing this challenge; can be overridden by LSP" },
		{ _field_long_integer, "XP reward", "XP for completing this challenge; can be overridden by LSP" },
		{ _field_long_integer, "progress_tracking_interval", "Frequency we toast your progress (think pink and deadly)." },
		{ _field_string_id, "chud_progress_string", "progress toast string (presumably very concise)." },
		{ _field_long_integer, "chud_progress_bitmap_sequence_index", "What icon is shown in the progress toast?" },
		{ _field_byte_flags, "flags", &challenge_definition_flags },
		{ _field_char_enum, "icon", &challengeicondefinition },
		FIELD_PAD("PJB1", 2),
		{ _field_long_flags, "auto progress on", "Conditions that progress this challenge magically (aside from incidents, which can progress any challenge)", &challenge_progress_flags },
		FIELD_GROUP_BEGIN("requirements"),
		FIELD_GROUP_BEGIN("permitted game types"),
		{ _field_struct, "permitted game types", &game_mode_flags_struct },
		FIELD_GROUP_END(),
		{ _field_string_id, "level_name", "can only be progressed on this level, if specified" },
		{ _field_long_integer, "map_id", "can only be progressed on this map, if > 0 (only works for campaign and spartan ops)" },
		{ _field_short_integer, "mission id", "can only be progressed on this mission, if >= 0 (only works for spartan ops)" },
		FIELD_PAD("PJB2", 2),
		{ _field_long_flags, "skulls", "this challenge can only be progressed with at least these skulls enabled in the game options (only works for campaign)", &skull_flags_definition },
		{ _field_long_integer, "minimum_score", "must score at least this many points, if > 0 (only works for campaign)" },
		{ _field_long_integer, "maximum_player_death_count", "must die no more than this many times, if >= 0" },
		{ _field_long_integer, "maximum_level_completion_seconds", "must complete the level in no more than this many seconds, if > 0" },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(challenge_definition_flags)
	{
		"progress_resets_at_end_of_game"
	};
	STRING_LIST(challenge_definition_flags, challenge_definition_flags_strings, _countof(challenge_definition_flags_strings));

	STRINGS(challengeicondefinition)
	{
		"iron",
		"bronze",
		"silver",
		"gold",
		"onyx",
		"daily",
		"weekly"
	};
	STRING_LIST(challengeicondefinition, challengeicondefinition_strings, _countof(challengeicondefinition_strings));

	STRINGS(challenge_progress_flags)
	{
		"matchmaking_multiplayer_game_won",
		"campaign_mission_beaten",
		"matchmaking_multiplayer_game_completed",
		"complete_single_daily_challenge",
		"complete_single_weekly_challenge",
		"complete_single_monthly_challenge",
		"complete_all_daily_challenges_in_a_day",
		"upload_film_clip_that_you_authored",
		"wear_a_piece_of_armor_in_armory",
		"auto_progress#progresses the instant all requirements are met",
		"spartan ops- mission beaten",
		"spartan ops- completed all weekly missions on easy (or harder)",
		"spartan ops- completed all weekly missions on normal (or harder)",
		"spartan ops- completed all weekly missions on hard (or harder)",
		"spartan ops- completed all weekly missions on impossible"
	};
	STRING_LIST(challenge_progress_flags, challenge_progress_flags_strings, _countof(challenge_progress_flags_strings));

	STRINGS(skull_flags_definition)
	{
		"skull_iron",
		"skull_black_eye",
		"skull_tough_luck",
		"skull_catch",
		"skull_fog",
		"skull_famine",
		"skull_thunderstorm",
		"skull_tilt",
		"skull_mythic",
		"skull_assassin",
		"skull_blind",
		"skull_superman",
		"skull_birthday_party",
		"skull_daddy",
		"skull_red",
		"skull_yellow",
		"skull_blue"
	};
	STRING_LIST(skull_flags_definition, skull_flags_definition_strings, _countof(skull_flags_definition_strings));

	#define CHALLENGE_CATEGORY_BLOCK_ID { 0x1BF3629D, 0x7DFA41AA, 0xB84F471F, 0xB5D25884 }
	TAG_STRUCT(
		challenge_category_block,
		"challenge_category_block",
		"challenge_category_block",
		"s_challenge_category_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHALLENGE_CATEGORY_BLOCK_ID)
	{
		{ _field_string_id, "category_name" },
		{ _field_char_enum, "challenge category", &challenge_category_enum_definition },
		FIELD_PAD("WAT1", 3),
		{ _field_block, "challenges", &challenge_block_block },
		{ _field_terminator }
	};

	STRINGS(challenge_category_enum_definition)
	{
		"campaign",
		"competitive",
		"spartan ops",
		"waypoint"
	};
	STRING_LIST(challenge_category_enum_definition, challenge_category_enum_definition_strings, _countof(challenge_category_enum_definition_strings));

	#define CHALLENGE_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID { 0x243AAA96, 0x410741B1, 0xBE0CC69B, 0xAEBFABE2 }
	TAG_STRUCT(
		challenge_globals_definition_struct_definition,
		"challenge_globals_definition_struct_definition",
		"challenge_globals_definition_struct_definition",
		"s_challenge_globals_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHALLENGE_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_tag_reference, "medal aggregators", &medal_challenge_aggregator_list_group_reference },
		{ _field_block, "challenge_categories", &challenge_category_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(medal_challenge_aggregator_list_group_reference, MEDAL_CHALLENGE_AGGREGATOR_LIST_TAG);

	#define CHARACTERHOPDEFINITIONBLOCK_ID { 0x2467A7F3, 0x2EEB4F12, 0x92754F79, 0xE2C12CEB }
	TAG_STRUCT(
		characterhopdefinitionblock,
		"characterHopDefinitionBlock",
		"characterHopDefinitionBlock",
		"s_characterhopdefinitionblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTERHOPDEFINITIONBLOCK_ID)
	{
		FIELD_GROUP_BEGIN("Default"),
		{ _field_struct, "Default", &character_hop_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Passive"),
		{ _field_struct, "Passive", &character_hop_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Aggressive"),
		{ _field_struct, "Aggressive", &character_hop_struct },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define CHARACTER_ACTIVITY_OBJECT_BLOCK_ID { 0x63D73A39, 0x85744FD1, 0x812FF1AD, 0xA8EEC55A }
	TAG_STRUCT(
		character_activity_object_block,
		"character_activity_object_block",
		"character_activity_object_block",
		"s_character_activity_object_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_ACTIVITY_OBJECT_BLOCK_ID)
	{
		{ _field_string_id, "activity name" },
		{ _field_tag_reference, "crate", &crate_group_reference$3 },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "crate marker name" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "unit marker name" },
		{ _field_terminator }
	};

	TAG_REFERENCE(crate_group_reference$3, CRATE_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define CHARACTER_ADVANCE_BLOCK_ID { 0x3116DB0B, 0x26824553, 0xBEFB6543, 0xCBF1D7EC }
	TAG_STRUCT(
		character_advance_block,
		"character_advance_block",
		"character_advance_block",
		"s_character_advance_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_ADVANCE_BLOCK_ID)
	{
		{ _field_real_fraction, "Initiate Chance ", "Chance per second that actor will initiate an advance when able." },
		{ _field_long_flags, "advance flags", &advance_flags },
		{ _field_real_fraction, "Shield trigger vitality ", "shield level that triggers charge if charge on shields down is set." },
		{ _field_real, "Max Range ", "Max allowed range to target for advance to trigger." },
		{ _field_real, "Terminator Range ", "Distance at which terminator (slow advance) behavior can kick in." },
		{ _field_string_id, "Terminator Throttle Style ", "Throttle used while terminating." },
		{ _field_string_id, "Fast Charge Throttle Style ", "Throttle used for fast advance." },
		{ _field_real, "Abort Danger Threshold ", "Advance will abort if danger goes above this value." },
		{ _field_real, "Delay Timer ", "Cooldown time before advance can start again." },
		{ _field_real, "Charge Range ", "Range at which melee charge behavior will trigger automatically during an advance." },
		{ _field_real, "Minimum fast advance range ", "Shortest range for faster advance styles, including teleport and leap." },
		{ _field_real_fraction, "Sword Flick Chance ", "Chance that sword flick will play at the start of advance behavior." },
		{ _field_long_enum, "advance method", &character_advance_type_enum },
		{ _field_real, "Teleport destination distance ", "How far from target to arrive" },
		{ _field_real, "Teleport Sidestep distance ", "How far to appear to the side of teleport line for intermediate steps" },
		{ _field_real, "Teleport Forward distance ", "How far to teleport forward for intermediate steps" },
		{ _field_real, "Teleport runup time", "Time between end of sword flick and first teleport" },
		{ _field_real, "Teleport position time ", "Time spent at each teleport location" },
		{ _field_real, "Teleport cooldown time ", "Time after attack before trying to get away" },
		{ _field_real, "Teleport tracking distance ", "How far the landing point can move between jumps" },
		{ _field_real, "Teleport tracking lockdown dist ", "How far from the target do we stop tracking" },
		{ _field_tag_reference, "Teleport Launch FX ", "Effect to play at teleport launch point", &effect_group_reference },
		{ _field_tag_reference, "Teleport Land FX ", "Effect to play at teleport destination point", &effect_group_reference },
		{ _field_terminator }
	};

	STRINGS(advance_flags)
	{
		"charge on shield down"
	};
	STRING_LIST(advance_flags, advance_flags_strings, _countof(advance_flags_strings));

	STRINGS(character_advance_type_enum)
	{
		"charge",
		"teleport",
		"leap"
	};
	STRING_LIST(character_advance_type_enum, character_advance_type_enum_strings, _countof(character_advance_type_enum_strings));

	#define CHARACTER_BISHOP_BLOCK_ID { 0xF351D027, 0xD01D4F25, 0xA835C84C, 0x6BBD1DE3 }
	TAG_STRUCT(
		character_bishop_block,
		"character_bishop_block",
		"character_bishop_block",
		"s_character_bishop_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_BISHOP_BLOCK_ID)
	{
		{ _field_tag_reference, "junk collect effect", &effect_group_reference$2 },
		{ _field_tag_reference, "junk attack effect", &effect_group_reference$2 },
		{ _field_real_bounds, "junk attack prep time min / max (in seconds)" },
		{ _field_real_bounds, "junk attack recharge time min / max (in seconds)" },
		{ _field_tag_reference, "shield effect", &effect_group_reference$2 },
		{ _field_tag_reference, "shield crate", &crate_group_reference$4 },
		{ _field_real_bounds, "shield lifetime min / max (in seconds)" },
		{ _field_real_bounds, "shield recharge time min / max (in seconds)" },
		{ _field_real, "shield range max (in world units)" },
		{ _field_real, "shield offset max (in world units)", "max distance of shield from shieldee" },
		{ _field_real_bounds, "repair prep time min / max (in seconds)" },
		{ _field_real_bounds, "repair recharge time min / max (in seconds)" },
		{ _field_tag_reference, "repair beam effect", &effect_group_reference$2 },
		{ _field_tag_reference, "repair crate", &crate_group_reference$4 },
		{ _field_real_bounds, "Orbit Distance ", "Min/Max distance that bishop will try to maintain orbit in." },
		{ _field_real, "Min Follow Distance ", "Distance at which bishop will stop orbiting and try to catch up to allies." },
		{ _field_real, "Vertical Offset ", "How high/low bishop will float relative to allies being protected." },
		{ _field_real, "Real Line Distance ", "Controls how far bishop will hang back from combat." },
		{ _field_real, "Follow Throttle (0 - 1) ", "Fraction of max throttle to use when catching up to allies." },
		{ _field_real, "Orbit Throttle (0 - 1) ", "Fraction of max throttle to use when orbiting allies." },
		{ _field_real_fraction, "Evasion Shield Level Trigger (0 - 1) ", "Fraction of shield level remaining required to trigger evasion." },
		{ _field_real_fraction, "Evasion Body Level Trigger (0 - 1) ", "Fraction of body vitality remaining required to trigger evasion." },
		{ _field_real, "Evasion Danger Threshold Trigger ", "Perceived danger required to trigger evasion." },
		{ _field_real, "Resurrection Initiation Delay Time (seconds) ", "Time Bishop waits upon arriving at resurrection target before activating resurrection beam." },
		{ _field_real, "Resurrection Charge Up Time (seconds) ", "Time from resurrection beam activation until actual resurrection is triggered." },
		{ _field_real, "Resurrection Give Up Time (seconds) ", "If the resurrection target is not reached in this amount of time, the resurrection attempt is aborted." },
		{ _field_tag_reference, "Resurrection Ground Effect ", "The effect created on the ground when resurrecting a dead ally.", &effect_group_reference$2 },
		{ _field_tag_reference, "Res. Area Scan Start Effect ", "The effect created on the ground when scanning for a clear area before resurrection.", &effect_group_reference$2 },
		{ _field_tag_reference, "Res. Area Scan Success Effect ", "The effect created on the ground when area scan succeeds.", &effect_group_reference$2 },
		{ _field_tag_reference, "Res. Area Scan Failure Effect ", "The effect created on the ground when area scan fails.", &effect_group_reference$2 },
		{ _field_tag_reference, "Shard Object ", "Created by bishop when shard spawning.  Runs spawning logic.", &crate_group_reference$4 },
		{ _field_tag_reference, "Shard Spawn Ground Effect ", "The effect created on the ground when spawning shards (pawns).", &effect_group_reference$2 },
		{ _field_real, "Shard Creation Delay (seconds) ", "Time it takes for bishop to place shards after arriving at destination." },
		{ _field_real_bounds, "Spawn Delay (seconds) ", "Min/max time it takes for shards to spawn actors." },
		{ _field_terminator }
	};

	TAG_REFERENCE(effect_group_reference$2, EFFECT_TAG);

	TAG_REFERENCE(crate_group_reference$4, CRATE_TAG);

	#define CHARACTER_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0x878E0364, 0x3F1F47F2, 0x963CE43C, 0xA3BB5D25 }
	TAG_STRUCT(
		character_block_index_flags_block_struct,
		"character_block_index_flags_block_struct",
		"character_block_index_flags_block_struct",
		"s_character_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &character_palette_block_block },
		{ _field_terminator }
	};

	#define CHARACTER_BOARDING_BLOCK_ID { 0xE8176F59, 0x5987413A, 0x97AD3E48, 0x138FF9FC }
	TAG_STRUCT(
		character_boarding_block,
		"character_boarding_block",
		"character_boarding_block",
		"s_character_boarding_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_BOARDING_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &boarding_flags },
		{ _field_real, "max distance", "maximum distance from entry point that we will consider boarding", "wus" },
		{ _field_real, "abort distance", "give up trying to get in boarding seat if entry point is further away than this", "wus" },
		{ _field_real, "max speed", "maximum speed at which we will consider boarding", "wu/s" },
		{ _field_real, "board time", "maximum time we will melee board for", "seconds" },
		{ _field_real_bounds, "boarding timeout", "The amount of time after boarding before we'll consider boarding again", "seconds" },
		{ _field_block, "vehicle specific properties", &character_vehicle_boarding_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_terminator }
	};

	STRINGS(boarding_flags)
	{
		"airborne boarding"
	};
	STRING_LIST(boarding_flags, boarding_flags_strings, _countof(boarding_flags_strings));

	#define CHARACTER_BUNKER_BLOCK_ID { 0x8EDF6B9E, 0x32EA4802, 0x80A25CBC, 0x72BE6A61 }
	TAG_STRUCT(
		character_bunker_block,
		"character_bunker_block",
		"character_bunker_block",
		"s_character_bunker_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_BUNKER_BLOCK_ID)
	{
		FIELD_EXPLANATION("DEFAULT TIMINGS", nullptr),
		{ _field_struct, "default", &character_bunker_timings_struct },
		FIELD_EXPLANATION("FIGHT TIMINGS", nullptr),
		{ _field_struct, "fight", &character_bunker_timings_struct },
		FIELD_EXPLANATION("COVER TIMINGS", nullptr),
		{ _field_struct, "cover", &character_bunker_timings_struct },
		FIELD_EXPLANATION("GUARD TIMINGS", nullptr),
		{ _field_struct, "guard", &character_bunker_timings_struct },
		{ _field_terminator }
	};

	#define CHARACTER_BUNKER_TIMINGS_STRUCT_ID { 0x4C18982B, 0x8FAF437A, 0xA9D9BCDA, 0xAD0B2D85 }
	TAG_STRUCT(
		character_bunker_timings_struct,
		"character_bunker_timings_struct",
		"character_bunker_timings_struct",
		"s_character_bunker_timings_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_BUNKER_TIMINGS_STRUCT_ID)
	{
		{ _field_real_bounds, "open time", "How long we should open for", "seconds" },
		{ _field_real, "closed min time", "How long we must stay closed for before opening or peeking again", "seconds" },
		{ _field_real, "close danger level", "Force close at this danger level" },
		{ _field_real, "open chance", "What chance we have of opening per second", "chance per second" },
		{ _field_real, "peek chance", "What chance we have of peeking per second", "chance per second" },
		{ _field_terminator }
	};

	#define CHARACTER_CHARGE_BLOCK_ID { 0x37963E71, 0xB54C4B51, 0x829761F6, 0xF4E6EACE }
	TAG_STRUCT(
		character_charge_block,
		"character_charge_block",
		"character_charge_block",
		"s_character_charge_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_CHARGE_BLOCK_ID)
	{
		{ _field_long_flags, "Charge flags", &charge_flags },
		{ _field_real, "melee consider range" },
		{ _field_real, "melee chance", "chance of initiating a melee within a 1 second period" },
		{ _field_real, "melee attack range" },
		{ _field_real, "melee abort range" },
		{ _field_real, "melee attack timeout", "Give up after given amount of time spent charging", "seconds" },
		{ _field_real, "melee attack delay timer", "don't attempt again before given time since last melee", "seconds" },
		{ _field_real, "melee armor lock delay", "don't attempt a melee on a recently armor locked target for this many seconds", "seconds" },
		{ _field_real_bounds, "melee leap range" },
		{ _field_real, "melee leap chance" },
		{ _field_real, "ideal leap velocity" },
		{ _field_real, "max leap velocity" },
		{ _field_real, "melee leap ballistic", "min ballistic fraction" },
		{ _field_real, "melee delay timer", "time between melee leaps", "seconds" },
		{ _field_real, "melee leap prediction time", "how far ahead (seconds) do we look at target for translational prediction?" },
		{ _field_real, "leader abandoned berserk chance", "chance for a leader to berserk when all his followers die (actually charge, NOT berserk, but I'm not changing the name of the variable)" },
		{ _field_real_bounds, "shield-down berserk chance", "lower bound is chance to berserk at max range, upper bound is chance to berserk at min range, requires shield depleted berserk impulse" },
		{ _field_real_bounds, "shield-down berserk ranges" },
		{ _field_real, "friendly killed max berserk distance", "The max range at which we will go berserk if we see a friendly AI of the same type (brute, etc) get killed", "wu" },
		{ _field_real_fraction, "peer killed berserk chance", "Chance that we will go berserk if we see a friendly AI of the same type (brute, etc) with the same or lower standing get killed", nullptr, "[0,1]" },
		{ _field_real_fraction, "leader killed berserk chance", "Chance that we will go berserk if we see a friendly AI of the same type (brute, etc) with higher standing get killed", nullptr, "[0,1]" },
		{ _field_tag_reference, "berserk weapon", "when I berserk, I pull out a ...", &weapon_group_reference$4 },
		{ _field_real_fraction, "Play Berserk Anim Chance When Stuck ", "Chance that AI will play berserk anim after getting stuck with a grenade.  Zero is 50%" },
		{ _field_real, "Beserk cooldown", "Time that I will stay in beserk after losing my target, and then revert back to normal", "seconds" },
		{ _field_real, "proximity berserk range", "If our target is closer than this distance, and not (in a vehicle/larger size than us/using a melee weapon), we will berserk. If our target is further than this distance, we will stop berserking. Set to 0 to disable proximity berserking.", "world units" },
		{ _field_real, "proximity berserk outside fp range", "We will never go more than this far outside our firing point areas when proximity-berserking. 0= no limit.", "world units" },
		{ _field_real_fraction, "proximity berserk chance", "If we have a target close enough to berserk, this is the chance that we will do so. If chance fails, we will try again after timeout.", nullptr, "[0,1]" },
		{ _field_real, "proximity berserk timeout", "We will not proximity-berserk unless it has been at least this long since we last stopped berserking. 0= no timeout.", "seconds" },
		{ _field_real, "Broken kamikaze chance", "Probability that I will run the kamikaze behaviour when my leader dies." },
		{ _field_real, "Perimeter Range", "How far we will melee charge outside our firing points before starting perimeter (defaults to 5wu)" },
		{ _field_real, "Perimeter Range Close", "How far we will melee charge outside our firing points before starting perimeter when the target is close to me (within 3wu) (defaults to 9wu)" },
		{ _field_real, "Perimeter Damage Timeout", "How long will we take damage from our target before either seeking cover or berserking (defaults to 3secs)", "secs" },
		{ _field_block, "difficulty limits", &character_charge_difficulty_limits_block_block },
		{ _field_real_bounds, "balling melee leap range" },
		{ _field_real, "balling melee leap attack range" },
		{ _field_real, "balling melee leap chance" },
		{ _field_real, "balling melee attack delay timer", "don't attempt again before given time since last melee", "seconds" },
		{ _field_terminator }
	};

	STRINGS(charge_flags)
	{
		"offhand melee allowed",
		"berserk whenever charge",
		"don\'t use berserk mode",
		"don\'t stow weapon during berserk",
		"allow dialogue while berserking",
		"don\'t play berserk animation",
		"don\'t shoot during charge",
		"allow leap with ranged weapons"
	};
	STRING_LIST(charge_flags, charge_flags_strings, _countof(charge_flags_strings));

	TAG_REFERENCE(weapon_group_reference$4, WEAPON_TAG);

	#define CHARACTER_CHARGE_DIFFICULTY_LIMITS_BLOCK_ID { 0x7AA4AD54, 0xFA814E3B, 0xA455CB7C, 0xCCC805A9 }
	TAG_STRUCT(
		character_charge_difficulty_limits_block,
		"character_charge_difficulty_limits_block",
		"character_charge_difficulty_limits_block",
		"s_character_charge_difficulty_limits_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_CHARGE_DIFFICULTY_LIMITS_BLOCK_ID)
	{
		FIELD_EXPLANATION("Difficulty Limits", "Per difficulty values to limit the number of guys in particular behaviours"),
		{ _field_short_integer, "max kamikaze count", "How many guys in a single clump can be kamikazing at one time" },
		{ _field_short_integer, "max berserk count", "How many guys in a single clump can be berserking at one time" },
		{ _field_short_integer, "min berserk count", "We'd like at least this number of guys in a single clump can be berserking at one time (primarily combat forms)" },
		{ _field_terminator }
	};

	#define CHARACTER_COMBATFORM_BLOCK_ID { 0xD530990F, 0x2934E9C, 0xB698F9AC, 0x351A25CE }
	TAG_STRUCT(
		character_combatform_block,
		"character_combatform_block",
		"character_combatform_block",
		"s_character_combatform_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_COMBATFORM_BLOCK_ID)
	{
		{ _field_real, "berserk distance", "distance at which combatform will be forced into berserk", "wu" },
		{ _field_real, "berserk chance", "chance of berserking this second" },
		{ _field_terminator }
	};

	#define CHARACTER_COMBOTRON_CHILD_BLOCK_ID { 0x55418195, 0xA98E4A78, 0xAFFE998E, 0xEE1F1A16 }
	TAG_STRUCT(
		character_combotron_child_block,
		"character_combotron_child_block",
		"character_combotron_child_block",
		"s_character_combotron_child_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_COMBOTRON_CHILD_BLOCK_ID)
	{
		FIELD_EXPLANATION("combotron child props (anything that can socket into a rook)", nullptr),
		{ _field_long_flags, "flags", &rook_flags },
		{ _field_tag_reference, "socket weapon", "When socketed, this guy turns into a weapon of the type referenced here", &weapon_group_reference$4 },
		{ _field_tag_reference, "socket child", "When socketed, this guy turns into a child of the type referenced here", &object_group_reference$2 },
		{ _field_tag_reference, "socket character definition", "Parent adopts this character definition when this guy is socketed", &character_group_reference$3 },
		{ _field_real, "damage threshold when socketed", "How much damage does this guy absorb before de-socketing" },
		{ _field_real_bounds, "socketing cooldown (seconds)", "After being de-socketed, wait this long before re-socketing" },
		{ _field_real_bounds, "socketing attach distance (world units)", "at what distance does the client particleize and attach to socket" },
		{ _field_tag_reference, "effect socketing", "this effect plays while a child is socketing into a parent", &effect_group_reference$2 },
		{ _field_terminator }
	};

	STRINGS(rook_flags)
	{
		"active while socketed"
	};
	STRING_LIST(rook_flags, rook_flags_strings, _countof(rook_flags_strings));

	TAG_REFERENCE(object_group_reference$2, OBJECT_TAG);

	TAG_REFERENCE(character_group_reference$3, CHARACTER_TAG);

	#define CHARACTER_COMBOTRON_PARENT_BLOCK_ID { 0x5D43E27B, 0x83B04DA3, 0x82329880, 0xD118E408 }
	TAG_STRUCT(
		character_combotron_parent_block,
		"character_combotron_parent_block",
		"character_combotron_parent_block",
		"s_character_combotron_parent_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_COMBOTRON_PARENT_BLOCK_ID)
	{
		FIELD_EXPLANATION("combotron parent props", nullptr),
		{ _field_real_bounds, "socket cooldown (seconds)", "for each socket, this is the time to wait after desocketing before socketing something else into it" },
		{ _field_real, "child scale", "use this value to set scaling for child objects / etc..." },
		{ _field_real, "shield scale", "if a socketed child creates a shield for me, how big should it be?" },
		{ _field_string_id, "shield location (marker name)", "when bishop is attached and shielding, where should the shield go?" },
		{ _field_tag_reference, "effect socket occupied", &effect_group_reference$2 },
		{ _field_tag_reference, "effect socket cooling", &effect_group_reference$2 },
		{ _field_tag_reference, "effect socket available", &effect_group_reference$2 },
		{ _field_terminator }
	};

	#define CHARACTER_COVER_BLOCK_ID { 0x1D0E6BC9, 0x2E39471C, 0xA35B152D, 0x43C54E8A }
	TAG_STRUCT(
		character_cover_block,
		"character_cover_block",
		"character_cover_block",
		"s_character_cover_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_COVER_BLOCK_ID)
	{
		{ _field_long_flags, "cover flags", &cover_flags },
		{ _field_real_bounds, "hide behind cover time", "how long we stay behind cover after seeking cover", "seconds" },
		FIELD_EXPLANATION("Hologram conditions", "The following fields dictate how hologram equipment is used by AI in cover."),
		{ _field_real_bounds, "hologram cover wait time", "how long we wait in cover before using the hologram", "seconds" },
		{ _field_real, "hologram cooldown delay", "Amount of time I will wait before trying to use hologram equipment again (0 value defaults to 5 seconds)", "seconds" },
		FIELD_EXPLANATION("Cover conditions", "The following fields dictate the conditions under which we will go into cover."),
		{ _field_real, "Cover shield fraction", "Only cover when shield falls below this level" },
		{ _field_real, "Cover vitality threshold", "Only cover when vitality falls below this level" },
		{ _field_real, "Cover danger threshold", "Danger must be this high to cover. " },
		FIELD_GROUP_BEGIN("Aggresive/Defensive cover properties"),
		{ _field_real, "minimum defensive distance from target", "How far from the target should we switch from aggresive to defensive covering (0 always defensive, big number always offensive)", "wus" },
		{ _field_real, "minimum defensive distance from cover", "If our cover point is less than this distance, we will never consider defensive covering", "wus" },
		{ _field_real, "always defensive scary threshold", "If the target has scarines bigger or equal to this, we will always cover defensively" },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Other", nullptr),
		{ _field_real, "Cover check delay", "Amount of time I will wait before trying again after covering (0 value defaults to 2 seconds)", "seconds" },
		{ _field_real, "Cover pinned down check delay", "Amount of time I will wait before issuing a pinned down message (0 value defaults to 2 seconds)", "seconds" },
		{ _field_real, "Emerge from cover when shield fraction reaches threshold", "Emerge from cover when shield fraction reaches threshold" },
		{ _field_real, "Proximity self-preserve", "Triggers self-preservation when target within this distance (assuming proximity_self_preserve_impulse is enabled)", "wus" },
		{ _field_real, "proximity melee distance", "When self preserving from a target less than given distance, causes melee attack (assuming proximity_melee_impulse is enabled)" },
		{ _field_real, "unreachable enemy danger threshold", "When danger from an unreachable enemy surpasses threshold, actor cover (assuming unreachable_enemy_cover impulse is enabled)" },
		{ _field_real, "unassailable enemy danger threshold", "When target is unassailable, and danger goes over this value - cover (assuming unassailable_enemy_cover impulse is enabled)" },
		{ _field_real, "scary target threshold", "When target is aware of me and surpasses the given scariness, self-preserve (assuming scary_target_cover_impulse is enabled)" },
		{ _field_real, "Vitality fraction shield equipment", "Fraction of vitality below which an equipped shield equipment (instant cover/bubbleshield) will be activated (once damage has died down, and assuming shield_equipment_impulse is enabled)", MAKE_ALT_NAMES("Vitality fraction bubbleshield") },
		{ _field_real, "Recent damage shield equipment", "Must have less than this amount of recent body damage before we can deploy our equipped shield equipment." },
		{ _field_terminator }
	};

	STRINGS(cover_flags)
	{
		"Unassailable cover ends ONLY when target assailable",
		"Use Phasing"
	};
	STRING_LIST(cover_flags, cover_flags_strings, _countof(cover_flags_strings));

	#define CHARACTER_COVER_EVASION_BLOCK_ID { 0x81EFCC7, 0x28A34D04, 0xB5F070DB, 0x736CBED5 }
	TAG_STRUCT(
		character_cover_evasion_block,
		"character_cover_evasion_block",
		"character_cover_evasion_block",
		"s_character_cover_evasion_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_COVER_EVASION_BLOCK_ID)
	{
		{ _field_real, "Initiate Danger Threshold ", "Danger level needed to trigger behavior." },
		{ _field_real, "Abort Danger Threshold ", "Danger level that will cause behavior to be aborted." },
		{ _field_real, "Cooldown ", "Seconds that must pass before behavior can trigger again." },
		{ _field_real, "Cover Min Time ", "Min time character must spend in cover before stepping out." },
		{ _field_real, "Fight Min Time ", "Min time that character must spend out of cover before stepping in." },
		{ _field_real, "Step In Danger Threshold ", "Danger threshold that causes character to step behind cover again." },
		{ _field_real, "Step In Chance ", "Chance per second that character will step into cover once danger threshold reached." },
		{ _field_real, "Step Out Danger Threshold ", "Danger must be below this value before character can step out of cover." },
		{ _field_real, "Step Out Chance ", "Chance per second that character will step out of cover." },
		{ _field_terminator }
	};

	#define CHARACTER_COVER_FIGHT_BLOCK_ID { 0x8097EED1, 0xAB984913, 0xB1530F52, 0xB28571E6 }
	TAG_STRUCT(
		character_cover_fight_block,
		"character_cover_fight_block",
		"character_cover_fight_block",
		"s_character_cover_fight_block",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_COVER_FIGHT_BLOCK_ID)
	{
		{ _field_real_bounds, "Cover fight min / max (in world units)", "Character will prefer to use cover fighting between min/max distances" },
		{ _field_real_bounds, "Wanted cover time(in seconds)", "How much time do we want to spend before assessing other actions/spots." },
		{ _field_real_bounds, "Wanted kneeling time(in seconds)", "How long do we want to kneel." },
		{ _field_real_bounds, "Wanted standing time(in seconds)", "How long do we want to stand in cover." },
		{ _field_real, "Realize no cover found (in seconds)", "How long do we wait before we realize that no cover spot can be found." },
		{ _field_real_bounds, "No cover found suppress (in seconds)", "How long to disallow cover fight behavior when no cover is found." },
		{ _field_real, "Fully exposed width (0-1 of bounding sphere)", "How much of the character needs to be visible before cover is broken." },
		{ _field_real, "Move exposed avoidance radius", "How big is the area that I want to avoid when I am exposed." },
		{ _field_real, "Move avoidance radius", "How big is the area that I want to avoid when I move from cover to cover." },
		{ _field_real, "Cover fight chance when found cover(0-1)", "How often to go into cover fighting when found good cover." },
		{ _field_real, "Balling chance(0-1)", "How often to go into ball movement when moving from cover to cover." },
		{ _field_real, "Prefer distance over flank movement(0-10)", "How we rate distance vs side movement when choosing next cover spot." },
		{ _field_real, "Chance of exiting cover fight when too close", "Chance of exiting cover fight when too close." },
		{ _field_real, "Balling interrupt damage", "Damage delta when to interrupt balling." },
		{ _field_string_id, "balling interrupt animation (animation string)" },
		{ _field_tag_reference, "Into ball transition effect", &effect_group_reference$2 },
		{ _field_tag_reference, "Out of ball transition effect", &effect_group_reference$2 },
		{ _field_tag_reference, "Ball moving effect", &effect_group_reference$2 },
		{ _field_tag_reference, "Ball interrupted effect", &effect_group_reference$2 },
		{ _field_terminator }
	};

	#define CHARACTER_DISTRIBUTION_BLOCK_STRUCT_ID { 0xC16F904D, 0x87464DF1, 0xBD91ADC3, 0xEFD9352E }
	TAG_STRUCT(
		character_distribution_block_struct,
		"character_distribution_block_struct",
		"character_distribution_block_struct",
		"s_character_distribution_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_DISTRIBUTION_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "character", &character_palette_block_block },
		{ _field_byte_flags, "flags", &distribution_character_flags },
		FIELD_PAD("post-flags", 1),
		{ _field_terminator }
	};

	STRINGS(distribution_character_flags)
	{
		"don\'t distribute to children"
	};
	STRING_LIST(distribution_character_flags, distribution_character_flags_strings, _countof(distribution_character_flags_strings));

	#define CHARACTER_EMERGE_BLOCK_ID { 0x27C20FEF, 0xF3E64C27, 0x9444A371, 0x144F8627 }
	TAG_STRUCT(
		character_emerge_block,
		"character_emerge_block",
		"character_emerge_block",
		"s_character_emerge_block",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_EMERGE_BLOCK_ID)
	{
		{ _field_tag_reference, "Wall effect", &effect_group_reference$2 },
		{ _field_tag_reference, "Floor effect", &effect_group_reference$2 },
		{ _field_terminator }
	};

	#define CHARACTER_EMOTIONS_BLOCK_ID { 0x70004598, 0xCC0545AA, 0xA4E626D3, 0x947DE280 }
	TAG_STRUCT(
		character_emotions_block,
		"character_emotions_block",
		"character_emotions_block",
		"s_character_emotions_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_EMOTIONS_BLOCK_ID)
	{
		{ _field_block, "situational danger", &character_emotions_situational_danger_block_block },
		{ _field_real, "perceived danger increase half-life", "How many seconds until it rises up to half between its current and target value", "seconds" },
		{ _field_real, "perceived danger decay half-life", "How many seconds until it decays to half between its current and target values", "seconds" },
		{ _field_terminator }
	};

	#define CHARACTER_EMOTIONS_SITUATIONAL_DANGER_BLOCK_ID { 0x179C04A, 0x3DF54E17, 0x82454233, 0x232E950C }
	TAG_STRUCT(
		character_emotions_situational_danger_block,
		"character_emotions_situational_danger_block",
		"character_emotions_situational_danger_block",
		"s_character_emotions_situational_danger_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_EMOTIONS_SITUATIONAL_DANGER_BLOCK_ID)
	{
		{ _field_short_enum, "highest prop class", "The prop class that this block is describing", &prop_class_enum },
		FIELD_PAD("obligatory pad", 2),
		{ _field_real, "situational danger", "What should be the situational danger level for the prop class selected above" },
		{ _field_terminator }
	};

	STRINGS(prop_class_enum)
	{
		"none - actor has no targets whatsoever",
		"dead enemy- my only target is a dead enemy",
		"non-attacking enemy- I am debilitated and the enemy is not attacking me",
		"disregarded orphan- did not find my target and gave up searching",
		"inspected orphan- checked last know position and didn\'t find target; still searching",
		"uninspected orphan- can\'t see target, but have a good idea where they may be",
		"certain orphan- can\'t see target, but know exactly where they are",
		"visible enemy- I can see the target",
		"nearby enemy- I can see the target, and it\'s close",
		"potentially dangerous enemy- target is near and is facing me",
		"dangerous enemy- target is facing my way and fighting",
		"attacking enemy- target is aiming at me and shooting me",
		"very close enemy- enemy is really close",
		"damaging_enemy- enemy is damaging me"
	};
	STRING_LIST(prop_class_enum, prop_class_enum_strings, _countof(prop_class_enum_strings));

	#define CHARACTER_ENGAGE_BLOCK_ID { 0xFFA4E45D, 0x10024F2F, 0xB4987122, 0x213E9865 }
	TAG_STRUCT(
		character_engage_block,
		"character_engage_block",
		"character_engage_block",
		"s_character_engage_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_ENGAGE_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &engage_flags },
		{ _field_real_bounds, "Reposition bounds", "How long should I remain at a firing position before moving? (0 values will use the default values of 6 and 7 seconds)", "s" },
		{ _field_real, "Crouch danger threshold", "When danger rises above the threshold, the actor crouches" },
		{ _field_real, "Stand danger threshold", "When danger drops below this threshold, the actor can stand again." },
		{ _field_real, "Fight danger move threshold", "When danger goes above given level, this actor switches firing positions" },
		{ _field_short_integer_bounds, "Fight danger move threshold cooldown", "Wait at least this many ticks before relocating due to danger", "ticks" },
		{ _field_real, "fight flank chance", "Chance of flanking when fighting someone who isn't paying attention to me", nullptr, "[0-1]" },
		{ _field_tag_reference, "override grenade projectile", "when I throw a grenade, forget what type I officially have: throw this type of projectile instead", &projectile_group_reference$2 },
		{ _field_real, "minimum throw distance", "Targets closer than this distance will not be attacked with a throw" },
		{ _field_real, "maximum throw distance", "Targets beyond this distance will not be attacked with a throw" },
		{ _field_real, "throw search radius", "How far does actor search for throwable items" },
		{ _field_angle, "throw search angle", "Angle (degrees) that the actor searches for throwable items (from his facing direction)" },
		{ _field_real, "maximum throw force", "Maximum throw force - it will not be used all the time" },
		{ _field_real, "throw target point offset", "Vertical offset from target position on ground where throw is aimed" },
		{ _field_real, "throw delay min", "How many seconds MUST pass until another throw is attempted" },
		{ _field_real, "throw delay max", "Up to how many seconds can elapse until another throw is attempted" },
		{ _field_real_bounds, "default combat range", "If we are not holding a weapon, or we don't know how to use our weapon, use these bounds on my combat range", "wus" },
		{ _field_real_bounds, "default firing range", "If we don't know how to use our weapon, use these bounds on my firing range", "wus" },
		{ _field_real_fraction, "Preferred engage fraction ", "0 will default to .3, other is ratio from min to max combat range preferred" },
		{ _field_real, "Active Shield Fire Cutoff Delay", "Number of seconds elapsed before stop firing at active shielded target." },
		{ _field_terminator }
	};

	STRINGS(engage_flags)
	{
		"engage perch",
		"fight constant movement",
		"flight fight constant movement",
		"disallow combat crouching",
		"disallow crouch shooting",
		"fight stable",
		"throw should lob",
		"allow positioning beyond ideal range",
		"can suppress"
	};
	STRING_LIST(engage_flags, engage_flags_strings, _countof(engage_flags_strings));

	TAG_REFERENCE(projectile_group_reference$2, PROJECTILE_TAG);

	#define CHARACTER_ENGINEER_BLOCK_ID { 0xDE4C5EE8, 0xA6B4E9A, 0x91405D14, 0xE4B95DED }
	TAG_STRUCT(
		character_engineer_block,
		"character_engineer_block",
		"character_engineer_block",
		"s_character_engineer_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_ENGINEER_BLOCK_ID)
	{
		{ _field_real, "death height", "try and rise this amount before dying", "wu" },
		{ _field_real, "death rise time", "spend this time rising", "seconds" },
		{ _field_real, "death detonation time", "spend this time detonating", "seconds" },
		{ _field_real, "shield boost radius max", "Boost the shields of allies within this radius during combat" },
		{ _field_real, "shield boost period", "Time between shield boost pings from the engineer", "seconds" },
		{ _field_string_id, "shield boost damage section name", "The name of the damage section which will be activated by the engineer shield boost" },
		FIELD_EXPLANATION("Detonation Thresholds", "If shield vitality AND body vitality fall below the thresholds below, detonate"),
		{ _field_real, "detonation shield threshold" },
		{ _field_real, "detonation body vitality" },
		{ _field_real, "proximity radius", "if target enters within this radius, either detonate or deploy equipment", "wus" },
		{ _field_real, "proximity detonation chance", "chance of detonating if target enters the drain radius radius" },
		{ _field_tag_reference, "proximity equipment", "if target enters radius and detonation is not chosen, deploy this equipment.", &equipment_group_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(equipment_group_reference$2, EQUIPMENT_TAG);

	#define CHARACTER_EQUIPMENT_BLOCK_ID { 0xA874BCDC, 0xB16E4667, 0x8F2752A7, 0x8B39612C }
	TAG_STRUCT(
		character_equipment_block,
		"character_equipment_block",
		"character_equipment_block",
		"s_character_equipment_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_EQUIPMENT_BLOCK_ID)
	{
		FIELD_EXPLANATION("Equipment", "Create one of these for each equipment type that you would like a character to be able to use. If you specify a relative drop chance of greater than zero then the character will use and drop this type of equipment with that (relative) chance. If you leave the equipment field empty, then there will be that (relative) chance of using and dropping no equipment at all."),
		{ _field_tag_reference, "equipment", "The equipment item that is to be usable", &equipment_group_reference$2 },
		{ _field_long_flags, "flags", &character_equipment_def_bits },
		{ _field_real, "relative drop chance", "The relative chance of this equipment being dropped with respect to the other pieces of equipment specified in this block" },
		{ _field_block, "equipment use", &character_equipment_usage_block_block },
		{ _field_terminator }
	};

	STRINGS(character_equipment_def_bits)
	{
		"Stop If No Energy"
	};
	STRING_LIST(character_equipment_def_bits, character_equipment_def_bits_strings, _countof(character_equipment_def_bits_strings));

	#define CHARACTER_EQUIPMENT_USAGE_BLOCK_ID { 0x939EDFAC, 0xD412484C, 0xA111DAFC, 0xFD7D8FBE }
	TAG_STRUCT(
		character_equipment_usage_block,
		"character_equipment_usage_block",
		"character_equipment_usage_block",
		"s_character_equipment_usage_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_EQUIPMENT_USAGE_BLOCK_ID)
	{
		FIELD_EXPLANATION("Equipment Use", "How should I use this equipment?"),
		{ _field_short_enum, "use when", "When should we use this equipment?", &character_equipment_usage_when_enum },
		{ _field_short_enum, "use how", "How should we use this equipment?", &character_equipment_usage_how_enum },
		FIELD_EXPLANATION("Skip Fraction", "Given that we have decided to use this equipment, should we do so? (0= always use it, 1= never use it). Heroic skip fraction is the average of normal and legendary chances."),
		{ _field_real, "easy/normal", nullptr, "0-1" },
		{ _field_real, "legendary", nullptr, "0-1" },
		{ _field_terminator }
	};

	STRINGS(character_equipment_usage_when_enum)
	{
		"combat",
		"cover",
		"shield",
		"health",
		"uncover",
		"berserk",
		"investigate",
		"anti vehicle"
	};
	STRING_LIST(character_equipment_usage_when_enum, character_equipment_usage_when_enum_strings, _countof(character_equipment_usage_when_enum_strings));

	STRINGS(character_equipment_usage_how_enum)
	{
		"Attach to self",
		"Throw at enemy",
		"Throw at feet",
		"Use on self",
		"Stop using on self"
	};
	STRING_LIST(character_equipment_usage_how_enum, character_equipment_usage_how_enum_strings, _countof(character_equipment_usage_how_enum_strings));

	#define CHARACTER_EVASION_BLOCK_ID { 0x9687EC75, 0x60294108, 0xAD4F6DCE, 0x6CA5ED35 }
	TAG_STRUCT(
		character_evasion_block,
		"character_evasion_block",
		"character_evasion_block",
		"s_character_evasion_block",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_EVASION_BLOCK_ID)
	{
		{ _field_real, "Evasion danger threshold", "Consider evading when immediate danger surpasses threshold" },
		{ _field_real, "Evasion delay timer", "Wait at least this delay between evasions" },
		{ _field_real, "Evasion chance", "If danger is above threshold, the chance that we will evade. Expressed as chance of evading within a 1 second time period" },
		{ _field_real, "Evasion proximity threshold", "If target is within given proximity, possibly evade" },
		{ _field_real, "dive retreat chance", "Chance of retreating (fleeing) after danger avoidance dive" },
		{ _field_terminator }
	};

	#define CHARACTER_FIGHT_CIRCLE_BLOCK_ID { 0xA53B9A5E, 0x1632455A, 0x9A7974F8, 0xDE0289A8 }
	TAG_STRUCT(
		character_fight_circle_block,
		"character_fight_circle_block",
		"character_fight_circle_block",
		"s_character_fight_circle_block",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_FIGHT_CIRCLE_BLOCK_ID)
	{
		{ _field_real_bounds, "Strafe Time ", "Time spent facing the player and strafing after reaching a position." },
		{ _field_real_bounds, "Extra Firing Time ", "Time after strafe that trigger is held down." },
		{ _field_real, "Target Patience Time ", "Time allowed for turning back onto target at FP, not always counted against firing time." },
		{ _field_angle, "Max Angle From ThreatAxis ", "Angle used by outside of spring evaluator, including rejector." },
		{ _field_angle, "Nearby Inner Angle ", "Angle within which the nearby evaluator considers the point fully preferred." },
		{ _field_angle, "Nearby Outer Angle ", "Angle outside which the nearby evaluator considers the point fully avoided." },
		{ _field_string_id, "strafe throttle style ", "Throttle used in slow strafe mode" },
		{ _field_string_id, "move throttle style ", "Throttle used moving to next firing point" },
		{ _field_terminator }
	};

	#define CHARACTER_FIRING_PATTERN_BLOCK_ID { 0xFDC8C8F2, 0x93EA4195, 0xB31795C5, 0x1EBD8EE6 }
	TAG_STRUCT(
		character_firing_pattern_block,
		"character_firing_pattern_block",
		"character_firing_pattern_block",
		"s_character_firing_pattern_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_FIRING_PATTERN_BLOCK_ID)
	{
		{ _field_real, "rate of fire", "how many times per second we pull the trigger (zero = continuously held down)" },
		{ _field_real, "target tracking", "how well our bursts track moving targets. 0.0= fire at the position they were standing when we started the burst. 1.0= fire at current position", nullptr, "[0,1]" },
		{ _field_real, "target leading", "how much we lead moving targets. 0.0= no prediction. 1.0= predict completely.", nullptr, "[0,1]" },
		FIELD_EXPLANATION("burst geometry", "at the start of every burst we pick a random point near the target to fire at, on either the left or the right side.\nthe burst origin angle controls whether this error is exactly horizontal or might have some vertical component.\n\nover the course of the burst we move our projectiles back in the opposite direction towards the target. this return motion is also controlled by an angle that specifies how close to the horizontal it is.\n\nfor example if the burst origin angle and the burst return angle were both zero, and the return length was the same as the burst length, every burst would start the same amount away from the target (on either the left or right) and move back to exactly over the target at the end of the burst."),
		{ _field_real, "burst origin radius", "how far away from the target the starting point is", "world units" },
		{ _field_angle, "burst origin angle", "the range from the horizontal that our starting error can be", "degrees" },
		{ _field_real_bounds, "burst return length", "how far the burst point moves back towards the target (could be negative)", "world units" },
		{ _field_angle, "burst return angle", "the range from the horizontal that the return direction can be", "degrees" },
		{ _field_real_bounds, "burst duration", "how long each burst we fire is", "seconds" },
		{ _field_real_bounds, "burst separation", "how long we wait between bursts", "seconds" },
		{ _field_real, "weapon damage modifier", "what fraction of its normal damage our weapon inflicts (zero = no modifier)" },
		{ _field_angle, "projectile error", "error added to every projectile we fire", "degrees" },
		{ _field_angle, "burst angular velocity", "the maximum rate at which we can sweep our fire (zero = unlimited)", "degrees per second" },
		{ _field_angle, "maximum error angle", "cap on the maximum angle by which we will miss target (restriction on burst origin radius", "degrees" },
		{ _field_terminator }
	};

	#define CHARACTER_FIRING_PATTERN_PROPERTIES_BLOCK_ID { 0x4E8188E8, 0x5675447A, 0x8BA0A9FD, 0x607FA555 }
	TAG_STRUCT(
		character_firing_pattern_properties_block,
		"character_firing_pattern_properties_block",
		"character_firing_pattern_properties_block",
		"s_character_firing_pattern_properties_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_FIRING_PATTERN_PROPERTIES_BLOCK_ID)
	{
		{ _field_tag_reference, "weapon", &weapon_group_reference$3 },
		{ _field_block, "firing patterns", &character_firing_pattern_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(weapon_group_reference$3, WEAPON_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define CHARACTER_FIRING_POINT_EVALUATOR_BLOCK_STRUCT_ID { 0xF6ACCC56, 0x24CC4D12, 0xA121674C, 0x192ACCC5 }
	TAG_STRUCT(
		character_firing_point_evaluator_block_struct,
		"character_firing_point_evaluator_block_struct",
		"character_firing_point_evaluator_block_struct",
		"s_character_firing_point_evaluator_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_FIRING_POINT_EVALUATOR_BLOCK_STRUCT_ID)
	{
		{ _field_long_enum, "mode", &evaluation_modes },
		FIELD_CUSTOM("value", _field_id_default),
		FIELD_EXPLANATION("DESIGNERS BEWARE", "If you want to screw the AI up, here\'s a great place to start. Please try not to."),
		{ _field_block, "evaluators", &evaluator_definition_block_block, _tag_field_attributed_definition_block_grid_view_by_default },
		{ _field_terminator }
	};

	STRINGS(evaluation_modes)
	{
		"fight",
		"panic",
		"cover",
		"uncover",
		"guard",
		"pursue",
		"avoid",
		"vehicle_cover",
		"postsearch",
		"cover_fight",
		"cover_evasion"
	};
	STRING_LIST(evaluation_modes, evaluation_modes_strings, _countof(evaluation_modes_strings));

	#define CHARACTER_FLOCKING_BLOCK_ID { 0xD497EF97, 0x721C41A5, 0x8BCF6C55, 0x9EC4938A }
	TAG_STRUCT(
		character_flocking_block,
		"character_flocking_block",
		"character_flocking_block",
		"s_character_flocking_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_FLOCKING_BLOCK_ID)
	{
		FIELD_EXPLANATION("Jaime, don't touch this", "Ever."),
		{ _field_real, "deceleration distance" },
		{ _field_real, "normalized speed" },
		{ _field_real, "buffer distance" },
		{ _field_real_bounds, "throttle threshold bounds" },
		{ _field_real, "deceleration stop time" },
		{ _field_terminator }
	};

	#define CHARACTER_FLYING_MOVEMENT_BLOCK_STRUCT_ID { 0x4E812719, 0xBFBB4F46, 0xB4BA4A05, 0xD34F70DC }
	TAG_STRUCT(
		character_flying_movement_block_struct,
		"character_flying_movement_block_struct",
		"character_flying_movement_block_struct",
		"s_character_flying_movement_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_FLYING_MOVEMENT_BLOCK_STRUCT_ID)
	{
		{ _field_tag_reference, "vehicle", &unit_group_reference$2 },
		FIELD_CUSTOM("value", _field_id_default),
		FIELD_EXPLANATION("Vector Weights", "Think of this as firing point evaluation; how much do we want to weight each of the various vectors affecting our movement in space."),
		{ _field_real, "facing", "How much our current movement vector affects our new vector selection." },
		{ _field_real, "perturbation", "How much random deviation is applied to our vector selection." },
		{ _field_real, "volume avoidance", "How strongly we avoid our containing volume." },
		{ _field_real, "volume perturbation", "How strongly we are randomly perturbed by our containing volume." },
		{ _field_real, "volume cover", "How strongly are we attracted toward cover points." },
		{ _field_real, "flocking", "How much of a tendancy to flock we have." },
		{ _field_real, "target", "The weight of our movement towards our current target." },
		{ _field_real, "target tail", "The weight of our movement intended to keep our target in our tail." },
		FIELD_EXPLANATION("Area Selection", nullptr),
		{ _field_real_bounds, "area reselect time", "The time bounds on how long we should stay in an area before moving to another area.", "seconds" },
		FIELD_EXPLANATION("Idle", nullptr),
		{ _field_real_bounds, "idle time", "How long before reselecting a destination while idling.", "seconds" },
		FIELD_EXPLANATION("Cover", nullptr),
		{ _field_real_bounds, "unsafe cover reselect time", "How long after being exposed in cover before we reselect new cover.", "seconds" },
		{ _field_real_bounds, "cover heading reselect time", "The frequency at which we pick a new cover point on our current piece of cover.", "seconds" },
		{ _field_real, "max cover search distance", "The farthest from ourselves that we will search for cover.", "wu" },
		{ _field_real, "max cover impulse distance", "The farthest our target can be from us when decided if we should go to cover.", "wu" },
		{ _field_real_bounds, "spline cooldown time", "The number of seconds we wait after traveling a spline to travel a spline again.", "wu" },
		FIELD_EXPLANATION("Volume Avoidance", nullptr),
		{ _field_real, "volume influence distance", "How far our volume influences our movement", "wu" },
		{ _field_real, "volume perturbation phase", "What is the frequency of oscillation of our volume perturbation vector", "seconds" },
		{ _field_real, "volume bounding distance", "How far we are allowed outside our volume before we started being forced to return (must be >= 0)", "wu" },
		FIELD_EXPLANATION("Approach", nullptr),
		{ _field_real, "volume approach distance", "If our target is this close to our containing volume, then start attacking him", "wu" },
		{ _field_real, "volume break off distance", "While attacking our target, if we get this far outside our containing volume, break off the attack and return home", "wu" },
		{ _field_real, "minimum approach distance", "When this close to our target we will drop into the evade behaviour instead", "wu" },
		{ _field_real_bounds, "collision avoidance range", "Zero collision avoidance at the high distance, Max avoidance at the low distance.", "wu" },
		FIELD_EXPLANATION("Evasion", nullptr),
		{ _field_real_bounds, "evade time", "Bounds on how long we should evade for", "seconds" },
		{ _field_real_fraction, "evade body damage threshold", "The recent body damage we should sustain before trying to evade.", nullptr, "[0,1]" },
		{ _field_real_fraction, "evade shield damage threshold", "The recent shield damage we should sustain before trying to evade.", nullptr, "[0,1]" },
		{ _field_real, "bogey retreat time", "How long we tolerate a bogey in our six, before we retreat back to our area.", "seconds" },
		{ _field_real, "bogey retreat distance", "How close a bogey has to be before we'll even consider retreating.", "wu" },
		FIELD_EXPLANATION("Flocking", nullptr),
		{ _field_real_bounds, "flock radius", "Distance controls for flocking", "wu" },
		{ _field_angle, "forward follow angle", "How close we must be facing another friend to consider following him during flocking.", "degrees" },
		{ _field_angle, "behind follow angle", "The angle of the 'cone' behind a friend who I am interested in following that I must be in to consider him during flocking.", "degrees" },
		FIELD_EXPLANATION("Tailing", nullptr),
		{ _field_real, "min tailing time", "The minimum amount of time we can be tailing", "seconds" },
		{ _field_real_bounds, "tailing radius", "Distance controls for tailing", "wu" },
		{ _field_angle, "tailing cone angle", "The angle of the 'cone' behind a foe who I am interested in tailing after approaching.", "degrees" },
		FIELD_EXPLANATION("Strafing", nullptr),
		{ _field_real, "volume strafe distance", "If our target is this close to our containing volume, then start strafing him", "wu" },
		{ _field_real, "strafe min distance", "I need to be at least this far away from my target to consider strafing him (2D)", "wu" },
		{ _field_real, "strafe above distance", "How high above our target we will aim for when strafing", "wu" },
		{ _field_real, "strafe abort distance", "If I get this close to my target, stop strafing and retreat for a bit (2D)", "wu" },
		{ _field_real, "strafe timeout", "How long we go between strafes", "seconds" },
		FIELD_EXPLANATION("Attitude Control", nullptr),
		{ _field_angle, "max descend angle", "The maximum angle at which we can descend.", "degrees" },
		{ _field_angle, "max ascend angle", "The maximum angle at which we can ascend.", "degrees" },
		FIELD_EXPLANATION("Shooting", nullptr),
		{ _field_angle, "shooting cone angle", "The angle of the shooting cone along the vehicle facing.", "degrees" },
		FIELD_EXPLANATION("Evasive Maneuvers", nullptr),
		{ _field_real_fraction, "missile dodge change", "The chance that an AI will dodge incoming missiles.", "percentage" },
		{ _field_real, "ideal missile dodge distance", "The ideal distance a trick should take you away from danger.", "wu" },
		{ _field_terminator }
	};

	TAG_REFERENCE(unit_group_reference$2, UNIT_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define CHARACTER_FORERUNNER_BLOCK_ID { 0xC635622B, 0x79CB4A2B, 0xB84387A8, 0x761E8D04 }
	TAG_STRUCT(
		character_forerunner_block,
		"character_forerunner_block",
		"character_forerunner_block",
		"s_character_forerunner_block",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_FORERUNNER_BLOCK_ID)
	{
		{ _field_long_flags, "forerunner flags", &forerunner_flags },
		{ _field_real, "order minion charge chance ", "Chance lackeys are ordered to charge when shield depleted." },
		{ _field_real, "order minion charge radius ", "Radius within which lackeys can be ordered to charge." },
		{ _field_real, "minion charge min time ", "min time for lackey charge." },
		{ _field_real, "minion charge max time ", "max time for lackey charge." },
		{ _field_real_bounds, "Phase To Position distance bounds ", "Below min, no phase. as distance moves from low to high, chance moves from low to high probabilities" },
		{ _field_real_bounds, "Phase To Position Probability range ", "As distance moves from low to high, chance to phase moves from low to high values" },
		{ _field_terminator }
	};

	STRINGS(forerunner_flags)
	{
		"charge on command",
		"Teleport to combat pos"
	};
	STRING_LIST(forerunner_flags, forerunner_flags_strings, _countof(forerunner_flags_strings));

	#define CHARACTER_GENERAL_BLOCK_ID { 0x7BA5643F, 0x6CE843B7, 0xBFB797FF, 0xCCBFCABC }
	TAG_STRUCT(
		character_general_block,
		"character_general_block",
		"character_general_block",
		"s_character_general_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_GENERAL_BLOCK_ID)
	{
		{ _field_long_flags, "general flags", &general_flags },
		{ _field_short_enum, "type", &actor_type_enum },
		{ _field_short_integer, "rank", "the rank of this character, helps us work out who in a squad should be a leader (0 is lowly, 32767 is highest)" },
		{ _field_short_enum, "follower positioning", "where should my followers try and position themselves when I am their leader?", &combat_positioning_enum },
		FIELD_PAD("post-combat-position-padding", 2),
		{ _field_real, "max leader dist", "don't let my combat range get outside this distance from my leader when in combat (if 0 then defaults to 4wu)" },
		{ _field_real, "absolute max leader dist", "never select firing positions outside this range from the leader (if 0 then defaults to 8wu)" },
		{ _field_real, "max player dialogue dist", "never play dialogue if all players are outside of this range (if 0 then defaults to 20wu)" },
		{ _field_real, "scariness", "the inherent scariness of the character" },
		{ _field_short_enum, "default grenade type", &global_ai_grenade_type_enum },
		{ _field_short_enum, "behavior tree root", &behavior_tree_root_enum },
		{ _field_block, "disallowed weapons from trading", &disallowed_weapons_for_trading_block_block },
		{ _field_tag_reference, "Initial Primary Weapon ", "Overrides initial primary weapon set in unit tag.", &weapon_group_reference$4 },
		{ _field_tag_reference, "Initial Secondary Weapon ", "Overrides initial secondary weapon set in unit tag.", &weapon_group_reference$4 },
		{ _field_tag_reference, "Initial Equipment ", "Fallback used if initial equipment not specified as drop item or in scenario.", &equipment_group_reference$2 },
		{ _field_terminator }
	};

	STRINGS(general_flags)
	{
		"swarm",
		"flying",
		"dual wields",
		"uses gravemind",
		"gravemind chorus",
		"don\'t trade weapon",
		"don\'t stow weapon",
		"hero character",
		"leader independent positioning",
		"has active camo",
		"use head marker for looking",
		"space character",
		"do not drop equipment",
		"do not allow crouch",
		"do not allow moving crouch",
		"critical betrayal",
		"deathless critical betrayal"
	};
	STRING_LIST(general_flags, general_flags_strings, _countof(general_flags_strings));

	STRINGS(actor_type_enum)
	{
		"none",
		"player",
		"marine",
		"crew",
		"spartan",
		"elite",
		"jackal",
		"grunt",
		"brute",
		"hunter",
		"prophet",
		"bugger",
		"scarab",
		"engineer",
		"skirmisher",
		"bishop",
		"knight",
		"pawn",
		"rook",
		"mule",
		"mounted_weapon",
		"octopus"
	};
	STRING_LIST(actor_type_enum, actor_type_enum_strings, _countof(actor_type_enum_strings));

	STRINGS(combat_positioning_enum)
	{
		"In front of me",
		"Behind me",
		"Tight"
	};
	STRING_LIST(combat_positioning_enum, combat_positioning_enum_strings, _countof(combat_positioning_enum_strings));

	STRINGS(behavior_tree_root_enum)
	{
		"Default",
		"Scarab",
		"Flying"
	};
	STRING_LIST(behavior_tree_root_enum, behavior_tree_root_enum_strings, _countof(behavior_tree_root_enum_strings));

	#define CHARACTER_GRAVITY_JUMP_BLOCK_ID { 0x6E887EBF, 0xFC954576, 0x988E0565, 0xB0E53A42 }
	TAG_STRUCT(
		character_gravity_jump_block,
		"character_gravity_jump_block",
		"character_gravity_jump_block",
		"s_character_gravity_jump_block",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_GRAVITY_JUMP_BLOCK_ID)
	{
		{ _field_real, "Retreat Radius ", "Look for destination point within this distance." },
		{ _field_real, "Float Time ", "Time spent at top of leap." },
		{ _field_real, "Descend Gravity ", "Gravity multiplier during descent." },
		{ _field_real, "Slow descend time ", "Time spent before full gravity returns." },
		{ _field_real, "Jump Target Height ", "How high to attempt to jump for shot." },
		{ _field_real, "Target Attractor ", "works as a sort of damped spring to draw the character to its landing point. Bigger is faster." },
		{ _field_real, "Cooldown ", "Time before this character can gravjump again." },
		{ _field_real, "Trigger Distance ", "How close your enemy has to be to trigger the jump." },
		{ _field_terminator }
	};

	#define CHARACTER_GRENADES_BLOCK_ID { 0xA92D1ADC, 0x8092499A, 0xBDD03A7B, 0xD2F00083 }
	TAG_STRUCT(
		character_grenades_block,
		"character_grenades_block",
		"character_grenades_block",
		"s_character_grenades_block",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_GRENADES_BLOCK_ID)
	{
		{ _field_long_flags, "grenades flags", &grenades_flags },
		{ _field_short_enum, "grenade type", "type of grenades that we throw", FIELD_FLAG_INDEX, &global_grenade_type_enum },
		{ _field_short_enum, "trajectory type", "how we throw our grenades", &actor_grenade_trajectory_enum },
		FIELD_PAD("YZNPI", 2),
		{ _field_short_integer, "minimum enemy count", "how many enemies must be within the radius of the grenade before we will consider throwing there" },
		{ _field_real, "enemy radius", "we consider enemies within this radius when determining where to throw", "world units" },
		{ _field_real, "grenade ideal velocity", "how fast we LIKE to throw our grenades", "world units per second" },
		{ _field_real, "grenade velocity", "the fastest we can possibly throw our grenades", "world units per second" },
		{ _field_real_bounds, "grenade ranges", "ranges within which we will consider throwing a grenade", "world units" },
		{ _field_real, "collateral damage radius", "we won't throw if there are friendlies around our target within this range", "world units" },
		{ _field_real_fraction, "grenade chance", "how likely we are to throw a grenade in one second", nullptr, "[0,1]" },
		{ _field_real, "Active Shield Modifier", "Throw chance multiplied by this value when target is using active shield." },
		{ _field_real, "grenade throw delay", "How long we have to wait after throwing a grenade before we can throw another one", "seconds" },
		{ _field_real_fraction, "grenade uncover chance", "how likely we are to throw a grenade to flush out a target in one second", nullptr, "[0,1]" },
		{ _field_real_fraction, "anti-vehicle grenade chance", "how likely we are to throw a grenade against a vehicle", nullptr, "[0,1]" },
		FIELD_EXPLANATION("Grenade drop when killed", nullptr),
		{ _field_short_integer_bounds, "grenade count", "number of grenades that we start with" },
		{ _field_real, "dont drop grenades chance", "how likely we are not to drop any grenades when we die, even if we still have some", nullptr, "[0,1]" },
		{ _field_terminator }
	};

	STRINGS(grenades_flags)
	{
		"do not throw while bunkering",
		"allow while berserking"
	};
	STRING_LIST(grenades_flags, grenades_flags_strings, _countof(grenades_flags_strings));

	STRINGS(actor_grenade_trajectory_enum)
	{
		"toss",
		"lob",
		"bounce"
	};
	STRING_LIST(actor_grenade_trajectory_enum, actor_grenade_trajectory_enum_strings, _countof(actor_grenade_trajectory_enum_strings));

	#define CHARACTER_GUARDIAN_BLOCK_ID { 0x5124D50F, 0x18964EE9, 0xBF60FEAA, 0xB4BE29B8 }
	TAG_STRUCT(
		character_guardian_block,
		"character_guardian_block",
		"character_guardian_block",
		"s_character_guardian_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_GUARDIAN_BLOCK_ID)
	{
		{ _field_real, "surge time", "length of time for which the guardian surges", "seconds" },
		{ _field_real, "surge delay time", "minimum enforced delay between surges", "seconds" },
		{ _field_real, "proximity surge distance", "surge when our target gets closer than this to me (0 value defaults to 2wu)", "wu" },
		{ _field_real, "phase time", "length of time it takes the guardian to get to its phase destination", "seconds" },
		{ _field_real, "current position distance", "Minimum distance that I will consider phasing", "wu" },
		{ _field_real, "target position distance", "Minimum distance from my target that I will phase to", "wu" },
		{ _field_terminator }
	};

	#define CHARACTER_HAMSTRING_CHARGE_BLOCK_ID { 0x827B35C7, 0x10DA4D0E, 0xB73DCE79, 0x9C63C3E3 }
	TAG_STRUCT(
		character_hamstring_charge_block,
		"character_hamstring_charge_block",
		"character_hamstring_charge_block",
		"s_character_hamstring_charge_block",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_HAMSTRING_CHARGE_BLOCK_ID)
	{
		{ _field_angle, "Flank Angle ", "Angle from player facing where charge will begin." },
		{ _field_real, "Flank Distance ", "Distance from player before dropping into charge." },
		{ _field_real, "Outer Engage Distance ", "Close to this distance before picking target-relative flanking position." },
		{ _field_real, "Hamstring Delay ", "Time after last hamstring or melee attack that behavior is banned." },
		{ _field_real, "Initiate chance ", "Chance hamstring is initiated per second." },
		{ _field_real, "Max Rush Time ", "Time to close from flank range to melee charge range." },
		{ _field_real, "Melee Attack Time Min ", "Minimum time for terminal melee attack." },
		{ _field_real, "Melee Attack Time Max ", "Maximum time for terminal melee attack." },
		{ _field_terminator }
	};

	#define CHARACTER_HANDLE_DISMEMBERMENT_BLOCK_ID { 0x72BBED20, 0x6A4D4FDB, 0xA984C4F9, 0xB001C313 }
	TAG_STRUCT(
		character_handle_dismemberment_block,
		"character_handle_dismemberment_block",
		"character_handle_dismemberment_block",
		"s_character_handle_dismemberment_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_HANDLE_DISMEMBERMENT_BLOCK_ID)
	{
		FIELD_EXPLANATION("dismemberment props", nullptr),
		{ _field_string_id, "headshot freakout animation (animation string)" },
		{ _field_string_id, "limb dismembered animation (animation string)" },
		{ _field_tag_reference, "berserk persistent melee effect", &effect_group_reference$2 },
		{ _field_tag_reference, "alternate weapon", "If I lose my firing arm then I pull out a ...", &weapon_group_reference$4 },
		{ _field_terminator }
	};

	#define CHARACTER_HOP_STRUCT_ID { 0xCC9F15F6, 0x84624A2E, 0xAD8BA6B1, 0x8FA2A9CD }
	TAG_STRUCT(
		character_hop_struct,
		"character_hop_struct",
		"character_hop_struct",
		"s_character_hop_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_HOP_STRUCT_ID)
	{
		{ _field_real, "Min hop distance", "Pathing shorter than this, no hopping" },
		{ _field_real, "Min hop distance to path end", "Pathing shorter than this, no hopping to end of path" },
		{ _field_real_bounds, "Hop wait timer min/max", "Character will wait this random ranged timer before hopping again.(Seconds)" },
		{ _field_real, "Max hop distance", "Pathing longer than this, no hopping." },
		{ _field_real, "pad" },
		{ _field_terminator }
	};

	#define CHARACTER_HOPPING_BLOCK_ID { 0x93390CFA, 0x557348CB, 0xBF5426A6, 0x430122A2 }
	TAG_STRUCT(
		character_hopping_block,
		"character_hopping_block",
		"character_hopping_block",
		"s_character_hopping_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_HOPPING_BLOCK_ID)
	{
		{ _field_long_flags, "Hopping Flags", &hopping_flags },
		{ _field_block, "Hopping Definition", &characterhopdefinitionblock_block },
		{ _field_terminator }
	};

	STRINGS(hopping_flags)
	{
		"to cover path segements",
		"to end of path",
		"forward only"
	};
	STRING_LIST(hopping_flags, hopping_flags_strings, _countof(hopping_flags_strings));

	#define CHARACTER_IDLE_BLOCK_ID { 0x6C8BCFDB, 0x68E942AB, 0xA9EED157, 0xFC1CE1EA }
	TAG_STRUCT(
		character_idle_block,
		"character_idle_block",
		"character_idle_block",
		"s_character_idle_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_IDLE_BLOCK_ID)
	{
		FIELD_PAD("ZTG", 4),
		{ _field_real_bounds, "idle pose delay time", "time range for delays between idle poses", "seconds" },
		{ _field_real_bounds, "wander delay time", "time to pause at a point while wandering", "seconds" },
		{ _field_terminator }
	};

	#define CHARACTER_INSPECT_BLOCK_ID { 0xE542B59F, 0x2AFB47C3, 0xAD2D4FC3, 0xF3973A07 }
	TAG_STRUCT(
		character_inspect_block,
		"character_inspect_block",
		"character_inspect_block",
		"s_character_inspect_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_INSPECT_BLOCK_ID)
	{
		{ _field_real, "stop distance", "distance from object at which to stop and turn on the inspection light", "wu" },
		{ _field_real_bounds, "inspect time", "time which we should inspect each object for", "seconds" },
		{ _field_real_bounds, "search range", "range in which we should search for objects to inspect", "wu" },
		{ _field_terminator }
	};

	#define CHARACTER_INTERACT_BLOCK_ID { 0xB806ECFB, 0xD1E5457C, 0xBF5AE757, 0x521A93EB }
	TAG_STRUCT(
		character_interact_block,
		"character_interact_block",
		"character_interact_block",
		"s_character_interact_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_INTERACT_BLOCK_ID)
	{
		{ _field_real, "default maximum object interact range", nullptr, "wu" },
		{ _field_terminator }
	};

	#define CHARACTER_KUNGFU_BLOCK_ID { 0xE2DA6F85, 0x15E24373, 0xA3BFB379, 0x32BDFAF8 }
	TAG_STRUCT(
		character_kungfu_block,
		"character_kungfu_block",
		"character_kungfu_block",
		"s_character_kungfu_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_KUNGFU_BLOCK_ID)
	{
		{ _field_real, "kungfu override distance", "If the player is within this distance, open fire, even if your task is kungfu-fight disallowed", "wus" },
		{ _field_real, "kungfu cover danger threshold", "If you are kungfu disallowed and your danger is above this level, take cover" },
		{ _field_terminator }
	};

	#define CHARACTER_LOOK_BLOCK_ID { 0x6DC12D24, 0x206E4151, 0x94C93A4E, 0x24BF69B3 }
	TAG_STRUCT(
		character_look_block,
		"character_look_block",
		"character_look_block",
		"s_character_look_block",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_LOOK_BLOCK_ID)
	{
		{ _field_real_euler_angles_2d, "maximum aiming deviation", "how far we can turn our weapon", "degrees" },
		{ _field_real_euler_angles_2d, "maximum looking deviation", "how far we can turn our head", "degrees" },
		{ _field_real_euler_angles_2d, "runtime aiming deviation cosines" },
		{ _field_real_euler_angles_2d, "runtime looking deviation cosines" },
		{ _field_angle, "noncombat look delta L", "how far we can turn our head left away from our aiming vector when not in combat", "degrees" },
		{ _field_angle, "noncombat look delta R", "how far we can turn our head right away from our aiming vector when not in combat", "degrees" },
		{ _field_angle, "combat look delta L", "how far we can turn our head left away from our aiming vector when in combat", "degrees" },
		{ _field_angle, "combat look delta R", "how far we can turn our head right away from our aiming vector when in combat", "degrees" },
		{ _field_real_bounds, "noncombat idle looking", "rate at which we change look around randomly when not in combat", "seconds" },
		{ _field_real_bounds, "noncombat idle aiming", "rate at which we change aiming directions when looking around randomly when not in combat", "seconds" },
		{ _field_real_bounds, "combat idle looking", "rate at which we change look around randomly when searching or in combat", "seconds" },
		{ _field_real_bounds, "combat idle aiming", "rate at which we change aiming directions when looking around randomly when searching or in combat", "seconds" },
		{ _field_terminator }
	};

	#define CHARACTER_MORPH_BLOCK_ID { 0x91634ACB, 0x558445AD, 0xBA969F77, 0xA55E1C4C }
	TAG_STRUCT(
		character_morph_block,
		"character_morph_block",
		"character_morph_block",
		"s_character_morph_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_MORPH_BLOCK_ID)
	{
		{ _field_tag_reference, "ranged character", &character_group_reference$3 },
		{ _field_tag_reference, "tank character", &character_group_reference$3 },
		{ _field_tag_reference, "stealth character", &character_group_reference$3 },
		{ _field_tag_reference, "morph muffins", &muffin_group_reference$2 },
		{ _field_tag_reference, "ranged weapon", &weapon_group_reference$4 },
		{ _field_tag_reference, "tank weapon", &weapon_group_reference$4 },
		{ _field_tag_reference, "stealth weapon", &weapon_group_reference$4 },
		FIELD_EXPLANATION("Tank guy", nullptr),
		{ _field_real, "distance damage outer radius", "Considered damaging-outside-range when you START firing from outside this distance" },
		{ _field_real, "distance damage inner radius", "Considered damaging-outside-range when you CONTINUE firing from outside this distance" },
		{ _field_real, "distance damage time", "Damaging tank guy from outside-range for this long causes a morph" },
		{ _field_real, "distance damage reset time", "Damage timer is reset after this long of not damaging him from outside-range" },
		{ _field_real_bounds, "throttle distance", "Throttle the tank from running (far) to walking (near) across this range of distances. (defaults to 5 and 3)" },
		{ _field_real, "protect damage amount", "Once current damage reaches this amount, protect your special parts until no recent damage" },
		{ _field_real, "protect time", "How long should we protect our special parts for?", "seconds" },
		{ _field_tag_reference, "spew infection character", "What character should I throw up all over my target? Carrots?", &character_group_reference$3 },
		{ _field_real, "spew chance", "Probability of throwing up a bunch of infection forms when perimeterising" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "spew marker", "From whence should the infection forms cometh?" },
		{ _field_real_bounds, "spew frequency", "Min/max time between spawning each infection form during spew. (defaults to 0.1 and 0.3)", "seconds" },
		FIELD_EXPLANATION("Stealth dude", nullptr),
		{ _field_real, "stealth morph distance threshold", "Morphing inside this range causes a tank guy, outside this range causes a ranged fella" },
		{ _field_real, "stealth morph damage threshold", "Percentage of body health he has to be taken down in order to cause a morph" },
		{ _field_real, "stalk range min", "We want to stalk our target from outside this radius" },
		{ _field_real, "stalk range max", "We want to stalk our target from inside this radius" },
		{ _field_real, "stalk range hard max", "We will never be able to pick a firing position more than this far from our target" },
		{ _field_real, "stalk charge chance", "While stalking, charge randomly with this probability per second (also will charge when on periphery, this is just some spice)" },
		FIELD_EXPLANATION("Ranged bloke", nullptr),
		{ _field_real, "ranged proximity distance", "Morph to tank/stalker when someone gets this close to me as a ranged form" },
		{ _field_real, "turtle damage threshold", "amount of damage necessary to trigger a turtle" },
		{ _field_real_bounds, "turtle time", "when turtling, turtle for a random time with these bounds:seconds" },
		{ _field_real, "turtle distance", "when I turtle I send out a stimulus to friends within this radius to also turtle:wus" },
		{ _field_real, "turtle abort distance", "when my target get within this range, abort turtling" },
		FIELD_EXPLANATION("General", nullptr),
		{ _field_real, "group morph range", "Follow the morph of any other form within this distance" },
		{ _field_terminator }
	};

	TAG_REFERENCE(muffin_group_reference$2, MUFFIN_TAG);

	#define CHARACTER_MOVEMENT_BLOCK_ID { 0x5CD8B49C, 0xA6B74173, 0xA61C4E79, 0x2F6BF8CF }
	TAG_STRUCT(
		character_movement_block,
		"character_movement_block",
		"character_movement_block",
		"s_character_movement_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_MOVEMENT_BLOCK_ID)
	{
		{ _field_long_flags, "movement flags", &movement_flags },
		{ _field_real, "pathfinding radius" },
		{ _field_real, "avoidance radius", "If 0, uses pathfinding radius." },
		{ _field_real, "destination radius" },
		FIELD_EXPLANATION("Danger Zone Avoidance", "These values govern how we should avoid danger zones (like grenades and vehicles). If their sum is less than 1 then neither action will occur and instead we\'ll just try to walk out of the way with that remaining probability."),
		{ _field_real, "armor lock chance", "Chance the AI will use their armor lock equipment, assuming they have it" },
		{ _field_real, "grenade stuck armor lock chance", "Chance the AI will use their armor lock equipment if they have been stuck with a grenade, assuming they have it" },
		{ _field_real, "armor lock safety duration", "The number of seconds we will stay in armor lock for after danger has passed (default 1 second)" },
		{ _field_real, "armor lock max duration", "The longest we will stay in armor lock for regardless of danger (default 5 seconds)" },
		{ _field_real, "armor lock cooldown", "We won't go into armor lock again for this many seconds (default 0 seconds)" },
		{ _field_real, "dive grenade chance" },
		{ _field_real, "brace grenade chance" },
		{ _field_short_enum, "obstacle leap min size", &obstacle_ignore_enum },
		{ _field_short_enum, "obstacle leap max size", &obstacle_ignore_enum },
		{ _field_short_enum, "obstacle ignore size", &obstacle_ignore_enum },
		{ _field_short_enum, "obstacle smashable size", &obstacle_ignore_enum },
		FIELD_PAD("RQEMJY", 2),
		{ _field_short_enum, "jump height", &global_ai_jump_height_enum },
		{ _field_real, "maximum leap height", ".How high can a crate be for this unit to leap it.", "wus" },
		{ _field_real, "leap proximity fraction", "How close to the obstacle should the actor be before leaping 1- too close, 0- as soon as he becomes aware of it", nullptr, "[0-1]" },
		{ _field_real, "avoidance volume turn penalty distance", "The maximum distance penalty applied to an avoidance volume search path if we're facing away from the path. 1000 wu good for space, 5 wu good for ground.", "wus" },
		{ _field_long_flags, "movement hints", &movement_hint_enum },
		FIELD_GROUP_BEGIN("Throttle and inertia"),
		{ _field_long_integer, "minimum movement ticks", "We will move at least this long in a single direction when starting movement", "ticks" },
		{ _field_real, "minimum movement ticks reset angle", "If the character changes movement direction by more than this angle, he will have to move for at least minimum movement ticks until he can change his mind.", "degrees" },
		{ _field_block, "change direction pause", &movement_stationary_pause_block_block },
		{ _field_real, "maximum throttle", "The character will never throttle beyond this value", nullptr, "[0-1]" },
		{ _field_real, "minimum throttle", "The character will not throttle below this value", nullptr, "[0-1]" },
		{ _field_block, "movement throttle control", &movement_throttle_control_block_block },
		{ _field_real, "minimum juke throttle", "The character will consider juking at this throttle and above", nullptr, "[0-1]" },
		{ _field_angle, "minimum direction change juke angle", "If we change movement direction by more this angle, we will attempt a juke", "deg" },
		{ _field_real, "non direction change juke probability", "Probability to do a juke for a given tick, even if you are not planning to change direction (and provided you have not already performed a juke within the timeout time" },
		{ _field_real, "non direction change juke timeout", "After you do a change or no change of direction juke, you cannot perform a NON directional change juke for at least this many seconds. Direction change jukes will still happen", "seconds" },
		{ _field_long_integer, "minimum post juke movement ticks", "How many ticks should the actor keep moving after a juke? This may lower juke frequency.", "ticks" },
		FIELD_GROUP_END(),
		{ _field_real, "stationary turn radius", "If this actor translates during turn animations, enter a radius that encloses the translation.", nullptr, "[wu]" },
		{ _field_real, "localized move distance", "Distance to move as per the move_localized firing position evaluator (0 value resolves to 5wu)", nullptr, "[wu]" },
		{ _field_real_bounds, "move distance", "Distance to move as per the move_distance firing position evaluator (0 value resolves to 5wu for min, 10wu for max)", nullptr, "[wu]" },
		{ _field_real_bounds, "vehicle move distance", "Distance to move as per the vehicle_move_distance firing position evaluator (0 value resolves to 5wu for min, 10wu for max)", nullptr, "[wu]" },
		{ _field_real, "turn and run distance from target", "Actor will face away from his target and run to his destination if his target at a larger distance than this", "wus" },
		{ _field_real, "turn and run distance to destination", "Firing point must be at least this distance away from the actor for him to consider turning and running to it", "wus" },
		{ _field_real, "follow unit buffer distance", "When following a unit, such as the player, this is the additional buffer outside of the task follow radius that we are allowed to position ourselves before full firing position avoidance kicks in", "wus" },
		FIELD_GROUP_BEGIN("Phasing"),
		{ _field_real, "phase chance" },
		{ _field_real, "phase delay seconds", "don't attempt again before given time since last phase" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Movement Facing"),
		FIELD_EXPLANATION("Movement Facing", "Characters using composite animations can choose to align their facing with their aim-target or their destination. These settings control how the facing is determined."),
		{ _field_real, "Departure Distance Min", "min distance from departure point where facing should be aligned with aim" },
		{ _field_real, "Departure Distance Range", "max distance from departure point where facing should be aligned with heading" },
		{ _field_real, "Arrival Distance Min", "min distance from destination point where facing should be aligned with aim" },
		{ _field_real, "Arrival Distance Range", "max distance from destination point where facing should be aligned with heading" },
		{ _field_angle, "Maximum Deviation Angle", "how far we will allow the facing to deviate from the preference." },
		FIELD_GROUP_END(),
		{ _field_struct, "smooth throttle", "Allows characters to be smooth throttle changes.", &smooththrottlestruct },
		{ _field_struct, "smooth stopping", "Allows characters to slow down smoothly when stopping.", &smoothstoppingstruct },
		{ _field_terminator }
	};

	STRINGS(movement_flags)
	{
		"danger crouch allow movement",
		"no side-step",
		"prefer to combar near friends",
		"allow boosted jump",
		"perch",
		"climb",
		"prefer wall movement",
		"has flying mode",
		"disallow crouch",
		"disallow all movement",
		"always use search points",
		"keep moving",
		"cure isolation jump",
		"gain elevation",
		"reposition distant",
		"only use aerial firing positions",
		"use high priority pathfinding",
		"lower weapon when no alert movement override",
		"phase",
		"no override when firing",
		"no stow during idle activities",
		"flip any vehicle"
	};
	STRING_LIST(movement_flags, movement_flags_strings, _countof(movement_flags_strings));

	STRINGS(obstacle_ignore_enum)
	{
		"none",
		"tiny",
		"small",
		"medium",
		"large",
		"huge",
		"immobile"
	};
	STRING_LIST(obstacle_ignore_enum, obstacle_ignore_enum_strings, _countof(obstacle_ignore_enum_strings));

	STRINGS(global_ai_jump_height_enum)
	{
		"NONE",
		"down",
		"step",
		"crouch",
		"stand",
		"storey",
		"tower",
		"infinite"
	};
	STRING_LIST(global_ai_jump_height_enum, global_ai_jump_height_enum_strings, _countof(global_ai_jump_height_enum_strings));

	STRINGS(movement_hint_enum)
	{
		"vault step",
		"vault crouch",
		"unused0!",
		"unused1!",
		"unused2!",
		"mount step",
		"mount crouch",
		"mount stand",
		"unused3!",
		"unused4!",
		"unused5!",
		"hoist crouch",
		"hoist stand",
		"unused6!",
		"unused7!",
		"unused8!"
	};
	STRING_LIST(movement_hint_enum, movement_hint_enum_strings, _countof(movement_hint_enum_strings));

	#define CHARACTER_MOVEMENT_SET_BLOCK_ID { 0x8AACE34C, 0x21794221, 0xA8F6C67C, 0xC7525D2D }
	TAG_STRUCT(
		character_movement_set_block,
		"character_movement_set_block",
		"character_movement_set_block",
		"s_character_movement_set_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_MOVEMENT_SET_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "variants", &movement_mapping_block_block },
		{ _field_terminator }
	};

	#define CHARACTER_PACK_STALK_BLOCK_ID { 0x9DC1DCD2, 0x4E0F4B6D, 0x85C5FC36, 0x45F409B9 }
	TAG_STRUCT(
		character_pack_stalk_block,
		"character_pack_stalk_block",
		"character_pack_stalk_block",
		"s_character_pack_stalk_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_PACK_STALK_BLOCK_ID)
	{
		{ _field_real, "Min Wander Distance ", "Minimum distance pack must move when search for new cover position." },
		{ _field_real, "Outside Area Border ", "Distance target must be from pack's assigned area before stalk triggers." },
		{ _field_real_bounds, "Position Update Delay ", "Random time each member will wait before following leader." },
		{ _field_real_fraction, "Throttle In Cover ", "Throttle used when slowing down behind cover." },
		{ _field_terminator }
	};

	#define CHARACTER_PAIN_SCREEN_BLOCK_ID { 0x4D243C14, 0x8FBA45C3, 0xB6D62008, 0xAB62A9B1 }
	TAG_STRUCT(
		character_pain_screen_block,
		"character_pain_screen_block",
		"character_pain_screen_block",
		"s_character_pain_screen_block",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_PAIN_SCREEN_BLOCK_ID)
	{
		FIELD_EXPLANATION("Pain Reactions", nullptr),
		{ _field_real, "pain screen duration", "The duration of the pain function\n0 defaults to 0.5", "seconds" },
		{ _field_real, "pain screen region fade out duration", "The time it takes to fade out a damage region that is no longer the most recent damage region to be hit", "seconds" },
		{ _field_real_fraction, "pain screen region fade out weight threshold", "The threshold weight below which the focus channel must fall before we can cross fade to another region.", nullptr, "[0,1]" },
		{ _field_angle, "pain screen angle tolerance", "The tolerance angle between next and previous damage directions, below which we randomly vary the ping direction.", "degrees" },
		{ _field_angle, "pain screen angle randomness", "The maximum random angle to vary the incoming ping direction by if it's too close to the previous ping.", "degrees" },
		FIELD_EXPLANATION("Defensive Reactions", nullptr),
		{ _field_real, "defensive screen duration", "The duration of the defensive function\n0 defaults to 2.0", "seconds" },
		{ _field_real_fraction, "defensive screen scrub fallback fraction", "When receiving multiple pings, this is the min percentage of the defensive screen scrub value will fallback to.", nullptr, "[0,1]" },
		{ _field_terminator }
	};

	#define CHARACTER_PALETTE_BLOCK_ID { 0xF0B3F635, 0xE3E84977, 0xA29C814A, 0x90050BA2 }
	TAG_STRUCT(
		character_palette_block,
		"character_palette_block",
		"character_palette_block",
		"s_character_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "reference", &character_group_reference$6 },
		{ _field_terminator }
	};

	TAG_REFERENCE(character_group_reference$6, CHARACTER_TAG);

	#define CHARACTER_PALETTE_CHOICE_BLOCK_STRUCT_ID { 0xBB2A944A, 0xC1B74085, 0x8E86FA6B, 0xFDD8D702 }
	TAG_STRUCT(
		character_palette_choice_block_struct,
		"character_palette_choice_block_struct",
		"character_palette_choice_block_struct",
		"s_character_palette_choice_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_PALETTE_CHOICE_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "place on", &ai_spawn_conditions_struct },
		{ _field_short_block_index, "character type", &character_palette_block_block },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_integer, "chance" },
		{ _field_terminator }
	};

	#define CHARACTER_PERCEPTION_BLOCK_STRUCT_ID { 0xD7957270, 0x1CF146C7, 0xA0034E06, 0x2BD86AB9 }
	TAG_STRUCT(
		character_perception_block_struct,
		"character_perception_block_struct",
		"character_perception_block_struct",
		"s_character_perception_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_PERCEPTION_BLOCK_STRUCT_ID)
	{
		{ _field_short_enum, "perception_mode", &actor_perception_mode_definition },
		{ _field_word_flags, "flags", &perception_flags },
		{ _field_real, "maximum vision distance", "maximum range of sight", "world units" },
		{ _field_real, "reliable vision distance", "reliable range of sight", "world units" },
		{ _field_real, "maximum peripheral vision distance", "maximum range of peripheral vision", "world units" },
		{ _field_real, "reliable peripheral vision distance", "reliable range of peripheral vision", "world units" },
		{ _field_real, "minimum peripheral vision distance", "minimum range of peripheral vision (at peripheral vision angle)", "world units" },
		{ _field_real, "minimum reliable peripheral vision distance", "minimum reliable range of peripheral vision (at peripheral vision angle)", "world units" },
		{ _field_real, "surprise distance", "If a new prop is acknowledged within the given distance, surprise is registered", "world units" },
		{ _field_angle, "focus interior angle", "horizontal angle within which we see targets out to our maximum range", "degrees" },
		{ _field_angle, "focus exterior angle", "horizontal angle within which we see targets at a range in between maximum and maximum peripheral", "degrees" },
		{ _field_angle, "peripheral vision angle", "maximum horizontal angle within which we can see targets out of the corner of our eye up to maximum peripheral vision", "degrees" },
		{ _field_real, "hearing distance", "maximum range at which sounds can be heard", "world units" },
		{ _field_real, "notice projectile chance", "random chance of noticing a dangerous enemy projectile (e.g. grenade)", nullptr, "[0,1]" },
		{ _field_real, "notice vehicle chance", "random chance of noticing a dangerous vehicle", nullptr, "[0,1]" },
		{ _field_real, "perception time", "time required to acknowledge a visible enemy at optimal range", "seconds" },
		{ _field_real, "awareness glance level", "How aware of you while acknowledging an AI must be to glance at you" },
		{ _field_real, "awareness glance delta", "While acknowledging, the awareness delta at which an AI will glance at you" },
		{ _field_real_fraction, "identify hologram chance", "The chance that an AI identifies a unit is actually a hologram", nullptr, "[0, 1]" },
		{ _field_real_bounds, "hologram ignore timer", "The time after which we will ignore the hologram once seen", "seconds" },
		{ _field_real, "hologram ignore timer shot penalty", "The number of seconds taken off of the ignore timer each time the hologram is shot", "seconds" },
		{ _field_real, "camouflaged enemy visible distance (normal)", "Distance below which the AI becomes aware of you even if you are camouflaged, normal difficulty", "wu" },
		{ _field_real, "camouflaged enemy visible distance (legendary)", "Distance below which the AI becomes aware of you even if you are camouflaged, lengendary difficulty", "wu" },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "mapping", &mapping_function }, // structure_version:2
		FIELD_GROUP_BEGIN("Normal active-camo perception"),
		{ _field_struct, "normal active camo perception", &active_camo_perception_properties },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Legendary active-camo perception"),
		{ _field_struct, "legendary active camo perception", &active_camo_perception_properties },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(actor_perception_mode_definition)
	{
		"idle",
		"alert",
		"combat",
		"search",
		"patrol",
		"vehicle idle",
		"vehicle alert",
		"vehicle combat "
	};
	STRING_LIST(actor_perception_mode_definition, actor_perception_mode_definition_strings, _countof(actor_perception_mode_definition_strings));

	STRINGS(perception_flags)
	{
		"character can see in darkness",
		"ignore tracking projectiles",
		"ignore minor tracking projectiles"
	};
	STRING_LIST(perception_flags, perception_flags_strings, _countof(perception_flags_strings));

	#define CHARACTER_PHYSICS_FLYING_STRUCT_ID { 0x692E7BDD, 0x59F4483F, 0xAEBF3C6D, 0x645E1EC3 }
	TAG_STRUCT(
		character_physics_flying_struct,
		"character_physics_flying_struct",
		"character_physics_flying_struct",
		"s_character_physics_flying_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_PHYSICS_FLYING_STRUCT_ID)
	{
		{ _field_angle, "bank angle", "angle at which we bank left/right when sidestepping or turning while moving forwards", "degrees" },
		{ _field_real, "bank apply time", "time it takes us to apply a bank", "seconds" },
		{ _field_real, "bank decay time", "time it takes us to recover from a bank", "seconds" },
		{ _field_real, "pitch ratio", "amount that we pitch up/down when moving up or down" },
		{ _field_real, "max velocity", "max velocity when not crouching", "world units per second" },
		{ _field_real, "max sidestep velocity", "max sideways or up/down velocity when not crouching", "world units per second" },
		{ _field_real, "acceleration", nullptr, "world units per second squared" },
		{ _field_real, "deceleration", nullptr, "world units per second squared" },
		{ _field_angle, "angular velocity maximum", "turn rate", "degrees per second" },
		{ _field_angle, "angular acceleration maximum", "turn acceleration rate", "degrees per second squared" },
		{ _field_real, "crouch velocity modifier", "how much slower we fly if crouching (zero = same speed)", nullptr, "[0,1]" },
		{ _field_long_flags, "flags", &flying_physics_flags },
		{ _field_terminator }
	};

	STRINGS(flying_physics_flags)
	{
		"use world up"
	};
	STRING_LIST(flying_physics_flags, flying_physics_flags_strings, _countof(flying_physics_flags_strings));

	#define CHARACTER_PHYSICS_GROUND_STRUCT_ID { 0xE61D5093, 0x77E5453D, 0x90EC05A0, 0x8B7B778B }
	TAG_STRUCT(
		character_physics_ground_struct,
		"character_physics_ground_struct",
		"character_physics_ground_struct",
		"s_character_physics_ground_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_PHYSICS_GROUND_STRUCT_ID)
	{
		{ _field_angle, "maximum slope angle", nullptr, "degrees" },
		{ _field_angle, "downhill falloff angle", nullptr, "degrees" },
		{ _field_angle, "downhill cutoff angle", nullptr, "degrees" },
		{ _field_angle, "uphill falloff angle", nullptr, "degrees" },
		{ _field_angle, "uphill cutoff angle", nullptr, "degrees" },
		{ _field_real, "downhill velocity scale" },
		{ _field_real, "uphill velocity scale" },
		{ _field_real, "runtime_minimum_normal_k" },
		{ _field_real, "runtime_downhill_k0" },
		{ _field_real, "runtime_downhill_k1" },
		{ _field_real, "runtime_uphill_k0" },
		{ _field_real, "runtime_uphill_k1" },
		{ _field_angle, "climb inflection angle", "angle for bipeds at which climb direction changes between up and down" },
		{ _field_real, "scale airborne reaction time", "scale on the time for the entity to realize it is airborne" },
		{ _field_real, "scale ground adhesion velocity", "scale on velocity with which the entity is pushed back into its ground plane (set to -1 to lock to ground)" },
		{ _field_real, "gravity scale", "scale on gravity for this entity" },
		{ _field_real, "airborne acceleration scale", "scale on airborne acceleration maximum" },
		{ _field_terminator }
	};

	#define CHARACTER_PHYSICS_STRUCT_ID { 0x7F1CE04F, 0x93D14DEC, 0xA9872258, 0x4CD6B27 }
	TAG_STRUCT(
		character_physics_struct,
		"character_physics_struct",
		"character_physics_struct",
		"s_character_physics_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_PHYSICS_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &character_physics_flags },
		{ _field_real, "height standing" },
		{ _field_real, "height crouching" },
		{ _field_real, "radius" },
		{ _field_real, "mass" },
		{ _field_string_id, "living material name", "collision material used when character is alive" },
		{ _field_string_id, "dead material name", "collision material used when character is dead" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_short_integer, "runtime global material type" },
		{ _field_short_integer, "runtime dead global material type" },
		FIELD_USELESS_PAD("value", 20),
		{ _field_block, "dead sphere shapes", "don't be an asshole, edit something else", FIELD_FLAG_UNKNOWN0, &spheres_block_block },
		{ _field_block, "pill shapes", "don't be an asshole, edit something else", FIELD_FLAG_UNKNOWN0, &pills_block_block },
		{ _field_block, "sphere shapes", "don't be an asshole, edit something else", FIELD_FLAG_UNKNOWN0, &spheres_block_block },
		{ _field_block, "list sphere shapes", "don't be an asshole, edit something else", FIELD_FLAG_UNKNOWN0, &spheres_block_block },
		{ _field_block, "list shapes", "don't be an asshole, edit something else", FIELD_FLAG_UNKNOWN0, &lists_block_block },
		{ _field_block, "list shape childInfos", "don't be an asshole, edit something else", FIELD_FLAG_UNKNOWN0, &list_shapes_block_block },
		FIELD_EXPLANATION("ground", nullptr),
		{ _field_struct, "ground physics", &character_physics_ground_struct },
		FIELD_EXPLANATION("flying", nullptr),
		{ _field_struct, "flying physics", &character_physics_flying_struct },
		{ _field_terminator }
	};

	STRINGS(character_physics_flags)
	{
		"centered_at_origin",
		"shape spherical",
		"use player physics",
		"climb any surface",
		"flying",
		"not physical",
		"dead character collision group",
		"suppress ground planes on bipeds",
		"physical ragdoll",
		"do not resize dead spheres",
		"multiple Mantis shapes",
		"I am an Extreme Slipsurface",
		"slips off movers"
	};
	STRING_LIST(character_physics_flags, character_physics_flags_strings, _countof(character_physics_flags_strings));

	#define CHARACTER_PLACEMENT_BLOCK_ID { 0xDA6187AF, 0x2AC14914, 0xB36A1D7A, 0x5BEAF008 }
	TAG_STRUCT(
		character_placement_block,
		"character_placement_block",
		"character_placement_block",
		"s_character_placement_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_PLACEMENT_BLOCK_ID)
	{
		FIELD_PAD("YJQV", 4),
		{ _field_real, "few upgrade chance (easy)" },
		{ _field_real, "few upgrade chance (normal)" },
		{ _field_real, "few upgrade chance (heroic)" },
		{ _field_real, "few upgrade chance (legendary)" },
		{ _field_real, "normal upgrade chance (easy)" },
		{ _field_real, "normal upgrade chance (normal)" },
		{ _field_real, "normal upgrade chance (heroic)" },
		{ _field_real, "normal upgrade chance (legendary)" },
		{ _field_real, "many upgrade chance (easy)" },
		{ _field_real, "many upgrade chance (normal)" },
		{ _field_real, "many upgrade chance (heroic)" },
		{ _field_real, "many upgrade chance (legendary)" },
		{ _field_terminator }
	};

	#define CHARACTER_PRESEARCH_BLOCK_ID { 0x4E5E33E3, 0xBD02452D, 0xAA84500D, 0xA972C742 }
	TAG_STRUCT(
		character_presearch_block,
		"character_presearch_block",
		"character_presearch_block",
		"s_character_presearch_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_PRESEARCH_BLOCK_ID)
	{
		{ _field_long_flags, "Pre-search flags", &generic_flags },
		{ _field_real_bounds, "max presearch time", "Presearch turns off after the given time", "seconds" },
		{ _field_real, "max suppress time", "Suppress turns off after the given time (0 defaults to 8 seconds)", "seconds" },
		FIELD_GROUP_BEGIN("Child Weights"),
		{ _field_real, "suppressing fire weight" },
		{ _field_real, "uncover weight" },
		{ _field_real, "leap on cover weight" },
		{ _field_real, "destroy cover weight" },
		{ _field_real, "guard weight" },
		{ _field_real, "investigate weight" },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(generic_flags)
	{
		"Flag1"
	};
	STRING_LIST(generic_flags, generic_flags_strings, _countof(generic_flags_strings));

	#define CHARACTER_PROTO_SPAWN_BLOCK_ID { 0x23FCF6C5, 0x68944D26, 0x9FE18A7E, 0x8D509E89 }
	TAG_STRUCT(
		character_proto_spawn_block,
		"character_proto_spawn_block",
		"character_proto_spawn_block",
		"s_character_proto_spawn_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_PROTO_SPAWN_BLOCK_ID)
	{
		{ _field_short_enum, "Proto Spawn Type ", "Can be used to automatically setup a character to be spawned by another character.", &proto_spawn_type_enum },
		FIELD_PAD("post-proto-spawn-padding", 2),
		{ _field_terminator }
	};

	STRINGS(proto_spawn_type_enum)
	{
		"None",
		"Limbo",
		"Spawner",
		"Birther"
	};
	STRING_LIST(proto_spawn_type_enum, proto_spawn_type_enum_strings, _countof(proto_spawn_type_enum_strings));

	#define CHARACTER_READY_BLOCK_ID { 0x978647F9, 0x7640401C, 0x92C9ADB5, 0xEF9C02E9 }
	TAG_STRUCT(
		character_ready_block,
		"character_ready_block",
		"character_ready_block",
		"s_character_ready_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_READY_BLOCK_ID)
	{
		{ _field_real_bounds, "ready time bounds", "Character will pause for given time before engaging threat" },
		{ _field_terminator }
	};

	#define CHARACTER_REF_CHOICE_BLOCK_STRUCT_ID { 0x1E52F15, 0x71C34DF8, 0xA58FEA67, 0x4E3DF601 }
	TAG_STRUCT(
		character_ref_choice_block_struct,
		"character_ref_choice_block_struct",
		"character_ref_choice_block_struct",
		"s_character_ref_choice_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_REF_CHOICE_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "place on", &ai_spawn_conditions_struct },
		{ _field_tag_reference, "character type", &character_group_reference$7 },
		{ _field_short_integer, "chance" },
		FIELD_PAD("post-chance", 2),
		{ _field_terminator }
	};

	TAG_REFERENCE(character_group_reference$7, CHARACTER_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define CHARACTER_RETREAT_BLOCK_ID { 0xF0F699B8, 0x2CC14DDC, 0x97D26266, 0x968C2601 }
	TAG_STRUCT(
		character_retreat_block,
		"character_retreat_block",
		"character_retreat_block",
		"s_character_retreat_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_RETREAT_BLOCK_ID)
	{
		{ _field_long_flags, "Retreat flags", &character_retreat_flags },
		{ _field_real, "Shield threshold", "When shield vitality drops below given amount, retreat is triggered by low_shield_retreat_impulse" },
		{ _field_real, "Scary target threshold", "When confronting an enemy of over the given scariness, retreat is triggered by scary_target_retreat_impulse" },
		{ _field_real, "Danger threshold", "When perceived danger rises above the given threshold, retreat is triggered by danger_retreat_impulse" },
		{ _field_real, "Proximity threshold", "When enemy closer than given threshold, retreat is triggered by proximity_retreat_impulse" },
		{ _field_real_bounds, "min/max forced cower time bounds", "actor cowers for at least the given amount of time" },
		{ _field_real_bounds, "min/max cower timeout bounds", "actor times out of cower after the given amount of time" },
		{ _field_real, "proximity ambush threshold", "If target reaches is within the given proximity, an ambush is triggered by the proximity ambush impulse" },
		{ _field_real, "awareness ambush threshold", "If target is less than threshold (0-1) aware of me, an ambush is triggered by the vulnerable enemy ambush impulse" },
		{ _field_real, "leader dead retreat chance", "If leader-dead-retreat-impulse is active, gives the chance that we will flee when our leader dies within 4 world units of us" },
		{ _field_real, "peer dead retreat chance", "If peer-dead-retreat-impulse is active, gives the chance that we will flee when one of our peers (friend of the same race) dies within 4 world units of us" },
		{ _field_real, "second peer dead retreat chance", "If peer-dead-retreat-impulse is active, gives the chance that we will flee when a second peer (friend of the same race) dies within 4 world units of us" },
		{ _field_real, "flee timeout", "Flee for no longer than this time (if there is no cover, then we will keep fleeing indefinitely). Value of 0 means 'no timeout'", "seconds" },
		{ _field_angle, "zig-zag angle", "The angle from the intended destination direction that a zig-zag will cause", "degrees" },
		{ _field_real, "zig-zag period", "How long it takes to zig left and then zag right.", "seconds" },
		{ _field_real, "retreat grenade chance", "The likelihood of throwing down a grenade to cover our retreat" },
		{ _field_tag_reference, "backup weapon", "If I want to flee and I don't have flee animations with my current weapon, throw it away and try a ...", &weapon_group_reference$4 },
		{ _field_terminator }
	};

	STRINGS(character_retreat_flags)
	{
		"Zig-zag when fleeing",
		"Unused1"
	};
	STRING_LIST(character_retreat_flags, character_retreat_flags_strings, _countof(character_retreat_flags_strings));

	#define CHARACTER_SCARAB_BLOCK_ID { 0x95C20194, 0xFF56496F, 0xBB039DD9, 0xCE5E69DB }
	TAG_STRUCT(
		character_scarab_block,
		"character_scarab_block",
		"character_scarab_block",
		"s_character_scarab_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_SCARAB_BLOCK_ID)
	{
		{ _field_real, "fighting min distance", "When target within this distance, the scarab will back up", "wus" },
		{ _field_real, "fighting max distance", "When target outside this distance, the scarab will chase", "wus" },
		{ _field_real_bounds, "anticipated aim radius", "When within these bounds distance from the target, we blend in our anticipated facing vector", "wus" },
		{ _field_real, "snap forward angle", "When moving forward within this dot of our desired facing, just move forward", nullptr, "[0-1]" },
		{ _field_real, "snap forward angle max", "When moving forward within this dot of our desired facing, just move forward", nullptr, "[0-1]" },
		{ _field_terminator }
	};

	#define CHARACTER_SEARCH_BLOCK_ID { 0x541F9730, 0x87D3457B, 0xAE101AD3, 0x7B8B58F6 }
	TAG_STRUCT(
		character_search_block,
		"character_search_block",
		"character_search_block",
		"s_character_search_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_SEARCH_BLOCK_ID)
	{
		{ _field_long_flags, "Search flags", &character_search_flags },
		{ _field_real_bounds, "search time" },
		{ _field_real, "Search distance", "Maximum distance away from our firing positions that we are happy to search (0 value will default to 3wu). Does not affect vehicle search distance (see maxd if you want that value too)." },
		FIELD_EXPLANATION("Uncover", nullptr),
		{ _field_real_bounds, "Uncover distance bounds", "Distance of uncover point from target. Hard lower limit, soft upper limit." },
		FIELD_EXPLANATION("Investigate", "Orphan offset: Offset from the orphan pos along the orphan hint vector that we will investigate to. Positive value means we are predicting where the target is going, negative value means that we would like to stand back a bit and look along the orphan vector."),
		{ _field_real, "Orphan offset", "(0 value will default to 1.8wu)", "wu" },
		{ _field_real, "Minimum offset", "Minimum offset from the target point to investigate, otherwise we just use the target point itself. Not entirely sure about the justification for this one...", "wu" },
		{ _field_real_bounds, "vocalization time" },
		FIELD_EXPLANATION("Performances", nullptr),
		{ _field_real, "Performance Cool-down Time", "The number of seconds that must elapse before an actor will consider a search-performance again" },
		{ _field_terminator }
	};

	STRINGS(character_search_flags)
	{
		"crouch on investigate",
		"walk on pursuit",
		"search forever",
		"search exclusively"
	};
	STRING_LIST(character_search_flags, character_search_flags_strings, _countof(character_search_flags_strings));

	#define CHARACTER_STIMULI_RESPONSE_BLOCK_ID { 0x82B4B105, 0x4F3E4CE8, 0x91D438EC, 0x7A26585 }
	TAG_STRUCT(
		character_stimuli_response_block,
		"character_stimuli_response_block",
		"character_stimuli_response_block",
		"s_character_stimuli_response_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_STIMULI_RESPONSE_BLOCK_ID)
	{
		FIELD_EXPLANATION("Stimulus Response", "Here you can define a character tag which will be applied on top of this one when the named stimulus is present on a character.In the case of multiple stimulus with character tag responses being present, the first listed will be used."),
		{ _field_string_id, "stimulus name" },
		{ _field_tag_reference, "override character", &character_group_reference$3 },
		{ _field_terminator }
	};

	#define CHARACTER_STRUCT_DEFINITION_ID { 0xCE98F60C, 0x831E43A2, 0x97556737, 0x2D0DA2E2 }
	TAG_STRUCT(
		character_struct_definition,
		"character_struct_definition",
		"character_struct_definition",
		"s_character_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_STRUCT_DEFINITION_ID)
	{
		{ _field_long_flags, "Character flags", &character_flags },
		{ _field_tag_reference, "parent character", &character_group_reference$3 },
		{ _field_tag_reference, "unit", &unit_group_reference },
		{ _field_tag_reference, "creature", "Creature reference for swarm characters ONLY", &creature_group_reference },
		{ _field_tag_reference, "style", &style_group_reference },
		{ _field_tag_reference, "major character", &character_group_reference$3 },
		{ _field_block, "variants", &character_variants_block_block },
		{ _field_block, "voice", &character_voice_properties_block_block },
		{ _field_block, "general properties", &character_general_block_block },
		{ _field_block, "proto spawn properties", &character_proto_spawn_block_block },
		{ _field_block, "interact properties", &character_interact_block_block },
		{ _field_block, "emotion properties", &character_emotions_block_block },
		{ _field_block, "vitality properties", &character_vitality_block_block },
		{ _field_block, "placement properties", &character_placement_block_block },
		{ _field_block, "perception properties", &character_perception_block_block },
		{ _field_block, "target properties", &character_target_block_block },
		{ _field_block, "look properties", &character_look_block_block },
		{ _field_block, "hopping properties", &character_hopping_block_block },
		{ _field_block, "movement properties", &character_movement_block_block },
		{ _field_block, "throttle styles", &character_throttle_style_block_block },
		{ _field_block, "movement sets", &character_movement_set_block_block },
		{ _field_block, "flocking properties", &character_flocking_block_block },
		{ _field_block, "swarm properties", &character_swarm_block_block },
		{ _field_block, "firing point evaluator properties", &character_firing_point_evaluator_block_block },
		{ _field_block, "ready properties", &character_ready_block_block },
		{ _field_block, "engage properties", &character_engage_block_block },
		{ _field_block, "charge properties", &character_charge_block_block },
		FIELD_EXPLANATION("Danger Values", "Danger values can be found in the ai-globals section of the globals tag."),
		{ _field_block, "evasion properties", &character_evasion_block_block },
		{ _field_block, "cover properties", &character_cover_block_block },
		{ _field_block, "retreat properties", &character_retreat_block_block },
		{ _field_block, "search properties", &character_search_block_block },
		{ _field_block, "pre-search properties", &character_presearch_block_block },
		{ _field_block, "idle properties", &character_idle_block_block },
		{ _field_block, "vocalization properties", &character_vocalization_block_block },
		{ _field_block, "boarding properties", &character_boarding_block_block },
		{ _field_block, "kungfu properties", &character_kungfu_block_block },
		{ _field_block, "bunker properties", &character_bunker_block_block },
		{ _field_block, "guardian properties", &character_guardian_block_block },
		{ _field_block, "combatform properties", &character_combatform_block_block },
		{ _field_block, "engineer properties", &character_engineer_block_block },
		{ _field_block, "inspect properties", &character_inspect_block_block },
		{ _field_block, "scarab properties", &character_scarab_block_block },
		{ _field_block, "weapons properties", &character_weapons_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "firing pattern properties", &character_firing_pattern_properties_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "extreme range firing pattern properties", &character_firing_pattern_properties_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "grenades properties", &character_grenades_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "vehicle properties", &character_vehicle_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "flying movement properties", &character_flying_movement_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "morph properties", &character_morph_block_block },
		{ _field_block, "equipment definitions", &character_equipment_block_block },
		{ _field_block, "stimuli responses", &character_stimuli_response_block_block },
		{ _field_block, "campaign metagame bucket", &campaign_metagame_bucket_block_block },
		{ _field_block, "activity objects", &character_activity_object_block_block },
		{ _field_block, "pain screen properties", &character_pain_screen_block_block },
		{ _field_block, "bishop properties", &character_bishop_block_block },
		{ _field_block, "combotron parent properties", &character_combotron_parent_block_block },
		{ _field_block, "combotron child properties", &character_combotron_child_block_block },
		{ _field_block, "handle dismemberment properties", &character_handle_dismemberment_block_block },
		{ _field_block, "Fight From Cover", &character_cover_fight_block_block },
		{ _field_block, "Emerge", &character_emerge_block_block },
		{ _field_block, "Dynamic Task", &dynamic_task_block_block },
		{ _field_block, "Advance Properties", &character_advance_block_block },
		{ _field_block, "Cover Evasion", &character_cover_evasion_block_block },
		{ _field_block, "Pack Stalk", &character_pack_stalk_block_block },
		{ _field_block, "Fight Circle", &character_fight_circle_block_block },
		{ _field_block, "Hamstring", &character_hamstring_charge_block_block },
		{ _field_block, "Forerunner", &character_forerunner_block_block },
		{ _field_block, "Gravity Jump", &character_gravity_jump_block_block },
		{ _field_terminator }
	};

	STRINGS(character_flags)
	{
		"Flag1"
	};
	STRING_LIST(character_flags, character_flags_strings, _countof(character_flags_strings));

	TAG_REFERENCE(unit_group_reference, UNIT_TAG);

	TAG_REFERENCE(creature_group_reference, CREATURE_TAG);

	TAG_REFERENCE(style_group_reference, STYLE_TAG);

	#define CHARACTER_SWARM_BLOCK_ID { 0xAE465FC2, 0x8CAC4D3A, 0xBF219507, 0x1934DE5A }
	TAG_STRUCT(
		character_swarm_block,
		"character_swarm_block",
		"character_swarm_block",
		"s_character_swarm_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_SWARM_BLOCK_ID)
	{
		{ _field_short_integer, "scatter killed count", "After the given number of deaths, the swarm scatters" },
		FIELD_PAD("PEVUDXUKY", 2),
		{ _field_real, "scatter radius", "the distance from the target that the swarm scatters" },
		{ _field_real, "scatter time", "amount of time to remain scattered" },
		{ _field_real, "hound min distance" },
		{ _field_real, "hound max distance" },
		{ _field_real_bounds, "infection time", "how long the infection form and its victim will wrestle before the point of no return", "secs" },
		{ _field_real, "perlin offset scale", "amount of randomness added to creature's throttle", nullptr, "[0-1]" },
		{ _field_real_bounds, "offset period", "how fast the creature changes random offset to throttle", "s" },
		{ _field_real, "perlin idle movement threshold", "a random offset lower then given threshold is made 0. (threshold of 1 = no movement)", nullptr, "[0-1]" },
		{ _field_real, "perlin combat movement threshold", "a random offset lower then given threshold is made 0. (threshold of 1 = no movement)", nullptr, "[0-1]" },
		{ _field_real, "stuck time", "how long we have to move (stuck distance) before we get deleted" },
		{ _field_real, "stuck distance", "how far we have to move in (stuck time) to not get deleted" },
		{ _field_terminator }
	};

	#define CHARACTER_TARGET_BLOCK_STRUCT_ID { 0x6E370ABF, 0x12A84E42, 0x995AF927, 0x543A30AE }
	TAG_STRUCT(
		character_target_block_struct,
		"character_target_block_struct",
		"character_target_block_struct",
		"s_character_target_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_TARGET_BLOCK_STRUCT_ID)
	{
		{ _field_real, "player preference", "How interested in the player I am on a scale of 0-1", nullptr, "[0-1]" },
		{ _field_terminator }
	};

	#define CHARACTER_THROTTLE_STYLE_BLOCK_ID { 0xD90E6017, 0xE54E4C37, 0x87D2E7B9, 0x6B67DE89 }
	TAG_STRUCT(
		character_throttle_style_block,
		"character_throttle_style_block",
		"character_throttle_style_block",
		"s_character_throttle_style_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_THROTTLE_STYLE_BLOCK_ID)
	{
		{ _field_string_id, "style name" },
		{ _field_real_fraction, "desired throttle", nullptr, nullptr, "[0,1]" },
		{ _field_real, "acceleration time", nullptr, "seconds" },
		{ _field_struct, "acceleration function", "Defines throttle as a function of time from start of style application", &scalar_function_named_struct },
		{ _field_real, "deceleration distance", nullptr, "wu" },
		{ _field_struct, "deceleration function", "Defines throttle as a function of distance from the goal", &scalar_function_named_struct },
		{ _field_string_id, "stance" },
		{ _field_terminator }
	};

	#define CHARACTER_VARIANTS_BLOCK_ID { 0x1DE40022, 0xD2E54137, 0x8F9E70A1, 0xCCD699E }
	TAG_STRUCT(
		character_variants_block,
		"character_variants_block",
		"character_variants_block",
		"s_character_variants_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_VARIANTS_BLOCK_ID)
	{
		{ _field_string_id, "variant name" },
		{ _field_short_integer, "variant index" },
		FIELD_PAD("VN", 2),
		{ _field_block, "voices", &character_voice_block_block },
		{ _field_string_id, "default dialogue effect id", "gets applied if the vocalization has no dialogue effect id." },
		{ _field_terminator }
	};

	#define CHARACTER_VEHICLE_BLOCK_ID { 0x503F6E32, 0x10444DF9, 0xAA8B8164, 0xB994B4FA }
	TAG_STRUCT(
		character_vehicle_block,
		"character_vehicle_block",
		"character_vehicle_block",
		"s_character_vehicle_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_VEHICLE_BLOCK_ID)
	{
		{ _field_tag_reference, "unit", &unit_group_reference$2 },
		{ _field_tag_reference, "style", &style_group_reference },
		FIELD_EXPLANATION("Flying Avoidance", nullptr),
		{ _field_real, "lookahead_time", "How much in the future should we estimate a collision (affects collision ray length)", "seconds" },
		{ _field_real, "roll change magnitude", "How fast to control the roll avoidance", "degrees" },
		{ _field_real, "roll decay multiplier", "How fast roll goes back to 0- 1 means never, 0 means instantaneously", "(0,1)" },
		{ _field_real, "throttle grace period", "How long after a collision should the vehicle keep moving at max throttle", "seconds" },
		{ _field_real, "minimum throttle", "Minimum throttle that the avoidance can slow down to", "(-1,1)" },
		{ _field_real, "avoidance volume turn penalty distance", "The maximum distance penalty applied to an avoidance volume search path if we're facing away from the path. 1000 wu good for space, 5 wu good for ground.", "wus" },
		FIELD_EXPLANATION("Vehicle flags", nullptr),
		{ _field_long_flags, "vehicle flags", &vehicle_flags },
		FIELD_EXPLANATION("Hover Perturbation New", nullptr),
		{ _field_real, "hover deceleration distance", "Distance defines a box outside of which we clamp perturbation. Value of zero causes fallback to run.", "wus" },
		{ _field_real, "hover offset distance", "The max radius of the XZ anchor perturbation. Value of zero causes fallback to run.", "wus" },
		FIELD_EXPLANATION("Hover Perturbation Fallback", nullptr),
		{ _field_real, "hover allow perturbation speed", "The speed the vehicle must be below for it to start running hover perturbation (default=0.4).", "wu/s" },
		{ _field_real, "hover random x-axis period", "The number of seconds for the x component of the anchor perturbation to repeat itself (default=10).", "sec" },
		{ _field_real, "hover random y-axis period", "The number of seconds for the y component of the anchor perturbation to repeat itself (default=7).", "sec" },
		{ _field_real, "hover random z-axis period", "The number of seconds for the z component of the anchor perturbation to repeat itself (default=5).", "sec" },
		{ _field_real, "hover random radius", "The radius of the anchor perturbation. (default=0)", "wu" },
		{ _field_real, "hover anchor approach speed limit", "If we're traveling faster than this amount toward the anchor inside the max throttle distance, we drop throttle to the min. (default=0.2)", "wu/s" },
		{ _field_real_bounds, "hover anchor throttle scale distance", "The distance from the anchor at which the min and max throttle scale occur. (default=[0.25, 2.0])", "wu" },
		{ _field_real_bounds, "hover anchor xy-throttle scale", "The xy-throttle scale at the min and max throttle scale distances. (default=[0.0, 0.2])", nullptr, "[0,1]" },
		{ _field_real_bounds, "hover anchor z-throttle scale", "The z-throttle scale at the min and max throttle scale distances. (default=[1.0, 1.0])", nullptr, "[0,1]" },
		{ _field_real, "hover throttle min z", "The minimum the z component of throttle is allowed to be (default=0.2)", nullptr, "[-1, 1]" },
		FIELD_EXPLANATION("Pathfinding", nullptr),
		{ _field_real, "ai pathfinding radius", nullptr, "world units (Ground vehicles)" },
		{ _field_real, "ai avoidance radius", "If 0, uses pathfinding radius.", "world units (Ground vehicles)" },
		{ _field_real, "ai destination radius", "Distance within which goal is considered reached", "world units (All vehicles)" },
		{ _field_real, "ai deceleration distance", "Distance from goal at which AI starts to decelerate", "world units (All vehicles)", MAKE_ALT_NAMES("ai deceleration distanceworld units") },
		{ _field_real, "roughly, the time it would take this vehicle to stop; default is 2 seconds" },
		FIELD_EXPLANATION("Turning", nullptr),
		{ _field_real, "ai turning radius", "Idealized average turning radius (should reflect actual vehicle physics)", "world units (Warthog, Pelican, Ghost)" },
		{ _field_real, "ai inner turning radius (< tr)", "Idealized minimum turning radius (should reflect actual vehicle physics)", "(Warthogs)" },
		{ _field_real, "ai ideal turning radius (> tr)", "Ideal turning radius for rounding turns (barring obstacles, etc.)", "(Warthogs, ghosts)" },
		FIELD_EXPLANATION("Steering", nullptr),
		{ _field_angle, "ai banshee steering maximum", nullptr, "(banshees,avoidance steering phantoms)" },
		{ _field_real, "ai max steering angle", "Maximum steering angle from forward (ultimately controls turning speed)", "degrees (warthogs, ghosts, wraiths)" },
		{ _field_real, "ai max steering delta", "Maximum delta in steering angle from one tick to the next (ultimately controls turn acceleration)", "degrees (warthogs, dropships, ghosts, wraiths)" },
		{ _field_real, "ai oversteering scale", nullptr, "(warthogs, ghosts, wraiths)" },
		{ _field_angle_bounds, "ai oversteering bounds", "Angle to goal at which AI will oversteer", "(banshees)" },
		{ _field_real, "ai sideslip distance", "Distance within which Ai will strafe to target (as opposed to turning)", "(ghosts, dropships)" },
		{ _field_real, "ai avoidance distance", "Look-ahead distance for obstacle avoidance", "world units:(banshees)" },
		{ _field_real, "ai min urgency", "The minimum urgency with which a turn can be made (urgency = percent of maximum steering delta)", nullptr, "[0-1] (warthogs, banshees)" },
		{ _field_angle, "destination behind angle", "The angle from facing that is considered to be behind us (we do the ugly floaty slidey turn to things behind us)", "(dropships)" },
		{ _field_real, "skid scale", "When approaching a corner at speed, we may want to skid around that corner, by turning slightly too early. This is (roughly) how many seconds ahead we should start turning.", "(warthogs)" },
		{ _field_angle, "aiming velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "aiming acceleration maximum", nullptr, "degrees per second squared" },
		FIELD_EXPLANATION("Throttle", nullptr),
		{ _field_real, "ai throttle maximum", nullptr, "(0 - 1) (all vehicles)" },
		{ _field_real, "ai reverse throttle maximum", "If zero, default to ai throttle maximum", "(0 - 1) (ground only)" },
		{ _field_real, "ai goal min throttle scale", "scale on throttle when within 'ai deceleration distance' of goal (0...1)", "(warthogs, dropships, ghosts)" },
		{ _field_real, "ai turn min throttle scale", "Scale on throttle due to nearness to a turn (0...1)", "(warthogs, dropships, ghosts)" },
		{ _field_real, "ai direction min throttle scale", "Scale on throttle due to facing away from intended direction (0...1)", "(warthogs, dropships, ghosts)" },
		{ _field_real, "ai skid min throttle scale", "Scale on throttle due to skidding (0...1)", "(warthogs, dropships, ghosts)" },
		{ _field_angle, "skid attentuation max angle", "Maximise min throttle at this deviation of angles from current movement" },
		{ _field_real, "ai acceleration scale", "The maximum allowable change in throttle between ticks", "(0-1): (warthogs, ghosts)" },
		{ _field_real, "ai throttle blend", "The degree of throttle blending between one tick and the next (0 = no blending)", "(0-1): (dropships, sentinels)" },
		{ _field_real, "theoretical max speed", "About how fast I can go.", "wu/s (warthogs, dropships, ghosts)" },
		{ _field_real, "error scale", "scale on the difference between desired and actual speed, applied to throttle", "(warthogs, dropships)" },
		FIELD_EXPLANATION("Combat", nullptr),
		{ _field_angle, "ai allowable aim deviation angle" },
		FIELD_EXPLANATION("Behavior", nullptr),
		{ _field_real, "ai charge tight angle distance", "The distance at which the tight angle criterion is used for deciding to vehicle charge", "(all vehicles)" },
		{ _field_real, "ai charge tight angle", "Angle cosine within which the target must be when target is closer than tight angle distance in order to charge", nullptr, "[0-1] (all vehicles)" },
		{ _field_real, "ai charge repeat timeout", "Time delay between vehicle charges", "(all vehicles)" },
		{ _field_real, "ai charge look-ahead time", "In deciding when to abort vehicle charge, look ahead these many seconds to predict time of contact", "(all vehicles)" },
		{ _field_real, "ai charge consider distance", "Consider charging the target when it is within this range (0 = infinite distance)", "(all vehicles)" },
		{ _field_real, "ai charge abort distance", "Abort the charge when the target get more than this far away (0 = never abort)", "(all vehicles)" },
		{ _field_real, "ai charge abort close distance", "Abort the charge when the target gets closer than this far away (0 = 3 times destination radius for historical purposes.)", "(all vehicles)" },
		{ _field_real, "ai charge armor locked target chance", "Probability that we decide to charge a target even if they are armor locked", nullptr, "[0-1] (all vehicles)" },
		{ _field_real, "vehicle ram timeout", "The ram behavior stops after a maximum of the given number of seconds" },
		{ _field_real, "ram paralysis time", "The ram behavior freezes the vehicle for a given number of seconds after performing the ram" },
		{ _field_real, "ai cover damage threshold", "Trigger a cover when recent damage is above given threshold (damage_vehicle_cover impulse)", "(all vehicles)" },
		{ _field_real, "ai cover shield damage threshold", "Trigger a cover when recent shied damage is above given threshold (flying_cover behavior)", "(all vehicles)" },
		{ _field_real, "ai cover min distance", "When executing vehicle-cover, minimum distance from the target to flee to", "(all vehicles)" },
		{ _field_real, "ai cover time", "How long to stay away from the target", "(all vehicles)" },
		{ _field_real, "ai cover min boost distance", "Boosting allowed when distance to cover destination is greater then this.", "(all vehicles)" },
		{ _field_real, "turtling recent damage threshold", "If vehicle turtling behavior is enabled, turtling is initiated if 'recent damage' surpasses the given threshold", "%" },
		{ _field_real, "turtling min time", "If the vehicle turtling behavior is enabled, turtling occurs for at least the given time", "seconds" },
		{ _field_real, "turtling timeout", "The turtled state times out after the given number of seconds", "seconds" },
		{ _field_short_enum, "obstacle ignore size", &obstacle_ignore_enum },
		FIELD_PAD("I", 2),
		{ _field_short_integer, "max vehicle charge", "max number of this type of vehicle in a task who can vehicle charge at once" },
		{ _field_short_integer, "min vehicle charge", "min number of this type of vehicle in a task who can vehicle charge at once (soft limit, just a desired number)" },
		{ _field_terminator }
	};

	STRINGS(vehicle_flags)
	{
		"passengers adopt original squad",
		"snap facing to forward (ghosts)",
		"throttle to target (hornets)",
		"stationary fight (tanks)",
		"keep moving",
		"can pathfind with avoidance only",
		"use volume avoidance",
		"target equality",
		"don\'t face target",
		"override aiming limits"
	};
	STRING_LIST(vehicle_flags, vehicle_flags_strings, _countof(vehicle_flags_strings));

	#define CHARACTER_VEHICLE_BOARDING_BLOCK_ID { 0x86521B2C, 0x1DC34D0B, 0x87D35EF3, 0x87548C90 }
	TAG_STRUCT(
		character_vehicle_boarding_block,
		"character_vehicle_boarding_block",
		"character_vehicle_boarding_block",
		"s_character_vehicle_boarding_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_VEHICLE_BOARDING_BLOCK_ID)
	{
		{ _field_tag_reference, "vehicle", &unit_group_reference$2 },
		{ _field_long_flags, "flags", &vehicle_boarding_flags },
		{ _field_terminator }
	};

	STRINGS(vehicle_boarding_flags)
	{
		"boarding does not enter seat"
	};
	STRING_LIST(vehicle_boarding_flags, vehicle_boarding_flags_strings, _countof(vehicle_boarding_flags_strings));

	#define CHARACTER_VITALITY_BLOCK_ID { 0xC3D6238D, 0xF974437D, 0xA9364C31, 0xB37E2EF3 }
	TAG_STRUCT(
		character_vitality_block,
		"character_vitality_block",
		"character_vitality_block",
		"s_character_vitality_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_VITALITY_BLOCK_ID)
	{
		{ _field_long_flags, "vitality flags", &vitality_flags },
		{ _field_real, "normal body vitality", "maximum body vitality of our unit" },
		{ _field_real, "normal shield vitality", "maximum shield vitality of our unit" },
		{ _field_real, "legendary body vitality", "maximum body vitality of our unit (on legendary)" },
		{ _field_real, "legendary shield vitality", "maximum shield vitality of our unit (on legendary)" },
		{ _field_real, "body recharge fraction", "fraction of body health that can be regained after damage" },
		{ _field_real, "soft ping threshold (with shields)", "THIS IS NOW AN ABSOLUTE VALUE, NOT A FRACTION: damage necessary to trigger a soft ping when shields are up" },
		{ _field_real, "soft ping threshold (no shields)", "THIS IS NOW AN ABSOLUTE VALUE, NOT A FRACTION: damage necessary to trigger a soft ping when shields are down" },
		{ _field_real, "hard ping threshold (with shields)", "THIS IS NOW AN ABSOLUTE VALUE, NOT A FRACTION: damage necessary to trigger a hard ping when shields are up" },
		{ _field_real, "hard ping threshold (no shields)", "THIS IS NOW AN ABSOLUTE VALUE, NOT A FRACTION: damage necessary to trigger a hard ping when shields are down" },
		{ _field_real, "hard ping cooldown time", "minimum time before another hard ping can be triggered" },
		{ _field_real, "body recharge delay time", "amount of time delay before a shield begins to recharge" },
		{ _field_real, "body recharge time", "amount of time for shields to recharge completely" },
		{ _field_real, "shield recharge delay time", "amount of time delay before a shield begins to recharge" },
		{ _field_real, "shield recharge time", "amount of time for shields to recharge completely" },
		{ _field_real, "extended shield damage threshold", "Amount of shield damage sustained before it is considered 'extended'", "%" },
		{ _field_real, "extended body damage threshold", "Amount of body damage sustained before it is considered 'extended'", "%" },
		{ _field_real, "suicide radius", "when I die and explode, I damage stuff within this distance of me." },
		{ _field_real, "runtime_body_recharge_velocity" },
		{ _field_real, "runtime_shield_recharge_velocity" },
		{ _field_tag_reference, "resurrect weapon", "If I'm being automatically resurrected then I pull out a ...", &weapon_group_reference$4 },
		{ _field_real, "player damage_scale", "If the player is hurting me, scale the damage by this amount. (0 value defaults to 1)", nullptr, "[0-1]" },
		{ _field_real, "projectile attached detonation time scale" },
		{ _field_terminator }
	};

	STRINGS(vitality_flags)
	{
		"auto resurrect"
	};
	STRING_LIST(vitality_flags, vitality_flags_strings, _countof(vitality_flags_strings));

	#define CHARACTER_VOCALIZATION_BLOCK_ID { 0x62F8205D, 0x9E1040FD, 0xAD1ACD08, 0x9DF2201D }
	TAG_STRUCT(
		character_vocalization_block,
		"character_vocalization_block",
		"character_vocalization_block",
		"s_character_vocalization_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_VOCALIZATION_BLOCK_ID)
	{
		FIELD_EXPLANATION("Skip Fraction", "For vocalization with priority < react, multiplies the skip fraction in the dialogue globals tag.\nFor priorities > react, multiplies the vocalization WEIGHT (i.e. the desire of that character to vocalize RELATIVE to other characters in the scene).\nThus if you hurt the arbiter, say, he\'s still going to yell at you, no matter what, and if you kill somebody and nobody else is there to witness it, he will yell at you.\nAs always, 0 means speak normally, 1 means skip everything (don\'t say shit)"),
		{ _field_real, "character skip fraction", nullptr, nullptr, "[0,1]" },
		{ _field_real, "look comment time", "How long does the player look at an AI before the AI responds?", "s" },
		{ _field_real, "look long comment time", "How long does the player look at the AI before he responds with his 'long look' comment?", "s" },
		{ _field_terminator }
	};

	#define CHARACTER_VOICE_BLOCK_ID { 0xE9694AE, 0x3ECD47C8, 0x99F06F2E, 0x3C8CF1EA }
	TAG_STRUCT(
		character_voice_block,
		"character_voice_block",
		"character_voice_block",
		"s_character_voice_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_VOICE_BLOCK_ID)
	{
		{ _field_tag_reference, "dialogue", &dialogue_group_reference$2 },
		{ _field_string_id, "designator" },
		{ _field_real, "weight" },
		{ _field_block, "region filters", &character_voice_region_filter_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(dialogue_group_reference$2, DIALOGUE_TAG);

	#define CHARACTER_VOICE_PROPERTIES_BLOCK_ID { 0x7759D0CE, 0x3966482F, 0xAF71A161, 0x26B935C0 }
	TAG_STRUCT(
		character_voice_properties_block,
		"character_voice_properties_block",
		"character_voice_properties_block",
		"s_character_voice_properties_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_VOICE_PROPERTIES_BLOCK_ID)
	{
		{ _field_block, "voices", &character_voice_block_block },
		{ _field_string_id, "default dialogue effect id", "gets applied if the vocalization has no dialogue effect id." },
		{ _field_terminator }
	};

	#define CHARACTER_VOICE_REGION_FILTER_BLOCK_STRUCT_ID { 0xCCC4D9D2, 0xCC244B90, 0xBCE6554E, 0xA3CBD899 }
	TAG_STRUCT(
		character_voice_region_filter_block_struct,
		"character_voice_region_filter_block_struct",
		"character_voice_region_filter_block_struct",
		"s_character_voice_region_filter_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_VOICE_REGION_FILTER_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "region name" },
		{ _field_block, "permutation filters", &character_voice_region_permutation_filter_block_block },
		{ _field_terminator }
	};

	#define CHARACTER_VOICE_REGION_PERMUTATION_FILTER_BLOCK_STRUCT_ID { 0x34A689D6, 0xE1A64AED, 0x819E1A9F, 0xAD13A480 }
	TAG_STRUCT(
		character_voice_region_permutation_filter_block_struct,
		"character_voice_region_permutation_filter_block_struct",
		"character_voice_region_permutation_filter_block_struct",
		"s_character_voice_region_permutation_filter_block_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_VOICE_REGION_PERMUTATION_FILTER_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "permutation name" },
		{ _field_terminator }
	};

	#define CHARACTER_WEAPONS_BLOCK_ID { 0x7046E89D, 0xE5944DDB, 0xA3F3667C, 0xAA5DF629 }
	TAG_STRUCT(
		character_weapons_block,
		"character_weapons_block",
		"character_weapons_block",
		"s_character_weapons_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHARACTER_WEAPONS_BLOCK_ID)
	{
		{ _field_long_flags, "weapons flags", &weapon_flags },
		{ _field_tag_reference, "weapon", &weapon_group_reference$3 },
		FIELD_EXPLANATION("Combat ranges", nullptr),
		{ _field_real, "maximum firing range", "we can only fire our weapon at targets within this distance", "world units" },
		{ _field_real, "minimum firing range", "weapon will not be fired at target closer than given distance" },
		{ _field_real_bounds, "normal combat range", nullptr, "world units" },
		{ _field_real, "bombardment range", "we offset our burst targets randomly by this range when firing at non-visible enemies (zero = never)" },
		{ _field_real, "Max special target distance", "Specific target regions on a vehicle or unit will be fired upon only under the given distance", "world units" },
		{ _field_real, "Max extreme target distance", "within this distance actor will be able to do fallback engagement firing patterns. Use for extreme range engagements not otherwise permitted.", "world units" },
		FIELD_EXPLANATION("Ballistic Firing", nullptr),
		{ _field_real, "super-ballistic range", "we try to aim our shots super-ballistically if target is outside this range (zero = never)" },
		{ _field_real_bounds, "Ballistic firing bounds", "At the min range, the min ballistic fraction is used, at the max, the max ballistic fraction is used", "world units" },
		{ _field_real_bounds, "Ballistic fraction bounds", "Controls speed and degree of arc. 0 = high, slow, 1 = low, fast", nullptr, "[0-1]" },
		FIELD_EXPLANATION("Behavior", nullptr),
		{ _field_real_bounds, "first burst delay time", nullptr, "seconds" },
		{ _field_real, "surprise delay time", nullptr, "seconds" },
		{ _field_real, "surprise fire-wildly time", nullptr, "seconds" },
		{ _field_real, "death fire-wildly chance", nullptr, nullptr, "[0,1]" },
		{ _field_real, "death fire-wildly time", nullptr, "seconds" },
		{ _field_real_vector_3d, "custom stand gun offset", "custom standing gun offset for overriding the default in the base actor" },
		{ _field_real_vector_3d, "custom crouch gun offset", "custom crouching gun offset for overriding the default in the base actor" },
		{ _field_long_integer, "Blocked Shot Count", "Number of projectiles blocked before the character is considered blocked. Zero defaults to 6." },
		FIELD_EXPLANATION("special-case firing properties", nullptr),
		{ _field_short_enum, "special-fire mode", "the type of special weapon fire that we can use", &actor_special_fire_mode_enum },
		{ _field_short_enum, "special-fire situation", "when we will decide to use our special weapon fire mode", &actor_special_fire_situation_enum },
		{ _field_real, "special-fire chance", "how likely we are to use our special weapon fire mode", nullptr, "[0,1]" },
		{ _field_real, "special-fire delay", "how long we must wait between uses of our special weapon fire mode", "seconds" },
		{ _field_real, "special damage modifier", "damage modifier for special weapon fire (applied in addition to the normal damage modifier. zero = no change)", nullptr, "[0,1]" },
		{ _field_angle, "special projectile error", "projectile error angle for special weapon fire (applied in addition to the normal error)", "degrees" },
		FIELD_EXPLANATION("Weapon drop when killed", nullptr),
		{ _field_real_bounds, "drop weapon loaded", "amount of ammo loaded into the weapon that we drop (in fractions of a clip, e.g. 0.3 to 0.5)" },
		{ _field_short_integer_bounds, "drop weapon ammo", "total number of rounds in the weapon that we drop (ignored for energy weapons)" },
		FIELD_EXPLANATION("Accuracy", "Parameters control how accuracy changes over the duration of a series of bursts\nAccuracy is an analog value between 0 and 1. At zero, the parameters of the first\nfiring-pattern block is used. At 1, the parameters in the second block is used. In\nbetween, all the values are linearly interpolated"),
		{ _field_real_bounds, "normal accuracy bounds", "Indicates starting and ending accuracies at normal difficulty" },
		{ _field_real, "normal accuracy time", "The amount of time it takes the accuracy to go from starting to ending" },
		{ _field_real_bounds, "heroic accuracy bounds", "Indicates starting and ending accuracies at heroic difficulty" },
		{ _field_real, "heroic accuracy time", "The amount of time it takes the accuracy to go from starting to ending" },
		{ _field_real_bounds, "legendary accuracy bounds", "Indicates starting and ending accuracies at legendary difficulty" },
		{ _field_real, "legendary accuracy time", "The amount of time it takes the accuracy to go from starting to ending" },
		{ _field_tag_reference, "weapon melee damage", &damage_effect_group_reference$3 },
		{ _field_terminator }
	};

	STRINGS(weapon_flags)
	{
		"bursting inhibits movement",
		"must crouch to shoot",
		"use extended safe-to-save range",
		"fixed aiming vector",
		"aim at feet",
		"force aim from barrel position#use only for weapons with really, really long barrels (bfg), do NOT use for rotating turret weapons (warthog, falcon, etc)"
	};
	STRING_LIST(weapon_flags, weapon_flags_strings, _countof(weapon_flags_strings));

	STRINGS(actor_special_fire_mode_enum)
	{
		"none",
		"overcharge",
		"secondary trigger"
	};
	STRING_LIST(actor_special_fire_mode_enum, actor_special_fire_mode_enum_strings, _countof(actor_special_fire_mode_enum_strings));

	STRINGS(actor_special_fire_situation_enum)
	{
		"never",
		"enemy visible",
		"enemy out of sight",
		"strafing"
	};
	STRING_LIST(actor_special_fire_situation_enum, actor_special_fire_situation_enum_strings, _countof(actor_special_fire_situation_enum_strings));

	TAG_REFERENCE(damage_effect_group_reference$3, DAMAGE_EFFECT_TAG);

	#define CHEAPPARTICLETURBULENCETYPEBLOCK_ID { 0x97CA1A74, 0x71CB44A7, 0x8E7407F5, 0xDA0EDC23 }
	TAG_STRUCT(
		cheapparticleturbulencetypeblock,
		"cheapParticleTurbulenceTypeBlock",
		"cheapParticleTurbulenceTypeBlock",
		"s_cheapparticleturbulencetypeblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHEAPPARTICLETURBULENCETYPEBLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_tag_reference, "turbulence", nullptr, "texture used to turbulate particles", &bitmap_group_reference$7 },
		{ _field_real, "turb du dt", "change in u coordinate over time" },
		{ _field_real, "turb dv dt", "change in v coordinate over time" },
		{ _field_real, "turb du dp", "change in u coordinate per particle" },
		{ _field_real, "turb dv dp", "change in v coordinate per particle" },
		{ _field_terminator }
	};

	TAG_REFERENCE(bitmap_group_reference$7, BITMAP_TAG);

	#define CHEAP_LIGHT_MARKER_REF_BLOCK_ID { 0x4AFFFB87, 0xCAAA40E9, 0x9BBBFE53, 0xCCC8B62 }
	TAG_STRUCT(
		cheap_light_marker_ref_block,
		"cheap_light_marker_ref_block",
		"cheap_light_marker_ref_block",
		"s_cheap_light_marker_ref_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHEAP_LIGHT_MARKER_REF_BLOCK_ID)
	{
		{ _field_short_block_index, "cheap light reference reference", &cheap_light_reference_block_block },
		FIELD_PAD("WHATIZZIT", 2),
		{ _field_terminator }
	};

	#define CHEAP_LIGHT_REFERENCE_BLOCK_ID { 0xFE62CAFA, 0x49536A8C, 0xB9E5A93F, 0xA9AA1AAB }
	TAG_STRUCT(
		cheap_light_reference_block,
		"cheap_light_reference_block",
		"cheap_light_reference_block",
		"s_cheap_light_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHEAP_LIGHT_REFERENCE_BLOCK_ID)
	{
		{ _field_short_integer, "marker index" },
		FIELD_PAD("ldajk", 2),
		{ _field_tag_reference, "cheap light", &cheap_light_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(cheap_light_group_reference, CHEAP_LIGHT_TAG, TAG_REFERENCE_FLAG_RESOLVED_BY_GAME);

	#define CHEAP_LIGHT_STRUCT_DEFINITION_ID { 0x6A1EB2F2, 0xF6AF4F2D, 0x9C2D7F25, 0xE4B6E5AE }
	TAG_STRUCT(
		cheap_light_struct_definition,
		"cheap_light_struct_definition",
		"cheap_light_struct_definition",
		"s_cheap_light_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHEAP_LIGHT_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Cheap Lights", "These are the cheapest light possible. They are spherical, have a color with an intensity and a radius - and that\'s it. They should be small: 0.5 or smaller if you can get close to them. That\'s why they are so cheap."),
		{ _field_char_enum, "function input", &cheaplightfunctioninputenum },
		FIELD_PAD("clblah", 3),
		FIELD_EXPLANATION("COLOR", "color and intensity of the light"),
		{ _field_struct, "color", &light_color_function_struct },
		{ _field_struct, "intensity", &light_scalar_function_struct },
		FIELD_EXPLANATION("SIZE", "radius of the spherical light"),
		{ _field_struct, "Falloff End", MAKE_ALT_NAMES("radius"), &light_scalar_function_struct },
		{ _field_real, "Falloff Begin Ratio", "Ratio of falloff start to falloff end", nullptr, "[0-1]" },
		{ _field_real, "near fade distance", nullptr, "world units", MAKE_ALT_NAMES("closeup fading distance") },
		{ _field_real, "far fade begin", nullptr, "world units" },
		{ _field_real, "far fade cutoff", nullptr, "world units" },
		{ _field_terminator }
	};

	STRINGS(cheaplightfunctioninputenum)
	{
		"time/age",
		"scale A",
		"scale B"
	};
	STRING_LIST(cheaplightfunctioninputenum, cheaplightfunctioninputenum_strings, _countof(cheaplightfunctioninputenum_strings));

	#define CHEAP_PARTICLE_BITMAP_REFERENCE_BLOCK_ID { 0x6F5DFB08, 0xFA04C2C, 0xB051184D, 0xA52DBEBA }
	TAG_STRUCT(
		cheap_particle_bitmap_reference_block,
		"cheap_particle_bitmap_reference_block",
		"cheap_particle_bitmap_reference_block",
		"s_cheap_particle_bitmap_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHEAP_PARTICLE_BITMAP_REFERENCE_BLOCK_ID)
	{
		{ _field_tag_reference, "bitmap", &bitmap_group_reference$7 },
		{ _field_terminator }
	};

	#define CHEAP_PARTICLE_EMITTER_STRUCT_DEFINITION_ID { 0x3578EF2, 0xE31FA29B, 0x53BAF43A, 0xE427CA }
	TAG_STRUCT(
		cheap_particle_emitter_struct_definition,
		"cheap_particle_emitter_struct_definition",
		"cheap_particle_emitter_struct_definition",
		"s_cheap_particle_emitter_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHEAP_PARTICLE_EMITTER_STRUCT_DEFINITION_ID)
	{
		{ _field_word_flags, "flags", &cheap_particle_emitter_flags },
		{ _field_word_integer, "version" },
		{ _field_real, "spawn rate", nullptr, "particles per second" },
		FIELD_EXPLANATION("SPAWN RATE", "how many particles to spawn per second"),
		{ _field_struct, "spawnrate", &cheap_particle_scalar_object_function_struct },
		FIELD_EXPLANATION("LOD", "reduces the number of particles at distance"),
		{ _field_real, "distance fade start", "the distance where the number of spawned particles starts to be reduced", "world_units" },
		{ _field_real, "distance fade end", "the distance where the number of spawned particles is zero", "world units" },
		FIELD_EXPLANATION("TYPES", "types of particles to spawn, from the global particle type library"),
		FIELD_GROUP_BEGIN("types"),
		{ _field_string_id, "type 0" },
		{ _field_real, "weight 0" },
		{ _field_string_id, "type 1" },
		{ _field_real, "weight 1" },
		{ _field_string_id, "type 2" },
		{ _field_real, "weight 2" },
		{ _field_string_id, "type 3" },
		{ _field_real, "weight 3" },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("LIFETIME", "how long the spawned particles will last"),
		{ _field_real_bounds, "lifetime", nullptr, "seconds" },
		FIELD_EXPLANATION("EMITTER PARAMETERS", "controls where a particle spawns, and its initial velocity"),
		{ _field_tag_reference, "position texture", &bitmap_group_reference$7 },
		{ _field_real, "position scale" },
		{ _field_real, "position flatten" },
		{ _field_tag_reference, "velocity texture", &bitmap_group_reference$7 },
		{ _field_real_bounds, "directionality", "Blends between a random direction and the forward direction", nullptr, "[0-1]" },
		{ _field_real_bounds, "speed scale", "scales the initial speed of the particle" },
		{ _field_real_bounds, "subframe offset", "spawns particle at subframe time", "frames" },
		FIELD_EXPLANATION("PARTICLE PARAMETERS", "controls randomized rotation and size"),
		{ _field_real, "rotation randomness", "how much the particle is randomly rotated", nullptr, "[0-1]" },
		{ _field_real, "particle scale modifier", "modifies the inherent scale of the particles", nullptr, "[0-2]" },
		FIELD_EXPLANATION("LIGHTING PARAMETERS", "controls the effects of lighting on this particle\nNOTE: only monochrome lighting is supported in neuticles"),
		{ _field_real, "lighting contrast", "increase or decrease contrast between bright and dark areas" },
		{ _field_real, "lighting offset", "adjust overall brightness in all areas" },
		{ _field_real, "lighting min", "clamps darkest particles to this exposure" },
		{ _field_real, "lighting max", "clamps brightest particles to this exposure" },
		{ _field_real_quaternion, "spawn_params0" },
		{ _field_real_quaternion, "spawn_params1" },
		{ _field_real_quaternion, "spawn_params2" },
		{ _field_real_quaternion, "spawn_params3" },
		{ _field_real_quaternion, "spawn_params4" },
		{ _field_tag_reference, "global type library", &cheap_particle_type_library_group_reference },
		{ _field_terminator }
	};

	STRINGS(cheap_particle_emitter_flags)
	{
		"correlate position and velocity",
		"position texture in local space",
		"velocity texture in local space",
		"normalize velocity before scaling",
		"randomly rotate emitter about up vector"
	};
	STRING_LIST(cheap_particle_emitter_flags, cheap_particle_emitter_flags_strings, _countof(cheap_particle_emitter_flags_strings));

	TAG_REFERENCE(cheap_particle_type_library_group_reference, CHEAP_PARTICLE_TYPE_LIBRARY_TAG);

	#define CHEAP_PARTICLE_SCALAR_OBJECT_FUNCTION_STRUCT_ID { 0xE439295B, 0xED024F7F, 0xBA3D7B94, 0x393D4F18 }
	TAG_STRUCT(
		cheap_particle_scalar_object_function_struct,
		"cheap_particle_scalar_object_function_struct",
		"cheap_particle_scalar_object_function_struct",
		"s_cheap_particle_scalar_object_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHEAP_PARTICLE_SCALAR_OBJECT_FUNCTION_STRUCT_ID)
	{
		{ _field_string_id, "Input Variable", _field_id_function_input_scalar },
		{ _field_string_id, "Range Variable", _field_id_function_input_range },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define CHEAP_PARTICLE_TYPE_BLOCK_ID { 0x3268D5F7, 0x4EE149C2, 0xAF15C140, 0xE9900147 }
	TAG_STRUCT(
		cheap_particle_type_block,
		"cheap_particle_type_block",
		"cheap_particle_type_block",
		"s_cheap_particle_type_block",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHEAP_PARTICLE_TYPE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		FIELD_GROUP_BEGIN("physics"),
		{ _field_real, "drag" },
		{ _field_real, "gravity" },
		{ _field_real, "turbulence" },
		{ _field_long_block_index, "turbulence type", "the type of turbulence this particle will experience", &cheapparticleturbulencetypeblock_block },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("collision"),
		{ _field_real, "depth_range", "depth range over which the particle will collide" },
		{ _field_real, "elasticity", "energy remaining after collision bounce" },
		{ _field_real, "death", "percentage change [0-1] that the particle will die on collision" },
		{ _field_long_block_index, "change type", "the type this particle will change into on collision", &cheap_particle_type_block_block },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("render"),
		{ _field_long_enum, "orientation", &cheap_particle_type_orientation },
		FIELD_EXPLANATION("render parameters", "cheap particles do not use alpha-blend transparency, they use multiply-and-add\nas such, an alpha of zero gives you additive particles, and an alpha of one gives you alpha-blend particles"),
		{ _field_real_argb_color, "color0" },
		{ _field_real, "intensity0" },
		{ _field_real, "fade start", "point in particles lifetime at which fade begins", nullptr, "[0,1]" },
		{ _field_real_bounds, "size", nullptr, "world units" },
		{ _field_real, "motion blur stretch", "how much the particle stretches as it moves" },
		{ _field_long_block_index, "texture", &cheap_particle_bitmap_reference_block_block },
		{ _field_real, "texture y scale", "scales the texture in the y direction" },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(cheap_particle_type_orientation)
	{
		"velocity",
		"screen facing"
	};
	STRING_LIST(cheap_particle_type_orientation, cheap_particle_type_orientation_strings, _countof(cheap_particle_type_orientation_strings));

	#define CHEAP_PARTICLE_TYPE_LIBRARY_STRUCT_DEFINITION_ID { 0x2BCDE64D, 0xF1374714, 0x8A6A9EB7, 0xAD124FCF }
	TAG_STRUCT(
		cheap_particle_type_library_struct_definition,
		"cheap_particle_type_library_struct_definition",
		"cheap_particle_type_library_struct_definition",
		"s_cheap_particle_type_library_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHEAP_PARTICLE_TYPE_LIBRARY_STRUCT_DEFINITION_ID)
	{
		FIELD_CUSTOM("compile", _tag_field_custom_type_tool_command),
		{ _field_block, "types", &cheap_particle_type_block_block },
		{ _field_block, "textures", &cheap_particle_bitmap_reference_block_block },
		{ _field_tag_reference, "random", nullptr, "texture used to generate random values per particle", &bitmap_group_reference$7 },
		{ _field_block, "turbulence types", &cheapparticleturbulencetypeblock_block },
		{ _field_tag_reference, "type_texture", &bitmap_group_reference$7 },
		{ _field_tag_reference, "render_texture", &bitmap_group_reference$7 },
		{ _field_tag_reference, "turbulenceTexture", &bitmap_group_reference$7 },
		{ _field_terminator }
	};

	#define CHEAT_POWERUPS_BLOCK_ID { 0x60B57D08, 0xF45F431C, 0xBCFF4793, 0x3C28C018 }
	TAG_STRUCT(
		cheat_powerups_block,
		"cheat_powerups_block",
		"cheat_powerups_block",
		"s_cheat_powerups_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHEAT_POWERUPS_BLOCK_ID)
	{
		{ _field_tag_reference, "powerup", &equipment_group_reference },
		{ _field_terminator }
	};

	#define CHEAT_WEAPONS_BLOCK_ID { 0xD13CBBE7, 0x9DEC4ED6, 0x983BA69C, 0x9D39AE04 }
	TAG_STRUCT(
		cheat_weapons_block,
		"cheat_weapons_block",
		"cheat_weapons_block",
		"s_cheat_weapons_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHEAT_WEAPONS_BLOCK_ID)
	{
		{ _field_tag_reference, "weapon", &item_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(item_group_reference, ITEM_TAG);

	#define CHOPPER_BLOCK_ID { 0x83DF59C4, 0xC84947A4, 0x9CF064DB, 0x32894CC }
	TAG_STRUCT(
		chopper_block,
		"chopper_block",
		"chopper_block",
		"s_chopper_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CHOPPER_BLOCK_ID)
	{
		{ _field_struct, "steering control", &vehicle_steering_control_struct },
		{ _field_struct, "turning control", &vehicle_turning_control_struct },
		{ _field_struct, "engine", &global_vehicle_engine_struct },
		FIELD_EXPLANATION("wheel circumferance", nullptr),
		{ _field_real, "wheel circumferance" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "rotation marker" },
		{ _field_real, "magic turning scale", "scale up the magic force" },
		{ _field_real, "magic turning acc", "(degrees/pow(sec,2))rate at which the turning tries to accelerate" },
		{ _field_real, "magic turning max vel.", "(degrees/sec)rate at which vehicl tries to turn" },
		{ _field_real, "magic turning exponent", "turn_acc=delta^exp" },
		{ _field_real, "bank to slide ratio", "(WU/sec)the slide velocity at which we achieve full bank" },
		{ _field_real, "bank slide exponent" },
		{ _field_real, "bank to turn ratio", "(WU/sec)the slide velocity at which we achieve full bank" },
		{ _field_real, "bank turn exponent" },
		{ _field_real, "bank fraction", "fraction of possible tire drop when we bank. 0 is full bank 1 is no bank." },
		{ _field_real, "bank rate", "bank fraction velocity. (0-1 fraction / sec)" },
		{ _field_real, "wheel accel", "acceleration of the wheel towards the engine speed" },
		{ _field_real, "gyroscopic damping", "0==none, 30==damn near full damping" },
		{ _field_terminator }
	};

	#define CINEMATICDATASHOTBLOCK_ID { 0x93F7EE7A, 0xECF14886, 0x997A153B, 0x3FE4CE24 }
	TAG_STRUCT(
		cinematicdatashotblock,
		"cinematicDataShotBlock",
		"cinematicDataShotBlock",
		"s_cinematicdatashotblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATICDATASHOTBLOCK_ID)
	{
		{ _field_block, "dialogue", &cinematic_shot_dialogue_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "effects", &cinematic_shot_effect_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "custom script", &cinematic_shot_custom_script_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_long_integer, "frame count" },
		{ _field_block, "frame data", &cinematic_shot_frame_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "dynamic frame data", &cinematic_shot_frame_dynamic_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "constant frame data", &cinematic_shot_frame_constant_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_terminator }
	};

	#define CINEMATICSCENEDATAOBJECTBLOCK_STRUCT_ID { 0xDAB513EC, 0x33A549FA, 0x962D8DE6, 0x722B8799 }
	TAG_STRUCT(
		cinematicscenedataobjectblock_struct,
		"cinematicSceneDataObjectBlock_struct",
		"cinematicSceneDataObjectBlock_struct",
		"s_cinematicscenedataobjectblock_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATICSCENEDATAOBJECTBLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "identifier" },
		{ _field_tag_reference, "model animation graph", &model_animation_graph_group_reference },
		{ _field_tag_reference, "object type", &object_group_scenery_group_effect_scenery_group_reference },
		FIELD_CUSTOM("shots active flags", _field_id_cinematic_scene_flags),
		{ _field_array, "shots active flags", &g_cinematicshotflagarray$2, _field_id_cinematic_scene_flags },
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(object_group_scenery_group_effect_scenery_group_reference)
	{
		OBJECT_TAG,
		SCENERY_TAG,
		EFFECT_SCENERY_TAG,
		INVALID_TAG
	};

	#define CINEMATICSHOTTEXTUREMOVIEBLOCK_ID { 0x7AC4065C, 0x22F04AD1, 0x895E6A2C, 0x59924DB }
	TAG_STRUCT(
		cinematicshottexturemovieblock,
		"cinematicShotTextureMovieBlock",
		"cinematicShotTextureMovieBlock",
		"s_cinematicshottexturemovieblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATICSHOTTEXTUREMOVIEBLOCK_ID)
	{
		{ _field_long_flags, "flags", &texturemovieflags },
		FIELD_CUSTOM("frame", _field_id_cinematic_frame_index),
		{ _field_long_integer, "frame", _field_id_cinematic_frame_index },
		{ _field_tag_reference, "bink movie", &bink_group_reference },
		{ _field_terminator }
	};

	STRINGS(texturemovieflags)
	{
		"Stop Movie At Frame (rather than starting it)"
	};
	STRING_LIST(texturemovieflags, texturemovieflags_strings, _countof(texturemovieflags_strings));

	TAG_REFERENCE(bink_group_reference, BINK_TAG);

	#define CINEMATICSTRUCTURELIGHTINGBLOCK_ID { 0xF27B62CA, 0x34B243BF, 0x924FBCFD, 0xE3D020B9 }
	TAG_STRUCT(
		cinematicstructurelightingblock,
		"cinematicStructureLightingBlock",
		"cinematicStructureLightingBlock",
		"s_cinematicstructurelightingblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATICSTRUCTURELIGHTINGBLOCK_ID)
	{
		{ _field_tag_reference, "structure lighting info", &scenario_structure_lighting_info_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(scenario_structure_lighting_info_group_reference, SCENARIO_STRUCTURE_LIGHTING_INFO_TAG);

	#define CINEMATIC_BLOCK_STRUCT_ID { 0xC3B34AC3, 0x66746A9, 0x861EC843, 0xA1016B03 }
	TAG_STRUCT(
		cinematic_block_struct,
		"cinematic_block_struct",
		"cinematic_block_struct",
		"s_cinematic_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_BLOCK_STRUCT_ID)
	{
		FIELD_CUSTOM("custom playback", _tag_field_custom_type_cinematic_playback),
		{ _field_struct, "cinematic playback", &cinematic_playback_data_block },
		{ _field_struct, "scenario and zone set", &scenario_and_zone_set_struct },
		{ _field_string_id, "name" },
		{ _field_short_enum, "channel type", &cinematic_channel_type_enum },
		FIELD_PAD("PADDING", 2),
		{ _field_long_flags, "flags", &cinematic_flags },
		{ _field_real, "easing in time", "seconds" },
		{ _field_real, "easing out time", "seconds" },
		{ _field_tag_reference, "transition settings", &cinematic_transition_group_reference },
		{ _field_tag_reference, "bink movie", &bink_group_reference },
		{ _field_string, "bink movie on disc" },
		FIELD_GROUP_BEGIN("Header"),
		{ _field_struct, "header", &cinematic_custom_script_block },
		FIELD_GROUP_END(),
		{ _field_block, "scenes", &cinematic_scene_reference_block_block },
		FIELD_GROUP_BEGIN("Footer"),
		{ _field_struct, "footer", &cinematic_custom_script_block },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("If The Player Skips"),
		{ _field_struct, "early exit", &cinematic_custom_script_block },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(cinematic_channel_type_enum)
	{
		"letterbox",
		"briefing",
		"perspective",
		"vignette",
		"bink briefing",
		"bink (full screen)"
	};
	STRING_LIST(cinematic_channel_type_enum, cinematic_channel_type_enum_strings, _countof(cinematic_channel_type_enum_strings));

	STRINGS(cinematic_flags)
	{
		"Outro",
		"Extra Memory Bink",
		"Opaque Bink",
		"Don\'t Stretch Bink",
		"Don\'t Force Hologram Render"
	};
	STRING_LIST(cinematic_flags, cinematic_flags_strings, _countof(cinematic_flags_strings));

	TAG_REFERENCE(cinematic_transition_group_reference, CINEMATIC_TRANSITION_TAG);

	#define CINEMATIC_CHARACTERS_BLOCK_ID { 0x4A6E3D74, 0xC507478D, 0x862BFF5F, 0x1F1FA177 }
	TAG_STRUCT(
		cinematic_characters_block,
		"cinematic_characters_block",
		"cinematic_characters_block",
		"s_cinematic_characters_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_CHARACTERS_BLOCK_ID)
	{
		{ _field_string_id, "character name" },
		{ _field_real_rgb_color, "subtitle color" },
		{ _field_real_rgb_color, "shadow color" },
		{ _field_terminator }
	};

	#define CINEMATIC_CUSTOM_SCRIPT_BLOCK_ID { 0xC119D09A, 0x7F5F44A3, 0x9703E8E0, 0x3EFD6987 }
	TAG_STRUCT(
		cinematic_custom_script_block,
		"cinematic_custom_script_block",
		"cinematic_custom_script_block",
		"s_cinematic_custom_script_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_CUSTOM_SCRIPT_BLOCK_ID)
	{
		{ _field_data, "script", MAKE_ALT_NAMES(" "), &custom_script_data },
		{ _field_terminator }
	};

	#define CINEMATIC_DYNAMIC_LIGHT_BLOCK_ID { 0x6D9568FD, 0x448D4F36, 0x9C5940F5, 0x15B39D09 }
	TAG_STRUCT(
		cinematic_dynamic_light_block,
		"cinematic_dynamic_light_block",
		"cinematic_dynamic_light_block",
		"s_cinematic_dynamic_light_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_DYNAMIC_LIGHT_BLOCK_ID)
	{
		{ _field_long_flags, "Flags", &cinematic_dynamic_light_flags },
		FIELD_CUSTOM("Dynamic Light", _tag_field_custom_type_cinematic_dynamic_light),
		FIELD_CUSTOM("Direction", _tag_field_custom_type_slider),
		{ _field_real, "Direction", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Front-Back", _tag_field_custom_type_slider),
		{ _field_real, "Front-Back", _tag_field_custom_type_slider },
		{ _field_real, "Distance", nullptr, "world units" },
		{ _field_tag_reference, "light", &light_group_reference$2 },
		{ _field_terminator }
	};

	STRINGS(cinematic_dynamic_light_flags)
	{
		"debug this light",
		"follow object",
		"position at marker"
	};
	STRING_LIST(cinematic_dynamic_light_flags, cinematic_dynamic_light_flags_strings, _countof(cinematic_dynamic_light_flags_strings));

	TAG_REFERENCE(light_group_reference$2, LIGHT_TAG);

	#define CINEMATIC_EXTRA_CAMERA_FRAME_BLOCK_ID { 0x39DDFE90, 0x9DEA4DD3, 0x994B8B1C, 0xECB7261F }
	TAG_STRUCT(
		cinematic_extra_camera_frame_block,
		"cinematic_extra_camera_frame_block",
		"cinematic_extra_camera_frame_block",
		"s_cinematic_extra_camera_frame_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_EXTRA_CAMERA_FRAME_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &cinematic_extra_camera_frame_flags },
		{ _field_struct, "frame data", &camera_frame_struct },
		{ _field_terminator }
	};

	STRINGS(cinematic_extra_camera_frame_flags)
	{
		"enabled"
	};
	STRING_LIST(cinematic_extra_camera_frame_flags, cinematic_extra_camera_frame_flags_strings, _countof(cinematic_extra_camera_frame_flags_strings));

	#define CINEMATIC_EXTRA_CAMERA_SHOT_BLOCK_ID { 0x897BBEBF, 0xD4A34B10, 0x91144E0E, 0xE6EFBDD5 }
	TAG_STRUCT(
		cinematic_extra_camera_shot_block,
		"cinematic_extra_camera_shot_block",
		"cinematic_extra_camera_shot_block",
		"s_cinematic_extra_camera_shot_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_EXTRA_CAMERA_SHOT_BLOCK_ID)
	{
		{ _field_block, "frame data", &cinematic_extra_camera_frame_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_terminator }
	};

	#define CINEMATIC_PLAYBACK_DATA_BLOCK_ID { 0xEBD41AA0, 0x8EDA4FF2, 0x91204D62, 0x3C9BA5B4 }
	TAG_STRUCT(
		cinematic_playback_data_block,
		"cinematic_playback_data_block",
		"cinematic_playback_data_block",
		"s_cinematic_playback_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_PLAYBACK_DATA_BLOCK_ID)
	{
		{ _field_long_block_flags, "scenes", &cinematic_scene_reference_block_block },
		{ _field_long_block_flags, "scenes expanded", &cinematic_scene_reference_block_block },
		{ _field_block, "shots", &cinematic_shot_playback_data_block_block },
		{ _field_long_integer, "bsp zone flags" },
		{ _field_terminator }
	};

	#define CINEMATIC_SCENE_DATA_STRUCT_DEFINITION_ID { 0x47C351F7, 0xEBF24619, 0xB563ACCC, 0xE2868568 }
	TAG_STRUCT(
		cinematic_scene_data_struct_definition,
		"cinematic_scene_data_struct_definition",
		"cinematic_scene_data_struct_definition",
		"s_cinematic_scene_data_struct_definition",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SCENE_DATA_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "objects", &cinematicscenedataobjectblock_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "shots", &cinematicdatashotblock_block },
		{ _field_block, "extra camera frame data", &cinematic_shot_extra_camera_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_long_integer, "version" },
		{ _field_terminator }
	};

	#define CINEMATIC_SCENE_OBJECT_BLOCK_STRUCT_ID { 0x50C09E03, 0x425D488E, 0xA09DB8AD, 0x3EB374E0 }
	TAG_STRUCT(
		cinematic_scene_object_block_struct,
		"cinematic_scene_object_block_struct",
		"cinematic_scene_object_block_struct",
		"s_cinematic_scene_object_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SCENE_OBJECT_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "variant name" },
		{ _field_long_flags, "flags", &scene_object_flags },
		FIELD_CUSTOM("lightmap shadow flags", _field_id_cinematic_scene_flags),
		{ _field_array, "lightmap shadow flags", &g_cinematicshotflagarray$2, _field_id_cinematic_scene_flags },
		FIELD_CUSTOM("high res flags", _field_id_cinematic_scene_flags),
		{ _field_array, "high res flags", &g_cinematicshotflagarray$2, _field_id_cinematic_scene_flags },
		{ _field_long_flags, "override creation flags", &cinematic_coop_type_flags },
		FIELD_EXPLANATION("Custom override creation condition", "Used in combination with the override creation flags above"),
		{ _field_struct, "custom don't create condition", &cinematic_custom_script_block },
		{ _field_block, "attachments", &scene_object_attachment_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_terminator }
	};

	STRINGS(scene_object_flags)
	{
		"Placed Manually in Sapien",
		"Object Comes From Game",
		"Special Case (like player0)",
		"Effect Object",
		"No Lightmap Shadow",
		"Apply Player Customization",
		"Apply First Person Player Customization",
		"I will animate the English lipsync manually",
		"Primary Cortana",
		"Preload Textures"
	};
	STRING_LIST(scene_object_flags, scene_object_flags_strings, _countof(scene_object_flags_strings));

	STRINGS(cinematic_coop_type_flags)
	{
		"single player",
		"2 player co-op",
		"3 player co-op",
		"4 player co-op"
	};
	STRING_LIST(cinematic_coop_type_flags, cinematic_coop_type_flags_strings, _countof(cinematic_coop_type_flags_strings));

	#define CINEMATIC_SCENE_REFERENCE_BLOCK_ID { 0x77C11E67, 0x725B4B54, 0x916808BF, 0x593A841D }
	TAG_STRUCT(
		cinematic_scene_reference_block,
		"cinematic_scene_reference_block",
		"cinematic_scene_reference_block",
		"s_cinematic_scene_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SCENE_REFERENCE_BLOCK_ID)
	{
		{ _field_tag_reference, "scene", &cinematic_scene_group_reference },
		{ _field_tag_reference, "data", &cinematic_scene_data_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(cinematic_scene_group_reference, CINEMATIC_SCENE_TAG);

	TAG_REFERENCE(cinematic_scene_data_group_reference, CINEMATIC_SCENE_DATA_TAG);

	#define CINEMATIC_SCENE_STRUCT_DEFINITION_ID { 0x2F16CF25, 0xB4144920, 0xAA9CA793, 0x6DFF67F }
	TAG_STRUCT(
		cinematic_scene_struct_definition,
		"cinematic_scene_struct_definition",
		"cinematic_scene_struct_definition",
		"s_cinematic_scene_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SCENE_STRUCT_DEFINITION_ID)
	{
		FIELD_CUSTOM("loop now", _tag_field_custom_type_cinematic_playback_loop_scene),
		{ _field_string_id, "name" },
		{ _field_string_id, "anchor" },
		{ _field_short_enum, "reset object lighting", &scene_reset_object_lighting_enum },
		FIELD_PAD("pad", 2),
		{ _field_tag_reference, "data", &cinematic_scene_data_group_reference },
		FIELD_GROUP_BEGIN("Header"),
		{ _field_struct, "header", &cinematic_custom_script_block },
		FIELD_GROUP_END(),
		{ _field_block, "objects", &cinematic_scene_object_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "shots", &cinematic_shot_block_block },
		{ _field_block, "lights", &cinematicstructurelightingblock_block, _tag_field_attributed_definition_block_collapsed_field_default },
		FIELD_GROUP_BEGIN("Footer"),
		{ _field_struct, "footer", &cinematic_custom_script_block },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(scene_reset_object_lighting_enum)
	{
		"Default",
		"Don\'t reset lighting",
		"Reset lighting"
	};
	STRING_LIST(scene_reset_object_lighting_enum, scene_reset_object_lighting_enum_strings, _countof(scene_reset_object_lighting_enum_strings));

	#define CINEMATIC_SHOT_BLOCK_STRUCT_ID { 0xCD10E9F0, 0x721C470E, 0x8571C1FE, 0xA88E8AC9 }
	TAG_STRUCT(
		cinematic_shot_block_struct,
		"cinematic_shot_block_struct",
		"cinematic_shot_block_struct",
		"s_cinematic_shot_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_BLOCK_STRUCT_ID)
	{
		FIELD_CUSTOM("loop now", _tag_field_custom_type_cinematic_playback_loop_shot),
		FIELD_GROUP_BEGIN("Header"),
		{ _field_struct, "header", &cinematic_custom_script_block },
		{ _field_long_flags, "flags", &shot_flags_definition },
		FIELD_CUSTOM("environment darken", _tag_field_custom_type_slider),
		{ _field_real, "environment darken", "this works best with auto-exposure off", "0 - 1", _tag_field_custom_type_slider },
		FIELD_CUSTOM("forced exposure", _tag_field_custom_type_slider),
		{ _field_real, "forced exposure", "will disable auto-exposure", "stops", _tag_field_custom_type_slider },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Settings"),
		{ _field_long_flags, "settings flags", &sceneshotsettingsflags },
		{ _field_real, "Lightmap Direct Scalar" },
		{ _field_real, "Lightmap Indirect Scalar" },
		{ _field_real, "Sun Scalar" },
		{ _field_tag_reference, "Atmosphere Fog", &atmosphere_fog_group_reference },
		{ _field_tag_reference, "Camera Effects", &camera_fx_settings_group_reference },
		{ _field_tag_reference, "Cubemap", &bitmap_group_reference$2 },
		FIELD_GROUP_END(),
		{ _field_block, "lighting", &cinematic_shot_lighting_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "clip", &cinematic_shot_clip_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "music", &cinematic_shot_music_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "object functions", &cinematic_shot_object_function_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "screen effects", &cinematic_shot_screen_effect_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "user input constraints", &cinematic_shot_user_input_constraints_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "texture movies", &cinematicshottexturemovieblock_block, _tag_field_attributed_definition_block_collapsed_field_default },
		FIELD_GROUP_BEGIN("Footer"),
		{ _field_struct, "footer", &cinematic_custom_script_block },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(shot_flags_definition)
	{
		"Instant Auto-Exposure",
		"Force Exposure",
		"Generate Looping Script"
	};
	STRING_LIST(shot_flags_definition, shot_flags_definition_strings, _countof(shot_flags_definition_strings));

	STRINGS(sceneshotsettingsflags)
	{
		"Lightmap Scalars - set",
		"Lightmap Scalars - clear",
		"Lightmap Scalars - persist across shots",
		"Atmosphere Fog - clear",
		"Atmosphere fog - persist across shots",
		"Camera Effects - clear",
		"Camera Effects - persist across shots",
		"Sun Scalar - set",
		"Sun Scalar - clear",
		"Sun Scalar - persist across shots",
		"Cubemap - clear",
		"Cubemap - persist across shots",
		"Disable All Lightmap Shadows"
	};
	STRING_LIST(sceneshotsettingsflags, sceneshotsettingsflags_strings, _countof(sceneshotsettingsflags_strings));

	TAG_REFERENCE(atmosphere_fog_group_reference, ATMOSPHERE_FOG_TAG);

	TAG_REFERENCE(camera_fx_settings_group_reference, CAMERA_FX_SETTINGS_TAG);

	#define CINEMATIC_SHOT_CLIP_BLOCK_ID { 0xE6CA5E17, 0x64634682, 0x97D7DE14, 0x41724603 }
	TAG_STRUCT(
		cinematic_shot_clip_block,
		"cinematic_shot_clip_block",
		"cinematic_shot_clip_block",
		"s_cinematic_shot_clip_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_CLIP_BLOCK_ID)
	{
		{ _field_real_point_3d, "plane center" },
		{ _field_real_point_3d, "plane direction" },
		FIELD_CUSTOM("frame start", _field_id_cinematic_frame_index),
		{ _field_long_integer, "frame start", _field_id_cinematic_frame_index },
		FIELD_CUSTOM("frame end", _field_id_cinematic_frame_index),
		{ _field_long_integer, "frame end", _field_id_cinematic_frame_index },
		{ _field_block, "subject objects", &cinematic_shot_clip_subject_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_terminator }
	};

	#define CINEMATIC_SHOT_CLIP_SUBJECT_BLOCK_ID { 0xFD9DBB28, 0x7065418F, 0x93640300, 0xE4390930 }
	TAG_STRUCT(
		cinematic_shot_clip_subject_block,
		"cinematic_shot_clip_subject_block",
		"cinematic_shot_clip_subject_block",
		"s_cinematic_shot_clip_subject_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_CLIP_SUBJECT_BLOCK_ID)
	{
		{ _field_long_block_index, "index", &cinematic_scene_object_block_block },
		{ _field_terminator }
	};

	#define CINEMATIC_SHOT_CUSTOM_SCRIPT_BLOCK_ID { 0xBC8133AA, 0xC1F84079, 0x922C7BA9, 0x5FCA1CD2 }
	TAG_STRUCT(
		cinematic_shot_custom_script_block,
		"cinematic_shot_custom_script_block",
		"cinematic_shot_custom_script_block",
		"s_cinematic_shot_custom_script_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_CUSTOM_SCRIPT_BLOCK_ID)
	{
		{ _field_byte_flags, "flags", &cinematic_shot_custom_script_flags },
		FIELD_PAD("CMVOIRLKSD", 3),
		FIELD_CUSTOM("frame", _field_id_cinematic_frame_index),
		{ _field_long_integer, "frame", _field_id_cinematic_frame_index },
		{ _field_struct, "script", &cinematic_custom_script_block },
		{ _field_long_integer, "node id" },
		{ _field_long_integer, "sequence id" },
		{ _field_terminator }
	};

	STRINGS(cinematic_shot_custom_script_flags)
	{
		"use maya value"
	};
	STRING_LIST(cinematic_shot_custom_script_flags, cinematic_shot_custom_script_flags_strings, _countof(cinematic_shot_custom_script_flags_strings));

	#define CINEMATIC_SHOT_DIALOGUE_BLOCK_ID { 0x71BBACCC, 0x8A6D4B0B, 0xB080D7CC, 0x12A99F39 }
	TAG_STRUCT(
		cinematic_shot_dialogue_block,
		"cinematic_shot_dialogue_block",
		"cinematic_shot_dialogue_block",
		"s_cinematic_shot_dialogue_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_DIALOGUE_BLOCK_ID)
	{
		{ _field_tag_reference, "dialogue", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "female dialogue", &sound_combiner_group_sound_old_group_sound_group_reference },
		FIELD_CUSTOM("frame", _field_id_cinematic_frame_index),
		{ _field_long_integer, "frame", _field_id_cinematic_frame_index },
		{ _field_real, "scale" },
		{ _field_string_id, "lipsync actor" },
		{ _field_string_id, "default sound effect" },
		{ _field_string_id, "subtitle" },
		{ _field_string_id, "female subtitle" },
		{ _field_string_id, "character" },
		{ _field_terminator }
	};

	#define CINEMATIC_SHOT_EFFECT_BLOCK_ID { 0x1FE3755D, 0xB74B489F, 0xB43E9A17, 0x145632C0 }
	TAG_STRUCT(
		cinematic_shot_effect_block,
		"cinematic_shot_effect_block",
		"cinematic_shot_effect_block",
		"s_cinematic_shot_effect_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_EFFECT_BLOCK_ID)
	{
		{ _field_byte_flags, "flags", &cinematic_shot_effect_flags },
		{ _field_char_enum, "state", &sceneshoteffectstate },
		FIELD_PAD("CMVOIRLKSD", 2),
		{ _field_tag_reference, "effect", &effect_group_reference },
		{ _field_real, "size scale" },
		FIELD_CUSTOM("frame", _field_id_cinematic_frame_index),
		{ _field_long_integer, "frame", _field_id_cinematic_frame_index },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_long_block_index, "marker parent", &cinematicscenedataobjectblock_block },
		{ _field_string_id, "function a" },
		{ _field_string_id, "function b" },
		{ _field_long_integer, "node id" },
		{ _field_long_integer, "sequence id" },
		{ _field_terminator }
	};

	STRINGS(cinematic_shot_effect_flags)
	{
		"use maya value!",
		"looping"
	};
	STRING_LIST(cinematic_shot_effect_flags, cinematic_shot_effect_flags_strings, _countof(cinematic_shot_effect_flags_strings));

	STRINGS(sceneshoteffectstate)
	{
		"start",
		"stop",
		"kill"
	};
	STRING_LIST(sceneshoteffectstate, sceneshoteffectstate_strings, _countof(sceneshoteffectstate_strings));

	#define CINEMATIC_SHOT_EXTRA_CAMERA_BLOCK_ID { 0x1451DA10, 0xDBD64C68, 0xAAABB84D, 0xD39799B3 }
	TAG_STRUCT(
		cinematic_shot_extra_camera_block,
		"cinematic_shot_extra_camera_block",
		"cinematic_shot_extra_camera_block",
		"s_cinematic_shot_extra_camera_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_EXTRA_CAMERA_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "type" },
		{ _field_block, "shots", &cinematic_extra_camera_shot_block_block },
		{ _field_terminator }
	};

	#define CINEMATIC_SHOT_FRAME_BLOCK_ID { 0xBD4D0364, 0x996745B6, 0x859A07A4, 0x186868E9 }
	TAG_STRUCT(
		cinematic_shot_frame_block,
		"cinematic_shot_frame_block",
		"cinematic_shot_frame_block",
		"s_cinematic_shot_frame_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_FRAME_BLOCK_ID)
	{
		{ _field_struct, "camera frame", &camera_frame_struct },
		{ _field_terminator }
	};

	#define CINEMATIC_SHOT_FRAME_CONSTANT_BLOCK_ID { 0xEC8CBCAC, 0x6D6B4ADA, 0x9476E1A8, 0x1F85D6B3 }
	TAG_STRUCT(
		cinematic_shot_frame_constant_block,
		"cinematic_shot_frame_constant_block",
		"cinematic_shot_frame_constant_block",
		"s_cinematic_shot_frame_constant_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_FRAME_CONSTANT_BLOCK_ID)
	{
		{ _field_long_integer, "frame index" },
		{ _field_struct, "constant camera frame", &camera_frame_constant_struct },
		{ _field_terminator }
	};

	#define CINEMATIC_SHOT_FRAME_DYNAMIC_BLOCK_ID { 0x718252B2, 0x205E431F, 0xB6296B5A, 0xFE8EB20E }
	TAG_STRUCT(
		cinematic_shot_frame_dynamic_block,
		"cinematic_shot_frame_dynamic_block",
		"cinematic_shot_frame_dynamic_block",
		"s_cinematic_shot_frame_dynamic_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_FRAME_DYNAMIC_BLOCK_ID)
	{
		{ _field_struct, "dynamic camera frame", &camera_frame_dynamic_struct },
		{ _field_terminator }
	};

	#define CINEMATIC_SHOT_LIGHTING_BLOCK_ID { 0x6F86178C, 0xF5E04C8F, 0xA14C3003, 0xEAADCE78 }
	TAG_STRUCT(
		cinematic_shot_lighting_block,
		"cinematic_shot_lighting_block",
		"cinematic_shot_lighting_block",
		"s_cinematic_shot_lighting_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_LIGHTING_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &cinematic_shot_lighting_flags_definition },
		{ _field_tag_reference, "lighting", &new_cinematic_lighting_group_reference },
		{ _field_long_block_index, "subject", &cinematic_scene_object_block_block },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker" },
		{ _field_terminator }
	};

	STRINGS(cinematic_shot_lighting_flags_definition)
	{
		"persists across shots"
	};
	STRING_LIST(cinematic_shot_lighting_flags_definition, cinematic_shot_lighting_flags_definition_strings, _countof(cinematic_shot_lighting_flags_definition_strings));

	TAG_REFERENCE(new_cinematic_lighting_group_reference, NEW_CINEMATIC_LIGHTING_TAG);

	#define CINEMATIC_SHOT_MUSIC_BLOCK_ID { 0xC8BD6E28, 0x7DEA45AA, 0x9861384B, 0xA392711F }
	TAG_STRUCT(
		cinematic_shot_music_block,
		"cinematic_shot_music_block",
		"cinematic_shot_music_block",
		"s_cinematic_shot_music_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_MUSIC_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &music_flags_enum },
		{ _field_tag_reference, "music/foley", &sound_combiner_group_sound_old_group_sound_looping_group_sound_group_reference },
		FIELD_CUSTOM("frame", _field_id_cinematic_frame_index),
		{ _field_long_integer, "frame", _field_id_cinematic_frame_index },
		{ _field_terminator }
	};

	STRINGS(music_flags_enum)
	{
		"Stop Music At Frame (rather than starting it)"
	};
	STRING_LIST(music_flags_enum, music_flags_enum_strings, _countof(music_flags_enum_strings));

	TAG_REFERENCE_GROUP(sound_combiner_group_sound_old_group_sound_looping_group_sound_group_reference, TAG_REFERENCE_FLAG_RESOLVED_BY_GAME)
	{
		SOUND_COMBINER_TAG,
		SOUND_OLD_TAG,
		SOUND_LOOPING_TAG,
		SOUND_TAG,
		INVALID_TAG
	};

	#define CINEMATIC_SHOT_OBJECT_FUNCTION_BLOCK_ID { 0x5AA608DA, 0xB9F145EE, 0xAF52C72D, 0x315EC520 }
	TAG_STRUCT(
		cinematic_shot_object_function_block,
		"cinematic_shot_object_function_block",
		"cinematic_shot_object_function_block",
		"s_cinematic_shot_object_function_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_OBJECT_FUNCTION_BLOCK_ID)
	{
		{ _field_long_block_index, "object", &cinematic_scene_object_block_block },
		{ _field_string_id, "function name" },
		{ _field_block, "keyframes", &cinematic_shot_object_function_keyframe_block_block },
		{ _field_terminator }
	};

	#define CINEMATIC_SHOT_OBJECT_FUNCTION_KEYFRAME_BLOCK_ID { 0x272DF6C5, 0xFB2B42CF, 0x8D0089D4, 0x982001C8 }
	TAG_STRUCT(
		cinematic_shot_object_function_keyframe_block,
		"cinematic_shot_object_function_keyframe_block",
		"cinematic_shot_object_function_keyframe_block",
		"s_cinematic_shot_object_function_keyframe_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_OBJECT_FUNCTION_KEYFRAME_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &cinematic_shot_object_function_flags },
		FIELD_CUSTOM("frame", _field_id_cinematic_frame_index),
		{ _field_long_integer, "frame", _field_id_cinematic_frame_index },
		{ _field_real, "value" },
		{ _field_real, "interpolation time", nullptr, "ticks" },
		{ _field_terminator }
	};

	STRINGS(cinematic_shot_object_function_flags)
	{
		"clear function (Value and Interpolation time are unused)"
	};
	STRING_LIST(cinematic_shot_object_function_flags, cinematic_shot_object_function_flags_strings, _countof(cinematic_shot_object_function_flags_strings));

	#define CINEMATIC_SHOT_PLAYBACK_DATA_BLOCK_ID { 0xBCE7A6B4, 0xE12744C9, 0xBEAEBC13, 0xD21CF591 }
	TAG_STRUCT(
		cinematic_shot_playback_data_block,
		"cinematic_shot_playback_data_block",
		"cinematic_shot_playback_data_block",
		"s_cinematic_shot_playback_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_PLAYBACK_DATA_BLOCK_ID)
	{
		{ _field_array, "shot flags", &g_cinematicshotflagarray$2 },
		{ _field_terminator }
	};

	#define CINEMATIC_SHOT_SCREEN_EFFECT_BLOCK_ID { 0xCBE8C0A5, 0xAC9D47F8, 0x8713016E, 0x344C3792 }
	TAG_STRUCT(
		cinematic_shot_screen_effect_block,
		"cinematic_shot_screen_effect_block",
		"cinematic_shot_screen_effect_block",
		"s_cinematic_shot_screen_effect_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_SCREEN_EFFECT_BLOCK_ID)
	{
		{ _field_tag_reference, "screen effect", &area_screen_effect_group_reference },
		FIELD_CUSTOM("frame", _field_id_cinematic_frame_index),
		{ _field_long_integer, "frame", _field_id_cinematic_frame_index },
		FIELD_CUSTOM("stop frame", _field_id_cinematic_frame_index),
		{ _field_long_integer, "stop frame", _field_id_cinematic_frame_index },
		{ _field_byte_flags, "flags", &cinematicshotscreeneffectflags },
		FIELD_PAD("BLAHWWW", 3),
		{ _field_terminator }
	};

	TAG_REFERENCE(area_screen_effect_group_reference, AREA_SCREEN_EFFECT_TAG);

	STRINGS(cinematicshotscreeneffectflags)
	{
		"Persist Entire Shot"
	};
	STRING_LIST(cinematicshotscreeneffectflags, cinematicshotscreeneffectflags_strings, _countof(cinematicshotscreeneffectflags_strings));

	#define CINEMATIC_SHOT_USER_INPUT_CONSTRAINTS_BLOCK_ID { 0xF997FF41, 0xDFBF4267, 0x9DE524D7, 0x2624CB23 }
	TAG_STRUCT(
		cinematic_shot_user_input_constraints_block,
		"cinematic_shot_user_input_constraints_block",
		"cinematic_shot_user_input_constraints_block",
		"s_cinematic_shot_user_input_constraints_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_SHOT_USER_INPUT_CONSTRAINTS_BLOCK_ID)
	{
		FIELD_CUSTOM("frame", _field_id_cinematic_frame_index),
		{ _field_long_integer, "frame", _field_id_cinematic_frame_index },
		{ _field_long_integer, "ticks" },
		{ _field_rectangle_2d, "maximum look angles" },
		{ _field_real, "frictional force" },
		{ _field_terminator }
	};

	#define CINEMATIC_TRANSITION_BLOCK_STRUCT_ID { 0xB7AC8CFA, 0x1E964BA2, 0x84A035B9, 0xA068B73 }
	TAG_STRUCT(
		cinematic_transition_block_struct,
		"cinematic_transition_block_struct",
		"cinematic_transition_block_struct",
		"s_cinematic_transition_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_TRANSITION_BLOCK_STRUCT_ID)
	{
		FIELD_GROUP_BEGIN("fade out from game"),
		{ _field_struct, "fade out from game struct", &cinematic_transition_element_block },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("fade in to cinematic"),
		{ _field_struct, "fade in to cinematic struct", &cinematic_transition_element_block },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("fade out from cinematic"),
		{ _field_struct, "fade out from cinematic struct", &cinematic_transition_element_block },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("fade post core load"),
		{ _field_struct, "fade post core load struct", &cinematic_transition_element_block },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("fade in to game"),
		{ _field_struct, "fade in to game struct", &cinematic_transition_element_block },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define CINEMATIC_TRANSITION_ELEMENT_BLOCK_ID { 0xA7937387, 0x8CDD41A3, 0x9C4CEBD7, 0xBA5E17E9 }
	TAG_STRUCT(
		cinematic_transition_element_block,
		"cinematic_transition_element_block",
		"cinematic_transition_element_block",
		"s_cinematic_transition_element_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_TRANSITION_ELEMENT_BLOCK_ID)
	{
		{ _field_struct, "global fade", &cinematic_transition_global_fade_block },
		{ _field_block, "sound global gain", &cinematic_transition_global_gain_block_block },
		{ _field_block, "sound class gains", &cinematic_transition_sound_class_gain_block_block },
		{ _field_block, "stop sounds", &cinematic_transition_sound_reference_block_block },
		{ _field_block, "start sounds", &cinematic_transition_sound_reference_block_block },
		{ _field_block, "resume looping sounds", &cinematic_transition_looping_sound_reference_block_block },
		{ _field_block, "looping sound states", &cinematic_transition_looping_sound_state_block_block },
		{ _field_long_integer, "sleep time", nullptr, "hs_ticks" },
		{ _field_terminator }
	};

	#define CINEMATIC_TRANSITION_GLOBAL_FADE_BLOCK_ID { 0xA7E518D2, 0xE67D4F58, 0x9709C7D0, 0xAC2B8E6F }
	TAG_STRUCT(
		cinematic_transition_global_fade_block,
		"cinematic_transition_global_fade_block",
		"cinematic_transition_global_fade_block",
		"s_cinematic_transition_global_fade_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_TRANSITION_GLOBAL_FADE_BLOCK_ID)
	{
		{ _field_real_rgb_color, "fade_color" },
		{ _field_long_integer, "fade time", nullptr, "hs_ticks" },
		{ _field_terminator }
	};

	#define CINEMATIC_TRANSITION_GLOBAL_GAIN_BLOCK_STRUCT_ID { 0x8ACEB60C, 0xE6E34BD7, 0xB3B66F6C, 0xB34F073C }
	TAG_STRUCT(
		cinematic_transition_global_gain_block_struct,
		"cinematic_transition_global_gain_block_struct",
		"cinematic_transition_global_gain_block_struct",
		"s_cinematic_transition_global_gain_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_TRANSITION_GLOBAL_GAIN_BLOCK_STRUCT_ID)
	{
		{ _field_real, "gain", nullptr, "dB", FIELD_FLAG_INDEX },
		{ _field_long_integer, "time", nullptr, "hs_ticks" },
		{ _field_terminator }
	};

	#define CINEMATIC_TRANSITION_LOOPING_SOUND_REFERENCE_BLOCK_STRUCT_ID { 0xBAFE65BC, 0x9F534CB0, 0x84B2ED70, 0xA68F0ECF }
	TAG_STRUCT(
		cinematic_transition_looping_sound_reference_block_struct,
		"cinematic_transition_looping_sound_reference_block_struct",
		"cinematic_transition_looping_sound_reference_block_struct",
		"s_cinematic_transition_looping_sound_reference_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_TRANSITION_LOOPING_SOUND_REFERENCE_BLOCK_STRUCT_ID)
	{
		{ _field_tag_reference, "looping sound", &sound_looping_group_reference$2 },
		{ _field_terminator }
	};

	#define CINEMATIC_TRANSITION_LOOPING_SOUND_STATE_BLOCK_STRUCT_ID { 0x827B3E86, 0x2BAC4782, 0xAF5E4C04, 0x3F3B687E }
	TAG_STRUCT(
		cinematic_transition_looping_sound_state_block_struct,
		"cinematic_transition_looping_sound_state_block_struct",
		"cinematic_transition_looping_sound_state_block_struct",
		"s_cinematic_transition_looping_sound_state_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_TRANSITION_LOOPING_SOUND_STATE_BLOCK_STRUCT_ID)
	{
		{ _field_tag_reference, "looping sound", &sound_looping_group_reference$2 },
		{ _field_real, "scale" },
		{ _field_word_flags, "alternate", &cinematic_transition_looping_sound_alternate_flags },
		{ _field_word_flags, "layers", &cinematic_transition_looping_sound_layer_flags },
		{ _field_terminator }
	};

	STRINGS(cinematic_transition_looping_sound_alternate_flags)
	{
		"alternate"
	};
	STRING_LIST(cinematic_transition_looping_sound_alternate_flags, cinematic_transition_looping_sound_alternate_flags_strings, _countof(cinematic_transition_looping_sound_alternate_flags_strings));

	STRINGS(cinematic_transition_looping_sound_layer_flags)
	{
		"none!",
		"layer 1",
		"layer 2",
		"layer 3",
		"layer 4"
	};
	STRING_LIST(cinematic_transition_looping_sound_layer_flags, cinematic_transition_looping_sound_layer_flags_strings, _countof(cinematic_transition_looping_sound_layer_flags_strings));

	#define CINEMATIC_TRANSITION_SOUND_CLASS_GAIN_BLOCK_STRUCT_ID { 0x96B5CEC2, 0xE82478A, 0xBCBF8B27, 0xABF26BCF }
	TAG_STRUCT(
		cinematic_transition_sound_class_gain_block_struct,
		"cinematic_transition_sound_class_gain_block_struct",
		"cinematic_transition_sound_class_gain_block_struct",
		"s_cinematic_transition_sound_class_gain_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_TRANSITION_SOUND_CLASS_GAIN_BLOCK_STRUCT_ID)
	{
		{ _field_char_enum, "class", &sound_class_enum },
		FIELD_PAD("pad", 3),
		{ _field_real, "gain", nullptr, "dB" },
		{ _field_long_integer, "time", nullptr, "hs_ticks" },
		{ _field_terminator }
	};

	#define CINEMATIC_TRANSITION_SOUND_REFERENCE_BLOCK_STRUCT_ID { 0x13D7CCC9, 0x85304398, 0x85357F68, 0x2D49AD3A }
	TAG_STRUCT(
		cinematic_transition_sound_reference_block_struct,
		"cinematic_transition_sound_reference_block_struct",
		"cinematic_transition_sound_reference_block_struct",
		"s_cinematic_transition_sound_reference_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATIC_TRANSITION_SOUND_REFERENCE_BLOCK_STRUCT_ID)
	{
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_looping_group_sound_group_reference },
		{ _field_terminator }
	};

	#define CINEMATICS_GLOBALS_BLOCK_ID { 0x3B2F2A5B, 0x52DF4FB0, 0xA68FFF8B, 0x30D069D7 }
	TAG_STRUCT(
		cinematics_globals_block,
		"cinematics_globals_block",
		"cinematics_globals_block",
		"s_cinematics_globals_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CINEMATICS_GLOBALS_BLOCK_ID)
	{
		{ _field_tag_reference, "cinematic anchor reference", &scenery_group_reference },
		{ _field_real, "cinematic film aperture" },
		{ _field_real, "cinematic skip ui up time" },
		{ _field_real_fraction_bounds, "subtitle rect width", "percentage towards the center - 0=default, 0.5=center of the screen" },
		{ _field_real_fraction_bounds, "subtitle rect height", "0=default, 0.5=center of the screen" },
		{ _field_real_rgb_color, "default subtitle color" },
		{ _field_real_rgb_color, "default subtitle shadow color" },
		{ _field_block, "cinematic characters", &cinematic_characters_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(scenery_group_reference, SCENERY_TAG);

	#define CLOTH_INDICES_BLOCK_ID { 0x37D025EE, 0xD2D24235, 0xA99B29D1, 0xBEACCDC }
	TAG_STRUCT(
		cloth_indices_block,
		"cloth_indices_block",
		"cloth_indices_block",
		"s_cloth_indices_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CLOTH_INDICES_BLOCK_ID)
	{
		{ _field_short_integer, "index" },
		{ _field_terminator }
	};

	#define CLOTH_LINKS_BLOCK_ID { 0x2A08CAD4, 0x1EE64F76, 0x85A6FF91, 0x40E35AAF }
	TAG_STRUCT(
		cloth_links_block,
		"cloth_links_block",
		"cloth_links_block",
		"s_cloth_links_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CLOTH_LINKS_BLOCK_ID)
	{
		{ _field_real, "default_distance" },
		{ _field_long_integer, "index1" },
		{ _field_long_integer, "index2" },
		FIELD_PAD("vmx_pad", 4),
		{ _field_terminator }
	};

	#define CLOTH_PROPERTIES_ID { 0x3654721A, 0x8FDB4A6D, 0x833E911B, 0x6E30928 }
	TAG_STRUCT(
		cloth_properties,
		"cloth_properties",
		"cloth_properties",
		"s_cloth_properties",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CLOTH_PROPERTIES_ID)
	{
		{ _field_short_enum, "Integration type", &cloth_integration_enum },
		{ _field_short_integer, "Number iterations", "[1-8] sug 1" },
		{ _field_real, "weight", "[-10.0 - 10.0] sug 1.0" },
		{ _field_real, "drag", "[0.0 - 0.5] sug 0.07" },
		{ _field_real, "wind_scale", "[0.0 - 3.0] sug 1.0" },
		{ _field_real, "wind_flappiness_scale", "[0.0 - 1.0] sug 0.75" },
		{ _field_real, "longest_rod", "[1.0 - 10.0] sug 3.5" },
		FIELD_PAD("WXLH", 24),
		{ _field_terminator }
	};

	STRINGS(cloth_integration_enum)
	{
		"verlet"
	};
	STRING_LIST(cloth_integration_enum, cloth_integration_enum_strings, _countof(cloth_integration_enum_strings));

	#define CLOTH_STRUCT_DEFINITION_ID { 0x6007B323, 0x1677454C, 0x86B19DA1, 0xCAEC6D8B }
	TAG_STRUCT(
		cloth_struct_definition,
		"cloth_struct_definition",
		"cloth_struct_definition",
		"s_cloth_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CLOTH_STRUCT_DEFINITION_ID)
	{
		{ _field_long_flags, "flags", &cloth_flags },
		{ _field_string_id, "marker attachment name" },
		{ _field_string_id, "secondary axis attachment name" },
		{ _field_tag_reference, "Shader", &material_group_reference },
		FIELD_EXPLANATION("Default cloth vertices", "if not importing from a render model, type a grid size"),
		{ _field_short_integer, "grid x dimension" },
		{ _field_short_integer, "grid y dimension" },
		{ _field_real, "grid spacing x" },
		{ _field_real, "grid spacing y" },
		{ _field_block, "collision spheres", &collision_sphere_block_block },
		FIELD_EXPLANATION("Cloth Properties", nullptr),
		{ _field_struct, "properties", &cloth_properties },
		FIELD_EXPLANATION("Import or grid data", nullptr),
		{ _field_block, "vertices", &cloth_vertices_block_block },
		{ _field_block, "indices", &cloth_indices_block_block },
		{ _field_block, "strip indices", &cloth_indices_block_block },
		{ _field_block, "links", &cloth_links_block_block },
		{ _field_terminator }
	};

	STRINGS(cloth_flags)
	{
		"Doesn\'t use wind",
		"Uses grid attach top"
	};
	STRING_LIST(cloth_flags, cloth_flags_strings, _countof(cloth_flags_strings));

	TAG_REFERENCE(material_group_reference, MATERIAL_TAG);

	#define CLOTH_VERTICES_BLOCK_ID { 0x9CBFA025, 0xB3394521, 0xBC81E2FD, 0xF791ED55 }
	TAG_STRUCT(
		cloth_vertices_block,
		"cloth_vertices_block",
		"cloth_vertices_block",
		"s_cloth_vertices_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CLOTH_VERTICES_BLOCK_ID)
	{
		{ _field_real_point_3d, "initial position" },
		{ _field_real_vector_2d, "uv" },
		{ _field_terminator }
	};

	#define CLUSTER_TABLE_BLOCK_ID { 0x1CABDABC, 0x1A23C449, 0xAEABD083, 0x19A70D8A }
	TAG_STRUCT(
		cluster_table_block,
		"cluster_table_block",
		"cluster_table_block",
		"s_cluster_table_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CLUSTER_TABLE_BLOCK_ID)
	{
		{ _field_block, "super node mappings", &super_node_mappings_block_block$2 },
		{ _field_terminator }
	};

	#define CLUSTER_WETNESS_OFFSET_BLOCK_ID { 0x34C4130F, 0x9F824EFA, 0xA1ED71C7, 0x2FFB56DE }
	TAG_STRUCT(
		cluster_wetness_offset_block,
		"cluster_wetness_offset_block",
		"cluster_wetness_offset_block",
		"s_cluster_wetness_offset_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CLUSTER_WETNESS_OFFSET_BLOCK_ID)
	{
		{ _field_long_integer, "cluster offset" },
		{ _field_terminator }
	};

	#define COLLISION_BSP_PHYSICS_BLOCK_ID { 0x5B8E7B3A, 0xC8394498, 0xB6AE249F, 0x4C00F83F }
	TAG_STRUCT(
		collision_bsp_physics_block,
		"collision_bsp_physics_block",
		"collision_bsp_physics_block",
		"s_collision_bsp_physics_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_BSP_PHYSICS_BLOCK_ID,
		4)
	{
		{ _field_struct, "collision bsp shape", &collision_geometry_shape_struct },
		{ _field_struct, "mopp bv tree shap", &mopp_bv_tree_shape_struct },
		{ _field_terminator }
	};

	#define COLLISION_DAMAGE_FUNCTION_ID { 0x1DE4BAA4, 0xFBC74C13, 0x9576F17A, 0x8F464147 }
	TAG_STRUCT(
		collision_damage_function,
		"collision_damage_function",
		"collision_damage_function",
		"s_collision_damage_function",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_DAMAGE_FUNCTION_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define COLLISION_DAMAGE_STRUCT_DEFINITION_ID { 0x50FEF768, 0x5E0F4D35, 0x8B165F16, 0xBEAAF2E6 }
	TAG_STRUCT(
		collision_damage_struct_definition,
		"collision_damage_struct_definition",
		"collision_damage_struct_definition",
		"s_collision_damage_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_DAMAGE_STRUCT_DEFINITION_ID)
	{
		{ _field_long_flags, "Flags", &collisiondamageflags },
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		{ _field_real, "Friendly apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage, yet go soft on their friends" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "minimum velocity for game damage", "if you are going below this velocity we stop all game damage" },
		{ _field_struct, "game collision damage", &collision_damage_function },
		{ _field_real_bounds, "game acceleration", "0-Infinity" },
		FIELD_EXPLANATION("Applying absolute collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply absolute collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		{ _field_real, "Friendly apply absolute collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage, yet go soft on their friends" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "minimum velocity for absolute damage", "if you are going below this velocity we stop all absolute damage" },
		{ _field_struct, "absolute collision damage", &collision_damage_function },
		{ _field_real_bounds, "absolute acceleration", "0-Infinity" },
		FIELD_EXPLANATION("Alternative damage effect", "Overrides the damage effect from globals.globals"),
		{ _field_tag_reference, "alternative damage effect", &damage_effect_group_reference$2 },
		{ _field_terminator }
	};

	STRINGS(collisiondamageflags)
	{
		"Don\'t scale damage#typically, we scale the damage to make only \"lethal\" collision damage kill people; this flag overrides that behavior",
		"Object may choose not to deal damage#in some cases (notably, the thruster pack) we should ask an object if it wants to opt out of dealing damage for one reason or another"
	};
	STRING_LIST(collisiondamageflags, collisiondamageflags_strings, _countof(collisiondamageflags_strings));

	TAG_REFERENCE(damage_effect_group_reference$2, DAMAGE_EFFECT_TAG);

	#define COLLISION_GEOMETRY_SHAPE_STRUCT_ID { 0x97B622E0, 0xF8AF48BA, 0x85446709, 0x386FA88 }
	TAG_STRUCT(
		collision_geometry_shape_struct,
		"collision_geometry_shape_struct",
		"collision_geometry_shape_struct",
		"s_collision_geometry_shape_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_GEOMETRY_SHAPE_STRUCT_ID,
		4)
	{
		{ _field_struct, "base", &havok_shape_collection_struct_2010_2 },
		FIELD_PAD("foobar666", 8),
		{ _field_real_vector_3d, "center" },
		{ _field_real, "havok w center" },
		{ _field_real_vector_3d, "half extent" },
		{ _field_real, "havok w half extent" },
		{ _field_long_integer, "runtime model definition tag index" },
		{ _field_long_integer, "collision bsp reference pointer0", _field_id_zero_data },
		{ _field_long_integer, "collision bsp reference pointer1", _field_id_zero_data },
		{ _field_char_integer, "structure_bsp_index" },
		{ _field_char_integer, "collision geometry shape type" },
		{ _field_short_integer, "instance index" },
		{ _field_real, "scale" },
		FIELD_PAD("3 long pad", 12),
		{ _field_terminator }
	};

	#define COLLISION_KD_HIERARCHY_STATIC_HASH_TABLE_DATA_BLOCK_ID { 0x1C33AABC, 0x1A234449, 0x3EAB1083, 0xA9170D8A }
	TAG_STRUCT(
		collision_kd_hierarchy_static_hash_table_data_block,
		"collision_kd_hierarchy_static_hash_table_data_block",
		"collision_kd_hierarchy_static_hash_table_data_block",
		"s_collision_kd_hierarchy_static_hash_table_data_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_KD_HIERARCHY_STATIC_HASH_TABLE_DATA_BLOCK_ID)
	{
		{ _field_long_integer, "node index" },
		{ _field_long_integer, "key a" },
		{ _field_long_integer, "key b" },
		{ _field_long_integer, "key c" },
		{ _field_terminator }
	};

	#define COLLISION_KD_HIERARCHY_STATIC_HASH_TABLE_HEADERS_BLOCK_ID { 0x1C33AABC, 0x7A234449, 0xEABD083, 0xD9173D8A }
	TAG_STRUCT(
		collision_kd_hierarchy_static_hash_table_headers_block,
		"collision_kd_hierarchy_static_hash_table_headers_block",
		"collision_kd_hierarchy_static_hash_table_headers_block",
		"s_collision_kd_hierarchy_static_hash_table_headers_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_KD_HIERARCHY_STATIC_HASH_TABLE_HEADERS_BLOCK_ID)
	{
		{ _field_word_flags, "cull flags", &collision_kd_hierarchy_static_hash_table_cull_flags },
		{ _field_short_integer, "instance index" },
		{ _field_long_integer, "instance index dword mask" },
		{ _field_short_integer, "bsp index" },
		FIELD_PAD("bsp-index-pad", 2),
		{ _field_long_integer, "bsp mask" },
		{ _field_terminator }
	};

	STRINGS(collision_kd_hierarchy_static_hash_table_cull_flags)
	{
		"render only",
		"does not block aoe",
		"non pathfindable"
	};
	STRING_LIST(collision_kd_hierarchy_static_hash_table_cull_flags, collision_kd_hierarchy_static_hash_table_cull_flags_strings, _countof(collision_kd_hierarchy_static_hash_table_cull_flags_strings));

	#define COLLISION_KD_HIERARCHY_STATIC_HASH_TABLE_SHORT_BLOCK_ID { 0x1C33AABC, 0xCA234449, 0x3EAB10C3, 0xA917098A }
	TAG_STRUCT(
		collision_kd_hierarchy_static_hash_table_short_block,
		"collision_kd_hierarchy_static_hash_table_short_block",
		"collision_kd_hierarchy_static_hash_table_short_block",
		"s_collision_kd_hierarchy_static_hash_table_short_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_KD_HIERARCHY_STATIC_HASH_TABLE_SHORT_BLOCK_ID)
	{
		{ _field_short_integer, "index" },
		{ _field_terminator }
	};

	#define COLLISION_KD_HIERARCHY_STATIC_IN_USE_MASKS_BLOCK_ID { 0xC33AABC, 0x3A234449, 0x1EAB1083, 0xA9870D8A }
	TAG_STRUCT(
		collision_kd_hierarchy_static_in_use_masks_block,
		"collision_kd_hierarchy_static_in_use_masks_block",
		"collision_kd_hierarchy_static_in_use_masks_block",
		"s_collision_kd_hierarchy_static_in_use_masks_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_KD_HIERARCHY_STATIC_IN_USE_MASKS_BLOCK_ID)
	{
		{ _field_long_integer, "mask" },
		{ _field_terminator }
	};

	#define COLLISION_KD_HIERARCHY_STATIC_NODES_BLOCK_ID { 0x1C33AABC, 0x9A234449, 0xEAB1083, 0xA9173D8A }
	TAG_STRUCT(
		collision_kd_hierarchy_static_nodes_block,
		"collision_kd_hierarchy_static_nodes_block",
		"collision_kd_hierarchy_static_nodes_block",
		"s_collision_kd_hierarchy_static_nodes_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_KD_HIERARCHY_STATIC_NODES_BLOCK_ID)
	{
		{ _field_block, "render only headers", &collision_kd_hierarchy_static_hash_table_headers_block_block },
		{ _field_block, "collidable headers", &collision_kd_hierarchy_static_hash_table_headers_block_block },
		{ _field_short_block_index, "child below", &collision_kd_hierarchy_static_nodes_block_block },
		{ _field_short_block_index, "child above", &collision_kd_hierarchy_static_nodes_block_block },
		{ _field_short_block_index, "parent", &collision_kd_hierarchy_static_nodes_block_block },
		{ _field_short_integer, "cluster index" },
		{ _field_terminator }
	};

	#define COLLISION_KD_HIERARCHY_STATIC_STRUCT_ID { 0x9AC5DB45, 0x1F934BF3, 0x902C2890, 0x4C76F360 }
	TAG_STRUCT(
		collision_kd_hierarchy_static_struct,
		"collision_kd_hierarchy_static_struct",
		"collision_kd_hierarchy_static_struct",
		"s_collision_kd_hierarchy_static_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_KD_HIERARCHY_STATIC_STRUCT_ID)
	{
		{ _field_long_integer, "hash total_count" },
		{ _field_block, "hash data", &collision_kd_hierarchy_static_hash_table_data_block_block },
		{ _field_block, "hash entry count", &collision_kd_hierarchy_static_hash_table_short_block_block },
		{ _field_block, "original hash entry count", &collision_kd_hierarchy_static_hash_table_short_block_block },
		{ _field_block, "nodes", &collision_kd_hierarchy_static_nodes_block_block },
		{ _field_block, "in use masks", &collision_kd_hierarchy_static_in_use_masks_block_block },
		{ _field_block, "cluster table", &cluster_table_block_block },
		{ _field_terminator }
	};

	#define COLLISION_LEAF_STRUCT_ID { 0xA5FD8EE3, 0x9A644ECC, 0x9CEBF2FB, 0x45030CA1 }
	TAG_STRUCT(
		collision_leaf_struct,
		"collision_leaf_struct",
		"collision_leaf_struct",
		"s_collision_leaf_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_LEAF_STRUCT_ID,
		2)
	{
		{ _field_byte_flags, "flags", &leaf_flags },
		FIELD_PAD("pad", 1),
		{ _field_word_integer, "bsp2d reference count" },
		{ _field_dword_integer, "first bsp2d reference" },
		{ _field_terminator }
	};

	STRINGS(leaf_flags)
	{
		"contains double-sided surfaces"
	};
	STRING_LIST(leaf_flags, leaf_flags_strings, _countof(leaf_flags_strings));

	#define COLLISION_MODEL_BLOCK_STRUCT_ID { 0x82629323, 0x5D1942A5, 0x94270FB1, 0x49FBDD92 }
	TAG_STRUCT(
		collision_model_block_struct,
		"collision_model_block_struct",
		"collision_model_block_struct",
		"s_collision_model_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_MODEL_BLOCK_STRUCT_ID)
	{
		{ _field_long_integer, "import_info_checksum" },
		{ _field_block, "errors", &global_error_report_categories_block_block },
		{ _field_long_flags, "flags", &collision_model_flags },
		{ _field_block, "materials", &collision_model_material_block_block },
		{ _field_block, "regions", &collision_model_region_block_block },
		{ _field_block, "cookie cutters", &collision_model_region_block_block },
		{ _field_block, "pathfinding spheres", &collision_model_pathfinding_sphere_block_block },
		{ _field_block, "nodes", &collision_model_node_block_block },
		{ _field_pageable_resource, "regions resource", &collision_model_resource },
		{ _field_terminator }
	};

	STRINGS(collision_model_flags)
	{
		"contains open edges",
		"physics built*!",
		"physics in use*!",
		"processed*!",
		"has two sided surfaces"
	};
	STRING_LIST(collision_model_flags, collision_model_flags_strings, _countof(collision_model_flags_strings));

	#define COLLISION_MODEL_BSP_STRUCT_ID { 0x36840D2, 0x531648C1, 0x887F7243, 0xB140B84F }
	TAG_STRUCT(
		collision_model_bsp_struct,
		"collision_model_bsp_struct",
		"collision_model_bsp_struct",
		"s_collision_model_bsp_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_MODEL_BSP_STRUCT_ID)
	{
		{ _field_short_integer, "node index" },
		FIELD_PAD("KXGCEIEI", 2),
		FIELD_USELESS_PAD("value", 16),
		{ _field_struct, "bsp", &global_collision_bsp_struct },
		{ _field_terminator }
	};

	#define COLLISION_MODEL_MATERIAL_BLOCK_ID { 0x7B10BA44, 0xCCA147A9, 0xBA00D05C, 0x22B0B273 }
	TAG_STRUCT(
		collision_model_material_block,
		"material",
		"collision_model_material_block",
		"s_collision_model_material_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_MODEL_MATERIAL_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	#define COLLISION_MODEL_NODE_BLOCK_ID { 0x732343D3, 0x41E4597, 0x92128A86, 0x949F6A18 }
	VERSIONED_TAG_STRUCT(
		collision_model_node_block,
		"collision_model_node_block",
		"collision_model_node_block",
		"s_collision_model_node_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_MODEL_NODE_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 5 },
		{ _field_string_id, "name" },
		FIELD_PAD("PFPPD", 2),
		{ _field_short_block_index, "parent node", &collision_model_node_block_block },
		{ _field_short_block_index, "next sibling node", &collision_model_node_block_block },
		{ _field_short_block_index, "first child node", &collision_model_node_block_block },
		
		{ _struct_version_mode_equal, 0, 6 },
		{ _field_old_string_id, "name" },
		FIELD_PAD("CSFZTBOHD", 2),
		{ _field_short_block_index, "parent node", &collision_model_node_block_block },
		{ _field_short_block_index, "next sibling node", &collision_model_node_block_block },
		{ _field_short_block_index, "first child node", &collision_model_node_block_block },
		FIELD_PAD("OAI", 24),
		
		{ _field_terminator }
	};

	#define COLLISION_MODEL_PATHFINDING_SPHERE_BLOCK_ID { 0xEC25013C, 0xA1934E7A, 0xAD0346BB, 0x515C39B6 }
	TAG_STRUCT(
		collision_model_pathfinding_sphere_block,
		"sphere",
		"collision_model_pathfinding_sphere_block",
		"s_collision_model_pathfinding_sphere_block",
		SET_UNKNOWN4 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_MODEL_PATHFINDING_SPHERE_BLOCK_ID)
	{
		{ _field_short_block_index, "node", &collision_model_node_block_block },
		{ _field_word_flags, "flags", &pathfinding_sphere_flags },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real_point_3d, "center" },
		{ _field_real, "radius" },
		{ _field_terminator }
	};

	STRINGS(pathfinding_sphere_flags)
	{
		"remains when open",
		"vehicle only",
		"with sectors"
	};
	STRING_LIST(pathfinding_sphere_flags, pathfinding_sphere_flags_strings, _countof(pathfinding_sphere_flags_strings));

	#define COLLISION_MODEL_PERMUTATION_BLOCK_ID { 0xAB85D1D7, 0x6FED4CD0, 0x9D46D6F6, 0x52EE1C6D }
	VERSIONED_TAG_STRUCT(
		collision_model_permutation_block,
		"collision_model_permutation_block",
		"collision_model_permutation_block",
		"s_collision_model_permutation_block",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_MODEL_PERMUTATION_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 6 },
		{ _field_string_id, "name" },
		{ _field_short_integer, "resourceBspOffset" },
		{ _field_short_integer, "resourceBspCount" },
		{ _field_block, "bsps", &collision_model_bsp_block_block },
		{ _field_block, "bsp_physics", &collision_bsp_physics_block_block },
		{ _field_block, "mopp_codes", &mopp_code_definition_block_block },
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_string_id, "name" },
		FIELD_PAD("U", 24),
		{ _field_block, "bsps", &collision_model_bsp_block_block },
		{ _field_block, "bsp_physics", &collision_bsp_physics_block_block },
		FIELD_PAD("UA", 44),
		
		{ _field_terminator }
	};

	#define COLLISION_MODEL_REGION_BLOCK_ID { 0xA2B3D98B, 0x4F4246CE, 0xA22339FE, 0xC303404E }
	TAG_STRUCT(
		collision_model_region_block,
		"region",
		"collision_model_region_block",
		"s_collision_model_region_block",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_MODEL_REGION_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "permutations", &collision_model_permutation_block_block },
		{ _field_terminator }
	};

	#define COLLISION_MODEL_RESOURCE_STRUCT_ID { 0x402FD7CD, 0x2E624614, 0x91F8C28F, 0x48E37EB6 }
	TAG_STRUCT(
		collision_model_resource_struct,
		"collision_model_resource_struct",
		"collision_model_resource_struct",
		"s_collision_model_resource_struct",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_MODEL_RESOURCE_STRUCT_ID)
	{
		{ _field_block, "bsps", &collision_model_resource_bsp_block_block },
		{ _field_terminator }
	};

	#define COLLISION_SPHERE_BLOCK_ID { 0x1168CFD4, 0x1EEC4C7A, 0x85A5FF51, 0x40ABCDAF }
	TAG_STRUCT(
		collision_sphere_block,
		"collision_sphere_block",
		"collision_sphere_block",
		"s_collision_sphere_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLLISION_SPHERE_BLOCK_ID)
	{
		{ _field_string_id, "object marker name" },
		{ _field_real, "radius" },
		{ _field_terminator }
	};

	#define COLOR_BLOCK_ID { 0x68FBD3A8, 0x3C76413C, 0x8C564268, 0x66145DD1 }
	TAG_STRUCT(
		color_block,
		"color_block",
		"color_block",
		"s_color_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLOR_BLOCK_ID)
	{
		{ _field_string, "name" },
		{ _field_real_argb_color, "color" },
		{ _field_terminator }
	};

	#define COLOR_FUNCTION_NAMED_STRUCT_ID { 0xF9547F48, 0x47284440, 0xB0D43E8A, 0xBDD1F5FA }
	TAG_STRUCT(
		color_function_named_struct,
		"color_function_named_struct",
		"color_function_named_struct",
		"s_color_function_named_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLOR_FUNCTION_NAMED_STRUCT_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "function", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define COLOR_LIST_BLOCK_ID { 0xF5F62C7, 0xC6A24A78, 0xBCCFBB7A, 0xF47B91CD }
	TAG_STRUCT(
		color_list_block,
		"color_list_block",
		"color_list_block",
		"s_color_list_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLOR_LIST_BLOCK_ID)
	{
		{ _field_real_argb_color, "color" },
		{ _field_terminator }
	};

	#define COLOR_PRESETS_BLOCK_ID { 0x26B5A836, 0x2251412E, 0xA23E454A, 0x39DCDE }
	TAG_STRUCT(
		color_presets_block,
		"color_presets_block",
		"color_presets_block",
		"s_color_presets_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLOR_PRESETS_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_real_argb_color, "color" },
		{ _field_terminator }
	};

	#define COLOR_TABLE_STRUCT_DEFINITION_ID { 0xD54F00C7, 0x19F497D, 0xA02B0FD4, 0x27691AFA }
	TAG_STRUCT(
		color_table_struct_definition,
		"color_table_struct_definition",
		"color_table_struct_definition",
		"s_color_table_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COLOR_TABLE_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "colors", &color_block_block },
		{ _field_terminator }
	};

	#define COMBAT_CUE_PAYLOAD_BLOCK_STRUCT_ID { 0xC16D563E, 0x80BD4F5A, 0x9E28EAF6, 0x4F1F71C0 }
	TAG_STRUCT(
		combat_cue_payload_block_struct,
		"combat_cue_payload_block_struct",
		"combat_cue_payload_block_struct",
		"s_combat_cue_payload_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMBAT_CUE_PAYLOAD_BLOCK_STRUCT_ID)
	{
		{ _field_real_point_3d, "position" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_word_flags, "flags", &g_firing_position_flags },
		{ _field_word_flags, "posture flags", &g_firing_position_posture_flags },
		{ _field_short_block_index, "area", &areas_block_block },
		{ _field_short_integer, "cluster index" },
		{ _field_short_integer, "cluster bsp" },
		{ _field_char_integer, "bits and pad" },
		FIELD_PAD("PAD1", 1),
		{ _field_real_euler_angles_2d, "normal" },
		{ _field_angle, "facing" },
		{ _field_long_integer, "lastAbsoluteRejectionGameTime" },
		{ _field_short_enum, "preference", &combat_cue_preference_enum },
		FIELD_PAD("post-preference", 2),
		{ _field_terminator }
	};

	STRINGS(g_firing_position_flags)
	{
		"open",
		"partial",
		"closed",
		"mobile",
		"wall lean",
		"perch",
		"ground point",
		"dynamic cover point",
		"automatically generated!",
		"nav volume"
	};
	STRING_LIST(g_firing_position_flags, g_firing_position_flags_strings, _countof(g_firing_position_flags_strings));

	STRINGS(g_firing_position_posture_flags)
	{
		"corner_left",
		"corner_right",
		"bunker",
		"bunker high",
		"bunker low"
	};
	STRING_LIST(g_firing_position_posture_flags, g_firing_position_posture_flags_strings, _countof(g_firing_position_posture_flags_strings));

	STRINGS(combat_cue_preference_enum)
	{
		"low",
		"high",
		"total"
	};
	STRING_LIST(combat_cue_preference_enum, combat_cue_preference_enum_strings, _countof(combat_cue_preference_enum_strings));

	#define COMBAT_SYNC_ACTION_GROUP_PAYLOAD_BLOCK_STRUCT_ID { 0xD7C247C, 0xEBDF4F0E, 0x9E7C3D53, 0x4B5E9E51 }
	TAG_STRUCT(
		combat_sync_action_group_payload_block_struct,
		"combat_sync_action_group_payload_block_struct",
		"combat_sync_action_group_payload_block_struct",
		"s_combat_sync_action_group_payload_block_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMBAT_SYNC_ACTION_GROUP_PAYLOAD_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "sync action group name" },
		{ _field_real, "cooldown", "seconds" },
		{ _field_terminator }
	};

	#define COMMANDLINKBLOCK_ID { 0xB773C59A, 0x15D44F49, 0x939B6F21, 0x542ACFE9 }
	TAG_STRUCT(
		commandlinkblock,
		"commandLinkBlock",
		"commandLinkBlock",
		"s_commandlinkblock",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMMANDLINKBLOCK_ID)
	{
		{ _field_long_enum, "Trigger", &internal_event_enum_definition },
		{ _field_long_block_index, "Target", &scenario_object_names_block_block },
		{ _field_long_enum, "Command", &command_event_enum_definition },
		{ _field_real, "Delay (sec)" },
		{ _field_long_flags, "Flags", &commandlinkflags },
		{ _field_terminator }
	};

	STRINGS(internal_event_enum_definition)
	{
		"OnBirth",
		"OnDeath",
		"OnInteract",
		"OnInitSpawnerShard",
		"OnInitKnightTaint"
	};
	STRING_LIST(internal_event_enum_definition, internal_event_enum_definition_strings, _countof(internal_event_enum_definition_strings));

	STRINGS(command_event_enum_definition)
	{
		"Interact",
		"InitShardSpawn",
		"InitKnightTaint"
	};
	STRING_LIST(command_event_enum_definition, command_event_enum_definition_strings, _countof(command_event_enum_definition_strings));

	STRINGS(commandlinkflags)
	{
		"Fire Once"
	};
	STRING_LIST(commandlinkflags, commandlinkflags_strings, _countof(commandlinkflags_strings));

	#define COMMENDATIONAGGREGATOR_ID { 0xEE1F5591, 0x7C05414B, 0x97F89953, 0x90717D05 }
	TAG_STRUCT(
		commendationaggregator,
		"commendationAggregator",
		"commendationAggregator",
		"s_commendationaggregator",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMMENDATIONAGGREGATOR_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "description text" },
		{ _field_block, "rewards", &commendationrewardblock_block },
		{ _field_char_integer, "sequence index" },
		FIELD_PAD("CA_PAD1", 3),
		{ _field_short_integer, "medal sprite index" },
		{ _field_short_integer, "game type sprite index" },
		{ _field_block, "prerequisites", MAKE_ALT_NAMES("contributing commendations"), &commendationaggregatordependent_block },
		{ _field_terminator }
	};

	#define COMMENDATIONAGGREGATORDEPENDENT_STRUCT_ID { 0x75C2D96E, 0x84EA4CC2, 0xBF5E2775, 0xB36E1BD7 }
	TAG_STRUCT(
		commendationaggregatordependent_struct,
		"commendationAggregatorDependent_struct",
		"commendationAggregatorDependent_struct",
		"s_commendationaggregatordependent_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMMENDATIONAGGREGATORDEPENDENT_STRUCT_ID)
	{
		{ _field_char_enum, "type", &aggregatordependenttypeenumdefinition },
		FIELD_PAD("PAD1", 3),
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	STRINGS(aggregatordependenttypeenumdefinition)
	{
		"commendation",
		"aggregator"
	};
	STRING_LIST(aggregatordependenttypeenumdefinition, aggregatordependenttypeenumdefinition_strings, _countof(aggregatordependenttypeenumdefinition_strings));

	#define COMMENDATIONBLOCK_ID { 0x610838D, 0xCA384AEB, 0x9A5F622D, 0xF2945CBC }
	TAG_STRUCT(
		commendationblock,
		"commendationBlock",
		"commendationBlock",
		"s_commendationblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMMENDATIONBLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "description" },
		{ _field_byte_flags, "flags", &commendationflags },
		FIELD_PAD("CB_PAD0", 3),
		{ _field_char_enum, "category", &commendationcategoryenum },
		{ _field_char_enum, "subcategory", &commendationsubcategoryenum },
		{ _field_char_integer, "sequence index" },
		FIELD_PAD("CB_PAD1", 1),
		{ _field_short_integer, "medal sprite index" },
		{ _field_short_integer, "game type sprite index" },
		FIELD_GROUP_BEGIN("unlock prerequisites"),
		{ _field_struct, "prerequisites", &purchaseprerequisitesunifieddefinitionblock },
		FIELD_GROUP_END(),
		{ _field_block, "levels", &commendationlevelblock_block },
		{ _field_terminator }
	};

	STRINGS(commendationflags)
	{
		"hidden"
	};
	STRING_LIST(commendationflags, commendationflags_strings, _countof(commendationflags_strings));

	STRINGS(commendationcategoryenum)
	{
		"default",
		"weapons",
		"ordnance",
		"enemies",
		"vehicles",
		"player",
		"armor abilities",
		"objectives",
		"customs",
		"UGC"
	};
	STRING_LIST(commendationcategoryenum, commendationcategoryenum_strings, _countof(commendationcategoryenum_strings));

	STRINGS(commendationsubcategoryenum)
	{
		"default",
		"unsc",
		"covenant",
		"forerunner",
		"Covenant Enemy",
		"Forerunner Enemy",
		"Campaign",
		"War Games",
		"Slayer",
		"Regicide",
		"CTF",
		"Extraction",
		"Oddball",
		"King of the Hill",
		"Dominion",
		"Flood"
	};
	STRING_LIST(commendationsubcategoryenum, commendationsubcategoryenum_strings, _countof(commendationsubcategoryenum_strings));

	#define COMMENDATIONLEVELBLOCK_ID { 0xD0F61385, 0xF52B4A99, 0xB0178B54, 0x95CB7360 }
	TAG_STRUCT(
		commendationlevelblock,
		"commendationLevelBlock",
		"commendationLevelBlock",
		"s_commendationlevelblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMMENDATIONLEVELBLOCK_ID)
	{
		{ _field_string_id, "level name" },
		{ _field_short_integer, "progress ticks to level", "number of ticks to reach this level" },
		{ _field_short_integer, "progress display interval", "number of ticks between displaying progress toast; 0=never display progress, 1=display every tick, 2=every other, etc." },
		{ _field_string_id, "achievement" },
		{ _field_block, "level up rewards", "rewards given for reaching this level", &commendationrewardblock_block },
		{ _field_terminator }
	};

	#define COMMENDATIONREWARDBLOCK_ID { 0x37141A9A, 0x96D6477D, 0x9A77CFD4, 0xF2005522 }
	TAG_STRUCT(
		commendationrewardblock,
		"commendationRewardBlock",
		"commendationRewardBlock",
		"s_commendationrewardblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMMENDATIONREWARDBLOCK_ID)
	{
		{ _field_char_enum, "currency type", "Type of currency given by this reward.", &currencytypeenumdefinition },
		FIELD_PAD("CRB_PAD1", 1),
		{ _field_short_integer, "reward value" },
		{ _field_terminator }
	};

	STRINGS(currencytypeenumdefinition)
	{
		"cookies",
		"xp"
	};
	STRING_LIST(currencytypeenumdefinition, currencytypeenumdefinition_strings, _countof(currencytypeenumdefinition_strings));

	#define COMMENDATION_AGGREGATOR_LIST_STRUCT_DEFINITION_ID { 0x74E71545, 0x54456, 0xA4FC7176, 0x58FE61F2 }
	TAG_STRUCT(
		commendation_aggregator_list_struct_definition,
		"commendation_aggregator_list_struct_definition",
		"commendation_aggregator_list_struct_definition",
		"s_commendation_aggregator_list_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMMENDATION_AGGREGATOR_LIST_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "lists", &commendationaggregator_block },
		{ _field_terminator }
	};

	#define COMMENDATION_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID { 0xCB5F3608, 0xE8F44DE4, 0x8D3DAD05, 0x61C42080 }
	TAG_STRUCT(
		commendation_globals_definition_struct_definition,
		"commendation_globals_definition_struct_definition",
		"commendation_globals_definition_struct_definition",
		"s_commendation_globals_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMMENDATION_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_tag_reference, "commendation aggregators", &commendation_aggregator_list_group_reference },
		{ _field_tag_reference, "medal aggregators", &medal_commendation_aggregator_list_group_reference },
		{ _field_tag_reference, "commendation text", &multilingual_unicode_string_list_group_reference },
		{ _field_short_integer, "progress display time", nullptr, "seconds", MAKE_ALT_NAMES("progression display time") },
		{ _field_short_integer, "complete display time", nullptr, "seconds", MAKE_ALT_NAMES("callout display time") },
		{ _field_block, "commendations", &commendationblock_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(commendation_aggregator_list_group_reference, COMMENDATION_AGGREGATOR_LIST_TAG);

	TAG_REFERENCE(medal_commendation_aggregator_list_group_reference, MEDAL_COMMENDATION_AGGREGATOR_LIST_TAG);

	#define COMMUNICATION_SOUNDS_STRUCT_DEFINITION_ID { 0x9889948D, 0xAC0D4FD5, 0x8157FA51, 0xF5BC8577 }
	TAG_STRUCT(
		communication_sounds_struct_definition,
		"communication_sounds_struct_definition",
		"communication_sounds_struct_definition",
		"s_communication_sounds_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMMUNICATION_SOUNDS_STRUCT_DEFINITION_ID)
	{
		{ _field_tag_reference, "silence", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alert_holding", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "enemy_1_enemy", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "enemy_2_enemy", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "enemy_3_enemy", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "enemy_many_enemies", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "enemy_vehicle", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "enemy_many_vehicles", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "enemy_tank", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "enemy_many_tanks", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "enemy_banshee", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "enemy_falcon", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "enemy_ghost", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "enemy_wraith", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "enemy_scorpion", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "enemy_mongoose", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alert_backup", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_dummy", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_bfghill", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_bfgramp", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_bfgwater", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_cliffarch", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_covybridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_covycore", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_covytower", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_hillside", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_powerarch", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_powerhouse", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_powerinside", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_powerpipe", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_rock", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_spartanbarn", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_spartanbarnroof", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_spartancore", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_spartancoreroof", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_spartandam", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_spartanhigh", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_spartantower", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_stationbridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_upperdeck", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_waterbridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ph_waterside", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sl_beachside", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sl_bfg", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sl_cave", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sl_cliffside", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sl_covbase", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sl_covgen", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sl_covside", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sl_crack", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sl_middle", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sl_spartanbase", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sl_spartancore", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sl_spartangen", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sl_spartanside", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_aft_connector", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_aft_vault", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_central_catwalk", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_central_thing", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_coil_access", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_forward_catwalk", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_forward_compartment", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_in_space", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_ninja_rail", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_port_catwalk", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_port_floor", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_port_mancannon", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_port_observation", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_port_side", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_spine", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_starboard_catwalk", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_starboard_floor", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_starboard_mancannon", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_starboard_observation", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_af_starboard_side", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_atrium", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_atrium_floor", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_atrium_ramp", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_back_hallway", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_back_pocket", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_back_stairs", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_blue_lift", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_break_room", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_cic_entrance", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_cic_hall", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_cic_ramp", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_command_information_center", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_elbow", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_green_lift", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_green_lift_entrance", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_hangar", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_hangar_bridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_high_balcony", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_high_bridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_high_perch", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_high_stairs", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_locker_room", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_lounge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_lounge_balcony", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_lower_elevator_hall", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_low_bridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_midlevel", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_mid_bridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_mountainview_room", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_small_ramp", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_sword_room", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_upper_elevator_hall", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_waiting_room", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_air", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_back_door", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_back_path", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_below_deck", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_bighouse_high", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_bighouse_mid", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_bighouse_observation", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_blockhouse", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_blockhouse_bridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_blockhouse_roof", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_bridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_center", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_comms_roof", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_comms_shack", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_comms_stairs", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_deck", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_destroyed_house", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_east_cliff", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_high_bridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_locker_room", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_locker_stairs", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_main_ring", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_mud", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_off_the_edge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_patio", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_pipes_high", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_pipes_low", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_pipe_stairs", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_ridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_road", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_rock_garden", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_showers", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_spillway", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_spillway_arch", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_spillway_debris", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_staffroom", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_staffroom_roof", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_stone_arch", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_stone_bridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_storage", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_storage_ramp", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_water", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_waterfall", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_west_cliff", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_yard", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_CIC", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_vestibule", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_processing", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_windowbridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_greathall", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_sb_vent", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_catwalk", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_leftstairs", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_rightstairs", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_leftvent", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_rightvent", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_tunnel", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_mainlift", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_liftaccess", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_liftroom", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_leftplatform", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_rightplatform", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_highbalconyright", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_highbalconyleft", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_observation", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_rightroom", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_leftroom", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_bigplatform", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_leftelevator", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_rightelevator", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_topwalkway", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_midwalkway", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_lowwalkway", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_lowbalconyleft", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_lowbalconyright", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_lowmiddle", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_highmiddle", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_highright", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_highleft", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_floor", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_outside", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_leftside", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_rightside", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_gantry", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_sabre", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_center", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_ls_outofbounds", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_southbridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_southarch", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_northbridge", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_northarch", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_bighouselow", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_bighousesteps", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_bunkhouseroof", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_bunkhouse", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_pipes", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_transformers", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_eastpath", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loc_se_northside", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_terminator }
	};

	#define COMPILED_EFFECTS_BLOCK_ID { 0x1935F30F, 0x65BF4E9E, 0x8FEC9CC4, 0x9E114507 }
	TAG_STRUCT(
		compiled_effects_block,
		"compiled_effects_block",
		"compiled_effects_block",
		"s_compiled_effects_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPILED_EFFECTS_BLOCK_ID)
	{
		{ _field_data, "compiled effect data", &compiled_effect_data },
		{ _field_terminator }
	};

	#define COMPILED_PIXEL_SHADER_BLOCK_ID { 0xFA151841, 0x172743E2, 0xB91717BF, 0x3BAF16F7 }
	TAG_STRUCT(
		compiled_pixel_shader_block,
		"compiled_pixel_shader_block",
		"compiled_pixel_shader_block",
		"s_compiled_pixel_shader_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPILED_PIXEL_SHADER_BLOCK_ID)
	{
		{ _field_struct, "compiled shader splut", &rasterizer_compiled_shader_struct },
		{ _field_long_integer, "runtime shader ", _field_id_shader_unknown },
		{ _field_terminator }
	};

	#define COMPILED_PIXEL_SHADER_REFERERENCE_BLOCK_STRUCT_ID { 0x6DFB2384, 0xA401DD52, 0x1DABC7D1, 0xE97849F4 }
	TAG_STRUCT(
		compiled_pixel_shader_refererence_block_struct,
		"compiled_pixel_shader_refererence_block_struct",
		"compiled_pixel_shader_refererence_block_struct",
		"s_compiled_pixel_shader_refererence_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPILED_PIXEL_SHADER_REFERERENCE_BLOCK_STRUCT_ID)
	{
		{ _field_long_integer, "hash" },
		{ _field_long_integer, "index" },
		{ _field_terminator }
	};

	#define COMPILED_SHADER_HASH_BLOCK_ID { 0xEC4EC556, 0x49248BC, 0xACFA5D9C, 0x3A703A9A }
	TAG_STRUCT(
		compiled_shader_hash_block,
		"compiled_shader_hash_block",
		"compiled_shader_hash_block",
		"s_compiled_shader_hash_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPILED_SHADER_HASH_BLOCK_ID)
	{
		{ _field_long_integer, "hash" },
		{ _field_terminator }
	};

	#define COMPILED_VERTEX_SHADER_BLOCK_ID { 0x3543DB1D, 0x836C4843, 0xB307E446, 0x83BD276F }
	TAG_STRUCT(
		compiled_vertex_shader_block,
		"compiled_vertex_shader_block",
		"compiled_vertex_shader_block",
		"s_compiled_vertex_shader_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPILED_VERTEX_SHADER_BLOCK_ID)
	{
		{ _field_struct, "compiled shader splut", &rasterizer_compiled_shader_struct },
		{ _field_long_integer, "runtime shader ", _field_id_shader_unknown },
		{ _field_terminator }
	};

	#define COMPILED_VERTEX_SHADER_REFERERENCE_BLOCK_STRUCT_ID { 0x6DFB7684, 0xE9B749F4, 0xA401B552, 0x1DDCE7D1 }
	TAG_STRUCT(
		compiled_vertex_shader_refererence_block_struct,
		"compiled_vertex_shader_refererence_block_struct",
		"compiled_vertex_shader_refererence_block_struct",
		"s_compiled_vertex_shader_refererence_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPILED_VERTEX_SHADER_REFERERENCE_BLOCK_STRUCT_ID)
	{
		{ _field_long_integer, "hash" },
		{ _field_long_integer, "index" },
		{ _field_terminator }
	};

	#define COMPONENT_DEFINITION_ID { 0xBD11BC6F, 0x13294A69, 0xA305D2C5, 0x95132FA }
	TAG_STRUCT(
		component_definition,
		"component_definition",
		"component_definition",
		"s_component_definition",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPONENT_DEFINITION_ID)
	{
		{ _field_string_id, "type" },
		{ _field_string_id, "name" },
		{ _field_string_id, "parent" },
		{ _field_word_flags, "flags", &component_definition_flags },
		{ _field_short_block_index, "template instantiation index", &template_instantiation_block_definition_block },
		{ _field_terminator }
	};

	STRINGS(component_definition_flags)
	{
		"hidden to tools user"
	};
	STRING_LIST(component_definition_flags, component_definition_flags_strings, _countof(component_definition_flags_strings));

	#define COMPONENT_EDITOR_ONLY_DEFINITION_ID { 0x6F53BEF3, 0x4AB6A37E, 0xF0C815BF, 0x45DEED38 }
	TAG_STRUCT(
		component_editor_only_definition,
		"component_editor_only_definition",
		"component_editor_only_definition",
		"s_component_editor_only_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPONENT_EDITOR_ONLY_DEFINITION_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "properties editor only", &property_editor_only_definition_block },
		{ _field_terminator }
	};

	#define COMPONENT_INDEX_BLOCK_DEFINITION_ID { 0xA6D04B81, 0x50744188, 0x85E92731, 0xCD29119E }
	TAG_STRUCT(
		component_index_block_definition,
		"component_index_block_definition",
		"component_index_block_definition",
		"s_component_index_block_definition",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPONENT_INDEX_BLOCK_DEFINITION_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "component definition index", &component_definition_block },
		FIELD_PAD("pad0", 2),
		{ _field_terminator }
	};

	#define COMPONENT_PROPERTIES_DEFINITION_ID { 0x8420F7CF, 0x438C8C23, 0xFAC7919C, 0xF4E1FEF7 }
	TAG_STRUCT(
		component_properties_definition,
		"component_properties_definition",
		"component_properties_definition",
		"s_component_properties_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPONENT_PROPERTIES_DEFINITION_ID)
	{
		{ _field_string_id, "name" },
		{ _field_struct, "property values", &properties_struct },
		{ _field_terminator }
	};

	#define COMPRESSION_INFO_BLOCK_ID { 0xFE51FDAC, 0x62FF4778, 0xA8C33054, 0xA023A96C }
	TAG_STRUCT(
		compression_info_block,
		"compression_info_block",
		"compression_info_block",
		"s_compression_info_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COMPRESSION_INFO_BLOCK_ID)
	{
		{ _field_word_flags, "compression flags", &compression_flags },
		FIELD_PAD("JOJOBOMO", 2),
		FIELD_EXPLANATION("WARNING", "The following fields are mislabeled for legacy reasons.The actual order is:\nposition_bounds.x0 position_bounds.x1 position_bounds.y0\nposition_bounds.y1 position_bounds.z0 position_bounds.z1\n\ntexcoord_bounds.x0 texcoord_bounds.x1\ntexcoord_bounds.y0 texcoord_bounds.y1\n"),
		{ _field_real_point_3d, "position bounds 0" },
		{ _field_real_point_3d, "position bounds 1" },
		{ _field_real_point_2d, "texcoord bounds 0" },
		{ _field_real_point_2d, "texcoord bounds 1" },
		{ _field_real, "unused0" },
		{ _field_real, "unused1" },
		{ _field_terminator }
	};

	STRINGS(compression_flags)
	{
		"compressed position",
		"compressed texcoord",
		"compression optimized"
	};
	STRING_LIST(compression_flags, compression_flags_strings, _countof(compression_flags_strings));

	#define CONICAL_PROJECTION_BLOCK_ID { 0xC44A9D16, 0x88854B7D, 0x8A5731FD, 0x79F9555F }
	TAG_STRUCT(
		conical_projection_block,
		"conical_projection_block",
		"conical_projection_block",
		"s_conical_projection_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CONICAL_PROJECTION_BLOCK_ID)
	{
		FIELD_EXPLANATION("conical_projection", "projectile_count = yaw_count*pitch_count\nThis block has no effect if _projectile_disable_instantaneous_first_tick is set or projectile has not been fired from a weapon."),
		{ _field_short_integer, "yaw count" },
		{ _field_short_integer, "pitch count" },
		{ _field_real, "distribution exponent", "exp==.5 even distribution, exp==1  halo2 distribution, exp>1== weighted towards center" },
		{ _field_angle, "spread", "degrees" },
		{ _field_terminator }
	};

	#define CONSTRAINT_BODIES_STRUCT_ID { 0x8C776F54, 0x79CD4488, 0xA821DD34, 0xBD455BC0 }
	TAG_STRUCT(
		constraint_bodies_struct,
		"constraint_bodies_struct",
		"constraint_bodies_struct",
		"s_constraint_bodies_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CONSTRAINT_BODIES_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "node a", &nodes_block_block },
		{ _field_short_block_index, "node b", &nodes_block_block },
		{ _field_real, "a scale" },
		{ _field_real_vector_3d, "a forward" },
		{ _field_real_vector_3d, "a left" },
		{ _field_real_vector_3d, "a up" },
		{ _field_real_point_3d, "a position" },
		{ _field_real, "b scale" },
		{ _field_real_vector_3d, "b forward" },
		{ _field_real_vector_3d, "b left" },
		{ _field_real_vector_3d, "b up" },
		{ _field_real_point_3d, "b position" },
		{ _field_short_block_index, "edge index", &physics_model_node_constraint_edge_block_block },
		FIELD_PAD("H", 2),
		{ _field_terminator }
	};

	#define CONTACT_POINT_BLOCK_ID { 0xEE23ED8, 0x815D4570, 0x855B29FD, 0xF4A4104A }
	TAG_STRUCT(
		contact_point_block,
		"contact_point_block",
		"contact_point_block",
		"s_contact_point_block",
		SET_UNKNOWN0 | SET_UNKNOWN3 | SET_UNKNOWN4 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CONTACT_POINT_BLOCK_ID)
	{
		FIELD_USELESS_PAD("value", 32),
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_old_string_id, "marker name" },
		{ _field_terminator }
	};

	#define CONTACT_POINT_BLOCK_V1_ID { 0x7EB4C50D, 0xE8144499, 0x99977272, 0x4910B3AF }
	TAG_STRUCT(
		contact_point_block_v1,
		"contact_point_block_v1",
		"contact_point_block_v1",
		"s_contact_point_block_v1",
		SET_UNKNOWN0 | SET_UNKNOWN3 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CONTACT_POINT_BLOCK_V1_ID)
	{
		FIELD_PAD("KZUF", 32),
		{ _field_old_string_id, "marker name" },
		{ _field_terminator }
	};

	#define CONTROL_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0x6388FD6C, 0x6FE74B66, 0xB04DAAF6, 0x602232D9 }
	TAG_STRUCT(
		control_block_index_flags_block_struct,
		"control_block_index_flags_block_struct",
		"control_block_index_flags_block_struct",
		"s_control_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CONTROL_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_control_palette_block_block },
		{ _field_terminator }
	};

	#define CONTROLLER_INPUT_BLOCK_ID { 0x56079C5, 0xBD194D1C, 0xB7544182, 0xD8A4D2AD }
	TAG_STRUCT(
		controller_input_block,
		"controller_input_block",
		"controller_input_block",
		"s_controller_input_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CONTROLLER_INPUT_BLOCK_ID)
	{
		{ _field_real, "axial dead zone" },
		{ _field_real, "radial dead zone" },
		{ _field_terminator }
	};

	#define CONTROLLER_MAPPING_REFERENCE_BLOCK_ID { 0x6D1C4D66, 0x921C4C4E, 0xB2A0F6C3, 0xEC6AACBF }
	TAG_STRUCT(
		controller_mapping_reference_block,
		"controller_mapping_reference_block",
		"controller_mapping_reference_block",
		"s_controller_mapping_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CONTROLLER_MAPPING_REFERENCE_BLOCK_ID)
	{
		{ _field_tag_reference, "mapping", &controller_mapping_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(controller_mapping_group_reference, CONTROLLER_MAPPING_TAG);

	#define CONTROLLER_MAPPING_STRUCT_DEFINITION_ID { 0x7011BE12, 0xFF694D9C, 0xA21928C1, 0x41187886 }
	TAG_STRUCT(
		controller_mapping_struct_definition,
		"controller_mapping_struct_definition",
		"controller_mapping_struct_definition",
		"s_controller_mapping_struct_definition",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CONTROLLER_MAPPING_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "auto zoom out ticks", "set to 0 for instant unzoom on trigger release (trigger style) or 15 for toggle (thumbstick style)" },
		FIELD_EXPLANATION("Start/Back", "Start and Back buttons are not remappable and do not appear in this list."),
		{ _field_short_enum, "jump", &gamepad_button_definition },
		{ _field_short_enum, "switch weapon", &gamepad_button_definition },
		{ _field_short_enum, "contextual action", &gamepad_button_definition },
		{ _field_short_enum, "melee attack", &gamepad_button_definition },
		{ _field_short_enum, "equipment", &gamepad_button_definition },
		{ _field_short_enum, "throw grenade", &gamepad_button_definition },
		{ _field_short_enum, "primary fire", &gamepad_button_definition },
		{ _field_short_enum, "crouch", &gamepad_button_definition },
		{ _field_short_enum, "zoom-zoom scope", &gamepad_button_definition },
		{ _field_short_enum, "switch grenade prev", &gamepad_button_definition },
		{ _field_short_enum, "switch grenade next", &gamepad_button_definition },
		{ _field_short_enum, "secondary fire", &gamepad_button_definition },
		{ _field_short_enum, "tertiary fire", &gamepad_button_definition },
		{ _field_short_enum, "vehicle trick primary", &gamepad_button_definition },
		{ _field_short_enum, "vehicle trick secondary", &gamepad_button_definition },
		{ _field_short_enum, "secondary contextual action", &gamepad_button_definition },
		{ _field_short_enum, "radio message", &gamepad_button_definition },
		FIELD_SKIP("start", 2),
		FIELD_SKIP("back", 2),
		{ _field_short_enum, "lean left", &gamepad_button_definition },
		{ _field_short_enum, "lean right", &gamepad_button_definition },
		{ _field_short_enum, "night vision", &gamepad_button_definition },
		{ _field_short_enum, "accept", &gamepad_button_definition },
		{ _field_short_enum, "cancel", &gamepad_button_definition },
		{ _field_short_enum, "machinima lower weapon", &gamepad_button_definition },
		{ _field_short_enum, "machinima camera enable", &gamepad_button_definition },
		{ _field_short_enum, "machinima camera control", &gamepad_button_definition },
		{ _field_short_enum, "machinima camera debug", &gamepad_button_definition },
		{ _field_short_enum, "lift editor", &gamepad_button_definition },
		{ _field_short_enum, "drop editor", &gamepad_button_definition },
		{ _field_short_enum, "push to talk", &gamepad_button_definition },
		{ _field_short_enum, "cinematic skip", &gamepad_button_definition },
		{ _field_short_enum, "fireteam", &gamepad_button_definition },
		{ _field_short_enum, "regroup", &gamepad_button_definition },
		{ _field_short_enum, "activate minimap", &gamepad_button_definition },
		{ _field_short_enum, "requisition menu", &gamepad_button_definition },
		{ _field_short_enum, "loadout menu", &gamepad_button_definition },
		{ _field_short_enum, "hero assist", "aka sprint", &gamepad_button_definition },
		{ _field_short_enum, "ordnance", &gamepad_button_definition },
		{ _field_short_enum, "skip killcam", &gamepad_button_definition },
		{ _field_short_enum, "mantis fire primary", &gamepad_button_definition },
		{ _field_short_enum, "mantis fire secondary", &gamepad_button_definition },
		{ _field_short_enum, "mantis melee attack", &gamepad_button_definition },
		{ _field_short_enum, "mantis crouch", &gamepad_button_definition },
		{ _field_terminator }
	};

	STRINGS(gamepad_button_definition)
	{
		"left trigger",
		"right trigger",
		"dpad up",
		"dpad down",
		"dpad left",
		"dpad right",
		"start",
		"back",
		"left thumb",
		"right thumb",
		"button a",
		"button b",
		"button x",
		"button y",
		"left bumper",
		"right bumper"
	};
	STRING_LIST(gamepad_button_definition, gamepad_button_definition_strings, _countof(gamepad_button_definition_strings));

	#define COOKIE_PURCHASE_GLOBALS_STRUCT_DEFINITION_ID { 0x793B38DC, 0xFD7A4B72, 0xB484A227, 0xE22E9087 }
	TAG_STRUCT(
		cookie_purchase_globals_struct_definition,
		"cookie_purchase_globals_struct_definition",
		"cookie_purchase_globals_struct_definition",
		"s_cookie_purchase_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOKIE_PURCHASE_GLOBALS_STRUCT_DEFINITION_ID)
	{
		FIELD_GROUP_BEGIN("Purchase Families"),
		{ _field_block, "Helmet purchasable appearance families", &cookiepurchasefamilyappearancedefinitionblock_block },
		{ _field_block, "Left shoulder purchasable appearance families", &cookiepurchasefamilyappearancedefinitionblock_block },
		{ _field_block, "Right shoulder purchasable appearance families", &cookiepurchasefamilyappearancedefinitionblock_block },
		{ _field_block, "Chest purchasable appearance families", &cookiepurchasefamilyappearancedefinitionblock_block },
		{ _field_block, "Legs purchasable appearance families", &cookiepurchasefamilyappearancedefinitionblock_block },
		{ _field_block, "Arms purchasable appearance families", &cookiepurchasefamilyappearancedefinitionblock_block },
		{ _field_block, "App 1 loadout families", &cookiepurchasefamilyloadoutdefinitionblock_block },
		{ _field_block, "App 2 loadout families", &cookiepurchasefamilyloadoutdefinitionblock_block },
		{ _field_block, "Primary weapon loadout families", &cookiepurchasefamilyloadoutdefinitionblock_block },
		{ _field_block, "Secondary weapon loadout families", &cookiepurchasefamilyloadoutdefinitionblock_block },
		{ _field_block, "Grenade purchasable loadout families", &cookiepurchasefamilyloadoutdefinitionblock_block },
		{ _field_block, "Equipment purchasable loadout families", &cookiepurchasefamilyloadoutdefinitionblock_block },
		{ _field_block, "Slot purchasable loadout families", &cookiepurchasefamilyloadoutdefinitionblock_block },
		{ _field_block, "Visor tint purchasable appearance families", &cookiepurchasefamilyappearancedefinitionblock_block },
		{ _field_block, "Elite armor purchasable appearance families", &cookiepurchasefamilyappearancedefinitionblock_block },
		{ _field_block, "Primary emblem purchasable appearance families", &cookiepurchasefamilyappearancedefinitionblock_block },
		{ _field_block, "Secondary emblem purchasable appearance families", &cookiepurchasefamilyappearancedefinitionblock_block },
		{ _field_block, "Ordnance slot purchasable families", &cookiepurchasefamilyordnancedefinitionblock_block },
		{ _field_block, "Ordnance purchasable families", &cookiepurchasefamilyordnancedefinitionblock_block },
		{ _field_block, "Portrait pose purchasable families", &cookiepurchasefamilyappearancedefinitionblock_block },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Appearance Items"),
		{ _field_block, "purchasable appearance items", &cookiepurchaseappearancedefinitionblock_block },
		{ _field_block, "DLC appearance unlockables", &cookiepurchaseexternalunlockableblockappearancedefinition_block },
		{ _field_block, "Waypoint appearance unlockables", &cookiepurchaseexternalunlockableblockappearancedefinition_block },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Loadout Items"),
		{ _field_block, "purchasable loadout items", &cookiepurchaseloadoutdefinitionblock_block },
		{ _field_block, "DLC loadout unlockables", &cookiepurchaseexternalunlockableblockloadoutdefinition_block },
		{ _field_block, "Waypoint loadout unlockables", &cookiepurchaseexternalunlockableblockloadoutdefinition_block },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Ordnance Items"),
		{ _field_block, "purchasable ordnance items", &cookiepurchaseordnancedefinitionblock_block },
		{ _field_block, "DLC ordnance unlockables", &cookiepurchaseexternalunlockableblockordnancedefinition_block },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define COOP_DIFFICULTY_BLOCK_STRUCT_ID { 0x77C24405, 0xCA614F7C, 0x9192D3BD, 0x88918045 }
	TAG_STRUCT(
		coop_difficulty_block_struct,
		"coop_difficulty_block_struct",
		"coop_difficulty_block_struct",
		"s_coop_difficulty_block_struct",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOP_DIFFICULTY_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("vitality", "scale values for enemy health and shield settings"),
		{ _field_real, "two-player shield recharge delay", "multiplier on enemy shield recharge delay with two coop players" },
		{ _field_real, "four-player shield recharge delay", "multiplier on enemy shield recharge delay with four coop players" },
		{ _field_real, "six-player shield recharge delay", "multiplier on enemy shield recharge delay with six coop players or more" },
		{ _field_real, "two-player shield recharge timer", "multiplier on enemy shield recharge timer with two coop players" },
		{ _field_real, "four-player shield recharge timer", "multiplier on enemy shield recharge timer with four coop players" },
		{ _field_real, "six-player shield recharge timer", "multiplier on enemy shield recharge timer with six coop players or more" },
		FIELD_EXPLANATION("movement", "scale values for enemy movement properties"),
		{ _field_real, "two-player grenade dive chance", "multiplier on enemy grenade dive chance with two coop players" },
		{ _field_real, "four-player grenade dive chance", "multiplier on enemy grenade dive chance with four coop players" },
		{ _field_real, "six-player grenade dive chance", "multiplier on enemy grenade dive chance with six coop players or more" },
		{ _field_real, "two-player armor lock chance", "multiplier on enemy armor lock chance with two coop players" },
		{ _field_real, "four-player armor lock chance", "multiplier on enemy armor lock chance with four coop players" },
		{ _field_real, "six-player armor lock chance", "multiplier on enemy armor lock chance with six coop players or more" },
		FIELD_EXPLANATION("evasion", "scale values for enemy evasion settings"),
		{ _field_real, "two-player evasion danger threshold", "multiplier on enemy evasion danger threshold with two coop players" },
		{ _field_real, "four-player evasion danger threshold", "multiplier on enemy evasion danger threshold with four coop players" },
		{ _field_real, "six-player evasion danger threshold", "multiplier on enemy evasion danger threshold with six coop players or more" },
		{ _field_real, "two-player evasion delay timer", "multiplier on enemy evasion delay timer with two coop players" },
		{ _field_real, "four-player evasion delay timer", "multiplier on enemy evasion delay timer with four coop players" },
		{ _field_real, "six-player evasion delay timer", "multiplier on enemy evasion delay timer with six coop players or more" },
		{ _field_real, "two-player evasion chance", "multiplier on enemy evasion chance with two coop players" },
		{ _field_real, "four-player evasion chance", "multiplier on enemy evasion chance with four coop players" },
		{ _field_real, "six-player evasion chance", "multiplier on enemy evasion chance with six coop players or more" },
		FIELD_EXPLANATION("shooting", "scale values for enemy shooting settings"),
		{ _field_real, "two-player burst duration", "multiplier on the enemy shooting burst duration with two coop players" },
		{ _field_real, "four-player burst duration", "multiplier on the enemy shooting burst duration with four coop players" },
		{ _field_real, "six-player burst duration", "multiplier on the enemy shooting burst duration with six coop players or more" },
		{ _field_real, "two-player burst separation", "multipler on the enemy shooting burst separation with two coop players" },
		{ _field_real, "four-player burst separation", "multipler on the enemy shooting burst separation with four coop players" },
		{ _field_real, "six-player burst separation", "multipler on the enemy shooting burst separation with six coop players or more" },
		{ _field_real, "two-player damage modifier", "multipler on the enemy shooting damage multiplier with two coop players" },
		{ _field_real, "four-player damage modifier", "multipler on the enemy shooting damage multiplier with four coop players" },
		{ _field_real, "six-player damage modifier", "multipler on the enemy shooting damage multiplier with six coop players or more" },
		FIELD_EXPLANATION("projectile", "scale values for enemy projectile settings"),
		{ _field_real, "two-player projectile speed", "multiplier on the speed of projectiles fired by enemies with two coop players" },
		{ _field_real, "four-player projectile speed", "multiplier on the speed of projectiles fired by enemies with four coop players" },
		{ _field_real, "six-player projectile speed", "multiplier on the speed of projectiles fired by enemies with six coop players or more" },
		{ _field_terminator }
	};

	#define COOP_SPAWNING_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID { 0x46B00033, 0x267A4982, 0x9B2DADF7, 0x58EC5786 }
	TAG_STRUCT(
		coop_spawning_globals_definition_struct_definition,
		"coop_spawning_globals_definition_struct_definition",
		"coop_spawning_globals_definition_struct_definition",
		"s_coop_spawning_globals_definition_struct_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		COOP_SPAWNING_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_short_integer, "player cooldown timer seconds" },
		{ _field_short_integer, "backfield cooldown timer seconds" },
		{ _field_short_integer, "unsafe spawn timer" },
		{ _field_short_integer, "teammate damage timer" },
		{ _field_short_integer, "dead body switch time" },
		{ _field_word_flags, "flags", &coop_spawning_flags },
		{ _field_short_integer, "loadout menu spawn suppression time", "maximal time that the loadout menu can prevent respawn while up" },
		{ _field_short_integer, "loadout menu cooldown time", "cooldown time after loadout menu is dismissed before player spawns in" },
		{ _field_short_integer, "loadout menu initial choice time", "time before players initially spawn in for choosing starting loadout" },
		{ _field_short_integer, "maximum spawn suppression time", "maximal time that a player can continue to delay his spawn by switching targets" },
		{ _field_real, "nearby enemy cylinder height" },
		{ _field_real, "nearby enemy cylinder radius" },
		FIELD_GROUP_BEGIN("Safety Statuses"),
		{ _field_long_enum, "ready", "safe and ready to spawn - this value currently ignored", &safety_check_mode_enum },
		{ _field_long_enum, "waiting", "safe but waiting to spawn - this value currently ignored", &safety_check_mode_enum },
		{ _field_long_enum, "enemy territory", "spawn target is inside enemy territory volumes", &safety_check_mode_enum },
		{ _field_long_enum, "teammate damaged", "spawn target has recently taken damage", &safety_check_mode_enum },
		{ _field_long_enum, "enemy nearby", "There is an enemy within the cylinder around the spawn target", &safety_check_mode_enum },
		{ _field_long_enum, "projectiles", "There are dangerous projectiles in the area", &safety_check_mode_enum },
		FIELD_GROUP_END(),
		{ _field_real, "failover to influence spawning time", "number of seconds before influence spawning will be used (<= 0 is disabled)" },
		{ _field_terminator }
	};

	STRINGS(coop_spawning_flags)
	{
		"push to spawn enabled#allow loadout menu to delay spawn",
		"show marker on respawn player",
		"extermination syncs timers",
		"extermination syncs location",
		"rotation allowed on player",
		"rotation allowed on object",
		"display loadouts if changed",
		"always display loadouts on death",
		"disable spartan respawn on player",
		"disable spartan respawn on backfield",
		"disable elite respawn on player",
		"disable elite respawn on backfield"
	};
	STRING_LIST(coop_spawning_flags, coop_spawning_flags_strings, _countof(coop_spawning_flags_strings));

	STRINGS(safety_check_mode_enum)
	{
		"has no effect",
		"displays warning",
		"prevents spawn"
	};
	STRING_LIST(safety_check_mode_enum, safety_check_mode_enum_strings, _countof(safety_check_mode_enum_strings));

	#define CRATE_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0xAE2328B4, 0x9AF842AF, 0xB8597C81, 0x177E8F02 }
	TAG_STRUCT(
		crate_block_index_flags_block_struct,
		"crate_block_index_flags_block_struct",
		"crate_block_index_flags_block_struct",
		"s_crate_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CRATE_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_crate_palette_block_block },
		{ _field_terminator }
	};

	#define CRATE_STRUCT_DEFINITION_ID { 0x793C3A87, 0x506C4035, 0xBF3BFC95, 0xF0459BE4 }
	VERSIONED_TAG_STRUCT(
		crate_struct_definition,
		"crate_struct_definition",
		"crate_struct_definition",
		"s_crate_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CRATE_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 11 },
		{ _field_struct, "object", &object_struct_definition },
		FIELD_GROUP_BEGIN("$$$ CRATE $$$"),
		{ _field_word_flags, "flags", &crate_flags },
		FIELD_PAD("KOQVK", 2),
		{ _field_block, "campaign metagame bucket", &campaign_metagame_bucket_block_block },
		{ _field_long_integer, "self destruction timer", nullptr, "seconds" },
		{ _field_tag_reference, "particleize", "optional particleization effect definition, if you want this to particleize when it takes damage", &particleman_group_reference },
		{ _field_string_id, "grab animation set", "the animation set to use when this crate is grabbed" },
		{ _field_string_id, "grab pickup string", "the string to display when the player can grab this object, from ui/hud/hud_messages" },
		{ _field_tag_reference, "projectile bounce effect", "effect to play when a projectile bounces because of the \"all projectiles bounce off\" flag", &effect_group_reference },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 65 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ CRATE $$$"),
		{ _field_word_flags, "flags", &crate_flags },
		FIELD_PAD("KOQVK", 2),
		{ _field_block, "campaign metagame bucket", &campaign_metagame_bucket_block_block },
		{ _field_long_integer, "self destruction timer", nullptr, "seconds" },
		{ _field_tag_reference, "particleize", "optional particleization effect definition, if you want this to particleize when it takes damage", &particleman_group_reference },
		{ _field_string_id, "grab animation set", "the animation set to use when this crate is grabbed" },
		{ _field_string_id, "grab pickup string", "the string to display when the player can grab this object, from ui/hud/hud_messages" },
		{ _field_tag_reference, "projectile bounce effect", "effect to play when a projectile bounces because of the \"all projectiles bounce off\" flag", &effect_group_reference },
		FIELD_GROUP_END(),
		
		{ _field_terminator }
	};

	STRINGS(crate_flags)
	{
		"does not block AOE",
		"attach texture camera hack",
		"can be grabbed",
		"all projectiles bounce off",
		"targetable",
		"crate walls block AOE#for crates that behave like a bubble shield but are not attached to equipment",
		"crate blocks damage flash damage response",
		"crate blocks rumble damage response",
		"crate takes top level aoe damage#crate takes top level aoe damage when parented to another object",
		"crate blocks forced projectile overpenetration#so that the active shield can block the splaser",
		"unimportant#some rotational and velocity attributes are not synchronized from host to client"
	};
	STRING_LIST(crate_flags, crate_flags_strings, _countof(crate_flags_strings));

	#define CREATURE_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0x28EFEBFB, 0x85BB41F9, 0xAA7F3DB1, 0x4525BDC6 }
	TAG_STRUCT(
		creature_block_index_flags_block_struct,
		"creature_block_index_flags_block_struct",
		"creature_block_index_flags_block_struct",
		"s_creature_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CREATURE_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_creature_palette_block_block },
		{ _field_terminator }
	};

	#define CREATURE_SCALAR_TIMING_BLOCK_ID { 0x3BF7E066, 0xD7B244F4, 0xA9A392E5, 0xBC191CF }
	TAG_STRUCT(
		creature_scalar_timing_block,
		"creature_scalar_timing_block",
		"creature_scalar_timing_block",
		"s_creature_scalar_timing_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CREATURE_SCALAR_TIMING_BLOCK_ID)
	{
		{ _field_struct, "function_curve", &scalar_function_named_struct },
		{ _field_terminator }
	};

	#define CREATURE_STRUCT_DEFINITION_ID { 0x83C805FE, 0xCAD24C6A, 0x8781D5EE, 0x18B84ED8 }
	VERSIONED_TAG_STRUCT(
		creature_struct_definition,
		"creature_struct_definition",
		"creature_struct_definition",
		"s_creature_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CREATURE_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 26 },
		{ _field_struct, "object", &object_struct_definition },
		FIELD_GROUP_BEGIN("$$$ CREATURE $$$"),
		{ _field_long_flags, "flags", &creature_definition_flags },
		{ _field_short_enum, "default team", &unit_default_teams },
		{ _field_short_enum, "motion sensor blip size", &global_chud_blip_type_definition },
		{ _field_angle, "turning velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "turning acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual turning modifier", nullptr, nullptr, "[0,1]" },
		{ _field_real, "autoaim width", nullptr, "world units" },
		{ _field_struct, "physics", &character_physics_struct },
		{ _field_tag_reference, "impact damage", &damage_effect_group_reference },
		{ _field_tag_reference, "impact shield damage", "if not specified, uses 'impact damage'", &damage_effect_group_reference },
		{ _field_block, "campaign metagame bucket", &campaign_metagame_bucket_block_block },
		FIELD_EXPLANATION("death and destruction", nullptr),
		{ _field_real_bounds, "destroy after death time", "if non-zero, the creature will destroy itself upon death after this much time", "seconds" },
		FIELD_EXPLANATION("big battle", "The following fields only affect creatures configured as boids for big battle"),
		{ _field_long_flags, "big battle flags", &creature_big_battle_definition_flags },
		{ _field_tag_reference, "big battle weapon emitter", &cheap_particle_emitter_group_reference },
		{ _field_real_point_3d, "big battle weapon offset" },
		{ _field_tag_reference, "big battle weapon emitter 2", "if you leave this empty, only the first emitter will fire", &cheap_particle_emitter_group_reference },
		{ _field_real_point_3d, "big battle weapon offset 2" },
		{ _field_block, "big battle weapon fire timing", &creature_scalar_timing_block_block },
		{ _field_tag_reference, "big battle expensive weapon effect", "this fires a full effect from location up, oriented along vehicle's forward and up axes", &effect_group_reference },
		{ _field_real_bounds, "expensive weapon fire time", nullptr, "seconds" },
		{ _field_tag_reference, "big battle death effect", &effect_group_reference },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 80 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ CREATURE $$$"),
		{ _field_long_flags, "flags", &creature_definition_flags },
		{ _field_short_enum, "default team", &unit_default_teams },
		{ _field_short_enum, "motion sensor blip size", &global_chud_blip_type_definition },
		{ _field_angle, "turning velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "turning acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual turning modifier", nullptr, nullptr, "[0,1]" },
		{ _field_real, "autoaim width", nullptr, "world units" },
		{ _field_struct, "physics", &character_physics_struct },
		{ _field_tag_reference, "impact damage", &damage_effect_group_reference },
		{ _field_tag_reference, "impact shield damage", "if not specified, uses 'impact damage'", &damage_effect_group_reference },
		{ _field_block, "campaign metagame bucket", &campaign_metagame_bucket_block_block },
		FIELD_EXPLANATION("death and destruction", nullptr),
		{ _field_real_bounds, "destroy after death time", "if non-zero, the creature will destroy itself upon death after this much time", "seconds" },
		FIELD_EXPLANATION("big battle", "The following fields only affect creatures configured as boids for big battle"),
		{ _field_long_flags, "big battle flags", &creature_big_battle_definition_flags },
		{ _field_tag_reference, "big battle weapon emitter", &cheap_particle_emitter_group_reference },
		{ _field_real_point_3d, "big battle weapon offset" },
		{ _field_tag_reference, "big battle weapon emitter 2", "if you leave this empty, only the first emitter will fire", &cheap_particle_emitter_group_reference },
		{ _field_real_point_3d, "big battle weapon offset 2" },
		{ _field_block, "big battle weapon fire timing", &creature_scalar_timing_block_block },
		{ _field_tag_reference, "big battle expensive weapon effect", "this fires a full effect from location up, oriented along vehicle's forward and up axes", &effect_group_reference },
		{ _field_real_bounds, "expensive weapon fire time", nullptr, "seconds" },
		{ _field_tag_reference, "big battle death effect", &effect_group_reference },
		FIELD_GROUP_END(),
		
		{ _field_terminator }
	};

	#define CS_ANIMATION_POINT_BLOCK_ID { 0x76E9537, 0xC5B54847, 0xA6B8BDB2, 0x81073985 }
	TAG_STRUCT(
		cs_animation_point_block,
		"cs_animation_point_block",
		"cs_animation_point_block",
		"s_cs_animation_point_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CS_ANIMATION_POINT_BLOCK_ID)
	{
		{ _field_string, "name" },
		{ _field_long_block_index, "Animating Object", &scenario_object_names_block_block },
		{ _field_long_integer, "Animating Object Index" },
		{ _field_string_id, "Animation Name" },
		{ _field_long_integer, "Animation Bone to Track" },
		{ _field_real_point_3d, "Offset From Bone" },
		{ _field_real, "Animation Time Offset" },
		{ _field_real, "Assumed Playback Rate" },
		{ _field_terminator }
	};

	#define CS_POINT_BLOCK_STRUCT_ID { 0x2E9A6212, 0xC24649F6, 0xB5738072, 0x69527BF3 }
	TAG_STRUCT(
		cs_point_block_struct,
		"cs_point_block_struct",
		"cs_point_block_struct",
		"s_cs_point_block_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CS_POINT_BLOCK_STRUCT_ID)
	{
		{ _field_string, "name" },
		{ _field_string_id, "name_id" },
		{ _field_real_point_3d, "position" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_real_euler_angles_2d, "facing direction" },
		{ _field_terminator }
	};

	#define CS_POINT_SET_BLOCK_ID { 0xB3DF7F2E, 0x72DA41E9, 0x9FA27244, 0x2AD627D1 }
	TAG_STRUCT(
		cs_point_set_block,
		"cs_point_set_block",
		"cs_point_set_block",
		"s_cs_point_set_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CS_POINT_SET_BLOCK_ID)
	{
		{ _field_string, "name" },
		{ _field_block, "points", &cs_point_block_block },
		{ _field_short_block_index, "bsp index", &scenario_structure_bsp_reference_block_block },
		FIELD_PAD("PAD1", 2),
		{ _field_long_flags, "flags", &point_set_flags },
		{ _field_long_flags, "traversal flags", &point_set_traversal_flags },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		FIELD_PAD("AJDEYNFD", 2),
		{ _field_terminator }
	};

	STRINGS(point_set_flags)
	{
		"manual reference frame",
		"turret deployment",
		"giant set",
		"invalid sector refs"
	};
	STRING_LIST(point_set_flags, point_set_flags_strings, _countof(point_set_flags_strings));

	STRINGS(point_set_traversal_flags)
	{
		"curve the traversal path",
		"loop when end is reached"
	};
	STRING_LIST(point_set_traversal_flags, point_set_traversal_flags_strings, _countof(point_set_traversal_flags_strings));

	#define CS_SCRIPT_DATA_BLOCK_ID { 0x667ACAAE, 0x6780495F, 0xB3DDEB61, 0x86448951 }
	TAG_STRUCT(
		cs_script_data_block,
		"cs_script_data_block",
		"cs_script_data_block",
		"s_cs_script_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CS_SCRIPT_DATA_BLOCK_ID)
	{
		{ _field_block, "point sets", &cs_point_set_block_block },
		{ _field_block, "animation points", &cs_animation_point_block_block },
		FIELD_PAD("TPHWNCUR", 120),
		{ _field_terminator }
	};

	#define CUBEMAP_REFERENCE_POINTS_BLOCK_ID { 0x45C01CA0, 0xD2404181, 0xBCC9CAE3, 0x3C979EBD }
	TAG_STRUCT(
		cubemap_reference_points_block,
		"cubemap_reference_points_block",
		"cubemap_reference_points_block",
		"s_cubemap_reference_points_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUBEMAP_REFERENCE_POINTS_BLOCK_ID)
	{
		{ _field_real_point_3d, "reference point" },
		{ _field_long_integer, "point index" },
		{ _field_terminator }
	};

	#define CUE_DISTRIBUTION_STRUCT_ID { 0xA33A8714, 0x99B0463B, 0xB3A517EF, 0x698F20A2 }
	TAG_STRUCT(
		cue_distribution_struct,
		"cue_distribution_struct",
		"cue_distribution_struct",
		"s_cue_distribution_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUE_DISTRIBUTION_STRUCT_ID)
	{
		{ _field_block, "tasks", &task_distribution_block_block },
		{ _field_struct, "distribution", &cue_stimulus_distribution_struct },
		{ _field_terminator }
	};

	#define CUE_PAYLOAD_STRUCT_ID { 0x26F9B58E, 0x59334FCB, 0x9239438F, 0xB6029B2B }
	TAG_STRUCT(
		cue_payload_struct,
		"cue_payload_struct",
		"cue_payload_struct",
		"s_cue_payload_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUE_PAYLOAD_STRUCT_ID)
	{
		{ _field_block, "firing points", &firing_point_payload_block_block },
		{ _field_block, "script", &script_payload_block_block },
		{ _field_block, "combat sync action", &combat_sync_action_group_payload_block_block },
		{ _field_block, "stimulus", &stimulus_payload_block_block },
		{ _field_block, "combat cue", &combat_cue_payload_block_block },
		{ _field_terminator }
	};

	#define CUE_STIMULUS_DISTRIBUTION_STRUCT_ID { 0xCBD9EBB5, 0xF4194B72, 0x950D2BF6, 0x26BD4CF9 }
	TAG_STRUCT(
		cue_stimulus_distribution_struct,
		"cue_stimulus_distribution_struct",
		"cue_stimulus_distribution_struct",
		"s_cue_stimulus_distribution_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUE_STIMULUS_DISTRIBUTION_STRUCT_ID)
	{
		{ _field_block, "radius", &radial_distribution_block_block },
		{ _field_block, "probability", &probability_distribution_block_block },
		{ _field_block, "characters", &character_distribution_block_block },
		{ _field_block, "weapons", &weapon_distribution_block_block },
		{ _field_terminator }
	};

	#define CUI_ACTIVE_ROSTER_SETTINGS_BLOCK_ID { 0x53A07740, 0x597D4CA2, 0xBD0133BC, 0x186516E6 }
	TAG_STRUCT(
		cui_active_roster_settings_block,
		"cui_active_roster_settings_block",
		"cui_active_roster_settings_block",
		"s_cui_active_roster_settings_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUI_ACTIVE_ROSTER_SETTINGS_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "analog scroll function", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define CUI_COMPONENT_SCREEN_REFERENCE_BLOCK_DEFINITION_ID { 0x5760E7A0, 0x4C3B4769, 0x86F13D78, 0x7B288742 }
	TAG_STRUCT(
		cui_component_screen_reference_block_definition,
		"cui_component_screen_reference_block_definition",
		"cui_component_screen_reference_block_definition",
		"s_cui_component_screen_reference_block_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUI_COMPONENT_SCREEN_REFERENCE_BLOCK_DEFINITION_ID)
	{
		{ _field_string_id, "name", "for use in code" },
		{ _field_tag_reference, "cui screen tag", &cui_screen_group_reference$2 },
		{ _field_terminator }
	};

	#define CUI_LOGIC_STRUCT_DEFINITION_ID { 0xAAD80006, 0x56CB4A4F, 0x9D7EF532, 0xAEC09825 }
	TAG_STRUCT(
		cui_logic_struct_definition,
		"cui_logic_struct_definition",
		"cui_logic_struct_definition",
		"s_cui_logic_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUI_LOGIC_STRUCT_DEFINITION_ID)
	{
		{ _field_string_id, "logic name" },
		{ _field_tag_reference, "string list", &multilingual_unicode_string_list_group_reference },
		{ _field_struct, "system", &cui_system },
		{ _field_terminator }
	};

	#define CUI_OVERLAY_CAMERA_BLOCK_DEFINITION_ID { 0x83781BD0, 0x54D418E, 0x8894CE59, 0x955626E0 }
	TAG_STRUCT(
		cui_overlay_camera_block_definition,
		"cui_overlay_camera_block_definition",
		"cui_overlay_camera_block_definition",
		"s_cui_overlay_camera_block_definition",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUI_OVERLAY_CAMERA_BLOCK_DEFINITION_ID)
	{
		{ _field_string_id, "resolution name" },
		{ _field_char_enum, "pivot corner", &cui_camera_pivot_corner_enum_definition },
		FIELD_PAD("pad0", 3),
		{ _field_real, "Z near", "distance to near clipping plane" },
		{ _field_real, "Z far", "distance to far clipping plane" },
		{ _field_real, "X angle degrees", "camera angle around the X axis" },
		{ _field_real, "Y angle degrees", "camera angle around the Y axis" },
		{ _field_terminator }
	};

	STRINGS(cui_camera_pivot_corner_enum_definition)
	{
		"top left",
		"top right",
		"bottom right",
		"bottom left"
	};
	STRING_LIST(cui_camera_pivot_corner_enum_definition, cui_camera_pivot_corner_enum_definition_strings, _countof(cui_camera_pivot_corner_enum_definition_strings));

	#define CUI_PLAYER_MODEL_CAMERA_SETTINGS_DEFINITION_ID { 0x73F77A8A, 0xD54408BE, 0x85B6BDBA, 0xF872B8EF }
	TAG_STRUCT(
		cui_player_model_camera_settings_definition,
		"cui_player_model_camera_settings_definition",
		"cui_player_model_camera_settings_definition",
		"s_cui_player_model_camera_settings_definition",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUI_PLAYER_MODEL_CAMERA_SETTINGS_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Camera Settings", "These are model-viewing camera parameters that you can control\n* FOV is the field of view used by the texture camera\n  if left 0, a suitable default FOV is used\n* Initial Radial Offset is the initial radial distance of the camera from the target model\n* Final Radial Offset is the final radial distance of the camera from the target model\n* Camera Radial Step Size is the incremental change in input to the radial transition function per tick\n* Initial Vertical Offset is the initial vertical distance of the camera from the target\'s center\n* Final Vertical Offset is the final vertical distance of the camera from the target\'s center\n* Camera Vertical Step Size is the incremental change in input to the vertical transition function per tick\n* Camera Rotational Step Size is the incremental change in camera rotation per game tick\n* The Transition Functions are used to control the camera zoom with controller input\n  if left empty, a linear interpolation is used for camera zoom"),
		{ _field_string_id, "name" },
		{ _field_real_point_3d, "model world position", "arbitrary location in the world to place the model", "wu" },
		{ _field_real_point_3d, "minimum world position" },
		{ _field_real_point_3d, "maximum world position" },
		{ _field_string_id, "viewed model marker name" },
		{ _field_real_point_3d, "minimum camera offset", nullptr, "wu" },
		{ _field_real_point_3d, "minimum camera focal offset", nullptr, "wu" },
		{ _field_real_point_3d, "maximum camera offset", nullptr, "wu" },
		{ _field_real_point_3d, "maximum camera focal offset", nullptr, "wu" },
		{ _field_real, "initial zoom", nullptr, nullptr, "[0,1]" },
		{ _field_real, "fov", nullptr, "degrees" },
		{ _field_terminator }
	};

	#define CUI_PLAYER_MODEL_CONTROLLER_SETTINGS_DEFINITION_ID { 0x5D1BD5FE, 0xE2C814D2, 0x82BEF4F7, 0x43A082FE }
	TAG_STRUCT(
		cui_player_model_controller_settings_definition,
		"cui_player_model_controller_settings_definition",
		"cui_player_model_controller_settings_definition",
		"s_cui_player_model_controller_settings_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUI_PLAYER_MODEL_CONTROLLER_SETTINGS_DEFINITION_ID)
	{
		{ _field_string_id, "name" },
		{ _field_real, "zoom speed", nullptr, "wu per tick" },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "zoom transition function", &mapping_function }, // structure_version:2
		{ _field_real_euler_angles_2d, "initial rotation", nullptr, "degrees" },
		{ _field_real_euler_angles_2d, "minimum rotation", nullptr, "degrees" },
		{ _field_real_euler_angles_2d, "maximum rotation", nullptr, "degrees" },
		{ _field_real, "rotation speed", nullptr, "degrees per tick" },
		{ _field_terminator }
	};

	#define CUI_PLAYER_MODEL_TRANSITION_SETTINGS_DEFINITION_ID { 0x20E2FA5B, 0x22E54706, 0xB4CC1F62, 0x40E0ACAD }
	TAG_STRUCT(
		cui_player_model_transition_settings_definition,
		"cui_player_model_transition_settings_definition",
		"cui_player_model_transition_settings_definition",
		"s_cui_player_model_transition_settings_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUI_PLAYER_MODEL_TRANSITION_SETTINGS_DEFINITION_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "camera transition function", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define CUI_SCREEN_STRUCT_DEFINITION_ID { 0x7139CC11, 0x87E842E4, 0x94C5ED2B, 0x2A19EAA8 }
	TAG_STRUCT(
		cui_screen_struct_definition,
		"cui_screen_struct_definition",
		"cui_screen_struct_definition",
		"s_cui_screen_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUI_SCREEN_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "string references", &string_file_references_block },
		{ _field_tag_reference, "logic", &cui_logic_group_reference },
		{ _field_struct, "system", &cui_system },
		{ _field_terminator }
	};

	TAG_REFERENCE(cui_logic_group_reference, CUI_LOGIC_TAG);

	#define CUI_STATIC_DATA_STRUCT_DEFINITION_ID { 0xA9592261, 0x3F3E4E98, 0xB9AA7A18, 0x4F381A53 }
	TAG_STRUCT(
		cui_static_data_struct_definition,
		"cui_static_data_struct_definition",
		"cui_static_data_struct_definition",
		"s_cui_static_data_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUI_STATIC_DATA_STRUCT_DEFINITION_ID)
	{
		{ _field_struct, "static data", &static_data_struct },
		{ _field_terminator }
	};

	#define CUI_SYSTEM_ID { 0x923E721C, 0xFE154F87, 0x8C081FF3, 0x2CE0E8E5 }
	TAG_STRUCT(
		cui_system,
		"cui_system",
		"cui_system",
		"s_cui_system",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUI_SYSTEM_ID)
	{
		{ _field_block, "template instantiations", &template_instantiation_block_definition_block },
		{ _field_block, "components", &component_definition_block },
		{ _field_block, "component indices", &component_index_block_definition_block },
		{ _field_block, "overlays", &overlay_definition_block },
		{ _field_block, "overlays editor only", &overlay_editor_only_definition_block },
		{ _field_block, "property bindings", &property_binding_block },
		{ _field_block, "binding conversion long comparisons", &binding_conversion_long_comparison_block_definition_block },
		{ _field_block, "static data tables", &static_data_table_block },
		{ _field_block, "expressions", &expression_block },
		{ _field_block, "encapsulated properties", &encapsulatedproperties_block },
		{ _field_terminator }
	};

	#define CURVE_SCALAR_STRUCT_DEFINITION_ID { 0xBB7E6B9, 0xE5B84B69, 0x88CAC7CC, 0xC7238AB4 }
	TAG_STRUCT(
		curve_scalar_struct_definition,
		"curve_scalar_struct_definition",
		"curve_scalar_struct_definition",
		"s_curve_scalar_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CURVE_SCALAR_STRUCT_DEFINITION_ID)
	{
		{ _field_struct, "function", &scalar_function_named_struct_default_one },
		{ _field_terminator }
	};

	#define CUSTOM_APP_BLOCK_ID { 0x3E548E96, 0xE9C04229, 0xB3D38DCF, 0xEED8E942 }
	TAG_STRUCT(
		custom_app_block,
		"custom_app_block",
		"custom_app_block",
		"s_custom_app_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUSTOM_APP_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "headerText" },
		{ _field_string_id, "helpText" },
		{ _field_string_id, "iconStringId" },
		{ _field_tag_reference, "hud screen reference", &cui_screen_group_reference },
		FIELD_EXPLANATION("Locked flag", "If you lock an app that you currently have installed and then XSync, the game may assert.  If so, relaunch and you\'ll be fine.  It\'s nothing to worry about."),
		{ _field_byte_flags, "flags", &custom_app_flags },
		FIELD_PAD("woooo", 3),
		FIELD_EXPLANATION("Player Traits", "Player traits that are applied to the player when they have this app."),
		{ _field_block, "player traits", &game_engine_player_traits_block_block },
		FIELD_EXPLANATION("Damage Type Modifiers", "Damage modifiers per damage type."),
		{ _field_block, "damage type modifiers", &custom_app_damage_modifier_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(cui_screen_group_reference, CUI_SCREEN_TAG);

	STRINGS(custom_app_flags)
	{
		"locked (cannot be used ever by anyone)"
	};
	STRING_LIST(custom_app_flags, custom_app_flags_strings, _countof(custom_app_flags_strings));

	#define CUSTOM_APP_DAMAGE_MODIFIER_BLOCK_ID { 0xE8032A12, 0xD5E44CB0, 0x9AEEFD83, 0xFB0999D4 }
	TAG_STRUCT(
		custom_app_damage_modifier_block,
		"custom_app_damage_modifier_block",
		"custom_app_damage_modifier_block",
		"s_custom_app_damage_modifier_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUSTOM_APP_DAMAGE_MODIFIER_BLOCK_ID)
	{
		{ _field_string_id, "damage type" },
		FIELD_EXPLANATION("damage resistance", "Any damage taken is divided by this number.  If you put -1, that means \"invulnerable\"."),
		{ _field_real, "damage resistance multiplier" },
		{ _field_terminator }
	};

	#define CUSTOM_APP_GLOBALS_STRUCT_DEFINITION_ID { 0x9C8EE695, 0x95D442FD, 0xAE8AADB4, 0x368822CA }
	TAG_STRUCT(
		custom_app_globals_struct_definition,
		"custom_app_globals_struct_definition",
		"custom_app_globals_struct_definition",
		"s_custom_app_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUSTOM_APP_GLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "maximum active apps", nullptr, "(-1 = unlimited)" },
		FIELD_EXPLANATION("Update Frequency", "The players can enter the Custom App menu at any time during a game and change their apps.  This enum determines when those changes take effect, in terms of gameplay effects."),
		{ _field_short_enum, "custom app update frequency", &custom_app_update_frequencies },
		FIELD_PAD("wahoo", 2),
		{ _field_block, "custom apps", &custom_app_block_block },
		{ _field_terminator }
	};

	STRINGS(custom_app_update_frequencies)
	{
		"update instantly#not supported",
		"update on respawn",
		"update on game start"
	};
	STRING_LIST(custom_app_update_frequencies, custom_app_update_frequencies_strings, _countof(custom_app_update_frequencies_strings));

	#define CUSTOM_DAMAGE_RESPONSE_LABEL_BLOCK_ID { 0x26EA92BD, 0xE58B40F2, 0x91D334D4, 0xE8A82956 }
	TAG_STRUCT(
		custom_damage_response_label_block,
		"custom_damage_response_label_block",
		"custom_damage_response_label_block",
		"s_custom_damage_response_label_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUSTOM_DAMAGE_RESPONSE_LABEL_BLOCK_ID)
	{
		{ _field_string_id, "custom label", "label used to control what damage response will fire.", FIELD_FLAG_INDEX },
		{ _field_terminator }
	};

	#define CUSTOMIZED_MODEL_PLAYER_BITS_BLOCK_ID { 0x3AAA47EC, 0xB8F24CE5, 0x8B427992, 0x5DF23E2 }
	TAG_STRUCT(
		customized_model_player_bits_block,
		"customized_model_player_bits_block",
		"customized_model_player_bits_block",
		"s_customized_model_player_bits_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUSTOMIZED_MODEL_PLAYER_BITS_BLOCK_ID)
	{
		{ _field_string_id, "region name" },
		{ _field_string_id, "permutation name" },
		{ _field_byte_flags, "flags", &model_customization_player_permutation_flags },
		FIELD_PAD("pad1", 3),
		{ _field_terminator }
	};

	STRINGS(model_customization_player_permutation_flags)
	{
		"male_only#this permutation only applies to male players",
		"female_only#this permutation only applies to female players",
		"mandibles_hidden#this permutation is an elite with enclosed helmet"
	};
	STRING_LIST(model_customization_player_permutation_flags, model_customization_player_permutation_flags_strings, _countof(model_customization_player_permutation_flags_strings));

	#define CUSTOMIZED_MODEL_SELECTION_BLOCK_ID { 0x2C058397, 0x39B4B24, 0x93A3E75D, 0x4E96C6D4 }
	TAG_STRUCT(
		customized_model_selection_block,
		"customized_model_selection_block",
		"customized_model_selection_block",
		"s_customized_model_selection_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		CUSTOMIZED_MODEL_SELECTION_BLOCK_ID)
	{
		{ _field_string_id, "selection name" },
		{ _field_string_id, "app name", "Which player-stats modifier should be activated when this item is equipped" },
		{ _field_block, "customized bits", &customized_model_player_bits_block_block },
		{ _field_terminator }
	};

	#define DAMAGE_ANIMATION_BLOCK_ID { 0x3ACB8A45, 0x68F24D9F, 0xA55254BA, 0x727902FD }
	TAG_STRUCT(
		damage_animation_block,
		"damage_animation_block",
		"damage_animation_block",
		"s_damage_animation_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_ANIMATION_BLOCK_ID)
	{
		{ _field_string_id, "label" },
		{ _field_block, "directions", &damage_direction_block_block },
		{ _field_terminator }
	};

	#define DAMAGE_BODY_PARAMETERS_STRUCT_ID { 0x33ECAC95, 0x9A4245E7, 0x8F244955, 0x413516E8 }
	TAG_STRUCT(
		damage_body_parameters_struct,
		"damage_body_parameters_struct",
		"damage_body_parameters_struct",
		"s_damage_body_parameters_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_BODY_PARAMETERS_STRUCT_ID)
	{
		{ _field_real, "maximum vitality" },
		{ _field_real, "minimum stun damage", "the minimum damage required to stun this object's health" },
		{ _field_real, "stun time", "the length of time the health stay stunned (do not recharge) after taking damage", "seconds" },
		{ _field_real, "recharge time", "the length of time it would take for the shields to fully recharge after being completely depleted", "seconds" },
		{ _field_real_fraction, "recharge fraction", "0 defaults to 1 - to what maximum level the body health will be allowed to recharge" },
		{ _field_terminator }
	};

	#define DAMAGE_CONSTRAINT_INFO_BLOCK_ID { 0xB2695CA4, 0x6DBB4594, 0x8CD7C095, 0x292B2763 }
	TAG_STRUCT(
		damage_constraint_info_block,
		"damage_constraint_info_block",
		"damage_constraint_info_block",
		"s_damage_constraint_info_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_CONSTRAINT_INFO_BLOCK_ID)
	{
		{ _field_string_id, "physics model constraint name" },
		{ _field_string_id, "damage constraint name" },
		{ _field_string_id, "damage constraint group name" },
		{ _field_real, "group probability scale" },
		{ _field_short_integer, "runtime constraint type" },
		{ _field_short_integer, "runtime constraint index" },
		{ _field_terminator }
	};

	#define DAMAGE_DECAY_STRUCT_ID { 0x1C1E2343, 0x2E644935, 0xA2CE1C35, 0x2B143905 }
	TAG_STRUCT(
		damage_decay_struct,
		"damage_decay_struct",
		"damage_decay_struct",
		"s_damage_decay_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_DECAY_STRUCT_ID)
	{
		{ _field_real, "current damage decay delay", "current damage begins to fall after a time delay has passed since last the damage (MAX 4.1, because timer is stored in a char so 127 ticks maximum)", "seconds" },
		{ _field_real, "current damage decay time", "amount of time it would take for 100% current damage to decay to 0", "seconds" },
		{ _field_real, "current damage decay rate", "amount of damage that decays from our current damage every second", "damage/second" },
		{ _field_real, "recent damage decay delay", "recent damage begins to fall after a time delay has passed since last the damage (MAX 4.1, because timer is stored in a char so 127 ticks maximum)", "seconds" },
		{ _field_real, "recent damage decay time", "amount of time it would take for 100% recent damage to decay to 0", "seconds" },
		{ _field_terminator }
	};

	#define DAMAGE_DIRECTION_BLOCK_ID { 0x8E94A96, 0x4DFE4AA9, 0xB50211A8, 0x1BE40FED }
	TAG_STRUCT(
		damage_direction_block,
		"damage_direction_block",
		"damage_direction_block",
		"s_damage_direction_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_DIRECTION_BLOCK_ID)
	{
		{ _field_block, "regions", &damage_region_block_block },
		{ _field_terminator }
	};

	#define DAMAGE_EFFECT_GROUP$2_ID { 0x902C71FE, 0x22D24D90, 0x94283954, 0x36E07393 }
	VERSIONED_TAG_STRUCT(
		damage_effect_group$2,
		"damage_effect",
		"damage_effect_group",
		"s_damage_effect_group$2",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_EFFECT_GROUP$2_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 76 },
		{ _field_tag_reference, "area of effect behavior equipment", "if a reference is here, area of effect damage will attach the equipment to the target", &object_group_reference$6 },
		{ _field_real_bounds, "radius", nullptr, "world units" },
		{ _field_real_fraction, "cutoff scale", nullptr, nullptr, "[0,1]" },
		{ _field_long_flags, "effect flags", &damage_effect_flags },
		FIELD_EXPLANATION("damage", nullptr),
		{ _field_short_enum, "side effect", &damage_side_effects },
		{ _field_short_enum, "category", &damage_categories },
		{ _field_long_enum, "death vocalization", &damage_death_vocalizations },
		{ _field_long_flags, "flags", &damage_flags },
		{ _field_long_flags, "secondary flags", &damagesecondaryflags },
		{ _field_real, "headshot damage multiplier", "ignored if zero or if headshot flag is not set above; \notherwise, makes headshot not instantly lethal, but multiplies damage done to head by this much.  \n2 does 2x damage to head for headshot.  note that head still has different health than body." },
		{ _field_real, "AOE core radius", "if >0 then higher fidelity obstruction collision checks are preformed. This field has no other ramifications.", "world units" },
		{ _field_real, "damage lower bound" },
		{ _field_real_bounds, "damage upper bound" },
		{ _field_struct, "damage falloff function", &scalar_function_named_struct },
		{ _field_angle, "dmg inner cone angle" },
		{ _field_struct, "blah", &damage_outer_cone_angle_struct }, // structure_version:1
		{ _field_real, "active camouflage damage", "how much more visible this damage makes a player who is active camouflaged", nullptr, "[0,1]" },
		{ _field_real, "stun", "amount of stun added to damaged unit", nullptr, "[0,1]" },
		{ _field_real, "maximum stun", "damaged unit's stun will never exceed this amount", nullptr, "[0,1]" },
		{ _field_real, "stun time", "duration of stun due to this damage", "seconds" },
		{ _field_long_integer, "damage stun", "how long we stun recovering current body damage", "ticks" },
		{ _field_real, "instantaneous acceleration", nullptr, nullptr, "[0,+inf]" },
		{ _field_real, "alt instantaneous acceleration", "This field can be used for an alternative acceleration if the corresponding flags are set, e.g. check vehicle->flags.vehicle wants reduced weapon impulse when airborne", nullptr, "[0,+inf]" },
		{ _field_real, "acceleration cap", "set to zero to disable cap" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 4),
		FIELD_EXPLANATION("DEPRECATED - rider damage scales", nullptr),
		{ _field_real, "rider direct damage scale" },
		{ _field_real, "rider maximum transfer damage scale" },
		{ _field_real, "rider minimum transfer damage scale" },
		{ _field_real, "vehicle damage multiplier" },
		{ _field_real_fraction, "soft ping pain screen scale", "The maximum amount to apply the pain screen pose overlay", nullptr, "[0,1]" },
		FIELD_USELESS_PAD("value", 140),
		{ _field_string_id, "general_damage" },
		{ _field_string_id, "specific_damage" },
		{ _field_block, "custom response labels", &custom_damage_response_label_block_block },
		{ _field_real, "AI stun radius", nullptr, "world units" },
		{ _field_real_bounds, "AI stun bounds", nullptr, "(0-1)" },
		{ _field_real, "shake radius" },
		{ _field_real, "EMP radius" },
		{ _field_real, "aoe spike radius" },
		{ _field_real, "aoe spike damage bump" },
		{ _field_real, "shield render effects scale" },
		{ _field_long_integer, "stasis time", "duration of stasis due to this damage, zero disables", "ticks" },
		{ _field_real, "stasis time dilation" },
		{ _field_real, "stasis max biped turning rate" },
		{ _field_real, "stasis gravity multiplier" },
		{ _field_real, "equipment hack time", nullptr, "seconds" },
		FIELD_EXPLANATION("if 'Apply Tree Of Life'", nullptr),
		{ _field_real, "tree_of_life shield regen modifier", "regen velocity of TOL:if non-1.0 this overrides any 'shield recharge rate' trait" },
		{ _field_real, "minimum shield level", "when hit, shield will be reset to this percentage of full strength if it is below", nullptr, "[0, 1]" },
		{ _field_real, "shield stun time", "time after damage applied before shield recharges", "seconds" },
		{ _field_real, "minimum health level", "when hit, health will be reset to this percentage of full health if it is below", nullptr, "[0, 1]" },
		{ _field_real, "health stun time", "time after damage applied before health recharges", "seconds" },
		{ _field_real, "minimum energy level", "like above, TOL reset minimum equipment energy to this", nullptr, "[0, 1]" },
		{ _field_real, "maximum energy level", "cap equipment energy to this", nullptr, "[0, 1]" },
		{ _field_real, "equipment stun time", "time after damage applied before equipment recharges", "seconds" },
		FIELD_EXPLANATION("Modifies TOL logic so that (above) unstun will only happen if (below) minimum stun time has passed", nullptr),
		{ _field_real, "shield minimum stun time", nullptr, "seconds" },
		{ _field_real, "health minimum stun time", nullptr, "seconds" },
		FIELD_EXPLANATION("damage response", nullptr),
		{ _field_tag_reference, "damage response", &damage_response_definition_group_reference$2 },
		FIELD_EXPLANATION("sound", nullptr),
		{ _field_tag_reference, "old melee sound", MAKE_ALT_NAMES("sound"), &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_block, "damage sounds", &damage_effect_sound_block_block },
		FIELD_USELESS_PAD("value", 112),
		FIELD_EXPLANATION("breaking effect", "Controls particle velocities when a damage effect shatters a materal.\n\nAll particles created within \'forward radius\' will be kicked along the\ndamage direction with a speed equivalent to \'forward velocity\' at the\nepicenter of the damage and 0 at the outer radius.  \'Forward exponent\'\nis used to modify the velocity scale.  A low exponent (like 0.5) means that\nparticles between the epicenter and the radius will be kicked out with a speed\ncloser to \'forward velocity\' than if a higher exponent (like 2.0) was used\n\nThe outward fields work in a similar way, except instead of kicking along the\ndamage direction, they get kick away from the damage epicenter."),
		{ _field_real, "forward velocity", nullptr, "world units per second" },
		{ _field_real, "forward radius", nullptr, "world units" },
		{ _field_real, "forward exponent" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "outward velocity", nullptr, "world units per second" },
		{ _field_real, "outward radius", nullptr, "world units" },
		{ _field_real, "outward exponent" },
		FIELD_USELESS_PAD("value", 12),
		
		{ _struct_version_mode_equal, 0, 83 },
		{ _field_real_bounds, "radius", nullptr, "world units" },
		{ _field_real_fraction, "cutoff scale", nullptr, nullptr, "[0,1]" },
		{ _field_long_flags, "flags", &damage_effect_flags },
		{ _field_real, "AI stun radius", nullptr, "world units" },
		{ _field_real_bounds, "AI stun bounds", nullptr, "(0-1)" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_short_enum, "type", &screen_flash_types },
		{ _field_short_enum, "priority", &screen_flash_priorities },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "duration", nullptr, "seconds" },
		{ _field_short_enum, "fade function", &global_reverse_transition_functions_enum },
		FIELD_PAD("CNXLWZ", 2),
		FIELD_USELESS_PAD("value", 8),
		{ _field_real_fraction, "maximum intensity", nullptr, nullptr, "[0,1]" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real_argb_color, "color" },
		{ _field_real_fraction, "frequency", nullptr, nullptr, "[0,1]" },
		{ _field_real, "duration", nullptr, "seconds" },
		{ _field_short_enum, "fade function", &global_reverse_transition_functions_enum },
		FIELD_PAD("VLNPVCE", 2),
		FIELD_USELESS_PAD("value", 8),
		{ _field_real_fraction, "frequency", nullptr, nullptr, "[0,1]" },
		{ _field_real, "duration", nullptr, "seconds" },
		{ _field_short_enum, "fade function", &global_reverse_transition_functions_enum },
		FIELD_PAD("BSZDDL", 2),
		FIELD_USELESS_PAD("value", 8),
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 16),
		{ _field_real, "duration", nullptr, "seconds" },
		{ _field_short_enum, "fade function", &global_reverse_transition_functions_enum },
		FIELD_PAD("INF", 2),
		{ _field_angle, "rotation", nullptr, "degrees" },
		{ _field_real, "pushback", nullptr, "world units" },
		{ _field_real_bounds, "jitter", nullptr, "world units" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 24),
		{ _field_real, "duration", "the effect will last for this duration.", "seconds" },
		{ _field_short_enum, "falloff function", "a function to envelope the effect's magnitude over time", &global_reverse_transition_functions_enum },
		FIELD_PAD("AJPXZ", 2),
		{ _field_real, "random translation", "random translation in all directions", "world units" },
		{ _field_angle, "random rotation", "random rotation in all directions", "degrees" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_short_enum, "wobble function", "a function to perturb the effect's behavior over time", &global_periodic_functions_enum },
		FIELD_PAD("FEB", 2),
		{ _field_real, "wobble function period", nullptr, "seconds" },
		{ _field_real_fraction, "wobble weight", "a value of 0.0 signifies that the wobble function has no effect; a value of 1.0 signifies that the effect will not be felt when the wobble function's value is zero." },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 28),
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		FIELD_USELESS_PAD("value", 112),
		{ _field_real, "forward velocity", nullptr, "world units per second" },
		{ _field_real, "forward radius", nullptr, "world units" },
		{ _field_real, "forward exponent" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "outward velocity", nullptr, "world units per second" },
		{ _field_real, "outward radius", nullptr, "world units" },
		{ _field_real, "outward exponent" },
		FIELD_USELESS_PAD("value", 12),
		FIELD_EXPLANATION("damage", nullptr),
		{ _field_short_enum, "side effect", &damage_side_effects },
		{ _field_short_enum, "category", &damage_categories },
		{ _field_long_flags, "flags", &damage_flags },
		{ _field_real, "AOE core radius", "if this is area of effect damage", "world units" },
		{ _field_real, "damage lower bound" },
		{ _field_real_bounds, "damage upper bound" },
		{ _field_angle, "dmg inner cone angle" },
		{ _field_struct, "blah", &damage_outer_cone_angle_struct }, // structure_version:1
		{ _field_real, "active camouflage damage", "how much more visible this damage makes a player who is active camouflaged", nullptr, "[0,1]" },
		{ _field_real, "stun", "amount of stun added to damaged unit", nullptr, "[0,1]" },
		{ _field_real, "maximum stun", "damaged unit's stun will never exceed this amount", nullptr, "[0,1]" },
		{ _field_real, "stun time", "duration of stun due to this damage", "seconds" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "instantaneous acceleration", nullptr, nullptr, "[0,+inf]" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "value" },
		{ _field_real, "value" },
		{ _field_real, "value" },
		{ _field_real, "vehicle damage multiplier" },
		FIELD_USELESS_PAD("value", 136),
		{ _field_string_id, "general_damage" },
		{ _field_string_id, "specific_damage" },
		{ _field_string_id, "custom damage response" },
		
		{ _field_terminator }
	};

	TAG_REFERENCE(object_group_reference$6, OBJECT_TAG);

	STRINGS(damage_effect_flags)
	{
		"don\'t scale damage by distance",
		"area damage players only#area of effect damage only affects players",
		"affects model targets#distribute the damage amongst the model targets. this is the default behavior for aoe damage, but can be set here for direct damage.",
		"explosive area of effect"
	};
	STRING_LIST(damage_effect_flags, damage_effect_flags_strings, _countof(damage_effect_flags_strings));

	STRINGS(damage_side_effects)
	{
		"none",
		"harmless",
		"lethal to the unsuspecting",
		"emp"
	};
	STRING_LIST(damage_side_effects, damage_side_effects_strings, _countof(damage_side_effects_strings));

	STRINGS(damage_categories)
	{
		"none",
		"falling",
		"bullet",
		"grenade",
		"high explosive",
		"sniper",
		"melee",
		"flame",
		"mounted weapon",
		"vehicle",
		"plasma",
		"needle",
		"shotgun",
		"assassinated"
	};
	STRING_LIST(damage_categories, damage_categories_strings, _countof(damage_categories_strings));

	STRINGS(damage_death_vocalizations)
	{
		"default#uses code to figure out what vocalization to use",
		"dth",
		"dth_fall",
		"dth_mjr",
		"dth_slw",
		"dth_hdsht",
		"dth_slnt",
		"dth_drama",
		"dth_reanimated",
		"thrwn",
		"die_space",
		"die_ass"
	};
	STRING_LIST(damage_death_vocalizations, damage_death_vocalizations_strings, _countof(damage_death_vocalizations_strings));

	STRINGS(damage_flags)
	{
		"does not hurt owner",
		"can cause headshots",
		"ignores headshot obstructions#arms, held weapons, attachments",
		"pings resistant units",
		"does not hurt friends#affects aoe only",
		"does not ping units",
		"detonates explosives",
		"only hurts shields",
		"causes flaming death",
		"skips shields",
		"transfer dmg always uses min",
		"ignore seat scale for dir. dmg",
		"forces hard ping if body dmg{forces hard ping}",
		"forces hard ping always",
		"does not hurt players",
		"enables special death",
		"cannot cause betrayals",
		"uses old EMP behavior",
		"ignores damage resistance",
		"force s_kill on death",
		"cause magic deceleration",
		"aoe skip obstruction test",
		"does not spill over",
		"does not hurt boarders",
		"does not cause biped aoe effect",
		"causes biped \'knockback\'",
		"apply tree of life#as if a tree of life was near \'victim\'",
		"hurt only friends#affects aoe only",
		"causes incineration dissolve",
		"causes incineration dissolve on headshot",
		"does not hurt damage source",
		"damage vehicles only"
	};
	STRING_LIST(damage_flags, damage_flags_strings, _countof(damage_flags_strings));

	STRINGS(damagesecondaryflags)
	{
		"causes incineration dissolve to dead units",
		"force hard ping as attachment feedback#force a hard ping as a notification to the player that the sticky grenade has attached"
	};
	STRING_LIST(damagesecondaryflags, damagesecondaryflags_strings, _countof(damagesecondaryflags_strings));

	TAG_REFERENCE(damage_response_definition_group_reference$2, DAMAGE_RESPONSE_DEFINITION_TAG);

	STRINGS(screen_flash_types)
	{
		"none",
		"lighten",
		"darken",
		"max",
		"min",
		"invert",
		"tint"
	};
	STRING_LIST(screen_flash_types, screen_flash_types_strings, _countof(screen_flash_types_strings));

	STRINGS(screen_flash_priorities)
	{
		"low",
		"medium",
		"high"
	};
	STRING_LIST(screen_flash_priorities, screen_flash_priorities_strings, _countof(screen_flash_priorities_strings));

	STRINGS(global_reverse_transition_functions_enum)
	{
		"linear",
		"late",
		"very late",
		"early",
		"very early",
		"cosine",
		"zero",
		"one"
	};
	STRING_LIST(global_reverse_transition_functions_enum, global_reverse_transition_functions_enum_strings, _countof(global_reverse_transition_functions_enum_strings));

	#define DAMAGE_EFFECT_SOUND_BLOCK_STRUCT_ID { 0x98E29191, 0x66FD4A13, 0xBD131534, 0x68160A3F }
	TAG_STRUCT(
		damage_effect_sound_block_struct,
		"damage_effect_sound_block_struct",
		"damage_effect_sound_block_struct",
		"s_damage_effect_sound_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_EFFECT_SOUND_BLOCK_STRUCT_ID)
	{
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_word_flags, "damage types", &damage_effect_sound_type_flags },
		{ _field_word_flags, "object types", &object_type_enum_definition },
		{ _field_terminator }
	};

	STRINGS(damage_effect_sound_type_flags)
	{
		"none!",
		"lethal instantaneous#headshots and assassinations",
		"lethal#excludes headshots and assassinations",
		"non lethal"
	};
	STRING_LIST(damage_effect_sound_type_flags, damage_effect_sound_type_flags_strings, _countof(damage_effect_sound_type_flags_strings));

	STRINGS(object_type_enum_definition)
	{
		"biped",
		"vehicle",
		"weapon",
		"equipment",
		"terminal",
		"projectile",
		"scenery",
		"machine",
		"control",
		"dispenser",
		"sound_scenery",
		"crate",
		"creature",
		"giant",
		"effect_scenery",
		"spawner"
	};
	STRING_LIST(object_type_enum_definition, object_type_enum_definition_strings, _countof(object_type_enum_definition_strings));

	#define DAMAGE_GLOBALS_BLOCK_ID { 0x2B7CE12A, 0xC9FD4184, 0xA5B5C911, 0x6D515D0A }
	TAG_STRUCT(
		damage_globals_block,
		"damage_globals_block",
		"damage_globals_block",
		"s_damage_globals_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_GLOBALS_BLOCK_ID)
	{
		{ _field_tag_reference, "falling damage", &damage_effect_group_reference },
		{ _field_tag_reference, "jumping damage", &damage_effect_group_reference },
		{ _field_tag_reference, "soft landing damage", &damage_effect_group_reference },
		{ _field_tag_reference, "hard landing damage", &damage_effect_group_reference },
		{ _field_tag_reference, "hs damage", &damage_effect_group_reference },
		{ _field_tag_reference, "hs fire damage", &damage_effect_group_reference },
		{ _field_real, "terminal velocity", "you die if you fall faster than this (non-multiplayer only)", "wu/s" },
		{ _field_tag_reference, "terminal velocity damage", MAKE_ALT_NAMES("distance damage"), &damage_effect_group_reference },
		{ _field_tag_reference, "default damage response", "fall back if none is specified in damage effect tags", MAKE_ALT_NAMES("damage response"), &damage_response_definition_group_reference$2 },
		{ _field_tag_reference, "friendly fire damage response", "anytime your teammate shoots you", &damage_response_definition_group_reference$2 },
		{ _field_real, "player shield spillover", "the minimum amount of shield vitality needed to prevent spillover from damage types that do not spillover." },
		FIELD_GROUP_BEGIN("damage decay"),
		{ _field_struct, "damage decay props", &damage_decay_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("AI damage decay"),
		{ _field_struct, "ai damage decay props", &damage_decay_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("shield impact decay"),
		{ _field_struct, "shield impact decay props", &damage_decay_struct },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define DAMAGE_GROUP_BLOCK_ID { 0x34945DAA, 0x3110409D, 0xA4F3330D, 0x4B1BFD04 }
	TAG_STRUCT(
		damage_group_block,
		"damage_group_block",
		"damage_group_block",
		"s_damage_group_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_GROUP_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "armor modifiers", &armor_modifier_block_block },
		{ _field_terminator }
	};

	#define DAMAGE_OUTER_CONE_ANGLE_STRUCT_ID { 0x728A16DC, 0x5EF1403B, 0x873B7F44, 0xC741A9F2 }
	VERSIONED_TAG_STRUCT(
		damage_outer_cone_angle_struct,
		"damage_outer_cone_angle_struct",
		"damage_outer_cone_angle_struct",
		"s_damage_outer_cone_angle_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_OUTER_CONE_ANGLE_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_angle, "dmg outer cone angle" },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	#define DAMAGE_REGION_BLOCK_ID { 0xC4A06F84, 0x33324424, 0x85ABA033, 0x78C5D41C }
	TAG_STRUCT(
		damage_region_block,
		"damage_region_block",
		"damage_region_block",
		"s_damage_region_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_REGION_BLOCK_ID)
	{
		{ _field_struct, "animation", &animation_index_struct },
		{ _field_terminator }
	};

	#define DAMAGE_RESPONSE_CLASS_BLOCK_ID { 0x4B0239EB, 0xE7E44E9F, 0x9A3C8635, 0xA660F69B }
	TAG_STRUCT(
		damage_response_class_block,
		"damage_response_class_block",
		"damage_response_class_block",
		"s_damage_response_class_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_RESPONSE_CLASS_BLOCK_ID)
	{
		{ _field_short_enum, "type", &damage_response_class_type_enum },
		{ _field_word_flags, "flags", &damage_response_class_flags },
		FIELD_EXPLANATION("directional flash", nullptr),
		{ _field_struct, "directional flash", &damage_response_directional_flash_struct },
		FIELD_EXPLANATION("motion sensor ping", "WARNING \'motion sensor ping\' section no longer functions post CHUD-2-CUI switchover!"),
		{ _field_struct, "motion sensor ping", &damage_response_motion_sensor_ping },
		FIELD_EXPLANATION("rumble", nullptr),
		{ _field_tag_reference, "rumble", MAKE_ALT_NAMES("rumble data"), &rumble_group_reference },
		FIELD_EXPLANATION("camera shake and impulse data", nullptr),
		{ _field_tag_reference, "camera shake", MAKE_ALT_NAMES("camera shake data"), &camera_shake_group_reference },
		{ _field_tag_reference, "camera shake zoomed", "falls back on camerashake if untuned", MAKE_ALT_NAMES("camera shake data"), &camera_shake_group_reference },
		FIELD_EXPLANATION("simulated input", nullptr),
		{ _field_tag_reference, "simulated_input", &simulated_input_group_reference },
		{ _field_tag_reference, "simulated_input zoomed ", "falls back on simulated input if untuned", &simulated_input_group_reference },
		FIELD_EXPLANATION("global sound effect", nullptr),
		{ _field_block, "global sound effect", &damage_response_global_sound_effect_block_block },
		{ _field_terminator }
	};

	STRINGS(damage_response_class_type_enum)
	{
		"shielded",
		"unshielded",
		"all"
	};
	STRING_LIST(damage_response_class_type_enum, damage_response_class_type_enum_strings, _countof(damage_response_class_type_enum_strings));

	STRINGS(damage_response_class_flags)
	{
		"ignore on no damage",
		"suppress directional damage flashes",
		"suppress directional damage arrows",
		"only when zoomed#if target is zoomed",
		"sound effect only applied when scale is full"
	};
	STRING_LIST(damage_response_class_flags, damage_response_class_flags_strings, _countof(damage_response_class_flags_strings));

	TAG_REFERENCE(rumble_group_reference, RUMBLE_TAG);

	TAG_REFERENCE(camera_shake_group_reference, CAMERA_SHAKE_TAG);

	TAG_REFERENCE(simulated_input_group_reference, SIMULATED_INPUT_TAG);

	#define DAMAGE_RESPONSE_DEFINITION_STRUCT_DEFINITION_ID { 0x94C849C2, 0x81F94875, 0x8B4DD2B0, 0x54CD47EF }
	TAG_STRUCT(
		damage_response_definition_struct_definition,
		"damage_response_definition_struct_definition",
		"damage_response_definition_struct_definition",
		"s_damage_response_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_RESPONSE_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "classes", &damage_response_class_block_block },
		{ _field_block, "area control", &area_control_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_terminator }
	};

	#define DAMAGE_RESPONSE_DIRECTIONAL_FLASH_STRUCT_ID { 0xD18EB7B1, 0xE169416F, 0xB5CA99B6, 0xC316A290 }
	TAG_STRUCT(
		damage_response_directional_flash_struct,
		"damage_response_directional_flash_struct",
		"damage_response_directional_flash_struct",
		"s_damage_response_directional_flash_struct",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_RESPONSE_DIRECTIONAL_FLASH_STRUCT_ID)
	{
		{ _field_real, "indicator duration" },
		{ _field_real, "flash duration ", MAKE_ALT_NAMES("duration") },
		{ _field_short_enum, "fade function", &global_reverse_transition_functions_enum },
		FIELD_PAD("ZASSFACE", 2),
		{ _field_real, "center size" },
		{ _field_real, "offscreen size", MAKE_ALT_NAMES("size") },
		{ _field_real, "center alpha" },
		{ _field_real, "offscreen alpha" },
		{ _field_real, "inner alpha", MAKE_ALT_NAMES("inner scale") },
		{ _field_real, "outer alpha", MAKE_ALT_NAMES("outer scale") },
		{ _field_real_argb_color, "flash color" },
		{ _field_real_argb_color, "arrow color" },
		{ _field_terminator }
	};

	#define DAMAGE_RESPONSE_GLOBAL_SOUND_EFFECT_BLOCK_STRUCT_ID { 0xD8AF888D, 0x5DA54554, 0x80FA8203, 0xC96EED16 }
	TAG_STRUCT(
		damage_response_global_sound_effect_block_struct,
		"damage_response_global_sound_effect_block_struct",
		"damage_response_global_sound_effect_block_struct",
		"s_damage_response_global_sound_effect_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_RESPONSE_GLOBAL_SOUND_EFFECT_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "effect name" },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "scale => duration", nullptr, "seconds", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define DAMAGE_RESPONSE_MOTION_SENSOR_PING_ID { 0x3D5CCA56, 0xD294C20, 0x8FA7FDB2, 0x12D1CBE }
	TAG_STRUCT(
		damage_response_motion_sensor_ping,
		"damage_response_motion_sensor_ping",
		"damage_response_motion_sensor_ping",
		"s_damage_response_motion_sensor_ping",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_RESPONSE_MOTION_SENSOR_PING_ID)
	{
		{ _field_short_integer, "ping duration", nullptr, "ticks" },
		{ _field_short_integer, "ping scale" },
		{ _field_terminator }
	};

	#define DAMAGE_RESPONSE_REGION_TRANSITION_BLOCK_ID { 0xAB37ECDD, 0x2463448A, 0xA416FEB5, 0x6A0B2580 }
	TAG_STRUCT(
		damage_response_region_transition_block,
		"damage_response_region_transition_block",
		"damage_response_region_transition_block",
		"s_damage_response_region_transition_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_RESPONSE_REGION_TRANSITION_BLOCK_ID)
	{
		{ _field_string_id, "region" },
		{ _field_short_enum, "new state", &model_state_enum_definition },
		{ _field_short_integer, "runtime region index" },
		{ _field_terminator }
	};

	STRINGS(model_state_enum_definition)
	{
		"default",
		"minor damage",
		"medium damage",
		"major damage",
		"destroyed"
	};
	STRING_LIST(model_state_enum_definition, model_state_enum_definition_strings, _countof(model_state_enum_definition_strings));

	#define DAMAGE_SEAT_INFO_BLOCK_ID { 0xF8A6BCA3, 0xCAA541C0, 0xA3EBD6F5, 0xFED5C84D }
	TAG_STRUCT(
		damage_seat_info_block,
		"damage_seat_info_block",
		"damage_seat_info_block",
		"s_damage_seat_info_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_SEAT_INFO_BLOCK_ID)
	{
		{ _field_string_id, "seat label" },
		{ _field_real_fraction, "direct damage scale", "0==no damage, 1==full damage" },
		{ _field_real, "damage transfer fall-off radius" },
		{ _field_real, "maximum transfer damage scale" },
		{ _field_real, "minimum transfer damage scale" },
		{ _field_block, "region-specific-damage", &damage_seat_region_setting_block_block },
		{ _field_terminator }
	};

	#define DAMAGE_SEAT_REGION_SETTING_BLOCK_ID { 0x11C1834D, 0xC1A14C1E, 0x9BB6EFBD, 0x8A649453 }
	TAG_STRUCT(
		damage_seat_region_setting_block,
		"damage_seat_region_setting_block",
		"damage_seat_region_setting_block",
		"s_damage_seat_region_setting_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_SEAT_REGION_SETTING_BLOCK_ID)
	{
		FIELD_EXPLANATION("region-state-specific-damage", "for fields below, 0.0==inherit from damage seat"),
		{ _field_string_id, "damage region name" },
		{ _field_short_integer, "runtime damage region index" },
		FIELD_PAD("EOQ", 2),
		{ _field_real, "direct damage scale (minor)" },
		{ _field_real, "Max. transfer scale (minor)" },
		{ _field_real, "min. transfer scale (minor)" },
		{ _field_real, "direct damage scale (medium)" },
		{ _field_real, "Max. transfer scale (medium)" },
		{ _field_real, "min. transfer scale (medium)" },
		{ _field_real, "direct damage scale (major)" },
		{ _field_real, "Max. transfer scale (major)" },
		{ _field_real, "min. transfer scale (major)" },
		{ _field_terminator }
	};

	#define DAMAGE_SECTION_RECHARGE_SPEED_CURVE_BLOCK_ID { 0x93ADFC14, 0xDC9D498C, 0xAF3BA884, 0x17FF6AD8 }
	TAG_STRUCT(
		damage_section_recharge_speed_curve_block,
		"damage_section_recharge_speed_curve_block",
		"damage_section_recharge_speed_curve_block",
		"s_damage_section_recharge_speed_curve_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_SECTION_RECHARGE_SPEED_CURVE_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define DAMAGE_SECTION_RENDERING_PARAMTERS_ID { 0x54A5FE0B, 0xE53A4277, 0x95555319, 0x9F924131 }
	TAG_STRUCT(
		damage_section_rendering_paramters,
		"damage_section_rendering_paramters",
		"damage_section_rendering_paramters",
		"s_damage_section_rendering_paramters",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_SECTION_RENDERING_PARAMTERS_ID)
	{
		{ _field_tag_reference, "3rd person impact parameters", &shield_impact_group_reference },
		{ _field_tag_reference, "1st person impact parameters", &shield_impact_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(shield_impact_group_reference, SHIELD_IMPACT_TAG);

	#define DAMAGE_SECTION_SEGMENTED_RECHARGE_FRACTION_ID { 0x974937E7, 0x69D54EC5, 0xB34261A9, 0x53C817CE }
	TAG_STRUCT(
		damage_section_segmented_recharge_fraction,
		"damage_section_segmented_recharge_fraction",
		"damage_section_segmented_recharge_fraction",
		"s_damage_section_segmented_recharge_fraction",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_SECTION_SEGMENTED_RECHARGE_FRACTION_ID)
	{
		{ _field_real_fraction, "vitality percentage", "recharge will stop once this percentage of vitality is reached.", nullptr, "[0.1]" },
		{ _field_terminator }
	};

	#define DAMAGE_SHIELD_PARAMETERS_STRUCT_ID { 0xD30C88AC, 0xF030462C, 0x9536E894, 0xA6F752C1 }
	TAG_STRUCT(
		damage_shield_parameters_struct,
		"damage_shield_parameters_struct",
		"damage_shield_parameters_struct",
		"s_damage_shield_parameters_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_SHIELD_PARAMETERS_STRUCT_ID)
	{
		{ _field_real, "maximum shield vitality", "the default initial and maximum shield vitality of this object" },
		{ _field_string_id, "global shield material name" },
		{ _field_real, "minimum stun damage", "the minimum damage required to stun this object's shields" },
		{ _field_real, "stun time", "the length of time the shields stay stunned (do not recharge) after taking damage", "seconds" },
		{ _field_real, "recharge time", "the length of time it would take for the shields to fully recharge after being completely depleted", "seconds" },
		{ _field_real, "shield overcharge fraction", "fraction to which shields will automatically overcharge, values <= 1.0 are ignored" },
		{ _field_real, "shield overcharge time", "time it takes to reach full \"shield overcharge fraction\"" },
		{ _field_real, "shield damaged threshold" },
		{ _field_tag_reference, "shield damaged effect", &effect_group_reference },
		{ _field_tag_reference, "shield depleted effect", &effect_group_reference },
		{ _field_tag_reference, "shield recharging effect", &effect_group_reference },
		{ _field_terminator }
	};

	#define DAMAGE_TRANSFER_BLOCK_ID { 0xD77922D6, 0x7BE043FA, 0xB5E62CE4, 0x60490EB9 }
	TAG_STRUCT(
		damage_transfer_block,
		"damage_transfer_block",
		"damage_transfer_block",
		"s_damage_transfer_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DAMAGE_TRANSFER_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &damage_transfer_flags_definition },
		{ _field_real, "transfer amount" },
		{ _field_short_enum, "transfer function", &damage_transfer_function_enum_definition },
		{ _field_short_block_index, "damage section", &new_global_damage_section_block_block },
		{ _field_string_id, "seat label" },
		{ _field_terminator }
	};

	STRINGS(damage_transfer_flags_definition)
	{
		"transfer damage to damage section",
		"transfer damage to parent",
		"transfer damage to children",
		"transfer damage to seats",
		"transfer direct damage",
		"transfer AOE exposed damage",
		"transfer AOE obstructed damage"
	};
	STRING_LIST(damage_transfer_flags_definition, damage_transfer_flags_definition_strings, _countof(damage_transfer_flags_definition_strings));

	STRINGS(damage_transfer_function_enum_definition)
	{
		"percent",
		"points",
		"ceiling"
	};
	STRING_LIST(damage_transfer_function_enum_definition, damage_transfer_function_enum_definition_strings, _countof(damage_transfer_function_enum_definition_strings));

	#define DATA_HASH_DEFINITION_STRUCT_DEFINITION_ID { 0x6A3A433A, 0xA2E2464E, 0xBD38F0AE, 0xCC98FB3 }
	TAG_STRUCT(
		data_hash_definition_struct_definition,
		"data_hash_definition",
		"data_hash_definition",
		"s_data_hash_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DATA_HASH_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_byte_integer, "hash byte" },
		{ _field_terminator }
	};

	#define DEATH_PROGRAM_DAMAGE_REPORTING_BLOCK_ID { 0x2411CA09, 0x6F034AF6, 0x906679AF, 0x12D9482 }
	TAG_STRUCT(
		death_program_damage_reporting_block,
		"death_program_damage_reporting_block",
		"death_program_damage_reporting_block",
		"s_death_program_damage_reporting_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEATH_PROGRAM_DAMAGE_REPORTING_BLOCK_ID)
	{
		{ _field_long_enum, "damage type", &global_damage_reporting_enum_definition },
		{ _field_block, "velocity", &death_program_velocity_gate_block_block },
		{ _field_terminator }
	};

	#define DEATH_PROGRAM_SELECTOR_STRUCT_DEFINITION_ID { 0x4017D7F3, 0x78A848E8, 0x90B37B9F, 0x63AE0A5B }
	TAG_STRUCT(
		death_program_selector_struct_definition,
		"death_program_selector_struct_definition",
		"death_program_selector_struct_definition",
		"s_death_program_selector_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEATH_PROGRAM_SELECTOR_STRUCT_DEFINITION_ID)
	{
		FIELD_GROUP_BEGIN("Explanation"),
		FIELD_EXPLANATION("Death Program Selection", "There are 3 levels of filtering for this.  Certain combinations of the first two levels are either impossible or redundant.  This is because they come from different places in the damage code. I will try to make that clearer here:\n\nThe first level of filtering is a special damage type (none, headshot, melee, collision).  Previously, this was the only data that was used to determine if a dead body ragdolled immediately or not.  These filters should be pretty self-explanatory.\n\nThe second level of filtering is the damage reporting info.  This includes every weapon as well as general categories like melee and explosions.  You should probably only use this to filter for specific weapons and ignore those categories because they are somewhat redundant with the first level of filtering.\n\nThe last level of filtering is a velocity gate.  If the biped being killed is travelling faster than this value, then the specified death program will be used.  When there is more than one velocity gate, the largest one will be used.\n\nThe output of the filtering system (which is part of the last level of filtering) is a death program and a scale value.  The death programs are (animate then ragdoll, headshot ragdoll program, melee ragdoll program, default ragdoll program).  The scale value only affects the ragdoll programs, not the animation.  If the scale value is 0, then the object�s default acceleration scale will be used.\n\nHeadshot ragdoll program: accelerates the body upwards and torques it back in the direction the damage came from.  Scales the effect based on the dying biped�s speed and direction relative to damage\n\nMelee ragdoll program: accelerates ragdoll nodes in the direction of damage, applying more acceleration to the bodies closer to the point of impact.  Also torques the body from the point of impact.\n\nDefault ragdoll program: similar to melee program, but torque is different depending on how far from the center of mass the killing blow came from.\n\nThe headshot program is good for, well, headshots; the melee program is good for melees and collisions and possibly shotguns; and the default program is good for mostly everything else.\n\nInheritance:\n\nCurrently there is only one level of inheritance for each of the first two filters.  If the type of death was collision but none of the collision filters match, then it will search through \"none\" as well.  For the second level, if there is a filter for the weapon type but the velocity gate didn�t match, it will search though \"the guardians\" as well.  The second filtering level looks like it has a lot of opportunity for inheritance relationships, but I didn�t want to implement any without getting some input on what those should be."),
		FIELD_GROUP_END(),
		{ _field_tag_reference, "parent", &death_program_selector_group_reference },
		{ _field_block, "special type", &death_program_special_block_block },
		{ _field_terminator }
	};

	#define DEATH_PROGRAM_SPECIAL_BLOCK_ID { 0x7A79880, 0x13514724, 0xBF5DA9E5, 0x8C25AAA7 }
	TAG_STRUCT(
		death_program_special_block,
		"death_program_special_block",
		"death_program_special_block",
		"s_death_program_special_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEATH_PROGRAM_SPECIAL_BLOCK_ID)
	{
		{ _field_long_enum, "special type", &object_damage_aftermath_special_damage_type_enum },
		{ _field_block, "damage type", &death_program_damage_reporting_block_block },
		{ _field_terminator }
	};

	STRINGS(object_damage_aftermath_special_damage_type_enum)
	{
		"none",
		"headshot",
		"melee",
		"collision",
		"assassination"
	};
	STRING_LIST(object_damage_aftermath_special_damage_type_enum, object_damage_aftermath_special_damage_type_enum_strings, _countof(object_damage_aftermath_special_damage_type_enum_strings));

	#define DEATH_PROGRAM_VELOCITY_GATE_BLOCK_ID { 0x500A180D, 0x44EBB, 0xB940AA79, 0x9EBAFD18 }
	TAG_STRUCT(
		death_program_velocity_gate_block,
		"death_program_velocity_gate_block",
		"death_program_velocity_gate_block",
		"s_death_program_velocity_gate_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEATH_PROGRAM_VELOCITY_GATE_BLOCK_ID)
	{
		{ _field_real, "minimum velocity", "this death program will be selected if the biped's velocity is above this number", "wu/s", FIELD_FLAG_INDEX },
		{ _field_long_enum, "death program", &death_program_result_enum },
		{ _field_real, "death program scale", "input to the death program to scale the result (only affects ragdolls)" },
		{ _field_string_id, "death animation stance", "Override stance that contains the death animations for this gait speed when using animate then ragdoll option." },
		{ _field_terminator }
	};

	STRINGS(death_program_result_enum)
	{
		"animate then ragdoll",
		"default ragdoll program",
		"headshot ragdoll program",
		"melee ragdoll program"
	};
	STRING_LIST(death_program_result_enum, death_program_result_enum_strings, _countof(death_program_result_enum_strings));

	#define DEBUG_CACHE_FILE_ZONE_MANIFEST_STRUCT_ID { 0x4E4AC3CD, 0x598D4EFC, 0xAD44DA5D, 0xEA3DA8F0 }
	TAG_STRUCT(
		debug_cache_file_zone_manifest_struct,
		"debug_cache_file_zone_manifest_struct",
		"debug_cache_file_zone_manifest_struct",
		"s_debug_cache_file_zone_manifest_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEBUG_CACHE_FILE_ZONE_MANIFEST_STRUCT_ID)
	{
		{ _field_struct, "cache zone manifest", &cache_file_tag_zone_manifest_struct },
		{ _field_long_integer, "disk size" },
		{ _field_long_integer, "unused size" },
		{ _field_tag_reference, "owner tag", &_reference$6 },
		{ _field_terminator }
	};

	#define DECAL_DEFINITION_BLOCK_ID { 0x5E5AE1B, 0x33A44FBF, 0x83F60D66, 0xAC15FDB8 }
	TAG_STRUCT(
		decal_definition_block,
		"decal_definition_block",
		"decal_definition_block",
		"s_decal_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DECAL_DEFINITION_BLOCK_ID)
	{
		{ _field_string_id, "decal name" },
		{ _field_long_flags, "flags", &decal_flags },
		FIELD_CUSTOM("material", _tag_field_custom_type_tag_group_template),
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "actual material?", &material_struct },
		FIELD_HIDE_END(),
		{ _field_real_bounds, "radius", nullptr, "world units" },
		{ _field_real_bounds, "decay time", nullptr, "seconds", FIELD_FLAG_UNKNOWN0 },
		{ _field_real_bounds, "lifespan", nullptr, "seconds", FIELD_FLAG_UNKNOWN0 },
		{ _field_real, "clamp angle", "Projections at greater than this angle will be clamped to this angle", "degrees" },
		{ _field_real, "cull angle", "Projections at greater than this angle will not be drawn", "degrees" },
		{ _field_real, "depth bias" },
		FIELD_GROUP_BEGIN("Decal Strip"),
		{ _field_real, "strip U-coordinate tile length" },
		{ _field_real, "strip max profile distance" },
		FIELD_GROUP_END(),
		{ _field_real, "runtime bitmap aspect" },
		{ _field_terminator }
	};

	STRINGS(decal_flags)
	{
		"render in transparents pass"
	};
	STRING_LIST(decal_flags, decal_flags_strings, _countof(decal_flags_strings));

	#define DECAL_SYSTEM_STRUCT_DEFINITION_ID { 0x570BB931, 0x8CB3411C, 0xB0466FBE, 0x7FE4EEE5 }
	TAG_STRUCT(
		decal_system_struct_definition,
		"decal_system_struct_definition",
		"decal_system_struct_definition",
		"s_decal_system_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DECAL_SYSTEM_STRUCT_DEFINITION_ID)
	{
		{ _field_long_flags, "flags", &decal_system_flags },
		{ _field_long_integer, "ring buffer size (in triangles)", "bigger sizes keep more decals around but use much more memory" },
		{ _field_long_integer, "ring buffer size single player (in triangles)", "above entry is for MP -- SP can be different" },
		{ _field_real, "material shader fade time", "material shader lifetime is modulated from 1 to 0 over this time" },
		{ _field_real_point_2d, "decal scale override", "NOTE - If set to non-zero, this will override manual scaling in Sapien and smash it with these values" },
		FIELD_EXPLANATION("Decal bucket sharing", "For the index bounds below, if non-zero, sprites will be chosen between low and high bounds, inclusive.\nUse this to keep multiple different decals in the same bucket.\nIf multiple decal systems use the same bitmap set and the same material definition, they will be combined at runtime and share their vertex bucket.\nThis is more efficient in memory and more performant to render."),
		{ _field_short_integer_bounds, "random sprite index bounds", "if zero, will use random sprite" },
		{ _field_block, "decals", &decal_definition_block_block },
		{ _field_real, "runtime max radius" },
		{ _field_terminator }
	};

	STRINGS(decal_system_flags)
	{
		"random rotation",
		"force planar",
		"is strip"
	};
	STRING_LIST(decal_system_flags, decal_system_flags_strings, _countof(decal_system_flags_strings));

	#define DECORATOR_BRUSH_STRUCT_ID { 0xC3DB84FA, 0xC247443B, 0x9093336D, 0xF7E811A2 }
	TAG_STRUCT(
		decorator_brush_struct,
		"decorator_brush_struct",
		"decorator_brush_struct",
		"s_decorator_brush_struct",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DECORATOR_BRUSH_STRUCT_ID)
	{
		{ _field_long_enum, "left button brush", &decorator_left_brush_type_enum_definition, _tag_field_attributed_definition_update_layout_field },
		{ _field_long_enum, "middle button brush", &decorator_right_brush_type_enum_definition, _tag_field_attributed_definition_update_layout_field },
		{ _field_long_enum, "control+left button brush", &decorator_left_brush_type_enum_definition, _tag_field_attributed_definition_update_layout_field },
		{ _field_long_enum, "control+middle button brush", &decorator_right_brush_type_enum_definition, _tag_field_attributed_definition_update_layout_field },
		{ _field_long_enum, "alt+left button brush", &decorator_left_brush_type_enum_definition, _tag_field_attributed_definition_update_layout_field },
		{ _field_long_enum, "alt+middle button brush", &decorator_right_brush_type_enum_definition, _tag_field_attributed_definition_update_layout_field },
		{ _field_real, "outer radius" },
		{ _field_real, "feather percent" },
		{ _field_byte_flags, "reapply flags", &decorator_brush_reapply_flags_definition },
		{ _field_byte_flags, "render flags", &decorator_brush_render_flags_definition },
		{ _field_byte_flags, "action flags", &decorator_brush_action_flags_definition },
		{ _field_char_enum, "brush shape", &decorator_brush_shape_enum_definition },
		{ _field_long_block_index, "current palette", &decorator_palette_block },
		{ _field_long_block_index, "current set", &decorator_scenario_set_block_block },
		{ _field_long_integer, "current type", _field_id_decorator_brush_unknown },
		{ _field_real, "paint rate", nullptr, nullptr, "[0 - 1]" },
		{ _field_real_rgb_color, "paint color" },
		{ _field_real, "move distance", "drop height for drop to ground" },
		{ _field_real, "angle snap interval", "rotate brushes will snap to intervals of this" },
		{ _field_real, "Editor cull distance", "decorators will not draw beyond this distance from the camera" },
		FIELD_EXPLANATION("KEYS", "[] \t brush size\n-= \t brush feathering\n0-9 \t brush opacity\nSHIFT+0-9\t select palette\nSHIFT\t while painting will reverse the operation\n"),
		{ _field_terminator }
	};

	STRINGS(decorator_left_brush_type_enum_definition)
	{
		"fill add",
		"airbrush add",
		"airbrush color",
		"airbrush erase",
		"density smooth",
		"precision place",
		"precision delete",
		"scale",
		"scale additive",
		"scale subtractive",
		"rotate random",
		"rotate normal",
		"rotate local",
		"eraser",
		"reapply type settings",
		"raise to ground (use reapply flags)",
		"drop to ground (use reapply flags)",
		"comb",
		"thin"
	};
	STRING_LIST(decorator_left_brush_type_enum_definition, decorator_left_brush_type_enum_definition_strings, _countof(decorator_left_brush_type_enum_definition_strings));

	STRINGS(decorator_right_brush_type_enum_definition)
	{
		"fill add",
		"airbrush add",
		"airbrush color",
		"airbrush erase",
		"density smooth",
		"precision place",
		"precision delete",
		"scale",
		"scale additive",
		"scale subtractive",
		"rotate random",
		"rotate normal",
		"rotate local",
		"eraser",
		"reapply type settings",
		"raise to ground (use reapply flags)",
		"drop to ground (use reapply flags)",
		"comb",
		"thin"
	};
	STRING_LIST(decorator_right_brush_type_enum_definition, decorator_right_brush_type_enum_definition_strings, _countof(decorator_right_brush_type_enum_definition_strings));

	STRINGS(decorator_brush_reapply_flags_definition)
	{
		"reapply hover",
		"reapply orientation",
		"reapply scale",
		"reapply motion",
		"reapply color",
		"reapply ground tint",
		"reapply all decorators"
	};
	STRING_LIST(decorator_brush_reapply_flags_definition, decorator_brush_reapply_flags_definition_strings, _countof(decorator_brush_reapply_flags_definition_strings));

	STRINGS(decorator_brush_render_flags_definition)
	{
		"render preview",
		"render in radius only",
		"render selected only",
		"dont render lines"
	};
	STRING_LIST(decorator_brush_render_flags_definition, decorator_brush_render_flags_definition_strings, _countof(decorator_brush_render_flags_definition_strings));

	STRINGS(decorator_brush_action_flags_definition)
	{
		"clamp scale",
		"enforce minimum distance",
		"select all decorator sets",
		"use global up",
		"constrain to a single channel"
	};
	STRING_LIST(decorator_brush_action_flags_definition, decorator_brush_action_flags_definition_strings, _countof(decorator_brush_action_flags_definition_strings));

	STRINGS(decorator_brush_shape_enum_definition)
	{
		"flattened sphere",
		"spherical",
		"tall sphere",
		"floating sphere"
	};
	STRING_LIST(decorator_brush_shape_enum_definition, decorator_brush_shape_enum_definition_strings, _countof(decorator_brush_shape_enum_definition_strings));

	#define DECORATOR_PALETTE_ID { 0xD416B945, 0x6A6045D6, 0xA46B060A, 0x6D084231 }
	TAG_STRUCT(
		decorator_palette,
		"decorator_palette",
		"decorator_palette",
		"s_decorator_palette",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DECORATOR_PALETTE_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "decorator set 0", &decorator_scenario_set_block_block },
		{ _field_word_integer, "decorator weight 0" },
		{ _field_short_block_index, "decorator set 1", &decorator_scenario_set_block_block },
		{ _field_word_integer, "decorator weight 1" },
		{ _field_short_block_index, "decorator set 2", &decorator_scenario_set_block_block },
		{ _field_word_integer, "decorator weight 2" },
		{ _field_short_block_index, "decorator set 3", &decorator_scenario_set_block_block },
		{ _field_word_integer, "decorator weight 3" },
		{ _field_short_block_index, "decorator set 4", &decorator_scenario_set_block_block },
		{ _field_word_integer, "decorator weight 4" },
		{ _field_short_block_index, "decorator set 5", &decorator_scenario_set_block_block },
		{ _field_word_integer, "decorator weight 5" },
		{ _field_short_block_index, "decorator set 6", &decorator_scenario_set_block_block },
		{ _field_word_integer, "decorator weight 6" },
		{ _field_short_block_index, "decorator set 7", &decorator_scenario_set_block_block },
		{ _field_word_integer, "decorator weight 7" },
		{ _field_terminator }
	};

	#define DECORATOR_RUNTIME_CLUSTER_BLOCK_ID { 0xE2543A30, 0xA9E742B9, 0x8F489AF7, 0xC283783F }
	TAG_STRUCT(
		decorator_runtime_cluster_block,
		"decorator_runtime_cluster_block",
		"decorator_runtime_cluster_block",
		"s_decorator_runtime_cluster_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DECORATOR_RUNTIME_CLUSTER_BLOCK_ID)
	{
		{ _field_word_integer, "decorator placement count" },
		{ _field_byte_integer, "decorator set index" },
		{ _field_byte_integer, "decorator instance buffer index" },
		{ _field_long_integer, "decorator instance buffer offset" },
		{ _field_real_vector_3d, "position bounds min" },
		{ _field_real, "bounding sphere radius" },
		{ _field_real_vector_3d, "position bounds size" },
		{ _field_real_vector_3d, "bounding sphere center" },
		{ _field_terminator }
	};

	#define DECORATOR_SCENARIO_SET_BLOCK_ID { 0x40576308, 0x4FC747DD, 0xAED99352, 0xBE229502 }
	TAG_STRUCT(
		decorator_scenario_set_block,
		"decorator_scenario_set_block",
		"decorator_scenario_set_block",
		"s_decorator_scenario_set_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DECORATOR_SCENARIO_SET_BLOCK_ID)
	{
		{ _field_tag_reference, "decorator set", &decorator_set_group_reference },
		{ _field_block, "placements", &global_decorator_placement_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(decorator_set_group_reference, DECORATOR_SET_TAG);

	#define DECORATOR_SET_BLOCK_ID { 0xAF008F9B, 0x6F9E4D28, 0xAD976280, 0x56A47AD }
	TAG_STRUCT(
		decorator_set_block,
		"decorator_set_block",
		"decorator_set_block",
		"s_decorator_set_block",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DECORATOR_SET_BLOCK_ID)
	{
		FIELD_CUSTOM("link to render model", _tag_field_custom_type_tool_command),
		FIELD_EXPLANATION("Render models", nullptr),
		{ _field_tag_reference, "Base", MAKE_ALT_NAMES("render model"), FIELD_FLAG_READ_ONLY, &render_model_group_reference },
		{ _field_tag_reference, "Lod2", MAKE_ALT_NAMES("render model_lod1"), FIELD_FLAG_READ_ONLY, &render_model_group_reference },
		{ _field_tag_reference, "Lod3", MAKE_ALT_NAMES("render model_lod2"), FIELD_FLAG_READ_ONLY, &render_model_group_reference },
		{ _field_tag_reference, "Lod4", MAKE_ALT_NAMES("render model_lod3"), FIELD_FLAG_READ_ONLY, &render_model_group_reference },
		{ _field_block, "render model instance names", &decorator_set_instance_name_block_block },
		{ _field_long_integer, "render model instance name valid count" },
		{ _field_tag_reference, "texture", &bitmap_group_reference$8 },
		FIELD_EXPLANATION("RENDERING", "\n"),
		{ _field_byte_flags, "render flags", &decorator_set_render_flags_definition },
		{ _field_char_enum, "render shader", &decorator_set_render_shader_enum_definition },
		{ _field_char_enum, "light sampling pattern", &decorator_set_lighting_sample_pattern_enum_definition },
		{ _field_byte_integer, "version" },
		{ _field_real, "translucency A", "postprocessed value", "dont touch" },
		{ _field_real, "translucency B", "postprocessed value", "dont touch" },
		{ _field_real, "translucency C", "postprocessed value", "dont touch" },
		{ _field_real, "translucency", "how translucent the material is (0 = opaque, 1 = both sides same intensity), only affects dynamic lights", nullptr, "[0..1]" },
		{ _field_real, "wavelength X", "direction and speed of wave through the world", "world units" },
		{ _field_real, "wavelength Y", "direction and speed of wave through the world", "world units" },
		{ _field_real, "wave speed", "waves per second through a point", "per second" },
		{ _field_real, "wave frequency", "number of waves per world unit", "per world unit" },
		{ _field_real, "shaded dark", "how dark is the dark side of a shaded decorator" },
		{ _field_real, "shaded bright", "the bright side of a shaded decorator is this much brighter than the dark side" },
		{ _field_real, "unused1" },
		{ _field_real, "unused2" },
		FIELD_EXPLANATION("LOD FADE + CULL", "\n"),
		{ _field_real, "early cull", "cull vertices this percentage sooner than LOD3-nothing transition", nullptr, "[0 - 1]" },
		{ _field_real, "cull block size", "decorators are grouped into blocks to be culled in large batches, this determines how much ground each batch covers.  Should be small if you expect to have very dense decorators, and large if you expect them to be sparse", nullptr, "[0.5-100]world units" },
		{ _field_real, "decimation speed", "1 is default", nullptr, "[0 - infinite]" },
		{ _field_real, "decimation start distance", "[block size by default] decimation offset of the starting point" },
		{ _field_real, "decimate to", "0 means all the way removed. 100 means nothing", MAKE_ALT_NAMES("max decimation percentage") },
		{ _field_real, "decimation start", nullptr, "world units" },
		{ _field_real, "decimation end", nullptr, "world units" },
		{ _field_long_integer, "max valid lod" },
		FIELD_EXPLANATION("Lod transitions", nullptr),
		FIELD_EXPLANATION("Base to LOD2", nullptr),
		{ _field_real, "start point0", MAKE_ALT_NAMES("Base to LOD1 cross fading start point") },
		{ _field_real, "end point0", MAKE_ALT_NAMES("Base to LOD1 cross fading end point") },
		{ _field_real, "scale0" },
		{ _field_real, "offset0" },
		FIELD_EXPLANATION("LOD2 to LOD3", nullptr),
		{ _field_real, "start point1", MAKE_ALT_NAMES("LOD1 to LOD2 cross fading start point") },
		{ _field_real, "end point1", MAKE_ALT_NAMES("LOD1 to LOD2 cross fading end point") },
		{ _field_real, "scale1" },
		{ _field_real, "offset1" },
		FIELD_EXPLANATION("LOD3 to LOD4", nullptr),
		{ _field_real, "start point2", MAKE_ALT_NAMES("LOD2 to LOD3 cross fading start point") },
		{ _field_real, "end point2", MAKE_ALT_NAMES("LOD2 to LOD3 cross fading end point") },
		{ _field_real, "scale2" },
		{ _field_real, "offset2" },
		FIELD_EXPLANATION("LOD4 to nothing", nullptr),
		{ _field_real, "start point3", MAKE_ALT_NAMES("LOD3 to nothing cross fading start point") },
		{ _field_real, "end point3", MAKE_ALT_NAMES("LOD3 to nothing cross fading end point") },
		{ _field_real, "scale3" },
		{ _field_real, "offset3" },
		FIELD_EXPLANATION("DECORATOR TYPES", "These describe the randomized settings for your decorator meshes.\n\nTHIS ONLY AFFECTS DECORATORS WHEN YOU PLACE THEM DOWN INITIALLY\nChanging these settings will not affect already placed decorators unless you use the \'reapply-type-settings\' brush\n\nWARNING: Re-arranging the order of these types after placing decorators\nin your level will cause the placed decorators to change types.\n\nDO NOT DELETE!  DO NOT INSERT!  OR YOUR PLACED DECORATORS WILL BE CHANGED!\n"),
		{ _field_block, "decorator types", &global_decorator_type_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(render_model_group_reference, RENDER_MODEL_TAG);

	TAG_REFERENCE(bitmap_group_reference$8, BITMAP_TAG);

	STRINGS(decorator_set_render_flags_definition)
	{
		"render two sided",
		"dont sample light through geometry#takes twice as long to light",
		"Use decimation method for random structured decorators",
		"more strictly respect block size#or there could only be 10x10 blocks per cluster",
		"do not desaturate#only matters if the do not desaturate decorators checkbox is unchecked in the structure bsps block of the .scenario tag"
	};
	STRING_LIST(decorator_set_render_flags_definition, decorator_set_render_flags_definition_strings, _countof(decorator_set_render_flags_definition_strings));

	STRINGS(decorator_set_render_shader_enum_definition)
	{
		"billboard + wind + dynamic lights{wind + dynamic lights}",
		"billboard + dynamic lights{still + dynamic lights}",
		"solid mesh + dynamic lights{still + no lights}",
		"solid mesh{still + sun light only}",
		"underwater + dynamic lights{wavy + dynamic lights}",
		"volumetric billboard + dynamic lights{shaded + dynamic lights}",
		"volumetric billboard + wind + dynamic lights"
	};
	STRING_LIST(decorator_set_render_shader_enum_definition, decorator_set_render_shader_enum_definition_strings, _countof(decorator_set_render_shader_enum_definition_strings));

	STRINGS(decorator_set_lighting_sample_pattern_enum_definition)
	{
		"ground default",
		"hanging"
	};
	STRING_LIST(decorator_set_lighting_sample_pattern_enum_definition, decorator_set_lighting_sample_pattern_enum_definition_strings, _countof(decorator_set_lighting_sample_pattern_enum_definition_strings));

	#define DECORATOR_SET_INSTANCE_NAME_BLOCK_ID { 0xBA17DA19, 0x1009419A, 0x875C1352, 0xFE1C4B67 }
	TAG_STRUCT(
		decorator_set_instance_name_block,
		"decorator_set_instance_name_block",
		"decorator_set_instance_name_block",
		"s_decorator_set_instance_name_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DECORATOR_SET_INSTANCE_NAME_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	#define DEFAULT_NODE_ORIENTATIONS_BLOCK_ID { 0xA3A5979B, 0x41D84244, 0xA1400226, 0xA5CD38C9 }
	TAG_STRUCT(
		default_node_orientations_block,
		"default_node_orientations_block",
		"default_node_orientations_block",
		"s_default_node_orientations_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEFAULT_NODE_ORIENTATIONS_BLOCK_ID,
		4)
	{
		{ _field_real_quaternion, "rotation" },
		{ _field_real_point_3d, "translation" },
		{ _field_real, "scale" },
		{ _field_terminator }
	};

	#define DEFAULT_STIMULUS_SUPPRESSOR_BLOCK_STRUCT_ID { 0x48735579, 0x26B849B0, 0xB08B966D, 0xB3EE55B0 }
	TAG_STRUCT(
		default_stimulus_suppressor_block_struct,
		"default_stimulus_suppressor_block_struct",
		"default_stimulus_suppressor_block_struct",
		"s_default_stimulus_suppressor_block_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEFAULT_STIMULUS_SUPPRESSOR_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "stimulus" },
		{ _field_terminator }
	};

	#define DEFAULT_TEXTURES_REFS_BLOCK_ID { 0x7B0790D8, 0xD39D47C8, 0x85721089, 0x8A80F128 }
	TAG_STRUCT(
		default_textures_refs_block,
		"default_textures_refs_block",
		"default_textures_refs_block",
		"s_default_textures_refs_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEFAULT_TEXTURES_REFS_BLOCK_ID)
	{
		{ _field_long_flags, "options", &global_bitmap_flags },
		{ _field_tag_reference, "default bitmaps", &bitmap_group_reference$14 },
		{ _field_terminator }
	};

	STRINGS(global_bitmap_flags)
	{
		"don\'t load bitmap by default"
	};
	STRING_LIST(global_bitmap_flags, global_bitmap_flags_strings, _countof(global_bitmap_flags_strings));

	TAG_REFERENCE(bitmap_group_reference$14, BITMAP_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR);

	#define DEPENDENCY_STRUCT_DEFINITION_ID { 0xE7E865D4, 0xC1CE4274, 0xAFDC6ECC, 0xCF42D536 }
	TAG_STRUCT(
		dependency_struct_definition,
		"dependency_struct_definition",
		"dependency_struct_definition",
		"s_dependency_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEPENDENCY_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "dependency list", &one_dependency_block_definition_block },
		{ _field_terminator }
	};

	#define DETAIL_OBJECT_COLLECTION_STRUCT_DEFINITION_ID { 0x5410E64E, 0x296459C, 0xAC1594F8, 0xF1099A8B }
	TAG_STRUCT(
		detail_object_collection_struct_definition,
		"detail_object_collection_struct_definition",
		"detail_object_collection_struct_definition",
		"s_detail_object_collection_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DETAIL_OBJECT_COLLECTION_STRUCT_DEFINITION_ID)
	{
		{ _field_short_enum, "collection type", &detail_object_collection_type_enum_definition },
		FIELD_PAD("YN", 2),
		{ _field_real, "global z offset", nullptr, "applied to all detail objects of in this collection so they don't float above the ground" },
		FIELD_PAD("EBGQ", 44),
		{ _field_tag_reference, "sprite plate", &bitmap_group_reference$2 },
		{ _field_block, "types", &detail_object_type_block_block },
		FIELD_PAD("ZQUVEZKGL", 48),
		{ _field_terminator }
	};

	STRINGS(detail_object_collection_type_enum_definition)
	{
		"screen-facing",
		"viewer-facing"
	};
	STRING_LIST(detail_object_collection_type_enum_definition, detail_object_collection_type_enum_definition_strings, _countof(detail_object_collection_type_enum_definition_strings));

	#define DETAIL_OBJECT_TYPE_BLOCK_ID { 0xAD1BA8EC, 0x9D6D4B81, 0x941E1C74, 0x6B46F40A }
	TAG_STRUCT(
		detail_object_type_block,
		"detail_object_type_block",
		"detail_object_type_block",
		"s_detail_object_type_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DETAIL_OBJECT_TYPE_BLOCK_ID)
	{
		{ _field_string, "name" },
		{ _field_char_integer, "sequence index", nullptr, nullptr, "[0,15]" },
		{ _field_byte_flags, "type flags", &detail_object_type_flags_definition },
		FIELD_PAD("VYF", 2),
		{ _field_real_fraction, "color override factor", "fraction of detail object color to use instead of the base map color in the environment:[0,1]" },
		FIELD_PAD("QMOOJ", 8),
		{ _field_real, "near fade distance", nullptr, "world units" },
		{ _field_real, "far fade distance", nullptr, "world units" },
		{ _field_real, "size", nullptr, "world units per pixel" },
		FIELD_PAD("TDAQ", 4),
		{ _field_real_rgb_color, "minimum color", nullptr, nullptr, "[0,1]" },
		{ _field_real_rgb_color, "maximum color", nullptr, nullptr, "[0,1]" },
		{ _field_argb_color, "ambient color", nullptr, nullptr, "[0,255]" },
		FIELD_PAD("VCXJHYY", 4),
		{ _field_terminator }
	};

	STRINGS(detail_object_type_flags_definition)
	{
		"unused0!",
		"unused1!",
		"interpolate color in hsv",
		"...more colors"
	};
	STRING_LIST(detail_object_type_flags_definition, detail_object_type_flags_definition_strings, _countof(detail_object_type_flags_definition_strings));

	#define DETERMINISTICSPEECHEVENTBLOCK_STRUCT_ID { 0x7EEDB328, 0xCE2543C3, 0xB20B798B, 0xEE2D947A }
	TAG_STRUCT(
		deterministicspeecheventblock_struct,
		"deterministicSpeechEventBlock_struct",
		"deterministicSpeechEventBlock_struct",
		"s_deterministicspeecheventblock_struct",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DETERMINISTICSPEECHEVENTBLOCK_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &speecheventinfoflags },
		{ _field_string_id, "voice file path" },
		{ _field_real, "event duration" },
		{ _field_real, "skip fraction", "Percent this file will be skipped when picked. 0 is always, 0.99 is almost never" },
		{ _field_terminator }
	};

	STRINGS(speecheventinfoflags)
	{
		"Campaign Only",
		"Exclude from certain missions",
		"Exclude from M10",
		"Exclude from M20",
		"Exclude from M30",
		"Exclude from M40",
		"Exclude from M60",
		"Exclude from M70",
		"Exclude from M80",
		"Exclude from M90"
	};
	STRING_LIST(speecheventinfoflags, speecheventinfoflags_strings, _countof(speecheventinfoflags_strings));

	#define DEVICE_CONTROL_STRUCT_DEFINITION_ID { 0x58F680DD, 0x1B2D4A08, 0xAA1F8640, 0x73F38CEE }
	VERSIONED_TAG_STRUCT(
		device_control_struct_definition,
		"device_control_struct_definition",
		"device_control_struct_definition",
		"s_device_control_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEVICE_CONTROL_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 25 },
		{ _field_struct, "device", &device_struct_definition }, // structure_version:1
		FIELD_GROUP_BEGIN("$$$ CONTROL $$$"),
		{ _field_short_enum, "type", &control_types },
		{ _field_short_enum, "triggers when", &control_triggers },
		{ _field_real, "call value", nullptr, nullptr, "[0,1]" },
		{ _field_string_id, "action string" },
		{ _field_string_id, "secondary action string" },
		{ _field_string_id, "action denied string", "A string to display when someone else is already using \"interaction held\"-type controls" },
		{ _field_string_id, "action denied secondary string", "A string displayed when someone else is using \"interaction held\"-type controls and it's in secondary mode" },
		{ _field_string_id, "MP team use denied string", "A string to display if the reason for denial is because of the MP team use restriction" },
		{ _field_string_id, "MP team use denied secondary string", "A string displayed if denied because of MP team use restriction and in secondary mode" },
		{ _field_string_id, "action and MP team use denied string", "Displayed when someone else already using \"interaction held\"-type controls and that player's team also triggers the mp use restriction" },
		{ _field_string_id, "action and MP team use denied secondary string", "Displayed when \"interaction held\"-type controls in use, the MP use restriction applies, and in secondary mode" },
		{ _field_real, "interaction hold time", "How many seconds the user must hold the interaction button before the control triggers:seconds" },
		{ _field_string_id, "interaction screen", "A cui_screen to display when someone is using \"interaction held\"-type controls" },
		{ _field_tag_reference, "hold start", "An effect to play when a user starts holding the interaction button on this control", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "action denied sound", "A sound to play when someone attempts to use this control while it is in use", &sound_combiner_group_sound_old_group_sound_group_reference },
		FIELD_USELESS_PAD("value", 4),
		{ _field_short_enum, "MP team use restriction", &teamuserestrictionenum },
		FIELD_PAD("turd", 2),
		{ _field_tag_reference, "on", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "off", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "deny", &sound_group_sound_old_group_effect_group_reference },
		{ _field_string_id, "script name" },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 109 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ DEVICE $$$"),
		{ _field_long_flags, "flags", &device_definition_flags },
		{ _field_real, "power transition time", nullptr, "seconds" },
		{ _field_real, "power acceleration time", nullptr, "seconds" },
		{ _field_real, "position transition time", nullptr, "seconds" },
		{ _field_real, "position acceleration time", nullptr, "seconds" },
		{ _field_real, "depowered position transition time", nullptr, "seconds" },
		{ _field_real, "depowered position acceleration time", nullptr, "seconds" },
		{ _field_word_flags, "lightmap flags", &device_lightmap_flags },
		FIELD_PAD("ZHBMT", 2),
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "open (up)", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "close (down)", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "opened", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "closed", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "depowered", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "repowered", &sound_group_sound_old_group_effect_group_reference },
		{ _field_real, "delay time", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "delay effect", &sound_group_sound_old_group_effect_group_reference },
		{ _field_real, "automatic activation radius", nullptr, "world units" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_real, "marker radius", "max distance between the unit and the marker" },
		{ _field_angle, "marker cone angle", "angle from marker forward the unit must be" },
		{ _field_angle, "marker facing angle", "angle from unit facing the marker must be" },
		{ _field_real, "min targetable position threshold", "above this value and below the max, object becomes targetable" },
		{ _field_real, "max targetable position threshold", "below this value and above the min, object becomes targetable" },
		FIELD_USELESS_PAD("value", 104),
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ CONTROL $$$"),
		{ _field_short_enum, "type", &control_types },
		{ _field_short_enum, "triggers when", &control_triggers },
		{ _field_real, "call value", nullptr, nullptr, "[0,1]" },
		{ _field_string_id, "action string" },
		{ _field_string_id, "secondary action string" },
		{ _field_string_id, "action denied string", "A string to display when someone else is already using \"interaction held\"-type controls" },
		{ _field_string_id, "action denied secondary string", "A string displayed when someone else is using \"interaction held\"-type controls and it's in secondary mode" },
		{ _field_string_id, "MP team use denied string", "A string to display if the reason for denial is because of the MP team use restriction" },
		{ _field_string_id, "MP team use denied secondary string", "A string displayed if denied because of MP team use restriction and in secondary mode" },
		{ _field_string_id, "action and MP team use denied string", "Displayed when someone else already using \"interaction held\"-type controls and that player's team also triggers the mp use restriction" },
		{ _field_string_id, "action and MP team use denied secondary string", "Displayed when \"interaction held\"-type controls in use, the MP use restriction applies, and in secondary mode" },
		{ _field_real, "interaction hold time", "How many seconds the user must hold the interaction button before the control triggers:seconds" },
		{ _field_string_id, "interaction screen", "A cui_screen to display when someone is using \"interaction held\"-type controls" },
		{ _field_tag_reference, "hold start", "An effect to play when a user starts holding the interaction button on this control", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "action denied sound", "A sound to play when someone attempts to use this control while it is in use", &sound_combiner_group_sound_old_group_sound_group_reference },
		FIELD_USELESS_PAD("value", 4),
		{ _field_short_enum, "MP team use restriction", &teamuserestrictionenum },
		FIELD_PAD("turd", 2),
		{ _field_tag_reference, "on", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "off", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "deny", &sound_group_sound_old_group_effect_group_reference },
		{ _field_string_id, "script name" },
		FIELD_GROUP_END(),
		
		{ _field_terminator }
	};

	STRINGS(control_types)
	{
		"toggle switch",
		"on button",
		"off button",
		"call button",
		"health station#touching this device plays the \'on\' effect set below and refills the unit\'s health.\nIt also deletes itself if it runs out of charges (set in sapien)"
	};
	STRING_LIST(control_types, control_types_strings, _countof(control_types_strings));

	STRINGS(control_triggers)
	{
		"touched by player",
		"destroyed",
		"interaction held"
	};
	STRING_LIST(control_triggers, control_triggers_strings, _countof(control_triggers_strings));

	TAG_REFERENCE_GROUP(sound_group_sound_old_group_effect_group_reference)
	{
		SOUND_TAG,
		SOUND_OLD_TAG,
		EFFECT_TAG,
		INVALID_TAG
	};

	STRINGS(teamuserestrictionenum)
	{
		"any team",
		"restrict to owner team",
		"exclude owner team"
	};
	STRING_LIST(teamuserestrictionenum, teamuserestrictionenum_strings, _countof(teamuserestrictionenum_strings));

	STRINGS(device_definition_flags)
	{
		"position loops",
		"use multiplayer boundary",
		"allow interpolation",
		"allow attached players",
		"control uses parent interact scripts",
		"requires line of sight for interaction",
		"only active when parent is hostile#This flag has no effect if the device is parented to a non unit",
		"is targetable"
	};
	STRING_LIST(device_definition_flags, device_definition_flags_strings, _countof(device_definition_flags_strings));

	STRINGS(device_lightmap_flags)
	{
		"don\'t use in lightmap",
		"don\'t use in lightprobe"
	};
	STRING_LIST(device_lightmap_flags, device_lightmap_flags_strings, _countof(device_lightmap_flags_strings));

	#define DEVICE_DISPENSER_STRUCT_DEFINITION_ID { 0x600837DF, 0x9B134AA9, 0xA121E1F6, 0xA72CEA61 }
	VERSIONED_TAG_STRUCT(
		device_dispenser_struct_definition,
		"device_dispenser_struct_definition",
		"device_dispenser_struct_definition",
		"s_device_dispenser_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEVICE_DISPENSER_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 26 },
		{ _field_struct, "device", &device_struct_definition }, // structure_version:1
		FIELD_GROUP_BEGIN("DISPENSER"),
		{ _field_byte_flags, "flags", &dispenserdefinitionflags },
		{ _field_char_enum, "triggers when", &dispenserdefinitiontrigger },
		{ _field_byte_integer, "use cooldown", "The number of seconds that must elapse before this dispenser is usable", "seconds" },
		{ _field_byte_integer, "abandonment time", "When abandoned for this many seconds the object will be deleted", "seconds" },
		{ _field_byte_integer, "max quota", "The maximum number of objects that can come from this dispenser", "(between 0 and 8)" },
		FIELD_PAD("unrealized potential", 3),
		{ _field_real, "interaction hold time", "How many seconds the user must hold the interaction button before the dispenser triggers", "seconds" },
		{ _field_string_id, "interaction screen", "A cui_screen to display when someone is using \"interaction held\"-type dispensers" },
		{ _field_tag_reference, "dispensed object", "This object will be spawned by the dispenser", &biped_group_vehicle_group_weapon_group_crate_group_reference },
		{ _field_string_id, "desired variant name", "The model variant to use of the dispensed object" },
		{ _field_string_id, "action string", "This interaction text will display when usable" },
		{ _field_string_id, "same team denial string", "Displayed when a player is in range but not on the right team" },
		{ _field_string_id, "disabled denial string", "Displayed when the dispenser is disabled" },
		{ _field_string_id, "use cooldown denial string", "Displayed when the use cooldown time hasn't elapsed yet" },
		{ _field_string_id, "max quota denial string", "Displayed when this dispenser is out of charges" },
		{ _field_string_id, "interaction in progress denial string", "Displayed when someone is already interacting with this device" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "spawn marker name", "The dispensed object will appear with this marker's position and orientation" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "effect marker name", "Creates the dispense effect at this marker name" },
		{ _field_tag_reference, "dispense effect", "An effect created when the the dispenser dispenses something", &effect_group_reference$3 },
		{ _field_string_id, "dispenser attach marker", "The marker on the dispenser to use for attachment if we attach our dispensed object, origin if undefined" },
		{ _field_string_id, "dispensed object attach marker", "The marker on the dispensed object to use for attachment if we attach our dispensed object, origin if undefined" },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 110 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ DEVICE $$$"),
		{ _field_long_flags, "flags", &device_definition_flags },
		{ _field_real, "power transition time", nullptr, "seconds" },
		{ _field_real, "power acceleration time", nullptr, "seconds" },
		{ _field_real, "position transition time", nullptr, "seconds" },
		{ _field_real, "position acceleration time", nullptr, "seconds" },
		{ _field_real, "depowered position transition time", nullptr, "seconds" },
		{ _field_real, "depowered position acceleration time", nullptr, "seconds" },
		{ _field_word_flags, "lightmap flags", &device_lightmap_flags },
		FIELD_PAD("ZHBMT", 2),
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "open (up)", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "close (down)", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "opened", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "closed", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "depowered", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "repowered", &sound_group_sound_old_group_effect_group_reference },
		{ _field_real, "delay time", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "delay effect", &sound_group_sound_old_group_effect_group_reference },
		{ _field_real, "automatic activation radius", nullptr, "world units" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_real, "marker radius", "max distance between the unit and the marker" },
		{ _field_angle, "marker cone angle", "angle from marker forward the unit must be" },
		{ _field_angle, "marker facing angle", "angle from unit facing the marker must be" },
		{ _field_real, "min targetable position threshold", "above this value and below the max, object becomes targetable" },
		{ _field_real, "max targetable position threshold", "below this value and above the min, object becomes targetable" },
		FIELD_USELESS_PAD("value", 104),
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("DISPENSER"),
		{ _field_byte_flags, "flags", &dispenserdefinitionflags },
		{ _field_char_enum, "triggers when", &dispenserdefinitiontrigger },
		{ _field_byte_integer, "use cooldown", "The number of seconds that must elapse before this dispenser is usable", "seconds" },
		{ _field_byte_integer, "abandonment time", "When abandoned for this many seconds the object will be deleted", "seconds" },
		{ _field_byte_integer, "max quota", "The maximum number of objects that can come from this dispenser", "(between 0 and 8)" },
		FIELD_PAD("unrealized potential", 3),
		{ _field_real, "interaction hold time", "How many seconds the user must hold the interaction button before the dispenser triggers", "seconds" },
		{ _field_string_id, "interaction screen", "A cui_screen to display when someone is using \"interaction held\"-type dispensers" },
		{ _field_tag_reference, "dispensed object", "This object will be spawned by the dispenser", &biped_group_vehicle_group_weapon_group_crate_group_reference },
		{ _field_string_id, "desired variant name", "The model variant to use of the dispensed object" },
		{ _field_string_id, "action string", "This interaction text will display when usable" },
		{ _field_string_id, "same team denial string", "Displayed when a player is in range but not on the right team" },
		{ _field_string_id, "disabled denial string", "Displayed when the dispenser is disabled" },
		{ _field_string_id, "use cooldown denial string", "Displayed when the use cooldown time hasn't elapsed yet" },
		{ _field_string_id, "max quota denial string", "Displayed when this dispenser is out of charges" },
		{ _field_string_id, "interaction in progress denial string", "Displayed when someone is already interacting with this device" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "spawn marker name", "The dispensed object will appear with this marker's position and orientation" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "effect marker name", "Creates the dispense effect at this marker name" },
		{ _field_tag_reference, "dispense effect", "An effect created when the the dispenser dispenses something", &effect_group_reference$3 },
		{ _field_string_id, "dispenser attach marker", "The marker on the dispenser to use for attachment if we attach our dispensed object, origin if undefined" },
		{ _field_string_id, "dispensed object attach marker", "The marker on the dispensed object to use for attachment if we attach our dispensed object, origin if undefined" },
		FIELD_GROUP_END(),
		
		{ _field_terminator }
	};

	STRINGS(dispenserdefinitionflags)
	{
		"usable by same team only",
		"automated functionality#Turn this on to allow device users to automatically enter vehicles, or automatically equip a weapon",
		"item inherits dispenser team#The spawned object will inherit the dispenser\'s team",
		"monitor for death only#Spawned objects don\'t get abandoned, and only reset on death",
		"delete dispensed objects when grabbed in forge#Used for Dominion turrets that are always supposed to be visually attached to their bases",
		"push players clear#Dispenser waits till the dispense location is clear before dispensing and can push players off the dispenser pad"
	};
	STRING_LIST(dispenserdefinitionflags, dispenserdefinitionflags_strings, _countof(dispenserdefinitionflags_strings));

	STRINGS(dispenserdefinitiontrigger)
	{
		"touched",
		"interaction held"
	};
	STRING_LIST(dispenserdefinitiontrigger, dispenserdefinitiontrigger_strings, _countof(dispenserdefinitiontrigger_strings));

	TAG_REFERENCE_GROUP(biped_group_vehicle_group_weapon_group_crate_group_reference)
	{
		BIPED_TAG,
		VEHICLE_TAG,
		WEAPON_TAG,
		CRATE_TAG,
		INVALID_TAG
	};

	#define DEVICE_GROUP_BLOCK_ID { 0xACEBB874, 0x1E6A4C32, 0x839122F6, 0x6729B33B }
	TAG_STRUCT(
		device_group_block,
		"device_group_block",
		"device_group_block",
		"s_device_group_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEVICE_GROUP_BLOCK_ID)
	{
		{ _field_string, "name" },
		{ _field_real, "initial value", nullptr, nullptr, "[0,1]" },
		{ _field_long_flags, "flags", &device_group_flags },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		FIELD_PAD("WAFNDIO", 2),
		{ _field_terminator }
	};

	STRINGS(device_group_flags)
	{
		"can change only once"
	};
	STRING_LIST(device_group_flags, device_group_flags_strings, _countof(device_group_flags_strings));

	#define DEVICE_MACHINE_STRUCT_DEFINITION_ID { 0x8D04FAA2, 0xC2034C8D, 0xB2925D27, 0x85AF7748 }
	VERSIONED_TAG_STRUCT(
		device_machine_struct_definition,
		"device_machine_struct_definition",
		"device_machine_struct_definition",
		"s_device_machine_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEVICE_MACHINE_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 14 },
		{ _field_struct, "device", &device_struct_definition }, // structure_version:1
		FIELD_EXPLANATION("$$$ MACHINE $$$", nullptr),
		{ _field_short_enum, "type", &machine_types },
		{ _field_word_flags, "flags", &machine_flags },
		{ _field_real, "door open time", nullptr, "seconds" },
		{ _field_real_fraction_bounds, "door occlusion bounds", "maps position [0,1] to occlusion" },
		FIELD_USELESS_PAD("value", 72),
		{ _field_short_enum, "collision response", &machine_collision_responses },
		{ _field_short_integer, "elevator node" },
		FIELD_USELESS_PAD("value", 68),
		{ _field_short_enum, "pathfinding policy", &machine_pathfinding_policy_enum },
		FIELD_PAD("R", 2),
		{ _field_string_id, "shield name", "shield (or any damage section) to control" },
		{ _field_string_id, "shield function", "shield is on when this function is greater then 0.5f, off otherwise." },
		
		{ _struct_version_mode_equal, 0, 98 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ DEVICE $$$"),
		{ _field_long_flags, "flags", &device_definition_flags },
		{ _field_real, "power transition time", nullptr, "seconds" },
		{ _field_real, "power acceleration time", nullptr, "seconds" },
		{ _field_real, "position transition time", nullptr, "seconds" },
		{ _field_real, "position acceleration time", nullptr, "seconds" },
		{ _field_real, "depowered position transition time", nullptr, "seconds" },
		{ _field_real, "depowered position acceleration time", nullptr, "seconds" },
		{ _field_word_flags, "lightmap flags", &device_lightmap_flags },
		FIELD_PAD("ZHBMT", 2),
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "open (up)", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "close (down)", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "opened", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "closed", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "depowered", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "repowered", &sound_group_sound_old_group_effect_group_reference },
		{ _field_real, "delay time", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "delay effect", &sound_group_sound_old_group_effect_group_reference },
		{ _field_real, "automatic activation radius", nullptr, "world units" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_real, "marker radius", "max distance between the unit and the marker" },
		{ _field_angle, "marker cone angle", "angle from marker forward the unit must be" },
		{ _field_angle, "marker facing angle", "angle from unit facing the marker must be" },
		{ _field_real, "min targetable position threshold", "above this value and below the max, object becomes targetable" },
		{ _field_real, "max targetable position threshold", "below this value and above the min, object becomes targetable" },
		FIELD_USELESS_PAD("value", 104),
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("$$$ MACHINE $$$", nullptr),
		{ _field_short_enum, "type", &machine_types },
		{ _field_word_flags, "flags", &machine_flags },
		{ _field_real, "door open time", nullptr, "seconds" },
		{ _field_real_fraction_bounds, "door occlusion bounds", "maps position [0,1] to occlusion" },
		FIELD_USELESS_PAD("value", 72),
		{ _field_short_enum, "collision response", &machine_collision_responses },
		{ _field_short_integer, "elevator node" },
		FIELD_USELESS_PAD("value", 68),
		{ _field_short_enum, "pathfinding policy", &machine_pathfinding_policy_enum },
		FIELD_PAD("R", 2),
		{ _field_string_id, "shield name", "shield (or any damage section) to control" },
		{ _field_string_id, "shield function", "shield is on when this function is greater then 0.5f, off otherwise." },
		
		{ _field_terminator }
	};

	STRINGS(machine_types)
	{
		"door",
		"platform",
		"gear"
	};
	STRING_LIST(machine_types, machine_types_strings, _countof(machine_types_strings));

	STRINGS(machine_flags)
	{
		"pathfinding obstacle",
		"...but not when open",
		"elevator#lighting based on what\'s around, rather than what\'s below",
		"is portal blocker#machines of type \"door\" and all other machines with this flag checked can block a door portal",
		"is NOT pathfinding mobile",
		"uses default occlusion bounds!*",
		"gears repeat motion instead of loop#play animation, reset, play again. No smooth looping and interpolation"
	};
	STRING_LIST(machine_flags, machine_flags_strings, _countof(machine_flags_strings));

	STRINGS(machine_collision_responses)
	{
		"pause until crushed",
		"reverse directions"
	};
	STRING_LIST(machine_collision_responses, machine_collision_responses_strings, _countof(machine_collision_responses_strings));

	STRINGS(machine_pathfinding_policy_enum)
	{
		"discs",
		"sectors",
		"cut_out",
		"none"
	};
	STRING_LIST(machine_pathfinding_policy_enum, machine_pathfinding_policy_enum_strings, _countof(machine_pathfinding_policy_enum_strings));

	#define DEVICE_STRUCT_DEFINITION_ID { 0xB2FE944E, 0x74CF4590, 0x9FE30CED, 0xB1BF6B94 }
	VERSIONED_TAG_STRUCT(
		device_struct_definition,
		"device_struct_definition",
		"device_struct_definition",
		"s_device_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEVICE_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 31 },
		{ _field_struct, "object", &object_struct_definition },
		FIELD_GROUP_BEGIN("$$$ DEVICE $$$"),
		{ _field_long_flags, "flags", &device_definition_flags },
		{ _field_real, "power transition time", nullptr, "seconds" },
		{ _field_real, "power acceleration time", nullptr, "seconds" },
		{ _field_real, "position transition time", nullptr, "seconds" },
		{ _field_real, "position acceleration time", nullptr, "seconds" },
		{ _field_real, "depowered position transition time", nullptr, "seconds" },
		{ _field_real, "depowered position acceleration time", nullptr, "seconds" },
		{ _field_word_flags, "lightmap flags", &device_lightmap_flags },
		FIELD_PAD("ZHBMT", 2),
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "open (up)", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "close (down)", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "opened", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "closed", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "depowered", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "repowered", &sound_group_sound_old_group_effect_group_reference },
		{ _field_real, "delay time", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "delay effect", &sound_group_sound_old_group_effect_group_reference },
		{ _field_real, "automatic activation radius", nullptr, "world units" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_real, "marker radius", "max distance between the unit and the marker" },
		{ _field_angle, "marker cone angle", "angle from marker forward the unit must be" },
		{ _field_angle, "marker facing angle", "angle from unit facing the marker must be" },
		{ _field_real, "min targetable position threshold", "above this value and below the max, object becomes targetable" },
		{ _field_real, "max targetable position threshold", "below this value and above the min, object becomes targetable" },
		FIELD_USELESS_PAD("value", 104),
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 30 },
		FIELD_GROUP_BEGIN("$$$ DEVICE $$$"),
		{ _field_long_flags, "flags", &device_definition_flags },
		{ _field_real, "power transition time", nullptr, "seconds" },
		{ _field_real, "power acceleration time", nullptr, "seconds" },
		{ _field_real, "position transition time", nullptr, "seconds" },
		{ _field_real, "position acceleration time", nullptr, "seconds" },
		{ _field_real, "depowered position transition time", nullptr, "seconds" },
		{ _field_real, "depowered position acceleration time", nullptr, "seconds" },
		{ _field_word_flags, "lightmap flags", &device_lightmap_flags },
		FIELD_PAD("ZHBMT", 2),
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "open (up)", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "close (down)", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "opened", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "closed", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "depowered", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "repowered", &sound_group_sound_old_group_effect_group_reference },
		{ _field_real, "delay time", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "delay effect", &sound_group_sound_old_group_effect_group_reference },
		{ _field_real, "automatic activation radius", nullptr, "world units" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_real, "marker radius", "max distance between the unit and the marker" },
		{ _field_angle, "marker cone angle", "angle from marker forward the unit must be" },
		{ _field_angle, "marker facing angle", "angle from unit facing the marker must be" },
		{ _field_real, "min targetable position threshold", "above this value and below the max, object becomes targetable" },
		{ _field_real, "max targetable position threshold", "below this value and above the min, object becomes targetable" },
		FIELD_USELESS_PAD("value", 104),
		FIELD_GROUP_END(),
		
		{ _field_terminator }
	};

	#define DEVICE_TERMINAL_STRUCT_DEFINITION_ID { 0x99043D50, 0x595A4182, 0xBC0E31FE, 0xF8D1EEE7 }
	VERSIONED_TAG_STRUCT(
		device_terminal_struct_definition,
		"device_terminal_struct_definition",
		"device_terminal_struct_definition",
		"s_device_terminal_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DEVICE_TERMINAL_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 9 },
		{ _field_struct, "device", &device_struct_definition }, // structure_version:1
		FIELD_EXPLANATION("$$$ TERMINAL $$$", nullptr),
		{ _field_long_integer, "bah bah" },
		{ _field_string_id, "action string" },
		{ _field_string_id, "name", "text pulled from strings tag above" },
		{ _field_tag_reference, "activation sound", &sound_old_group_reference },
		{ _field_tag_reference, "bitmap", &bitmap_group_reference$2 },
		{ _field_tag_reference, "strings", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "pages", &terminal_page_block_definition_block },
		
		{ _struct_version_mode_equal, 0, 93 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ DEVICE $$$"),
		{ _field_long_flags, "flags", &device_definition_flags },
		{ _field_real, "power transition time", nullptr, "seconds" },
		{ _field_real, "power acceleration time", nullptr, "seconds" },
		{ _field_real, "position transition time", nullptr, "seconds" },
		{ _field_real, "position acceleration time", nullptr, "seconds" },
		{ _field_real, "depowered position transition time", nullptr, "seconds" },
		{ _field_real, "depowered position acceleration time", nullptr, "seconds" },
		{ _field_word_flags, "lightmap flags", &device_lightmap_flags },
		FIELD_PAD("ZHBMT", 2),
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "open (up)", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "close (down)", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "opened", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "closed", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "depowered", &sound_group_sound_old_group_effect_group_reference },
		{ _field_tag_reference, "repowered", &sound_group_sound_old_group_effect_group_reference },
		{ _field_real, "delay time", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "delay effect", &sound_group_sound_old_group_effect_group_reference },
		{ _field_real, "automatic activation radius", nullptr, "world units" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_real, "marker radius", "max distance between the unit and the marker" },
		{ _field_angle, "marker cone angle", "angle from marker forward the unit must be" },
		{ _field_angle, "marker facing angle", "angle from unit facing the marker must be" },
		{ _field_real, "min targetable position threshold", "above this value and below the max, object becomes targetable" },
		{ _field_real, "max targetable position threshold", "below this value and above the min, object becomes targetable" },
		FIELD_USELESS_PAD("value", 104),
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("$$$ TERMINAL $$$", nullptr),
		{ _field_long_integer, "bah bah" },
		{ _field_string_id, "action string" },
		{ _field_string_id, "name", "text pulled from strings tag above" },
		{ _field_tag_reference, "activation sound", &sound_old_group_reference },
		{ _field_tag_reference, "bitmap", &bitmap_group_reference$2 },
		{ _field_tag_reference, "strings", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "pages", &terminal_page_block_definition_block },
		
		{ _field_terminator }
	};

	TAG_REFERENCE(sound_old_group_reference, SOUND_OLD_TAG);

	#define DIALOGUE_BLOCK_STRUCT_ID { 0xAA0A2CFC, 0xE8A4480C, 0xAFF53536, 0x20BCFEF8 }
	TAG_STRUCT(
		dialogue_block_struct,
		"dialogue_block_struct",
		"dialogue_block_struct",
		"s_dialogue_block_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DIALOGUE_BLOCK_STRUCT_ID)
	{
		{ _field_tag_reference, "global dialogue info", &ai_dialogue_globals_group_reference$2 },
		{ _field_long_flags, "flags", &dialogue_flags },
		{ _field_block, "vocalizations", &sound_references_block_block },
		{ _field_string_id, "mission dialogue designator", "3-letter mission dialogue designator name" },
		{ _field_terminator }
	};

	TAG_REFERENCE(ai_dialogue_globals_group_reference$2, AI_DIALOGUE_GLOBALS_TAG);

	STRINGS(dialogue_flags)
	{
		"female"
	};
	STRING_LIST(dialogue_flags, dialogue_flags_strings, _countof(dialogue_flags_strings));

	#define DIALOGUE_DATA_BLOCK_ID { 0xFCF21C42, 0x169B4D90, 0x98F06443, 0xC4EAC71E }
	TAG_STRUCT(
		dialogue_data_block,
		"dialogue_data_block",
		"dialogue_data_block",
		"s_dialogue_data_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DIALOGUE_DATA_BLOCK_ID)
	{
		{ _field_short_integer, "start index (postprocess)" },
		{ _field_short_integer, "length (postprocess)" },
		{ _field_terminator }
	};

	#define DIALOGUE_VARIANT_BLOCK_ID { 0xC954BD46, 0x4A9C4A98, 0xAC562A99, 0x9AE5A33F }
	TAG_STRUCT(
		dialogue_variant_block,
		"dialogue_variant_block",
		"dialogue_variant_block",
		"s_dialogue_variant_block",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DIALOGUE_VARIANT_BLOCK_ID)
	{
		{ _field_short_integer, "variant number", "variant number to use this dialogue with (must match the suffix in the permutations on the unit's model)" },
		FIELD_PAD("BQCVEMF", 2),
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "dialogue", &dialogue_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(dialogue_group_reference, DIALOGUE_TAG);

	#define DIFFICULTY_BLOCK_ID { 0x9C84698C, 0xA3CF40B5, 0xB4736069, 0xABD1016B }
	TAG_STRUCT(
		difficulty_block,
		"difficulty_block",
		"difficulty_block",
		"s_difficulty_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DIFFICULTY_BLOCK_ID)
	{
		FIELD_EXPLANATION("health", "scale values for enemy health and damage settings"),
		{ _field_real, "easy enemy damage", "enemy damage multiplier on easy difficulty" },
		{ _field_real, "normal enemy damage", "enemy damage multiplier on normal difficulty" },
		{ _field_real, "hard enemy damage", "enemy damage multiplier on hard difficulty" },
		{ _field_real, "imposs. enemy damage", "enemy damage multiplier on impossible difficulty" },
		{ _field_real, "easy enemy vitality", "enemy maximum body vitality scale on easy difficulty" },
		{ _field_real, "normal enemy vitality", "enemy maximum body vitality scale on normal difficulty" },
		{ _field_real, "hard enemy vitality", "enemy maximum body vitality scale on hard difficulty" },
		{ _field_real, "imposs. enemy vitality", "enemy maximum body vitality scale on impossible difficulty" },
		{ _field_real, "easy enemy shield", "enemy maximum shield vitality scale on easy difficulty" },
		{ _field_real, "normal enemy shield", "enemy maximum shield vitality scale on normal difficulty" },
		{ _field_real, "hard enemy shield", "enemy maximum shield vitality scale on hard difficulty" },
		{ _field_real, "imposs. enemy shield", "enemy maximum shield vitality scale on impossible difficulty" },
		{ _field_real, "easy enemy recharge", "enemy shield recharge scale on easy difficulty" },
		{ _field_real, "normal enemy recharge", "enemy shield recharge scale on normal difficulty" },
		{ _field_real, "hard enemy recharge", "enemy shield recharge scale on hard difficulty" },
		{ _field_real, "imposs. enemy recharge", "enemy shield recharge scale on impossible difficulty" },
		{ _field_real, "easy friend damage", "friend damage multiplier on easy difficulty" },
		{ _field_real, "normal friend damage", "friend damage multiplier on normal difficulty" },
		{ _field_real, "hard friend damage", "friend damage multiplier on hard difficulty" },
		{ _field_real, "imposs. friend damage", "friend damage multiplier on impossible difficulty" },
		{ _field_real, "easy friend vitality", "friend maximum body vitality scale on easy difficulty" },
		{ _field_real, "normal friend vitality", "friend maximum body vitality scale on normal difficulty" },
		{ _field_real, "hard friend vitality", "friend maximum body vitality scale on hard difficulty" },
		{ _field_real, "imposs. friend vitality", "friend maximum body vitality scale on impossible difficulty" },
		{ _field_real, "easy friend shield", "friend maximum shield vitality scale on easy difficulty" },
		{ _field_real, "normal friend shield", "friend maximum shield vitality scale on normal difficulty" },
		{ _field_real, "hard friend shield", "friend maximum shield vitality scale on hard difficulty" },
		{ _field_real, "imposs. friend shield", "friend maximum shield vitality scale on impossible difficulty" },
		{ _field_real, "easy friend recharge", "friend shield recharge scale on easy difficulty" },
		{ _field_real, "normal friend recharge", "friend shield recharge scale on normal difficulty" },
		{ _field_real, "hard friend recharge", "friend shield recharge scale on hard difficulty" },
		{ _field_real, "imposs. friend recharge", "friend shield recharge scale on impossible difficulty" },
		FIELD_PAD("$", 16),
		FIELD_PAD("$$", 16),
		FIELD_EXPLANATION("ranged fire", "difficulty-affecting values for enemy ranged combat settings"),
		{ _field_real, "easy rate of fire", "enemy rate of fire scale on easy difficulty" },
		{ _field_real, "normal rate of fire", "enemy rate of fire scale on normal difficulty" },
		{ _field_real, "hard rate of fire", "enemy rate of fire scale on hard difficulty" },
		{ _field_real, "imposs. rate of fire", "enemy rate of fire scale on impossible difficulty" },
		{ _field_real, "easy projectile error", "enemy projectile error scale, as a fraction of their base firing error. on easy difficulty" },
		{ _field_real, "normal projectile error", "enemy projectile error scale, as a fraction of their base firing error. on normal difficulty" },
		{ _field_real, "hard projectile error", "enemy projectile error scale, as a fraction of their base firing error. on hard difficulty" },
		{ _field_real, "imposs. projectile error", "enemy projectile error scale, as a fraction of their base firing error. on impossible difficulty" },
		{ _field_real, "easy burst error", "enemy burst error scale; reduces intra-burst shot distance. on easy difficulty" },
		{ _field_real, "normal burst error", "enemy burst error scale; reduces intra-burst shot distance. on normal difficulty" },
		{ _field_real, "hard burst error", "enemy burst error scale; reduces intra-burst shot distance. on hard difficulty" },
		{ _field_real, "imposs. burst error", "enemy burst error scale; reduces intra-burst shot distance. on impossible difficulty" },
		{ _field_real, "easy new target delay", "enemy new-target delay scale factor. on easy difficulty" },
		{ _field_real, "normal new target delay", "enemy new-target delay scale factor. on normal difficulty" },
		{ _field_real, "hard new target delay", "enemy new-target delay scale factor. on hard difficulty" },
		{ _field_real, "imposs. new target delay", "enemy new-target delay scale factor. on impossible difficulty" },
		{ _field_real, "easy burst separation", "delay time between bursts scale factor for enemies. on easy difficulty" },
		{ _field_real, "normal burst separation", "delay time between bursts scale factor for enemies. on normal difficulty" },
		{ _field_real, "hard burst separation", "delay time between bursts scale factor for enemies. on hard difficulty" },
		{ _field_real, "imposs. burst separation", "delay time between bursts scale factor for enemies. on impossible difficulty" },
		{ _field_real, "easy target tracking", "additional target tracking fraction for enemies. on easy difficulty" },
		{ _field_real, "normal target tracking", "additional target tracking fraction for enemies. on normal difficulty" },
		{ _field_real, "hard target tracking", "additional target tracking fraction for enemies. on hard difficulty" },
		{ _field_real, "imposs. target tracking", "additional target tracking fraction for enemies. on impossible difficulty" },
		{ _field_real, "easy target leading", "additional target leading fraction for enemies. on easy difficulty" },
		{ _field_real, "normal target leading", "additional target leading fraction for enemies. on normal difficulty" },
		{ _field_real, "hard target leading", "additional target leading fraction for enemies. on hard difficulty" },
		{ _field_real, "imposs. target leading", "additional target leading fraction for enemies. on impossible difficulty" },
		{ _field_real, "easy overcharge chance", "overcharge chance scale factor for enemies. on easy difficulty" },
		{ _field_real, "normal overcharge chance", "overcharge chance scale factor for enemies. on normal difficulty" },
		{ _field_real, "hard overcharge chance", "overcharge chance scale factor for enemies. on hard difficulty" },
		{ _field_real, "imposs. overcharge chance", "overcharge chance scale factor for enemies. on impossible difficulty" },
		{ _field_real, "easy special fire delay", "delay between special-fire shots (overcharge, banshee bombs) scale factor for enemies. on easy difficulty" },
		{ _field_real, "normal special fire delay", "delay between special-fire shots (overcharge, banshee bombs) scale factor for enemies. on normal difficulty" },
		{ _field_real, "hard special fire delay", "delay between special-fire shots (overcharge, banshee bombs) scale factor for enemies. on hard difficulty" },
		{ _field_real, "imposs. special fire delay", "delay between special-fire shots (overcharge, banshee bombs) scale factor for enemies. on impossible difficulty" },
		{ _field_real, "easy guidance vs player", "guidance velocity scale factor for all projectiles targeted on a player. on easy difficulty" },
		{ _field_real, "normal guidance vs player", "guidance velocity scale factor for all projectiles targeted on a player. on normal difficulty" },
		{ _field_real, "hard guidance vs player", "guidance velocity scale factor for all projectiles targeted on a player. on hard difficulty" },
		{ _field_real, "imposs. guidance vs player", "guidance velocity scale factor for all projectiles targeted on a player. on impossible difficulty" },
		{ _field_real, "easy melee delay base", "delay period added to all melee attacks, even when berserk. on easy difficulty" },
		{ _field_real, "normal melee delay base", "delay period added to all melee attacks, even when berserk. on normal difficulty" },
		{ _field_real, "hard melee delay base", "delay period added to all melee attacks, even when berserk. on hard difficulty" },
		{ _field_real, "imposs. melee delay base", "delay period added to all melee attacks, even when berserk. on impossible difficulty" },
		{ _field_real, "easy melee delay scale", "multiplier for all existing non-berserk melee delay times. on easy difficulty" },
		{ _field_real, "normal melee delay scale", "multiplier for all existing non-berserk melee delay times. on normal difficulty" },
		{ _field_real, "hard melee delay scale", "multiplier for all existing non-berserk melee delay times. on hard difficulty" },
		{ _field_real, "imposs. melee delay scale", "multiplier for all existing non-berserk melee delay times. on impossible difficulty" },
		FIELD_PAD("$$$", 16),
		FIELD_EXPLANATION("grenades", "difficulty-affecting values for enemy grenade behavior"),
		{ _field_real, "easy grenade chance scale", "scale factor affecting the desicions to throw a grenade. on easy difficulty" },
		{ _field_real, "normal grenade chance scale", "scale factor affecting the desicions to throw a grenade. on normal difficulty" },
		{ _field_real, "hard grenade chance scale", "scale factor affecting the desicions to throw a grenade. on hard difficulty" },
		{ _field_real, "imposs. grenade chance scale", "scale factor affecting the desicions to throw a grenade. on impossible difficulty" },
		{ _field_real, "easy grenade timer scale", "scale factor affecting the delay period between grenades thrown from the same encounter (lower is more often). on easy difficulty" },
		{ _field_real, "normal grenade timer scale", "scale factor affecting the delay period between grenades thrown from the same encounter (lower is more often). on normal difficulty" },
		{ _field_real, "hard grenade timer scale", "scale factor affecting the delay period between grenades thrown from the same encounter (lower is more often). on hard difficulty" },
		{ _field_real, "imposs. grenade timer scale", "scale factor affecting the delay period between grenades thrown from the same encounter (lower is more often). on impossible difficulty" },
		FIELD_PAD("$$$$", 16),
		FIELD_PAD("$$$$$", 16),
		FIELD_PAD("$$$$$$", 16),
		FIELD_EXPLANATION("placement", "difficulty-affecting values for enemy placement"),
		{ _field_real, "easy major upgrade (normal)", "fraction of actors upgraded to their major variant. on easy difficulty" },
		{ _field_real, "normal major upgrade (normal)", "fraction of actors upgraded to their major variant. on normal difficulty" },
		{ _field_real, "hard major upgrade (normal)", "fraction of actors upgraded to their major variant. on hard difficulty" },
		{ _field_real, "imposs. major upgrade (normal)", "fraction of actors upgraded to their major variant. on impossible difficulty" },
		{ _field_real, "easy major upgrade (few)", "fraction of actors upgraded to their major variant when mix = normal. on easy difficulty" },
		{ _field_real, "normal major upgrade (few)", "fraction of actors upgraded to their major variant when mix = normal. on normal difficulty" },
		{ _field_real, "hard major upgrade (few)", "fraction of actors upgraded to their major variant when mix = normal. on hard difficulty" },
		{ _field_real, "imposs. major upgrade (few)", "fraction of actors upgraded to their major variant when mix = normal. on impossible difficulty" },
		{ _field_real, "easy major upgrade (many)", "fraction of actors upgraded to their major variant when mix = many. on easy difficulty" },
		{ _field_real, "normal major upgrade (many)", "fraction of actors upgraded to their major variant when mix = many. on normal difficulty" },
		{ _field_real, "hard major upgrade (many)", "fraction of actors upgraded to their major variant when mix = many. on hard difficulty" },
		{ _field_real, "imposs. major upgrade (many)", "fraction of actors upgraded to their major variant when mix = many. on impossible difficulty" },
		FIELD_EXPLANATION("vehicles", "difficulty-affecting values for vehicle driving/combat"),
		{ _field_real, "easy player vehicle ram chance", "Chance of deciding to ram the player in a vehicle on easy difficulty" },
		{ _field_real, "normal player vehicle ram chance", "Chance of deciding to ram the player in a vehicle on normal difficulty" },
		{ _field_real, "hard player vehicle ram chance", "Chance of deciding to ram the player in a vehicle on hard difficulty" },
		{ _field_real, "imposs. player vehicle ram chance", "Chance of deciding to ram the player in a vehicle on impossible difficulty" },
		{ _field_real, "easy trick dodge chance scale", "Multiplies the chance that a flying vehicle will trick to dodge danger on easy difficulty" },
		{ _field_real, "normal trick dodge chance scale", "Multiplies the chance that a flying vehicle will trick to dodge danger on normal difficulty" },
		{ _field_real, "hard trick dodge chance scale", "Multiplies the chance that a flying vehicle will trick to dodge danger on hard difficulty" },
		{ _field_real, "imposs. trick dodge chance scale", "Multiplies the chance that a flying vehicle will trick to dodge danger on impossible difficulty" },
		FIELD_PAD("$$$$$$$$", 16),
		FIELD_PAD("$$$$$$$$$", 16),
		FIELD_PAD("Q", 84),
		{ _field_terminator }
	};

	#define DIRECTIONALLIGHTRIGBLOCK_ID { 0x43FD2D59, 0x55BC4E17, 0x93A3350A, 0x7CE1DD69 }
	TAG_STRUCT(
		directionallightrigblock,
		"directionalLightRigBlock",
		"directionalLightRigBlock",
		"s_directionallightrigblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DIRECTIONALLIGHTRIGBLOCK_ID)
	{
		{ _field_long_flags, "Location", &lightriglocation },
		FIELD_CUSTOM("Theta", _tag_field_custom_type_slider),
		{ _field_real, "Theta", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Phi", _tag_field_custom_type_slider),
		{ _field_real, "Phi", _tag_field_custom_type_slider },
		{ _field_real, "Distance from location" },
		{ _field_tag_reference, "Midnight light", &light_group_reference },
		{ _field_terminator }
	};

	STRINGS(lightriglocation)
	{
		"follow object",
		"position at marker"
	};
	STRING_LIST(lightriglocation, lightriglocation_strings, _countof(lightriglocation_strings));

	TAG_REFERENCE(light_group_reference, LIGHT_TAG);

	#define DISALLOWED_WEAPONS_FOR_TRADING_BLOCK_ID { 0xA61E00D6, 0xB48E4EA4, 0x84FD513A, 0x929D8ACE }
	TAG_STRUCT(
		disallowed_weapons_for_trading_block,
		"disallowed_weapons_for_trading_block",
		"disallowed_weapons_for_trading_block",
		"s_disallowed_weapons_for_trading_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DISALLOWED_WEAPONS_FOR_TRADING_BLOCK_ID)
	{
		{ _field_tag_reference, "weapon", &weapon_group_reference$3 },
		{ _field_terminator }
	};

	#define DISPENSER_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0x7FF5A8A6, 0x60DF479F, 0x81451DEF, 0xD2B1FCAA }
	TAG_STRUCT(
		dispenser_block_index_flags_block_struct,
		"dispenser_block_index_flags_block_struct",
		"dispenser_block_index_flags_block_struct",
		"s_dispenser_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DISPENSER_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenariodispenserpaletteblock_block },
		{ _field_terminator }
	};

	#define DONT_USE_ME_SCENARIO_ENVIRONMENT_OBJECT_BLOCK_ID { 0x5F0CC647, 0xE8A84CED, 0x8889437C, 0xA1791104 }
	TAG_STRUCT(
		dont_use_me_scenario_environment_object_block,
		"dont_use_me_scenario_environment_object_block",
		"dont_use_me_scenario_environment_object_block",
		"s_dont_use_me_scenario_environment_object_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DONT_USE_ME_SCENARIO_ENVIRONMENT_OBJECT_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_unknown_environment),
		{ _field_short_block_index, "bsp", &scenario_structure_bsp_reference_block_block },
		{ _field_short_integer, "runtime object type" },
		{ _field_long_integer, "unique id" },
		FIELD_PAD("WOQHKQB", 4),
		{ _field_tag, "object definition tag" },
		{ _field_long_integer, "object" },
		FIELD_PAD("YMRTLZ", 44),
		{ _field_terminator }
	};

	#define DOOR_ENCODED_PAS_BLOCK_ID { 0x1FE14003, 0x355B4244, 0x9C611D68, 0x25CD191 }
	TAG_STRUCT(
		door_encoded_pas_block,
		"door_encoded_pas_block",
		"door_encoded_pas_block",
		"s_door_encoded_pas_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DOOR_ENCODED_PAS_BLOCK_ID)
	{
		{ _field_long_integer, "encoded data" },
		{ _field_terminator }
	};

	#define DUAL_VMF_TERMS_STRUCT_DEFINITION_ID { 0xE0FABA4, 0x51F74A05, 0x852BD2AC, 0xDA03B75B }
	TAG_STRUCT(
		dual_vmf_terms_struct_definition,
		"dual_vmf_terms",
		"dual_vmf_terms",
		"s_dual_vmf_terms",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DUAL_VMF_TERMS_STRUCT_DEFINITION_ID)
	{
		{ _field_short_integer, "dual vmf coefficient" },
		{ _field_terminator }
	};

	#define DUMPLING_POINT_BLOCK_ID { 0x5B797CB1, 0x9AAD4931, 0xA4D67F82, 0x3AE0B8EF }
	TAG_STRUCT(
		dumpling_point_block,
		"dumpling_point_block",
		"dumpling_point_block",
		"s_dumpling_point_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DUMPLING_POINT_BLOCK_ID)
	{
		{ _field_real_point_3d, "position" },
		{ _field_real_euler_angles_2d, "normal" },
		{ _field_terminator }
	};

	#define DYNAMIC_TASK_BLOCK_ID { 0xEC3CB964, 0xC1BB4066, 0xB6F02900, 0x9EED9EE3 }
	TAG_STRUCT(
		dynamic_task_block,
		"dynamic_task_block",
		"dynamic_task_block",
		"s_dynamic_task_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		DYNAMIC_TASK_BLOCK_ID)
	{
		{ _field_long_flags, "Agent Filter Flags ", "Limits dynamic tasks that can be assigned to this AI.", &agent_filter_flags },
		{ _field_long_flags, "Task Generation Flags ", "Controls which tasks can be generated by this AI.", &task_generation_flags },
		{ _field_real_fraction, "Protect Request Shield Level ", "Shield vitality must be less than or equal to this level before AI will post Protect task." },
		{ _field_real_fraction, "Protect Request Body Level ", "Body vitality must be less than or equal to this level before AI will post Protect task." },
		{ _field_real_fraction, "Resurrection Req. Chance ", "Percent chance that actor will request to be resurrected on death." },
		{ _field_real, "Shield Task Priority ", "Priority level of Shield task generated by this character." },
		{ _field_real_bounds, "Protect Task Priorities (Min Health - Max Health) ", "Priority levels of Protect task as health drops." },
		{ _field_real, "Resurrection Task Priority ", "Priority level of Resurrection task generated by this character." },
		{ _field_real, "Shield During Resurrection Task Priority ", "Priority of the shield task generated while being resurrected." },
		{ _field_tag_reference, "Shield Crate Override ", "Crate created to represent projected shield.", &crate_group_reference$4 },
		{ _field_terminator }
	};

	STRINGS(agent_filter_flags)
	{
		"Companion",
		"Protector",
		"Spawner",
		"Birther"
	};
	STRING_LIST(agent_filter_flags, agent_filter_flags_strings, _countof(agent_filter_flags_strings));

	STRINGS(task_generation_flags)
	{
		"Protect Me",
		"Resurrect On Death"
	};
	STRING_LIST(task_generation_flags, task_generation_flags_strings, _countof(task_generation_flags_strings));

	#define EDGES_BLOCK_ID { 0xB51DA635, 0xEC534400, 0x81B58C33, 0xD1DCCAFD }
	TAG_STRUCT(
		edges_block,
		"edges_block",
		"edges_block",
		"s_edges_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EDGES_BLOCK_ID)
	{
		{ _field_word_integer, "start vertex" },
		{ _field_word_integer, "end vertex" },
		{ _field_word_integer, "forward edge" },
		{ _field_word_integer, "reverse edge" },
		{ _field_word_integer, "left surface" },
		{ _field_word_integer, "right surface" },
		{ _field_terminator }
	};

	#define EDITOR_COMMENT_BLOCK_ID { 0x6FEF91B0, 0x9F8D4BB8, 0xABF5A1D9, 0xBA1A600D }
	TAG_STRUCT(
		editor_comment_block,
		"editor_comment_block",
		"editor_comment_block",
		"s_editor_comment_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EDITOR_COMMENT_BLOCK_ID)
	{
		{ _field_real_point_3d, "position" },
		{ _field_long_enum, "type", &editor_comment_type_enum_definition },
		{ _field_string, "name" },
		{ _field_long_string, "comment" },
		{ _field_terminator }
	};

	STRINGS(editor_comment_type_enum_definition)
	{
		"generic"
	};
	STRING_LIST(editor_comment_type_enum_definition, editor_comment_type_enum_definition_strings, _countof(editor_comment_type_enum_definition_strings));

	#define EFFECT_ACCELERATIONS_BLOCK_ID { 0x7DDA95, 0x2A084D2A, 0x8AE44F3A, 0x4F217DD2 }
	TAG_STRUCT(
		effect_accelerations_block,
		"effect_accelerations_block",
		"effect_accelerations_block",
		"s_effect_accelerations_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EFFECT_ACCELERATIONS_BLOCK_ID)
	{
		{ _field_short_enum, "create in", &effect_environments },
		{ _field_short_enum, "violence mode", &effect_dispositions },
		{ _field_short_block_index, "location", &effect_locations_block_block },
		FIELD_PAD("THY", 2),
		{ _field_real, "acceleration" },
		{ _field_real, "inner cone angle", nullptr, "degrees" },
		{ _field_real, "outer cone angle", nullptr, "degrees" },
		{ _field_terminator }
	};

	STRINGS(effect_environments)
	{
		"any environment",
		"air only",
		"water only",
		"space only",
		"wet only",
		"dry only"
	};
	STRING_LIST(effect_environments, effect_environments_strings, _countof(effect_environments_strings));

	STRINGS(effect_dispositions)
	{
		"either mode",
		"violent mode only",
		"nonviolent mode only"
	};
	STRING_LIST(effect_dispositions, effect_dispositions_strings, _countof(effect_dispositions_strings));

	#define EFFECT_BLOCK_STRUCT_ID { 0x6C1AEA4A, 0x31EA4E8B, 0xB019756D, 0xBD1D9033 }
	TAG_STRUCT(
		effect_block_struct,
		"effect_block_struct",
		"effect_block_struct",
		"s_effect_block_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EFFECT_BLOCK_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &effect_flags },
		{ _field_dword_integer, "fixed random seed", "If this is non-zero, the effect will usually be exactly repeatable" },
		{ _field_real, "restart if within", nullptr, "world units", MAKE_ALT_NAMES("overlap threshold") },
		{ _field_real, "continue if within", nullptr, "world units" },
		{ _field_real, "death_delay" },
		{ _field_short_block_index, "loop start event", &effect_event_block_block },
		{ _field_char_enum, "priority", &global_effect_priority_enum },
		FIELD_PAD("asdfsdf", 1),
		{ _field_real, "global size scale" },
		{ _field_string_id, "scale A override", "Handle with care. FYI only works if the effect is attached to an object" },
		{ _field_string_id, "scale B override", "Handle with care. FYI only works if the effect is attached to an object" },
		{ _field_real, "runtime danger radius" },
		{ _field_block, "locations", &effect_locations_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "events", &effect_event_block_block },
		{ _field_block, "looping sounds", &effect_looping_sound_block_block },
		{ _field_real, "always play distance" },
		{ _field_real, "never play distance" },
		{ _field_real, "runtime lightprobe_death_delay" },
		{ _field_real, "runtime local_space_death_delay" },
		{ _field_block, "conical distribution", &effect_conical_distribution_block_block },
		{ _field_terminator }
	};

	STRINGS(effect_flags)
	{
		"deleted when attachment deactivates",
		"run events in parallel",
		"do not re-use parts when looping#This option will hurt performance on effects with very short duration.",
		"age creator\'s weapon",
		"use parent position but world orientation",
		"can penetrate walls (expensive)",
		"cannot be restarted#Will help performance for parallel events of different lengths, if the effect is unlikely to be reused",
		"force use own lightprobe#Do not adopt parent object\'s lightprobe, even when it\'s available",
		"force looping#Do not use this unless you know you stop the effect at some point",
		"ordnance droppod locator#trigger creation of player\'s ordnance droppod",
		"render in hologram pass#this effect should be lumped in with Cortana and other holograms when rendered",
		"lightprobe only sample airprobes#Only works with \"force use own lightprobe\"; causes effect to never sample lightmap, only placed light probes",
		"play effect even outside bsps (expensive)",
		"draw .parts when stopped{draw lens flares when stopped}",
		"kill particles when stopped#particularly useful for particles that live forever",
		"play even on hidden objects",
		"disable first person parts in blind skull#blind skull hides the first person weapon",
		"hides associated object on effect deletion#when the effect is deleted, it hides the object it is associated with (for hologram in mp)",
		"bypass mp throttle#effect can not ignore generated crates or be non-networked"
	};
	STRING_LIST(effect_flags, effect_flags_strings, _countof(effect_flags_strings));

	STRINGS(global_effect_priority_enum)
	{
		"low",
		"normal",
		"above normal",
		"high",
		"very high",
		"essential"
	};
	STRING_LIST(global_effect_priority_enum, global_effect_priority_enum_strings, _countof(global_effect_priority_enum_strings));

	#define EFFECT_COMPONENT_HOLDBACK_BLOCK_ID { 0xF1F9FECE, 0xDB96482E, 0x888A6653, 0xCAACCD84 }
	TAG_STRUCT(
		effect_component_holdback_block,
		"effect_component_holdback_block",
		"effect_component_holdback_block",
		"s_effect_component_holdback_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EFFECT_COMPONENT_HOLDBACK_BLOCK_ID)
	{
		{ _field_long_enum, "priority type", &global_effect_priority_enum },
		FIELD_EXPLANATION("SET ONE OF THE FOLLOWING", "Whichever is larger will be used"),
		{ _field_dword_integer, "absolute count" },
		{ _field_real, "relative percentage", nullptr, "/ 100" },
		{ _field_dword_integer, "How many available at this priority" },
		{ _field_terminator }
	};

	#define EFFECT_COMPONENT_HOLDBACKS_BLOCK_ID { 0x8CADDBFF, 0xC0E843FA, 0xB225FFEB, 0xB26D05DA }
	TAG_STRUCT(
		effect_component_holdbacks_block,
		"effect_component_holdbacks_block",
		"effect_component_holdbacks_block",
		"s_effect_component_holdbacks_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EFFECT_COMPONENT_HOLDBACKS_BLOCK_ID)
	{
		{ _field_long_enum, "holdback type", &effect_holdback_type_enum },
		{ _field_dword_integer, "overall budget", "from code" },
		{ _field_block, "priorities", &effect_component_holdback_block_block },
		{ _field_terminator }
	};

	STRINGS(effect_holdback_type_enum)
	{
		"type_effect",
		"type_event",
		"type_location",
		"type_lightprobe",
		"type_effect_message",
		"tracer system",
		"tracer location",
		"tracer spawned",
		"tracer stateless",
		"tracer spawned profile row",
		"tracer stateless profile row",
		"type_decal_system",
		"type_decal",
		"type_decal_vertex",
		"type_decal_index",
		"type_light_volume_system",
		"type_light_volume_location",
		"type_light_volume",
		"type_light_volume_profile_row",
		"type_particle_system",
		"type_particle_location",
		"type_particle_emitter",
		"type_cpu_particle",
		"type_gpu_particle_row",
		"type_particle_queue",
		"tracer queue"
	};
	STRING_LIST(effect_holdback_type_enum, effect_holdback_type_enum_strings, _countof(effect_holdback_type_enum_strings));

	#define EFFECT_CONICAL_DISTRIBUTION_BLOCK_ID { 0x3B2368F1, 0x9891495D, 0xB02F5E1C, 0x5B933025 }
	TAG_STRUCT(
		effect_conical_distribution_block,
		"effect_conical_distribution_block",
		"effect_conical_distribution_block",
		"s_effect_conical_distribution_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EFFECT_CONICAL_DISTRIBUTION_BLOCK_ID)
	{
		FIELD_EXPLANATION("conical_projection", "projectile_count = yaw_count*pitch_count"),
		{ _field_short_integer, "yaw count" },
		{ _field_short_integer, "pitch count" },
		{ _field_real, "distribution exponent", "exp==.5 even distribution, exp>.5== tighter" },
		{ _field_angle, "spread", "degrees" },
		{ _field_terminator }
	};

	#define EFFECT_EVENT_BLOCK_ID { 0x45ADB157, 0x3FEF4708, 0xB03F70BB, 0x8CF7F2FE }
	TAG_STRUCT(
		effect_event_block,
		"effect_event_block",
		"effect_event_block",
		"s_effect_event_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EFFECT_EVENT_BLOCK_ID)
	{
		{ _field_string_id, "event name" },
		{ _field_word_flags, "flags", &event_flags },
		{ _field_char_enum, "priority", &global_effect_priority_enum },
		FIELD_PAD("EVUIQSNDS", 1),
		{ _field_real_fraction, "skip fraction", "chance that this event will be skipped entirely" },
		FIELD_CUSTOM("delay bounds", _tag_field_custom_type_matched_element_array),
		{ _field_real_bounds, "delay bounds", "delay before this event takes place", "seconds" },
		FIELD_CUSTOM("duration bounds", _tag_field_custom_type_matched_element_array),
		{ _field_real_bounds, "duration bounds", "duration of this event", "seconds" },
		FIELD_EXPLANATION("event age duration override", "Parts and particle systems can take \"event age\" as a function input.  Typically that goes from 0 to 1 over the event duration.  If you want a different time, specify it here.  0 means use the duration bounds above."),
		{ _field_real, "event age duration override", "the amount of time over which the \"event age\" function input goes from 0 to 1", "seconds" },
		{ _field_block, "parts", &effect_part_block_block },
		{ _field_block, "accelerations", &effect_accelerations_block_block },
		{ _field_block, "particle systems", &particle_system_definition_block_new_block },
		{ _field_terminator }
	};

	STRINGS(event_flags)
	{
		"disabled for debugging",
		"particles die when effect ends{particles die when event ends}",
		"loop event age duration override"
	};
	STRING_LIST(event_flags, event_flags_strings, _countof(event_flags_strings));

	#define EFFECT_GLOBAL_FORCE_STRUCT_DEFINITION_ID { 0xD721FE1, 0x75B148BB, 0x8B019D51, 0xCDCE867 }
	TAG_STRUCT(
		effect_global_force_struct_definition,
		"effect_global_force_struct_definition",
		"effect_global_force_struct_definition",
		"s_effect_global_force_struct_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EFFECT_GLOBAL_FORCE_STRUCT_DEFINITION_ID)
	{
		{ _field_byte_flags, "flags", &globalforceflags },
		FIELD_PAD("grog", 3),
		{ _field_real, "force strength", "positive pushes out, negative pulls in" },
		{ _field_real, "sphere falloff begin", "doesn't work on cylinders, due to shader constant constraints", "wus" },
		{ _field_real, "sphere falloff end", "doesn't work on cylinders, due to shader constant constraints", "wus" },
		{ _field_terminator }
	};

	STRINGS(globalforceflags)
	{
		"is infinitely long cylinder"
	};
	STRING_LIST(globalforceflags, globalforceflags_strings, _countof(globalforceflags_strings));

	#define EFFECT_GLOBAL_SPAWN_EFFECTS_BLOCK_ID { 0x43548FDC, 0x178A4ED6, 0x88EA2BD1, 0xC0B02BBE }
	TAG_STRUCT(
		effect_global_spawn_effects_block,
		"effect_global_spawn_effects_block",
		"effect_global_spawn_effects_block",
		"s_effect_global_spawn_effects_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EFFECT_GLOBAL_SPAWN_EFFECTS_BLOCK_ID)
	{
		{ _field_tag_reference, "biped spawn effect", &effect_group_reference },
		{ _field_tag_reference, "vehicle spawn effect", &effect_group_reference },
		{ _field_tag_reference, "weapon spawn effect", &effect_group_reference },
		{ _field_tag_reference, "first person player spawn effect", &effect_group_reference },
		{ _field_terminator }
	};

	#define EFFECT_GLOBALS_STRUCT_DEFINITION_ID { 0xA7E2A204, 0x3B84418, 0xA6A9A385, 0x4797476F }
	TAG_STRUCT(
		effect_globals_struct_definition,
		"effect_globals_struct_definition",
		"effect_globals_struct_definition",
		"s_effect_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EFFECT_GLOBALS_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("EFFECT HOLDBACKS", "ALLOCATIONS ON THE MAIN THREAD\ntype_effect:                     Number of effect slots\ntype_event:                      Number of event slots\ntype_location:                   Number of location slots\ntype_lightprobe:                 Number of lightprobe slots\n\nTHREAD MESSAGES\ntype_effect_message:             Number of main-->render messages\n                                 Most effect components require 2 messages + 1 x number of locations\ntype_effect_reverse_message:     Number of render-->main messages (attached effects to particles)\n                                 Holdback not implemented due to complexity.\n\nALLOCATIONS ON THE RENDER THREAD\ntracer system\t\t              Number of instances\ntracer location\t\t          Number of instances * markers\ntracer\t\t\t                  Number of instances * markers * tag-block-entries\ntracer profile row\t\t\t      x16 = Number of tracer profiles\n\ntype_decal_system                Number of instances\ntype_decal                       Number of instances * tag-block-entries\ntype_decal_vertex                Number of decal vertices\ntype_decal_index                 Number of decal indices\n\ntype_light_volume_system         Number of instances\ntype_light_volume_location       Number of instances * markers\ntype_light_volume                Number of instances * markers * tag-block-entries\ntype_light_volume_profile_row    x16 =Number of light_volume profiles\n\ntype_particle_system             Number of instances\ntype_particle_location           Number of instances * markers\ntype_particle_emitter            Number of instances * markers * tag-block-entries\ntype_cpu_particle                Number of cpu particles\ntype_gpu_particle_row            x16 =Number of gpu particles (includes cpu particles)\n\nSPAWNS TO THE GPU\ntype_particle_queue              Number of particles created in a frame (includes cpu particles)\ntracer queue\t\t              Number of tracer profiles created in a frame\n"),
		{ _field_block, "holdbacks", &effect_component_holdbacks_block_block },
		{ _field_tag_reference, "grunt birthday effect", &effect_group_reference },
		FIELD_EXPLANATION("Spawn Effects", "Effect played when an object of this type spawns in during each game mode.\nCan be overridden per-object in the object definition tag"),
		{ _field_block, "multiplayer", &effect_global_spawn_effects_block_block },
		{ _field_block, "survival", &effect_global_spawn_effects_block_block },
		{ _field_block, "campaign", &effect_global_spawn_effects_block_block },
		{ _field_terminator }
	};

	#define EFFECT_LOCATIONS_BLOCK_ID { 0xF2742E8C, 0xCAA34E8B, 0xBD3E6DF9, 0x3868BCB3 }
	TAG_STRUCT(
		effect_locations_block,
		"effect_locations_block",
		"effect_locations_block",
		"s_effect_locations_block",
		SET_UNKNOWN0 | SET_UNKNOWN3 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EFFECT_LOCATIONS_BLOCK_ID)
	{
		FIELD_EXPLANATION("MARKER NAMES", "In addition to the marker in the render model there are several special marker names:\n\nreplace\nReplace allows you to use the same effect with different markers. Damage transition effects support this for example.\n\ngravity, up\nThe direction of gravity (down) and the opposite direction (up).  Always supplied\n\nnormal\nVector pointing directly away from the surface you collided with. Supplied for effects from collision.\n\nforward\nThe \'negative incident\' vector i.e. the direction the object is moving in. Most commonly used to generated decals. Supplied for effects from collision.\n\nbackward\nThe \'incident\' vector i.e. the opposite of the direction the object is moving in. Supplied for effects from collision.\n\nreflection\nThe way the effect would reflect off the surface it hit. Supplied for effects from collision.\n\nroot\nThe object root (pivot). These can used for all effects which are associated with an object.\n\nimpact\nThe location of a havok impact.\n\nwater_surface\nPoint of the effect projected to the water surface above it. Otherwise it just returns the effect position.\n\nchild\nThe location of the last detonated projectile, in case the parent object is a weapon (tracers only)\n\n"),
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_old_string_id, "marker name" },
		{ _field_word_flags, "flags", &effect_location_flags },
		{ _field_char_enum, "priority", &global_effect_priority_enum },
		FIELD_PAD("RGEWNQIG", 1),
		{ _field_terminator }
	};

	STRINGS(effect_location_flags)
	{
		"optional (no error if not found)",
		"destructible (no error if goes away)",
		"track sub-frame movements#When effect moves multiple times within one frame, update location each time",
		"never stagger across markers#Even if this effect is told to stagger across available markers, always fire from all instances"
	};
	STRING_LIST(effect_location_flags, effect_location_flags_strings, _countof(effect_location_flags_strings));

	#define EFFECT_LOOPING_SOUND_BLOCK_STRUCT_ID { 0xB07D23C9, 0xEC514DE9, 0x827535F2, 0x48CD794B }
	TAG_STRUCT(
		effect_looping_sound_block_struct,
		"effect_looping_sound_block_struct",
		"effect_looping_sound_block_struct",
		"s_effect_looping_sound_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EFFECT_LOOPING_SOUND_BLOCK_STRUCT_ID)
	{
		{ _field_tag_reference, "looping sound", &sound_looping_group_reference$2 },
		{ _field_short_block_index, "location", &effect_locations_block_block },
		{ _field_short_block_index, "bind scale to event", &effect_event_block_block },
		{ _field_terminator }
	};

	#define EFFECT_PART_BLOCK_ID { 0x10814B9B, 0xE63D42D7, 0x945DD824, 0x6CF277F8 }
	TAG_STRUCT(
		effect_part_block,
		"effect_part_block",
		"effect_part_block",
		"s_effect_part_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EFFECT_PART_BLOCK_ID)
	{
		{ _field_short_enum, "create in", &effect_environments },
		{ _field_short_enum, "violence mode", &effect_dispositions },
		{ _field_short_block_index, "location", &effect_locations_block_block },
		{ _field_short_block_index, "secondary location (beams)", &effect_locations_block_block },
		{ _field_word_flags, "flags", &effect_part_flags },
		{ _field_char_enum, "priority", &global_effect_priority_enum },
		{ _field_char_enum, "camera mode", "Currently, the only supported use is to turn parts off in first-person view.", &effect_camera_modes },
		{ _field_tag, "runtime base group tag" },
		{ _field_char_enum, "game mode", &effectpartgamemodedefinition },
		{ _field_char_enum, "damage reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("JCIOEHR", 2),
		{ _field_tag_reference, "type", &render_water_ripple_group_damage_effect_group_damage_response_definition_group_sound_old_group_decal_system_group_lens_flare_group_light_group_cheap_light_group_light_volume_system_group_area_screen_effect_group_character_group_cheap_particle_emitter_group_object_group_shield_impact_group_camo_group_sound_group_tracer_system_group_airstrike_group_reference },
		FIELD_CUSTOM("velocity bounds", _tag_field_custom_type_matched_element_array),
		{ _field_real_bounds, "velocity bounds", "initial velocity along the location's forward, for decals the distance at which decal is created (defaults to 0.5)", "world units per second" },
		{ _field_real_euler_angles_2d, "velocity orientation (yaw, pitch)", "NOT USED", FIELD_FLAG_UNKNOWN0 },
		{ _field_angle, "velocity cone angle", "initial velocity will be inside the cone defined by this angle.", "degrees" },
		{ _field_angle_bounds, "angular velocity bounds", nullptr, "degrees per second" },
		FIELD_CUSTOM("radius modifier bounds", _tag_field_custom_type_matched_element_array),
		{ _field_real_bounds, "radius modifier bounds" },
		{ _field_real_point_3d, "relative offset" },
		{ _field_real_euler_angles_2d, "relative orientation (yaw, pitch)" },
		FIELD_EXPLANATION("SCALE MODIFIERS", nullptr),
		{ _field_long_flags, "A scales values", &effect_part_scaleable_values },
		{ _field_long_flags, "B scales values", &effect_part_scaleable_values },
		{ _field_tag_reference, "particleize", "optional particleization effect definition, if you want this to particleize on spawn", &particleman_group_reference },
		{ _field_terminator }
	};

	STRINGS(effect_part_flags)
	{
		"face down regardless of location (decals)",
		"offset origin away from geometry (lights)",
		"never attached to object",
		"disabled for debugging",
		"draw regardless of distance",
		"make every tick",
		"inherit parent variant",
		"batch AOE damage",
		"create even when event loops back to self",
		"face up regardless of location (replace_up)",
		"sound only plays in killcam#NOTE this is only for sound, and really only for firing effect sounds"
	};
	STRING_LIST(effect_part_flags, effect_part_flags_strings, _countof(effect_part_flags_strings));

	STRINGS(effect_camera_modes)
	{
		"independent of camera mode",
		"only in first person",
		"only in third person",
		"both first and third"
	};
	STRING_LIST(effect_camera_modes, effect_camera_modes_strings, _countof(effect_camera_modes_strings));

	STRINGS(effectpartgamemodedefinition)
	{
		"any",
		"campaign only",
		"multiplayer only",
		"campaign only not cinematics",
		"campaign cinematics only",
		"campaign solo only"
	};
	STRING_LIST(effectpartgamemodedefinition, effectpartgamemodedefinition_strings, _countof(effectpartgamemodedefinition_strings));

	TAG_REFERENCE_GROUP(render_water_ripple_group_damage_effect_group_damage_response_definition_group_sound_old_group_decal_system_group_lens_flare_group_light_group_cheap_light_group_light_volume_system_group_area_screen_effect_group_character_group_cheap_particle_emitter_group_object_group_shield_impact_group_camo_group_sound_group_tracer_system_group_airstrike_group_reference)
	{
		RENDER_WATER_RIPPLE_TAG,
		DAMAGE_EFFECT_TAG,
		DAMAGE_RESPONSE_DEFINITION_TAG,
		SOUND_OLD_TAG,
		DECAL_SYSTEM_TAG,
		LENS_FLARE_TAG,
		LIGHT_TAG,
		CHEAP_LIGHT_TAG,
		LIGHT_VOLUME_SYSTEM_TAG,
		AREA_SCREEN_EFFECT_TAG,
		CHARACTER_TAG,
		CHEAP_PARTICLE_EMITTER_TAG,
		OBJECT_TAG,
		SHIELD_IMPACT_TAG,
		CAMO_TAG,
		SOUND_TAG,
		TRACER_SYSTEM_TAG,
		AIRSTRIKE_TAG,
		INVALID_TAG
	};

	STRINGS(effect_part_scaleable_values)
	{
		"velocity",
		"velocity delta",
		"velocity cone angle",
		"angular velocity",
		"angular velocity delta",
		"type-specific scale"
	};
	STRING_LIST(effect_part_scaleable_values, effect_part_scaleable_values_strings, _countof(effect_part_scaleable_values_strings));

	#define EFFECT_SCENERY_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0xA5A55650, 0xA1334BAB, 0x9A91DD38, 0x86E1FFBA }
	TAG_STRUCT(
		effect_scenery_block_index_flags_block_struct,
		"effect_scenery_block_index_flags_block_struct",
		"effect_scenery_block_index_flags_block_struct",
		"s_effect_scenery_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EFFECT_SCENERY_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_effect_scenery_palette_block_block },
		{ _field_terminator }
	};

	#define EFFECT_SCENERY_STRUCT_DEFINITION_ID { 0x575B0686, 0x25B7457D, 0xBBB14145, 0x173BB6C9 }
	VERSIONED_TAG_STRUCT(
		effect_scenery_struct_definition,
		"effect_scenery_struct_definition",
		"effect_scenery_struct_definition",
		"s_effect_scenery_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EFFECT_SCENERY_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_struct, "object", &object_struct_definition },
		
		{ _struct_version_mode_equal, 0, 55 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		
		{ _field_terminator }
	};

	#define ELITE_SPECULAR_COLOR_STRUCT_ID { 0x19358444, 0x61AC41D0, 0x8B134E19, 0x26C63A1B }
	TAG_STRUCT(
		elite_specular_color_struct,
		"elite_specular_color_struct",
		"elite_specular_color_struct",
		"s_elite_specular_color_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ELITE_SPECULAR_COLOR_STRUCT_ID)
	{
		{ _field_real_rgb_color, "tertiary color" },
		{ _field_real_rgb_color, "quaternary color" },
		{ _field_terminator }
	};

	#define EMBLEM_BACK_LIST_ID { 0xFE53E62D, 0x2E2D4D7F, 0x84DFF768, 0x1B3C9141 }
	TAG_STRUCT(
		emblem_back_list,
		"emblem_back_list",
		"emblem_back_list",
		"s_emblem_back_list",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EMBLEM_BACK_LIST_ID)
	{
		{ _field_string_id, "name" },
		FIELD_EXPLANATION("Layer 2 (background)", "\n"),
		{ _field_struct, "layer 2", &emblem_layer },
		{ _field_terminator }
	};

	#define EMBLEM_BITMAP_LIST_ID { 0xEB13477E, 0x34BA4731, 0xA70A97E4, 0x46849752 }
	TAG_STRUCT(
		emblem_bitmap_list,
		"emblem_bitmap_list",
		"emblem_bitmap_list",
		"s_emblem_bitmap_list",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EMBLEM_BITMAP_LIST_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_integer, "bitmap index", "the index of the bitmap in the bitmap group" },
		FIELD_PAD("ASDFJIJJGHJFL", 2),
		{ _field_real, "gradient size", "the size of the gradient (from white to black) in this bitmap", "pixels" },
		{ _field_terminator }
	};

	#define EMBLEM_FRONT_LIST_ID { 0x898E38AB, 0xA7AF4A7D, 0x9EA80F57, 0x753E62B1 }
	TAG_STRUCT(
		emblem_front_list,
		"emblem_front_list",
		"emblem_front_list",
		"s_emblem_front_list",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EMBLEM_FRONT_LIST_ID)
	{
		{ _field_string_id, "name" },
		FIELD_EXPLANATION("Layer 0 (foreground)", "Composed of two shapes\n"),
		{ _field_struct, "layer 0", &emblem_layer },
		FIELD_EXPLANATION("Layer 1 (midground)", "This layer is behind the foreground, and in front of the background\n"),
		{ _field_struct, "layer 1", &emblem_layer },
		FIELD_EXPLANATION("Misc", "Extra configuration\n"),
		{ _field_char_enum, "primary layer", "layer that is considered \"primary\" and which will use the primary color", &front_emblem_primary_layer },
		FIELD_PAD("pad0", 1),
		FIELD_PAD("pad1", 2),
		{ _field_terminator }
	};

	STRINGS(front_emblem_primary_layer)
	{
		"Layer 0 (foreground)",
		"Layer 1 (midground)"
	};
	STRING_LIST(front_emblem_primary_layer, front_emblem_primary_layer_strings, _countof(front_emblem_primary_layer_strings));

	#define EMBLEM_LAYER_ID { 0x60368EF4, 0xCA0A4F22, 0x9D380D1C, 0x9383D8C0 }
	TAG_STRUCT(
		emblem_layer,
		"emblem_layer",
		"emblem_layer",
		"s_emblem_layer",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EMBLEM_LAYER_ID)
	{
		FIELD_EXPLANATION("Shape 0", "Multiplier allows you to control how these shapes are combined.\nFor example, mult0= 1.0 and mult1= -1.0 causes shape 1 to be subtracted from shape 0.\n"),
		{ _field_short_block_index, "shape 0", &emblem_shape_list_block },
		FIELD_PAD("fkkfkll", 2),
		{ _field_real, "multiplier 0" },
		{ _field_struct, "transform 0", &emblem_transform },
		FIELD_EXPLANATION("Shape 1", "\n"),
		{ _field_short_block_index, "shape 1", &emblem_shape_list_block },
		FIELD_PAD("fkkfkllf", 2),
		{ _field_real, "multiplier 1" },
		{ _field_struct, "transform 1", &emblem_transform },
		{ _field_terminator }
	};

	#define EMBLEM_LIBRARY_STRUCT_DEFINITION_ID { 0x814BB579, 0x186448AC, 0x92B45BA7, 0x59274B33 }
	TAG_STRUCT(
		emblem_library_struct_definition,
		"emblem_library_struct_definition",
		"emblem_library_struct_definition",
		"s_emblem_library_struct_definition",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EMBLEM_LIBRARY_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Emblem Library", "This library contains the definitions of all the player emblems\nAll the compositions and transformations that build an emblem are defined in this tag.\nEach emblem is composed of a number of shapes.\nAnd each shape is defined by transformations on an emblem bitmap.\n"),
		{ _field_short_integer, "version" },
		FIELD_PAD("jfejkjjg", 2),
		FIELD_GROUP_BEGIN("Bitmaps"),
		FIELD_EXPLANATION("Bitmaps", "\n"),
		{ _field_real, "bitmap resolution", "used to calculate appropriate antialiasing settings", "pixels" },
		{ _field_real, "antialias sharpen", "default 1.0, global control on antialias sharpness" },
		{ _field_tag_reference, "emblem bitmaps", &bitmap_group_reference$2 },
		{ _field_tag_reference, "emblem bitmaps hi rez", &bitmap_group_reference$2 },
		{ _field_block, "bitmaps", &emblem_bitmap_list_block },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Shapes", "\n"),
		{ _field_block, "shapes", &emblem_shape_list_block },
		FIELD_EXPLANATION("Emblems", "\n"),
		{ _field_block, "front emblems", &emblem_front_list_block },
		{ _field_block, "back emblems", &emblem_back_list_block },
		{ _field_block, "runtime front", &emblem_runtime_front_list_block },
		{ _field_block, "runtime back", &emblem_runtime_back_list_block },
		{ _field_terminator }
	};

	#define EMBLEM_RUNTIME_BACK_LIST_ID { 0xABFE5171, 0xF0184FFA, 0x8F2E9E1C, 0x87E32991 }
	TAG_STRUCT(
		emblem_runtime_back_list,
		"emblem_runtime_back_list",
		"emblem_runtime_back_list",
		"s_emblem_runtime_back_list",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EMBLEM_RUNTIME_BACK_LIST_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_integer, "bitmap0_index" },
		{ _field_short_enum, "bitmap0_address_x", &render_method_bitmap_address_mode_enum },
		{ _field_short_enum, "bitmap0_address_y", &render_method_bitmap_address_mode_enum },
		{ _field_short_integer, "bitmap1_index" },
		{ _field_short_enum, "bitmap1_address_x", &render_method_bitmap_address_mode_enum },
		{ _field_short_enum, "bitmap1_address_y", &render_method_bitmap_address_mode_enum },
		{ _field_real_quaternion, "bitmap_transform0" },
		{ _field_real_quaternion, "bitmap_transform1" },
		{ _field_real_quaternion, "bitmap_transform2" },
		{ _field_real_quaternion, "bitmap_transform3" },
		{ _field_real_quaternion, "bitmap_params0" },
		{ _field_real_quaternion, "bitmap_params1" },
		{ _field_terminator }
	};

	STRINGS(render_method_bitmap_address_mode_enum)
	{
		"wrap",
		"clamp",
		"mirror",
		"black border",
		"mirroronce",
		"mirroronce border"
	};
	STRING_LIST(render_method_bitmap_address_mode_enum, render_method_bitmap_address_mode_enum_strings, _countof(render_method_bitmap_address_mode_enum_strings));

	#define EMBLEM_RUNTIME_FRONT_LIST_ID { 0x3B8760F9, 0x21E54DA1, 0xB61FE7D6, 0x960C88FB }
	TAG_STRUCT(
		emblem_runtime_front_list,
		"emblem_runtime_front_list",
		"emblem_runtime_front_list",
		"s_emblem_runtime_front_list",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EMBLEM_RUNTIME_FRONT_LIST_ID)
	{
		{ _field_string_id, "name0" },
		{ _field_short_integer, "bitmap0_index" },
		{ _field_short_enum, "bitmap0_address_x", &render_method_bitmap_address_mode_enum },
		{ _field_short_enum, "bitmap0_address_y", &render_method_bitmap_address_mode_enum },
		{ _field_short_integer, "bitmap1_index" },
		{ _field_short_enum, "bitmap1_address_x", &render_method_bitmap_address_mode_enum },
		{ _field_short_enum, "bitmap1_address_y", &render_method_bitmap_address_mode_enum },
		{ _field_real_quaternion, "bitmap_transform0" },
		{ _field_real_quaternion, "bitmap_transform1" },
		{ _field_real_quaternion, "bitmap_transform2" },
		{ _field_real_quaternion, "bitmap_transform3" },
		{ _field_real_quaternion, "bitmap_params0" },
		{ _field_real_quaternion, "bitmap_params1" },
		{ _field_string_id, "name1" },
		{ _field_short_integer, "bitmap2_index" },
		{ _field_short_enum, "bitmap2_address_x", &render_method_bitmap_address_mode_enum },
		{ _field_short_enum, "bitmap2_address_y", &render_method_bitmap_address_mode_enum },
		{ _field_short_integer, "bitmap3_index" },
		{ _field_short_enum, "bitmap3_address_x", &render_method_bitmap_address_mode_enum },
		{ _field_short_enum, "bitmap3_address_y", &render_method_bitmap_address_mode_enum },
		{ _field_real_quaternion, "bitmap_transform4" },
		{ _field_real_quaternion, "bitmap_transform5" },
		{ _field_real_quaternion, "bitmap_transform6" },
		{ _field_real_quaternion, "bitmap_transform7" },
		{ _field_real_quaternion, "bitmap_params2" },
		{ _field_real_quaternion, "bitmap_params3" },
		{ _field_char_enum, "primary layer", &front_emblem_primary_layer },
		FIELD_PAD("pad0", 1),
		FIELD_PAD("pad1", 2),
		{ _field_terminator }
	};

	#define EMBLEM_SHAPE_LIST_ID { 0x4D04961E, 0x238E4D15, 0xB14D0036, 0x3247A29B }
	TAG_STRUCT(
		emblem_shape_list,
		"emblem_shape_list",
		"emblem_shape_list",
		"s_emblem_shape_list",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EMBLEM_SHAPE_LIST_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "bitmap", &emblem_bitmap_list_block },
		{ _field_short_enum, "address mode x", &render_method_bitmap_address_mode_enum },
		{ _field_short_enum, "address mode y", &render_method_bitmap_address_mode_enum },
		FIELD_PAD("FGKKGKHL", 2),
		{ _field_struct, "transform", &emblem_transform },
		{ _field_terminator }
	};

	#define EMBLEM_TRANSFORM_ID { 0x3B858486, 0xC9084CB7, 0xAA9ED045, 0x801349C }
	TAG_STRUCT(
		emblem_transform,
		"emblem_transform",
		"emblem_transform",
		"s_emblem_transform",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EMBLEM_TRANSFORM_ID)
	{
		{ _field_real_point_2d, "scale" },
		{ _field_real_point_2d, "shear" },
		{ _field_real, "rotation" },
		{ _field_real_point_2d, "offset" },
		{ _field_real, "expand contract", "amount to expand (positive) or contract (negative) the shape outline" },
		{ _field_real, "blur", "amount to blur the shape outline" },
		{ _field_terminator }
	};

	#define EMITTERCLIPSPHEREBLOCK_ID { 0xA39A3EB4, 0x759B4A18, 0xBDB69AF7, 0x7511BBDA }
	TAG_STRUCT(
		emitterclipsphereblock,
		"emitterClipSphereBlock",
		"emitterClipSphereBlock",
		"s_emitterclipsphereblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EMITTERCLIPSPHEREBLOCK_ID)
	{
		{ _field_real_vector_3d, "offset" },
		{ _field_real, "radius" },
		{ _field_terminator }
	};

	#define EMITTERGLOBALFORCEBLOCK_ID { 0xE1753503, 0x374E470D, 0xBD9324EE, 0x4C8BECA4 }
	TAG_STRUCT(
		emitterglobalforceblock,
		"emitterGlobalForceBlock",
		"emitterGlobalForceBlock",
		"s_emitterglobalforceblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EMITTERGLOBALFORCEBLOCK_ID)
	{
		{ _field_struct, "global force", &effect_global_force_struct_definition },
		{ _field_real_vector_3d, "offset" },
		{ _field_real_vector_3d, "direction (for cylinder forces)" },
		{ _field_terminator }
	};

	#define ENCAPSULATEDPROPERTIES_ID { 0x926E4316, 0xCAA24436, 0xA4CB6C9D, 0x7E9FEB81 }
	TAG_STRUCT(
		encapsulatedproperties,
		"encapsulatedProperties",
		"encapsulatedProperties",
		"s_encapsulatedproperties",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ENCAPSULATEDPROPERTIES_ID)
	{
		{ _field_string_id, "encapsulation name" },
		{ _field_block, "properties", &static_data_column_block },
		{ _field_terminator }
	};

	#define ENCODED_ROOM_DISTANCES_BLOCK_ID { 0x79EE95D, 0x71A0441D, 0x9947D8E4, 0x6865EE9B }
	TAG_STRUCT(
		encoded_room_distances_block,
		"encoded_room_distances_block",
		"encoded_room_distances_block",
		"s_encoded_room_distances_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ENCODED_ROOM_DISTANCES_BLOCK_ID)
	{
		{ _field_char_integer, "encoded data" },
		{ _field_terminator }
	};

	#define ENGINE_FUNCTION_STRUCT_ID { 0xFAE37480, 0x13E14F26, 0xA1CB57D9, 0xD755D2D0 }
	TAG_STRUCT(
		engine_function_struct,
		"engine_function_struct",
		"engine_function_struct",
		"s_engine_function_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ENGINE_FUNCTION_STRUCT_ID)
	{
		{ _field_string_id, "object function damage region", "this is the name of the region by which we gauge the overall damage of the vehicle" },
		{ _field_real, "min anti gravity engine speed", "speed at which engine position funciton  moves.  value of 1 means goes from 0-1 in 1 second" },
		{ _field_real, "max anti gravity engine speed", "speed at which engine position funciton  moves.  value of 1 means goes from 0-1 in 1 second" },
		{ _field_real, "engine speed acceleration", "strictly used for object funtion. in 0-1 space" },
		{ _field_real, "maximum vehicle speed", "function is capped by speed of the vehicle. So when we slow down for any reason we see the function go down" },
		{ _field_terminator }
	};

	#define ENTITY_STRUCT_DEFINITION_ID { 0xC09EE68E, 0xC51440C4, 0x84421DAA, 0xB13D1D3E }
	VERSIONED_TAG_STRUCT(
		entity_struct_definition,
		"entity_struct_definition",
		"entity_struct_definition",
		"s_entity_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ENTITY_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 4 },
		{ _field_struct, "object", &object_struct_definition },
		FIELD_GROUP_BEGIN("$$$ ENTITY $$$"),
		{ _field_real, "Entity Placeholder" },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 3 },
		FIELD_GROUP_BEGIN("$$$ ENTITY $$$"),
		{ _field_real, "Entity Placeholder" },
		FIELD_GROUP_END(),
		
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYDATUM_ID { 0x94AFD719, 0xB6EB42A2, 0xAB347BA3, 0xD20773A1 }
	TAG_STRUCT(
		equipmentabilitydatum,
		"equipmentAbilityDatum",
		"equipmentAbilityDatum",
		"s_equipmentabilitydatum",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYDATUM_ID)
	{
		FIELD_GROUP_BEGIN("Timers"),
		{ _field_real, "duration", "use negative numbers for infinite duration", "seconds" },
		{ _field_real, "warmup time", "time before the equipment truly becomes active", "seconds" },
		{ _field_real, "cooldown time", "for equipment that suppresses combat actions, these actions remain suppressed for this long after the equipment deactivates\nNote that if this equipment also readies weapons when deactivated, the weapon will not be usable until both this timer expires and the ready animation has finished, whichever is longer", "seconds" },
		{ _field_real, "phantom volume activation time", "time in seconds for the phantom volumes on this object to start accelerating things in them" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Energy"),
		FIELD_EXPLANATION("Energy", "All these fields are additive, meaning a negative number will reduce energy and a positive one will increase energy.  Every piece of equipment starts at 1.0 energy"),
		{ _field_real, "minimum activation energy", "energy must be at least this high to activate\nLike activation cost, but doesn't actually change energy levels" },
		{ _field_real, "low energy warning threshold", "used by UI" },
		{ _field_real, "activation energy cost" },
		{ _field_real, "deactivation energy cost" },
		{ _field_real, "active energy rate", nullptr, "energy/second" },
		{ _field_struct, "movement speed to energy rate", nullptr, "1/s", &scalar_function_named_struct },
		{ _field_real, "movement speed domain", nullptr, "wu/s" },
		FIELD_GROUP_END(),
		{ _field_long_flags, "flags", &equipment_activation_flags },
		{ _field_long_flags, "secondary flags", &equipmentactivationsecondaryflags },
		{ _field_short_integer, "charges", "-1 means unlimited charges" },
		{ _field_char_enum, "activation mode", &equipment_activation_mode },
		{ _field_char_integer, "object noise adjustment", "for AI perception.\nwhile active, adjusts noises made by the owner unit by this many 'notches'.\nnote that this is additive, so a positive number is louder and a negative number is quieter" },
		FIELD_GROUP_BEGIN("Type Definitions"),
		{ _field_block, "multiplayer powerup", &equipmentabilitytypemultiplayerpowerupblock_block },
		{ _field_block, "spawner", &equipmentabilitytypespawnerblock_block },
		{ _field_block, "ai spawner", &equipmentabilitytypeaispawnerblock_block },
		{ _field_block, "proximity mine", &equipmentabilitytypeproximitymineblock_block },
		{ _field_block, "moition tracker noise", &equipmentabilitytypemotiontrackernoiseblock_block },
		{ _field_block, "invincibility mode", &equipmentabilitytypeinvincibilityblock_block },
		{ _field_block, "tree of life", &equipmentabilitytypetreeoflifeblock_block },
		{ _field_block, "shapeshifter", &equipmentabilitytypeshapeshifterblock_block },
		{ _field_block, "player trait field", &equipmentabilitytypeplayertraitfieldblock_block },
		{ _field_block, "ai trait field", &equipmentabilitytypeaitraitfieldblock_block },
		{ _field_block, "repulsor field", &equipmentabilitytyperepulsorfieldblock_block },
		{ _field_block, "stasis field", &equipmentabilitytypestasisfieldblock_block },
		{ _field_block, "ball lightning", &equipmentabilitytypeballlightningblock_block },
		{ _field_block, "IWHBYDaddy", &equipmentabilitytypedaddyblock_block },
		{ _field_block, "laser designation", &equipmentabilitytypelaserdesignationblock_block },
		{ _field_block, "super jump", &equipmentabilitytypesuperjumpblock_block },
		{ _field_block, "ammo pack", &equipmentabilitytypeammopackblock_block },
		{ _field_block, "power fist", &equipmentabilitytypepowerfistblock_block },
		{ _field_block, "health pack", &equipmentabilitytypehealthpackblock_block },
		{ _field_block, "jet pack", &equipmentabilitytypejetpackblock_block },
		{ _field_block, "hologram", &equipmentabilitytypehologramblock_block },
		{ _field_block, "special weapon", &equipmentabilitytypespecialweaponblock_block },
		{ _field_block, "special move", &equipmentabilitytypespecialmoveblock_block },
		{ _field_block, "engineer shields", &equipmentabilitytypeengineershieldsblock_block },
		{ _field_block, "sprint", &equipmentabilitytypesprintblock_block },
		{ _field_block, "teleporter", &equipmentabilitytypeteleporterblock_block },
		{ _field_block, "auto turret", &equipmentabilitytypeautoturretblock_block },
		{ _field_block, "vision mode", &equipmentabilitytypevisionmodeblock_block },
		{ _field_block, "shield projector", &equipmentabilitytypeshieldprojectorblock_block },
		{ _field_block, "projectile collector", &equipmentabilitytypeprojectilecollectorblock_block },
		{ _field_block, "remote strike", &equipmentabilitytyperemotestrikeblock_block },
		{ _field_block, "equipment hacker", &equipmentabilitytypeequipmenthackerblock_block },
		{ _field_block, "remote vehicle", &equipmentabilitytyperemotevehicleblock_block },
		{ _field_block, "suicide bomb", &equipmentabilitytypesuicidebombblock_block },
		{ _field_block, "active shield", &equipmentabilitytypeactiveshieldblock_block },
		FIELD_GROUP_END(),
		{ _field_tag_reference, "activation while disabled by player traits sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "activate effect", &effect_group_reference },
		{ _field_tag_reference, "looping effect", &effect_group_reference },
		{ _field_tag_reference, "deactivate effect", &effect_group_reference },
		{ _field_string_id, "activation animation" },
		{ _field_string_id, "active animation" },
		{ _field_string_id, "deactivate animation" },
		{ _field_string_id, "active animation stance" },
		{ _field_terminator }
	};

	STRINGS(equipment_activation_flags)
	{
		"3rd person camera while active",
		"3rd person camera during activation animation",
		"hide reticule while active",
		"cannot be active while airborne#if checked, this equipment cannot be activated if the user is airborne, and deactivates itself if the user becomes airborne",
		"cannot activate while airborne#can\'t activate in midair, but doesn\'t turn off if you later become airborne",
		"cannot activate while standing on biped#if you are standing on another biped you can not use this equipment",
		"cannot be active in vehicle#can\'t be activated in a seat, and deactivates if a vehicle is entered",
		"cannot be active while motion is modified by physics#e.g. by mancannon",
		"suppresses weapons while active",
		"suppresses melee while active",
		"suppresses grenades while active",
		"suppresses device interaction while active",
		"suppresses hero-assist-equipment use while active#probably this means sprint",
		"suppresses entering vehicle",
		"activation anim suppresses weapons and melee",
		"duck sound while active",
		"blocks tracking while active",
		"readies weapon on deactivation#note - if this equipment has an animation cycle, the weapon is readied after the exit animation finishes.  Otherwise the weapon-ready happens immediately on deactivation",
		"drops support/must_be_readied weapons on activation",
		"hides weapon on activation#checking this flag will automatically cause the weapon to ready on deactivation",
		"Cannot activate in vehicle#cannot activate while in vehicle, but previously activated equipment remains active",
		"deactivated by firing weapon",
		"deactivated by reloading weapon",
		"deactivated by switching weapon",
		"deactivated by throwing grenade",
		"deactivated by grenade anim",
		"deactivated by melee attacking",
		"suppresses weapon zoom while active",
		"ignore auto-pick-up weapons while active#Prevents auto-pick-up of weapons set to auto by megalo action weapon_set_picup_priority",
		"cannot crouch while active",
		"activation interrupts melee",
		"activation interrupts grenades"
	};
	STRING_LIST(equipment_activation_flags, equipment_activation_flags_strings, _countof(equipment_activation_flags_strings));

	STRINGS(equipmentactivationsecondaryflags)
	{
		"suppresses weapon zoom during activation animation#the equipment only suppresses zoom during its activation animation",
		"suppresses jumping while active",
		"suppresses toggle deactivation while active",
		"suppresses jumping during activation animation#only suppresses jumping during its activation animation",
		"suppresses vehicle entry during activation animation#only suppresses vehicle entry during its activation animation",
		"suppresses grenade usage during activation animation#only suppresses grenade usage during its activation animation",
		"Hide reticule during activation animation",
		"Hide reticule during during weapon ready",
		"Deactivating during warmup will apply deactivation energy penalty",
		"Deactivating during warmup will fire deactivation effects",
		"Apply player traits during warmup",
		"Apply player traits during cooldown",
		"Hero Assist ability",
		"Ignores normal support weapon force deactivation of equipment#used by Auto Turret to bypass how support weapons force equipment deactivation"
	};
	STRING_LIST(equipmentactivationsecondaryflags, equipmentactivationsecondaryflags_strings, _countof(equipmentactivationsecondaryflags_strings));

	STRINGS(equipment_activation_mode)
	{
		"toggle#toggles state when X is pressed",
		"hold#activates when X is pressed and deactivates when X is released",
		"double tap#activates when X is pressed twice in quick succession",
		"shield fail#activates when player shield fails",
		"death#activates when player dies"
	};
	STRING_LIST(equipment_activation_mode, equipment_activation_mode_strings, _countof(equipment_activation_mode_strings));

	#define EQUIPMENTABILITYPARTCOWCATCHERBLOCK_ID { 0xF15A68E8, 0xB423423C, 0x83E49DD1, 0xA82C51A5 }
	TAG_STRUCT(
		equipmentabilitypartcowcatcherblock,
		"equipmentAbilityPartCowCatcherBlock",
		"equipmentAbilityPartCowCatcherBlock",
		"s_equipmentabilitypartcowcatcherblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYPARTCOWCATCHERBLOCK_ID)
	{
		{ _field_real, "cow catcher height", "world units" },
		{ _field_real, "cow catcher front width", "world units, the width of the flat front portion of the cow-catcher" },
		{ _field_real, "cow catcher side width", "world units, the width of the angled side portion of the cow-catcher" },
		{ _field_real, "cow catcher side depth", "world units, the depth of the angled side portion of the cow-catcher" },
		{ _field_real_vector_3d, "cow catcher offset", "offset from the unit's origin to put the origin of the cow-catcher at" },
		{ _field_tag_reference, "collision damage override", "if \"hide unit during transit\" isn't checked, this can override the unit's collision damage definition during the teleport", &collision_damage_group_reference$4 },
		{ _field_terminator }
	};

	TAG_REFERENCE(collision_damage_group_reference$4, COLLISION_DAMAGE_TAG);

	#define EQUIPMENTABILITYTYPEACTIVESHIELDBLOCK_ID { 0x660BD22D, 0x44234908, 0xA97F6A1B, 0x471978A3 }
	TAG_STRUCT(
		equipmentabilitytypeactiveshieldblock,
		"equipmentAbilityTypeActiveShieldBlock",
		"equipmentAbilityTypeActiveShieldBlock",
		"s_equipmentabilitytypeactiveshieldblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEACTIVESHIELDBLOCK_ID)
	{
		{ _field_byte_flags, "flags", &activeshieldflags },
		{ _field_terminator }
	};

	STRINGS(activeshieldflags)
	{
		"Pause shield stun timer#false forces full amount of stun following deactivation"
	};
	STRING_LIST(activeshieldflags, activeshieldflags_strings, _countof(activeshieldflags_strings));

	#define EQUIPMENTABILITYTYPEAISPAWNERBLOCK_ID { 0x66BF1BDC, 0x55CD4D37, 0xB0F472F5, 0xBE8FD3C3 }
	TAG_STRUCT(
		equipmentabilitytypeaispawnerblock,
		"equipmentAbilityTypeAiSpawnerBlock",
		"equipmentAbilityTypeAiSpawnerBlock",
		"s_equipmentabilitytypeaispawnerblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEAISPAWNERBLOCK_ID)
	{
		{ _field_real, "spawn radius", "distance from players eyeball on the z-plane that this effect spawns" },
		{ _field_real, "spawn z offset", "z-offset of effect spawn" },
		{ _field_real, "spawn area radius", "need a sphere of radius r's free space in order to spawn, otherwise we pick a new spawn location" },
		{ _field_real, "spawn velocity", "WU/sec" },
		{ _field_short_enum, "type", &equipment_spawner_spawn_type },
		FIELD_PAD("RFD", 2),
		{ _field_tag_reference, "spawned character", &character_group_reference$4 },
		{ _field_terminator }
	};

	STRINGS(equipment_spawner_spawn_type)
	{
		"along aiming vector",
		"camera pos z plane",
		"foot pos z plane"
	};
	STRING_LIST(equipment_spawner_spawn_type, equipment_spawner_spawn_type_strings, _countof(equipment_spawner_spawn_type_strings));

	TAG_REFERENCE(character_group_reference$4, CHARACTER_TAG);

	#define EQUIPMENTABILITYTYPEAITRAITFIELDBLOCK_ID { 0x54AB38A6, 0xE7644A67, 0xB659C021, 0x2517CF1D }
	TAG_STRUCT(
		equipmentabilitytypeaitraitfieldblock,
		"equipmentAbilityTypeAiTraitFieldBlock",
		"equipmentAbilityTypeAiTraitFieldBlock",
		"s_equipmentabilitytypeaitraitfieldblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEAITRAITFIELDBLOCK_ID)
	{
		{ _field_block, "active ai equipment traits", &aiequipmenttraitsblock_block },
		{ _field_block, "inactive ai equipment traits", &aiequipmenttraitsblock_block },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPEAMMOPACKBLOCK_ID { 0xCD976E6F, 0x30024F0C, 0x889E8DC5, 0x5612CFD3 }
	TAG_STRUCT(
		equipmentabilitytypeammopackblock,
		"equipmentAbilityTypeAmmoPackBlock",
		"equipmentAbilityTypeAmmoPackBlock",
		"s_equipmentabilitytypeammopackblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEAMMOPACKBLOCK_ID)
	{
		{ _field_real, "energy change per clip added" },
		{ _field_long_integer, "extra frags" },
		{ _field_long_integer, "extra plasma" },
		{ _field_long_integer, "extra grenade 3" },
		{ _field_long_integer, "extra grenade 4" },
		{ _field_long_integer, "extra grenade 5" },
		{ _field_long_integer, "extra grenade 6" },
		{ _field_long_integer, "extra grenade 7" },
		{ _field_long_integer, "extra grenade 8" },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPEAUTOTURRETBLOCK_ID { 0xB2F58312, 0x187E45FA, 0xB6D5D498, 0x850FC6C9 }
	TAG_STRUCT(
		equipmentabilitytypeautoturretblock,
		"equipmentAbilityTypeAutoTurretBlock",
		"equipmentAbilityTypeAutoTurretBlock",
		"s_equipmentabilitytypeautoturretblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEAUTOTURRETBLOCK_ID)
	{
		{ _field_byte_flags, "flags", &equipment_auto_turret_flags },
		FIELD_PAD("atf", 3),
		{ _field_tag_reference, "weapon", &object_group_reference$4 },
		{ _field_real_point_3d, "orbit offset from player", "z forward, x right, y down.  Set x,z zero to get independent turret, y is altitude off ground" },
		{ _field_real, "orbit range", "if above are zeros, this is max turret range" },
		{ _field_real, "orbit rate", nullptr, "orbits per second" },
		{ _field_real, "maximum range", "if not following player, maximum distance downrange turret will travel" },
		{ _field_real, "max velocity", nullptr, "units per second" },
		{ _field_real, "max acceleration", nullptr, "units per second squared" },
		{ _field_real, "turret halt engage time", "amount of time after a moving turret engages a target before it halts movement", "seconds" },
		{ _field_real, "turret idle equipment drain multiplier", "the multiplier on equipment drain when equipment is in its idle state", nullptr, "[0.1]" },
		{ _field_real, "turret inactive equipment drain multiplier", "the multiplier on equipment drain when equipment is in its inactive state", nullptr, "[0.1]" },
		{ _field_real, "spawn radius", "area that must be clear in order for turret to spawn", "world units" },
		{ _field_real, "spawn in time", "the turret will be inactive for this duration", "seconds" },
		{ _field_real_vector_3d, "spawn offset from player", "relative to origin and camera direction without pitch", "world units" },
		{ _field_real, "vertical bob height", nullptr, "world units" },
		{ _field_real, "vertical bobs per second" },
		{ _field_tag_reference, "spawn effect", "effect played on the turret when it is spawned into the world", &effect_group_reference },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "spawn effect marker" },
		{ _field_string_id, "spawn dissolve type" },
		{ _field_string_id, "spawn dissolve marker" },
		{ _field_tag_reference, "collision phase effect", "effect played on the turret while a biped or vehicle passes through it", &effect_group_reference$3 },
		{ _field_terminator }
	};

	STRINGS(equipment_auto_turret_flags)
	{
		"turret follows player#if set, turret follows player, otherwise it moves to a specific location",
		"turret fake gravity#if set, turret will sink to a height defined in y orbit offset below"
	};
	STRING_LIST(equipment_auto_turret_flags, equipment_auto_turret_flags_strings, _countof(equipment_auto_turret_flags_strings));

	TAG_REFERENCE(object_group_reference$4, OBJECT_TAG);

	#define EQUIPMENTABILITYTYPEBALLLIGHTNINGBLOCK_ID { 0xE6C8848E, 0xC6284601, 0x94E9738C, 0x282AC84F }
	TAG_STRUCT(
		equipmentabilitytypeballlightningblock,
		"equipmentAbilityTypeBallLightningBlock",
		"equipmentAbilityTypeBallLightningBlock",
		"s_equipmentabilitytypeballlightningblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEBALLLIGHTNINGBLOCK_ID)
	{
		{ _field_long_flags, "flags", &repulsor_field_flags },
		{ _field_real, "start radius", nullptr, "wu" },
		FIELD_EXPLANATION("Ball Lightning", "Damage effect that passes from one biped to nearby bipeds, recursively"),
		{ _field_real, "chain radius reduction multiplier", "MUST BE GREATER THAN ZERO - each time lightning chains, this is the multiplier that controls how much the radius is reduced by", nullptr, "[0.01, 1]" },
		{ _field_real, "chain delay timer", nullptr, "seconds" },
		{ _field_tag_reference, "lightning damage", &damage_effect_group_reference },
		{ _field_terminator }
	};

	STRINGS(repulsor_field_flags)
	{
		"affects projectiles",
		"affects vehicles",
		"affects bipeds"
	};
	STRING_LIST(repulsor_field_flags, repulsor_field_flags_strings, _countof(repulsor_field_flags_strings));

	#define EQUIPMENTABILITYTYPEDADDYBLOCK_ID { 0x7E61D95C, 0x7E374E85, 0x9A9F6832, 0xB8984DDC }
	TAG_STRUCT(
		equipmentabilitytypedaddyblock,
		"equipmentAbilityTypeDaddyBlock",
		"equipmentAbilityTypeDaddyBlock",
		"s_equipmentabilitytypedaddyblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEDADDYBLOCK_ID)
	{
		{ _field_tag_reference, "child object", &object_group_reference$4 },
		{ _field_word_flags, "flags", &equipmentabilitytypedaddyvisibleflags },
		FIELD_PAD("dada", 2),
		{ _field_real, "shield damage to energy scale", "scale factor for energy gain from shield damage to child.\nDamage is normalized, so if this value is -1.0 then the equipment will lose all its energy when its child's shield is depleted." },
		{ _field_real, "starting warm up object scale", "if >0 (and warm up time is >0), object size will scale up from this up to 1.0 over course of warm up time and down over cooldown time" },
		{ _field_real_point_3d, "offset from parent", "the root of the child is offset by this amount from the root of the parent biped" },
		{ _field_real, "vertical offset in world space", "used to adjust hight per biped, regardless of aim direction" },
		{ _field_real_bounds, "min and max pitch", "the min and max pitch that the child will follow as you aim up and down.  -90 to 90", "degrees" },
		{ _field_real, "visual activation time", nullptr, "seconds" },
		{ _field_tag_reference, "spawn effect", &effect_group_reference },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "spawn effect marker" },
		{ _field_tag_reference, "despawn effect", &effect_group_reference },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "despawn effect marker" },
		{ _field_terminator }
	};

	STRINGS(equipmentabilitytypedaddyvisibleflags)
	{
		"inactive unstowed",
		"inactive stowed",
		"active unstowed",
		"active stowed",
		"warming up unstowed",
		"warming up stowed",
		"cooling down unstowed",
		"cooling down stowed",
		"shield vitality tied to energy#as energy goes down, the shield vitality will as well"
	};
	STRING_LIST(equipmentabilitytypedaddyvisibleflags, equipmentabilitytypedaddyvisibleflags_strings, _countof(equipmentabilitytypedaddyvisibleflags_strings));

	#define EQUIPMENTABILITYTYPEENGINEERSHIELDSBLOCK_ID { 0x3A303175, 0x2AD74EA4, 0xBA64A730, 0x13760E27 }
	TAG_STRUCT(
		equipmentabilitytypeengineershieldsblock,
		"equipmentAbilityTypeEngineerShieldsBlock",
		"equipmentAbilityTypeEngineerShieldsBlock",
		"s_equipmentabilitytypeengineershieldsblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEENGINEERSHIELDSBLOCK_ID)
	{
		{ _field_real, "radius" },
		{ _field_string_id, "shield name" },
		{ _field_long_flags, "flags", &equipment_engineer_shields_flags },
		{ _field_terminator }
	};

	STRINGS(equipment_engineer_shields_flags)
	{
		"gives shields to owner"
	};
	STRING_LIST(equipment_engineer_shields_flags, equipment_engineer_shields_flags_strings, _countof(equipment_engineer_shields_flags_strings));

	#define EQUIPMENTABILITYTYPEEQUIPMENTHACKERBLOCK_ID { 0xFF1934CE, 0x4F5D4FAA, 0xADC69819, 0x22B04AB9 }
	TAG_STRUCT(
		equipmentabilitytypeequipmenthackerblock,
		"equipmentAbilityTypeEquipmentHackerBlock",
		"equipmentAbilityTypeEquipmentHackerBlock",
		"s_equipmentabilitytypeequipmenthackerblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEEQUIPMENTHACKERBLOCK_ID)
	{
		{ _field_byte_flags, "Flags", &equipmenthackerflags },
		FIELD_PAD("grue", 3),
		{ _field_real, "Base drain per second", "Will be multiplied by a value from the drain level block." },
		{ _field_real, "Energy recovery delay", "The targeted equipment will not start regenerating energy until at least this much time has gone by." },
		{ _field_real, "Cone angle degrees", "Degrees away from the reticle at which targets are in the cone." },
		{ _field_block, "Drain levels", &equipmenthackerdrainlevel_block },
		{ _field_tag_reference, "cone effect", "an effect that will shoot out of your face", &effect_group_reference },
		{ _field_tag_reference, "target effect", "an effect that will play on the target", &effect_group_reference },
		{ _field_terminator }
	};

	STRINGS(equipmenthackerflags)
	{
		"Disable friendly fire"
	};
	STRING_LIST(equipmenthackerflags, equipmenthackerflags_strings, _countof(equipmenthackerflags_strings));

	#define EQUIPMENTABILITYTYPEHEALTHPACKBLOCK_ID { 0x51194C17, 0xFB474562, 0x9233D362, 0x8DC64DB3 }
	TAG_STRUCT(
		equipmentabilitytypehealthpackblock,
		"equipmentAbilityTypeHealthPackBlock",
		"equipmentAbilityTypeHealthPackBlock",
		"s_equipmentabilitytypehealthpackblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEHEALTHPACKBLOCK_ID)
	{
		{ _field_struct, "health given over energy used", &scalar_function_named_struct },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPEHOLOGRAMBLOCK_ID { 0x97010557, 0x57654DBF, 0xA7B8368A, 0x77EFE214 }
	TAG_STRUCT(
		equipmentabilitytypehologramblock,
		"equipmentAbilityTypeHologramBlock",
		"equipmentAbilityTypeHologramBlock",
		"s_equipmentabilitytypehologramblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEHOLOGRAMBLOCK_ID)
	{
		{ _field_real, "hologram duration", nullptr, "s" },
		{ _field_long_enum, "havok filter group", &collision_filter_enum },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "attached effect", &effect_group_reference },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "attached effect marker" },
		{ _field_string_id, "attached effect primary scale" },
		{ _field_string_id, "attached effect secondary scale" },
		{ _field_tag_reference, "destruction effect", &effect_group_reference },
		{ _field_real, "shimmer decrease rate", "how fast shimmer decreases", "1.0/s" },
		{ _field_real, "shimmer bullet ping", "how much to ping shimmer when hit by a bullet", "0-1" },
		{ _field_struct, "shimmer to camo function", "this is a periodic function with a period of 1 second\nthe shimmer value is used as the range input (interpolates between green and red)", &scalar_function_named_struct },
		{ _field_byte_flags, "flags", &equipmentabilitytypehologramflags },
		FIELD_PAD("pad after hologram flags", 3),
		{ _field_terminator }
	};

	STRINGS(collision_filter_enum)
	{
		"everything",
		"environment default",
		"environment only",
		"small crate",
		"crate",
		"huge crate",
		"item",
		"projectile",
		"machine",
		"early mover machine",
		"creature",
		"biped",
		"dead biped",
		"super collidable ragdoll",
		"ragdoll",
		"vehicle",
		"decal",
		"forge dynamic scenary",
		"small expensive plant",
		"tech art custom",
		"proxy",
		"huge vehicle",
		"ignore environment",
		"character posture",
		"item blocker",
		"user00",
		"zero extent",
		"physical projectile",
		"environment invisible wall",
		"environment play collision",
		"environment bullet collision"
	};
	STRING_LIST(collision_filter_enum, collision_filter_enum_strings, _countof(collision_filter_enum_strings));

	STRINGS(equipmentabilitytypehologramflags)
	{
		"driveable#hologram is automatically bump possessed by the player"
	};
	STRING_LIST(equipmentabilitytypehologramflags, equipmentabilitytypehologramflags_strings, _countof(equipmentabilitytypehologramflags_strings));

	#define EQUIPMENTABILITYTYPEINVINCIBILITYBLOCK_ID { 0xB02D7AE, 0xA10DBB78, 0xC0E7DE1A, 0x2ADAE4DB }
	TAG_STRUCT(
		equipmentabilitytypeinvincibilityblock,
		"equipmentAbilityTypeInvincibilityBlock",
		"equipmentAbilityTypeInvincibilityBlock",
		"s_equipmentabilitytypeinvincibilityblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEINVINCIBILITYBLOCK_ID)
	{
		{ _field_string_id, "invincibility material" },
		{ _field_short_integer, "invincibility material type" },
		FIELD_PAD("invincibility material pad", 2),
		{ _field_real, "shield recharge rate", "while active, shields recharge at this fraction per second", "1.0f/s" },
		{ _field_real, "shield max recharge level", "highest level shield can recharge to (can be up to 4)" },
		{ _field_tag_reference, "override collision damage", &collision_damage_group_reference$3 },
		{ _field_tag_reference, "ai melee reflect damage", &damage_effect_group_reference$4 },
		{ _field_tag_reference, "player melee reflect damage", &damage_effect_group_reference$4 },
		{ _field_string_id, "loop-invincibility shield name", "active while the equipment is in use (used for shield rendering effects)" },
		{ _field_string_id, "post-invincibility shield name", "active once the equipment is no longer in use" },
		{ _field_struct, "post-invincibility time to shield level function", &scalar_function_named_struct },
		{ _field_real, "maximum vertical velocity", "we use this to specify the domain of the active vertical velocity funtion", "WU/SEC" },
		{ _field_struct, "active vertical velocity damping", &scalar_function_named_struct },
		{ _field_block, "threshold effects", "the effect with the highest threshold will play on deactivation", &equipmenteffectwiththresholdblock_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(collision_damage_group_reference$3, COLLISION_DAMAGE_TAG);

	TAG_REFERENCE(damage_effect_group_reference$4, DAMAGE_EFFECT_TAG);

	#define EQUIPMENTABILITYTYPEJETPACKBLOCK_ID { 0x5AA45049, 0x747240B2, 0x844C11B6, 0x272429F2 }
	TAG_STRUCT(
		equipmentabilitytypejetpackblock,
		"equipmentAbilityTypeJetPackBlock",
		"equipmentAbilityTypeJetPackBlock",
		"s_equipmentabilitytypejetpackblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEJETPACKBLOCK_ID)
	{
		{ _field_byte_flags, "flags", &equipmentabilitytypejetpackflags },
		FIELD_PAD("pad after useCamAndMoveForThrustDirection", 3),
		{ _field_struct, "thrust to acceleration function", &scalar_function_named_struct },
		{ _field_struct, "Infinite energy thrust to acceleration function", &scalar_function_named_struct },
		{ _field_real, "thrust attack time", nullptr, "s" },
		{ _field_real, "thrust decay time", nullptr, "s" },
		{ _field_real, "negative velocity acceleration scale", "when falling, scale the thrust by this (so you can 'catch' yourself easier)" },
		{ _field_real, "airborne acceleration scale" },
		{ _field_real, "grounded acceleration magnitude", "how hard to kick you upwards if you activate while grounded" },
		{ _field_real, "landing anticipation time", "how many seconds before landing the jetpack user enters the airborne arc", "s" },
		FIELD_EXPLANATION("Zero-G jet pack", "These apply if \'Use camera and movement for thrust dir\' flag is checked"),
		{ _field_real, "camera vs move input thrust control", "Camera direction (0.0) VS movement input (1.0) interpolation" },
		{ _field_real, "min speed", "drag will be applied above this" },
		{ _field_real, "max speed" },
		{ _field_real, "stick forward thrust" },
		{ _field_real, "stick strafe thrust" },
		{ _field_real, "drag" },
		{ _field_real, "drag cutoff time", "if 0, drag is always applied" },
		{ _field_real, "cow catcher duration" },
		{ _field_block, "cow catcher parameters", &equipmentabilitypartcowcatcherblock_block },
		{ _field_terminator }
	};

	STRINGS(equipmentabilitytypejetpackflags)
	{
		"Use camera and movement for thrust dir#Jetpack thrust dir is controlled by camera dir and player movement (signifies Zero-G jet pack)",
		"Cache thrust at activation#don\'t let the player change the direction of thrust once they activate"
	};
	STRING_LIST(equipmentabilitytypejetpackflags, equipmentabilitytypejetpackflags_strings, _countof(equipmentabilitytypejetpackflags_strings));

	#define EQUIPMENTABILITYTYPELASERDESIGNATIONBLOCK_ID { 0xD5ABC610, 0xB1BB4BE8, 0xA33289BD, 0xA8B4FC22 }
	TAG_STRUCT(
		equipmentabilitytypelaserdesignationblock,
		"equipmentAbilityTypeLaserDesignationBlock",
		"equipmentAbilityTypeLaserDesignationBlock",
		"s_equipmentabilitytypelaserdesignationblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPELASERDESIGNATIONBLOCK_ID)
	{
		{ _field_real, "unused" },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPEMOTIONTRACKERNOISEBLOCK_ID { 0x480DD4C7, 0x59894CFD, 0xAC664023, 0x2F91791D }
	TAG_STRUCT(
		equipmentabilitytypemotiontrackernoiseblock,
		"equipmentAbilityTypeMotionTrackerNoiseBlock",
		"equipmentAbilityTypeMotionTrackerNoiseBlock",
		"s_equipmentabilitytypemotiontrackernoiseblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEMOTIONTRACKERNOISEBLOCK_ID)
	{
		{ _field_long_flags, "flags", &equipmentabilitytype_motiontrackernoise_flags },
		{ _field_real, "arm time", "time before it starts making noise" },
		{ _field_real, "noise radius", "radius in WU that the noise extends to." },
		{ _field_long_integer, "noise count", "number of noise points that are generated" },
		{ _field_real, "flash radius", "radius in WU that the damage flash noise extends to." },
		{ _field_terminator }
	};

	STRINGS(equipmentabilitytype_motiontrackernoise_flags)
	{
		"affects self",
		"affects friendlies"
	};
	STRING_LIST(equipmentabilitytype_motiontrackernoise_flags, equipmentabilitytype_motiontrackernoise_flags_strings, _countof(equipmentabilitytype_motiontrackernoise_flags_strings));

	#define EQUIPMENTABILITYTYPEMULTIPLAYERPOWERUPBLOCK_ID { 0x722536F2, 0xBC644EEF, 0xAD1E23AD, 0x7F611939 }
	TAG_STRUCT(
		equipmentabilitytypemultiplayerpowerupblock,
		"equipmentAbilityTypeMultiplayerPowerupBlock",
		"equipmentAbilityTypeMultiplayerPowerupBlock",
		"s_equipmentabilitytypemultiplayerpowerupblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEMULTIPLAYERPOWERUPBLOCK_ID)
	{
		{ _field_long_enum, "flavor", &multiplayer_powerup_flavor },
		{ _field_terminator }
	};

	STRINGS(multiplayer_powerup_flavor)
	{
		"red powerup",
		"blue powerup",
		"yellow powerup",
		"custom powerup"
	};
	STRING_LIST(multiplayer_powerup_flavor, multiplayer_powerup_flavor_strings, _countof(multiplayer_powerup_flavor_strings));

	#define EQUIPMENTABILITYTYPEPLAYERTRAITFIELDBLOCK_ID { 0x5A671CC4, 0x9D8D44CA, 0xA3EA38A8, 0xC13CA44A }
	TAG_STRUCT(
		equipmentabilitytypeplayertraitfieldblock,
		"equipmentAbilityTypePlayerTraitFieldBlock",
		"equipmentAbilityTypePlayerTraitFieldBlock",
		"s_equipmentabilitytypeplayertraitfieldblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEPLAYERTRAITFIELDBLOCK_ID)
	{
		FIELD_SKIP("radius", 4),
		{ _field_block, "active player traits", &game_engine_player_traits_block_block },
		{ _field_block, "inactive player traits", &game_engine_player_traits_block_block },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPEPOWERFISTBLOCK_ID { 0xB7516F5E, 0x8E8645EE, 0xA8FB87FF, 0xBAF48D47 }
	TAG_STRUCT(
		equipmentabilitytypepowerfistblock,
		"equipmentAbilityTypePowerFistBlock",
		"equipmentAbilityTypePowerFistBlock",
		"s_equipmentabilitytypepowerfistblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEPOWERFISTBLOCK_ID)
	{
		{ _field_tag_reference, "melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "melee response", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "clang damage", &damage_effect_group_reference },
		{ _field_tag_reference, "clang response", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPEPROJECTILECOLLECTORBLOCK_ID { 0x6189206D, 0x582E47EF, 0x97185355, 0x74E112D6 }
	TAG_STRUCT(
		equipmentabilitytypeprojectilecollectorblock,
		"equipmentAbilityTypeProjectileCollectorBlock",
		"equipmentAbilityTypeProjectileCollectorBlock",
		"s_equipmentabilitytypeprojectilecollectorblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEPROJECTILECOLLECTORBLOCK_ID)
	{
		{ _field_real_fraction, "Chance to Collect ", "Percent chance (0-1) that collector has to collect each grenade.  Will only attempt to collect each grenade once." },
		{ _field_real_bounds, "Collect Cooldown ", "Number of seconds collector must wait between successful collections." },
		{ _field_real_bounds, "Attack Delay ", "Number of seconds collector must wait before throwing a collected projectile at a target." },
		{ _field_real, "Max Collect Range", "Max range in world units that collector can collect and hold onto projectiles." },
		{ _field_real_bounds, "Orbit Radius", "Collector will try to keep collected projectiles orbiting in this range." },
		{ _field_real, "Orbit Speed", "Speed at which collected projectiles orbit." },
		{ _field_real, "Vertical Offset", "Orbit vertical offset amount." },
		{ _field_real, "Strength", "Controls amount of acceleration applied to projectile." },
		{ _field_real, "Attack Speed", "Initial speed of projectiles when thrown as an attack." },
		{ _field_tag_reference, "Collect Effect ", "Beam effect that links equipment to each collected projectile.", &effect_group_reference$4 },
		{ _field_terminator }
	};

	TAG_REFERENCE(effect_group_reference$4, EFFECT_TAG);

	#define EQUIPMENTABILITYTYPEPROXIMITYMINEBLOCK_ID { 0x5B614FE2, 0xDCDC4443, 0xAD380949, 0x1CC95A5E }
	TAG_STRUCT(
		equipmentabilitytypeproximitymineblock,
		"equipmentAbilityTypeProximityMineBlock",
		"equipmentAbilityTypeProximityMineBlock",
		"s_equipmentabilitytypeproximitymineblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEPROXIMITYMINEBLOCK_ID)
	{
		{ _field_tag_reference, "explosion effect", &effect_group_reference },
		{ _field_tag_reference, "explosion damage effect", &damage_effect_group_reference },
		{ _field_real, "arm time", "time before it becomes a proximity mine" },
		{ _field_real, "self destruct time", "seconds after it is created that it must self destruct.  0 means never destroy" },
		{ _field_real, "trigger time", "seconds object moving at trigger velocity takes to trigger explosion.  This will smooth out sensitivity to velocity noise" },
		{ _field_real, "trigger velocity", "WU/sec at which we trigger explosion" },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPEREMOTESTRIKEBLOCK_ID { 0x837869A3, 0xC1AF46C4, 0x8CEE091D, 0x4EDA8D40 }
	TAG_STRUCT(
		equipmentabilitytyperemotestrikeblock,
		"equipmentAbilityTypeRemoteStrikeBlock",
		"equipmentAbilityTypeRemoteStrikeBlock",
		"s_equipmentabilitytyperemotestrikeblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEREMOTESTRIKEBLOCK_ID)
	{
		{ _field_tag_reference, "weapon", &object_group_reference$4 },
		{ _field_real, "max velocity" },
		{ _field_real, "acceleration", "this is a percentage of max velocity per second - 0.1 reaches max velocity in 10 seconds" },
		{ _field_real, "decay rate", "the rate at which a moving camera decays when you release the stick.  Lower decays faster." },
		{ _field_real, "camera interpolation time" },
		{ _field_byte_flags, "flags", &equipment_remote_strike_flags },
		FIELD_PAD("rso", 3),
		{ _field_terminator }
	};

	STRINGS(equipment_remote_strike_flags)
	{
		"ordnance ui#special version of RS use for ordnance droppod UI",
		"target designator#target designator is in weapon field"
	};
	STRING_LIST(equipment_remote_strike_flags, equipment_remote_strike_flags_strings, _countof(equipment_remote_strike_flags_strings));

	#define EQUIPMENTABILITYTYPEREMOTEVEHICLEBLOCK_ID { 0x20711F9E, 0xBD914250, 0xAC35F336, 0x4116390A }
	TAG_STRUCT(
		equipmentabilitytyperemotevehicleblock,
		"equipmentAbilityTypeRemoteVehicleBlock",
		"equipmentAbilityTypeRemoteVehicleBlock",
		"s_equipmentabilitytyperemotevehicleblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEREMOTEVEHICLEBLOCK_ID)
	{
		{ _field_tag_reference, "hologram spawner", "reference the equipment that will spawn the hologram that will pilot the remote vehicle", &object_group_reference$4 },
		{ _field_tag_reference, "vehicle", "reference the remote vehicle to be created", &object_group_reference$4 },
		{ _field_string_id, "seat label", "hologram gets loaded into this seat in the vehicle" },
		{ _field_string_id, "spawn position flag", "position of scenerio flag with this name. Empty will default to flag named 'remote_vehicle_start_position'" },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPEREPULSORFIELDBLOCK_ID { 0x1941789D, 0x3D774B27, 0x95D5AD84, 0x3F228963 }
	TAG_STRUCT(
		equipmentabilitytyperepulsorfieldblock,
		"equipmentAbilityTypeRepulsorFieldBlock",
		"equipmentAbilityTypeRepulsorFieldBlock",
		"s_equipmentabilitytyperepulsorfieldblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEREPULSORFIELDBLOCK_ID)
	{
		{ _field_long_flags, "flags", &repulsor_field_flags },
		{ _field_real, "radius", nullptr, "wu" },
		{ _field_real, "power" },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPESHAPESHIFTERBLOCK_ID { 0x22338F4E, 0xCCFC486B, 0xAA6093F1, 0x5E704DD6 }
	TAG_STRUCT(
		equipmentabilitytypeshapeshifterblock,
		"equipmentAbilityTypeShapeshifterBlock",
		"equipmentAbilityTypeShapeshifterBlock",
		"s_equipmentabilitytypeshapeshifterblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPESHAPESHIFTERBLOCK_ID)
	{
		{ _field_string_id, "region name" },
		{ _field_string_id, "inactive permutation name" },
		{ _field_string_id, "active permutation name" },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPESHIELDPROJECTORBLOCK_ID { 0x87D0224D, 0xE3FF4C21, 0xA392E654, 0xD126F6A2 }
	TAG_STRUCT(
		equipmentabilitytypeshieldprojectorblock,
		"equipmentAbilityTypeShieldProjectorBlock",
		"equipmentAbilityTypeShieldProjectorBlock",
		"s_equipmentabilitytypeshieldprojectorblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPESHIELDPROJECTORBLOCK_ID)
	{
		{ _field_real, "Lifetime ", "Number of seconds a projected shield will remain active." },
		{ _field_real, "Recharge Time ", "Number of seconds between shield projections." },
		{ _field_real, "Warmup Time ", "Number of seconds it takes to activate a projection." },
		{ _field_real_fraction, "Max Move Percentage ", "Percentage of distance between current and desired positions a shield can be moved per update tick." },
		{ _field_real, "Offset Amount ", "Distance from defender's position to project the shield." },
		{ _field_real, "Min Projection Distance ", "Minimum distance between defender and attacker required to project shield." },
		{ _field_real, "Max Projection Distance ", "Max distance from equipment that shield can be projected." },
		{ _field_real_fraction, "Min Required Energy Level ", "Min energy required to activate shield." },
		{ _field_tag_reference, "Project Effect ", "Beam effect that links equipment to projected shield.", &effect_group_reference$4 },
		{ _field_tag_reference, "Warmup Effect ", "Effect played at eventual shield projection point during warmup period.", &effect_group_reference$4 },
		{ _field_tag_reference, "Shield Crate ", "Crate created to represent projected shield.", &crate_group_reference$5 },
		{ _field_terminator }
	};

	TAG_REFERENCE(crate_group_reference$5, CRATE_TAG);

	#define EQUIPMENTABILITYTYPESPAWNERBLOCK_ID { 0x94A0C6C, 0xB09B4658, 0xA912F337, 0x82263A70 }
	TAG_STRUCT(
		equipmentabilitytypespawnerblock,
		"equipmentAbilityTypeSpawnerBlock",
		"equipmentAbilityTypeSpawnerBlock",
		"s_equipmentabilitytypespawnerblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPESPAWNERBLOCK_ID)
	{
		{ _field_real, "spawn radius", "distance from players eyeball on the z-plane that this effect spawns" },
		{ _field_real, "spawn z offset", "z-offset of effect spawn" },
		{ _field_real, "spawn area radius", "need a sphere of radius r's free space in order to spawn, otherwise we pick a new spawn location" },
		{ _field_real, "spawn velocity", "WU/sec" },
		{ _field_short_enum, "type", &equipment_spawner_spawn_type },
		FIELD_PAD("LSJ", 2),
		{ _field_tag_reference, "spawned object", &object_group_reference$4 },
		{ _field_tag_reference, "spawned effect", &effect_group_reference },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPESPECIALMOVEBLOCK_ID { 0x9A303175, 0x3AD74EA4, 0xBD64A730, 0x3760E27 }
	TAG_STRUCT(
		equipmentabilitytypespecialmoveblock,
		"equipmentAbilityTypeSpecialMoveBlock",
		"equipmentAbilityTypeSpecialMoveBlock",
		"s_equipmentabilitytypespecialmoveblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPESPECIALMOVEBLOCK_ID)
	{
		{ _field_string_id, "forward" },
		{ _field_string_id, "left" },
		{ _field_string_id, "backward" },
		{ _field_string_id, "right" },
		{ _field_char_enum, "default direction", &equipmentspecialmovedefaultdirectiondefinition },
		FIELD_PAD("pad0", 3),
		{ _field_tag_reference, "directional effect", &effect_group_reference$3 },
		{ _field_real, "Danger Radius", "AI avoidance radius.  Ignored if zero." },
		{ _field_real, "Speed multiplier", "Use this instead of a trait.  0 defaults to 1.  With a trait, the client will move at non-modified scale until it gets replicated." },
		{ _field_terminator }
	};

	STRINGS(equipmentspecialmovedefaultdirectiondefinition)
	{
		"none",
		"forward",
		"left",
		"backward",
		"right"
	};
	STRING_LIST(equipmentspecialmovedefaultdirectiondefinition, equipmentspecialmovedefaultdirectiondefinition_strings, _countof(equipmentspecialmovedefaultdirectiondefinition_strings));

	#define EQUIPMENTABILITYTYPESPECIALWEAPONBLOCK_ID { 0xAD13DE60, 0x89524538, 0x99481D62, 0xA70E7F5B }
	TAG_STRUCT(
		equipmentabilitytypespecialweaponblock,
		"equipmentAbilityTypeSpecialWeaponBlock",
		"equipmentAbilityTypeSpecialWeaponBlock",
		"s_equipmentabilitytypespecialweaponblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPESPECIALWEAPONBLOCK_ID)
	{
		{ _field_tag_reference, "weapon", &weapon_group_reference$2 },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPESPRINTBLOCK_ID { 0xC2CF2C6B, 0xAE264A0A, 0x8C1B77E3, 0x3AA738B9 }
	TAG_STRUCT(
		equipmentabilitytypesprintblock,
		"equipmentAbilityTypeSprintBlock",
		"equipmentAbilityTypeSprintBlock",
		"s_equipmentabilitytypesprintblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPESPRINTBLOCK_ID)
	{
		FIELD_PAD("haha", 1),
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPESTASISFIELDBLOCK_ID { 0x93E5892, 0xE0AA4A8E, 0x801153D9, 0xE061EC46 }
	TAG_STRUCT(
		equipmentabilitytypestasisfieldblock,
		"equipmentAbilityTypeStasisFieldBlock",
		"equipmentAbilityTypeStasisFieldBlock",
		"s_equipmentabilitytypestasisfieldblock",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPESTASISFIELDBLOCK_ID)
	{
		{ _field_long_flags, "flags", &repulsor_field_flags },
		{ _field_real, "radius", nullptr, "wu" },
		FIELD_GROUP_BEGIN("Time Dilation Values"),
		FIELD_EXPLANATION("Time Dilation", "The effective rate at which time passes for objects in the field.  Values below 0.45 screw up jumping."),
		{ _field_real, "time dilation player characters" },
		{ _field_real, "time dilation projectiles" },
		{ _field_real, "time dilation vehicles" },
		{ _field_real, "time dilation other", "everything else" },
		FIELD_GROUP_END(),
		{ _field_real, "max biped turning rate", nullptr, "no idea what units... something like .2 or so" },
		{ _field_real, "gravity multiplier", "negative values will invert gravity" },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPESUICIDEBOMBBLOCK_ID { 0xA65568DD, 0x1A5B4208, 0xA7A0D455, 0x9E304A41 }
	TAG_STRUCT(
		equipmentabilitytypesuicidebombblock,
		"equipmentAbilityTypeSuicideBombBlock",
		"equipmentAbilityTypeSuicideBombBlock",
		"s_equipmentabilitytypesuicidebombblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPESUICIDEBOMBBLOCK_ID)
	{
		{ _field_tag_reference, "explosion damage effect", &damage_effect_group_reference },
		{ _field_tag_reference, "explosion effect", &effect_group_reference },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPESUPERJUMPBLOCK_ID { 0xF8751FEC, 0xB824A62, 0x8CE0A3A6, 0x979B7F8A }
	TAG_STRUCT(
		equipmentabilitytypesuperjumpblock,
		"equipmentAbilityTypeSuperJumpBlock",
		"equipmentAbilityTypeSuperJumpBlock",
		"s_equipmentabilitytypesuperjumpblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPESUPERJUMPBLOCK_ID)
	{
		{ _field_struct, "energy to jump", &scalar_function_named_struct },
		{ _field_terminator }
	};

	#define EQUIPMENTABILITYTYPETELEPORTERBLOCK_ID { 0x6566AC44, 0x354B4E2B, 0xB5CB8234, 0xA3503CD5 }
	TAG_STRUCT(
		equipmentabilitytypeteleporterblock,
		"equipmentAbilityTypeTeleporterBlock",
		"equipmentAbilityTypeTeleporterBlock",
		"s_equipmentabilitytypeteleporterblock",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPETELEPORTERBLOCK_ID)
	{
		FIELD_EXPLANATION("Teleporter", "This causes you to warp forward.  It\'ll trace the path with an effect at the specified speed, then spawn you at the end of it."),
		{ _field_byte_flags, "flags", &teleporterflags },
		FIELD_PAD("blurgh", 3),
		{ _field_real, "teleport distance" },
		{ _field_real, "travel speed", "the speed at which you cross the teleporter distance; 0 means instant" },
		{ _field_real, "deactivation speed", "the speed you return to at the end of the teleport, if \"hide unit during transit\" isn't checked" },
		{ _field_tag_reference, "trace effect", "an effect that will follow along the travel path", &effect_group_reference },
		{ _field_real_vector_3d, "trace effect offset", "offset from the unit's origin to put the effects at" },
		{ _field_real, "max pitch (airborne)", "[-90 to 90] the pitch of the search vector will be clamped to no higher than this when starting a teleport in the air" },
		{ _field_real, "max pitch (ground)", "[-90 to 90] the pitch of the search vector will be clamped to no higher than this when starting a teleport on the ground" },
		FIELD_GROUP_BEGIN("Search Vector"),
		FIELD_EXPLANATION("Look Vector Weight", "If \"force along aim vector\" isn\'t checked, the start vector will be your motion vector, plus some amount of weight for where you\'re looking, if you\'re moving along your look vector."),
		{ _field_real, "look vector weight", "value from 0 to 1 for how much we can use the look vector in place of the movement vector" },
		{ _field_real, "look vector falloff inner", "degrees, inside this angle, we use the look vector at full weight" },
		{ _field_real, "look vector falloff outer", "degrees, outside this angle, we only use the movement vector" },
		{ _field_real, "move vector vertical offset", "degrees, how much to offset the move vector vertically; positive is up, negative is down" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Probes"),
		FIELD_EXPLANATION("Probe", "If \"disable extra probes\" isn\'t checked, we\'ll do a fan of rays vertically from our central vector, with one probe horizontally on either side of each of those rays."),
		{ _field_real, "horizontal probe angle", "degrees, the angle to each side of the horizontal probes" },
		{ _field_real, "vertical probe angle", "degrees, the angle up and down covered by the fan of vertical rays" },
		{ _field_long_integer, "number of vertical probes", "higher is more likely to find a good match, but more expensive" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Collision"),
		FIELD_EXPLANATION("Collision", "If \"hide unit during transit\" isn\'t checked, we\'ll add a cow-catcher collision volume on the front and change the collision damage type."),
		{ _field_block, "cow catcher parameters", &equipmentabilitypartcowcatcherblock_block },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(teleporterflags)
	{
		"hide unit during transit#during the teleport, hide the unit and turn off collision",
		"disable shortened teleport#makes it so that we always thrust or teleport the full distance; not wise unless \"hide unit during transit\" is unchecked",
		"disable extra probes#only the center probe is cast, no extra probes",
		"force along aim vector#ignores all search vector parameters and uses the aim vector as the search vector",
		"can pass through objects#only collides against environment and structures",
		"force along stick direction#if stick throw magnitude==0 then search in facing direction, else search in stick direction"
	};
	STRING_LIST(teleporterflags, teleporterflags_strings, _countof(teleporterflags_strings));

	#define EQUIPMENTABILITYTYPETREEOFLIFEBLOCK_ID { 0xBD1902E6, 0x186146F4, 0xB593ECBF, 0x3804E959 }
	TAG_STRUCT(
		equipmentabilitytypetreeoflifeblock,
		"equipmentAbilityTypeTreeOfLifeBlock",
		"equipmentAbilityTypeTreeOfLifeBlock",
		"s_equipmentabilitytypetreeoflifeblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPETREEOFLIFEBLOCK_ID)
	{
		{ _field_long_flags, "flags", &equipmentabilitytype_treeoflife_flags },
		{ _field_string_id, "origin marker" },
		{ _field_real, "radius" },
		{ _field_terminator }
	};

	STRINGS(equipmentabilitytype_treeoflife_flags)
	{
		"un-stuns shileds",
		"un-stuns body"
	};
	STRING_LIST(equipmentabilitytype_treeoflife_flags, equipmentabilitytype_treeoflife_flags_strings, _countof(equipmentabilitytype_treeoflife_flags_strings));

	#define EQUIPMENTABILITYTYPEVISIONMODEBLOCK_ID { 0xE888D6A, 0xBEB249B3, 0xB34F52D8, 0x1D7C208 }
	TAG_STRUCT(
		equipmentabilitytypevisionmodeblock,
		"equipmentAbilityTypeVisionModeBlock",
		"equipmentAbilityTypeVisionModeBlock",
		"s_equipmentabilitytypevisionmodeblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTABILITYTYPEVISIONMODEBLOCK_ID)
	{
		{ _field_byte_flags, "Flags", &equipmentvisionmodeflags },
		FIELD_PAD("vmbf", 3),
		{ _field_real, "maximum tell distance", "'Other activation tell effect' will be applied to players within this distance", "wu" },
		{ _field_tag_reference, "activation tell effect", "applied to other players within maximum distance", &effect_group_reference },
		{ _field_long_integer, "motion sensor tell blip ticks", "within 'maxiumum tell distance' blip duration if 'Generate tell motion sensor blip' is checked" },
		{ _field_tag_reference, "vision mode", &vision_mode_group_reference },
		{ _field_terminator }
	};

	STRINGS(equipmentvisionmodeflags)
	{
		"Apply tell damage response to friends",
		"Generate tell motion sensor blip"
	};
	STRING_LIST(equipmentvisionmodeflags, equipmentvisionmodeflags_strings, _countof(equipmentvisionmodeflags_strings));

	TAG_REFERENCE(vision_mode_group_reference, VISION_MODE_TAG);

	#define EQUIPMENTEFFECTWITHTHRESHOLDBLOCK_ID { 0x648007E, 0x418E4DDE, 0xA5C71D06, 0xCC447A75 }
	TAG_STRUCT(
		equipmenteffectwiththresholdblock,
		"equipmentEffectWithThresholdBlock",
		"equipmentEffectWithThresholdBlock",
		"s_equipmenteffectwiththresholdblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTEFFECTWITHTHRESHOLDBLOCK_ID)
	{
		{ _field_real, "threshold energy burned", "how much energy you have to burn to play this effect", "0-1" },
		{ _field_real, "energy adjustment", "how much energy to add when playing this effect", "-1 to 1" },
		{ _field_tag_reference, "effect", &effect_group_reference },
		{ _field_terminator }
	};

	#define EQUIPMENTHACKERDRAINLEVEL_ID { 0x737BF71D, 0x4FC14A0D, 0xB353676B, 0x7698A316 }
	TAG_STRUCT(
		equipmenthackerdrainlevel,
		"equipmentHackerDrainLevel",
		"equipmentHackerDrainLevel",
		"s_equipmenthackerdrainlevel",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTHACKERDRAINLEVEL_ID)
	{
		{ _field_real, "Cutoff distance", "Targets within this distance will be affected by this multiplier." },
		{ _field_real, "Drain multiplier", "Multiplied by the base drain per second." },
		{ _field_terminator }
	};

	#define EQUIPMENTSPAWNINFLUENCEBLOCK_ID { 0x2642BDE4, 0x300F4A33, 0x8ABD12F8, 0x1B904F85 }
	TAG_STRUCT(
		equipmentspawninfluenceblock,
		"equipmentSpawnInfluenceBlock",
		"equipmentSpawnInfluenceBlock",
		"s_equipmentspawninfluenceblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENTSPAWNINFLUENCEBLOCK_ID)
	{
		{ _field_tag_reference, "equipment", &equipment_group_reference$7 },
		{ _field_real, "weight" },
		{ _field_terminator }
	};

	TAG_REFERENCE(equipment_group_reference$7, EQUIPMENT_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY | TAG_REFERENCE_FLAG_DEPENDENCY_FOR_CACHE_FILE_SHARING);

	#define EQUIPMENT_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0xB7A7D0B5, 0x849B45D5, 0x9D7AEBD2, 0x7FA02CCB }
	TAG_STRUCT(
		equipment_block_index_flags_block_struct,
		"equipment_block_index_flags_block_struct",
		"equipment_block_index_flags_block_struct",
		"s_equipment_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENT_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_equipment_palette_block_block },
		{ _field_terminator }
	};

	#define EQUIPMENT_PALETTE_CHOICE_BLOCK_STRUCT_ID { 0xBCF7EEFC, 0xABE6477A, 0xB74E75D9, 0x124566A9 }
	TAG_STRUCT(
		equipment_palette_choice_block_struct,
		"equipment_palette_choice_block_struct",
		"equipment_palette_choice_block_struct",
		"s_equipment_palette_choice_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENT_PALETTE_CHOICE_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "place on", &ai_spawn_conditions_struct },
		{ _field_short_block_index, "equipment type", &scenario_equipment_palette_block_block },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_integer, "chance" },
		{ _field_terminator }
	};

	#define EQUIPMENT_REF_CHOICE_BLOCK_STRUCT_ID { 0xADF3A9B8, 0xFACA4EA7, 0xAA2C6D31, 0xDF704939 }
	TAG_STRUCT(
		equipment_ref_choice_block_struct,
		"equipment_ref_choice_block_struct",
		"equipment_ref_choice_block_struct",
		"s_equipment_ref_choice_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENT_REF_CHOICE_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "place on", &ai_spawn_conditions_struct },
		{ _field_tag_reference, "equipment type", &equipment_group_reference$6 },
		{ _field_short_integer, "chance" },
		FIELD_PAD("post-chance", 2),
		{ _field_terminator }
	};

	TAG_REFERENCE(equipment_group_reference$6, EQUIPMENT_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define EQUIPMENT_STRUCT_DEFINITION_ID { 0x18B70662, 0x869349C3, 0xB79E4FBE, 0xC65A52CB }
	VERSIONED_TAG_STRUCT(
		equipment_struct_definition,
		"equipment_struct_definition",
		"equipment_struct_definition",
		"s_equipment_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EQUIPMENT_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 32 },
		{ _field_struct, "item", &item_struct_definition }, // structure_version:1
		FIELD_GROUP_BEGIN("$$$ EQUIPMENT $$$"),
		FIELD_GROUP_BEGIN("Energy"),
		{ _field_real, "initial energy" },
		{ _field_real, "energy recovery time", "after deactivation, energy stays constant for this long before starting to change by 'inactive energy rate'", "seconds" },
		{ _field_real, "inactive energy rate", nullptr, "energy/second" },
		FIELD_GROUP_END(),
		{ _field_long_flags, "flags", &equipment_flags },
		{ _field_string_id, "unit stow marker name", "the marker on the unit to attach this equipment to when it is stowed.\nThe equipment should have a marker named \"equipment_stow_anchor\"" },
		{ _field_char_enum, "pickup behavior", &equipment_pickup_behavior },
		FIELD_PAD("IJKMOP", 3),
		{ _field_real_argb_color, "forced primary change color", "sets the primary change color on the unit to this if the flag above is checked" },
		{ _field_real_argb_color, "forced secondary change color", "sets the secondary change color on the unit to this if the flag above is checked" },
		FIELD_GROUP_BEGIN("AI"),
		FIELD_EXPLANATION("AI", "Settings which the AI use to know how they should react to this equipment"),
		{ _field_real, "danger radius", "How large a danger zone we should create around this equipment (0 means no danger zone)" },
		{ _field_real, "min deployment distance", "How far does my target have to be for me to throw this at them?", "wus" },
		{ _field_real, "awareness time", "How long I should go unnoticed by nearby enemies", "seconds" },
		{ _field_string_id, "ai dialogue equipment type", "The equipment ability type name used by the ai dialog system used to filter equipment activation dialogue events." },
		FIELD_GROUP_END(),
		{ _field_block, "override camera", &optionalunitcamerablock_block },
		{ _field_block, "abilities", &equipmentabilitydatum_block },
		{ _field_char_enum, "damage reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("LKSHFDIJ", 3),
		{ _field_tag_reference, "hud screen reference", &cui_screen_group_reference },
		{ _field_tag_reference, "pickup sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "energy charged effect", &effect_group_reference },
		{ _field_tag_reference, "unable to activate sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "Player sound bank", "High quality player sound bank to be prefetched. Can be empty.", &soundbank_group_reference },
		{ _field_block, "Sound RTPCs", &equipmentsoundrtpcblock_block },
		{ _field_block, "Sound Sweeteners", &equipmentsoundsweetenerblock_block },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 121 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ ITEM $$$"),
		{ _field_long_flags, "flags", &item_definition_flags },
		{ _field_short_integer, "OLD message index" },
		{ _field_short_integer, "sort order" },
		{ _field_real, "OLD multiplayer on-ground scale" },
		{ _field_real, "OLD campaign on-ground scale" },
		FIELD_EXPLANATION("NEW hud messages", "everything you need to display shite"),
		{ _field_string_id, "pickup message" },
		{ _field_string_id, "swap message" },
		{ _field_string_id, "pickup message (dual)" },
		{ _field_string_id, "swap message (dual)" },
		{ _field_string_id, "picked up msg" },
		{ _field_string_id, "switch-to msg" },
		{ _field_string_id, "switch-to from ai msg" },
		{ _field_string_id, "notify empty msg" },
		{ _field_string_id, "notify overheated message" },
		{ _field_tag_reference, "collision sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_block, "predicted bitmaps", &predicted_bitmaps_block_block },
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_reference },
		{ _field_real_bounds, "detonation delay", nullptr, "seconds" },
		{ _field_tag_reference, "detonating effect", &effect_group_reference },
		{ _field_tag_reference, "detonation effect", &effect_group_reference },
		FIELD_EXPLANATION("Item scale settings", "because grenades look better as coconuts. 0==1"),
		{ _field_real, "ground scale" },
		{ _field_real, "small unit (armed)" },
		{ _field_real, "small unit (stowed)" },
		{ _field_real, "medium unit (armed)" },
		{ _field_real, "medium unit (stowed)" },
		{ _field_real, "large unit (armed)" },
		{ _field_real, "large unit (stowed)" },
		{ _field_real, "huge unit (armed)" },
		{ _field_real, "huge unit (stowed)" },
		{ _field_tag_reference, "grounded friction settings", "If not present, the default from global.globals is used.", &grounded_friction_group_reference },
		{ _field_tag_reference, "Tossed Override", "Used to override the object tossed when item owner is killed.  Is overridden by tossed weapon override.", &object_group_reference$3 },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ EQUIPMENT $$$"),
		FIELD_GROUP_BEGIN("Energy"),
		{ _field_real, "initial energy" },
		{ _field_real, "energy recovery time", "after deactivation, energy stays constant for this long before starting to change by 'inactive energy rate'", "seconds" },
		{ _field_real, "inactive energy rate", nullptr, "energy/second" },
		FIELD_GROUP_END(),
		{ _field_long_flags, "flags", &equipment_flags },
		{ _field_string_id, "unit stow marker name", "the marker on the unit to attach this equipment to when it is stowed.\nThe equipment should have a marker named \"equipment_stow_anchor\"" },
		{ _field_char_enum, "pickup behavior", &equipment_pickup_behavior },
		FIELD_PAD("IJKMOP", 3),
		{ _field_real_argb_color, "forced primary change color", "sets the primary change color on the unit to this if the flag above is checked" },
		{ _field_real_argb_color, "forced secondary change color", "sets the secondary change color on the unit to this if the flag above is checked" },
		FIELD_GROUP_BEGIN("AI"),
		FIELD_EXPLANATION("AI", "Settings which the AI use to know how they should react to this equipment"),
		{ _field_real, "danger radius", "How large a danger zone we should create around this equipment (0 means no danger zone)" },
		{ _field_real, "min deployment distance", "How far does my target have to be for me to throw this at them?", "wus" },
		{ _field_real, "awareness time", "How long I should go unnoticed by nearby enemies", "seconds" },
		{ _field_string_id, "ai dialogue equipment type", "The equipment ability type name used by the ai dialog system used to filter equipment activation dialogue events." },
		FIELD_GROUP_END(),
		{ _field_block, "override camera", &optionalunitcamerablock_block },
		{ _field_block, "abilities", &equipmentabilitydatum_block },
		{ _field_char_enum, "damage reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("LKSHFDIJ", 3),
		{ _field_tag_reference, "hud screen reference", &cui_screen_group_reference },
		{ _field_tag_reference, "pickup sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "energy charged effect", &effect_group_reference },
		{ _field_tag_reference, "unable to activate sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "Player sound bank", "High quality player sound bank to be prefetched. Can be empty.", &soundbank_group_reference },
		{ _field_block, "Sound RTPCs", &equipmentsoundrtpcblock_block },
		{ _field_block, "Sound Sweeteners", &equipmentsoundsweetenerblock_block },
		FIELD_GROUP_END(),
		
		{ _field_terminator }
	};

	STRINGS(equipment_flags)
	{
		"pathfinding obstacle",
		"equipment is dangerous to ai",
		"never dropped by ai#if an actor dies while carrying this, it gets deleted immediately\ndoes not affect dropping by players",
		"protects parent from AOE",
		"3rd person camera always",
		"use forced primary change color",
		"use forced secondary change color",
		"can not be picked up by player",
		"is removed from world on deactivation#used with supercombine attach",
		"is dropped by player",
		"is dropped by ai"
	};
	STRING_LIST(equipment_flags, equipment_flags_strings, _countof(equipment_flags_strings));

	STRINGS(equipment_pickup_behavior)
	{
		"automatic if empty#picks it up automatically, if you have no equipment in your inventory, otherwise, press RB to swap",
		"always automatic#always picks it up, whether or not you have another piece of equipment",
		"manual#press RB to pickup or swap this equipment",
		"activate on ground#Never pickup, press RB to activate it in-place"
	};
	STRING_LIST(equipment_pickup_behavior, equipment_pickup_behavior_strings, _countof(equipment_pickup_behavior_strings));

	STRINGS(item_definition_flags)
	{
		"always maintains z up",
		"blocks headshots#like jackal shield",
		"use ground scale for all unspecified attachments",
		"fixup position upon detaching from parent",
		"fixup position after attaching to parent"
	};
	STRING_LIST(item_definition_flags, item_definition_flags_strings, _countof(item_definition_flags_strings));

	TAG_REFERENCE(grounded_friction_group_reference, GROUNDED_FRICTION_TAG);

	TAG_REFERENCE(object_group_reference$3, OBJECT_TAG);

	#define ERROR_POINT_NODE_INDEX_ARRAY_STRUCT_DEFINITION_ID { 0xB0BC81FE, 0xF4FF4938, 0xBA0BD7A5, 0xCE3EBDC0 }
	TAG_STRUCT(
		error_point_node_index_array_struct_definition,
		"error_point_node_index_array",
		"error_point_node_index_array",
		"s_error_point_node_index_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ERROR_POINT_NODE_INDEX_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	#define ERROR_POINT_NODE_WEIGHT_ARRAY_STRUCT_DEFINITION_ID { 0xFA129333, 0xA37C4DC7, 0xB1050C1B, 0x12F05638 }
	TAG_STRUCT(
		error_point_node_weight_array_struct_definition,
		"error_point_node_weight_array",
		"error_point_node_weight_array",
		"s_error_point_node_weight_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ERROR_POINT_NODE_WEIGHT_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "node weight" },
		{ _field_terminator }
	};

	#define ERROR_REPORT_COMMENTS_BLOCK_ID { 0x709A9566, 0xDEA34617, 0x8AFF50B9, 0xDB6DE950 }
	TAG_STRUCT(
		error_report_comments_block,
		"error report comment",
		"error_report_comments_block",
		"s_error_report_comments_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ERROR_REPORT_COMMENTS_BLOCK_ID)
	{
		{ _field_data, "text", &error_report_string_data },
		{ _field_struct, "point", &error_report_point_definition },
		{ _field_real_argb_color, "color" },
		{ _field_terminator }
	};

	#define ERROR_REPORT_LINE_POINT_ARRAY_STRUCT_DEFINITION_ID { 0xF4729E0, 0x338142C9, 0xBB1ABDAE, 0x4888C89A }
	TAG_STRUCT(
		error_report_line_point_array_struct_definition,
		"error_report_line_point_array",
		"error_report_line_point_array",
		"s_error_report_line_point_array",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ERROR_REPORT_LINE_POINT_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_struct, "point", &error_report_point_definition },
		{ _field_terminator }
	};

	#define ERROR_REPORT_LINES_BLOCK_ID { 0x1C172D3C, 0x604A4356, 0x8F1BDE48, 0xE0CA8284 }
	TAG_STRUCT(
		error_report_lines_block,
		"error report line",
		"error_report_lines_block",
		"s_error_report_lines_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ERROR_REPORT_LINES_BLOCK_ID)
	{
		{ _field_array, "points", &error_report_line_point_array$2 },
		{ _field_real_argb_color, "color" },
		{ _field_terminator }
	};

	#define ERROR_REPORT_POINT_DEFINITION_ID { 0xB6C2368C, 0x78534A62, 0x9882F40C, 0xE2181EF5 }
	TAG_STRUCT(
		error_report_point_definition,
		"error_report_point_definition",
		"error_report_point_definition",
		"s_error_report_point_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ERROR_REPORT_POINT_DEFINITION_ID)
	{
		{ _field_real_point_3d, "position" },
		{ _field_array, "node indices", &error_point_node_index_array$2 },
		{ _field_array, "node weights", &error_point_node_weight_array$2 },
		{ _field_terminator }
	};

	#define ERROR_REPORT_QUAD_POINT_ARRAY_STRUCT_DEFINITION_ID { 0x81027CE9, 0xA0E42FD, 0xAE95FE26, 0x6EB082A3 }
	TAG_STRUCT(
		error_report_quad_point_array_struct_definition,
		"error_report_quad_point_array",
		"error_report_quad_point_array",
		"s_error_report_quad_point_array",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ERROR_REPORT_QUAD_POINT_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_struct, "point", &error_report_point_definition },
		{ _field_terminator }
	};

	#define ERROR_REPORT_QUADS_BLOCK_ID { 0xD1071621, 0xE7D84305, 0x8AEA9FCC, 0xC52955BF }
	TAG_STRUCT(
		error_report_quads_block,
		"error report quad",
		"error_report_quads_block",
		"s_error_report_quads_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ERROR_REPORT_QUADS_BLOCK_ID)
	{
		{ _field_array, "points", &error_report_quad_point_array$2 },
		{ _field_real_argb_color, "color" },
		{ _field_terminator }
	};

	#define ERROR_REPORT_TRIANGLE_POINT_ARRAY_STRUCT_DEFINITION_ID { 0xD7176398, 0xDDD84F94, 0x8AFE9068, 0x59AEA189 }
	TAG_STRUCT(
		error_report_triangle_point_array_struct_definition,
		"error_report_triangle_point_array",
		"error_report_triangle_point_array",
		"s_error_report_triangle_point_array",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ERROR_REPORT_TRIANGLE_POINT_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_struct, "point", &error_report_point_definition },
		{ _field_terminator }
	};

	#define ERROR_REPORT_TRIANGLES_BLOCK_ID { 0xF926E761, 0x1244E3, 0x85173116, 0x2B96347A }
	TAG_STRUCT(
		error_report_triangles_block,
		"error report triangle",
		"error_report_triangles_block",
		"s_error_report_triangles_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ERROR_REPORT_TRIANGLES_BLOCK_ID)
	{
		{ _field_array, "points", &error_report_triangle_point_array$2 },
		{ _field_real_argb_color, "color" },
		{ _field_terminator }
	};

	#define ERROR_REPORT_VECTORS_BLOCK_ID { 0xF617E038, 0xB4E4E8D, 0xAF4F86B9, 0x2745E1F }
	TAG_STRUCT(
		error_report_vectors_block,
		"error report vector",
		"error_report_vectors_block",
		"s_error_report_vectors_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ERROR_REPORT_VECTORS_BLOCK_ID)
	{
		{ _field_struct, "point", &error_report_point_definition },
		{ _field_real_argb_color, "color" },
		{ _field_real_vector_3d, "normal" },
		{ _field_real, "screen length" },
		{ _field_terminator }
	};

	#define ERROR_REPORT_VERTICES_BLOCK_ID { 0xB44D11D1, 0xA884463D, 0xB9552513, 0xE390450 }
	TAG_STRUCT(
		error_report_vertices_block,
		"error report vertex",
		"error_report_vertices_block",
		"s_error_report_vertices_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ERROR_REPORT_VERTICES_BLOCK_ID)
	{
		{ _field_struct, "point", &error_report_point_definition },
		{ _field_real_argb_color, "color" },
		{ _field_real, "screen size" },
		{ _field_terminator }
	};

	#define ERROR_REPORTS_BLOCK_ID { 0xEE6AAB20, 0x3227499F, 0x914508D6, 0x40FCAA9E }
	TAG_STRUCT(
		error_reports_block,
		"error report",
		"error_reports_block",
		"s_error_reports_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ERROR_REPORTS_BLOCK_ID)
	{
		{ _field_char_enum, "type", &error_report_types },
		{ _field_char_enum, "source", &error_report_source },
		{ _field_word_flags, "flags", &error_report_flags },
		{ _field_data, "text", &error_report_string_data },
		{ _field_long_integer, "source identifier" },
		{ _field_string, "source filename" },
		{ _field_long_integer, "source line number" },
		{ _field_block, "vertices", &error_report_vertices_block_block },
		{ _field_block, "vectors", &error_report_vectors_block_block },
		{ _field_block, "lines", &error_report_lines_block_block },
		{ _field_block, "triangles", &error_report_triangles_block_block },
		{ _field_block, "quads", &error_report_quads_block_block },
		{ _field_block, "comments", &error_report_comments_block_block },
		{ _field_long_integer, "report key" },
		{ _field_long_integer, "node index" },
		{ _field_real_bounds, "bounds x" },
		{ _field_real_bounds, "bounds y" },
		{ _field_real_bounds, "bounds z" },
		{ _field_real_argb_color, "color" },
		{ _field_terminator }
	};

	STRINGS(error_report_types)
	{
		"silent",
		"comment",
		"warning",
		"error"
	};
	STRING_LIST(error_report_types, error_report_types_strings, _countof(error_report_types_strings));

	STRINGS(error_report_source)
	{
		"none",
		"structure",
		"poop",
		"lightmap",
		"pathfinding"
	};
	STRING_LIST(error_report_source, error_report_source_strings, _countof(error_report_source_strings));

	STRINGS(error_report_flags)
	{
		"rendered",
		"tangent-space",
		"non-critical",
		"lightmap light",
		"report key is valid"
	};
	STRING_LIST(error_report_flags, error_report_flags_strings, _countof(error_report_flags_strings));

	#define EVALUATOR_DEFINITION_BLOCK_STRUCT_ID { 0xEE367F5D, 0xB9EC4F58, 0xBD6927D4, 0xC837E203 }
	TAG_STRUCT(
		evaluator_definition_block_struct,
		"evaluator_definition_block_struct",
		"evaluator_definition_block_struct",
		"s_evaluator_definition_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EVALUATOR_DEFINITION_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("EVALUATOR", "The firing point evaluation properties for a single evaluator. Treat with great care and respect."),
		{ _field_long_enum, "evaluator", &evaluator_enum },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_real, "preference weight" },
		{ _field_real, "avoidance weight" },
		{ _field_terminator }
	};

	STRINGS(evaluator_enum)
	{
		"INVALID&INVALID (pre)",
		"attack_avoid_overhead&attack_avoid_overhead (pre)",
		"attack_dangerousenemy&attack_dangerousenemy (pre)",
		"attack_idealrange&attack_idealrange (pre)",
		"attack_leader_distance&attack_leader_distance (pre)",
		"attack_same_frame_of_reference&attack_same_frame_of_reference (pre)",
		"attack_weaponrange&attack_weaponrange (pre)",
		"combat_cue&combat_cue (pre)",
		"combatmove_elevation&combatmove_elevation (pre)",
		"combatmove_follow_unit&combatmove_follow_unit (pre)",
		"combatmove_lineoffire&combatmove_lineoffire (pre)",
		"combatmove_lineoffire_occluded&combatmove_lineoffire_occluded (pre)",
		"cover_near_friends&cover_near_friends (pre)",
		"current_position&current_position (pre)",
		"current_destination&current_destination (pre)",
		"cover_fight&cover_fight (pre)",
		"danger_zone&danger_zone (pre)",
		"directional_movement&directional_movement (pre)",
		"facing&facing (pre)",
		"fireteam_leader&fireteam_leader (pre)",
		"flag_preferences&flag_preferences (pre)",
		"flank&flank (pre)",
		"flee_to_leader&flee_to_leader (pre)",
		"friendly&friendly (pre)",
		"friend_bunkering&friend_bunkering (pre)",
		"goal_points_only&goal_points_only (pre)",
		"goal_preferences&goal_preferences (pre)",
		"heatmap&heatmap (pre)",
		"hide_equipment&hide_equipment (pre)",
		"idle_wander&idle_wander (pre)",
		"inertia_preservation&inertia_preservation (pre)",
		"leadership&leadership (pre)",
		"movement_planning&movement_planning (pre)",
		"move_into_danger_zone&move_into_danger_zone (pre)",
		"move_distance&move_distance (pre)",
		"move_localized&move_localized (pre)",
		"multi_target&multi_target (pre)",
		"pack_stalk&pack_stalk (pre)",
		"panic_closetotarget&panic_closetotarget (pre)",
		"panic_targetdistance&panic_targetdistance (pre)",
		"pathfinding&pathfinding (pre)",
		"perch_preferences&perch_preferences (pre)",
		"postsearch_prefer_original&postsearch_prefer_original (pre)",
		"previously_discarded&previously_discarded (pre)",
		"pursuit_search_pattern&pursuit_search_pattern (pre)",
		"ranged_fight&ranged_fight (pre)",
		"squad_patrol_search&squad_patrol_search (pre)",
		"stalking&stalking (pre)",
		"stimulus&stimulus (pre)",
		"task_direction&task_direction (pre)",
		"threat_axis_nearby&threat_axis_nearby (pre)",
		"threat_axis_quarter&threat_axis_quarter (pre)",
		"threat_axis_spring&threat_axis_spring (pre)",
		"threat_axis_spring_reject&threat_axis_spring_reject (pre)",
		"threat_axis_third&threat_axis_third (pre)",
		"score&score (pre)",
		"too_far_from_leader&too_far_from_leader (pre)",
		"vehicle_move_distance&vehicle_move_distance (pre)",
		"vehicle_pickup&vehicle_pickup (pre)",
		"wall_leanable&wall_leanable (pre)",
		"3d_path_available&3d_path_available (post)",
		"attack_visible&attack_visible (post)",
		"attack_visible_los_optional&attack_visible_los_optional (post)",
		"guard_cover&guard_cover (post)",
		"hide_cover&hide_cover (post)",
		"uncover_visible&uncover_visible (post)",
		"vehicle_hide_cover&vehicle_hide_cover (post)",
		"cover_fight_post&cover_fight_post (post)",
		"obstacle&obstacle (post)"
	};
	STRING_LIST(evaluator_enum, evaluator_enum_strings, _countof(evaluator_enum_strings));

	#define EXPLICIT_SHADER_REFS_BLOCK_ID { 0xD3D3046B, 0xF1924CAB, 0x95BC117B, 0x3CCD846F }
	TAG_STRUCT(
		explicit_shader_refs_block,
		"explicit_shader_refs_block",
		"explicit_shader_refs_block",
		"s_explicit_shader_refs_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EXPLICIT_SHADER_REFS_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_tag_reference, "explicit vertex shader", &material_group_material_shader_group_vertex_shader_group_reference },
		{ _field_tag_reference, "explicit pixel shader", &material_group_material_shader_group_pixel_shader_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(material_group_material_shader_group_vertex_shader_group_reference)
	{
		MATERIAL_TAG,
		MATERIAL_SHADER_TAG,
		VERTEX_SHADER_TAG,
		INVALID_TAG
	};

	TAG_REFERENCE_GROUP(material_group_material_shader_group_pixel_shader_group_reference)
	{
		MATERIAL_TAG,
		MATERIAL_SHADER_TAG,
		PIXEL_SHADER_TAG,
		INVALID_TAG
	};

	#define EXPRESSION_ID { 0xF090B187, 0x9D744CDD, 0x8C3A7A52, 0x1D6BE899 }
	TAG_STRUCT(
		expression,
		"expression",
		"expression",
		"s_expression",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EXPRESSION_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_string, "expression text" },
		{ _field_block, "steps", &expression_step_block },
		{ _field_terminator }
	};

	#define EXPRESSION_STEP_ID { 0xCC3B2DB9, 0x9A254A83, 0x8CA2994F, 0xF92E432B }
	TAG_STRUCT(
		expression_step,
		"expression_step",
		"expression_step",
		"s_expression_step",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EXPRESSION_STEP_ID)
	{
		{ _field_char_enum, "step type", &step_type },
		{ _field_char_enum, "operator", &step_operator },
		{ _field_char_enum, "variable", &step_variable },
		FIELD_PAD("pad0", 1),
		{ _field_real, "value" },
		{ _field_string_id, "string id value" },
		{ _field_terminator }
	};

	STRINGS(step_type)
	{
		"operator",
		"variable",
		"real value",
		"string id value"
	};
	STRING_LIST(step_type, step_type_strings, _countof(step_type_strings));

	STRINGS(step_operator)
	{
		"add",
		"subtract",
		"multiply",
		"divide",
		"negate",
		"not",
		"less than",
		"less than or equal to",
		"greater than",
		"greater than or equal to",
		"equals",
		"not equals",
		"and",
		"or",
		"mod"
	};
	STRING_LIST(step_operator, step_operator_strings, _countof(step_operator_strings));

	STRINGS(step_variable)
	{
		"variable a",
		"variable b",
		"variable c",
		"variable d",
		"variable e",
		"variable f",
		"variable g",
		"variable h"
	};
	STRING_LIST(step_variable, step_variable_strings, _countof(step_variable_strings));

	#define EXTERNPARAMETERBLOCK_ID { 0x72118236, 0xB22C4F91, 0xA645DAAF, 0xABE7A5BB }
	TAG_STRUCT(
		externparameterblock,
		"externParameterBlock",
		"externParameterBlock",
		"s_externparameterblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		EXTERNPARAMETERBLOCK_ID)
	{
		{ _field_byte_integer, "extern index" },
		{ _field_byte_integer, "extern register" },
		{ _field_byte_integer, "extern offset" },
		{ _field_byte_integer, "render phase mask" },
		{ _field_terminator }
	};

	#define FACIAL_ANIMATION_CURVE_BLOCK_STRUCT_ID { 0xA566493B, 0x9431409F, 0xABE0F9B2, 0x19D5B5C8 }
	TAG_STRUCT(
		facial_animation_curve_block_struct,
		"facial_animation_curve_block_struct",
		"facial_animation_curve_block_struct",
		"s_facial_animation_curve_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FACIAL_ANIMATION_CURVE_BLOCK_STRUCT_ID)
	{
		{ _field_long_enum, "facial animation track", &facial_animation_track_enum_definition },
		{ _field_long_integer, "facial animation curve data offset" },
		{ _field_long_integer, "facial animation curve data size" },
		{ _field_terminator }
	};

	STRINGS(facial_animation_track_enum_definition)
	{
		"Silence",
		"Eat",
		"Earth",
		"If",
		"Ox",
		"Oat",
		"Wet",
		"Size",
		"Church",
		"Fave",
		"Though",
		"Told",
		"Bump",
		"New",
		"Roar",
		"Cage",
		"Eyebrow_Raise",
		"Blink",
		"Orientation_Head_Pitch",
		"Orientation_Head_Roll",
		"Orientation_Head_Yaw",
		"Emphasis_Head_Pitch",
		"Emphasis_Head_Roll",
		"Emphasis_Head_Yaw",
		"Gaze_Eye_Pitch",
		"Gaze_Eye_Yaw",
		"happy",
		"sad",
		"angry",
		"disgusted",
		"scared",
		"surprised",
		"pain",
		"shout"
	};
	STRING_LIST(facial_animation_track_enum_definition, facial_animation_track_enum_definition_strings, _countof(facial_animation_track_enum_definition_strings));

	#define FACIAL_ANIMATION_LANGUAGE_BLOCK_STRUCT_ID { 0x5280F0A0, 0xA2804A45, 0xB6512D45, 0x32312FB4 }
	TAG_STRUCT(
		facial_animation_language_block_struct,
		"facial_animation_language_block_struct",
		"facial_animation_language_block_struct",
		"s_facial_animation_language_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FACIAL_ANIMATION_LANGUAGE_BLOCK_STRUCT_ID)
	{
		{ _field_pageable_resource, "facial animation resource", &facial_animation_resource_definition },
		{ _field_long_enum, "language", &sound_language_enum_definition },
		{ _field_terminator }
	};

	STRINGS(sound_language_enum_definition)
	{
		"english",
		"japanese",
		"german",
		"french",
		"spanish",
		"mexican spanish",
		"italian",
		"korean",
		"chinese-traditional",
		"chinese-simplified",
		"portuguese",
		"polish",
		"russian",
		"danish",
		"finnish",
		"dutch",
		"norwegian"
	};
	STRING_LIST(sound_language_enum_definition, sound_language_enum_definition_strings, _countof(sound_language_enum_definition_strings));

	#define FACIAL_ANIMATION_PERMUTATION_BLOCK_STRUCT_ID { 0xEFE0F99, 0x36EC4871, 0xA87914A5, 0x6551CE61 }
	TAG_STRUCT(
		facial_animation_permutation_block_struct,
		"facial_animation_permutation_block_struct",
		"facial_animation_permutation_block_struct",
		"s_facial_animation_permutation_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FACIAL_ANIMATION_PERMUTATION_BLOCK_STRUCT_ID)
	{
		{ _field_real, "start time" },
		{ _field_real, "end time" },
		{ _field_real, "blend in" },
		{ _field_real, "blend out" },
		{ _field_block, "facial animation curves", &facial_animation_curve_block_block },
		{ _field_terminator }
	};

	#define FACIAL_ANIMATION_RESOURCE_DEFINITION_STRUCT_ID { 0x268C469E, 0xD68743D8, 0x898CC9F7, 0xC60502E7 }
	TAG_STRUCT(
		facial_animation_resource_definition_struct,
		"facial_animation_resource_definition_struct",
		"facial_animation_resource_definition_struct",
		"s_facial_animation_resource_definition_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FACIAL_ANIMATION_RESOURCE_DEFINITION_STRUCT_ID)
	{
		{ _field_block, "facial animation permutations", &facial_animation_permutation_block_block },
		{ _field_data, "compressed facial animation curve data", &compressed_facial_animation_curve_data },
		{ _field_terminator }
	};

	#define FIK_ANCHOR_NODE_BLOCK_ID { 0x34216E16, 0xB26A414B, 0xA0C0515C, 0x926F5CFF }
	TAG_STRUCT(
		fik_anchor_node_block,
		"fik_anchor_node_block",
		"fik_anchor_node_block",
		"s_fik_anchor_node_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FIK_ANCHOR_NODE_BLOCK_ID)
	{
		{ _field_short_block_index, "anchor node", &animation_graph_node_block_block },
		FIELD_PAD("dse", 2),
		{ _field_terminator }
	};

	#define FILE_LOCATION_INDEXES_ARRAY_DEFINITION_STRUCT_DEFINITION_ID { 0x955AB4BE, 0x60C811E0, 0x86CB7C27, 0xE0D72085 }
	TAG_STRUCT(
		file_location_indexes_array_definition_struct_definition,
		"file_location_indexes_array_definition",
		"file_location_indexes_array_definition",
		"s_file_location_indexes_array_definition",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FILE_LOCATION_INDEXES_ARRAY_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_short_block_index, "page index", &cache_file_resource_file_page_block_block },
		{ _field_terminator }
	};

	#define FIRE_BOMB_GRENADE_BLOCK_ID { 0x9184400, 0x5A34419E, 0xB4FB0517, 0x990A5438 }
	TAG_STRUCT(
		fire_bomb_grenade_block,
		"fire_bomb_grenade_block",
		"fire_bomb_grenade_block",
		"s_fire_bomb_grenade_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FIRE_BOMB_GRENADE_BLOCK_ID)
	{
		{ _field_real, "projection offset" },
		{ _field_terminator }
	};

	#define FIREFIGHTWAVETEMPLATESBLOCK_STRUCT_ID { 0xB9922FA, 0x1881452F, 0xB4D24003, 0x5C0B4463 }
	TAG_STRUCT(
		firefightwavetemplatesblock_struct,
		"firefightWaveTemplatesBlock_struct",
		"firefightWaveTemplatesBlock_struct",
		"s_firefightwavetemplatesblock_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FIREFIGHTWAVETEMPLATESBLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_tag_reference, "wave template", &wave_template_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(wave_template_group_reference, WAVE_TEMPLATE_TAG);

	#define FIREFIGHT_GLOBALS_BLOCK_STRUCT_ID { 0xEA3163B8, 0xA323445B, 0x94142215, 0x9CA868DD }
	TAG_STRUCT(
		firefight_globals_block_struct,
		"firefight_globals_block_struct",
		"firefight_globals_block_struct",
		"s_firefight_globals_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FIREFIGHT_GLOBALS_BLOCK_STRUCT_ID)
	{
		{ _field_block, "wave templates", &firefightwavetemplatesblock_block },
		{ _field_tag_reference, "co-op spawning", &coop_spawning_globals_definition_group_reference },
		FIELD_EXPLANATION("PLAYER SPAWN INFLUENCERS", "These are the default spawn influencer settings which can be overridden by scenario tags"),
		{ _field_tag_reference, "Influencer default spawn settings", &spawnsettings_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(coop_spawning_globals_definition_group_reference, COOP_SPAWNING_GLOBALS_DEFINITION_TAG);

	TAG_REFERENCE(spawnsettings_group_reference, SPAWNSETTINGS_TAG);

	#define FIRING_POINT_PAYLOAD_BLOCK_STRUCT_ID { 0x6558B362, 0xE6E44C39, 0xA65A64FC, 0x61CE475 }
	TAG_STRUCT(
		firing_point_payload_block_struct,
		"firing_point_payload_block_struct",
		"firing_point_payload_block_struct",
		"s_firing_point_payload_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FIRING_POINT_PAYLOAD_BLOCK_STRUCT_ID)
	{
		{ _field_real, "radius" },
		{ _field_terminator }
	};

	#define FIRING_POSITIONS_BLOCK_ID { 0xA8B4FE85, 0xA9034300, 0xAFABFF3A, 0xA083CEF9 }
	TAG_STRUCT(
		firing_positions_block,
		"firing_positions_block",
		"firing_positions_block",
		"s_firing_positions_block",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FIRING_POSITIONS_BLOCK_ID)
	{
		FIELD_EXPLANATION("CONTROLS", "Ctrl-N: Creates a new area and assigns it to the current selection of firing points."),
		{ _field_real_point_3d, "position (local)" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_word_flags, "flags", &g_firing_position_flags },
		{ _field_word_flags, "posture flags", &g_firing_position_posture_flags },
		{ _field_short_block_index, "area", &areas_block_block },
		{ _field_short_integer, "cluster index" },
		{ _field_short_integer, "cluster bsp" },
		{ _field_char_integer, "bits and pad" },
		FIELD_PAD("PAD1", 1),
		{ _field_real_euler_angles_2d, "normal" },
		FIELD_CUSTOM("value", _tag_field_custom_type_unknown_facing),
		{ _field_angle, "facing" },
		{ _field_long_integer, "lastAbsoluteRejectionGameTime" },
		{ _field_terminator }
	};

	#define FIRSTPERSONPHIDDENBODYREGIONSBLOCK_ID { 0xB6C7F81F, 0x2D744D11, 0x9CA9B38F, 0x50F32BC5 }
	TAG_STRUCT(
		firstpersonphiddenbodyregionsblock,
		"firstPersonpHiddenBodyRegionsBlock",
		"firstPersonpHiddenBodyRegionsBlock",
		"s_firstpersonphiddenbodyregionsblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FIRSTPERSONPHIDDENBODYREGIONSBLOCK_ID)
	{
		{ _field_string_id, "hidden region" },
		{ _field_byte_flags, "flags", &fpbodyregionflags },
		FIELD_PAD("pad", 3),
		{ _field_terminator }
	};

	STRINGS(fpbodyregionflags)
	{
		"visible in ICS"
	};
	STRING_LIST(fpbodyregionflags, fpbodyregionflags_strings, _countof(fpbodyregionflags_strings));

	#define FLIGHT_REFERENCE_BLOCK_ID { 0xCB74EBB1, 0x491241BB, 0x95438C3E, 0x3B97578A }
	TAG_STRUCT(
		flight_reference_block,
		"flight_reference_block",
		"flight_reference_block",
		"s_flight_reference_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FLIGHT_REFERENCE_BLOCK_ID)
	{
		{ _field_short_integer, "flight hint index" },
		{ _field_short_integer, "point index" },
		{ _field_short_integer, "structure index" },
		FIELD_PAD("post-structure-index-pad", 2),
		{ _field_terminator }
	};

	#define FLIGHT_SURFACE_STRUCT_ID { 0xFAEAB480, 0x1A314F26, 0xA1C012D9, 0xD7ABD2D0 }
	TAG_STRUCT(
		flight_surface_struct,
		"flight_surface_struct",
		"flight_surface_struct",
		"s_flight_surface_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FLIGHT_SURFACE_STRUCT_ID)
	{
		{ _field_char_enum, "offset axis", &dimensions_enum },
		{ _field_char_enum, "pivot axis", &dimensions_enum },
		{ _field_char_enum, "rotation axis", &dimensions_enum },
		{ _field_char_enum, "normal axis", &dimensions_enum },
		{ _field_real, "offset distance" },
		{ _field_real, "pivot distance" },
		FIELD_EXPLANATION("normal force", "force= k*CEILING(SQR(q*velocity), function_ceiling)"),
		{ _field_real, "q" },
		{ _field_real, "k" },
		{ _field_real, "function ceiling" },
		{ _field_angle, "maximum angle" },
		{ _field_real, "render debug radius" },
		{ _field_terminator }
	};

	STRINGS(dimensions_enum)
	{
		"foward",
		"left",
		"up"
	};
	STRING_LIST(dimensions_enum, dimensions_enum_strings, _countof(dimensions_enum_strings));

	#define FLOCK_DESTINATION_BLOCK_ID { 0xD589E46E, 0x232B452B, 0x903E75E4, 0x6F72DBA3 }
	TAG_STRUCT(
		flock_destination_block,
		"flock_destination_block",
		"flock_destination_block",
		"s_flock_destination_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FLOCK_DESTINATION_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_enum, "type", &destination_type_enum },
		{ _field_real_vector_3d, "position" },
		{ _field_real, "radius" },
		{ _field_real, "max destination volume penetration", "The farthest the boid will go inside our destination volume", "wu" },
		{ _field_short_block_index, "destination volume", &scenario_trigger_volume_block_block },
		FIELD_PAD("post-destination-volume", 2),
		{ _field_terminator }
	};

	STRINGS(destination_type_enum)
	{
		"sink",
		"front",
		"circle"
	};
	STRING_LIST(destination_type_enum, destination_type_enum_strings, _countof(destination_type_enum_strings));

	#define FLOCK_INSTANCE_BLOCK_ID { 0x5CBA5AB0, 0x8CE54E4B, 0xA721F105, 0xB30B5958 }
	TAG_STRUCT(
		flock_instance_block,
		"flock_instance_block",
		"flock_instance_block",
		"s_flock_instance_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FLOCK_INSTANCE_BLOCK_ID)
	{
		{ _field_string_id, "flock name" },
		{ _field_short_block_index, "flock definition", &flock_palette_block_block },
		{ _field_short_block_index, "bsp", &scenario_structure_bsp_reference_block_block },
		{ _field_short_block_index, "bounding volume", &scenario_trigger_volume_block_block },
		{ _field_word_flags, "flags", &flock_flags },
		{ _field_real, "ecology margin", "distance from ecology boundary that creature begins to be repulsed", "wus" },
		{ _field_block, "sources", &flock_source_block_block },
		{ _field_block, "destinations", MAKE_ALT_NAMES("sinks"), &flock_destination_block_block },
		{ _field_real_bounds, "production frequency bounds", "How frequently boids are produced at one of the sources (limited by the max boid count)", "boids/sec" },
		{ _field_real_bounds, "scale" },
		{ _field_real, "source scale to 0 radius", "Distance from a source at which the creature scales to full size", "wus" },
		{ _field_real, "sink scale to 0 radius", "Distance from a sink at which the creature begins to scale to zero", "wus" },
		{ _field_real, "flock destroy duration", "The number of seconds it takes to kill all units in the flock if it gets destroyed", "sec" },
		{ _field_short_block_index, "boid creature", &scenario_creature_palette_block_block },
		{ _field_short_block_index, "big battle creature", &big_battle_creature_palette_block_block },
		{ _field_short_integer_bounds, "boid count" },
		{ _field_short_block_index, "enemy flock", &flock_instance_block_block },
		FIELD_PAD("post-enemy-flock", 2),
		{ _field_real, "enemy flock max target distance" },
		{ _field_terminator }
	};

	STRINGS(flock_flags)
	{
		"not initially created",
		"hard boundaries on volume",
		"flock initially stopped",
		"flock initially perched",
		"one creature per source",
		"scared by AI",
		"creatures respect kill volumes",
		"big battle squad"
	};
	STRING_LIST(flock_flags, flock_flags_strings, _countof(flock_flags_strings));

	#define FLOCK_PALETTE_BLOCK_ID { 0xCCF2B116, 0x70BD49A2, 0x8CE686B1, 0xB579473F }
	TAG_STRUCT(
		flock_palette_block,
		"flock_palette_block",
		"flock_palette_block",
		"s_flock_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FLOCK_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "reference", &flock_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(flock_group_reference, FLOCK_TAG);

	#define FLOCK_SOURCE_BLOCK_ID { 0x2BFCB061, 0x9A1B4921, 0x890FF041, 0xA74697FE }
	TAG_STRUCT(
		flock_source_block,
		"flock_source_block",
		"flock_source_block",
		"s_flock_source_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FLOCK_SOURCE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_flags, "source flags", &flock_source_flags },
		{ _field_real_vector_3d, "position" },
		{ _field_real_euler_angles_2d, "starting yaw, pitch", nullptr, "degrees" },
		{ _field_real, "radius" },
		{ _field_real, "weight", "probability of producing at this source" },
		{ _field_char_integer, "bsp_index" },
		{ _field_byte_integer, "cluster index" },
		FIELD_PAD("post-cluster-ref", 2),
		{ _field_terminator }
	};

	STRINGS(flock_source_flags)
	{
		"ground source"
	};
	STRING_LIST(flock_source_flags, flock_source_flags_strings, _countof(flock_source_flags_strings));

	#define FLOCK_STRUCT_DEFINITION_ID { 0xF0130A08, 0xA0EF4DC7, 0xA0CA92E4, 0xBC18D80B }
	TAG_STRUCT(
		flock_struct_definition,
		"flock_struct_definition",
		"flock_struct_definition",
		"s_flock_struct_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FLOCK_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Simple flocking", nullptr),
		{ _field_real, "forward weight", "weight given to boid's desire to fly straight ahead", nullptr, "[0..1]", MAKE_ALT_NAMES("forward scale") },
		{ _field_real, "leveling force weight", "weight given to boids desire to fly level", nullptr, "[0..1]", MAKE_ALT_NAMES("leveling force scale") },
		{ _field_real, "destination weight", "weight given to boid's desire to fly towards its sinks", nullptr, "[0..1]", MAKE_ALT_NAMES("sink scale") },
		{ _field_real, "average throttle", "throttle at which boids will naturally fly", nullptr, "[0..1]" },
		{ _field_real, "maximum throttle", "maximum throttle applicable", nullptr, "[0..1]" },
		{ _field_real, "movement weight threshold", "The threshold of accumulated weight over which movement occurs" },
		{ _field_real, "danger radius", "distance within which boids will avoid a dangerous object (e.g. the player)", "wus" },
		{ _field_real, "danger weight", "weight given to boid's desire to avoid danger", MAKE_ALT_NAMES("danger scale") },
		{ _field_real, "target weight", "weight given to boid's desire to attack fly after their target, if they have one", nullptr, "[0..1]", MAKE_ALT_NAMES("target scale") },
		{ _field_real, "target distance", "distance within which we aggressively pursue a target", "wus" },
		{ _field_real, "target delay time", "amount of time we need to be locked onto a target before we might start killing it", "seconds" },
		{ _field_real, "target kill chance", "probability of killing your target in one second", "chance per second" },
		{ _field_real, "ai destroy chance", "if targetted by AI, the probability of dying in one second", "chance per second" },
		FIELD_EXPLANATION("Perlin noise parameters", "Recommended initial values: \n\trandom offset scale= 0.2 \n\toffset period bounds= 1, 3"),
		{ _field_real, "random offset weight", "weight given to boid's random heading offset", nullptr, "[0..1]", MAKE_ALT_NAMES("random offset scale") },
		{ _field_real_bounds, "random offset period", nullptr, "seconds" },
		FIELD_EXPLANATION("Complex Flocking", "WARNING: In flocks with a neighborhood radius of 0, creatures are not influenced by the other creatures around them. THESE ARE MUCH CHEAPER.\n"),
		{ _field_real, "neighborhood radius", "distance within which one boid is affected by another", "world units" },
		{ _field_angle, "perception angle", "angle-from-forward within which one boid can perceive and react to another", "degrees" },
		{ _field_real, "avoidance weight", "weight given to boid's desire to avoid collisions with other boids, when within the avoidance radius", nullptr, "[0..1]", MAKE_ALT_NAMES("avoidance scale") },
		{ _field_real, "avoidance radius", "distance that a boid tries to maintain from another", "world units" },
		{ _field_real, "alignment weight", "weight given to boid's desire to align itself with neighboring boids", nullptr, "[0..1]", MAKE_ALT_NAMES("alignment scale") },
		{ _field_real, "position weight", "weight given to boid's desire to be near flock center", nullptr, "[0..1]", MAKE_ALT_NAMES("position scale") },
		{ _field_real, "position min radius", "distance to flock center beyond which an attracting force is applied", "wus" },
		{ _field_real, "position max radius", "distance to flock center at which the maximum attracting force is applied", "wus" },
		{ _field_terminator }
	};

	#define FLUID_DYNAMICS_INFLOW_BLOCK_ID { 0x74143430, 0x32224891, 0xB4903432, 0x7654EB13 }
	TAG_STRUCT(
		fluid_dynamics_inflow_block,
		"fluid_dynamics_inflow_block",
		"fluid_dynamics_inflow_block",
		"s_fluid_dynamics_inflow_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FLUID_DYNAMICS_INFLOW_BLOCK_ID)
	{
		{ _field_point_2d, "grid location" },
		{ _field_real, "inflow rate", "particles/sec" },
		{ _field_real, "inflow angle", "degrees" },
		{ _field_real, "inflow velocity scale" },
		{ _field_terminator }
	};

	#define FLUID_DYNAMICS_OBSTACLE_BLOCK_ID { 0x7414341E, 0x3222482C, 0xB4903442, 0x7654EB55 }
	TAG_STRUCT(
		fluid_dynamics_obstacle_block,
		"fluid_dynamics_obstacle_block",
		"fluid_dynamics_obstacle_block",
		"s_fluid_dynamics_obstacle_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FLUID_DYNAMICS_OBSTACLE_BLOCK_ID)
	{
		{ _field_point_2d, "2x2 grid location" },
		{ _field_terminator }
	};

	#define FLUID_DYNAMICS_OUTFLOW_BLOCK_ID { 0x7414343A, 0x3222489B, 0xB490343C, 0x7654EB1D }
	TAG_STRUCT(
		fluid_dynamics_outflow_block,
		"fluid_dynamics_outflow_block",
		"fluid_dynamics_outflow_block",
		"s_fluid_dynamics_outflow_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FLUID_DYNAMICS_OUTFLOW_BLOCK_ID)
	{
		{ _field_point_2d, "grid location" },
		{ _field_terminator }
	};

	#define FLUID_DYNAMICS_SQUIRTER_BLOCK_ID { 0x7414343E, 0x3222489C, 0xB4903432, 0x7654EB15 }
	TAG_STRUCT(
		fluid_dynamics_squirter_block,
		"fluid_dynamics_squirter_block",
		"fluid_dynamics_squirter_block",
		"s_fluid_dynamics_squirter_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FLUID_DYNAMICS_SQUIRTER_BLOCK_ID)
	{
		{ _field_point_2d, "grid location" },
		FIELD_SKIP("JKISKKJS", 48),
		{ _field_real, "squirt scale" },
		{ _field_terminator }
	};

	#define FLUID_DYNAMICS_STRUCT_DEFINITION_ID { 0x3414341E, 0x3222482C, 0x14903442, 0x654EB55 }
	TAG_STRUCT(
		fluid_dynamics_struct_definition,
		"fluid_dynamics_struct_definition",
		"fluid_dynamics_struct_definition",
		"s_fluid_dynamics_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FLUID_DYNAMICS_STRUCT_DEFINITION_ID)
	{
		{ _field_long_flags, "flags", &fluid_dynamics_flags },
		{ _field_string_id, "marker attachment name" },
		{ _field_real, "diffusion rate", "0.0000001->0.0000100" },
		{ _field_real, "viscosity", "0.0000001->0.0060000" },
		FIELD_PAD("FIRWW", 40),
		{ _field_short_integer, "number grid cells width", "grid cells across" },
		{ _field_short_integer, "update rate", "game updates per velocity field update" },
		{ _field_real, "particle gravity multiplier" },
		{ _field_real, "grid cell width", "world units" },
		{ _field_real, "grid cell height", "world units" },
		{ _field_short_integer, "maximum particles per cell", "0 is no max. teleports ># away randomly" },
		FIELD_PAD("SKT", 2),
		FIELD_PAD("DBNFAM", 76),
		{ _field_short_integer, "number of tracers" },
		FIELD_PAD("FQ", 2),
		{ _field_real_bounds, "tracer time multipier range" },
		{ _field_real, "tracer max velocity influence scale", "1-32" },
		FIELD_PAD("NYUBJV", 36),
		{ _field_short_integer, "number of particles", "should = number of particles in the effect" },
		{ _field_short_integer, "particle collision rate", "game updates per collision update" },
		{ _field_real, "particle collision radius", "world units" },
		{ _field_real, "particle movement multiplier", "0.001-5.0" },
		{ _field_real, "particle force to center of grid scale", "0.001-5.0" },
		{ _field_real, "particle drag coeff", "0-1" },
		{ _field_real, "maximum particle velocity(disabled)" },
		FIELD_PAD("DNF", 28),
		{ _field_block, "particle effects", &particle_system_definition_block_new_block },
		FIELD_PAD("ZJSKRR", 20),
		{ _field_block, "squirters", &fluid_dynamics_squirter_block_block },
		{ _field_block, "inflow", &fluid_dynamics_inflow_block_block },
		{ _field_block, "outflow", &fluid_dynamics_outflow_block_block },
		{ _field_block, "obstacles", &fluid_dynamics_obstacle_block_block },
		FIELD_EXPLANATION("Cylinder map", nullptr),
		{ _field_struct, "cylindrical radius", &g_single_scalar_function_evaluation_struct },
		{ _field_terminator }
	};

	STRINGS(fluid_dynamics_flags)
	{
		"use tracers",
		"use density diffuse",
		"wrap particles width",
		"wrap particles height",
		"flat horizontal",
		"flat vertical(default)",
		"cylindrical horizontal",
		"cylindrical vertical",
		"approximate volume",
		"random particle placement",
		"tracer jump around"
	};
	STRING_LIST(fluid_dynamics_flags, fluid_dynamics_flags_strings, _countof(fluid_dynamics_flags_strings));

	#define FOG_LIGHT_STRUCT_DEFINITION_ID { 0x2EA4F208, 0x23EB43DA, 0x96CF1259, 0x7F716CD9 }
	TAG_STRUCT(
		fog_light_struct_definition,
		"fog_light_struct_definition",
		"fog_light_struct_definition",
		"s_fog_light_struct_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FOG_LIGHT_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "pitch angle", nullptr, "degree" },
		{ _field_real, "yaw angle", nullptr, "degree" },
		{ _field_real, "angular radius", nullptr, "degree" },
		{ _field_real_rgb_color, "tint color" },
		{ _field_real, "tint color intensity" },
		{ _field_real, "angular falloff steepness" },
		{ _field_real, "distance falloff steepness" },
		{ _field_real, "nearby cutoff percentage" },
		{ _field_terminator }
	};

	#define FOOT_LOCK_CYCLE_BLOCK_ID { 0xB3A64A4C, 0x6BC544B3, 0xAAAC4AF4, 0xA16E5881 }
	TAG_STRUCT(
		foot_lock_cycle_block,
		"foot_lock_cycle_block",
		"foot_lock_cycle_block",
		"s_foot_lock_cycle_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FOOT_LOCK_CYCLE_BLOCK_ID)
	{
		{ _field_short_integer, "start locking" },
		{ _field_short_integer, "locked" },
		{ _field_short_integer, "start unlocking" },
		{ _field_short_integer, "unlocked" },
		{ _field_real_point_3d, "lock point" },
		{ _field_terminator }
	};

	#define FOOT_TRACKING_BLOCK_ID { 0x65A0785D, 0x1C8B4E74, 0xB942B141, 0x5D95DF9E }
	TAG_STRUCT(
		foot_tracking_block,
		"foot_tracking_block",
		"foot_tracking_block",
		"s_foot_tracking_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FOOT_TRACKING_BLOCK_ID)
	{
		{ _field_short_block_index, "foot", &foot_tracking_member_block_block },
		FIELD_PAD("f00t2", 2),
		{ _field_block, "cycles", &foot_lock_cycle_block_block },
		{ _field_terminator }
	};

	#define FOOT_TRACKING_DEFAULTS_ID { 0x38B72849, 0xFBD74264, 0xBC245286, 0x2F5A03BC }
	TAG_STRUCT(
		foot_tracking_defaults,
		"foot_tracking_defaults",
		"foot_tracking_defaults",
		"s_foot_tracking_defaults",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FOOT_TRACKING_DEFAULTS_ID)
	{
		{ _field_short_block_index, "foot", &foot_tracking_member_block_block },
		{ _field_short_enum, "default state", &foot_tracking_default_values },
		{ _field_terminator }
	};

	STRINGS(foot_tracking_default_values)
	{
		"off",
		"on"
	};
	STRING_LIST(foot_tracking_default_values, foot_tracking_default_values_strings, _countof(foot_tracking_default_values_strings));

	#define FOOT_TRACKING_MEMBER_BLOCK_ID { 0xD066D043, 0x7AF34927, 0xB01540CE, 0x43143EB4 }
	TAG_STRUCT(
		foot_tracking_member_block,
		"foot_tracking_member_block",
		"foot_tracking_member_block",
		"s_foot_tracking_member_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FOOT_TRACKING_MEMBER_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "foot marker name" },
		{ _field_real_bounds, "foot ik range" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "ankle marker name" },
		{ _field_real_bounds, "ankle ik range" },
		{ _field_short_enum, "default state", &foot_tracking_default_values },
		FIELD_PAD("f00t1", 2),
		{ _field_terminator }
	};

	#define FORGE_COLOR_BLOCK_ID { 0x5F309018, 0x93F611E1, 0x97D1F9B1, 0xBAE59B18 }
	TAG_STRUCT(
		forge_color_block,
		"forge_color_block",
		"forge_color_block",
		"s_forge_color_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FORGE_COLOR_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_real_rgb_color, "color" },
		{ _field_terminator }
	};

	#define FORGE_GLOBALS_BLOCK_STRUCT_ID { 0x9480BF0C, 0x93F311E1, 0xA5A3AFAF, 0xBAE59B18 }
	TAG_STRUCT(
		forge_globals_block_struct,
		"forge_globals_block_struct",
		"forge_globals_block_struct",
		"s_forge_globals_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FORGE_GLOBALS_BLOCK_STRUCT_ID)
	{
		{ _field_block, "forge colors", &forge_color_block_block },
		FIELD_EXPLANATION("Magnets", "Forge magnet parameters"),
		{ _field_tag_reference, "magnet effect scenery", &effect_scenery_group_reference },
		{ _field_string_id, "parent magnet marker name" },
		{ _field_string_id, "child magnet marker name" },
		{ _field_real_fraction, "throttle sensitivity" },
		{ _field_real, "v.low magnetism factor", "multiplied against selected object bounding sphere radius" },
		{ _field_real, "low magnetism factor", "multiplied against selected object bounding sphere radius" },
		{ _field_real, "med magnetism factor", "multiplied against selected object bounding sphere radius" },
		{ _field_real, "high magnetism factor", "multiplied against selected object bounding sphere radius" },
		{ _field_real, "v.high magnetism factor", "multiplied against selected object bounding sphere radius" },
		{ _field_real, "magnetism angle", "degrees#multiplied against selected object bounding sphere radius" },
		{ _field_real_fraction, "magnet offset influence", "influence of magnet selection based on selection center in forge" },
		FIELD_EXPLANATION("Forge Camera Manipulation", "Forge camera and manipulator parameters"),
		{ _field_real, "object grab range", "how close you must be to an object in order to grab it for manipulation" },
		{ _field_real, "default focal distance", "default manipulation camera distance" },
		{ _field_real, "minimum focal distance", "minimum manipulation camera distance" },
		{ _field_real, "maximum focal distance", "maximum manipulation camera distance" },
		{ _field_real, "focal distance multiplier", "effective maximum distance = MIN(max_focal_distance, multiplier x min_focal_distance)" },
		{ _field_terminator }
	};

	TAG_REFERENCE(effect_scenery_group_reference, EFFECT_SCENERY_TAG);

	#define FORMATION_BLOCK_STRUCT_ID { 0x5D813D70, 0x900F4DC8, 0x9167C364, 0x5A2BA310 }
	TAG_STRUCT(
		formation_block_struct,
		"formation_block_struct",
		"formation_block_struct",
		"s_formation_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FORMATION_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "primitives", &formation_primitive_definition_block },
		{ _field_terminator }
	};

	#define FORMATION_POINT_DEFINITION_ID { 0x23ABAAB1, 0xA504407E, 0xA02EA842, 0x827B6483 }
	TAG_STRUCT(
		formation_point_definition,
		"formation_point_definition",
		"formation_point_definition",
		"s_formation_point_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FORMATION_POINT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("value", nullptr),
		{ _field_angle, "angle" },
		{ _field_real, "offset" },
		{ _field_terminator }
	};

	#define FORMATION_PRIMITIVE_DEFINITION_ID { 0x8FA0D708, 0xB9F34F88, 0x85458122, 0xCCCA2133 }
	TAG_STRUCT(
		formation_primitive_definition,
		"formation_primitive_definition",
		"formation_primitive_definition",
		"s_formation_primitive_definition",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FORMATION_PRIMITIVE_DEFINITION_ID)
	{
		FIELD_EXPLANATION("value", nullptr),
		{ _field_word_flags, "flags", &formation_primitive_flags },
		{ _field_short_integer, "priority" },
		{ _field_short_integer, "capacity" },
		FIELD_PAD("post-capacity-pad", 2),
		{ _field_real, "dist forwards" },
		{ _field_real, "dist backwards" },
		{ _field_real, "rank spacing" },
		{ _field_real, "file spacing" },
		{ _field_block, "points", &formation_point_definition_block },
		{ _field_terminator }
	};

	STRINGS(formation_primitive_flags)
	{
		"radial",
		"leader"
	};
	STRING_LIST(formation_primitive_flags, formation_primitive_flags_strings, _countof(formation_primitive_flags_strings));

	#define FRAME_EVENT_LIST_STRUCT_DEFINITION_ID { 0x65EB9164, 0x6CF74740, 0x9EAEF341, 0x337EB682 }
	TAG_STRUCT(
		frame_event_list_struct_definition,
		"frame_event_list_struct_definition",
		"frame_event_list_struct_definition",
		"s_frame_event_list_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FRAME_EVENT_LIST_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("IMPORTANT TAG NOTES", "1) DO NOT XSYNC THIS TAG DIRECTLY.  Due to the nature of how this tag is processed, it is never\nloaded in-game.  Instead, xsync the parent model_animation_graph tag.  You can do this without\nchecking out the parent model_animation_graph; just find the tag in question in Bonobo, right-click it\nand select \'Force XSync\'.\n\n2) Legacy events are generated by the parent model_animation_graph.  They are generated when the model\nsidecar is imported, and the importer will try to resolve duplicated events with the frame_event_list.\nIf you need to delete a legacy animation event (or audio/effect event or reference for that matter) it \nmust be deleted from both the model_animation_graph tag AND the frame_event_list tag.\n\n3) The internal pipeline process for animation events now is:\n\t- When a sidecar is imported, if animation, effect, or audio events exist, they are copied into the\n\t  frame_event_list tag.  If the event already exists in the frame_event_list, its values are\n\t  retained.  Otherwise, default values are assigned such that the event behaves exactly as \n\t  it used to.  For the event ID, it is assigned the word \'Legacy\' with zero frame offset.\n\t- New frame events should be specified and saved in the frame_event_list tag (you\'re looking\n\t  at it).\n\t- When the model_animation_graph is compiled, the processor opens the associated frame_event_list\n\t  if one exists, reads and processes the data, and stores it back into the original \n\t  model_animation_graph on the xbox (or cache file), so no additional runtime memory or processing \n\t  time should be required.\n"),
		{ _field_block, "sound references", &animation_graph_sound_reference_block_block },
		{ _field_block, "effect references", &animation_graph_effect_reference_block_block },
		{ _field_block, "frame events", &import_animation_event_block_block },
		{ _field_terminator }
	};

	#define FRICTION_POINT_DEFINITION_BLOCK_ID { 0x1694B591, 0xC73D42A9, 0x9D1207F5, 0xEFCEF368 }
	TAG_STRUCT(
		friction_point_definition_block,
		"friction_point_definition_block",
		"friction_point_definition_block",
		"s_friction_point_definition_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FRICTION_POINT_DEFINITION_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_long_flags, "flags", &friction_point_definition_flags },
		FIELD_IFP_BEGIN(),
		{ _field_real, "fraction of total mass", "(0.0-1.0) fraction of total vehicle mass" },
		{ _field_real, "radius" },
		{ _field_real, "damaged radius", "radius when the tire is blown off." },
		{ _field_real, "ground friction scale", "scale the non sliding friction on this friction point" },
		{ _field_real, "AI ground friction scale override", "use this value when an AI is driving" },
		{ _field_real, "moving friction velocity diff" },
		{ _field_real, "moving friction scale", "scale the sliding friction on this friction point, active when velocity is greater than moving friction velocity diff" },
		{ _field_real, "AI moving friction scale override", "use this value when an AI is driving" },
		{ _field_real, "e-brake moving friction" },
		{ _field_real, "e-brake friction" },
		{ _field_real, "e-brake moving friction vel diff" },
		FIELD_IFP_END(),
		{ _field_string_id, "collision global material name" },
		{ _field_short_integer, "runtime global material index" },
		FIELD_EXPLANATION("friction point destruction data", nullptr),
		{ _field_short_enum, "model state destroyed", "only need point can destroy flag set", &model_state_enum_definition },
		{ _field_string_id, "region name", "only need point can destroy flag set" },
		{ _field_long_integer, "runtime region index" },
		{ _field_terminator }
	};

	STRINGS(friction_point_definition_flags)
	{
		"gets damage from region",
		"powered",
		"front turning",
		"rear turning",
		"AI force rear turning",
		"attached to e-brake",
		"can be destroyed",
		"AI override ground friction scale",
		"AI override moving friction scale"
	};
	STRING_LIST(friction_point_definition_flags, friction_point_definition_flags_strings, _countof(friction_point_definition_flags_strings));

	#define FUNCTIONPARAMETERBLOCK_ID { 0x25A1ECC0, 0xB81F4CBE, 0x9F9466E2, 0x80A9CFDB }
	TAG_STRUCT(
		functionparameterblock,
		"functionParameterBlock",
		"functionParameterBlock",
		"s_functionparameterblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FUNCTIONPARAMETERBLOCK_ID)
	{
		{ _field_byte_integer, "function index" },
		{ _field_byte_integer, "render phase mask" },
		{ _field_byte_integer, "register index" },
		{ _field_byte_integer, "register offset" },
		{ _field_terminator }
	};

	#define FUNCTION_OVERLAY_ANIMATION_BLOCK_ID { 0xC89466F6, 0x7EF04B56, 0xAF1ACD05, 0xDE675B3E }
	TAG_STRUCT(
		function_overlay_animation_block,
		"function_overlay_animation_block",
		"function_overlay_animation_block",
		"s_function_overlay_animation_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FUNCTION_OVERLAY_ANIMATION_BLOCK_ID)
	{
		{ _field_string_id, "label" },
		{ _field_struct, "animation", &animation_index_struct },
		FIELD_PAD("VQWLKE", 2),
		{ _field_short_enum, "function controls", &function_overlay_animation_mode },
		{ _field_string_id, "function" },
		FIELD_PAD("OHIOJE", 4),
		{ _field_terminator }
	};

	STRINGS(function_overlay_animation_mode)
	{
		"frame",
		"scale"
	};
	STRING_LIST(function_overlay_animation_mode, function_overlay_animation_mode_strings, _countof(function_overlay_animation_mode_strings));

	#define FUNCTION_OVERLAY_ITEM_DEFINITION_BLOCK_ID { 0x88CDC66F, 0xED3344A6, 0x9832DB93, 0x49C99955 }
	TAG_STRUCT(
		function_overlay_item_definition_block,
		"function_overlay_item_definition_block",
		"function_overlay_item_definition_block",
		"s_function_overlay_item_definition_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FUNCTION_OVERLAY_ITEM_DEFINITION_BLOCK_ID)
	{
		{ _field_short_block_index, "function overlay", &new_animation_function_overlay_block_block },
		{ _field_word_flags, "flags", &pose_overlay_item_definition_block_flags },
		{ _field_terminator }
	};

	#define FX_PROPERTY_BLOCK_ID { 0xD29AB5E2, 0xC52B48EC, 0x8C23C5A1, 0x73A0916C }
	TAG_STRUCT(
		fx_property_block,
		"fx_property_block",
		"fx_property_block",
		"s_fx_property_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FX_PROPERTY_BLOCK_ID)
	{
		{ _field_string, "name" },
		{ _field_long_flags, "flags", &fx_property_flags },
		{ _field_long_integer, "scope" },
		{ _field_long_enum, "value type", &fx_property_value_type_enum },
		{ _field_long_string, "expression" },
		{ _field_long_string, "initialize" },
		{ _field_long_string, "update" },
		{ _field_block, "defaults", &fx_property_default_block_block },
		{ _field_string_id, "default name" },
		{ _field_tag_reference, "reference", &bitmap_group_reference$2 },
		{ _field_char_enum, "filter_mode", &fx_property_bitmap_filter_enum },
		{ _field_char_enum, "address_mode_x", &fx_property_bitmap_address_enum },
		{ _field_char_enum, "address_mode_y", &fx_property_bitmap_address_enum },
		{ _field_char_enum, "mip_bias_mode", &fx_property_bitmap_bias_enum },
		{ _field_struct, "function", &fx_test_scalar_function_struct },
		{ _field_terminator }
	};

	STRINGS(fx_property_flags)
	{
		"predefined",
		"state",
		"derived"
	};
	STRING_LIST(fx_property_flags, fx_property_flags_strings, _countof(fx_property_flags_strings));

	STRINGS(fx_property_value_type_enum)
	{
		"default",
		"expression",
		"texture",
		"function"
	};
	STRING_LIST(fx_property_value_type_enum, fx_property_value_type_enum_strings, _countof(fx_property_value_type_enum_strings));

	STRINGS(fx_property_bitmap_filter_enum)
	{
		"default",
		"point",
		"bilinear",
		"trilinear",
		"anisotropic_2x",
		"anisotropic_4x"
	};
	STRING_LIST(fx_property_bitmap_filter_enum, fx_property_bitmap_filter_enum_strings, _countof(fx_property_bitmap_filter_enum_strings));

	STRINGS(fx_property_bitmap_address_enum)
	{
		"default",
		"wrap",
		"clamp",
		"mirror",
		"border"
	};
	STRING_LIST(fx_property_bitmap_address_enum, fx_property_bitmap_address_enum_strings, _countof(fx_property_bitmap_address_enum_strings));

	STRINGS(fx_property_bitmap_bias_enum)
	{
		"default",
		"bias 0",
		"bias 1",
		"bias 2",
		"bias 3"
	};
	STRING_LIST(fx_property_bitmap_bias_enum, fx_property_bitmap_bias_enum_strings, _countof(fx_property_bitmap_bias_enum_strings));

	#define FX_PROPERTY_DEFAULT_BLOCK_ID { 0x74DB675C, 0x10B406D, 0xABDD47F2, 0x4CA2C6AC }
	TAG_STRUCT(
		fx_property_default_block,
		"fx_property_default_block",
		"fx_property_default_block",
		"s_fx_property_default_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FX_PROPERTY_DEFAULT_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	#define FX_TEST_SCALAR_FUNCTION_STRUCT_ID { 0x8F9D626F, 0x60834554, 0xA51B20AB, 0x5E9122B2 }
	TAG_STRUCT(
		fx_test_scalar_function_struct,
		"fx_test_scalar_function_struct",
		"fx_test_scalar_function_struct",
		"s_fx_test_scalar_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FX_TEST_SCALAR_FUNCTION_STRUCT_ID)
	{
		{ _field_string_id, "Input Variable", _field_id_function_input_scalar },
		{ _field_string_id, "Range Variable", _field_id_function_input_range },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define FX_TEST_STRUCT_DEFINITION_ID { 0x330D5FF3, 0xA8A94198, 0x8EAB297D, 0x80E7192C }
	TAG_STRUCT(
		fx_test_struct_definition,
		"fx_test_struct_definition",
		"fx_test_struct_definition",
		"s_fx_test_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		FX_TEST_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "properties", &fx_property_block_block },
		{ _field_terminator }
	};

	#define G_CINEMATICSHOTFLAGARRAY_ID { 0x519DEDF9, 0x1CBB442B, 0xAC615A1F, 0xAD7FAB9B }
	TAG_STRUCT(
		g_cinematicshotflagarray,
		"g_cinematicShotFlagArray",
		"g_cinematicShotFlagArray",
		"s_g_cinematicshotflagarray",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		G_CINEMATICSHOTFLAGARRAY_ID)
	{
		{ _field_dword_integer, "shot flag data" },
		{ _field_terminator }
	};

	#define G_COMPOSITETAG_STRUCT_ID { 0xCE71BB1A, 0x50AB45ED, 0x90C7C874, 0x47FF664 }
	TAG_STRUCT(
		g_compositetag_struct,
		"g_compositeTag_struct",
		"g_compositeTag_struct",
		"s_g_compositetag_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		G_COMPOSITETAG_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "axes", &compositeaxisdefinition_block },
		{ _field_block, "anims", &compositeentrydefinition_block },
		{ _field_block, "sets", &compositephasesetdefinition_block },
		{ _field_block, "strings", &stringblock_block },
		{ _field_string_id, "timing source" },
		{ _field_short_integer, "timingAnimIndex" },
		FIELD_PAD("PAD", 2),
		{ _field_terminator }
	};

	#define G_NODE_FLAG_STORAGE_ARRAY_STRUCT_DEFINITION_ID { 0xFA382E96, 0x31004754, 0xA73B7ADD, 0xC9AA134C }
	TAG_STRUCT(
		g_node_flag_storage_array_struct_definition,
		"g_node_flag_storage_array",
		"g_node_flag_storage_array",
		"s_g_node_flag_storage_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		G_NODE_FLAG_STORAGE_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "flag data" },
		{ _field_terminator }
	};

	#define G_NULL_BLOCK_ID { 0x757E48A6, 0x9CAC4CBC, 0xBC46A11C, 0x63F7E2F3 }
	TAG_STRUCT(
		g_null_block,
		"g_null_block",
		"g_null_block",
		"s_g_null_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		G_NULL_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_terminator }
	};

	#define G_SCENARIO_EDITOR_FOLDER_BLOCK_ID { 0xB9D6A59, 0x9A5741CB, 0xA1D7A5D1, 0x9F085A3D }
	TAG_STRUCT(
		g_scenario_editor_folder_block,
		"g_scenario_editor_folder_block",
		"g_scenario_editor_folder_block",
		"s_g_scenario_editor_folder_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		G_SCENARIO_EDITOR_FOLDER_BLOCK_ID)
	{
		{ _field_long_block_index, "parent folder", &g_scenario_editor_folder_block_block },
		{ _field_long_string, "name" },
		FIELD_PAD("pad", 4),
		{ _field_int64_integer, "offset" },
		{ _field_terminator }
	};

	#define G_SINGLE_SCALAR_FUNCTION_EVALUATION_STRUCT_ID { 0xE5DD9E47, 0x3ECF4316, 0xA03E0324, 0x62F7B19C }
	TAG_STRUCT(
		g_single_scalar_function_evaluation_struct,
		"g_single_scalar_function_evaluation_struct",
		"g_single_scalar_function_evaluation_struct",
		"s_g_single_scalar_function_evaluation_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		G_SINGLE_SCALAR_FUNCTION_EVALUATION_STRUCT_ID)
	{
		{ _field_real, "input" },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "scalar", &mapping_function }, // structure_version:2
		FIELD_PAD("LOHRT", 16),
		{ _field_terminator }
	};

	#define GAMEENGINEFIREFIGHTVARIANTDEFINITION_ID { 0x6CCBE137, 0x5F764396, 0xB5182CE2, 0xA6B2A01C }
	TAG_STRUCT(
		gameenginefirefightvariantdefinition,
		"gameEngineFirefightVariantDefinition",
		"gameEngineFirefightVariantDefinition",
		"s_gameenginefirefightvariantdefinition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAMEENGINEFIREFIGHTVARIANTDEFINITION_ID)
	{
		{ _field_string_id, "localizable name" },
		{ _field_string_id, "localizable description" },
		{ _field_block, "miscellaneous options", &game_engine_miscellaneous_options_block_block },
		{ _field_block, "prototype options", &game_engine_prototype_options_block_block },
		{ _field_block, "respawn options", &game_engine_respawn_options_block_block },
		{ _field_block, "social options", &game_engine_social_options_block_block },
		{ _field_block, "map override options", &game_engine_map_override_options_block_block },
		{ _field_block, "team options", &game_engine_team_options_block_block },
		{ _field_block, "loadout options", &game_engine_loadout_options_block_block },
		{ _field_block, "ordnance options", &gameengineordnanceoptionsblock_block },
		{ _field_long_integer, "mission_id" },
		{ _field_char_enum, "game difficulty", &global_campaign_difficulty_enum },
		{ _field_byte_flags, "firefight variant flags", &gameenginefirefightvariantflags },
		{ _field_short_integer, "shared team life count" },
		{ _field_short_integer, "maximum lives" },
		{ _field_char_integer, "Starting Crate 1" },
		{ _field_char_integer, "Starting Crate 2" },
		{ _field_char_integer, "Starting Crate 3" },
		{ _field_char_integer, "Starting Crate 4" },
		{ _field_char_integer, "Starting Crate 5" },
		{ _field_char_integer, "Starting Crate 6" },
		{ _field_char_integer, "Starting Crate 7" },
		{ _field_char_integer, "Starting Crate 8" },
		{ _field_char_integer, "Starting Crate 9" },
		{ _field_char_integer, "Starting Crate 10" },
		{ _field_char_integer, "Starting Crate 11" },
		{ _field_char_integer, "Starting Crate 12" },
		{ _field_char_integer, "Starting Crate 13" },
		{ _field_char_integer, "Starting Crate 14" },
		{ _field_string, "Variant Event", "This event is always set for script" },
		{ _field_block, "Midnight Player Goal Properties", &gameenginefirefightplayergoalpropertiesblock_block },
		{ _field_terminator }
	};

	STRINGS(gameenginefirefightvariantflags)
	{
		"Use Ammo Crates",
		"Players Respawn on Wave"
	};
	STRING_LIST(gameenginefirefightvariantflags, gameenginefirefightvariantflags_strings, _countof(gameenginefirefightvariantflags_strings));

	#define GAMEENGINEORDNANCEOPTIONSBLOCK_ID { 0xA4D1C7F4, 0xCA0849E6, 0xAADCC0FB, 0x2532C53D }
	TAG_STRUCT(
		gameengineordnanceoptionsblock,
		"gameEngineOrdnanceOptionsBlock",
		"gameEngineOrdnanceOptionsBlock",
		"s_gameengineordnanceoptionsblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAMEENGINEORDNANCEOPTIONSBLOCK_ID)
	{
		{ _field_byte_flags, "flags", &gameengineordnanceoptionsflags },
		{ _field_terminator }
	};

	STRINGS(gameengineordnanceoptionsflags)
	{
		"ordnance enabled"
	};
	STRING_LIST(gameengineordnanceoptionsflags, gameengineordnanceoptionsflags_strings, _countof(gameengineordnanceoptionsflags_strings));

	#define GAMEMEDALTIERS_ID { 0xC1C2D85E, 0x9E664F4F, 0x9B76ABC1, 0xDAB1CD0E }
	TAG_STRUCT(
		gamemedaltiers,
		"gameMedalTiers",
		"gameMedalTiers",
		"s_gamemedaltiers",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAMEMEDALTIERS_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "description" },
		{ _field_short_integer, "sequence index" },
		{ _field_short_integer, "point value" },
		{ _field_terminator }
	};

	#define GAME_AUDIBILITY_BLOCK_ID { 0x73FDA6A6, 0x4E2A483E, 0xA308C3B1, 0xAD242965 }
	TAG_STRUCT(
		game_audibility_block,
		"game_audibility_block",
		"game_audibility_block",
		"s_game_audibility_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_AUDIBILITY_BLOCK_ID)
	{
		{ _field_long_integer, "door portal count" },
		{ _field_long_integer, "room count" },
		{ _field_real_bounds, "room distance bounds" },
		{ _field_block, "encoded door pas", &door_encoded_pas_block_block },
		{ _field_block, "room door portal encoded pas", &room_door_portal_encoded_pas_block_block },
		{ _field_block, "ai deafening pas", &ai_deafening_encoded_pas_block_block },
		{ _field_block, "room distances", &encoded_room_distances_block_block },
		{ _field_block, "game portal to door occluder mapping", &game_portal_to_door_occluder_block_block },
		{ _field_block, "bsp cluster to room bounds", &bsp_cluster_to_room_bounds_block },
		{ _field_block, "bsp cluster to room indices", &bsp_cluster_to_room_indices_block },
		{ _field_terminator }
	};

	#define GAME_COMPLETION_REWARDS_DEFINITION_BLOCK_ID { 0x500564F0, 0x598044E6, 0x9D209D9A, 0xC7AF9F7B }
	TAG_STRUCT(
		game_completion_rewards_definition_block,
		"game_completion_rewards_definition_block",
		"game_completion_rewards_definition_block",
		"s_game_completion_rewards_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_COMPLETION_REWARDS_DEFINITION_BLOCK_ID)
	{
		{ _field_long_integer, "initial amount per minute", "base amount of reward given for each minute of play up until the start of the falloff curve", MAKE_ALT_NAMES("initial cookies per minute") },
		{ _field_real, "hopper scaling factor", "the player's time-based reward value is multiplied by this factor before being awarded; this value can be overridden by the hopper" },
		{ _field_real, "winner scaling factor", "if the player is an unambiguous winner, their time-based reward value is multiplied by (this factor - 1) and the result is awarded as a bonus; this value can be overridden by the hopper" },
		{ _field_real, "performance scaling factor", "if the player is not a winner, but is in the top half of the standings, their time-based reward is multiplied by (this factor - 1) and the result is awarded as a bonus; this value can be overriden by the hopper" },
		{ _field_real, "score scaling factor", "for score-based modes, the player's normalized score (0..1) is multiplied by this scaling factor and the result is awarded to the player as a bonus; this value can be overridden by the hopper" },
		{ _field_block, "apm falloff curve", "amount per minute falloff curve; used to provide diminishing returns for longer play time", MAKE_ALT_NAMES("cpm falloff curve"), &game_completion_rewards_falloff_point_block_block },
		{ _field_terminator }
	};

	#define GAME_COMPLETION_REWARDS_DIFFICULTY_BLOCK_ID { 0x11B38235, 0xC0BB4E11, 0xB7BA4EF0, 0x72725526 }
	TAG_STRUCT(
		game_completion_rewards_difficulty_block,
		"game_completion_rewards_difficulty_block",
		"game_completion_rewards_difficulty_block",
		"s_game_completion_rewards_difficulty_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_COMPLETION_REWARDS_DIFFICULTY_BLOCK_ID)
	{
		{ _field_block, "easy matchmaking", "this block is used for easy matchmade games", &game_completion_rewards_definition_block_block },
		{ _field_block, "normal matchmaking", "this block is used for normal matchmade games", &game_completion_rewards_definition_block_block },
		{ _field_block, "heroic matchmaking", "this block is used for heroic matchmade games", &game_completion_rewards_definition_block_block },
		{ _field_block, "legendary matchmaking", "this block is used for legendary matchmade games", &game_completion_rewards_definition_block_block },
		{ _field_block, "custom", "this block is used for custom games", &game_completion_rewards_definition_block_block },
		{ _field_terminator }
	};

	#define GAME_COMPLETION_REWARDS_FALLOFF_POINT_BLOCK_ID { 0x5FA53769, 0x7B89442A, 0xB8CBBC10, 0xF605B579 }
	TAG_STRUCT(
		game_completion_rewards_falloff_point_block,
		"game_completion_rewards_falloff_point_block",
		"game_completion_rewards_falloff_point_block",
		"s_game_completion_rewards_falloff_point_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_COMPLETION_REWARDS_FALLOFF_POINT_BLOCK_ID)
	{
		{ _field_short_integer, "start time", "minutes into the game after which this new reward rate applies" },
		{ _field_short_integer, "amount per minute", "points awarded per minute once the given time is reached", MAKE_ALT_NAMES("cookies per minute") },
		{ _field_terminator }
	};

	#define GAME_COMPLETION_REWARDS_GLOBALS_STRUCT_DEFINITION_ID { 0xA8438CD1, 0x10C94898, 0x8C0E4C83, 0x589A8277 }
	TAG_STRUCT(
		game_completion_rewards_globals_struct_definition,
		"game_completion_rewards_globals_struct_definition",
		"game_completion_rewards_globals_struct_definition",
		"s_game_completion_rewards_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_COMPLETION_REWARDS_GLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "campaign", "rewards given for playing campaign games online", &game_completion_rewards_difficulty_block_block },
		{ _field_block, "firefight", "rewards given for playing firefight games online", &game_completion_rewards_difficulty_block_block },
		{ _field_block, "multiplayer", "rewards given for playing PvP multiplayer games online", &game_completion_rewards_multiplayer_block_block },
		{ _field_real, "fast track armor modifier", "this multiplier is applied to the combined reward of timespent, score and performance, multiplied by the percentage time the player has the armor mod active" },
		{ _field_terminator }
	};

	#define GAME_COMPLETION_REWARDS_MULTIPLAYER_BLOCK_ID { 0xE6AE14F0, 0x8C284494, 0x9EA0B508, 0xD493D0CA }
	TAG_STRUCT(
		game_completion_rewards_multiplayer_block,
		"game_completion_rewards_multiplayer_block",
		"game_completion_rewards_multiplayer_block",
		"s_game_completion_rewards_multiplayer_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_COMPLETION_REWARDS_MULTIPLAYER_BLOCK_ID)
	{
		{ _field_block, "matchmaking", "this block is used for matchmade games", &game_completion_rewards_definition_block_block },
		{ _field_block, "custom", "this block is used for custom games", &game_completion_rewards_definition_block_block },
		{ _field_block, "unused0", &game_completion_rewards_definition_block_block },
		{ _field_block, "unused1", &game_completion_rewards_definition_block_block },
		{ _field_block, "unused2", &game_completion_rewards_definition_block_block },
		{ _field_terminator }
	};

	#define GAME_ENGINE_AI_TRAITS_LIST_BLOCK_ID { 0xB7D92333, 0x53D54ADE, 0x863F6885, 0xA9392539 }
	TAG_STRUCT(
		game_engine_ai_traits_list_block,
		"game_engine_ai_traits_list_block",
		"game_engine_ai_traits_list_block",
		"s_game_engine_ai_traits_list_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_AI_TRAITS_LIST_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_struct, "ai traits", &game_engine_ai_traits_struct },
		{ _field_terminator }
	};

	#define GAME_ENGINE_AI_TRAITS_STRUCT_ID { 0xA7217EE7, 0x772048E4, 0x9BC01D53, 0x380079BA }
	TAG_STRUCT(
		game_engine_ai_traits_struct,
		"game_engine_ai_traits_struct",
		"game_engine_ai_traits_struct",
		"s_game_engine_ai_traits_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_AI_TRAITS_STRUCT_ID)
	{
		{ _field_char_enum, "vision traits", &ai_trait_vision_settings },
		{ _field_char_enum, "sound traits", &ai_trait_sound_settings },
		{ _field_char_enum, "luck traits", &ai_trait_luck_settings },
		{ _field_char_enum, "weapon traits", &global_ai_trait_weapon_settings },
		{ _field_char_enum, "grenade traits", &ai_trait_grenade_settings },
		{ _field_char_enum, "drop equipment on death", &player_trait_bool_enum },
		{ _field_char_enum, "assassination immunity", &player_trait_bool_enum },
		{ _field_char_enum, "headshot immunity", &player_trait_bool_enum },
		{ _field_char_enum, "damage resistance percentage", &player_trait_damage_resistance },
		{ _field_char_enum, "damage modifier percentage", &player_trait_damage_modifier },
		FIELD_PAD("pad", 2),
		{ _field_terminator }
	};

	STRINGS(ai_trait_vision_settings)
	{
		"unchanged",
		"normal",
		"blind",
		"near sighted",
		"eagle eye"
	};
	STRING_LIST(ai_trait_vision_settings, ai_trait_vision_settings_strings, _countof(ai_trait_vision_settings_strings));

	STRINGS(ai_trait_sound_settings)
	{
		"unchanged",
		"normal",
		"deaf",
		"sharp"
	};
	STRING_LIST(ai_trait_sound_settings, ai_trait_sound_settings_strings, _countof(ai_trait_sound_settings_strings));

	STRINGS(ai_trait_luck_settings)
	{
		"unchanged",
		"normal",
		"unlucky",
		"lucky",
		"leprechaun"
	};
	STRING_LIST(ai_trait_luck_settings, ai_trait_luck_settings_strings, _countof(ai_trait_luck_settings_strings));

	STRINGS(global_ai_trait_weapon_settings)
	{
		"unchanged",
		"normal",
		"marksman",
		"trigger happy"
	};
	STRING_LIST(global_ai_trait_weapon_settings, global_ai_trait_weapon_settings_strings, _countof(global_ai_trait_weapon_settings_strings));

	STRINGS(ai_trait_grenade_settings)
	{
		"unchanged",
		"normal",
		"none",
		"catch"
	};
	STRING_LIST(ai_trait_grenade_settings, ai_trait_grenade_settings_strings, _countof(ai_trait_grenade_settings_strings));

	STRINGS(player_trait_bool_enum)
	{
		"unchanged",
		"false",
		"true"
	};
	STRING_LIST(player_trait_bool_enum, player_trait_bool_enum_strings, _countof(player_trait_bool_enum_strings));

	STRINGS(player_trait_damage_resistance)
	{
		"unchanged",
		"10 percent",
		"50 percent",
		"90 percent",
		"100 percent",
		"110 percent",
		"150 percent",
		"200 percent",
		"300 percent",
		"500 percent",
		"1000 percent",
		"2000 percent",
		"invulnerable"
	};
	STRING_LIST(player_trait_damage_resistance, player_trait_damage_resistance_strings, _countof(player_trait_damage_resistance_strings));

	STRINGS(player_trait_damage_modifier)
	{
		"unchanged",
		"0 percent",
		"25 percent",
		"50 percent",
		"75 percent",
		"90 percent",
		"100 percent",
		"110 percent",
		"125 percent",
		"150 percent",
		"200 percent",
		"300 percent",
		"fatality"
	};
	STRING_LIST(player_trait_damage_modifier, player_trait_damage_modifier_strings, _countof(player_trait_damage_modifier_strings));

	#define GAME_ENGINE_CAMPAIGN_VARIANT_BLOCK_ID { 0xDCABAC41, 0x7F354E3A, 0x9AA1FF47, 0xF0498D93 }
	TAG_STRUCT(
		game_engine_campaign_variant_block,
		"game_engine_campaign_variant_block",
		"game_engine_campaign_variant_block",
		"s_game_engine_campaign_variant_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_CAMPAIGN_VARIANT_BLOCK_ID)
	{
		{ _field_string_id, "localizable name" },
		{ _field_string_id, "localizable description" },
		{ _field_block, "miscellaneous options", &game_engine_miscellaneous_options_block_block },
		{ _field_block, "prototype options", &game_engine_prototype_options_block_block },
		{ _field_block, "respawn options", &game_engine_respawn_options_block_block },
		{ _field_block, "social options", &game_engine_social_options_block_block },
		{ _field_block, "map override options", &game_engine_map_override_options_block_block },
		{ _field_block, "team options", &game_engine_team_options_block_block },
		{ _field_block, "loadout options", &game_engine_loadout_options_block_block },
		{ _field_block, "ordnance options", &gameengineordnanceoptionsblock_block },
		{ _field_terminator }
	};

	#define GAME_ENGINE_EVENT_BLOCK_STRUCT_ID { 0x935C1570, 0xF1054278, 0x92110297, 0xDF082665 }
	TAG_STRUCT(
		game_engine_event_block_struct,
		"game_engine_event_block_struct",
		"game_engine_event_block_struct",
		"s_game_engine_event_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_EVENT_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name", MAKE_ALT_NAMES("incident"), FIELD_FLAG_INDEX },
		{ _field_char_enum, "audience", &game_engine_event_audience_enum_definition },
		FIELD_PAD("pad0", 3),
		{ _field_string_id, "display string", "This string can use a bunch of neat tokens for substitution of runtime data (e.g. player names).  See an engineer for more info." },
		{ _field_char_enum, "required field", &game_engine_event_input_enum_definition },
		{ _field_byte_flags, "excluded audience", &game_engine_event_input_enum_definition },
		{ _field_char_enum, "splitscreen suppression", &game_engine_event_splitscreen_suppression_enum_definition },
		{ _field_byte_flags, "flags", &game_engine_event_flags_definition },
		{ _field_string_id, "primary string", "This string can use a bunch of neat tokens for substitution of runtime data (e.g. player names).  See an engineer for more info." },
		{ _field_long_integer, "primary string duration", nullptr, "seconds" },
		{ _field_real, "sound delay (announcer only)", "After we commit to playing this sound, wait this long to actually play it.  Used to control announcer cadence." },
		{ _field_struct, "default_sound", &sound_response_definition_struct },
		FIELD_EXPLANATION("SOUND PRIORITIZATION", "A data-driven way to choose between halo 3 mp\'s always-queue behavior vs. odst firefight\'s always-suppress-older-multikills behavior."),
		{ _field_string_id, "category_for_prioritization", "which family does this response live in for announcer-spew-suppression?  e.g. all multi-kills should use the same string_id here." },
		{ _field_long_integer, "sound priority", "higher numbers mean more important" },
		{ _field_real, "priority_suppression_age_max_seconds", "If a sound from this event has been queued for more than this long, it can't be suppressed anymore.  Higher values cause a shallower announcer queue for these sounds.", "seconds" },
		FIELD_EXPLANATION("SOUND PAIR CULLING", "A way to say flag taken + flag dropped = silence."),
		{ _field_string_id, "category_for_pair_culling", "e.g. flag taken and flag dropped should use the same id here, while ball taken and ball dropped should use another shared id." },
		{ _field_long_integer, "pair_id", "0 or 1, used to recognized matched pairs.  If both a 0 and a 1 are in the queue at the same time, and neither has started playing, both are removed." },
		{ _field_real, "delay_before_considering_sound_seconds", "Used to keep a sound in the queue so later sounds can priority-suppress or pair-suppress it", "seconds" },
		{ _field_block, "sound permutations", &sound_response_definition_block_block },
		{ _field_terminator }
	};

	STRINGS(game_engine_event_audience_enum_definition)
	{
		"cause player",
		"cause team",
		"effect player",
		"effect team",
		"all"
	};
	STRING_LIST(game_engine_event_audience_enum_definition, game_engine_event_audience_enum_definition_strings, _countof(game_engine_event_audience_enum_definition_strings));

	STRINGS(game_engine_event_input_enum_definition)
	{
		"NONE",
		"cause player",
		"cause team",
		"effect player",
		"effect team"
	};
	STRING_LIST(game_engine_event_input_enum_definition, game_engine_event_input_enum_definition_strings, _countof(game_engine_event_input_enum_definition_strings));

	STRINGS(game_engine_event_splitscreen_suppression_enum_definition)
	{
		"NONE",
		"Suppress Audio",
		"Suppress Audio if Overlapping",
		"Suppress Text",
		"Suppress Audio and Text"
	};
	STRING_LIST(game_engine_event_splitscreen_suppression_enum_definition, game_engine_event_splitscreen_suppression_enum_definition_strings, _countof(game_engine_event_splitscreen_suppression_enum_definition_strings));

	STRINGS(game_engine_event_flags_definition)
	{
		"always play sound#used for respawn ticks and final tick in halo 3",
		"always play sound in mp#so you can make multi kill sounds never be suppressed in MP"
	};
	STRING_LIST(game_engine_event_flags_definition, game_engine_event_flags_definition_strings, _countof(game_engine_event_flags_definition_strings));

	#define GAME_ENGINE_GLOBALS_STRUCT_DEFINITION_ID { 0x796F3498, 0x65054DAA, 0x882DA33D, 0xB1677B4E }
	TAG_STRUCT(
		game_engine_globals_struct_definition,
		"game_engine_globals_struct_definition",
		"game_engine_globals_struct_definition",
		"s_game_engine_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_GLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_tag_reference, "game engine settings", &game_engine_settings_definition_group_reference },
		{ _field_tag_reference, "game engine text", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "game engine event response list", &game_engine_event_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(game_engine_settings_definition_group_reference, GAME_ENGINE_SETTINGS_DEFINITION_TAG);

	#define GAME_ENGINE_LOADOUT_OPTIONS_BLOCK_ID { 0x2DF85826, 0x424C4A2B, 0xADE6F7B4, 0x3B780B92 }
	TAG_STRUCT(
		game_engine_loadout_options_block,
		"game_engine_loadout_options_block",
		"game_engine_loadout_options_block",
		"s_game_engine_loadout_options_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_LOADOUT_OPTIONS_BLOCK_ID)
	{
		{ _field_byte_flags, "flags", &loadout_flags_definition },
		FIELD_PAD("DLVKJSER", 3),
		{ _field_block, "loadout palettes", &game_engine_loadout_palette_entry_block_block },
		{ _field_terminator }
	};

	STRINGS(loadout_flags_definition)
	{
		"custom loadouts enabled",
		"spartan loadouts enabled",
		"elite loadouts enabled",
		"map loadouts enabled"
	};
	STRING_LIST(loadout_flags_definition, loadout_flags_definition_strings, _countof(loadout_flags_definition_strings));

	#define GAME_ENGINE_LOADOUT_PALETTE_ENTRY_BLOCK_ID { 0xEB349E58, 0xB4864414, 0xA31F0584, 0x137CBFC3 }
	TAG_STRUCT(
		game_engine_loadout_palette_entry_block,
		"game_engine_loadout_palette_entry_block",
		"game_engine_loadout_palette_entry_block",
		"s_game_engine_loadout_palette_entry_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_LOADOUT_PALETTE_ENTRY_BLOCK_ID)
	{
		{ _field_string_id, "palette name" },
		{ _field_terminator }
	};

	#define GAME_ENGINE_MAP_OVERRIDE_OPTIONS_BLOCK_ID { 0xE881D96D, 0xBB884679, 0x9ACC0364, 0xE9D68670 }
	TAG_STRUCT(
		game_engine_map_override_options_block,
		"game_engine_map_override_options_block",
		"game_engine_map_override_options_block",
		"s_game_engine_map_override_options_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_MAP_OVERRIDE_OPTIONS_BLOCK_ID)
	{
		{ _field_string_id, "player traits name" },
		{ _field_string_id, "weapon set name" },
		{ _field_string_id, "vehicle set name" },
		{ _field_string_id, "equipment set name" },
		{ _field_string_id, "red powerup traits name" },
		{ _field_string_id, "blue powerup traits name" },
		{ _field_string_id, "yellow powerup traits name" },
		{ _field_string_id, "custom powerup traits name" },
		{ _field_char_integer, "red powerup duration", nullptr, "seconds" },
		{ _field_char_integer, "blue powerup duration", nullptr, "seconds" },
		{ _field_char_integer, "yellow powerup duration", nullptr, "seconds" },
		{ _field_char_integer, "custom powerup duration", nullptr, "seconds" },
		{ _field_string_id, "red powerup secondary traits name" },
		{ _field_string_id, "blue powerup secondary traits name" },
		{ _field_string_id, "yellow powerup secondary traits name" },
		{ _field_string_id, "custom powerup secondary traits name" },
		{ _field_char_integer, "red powerup secondary duration", nullptr, "seconds" },
		{ _field_char_integer, "blue powerup secondary duration", nullptr, "seconds" },
		{ _field_char_integer, "yellow powerup secondary duration", nullptr, "seconds" },
		{ _field_char_integer, "custom powerup secondary duration", nullptr, "seconds" },
		{ _field_byte_flags, "flags", &game_engine_map_override_options_flags },
		FIELD_PAD("pad", 3),
		{ _field_terminator }
	};

	STRINGS(game_engine_map_override_options_flags)
	{
		"grenades on map",
		"shortcuts on map",
		"equipment on map",
		"powerups on map",
		"turrets on map",
		"indestructible vehicles"
	};
	STRING_LIST(game_engine_map_override_options_flags, game_engine_map_override_options_flags_strings, _countof(game_engine_map_override_options_flags_strings));

	#define GAME_ENGINE_MISCELLANEOUS_OPTIONS_BLOCK_ID { 0x4E184020, 0x9F9B44E9, 0x9B53D8FA, 0x60936484 }
	TAG_STRUCT(
		game_engine_miscellaneous_options_block,
		"game_engine_miscellaneous_options_block",
		"game_engine_miscellaneous_options_block",
		"s_game_engine_miscellaneous_options_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_MISCELLANEOUS_OPTIONS_BLOCK_ID)
	{
		{ _field_word_flags, "flags", &game_engine_miscellaneous_options_flags },
		{ _field_char_integer, "early victory win count" },
		{ _field_char_integer, "round time limit", nullptr, "minutes" },
		{ _field_char_integer, "number of rounds" },
		{ _field_char_enum, "mosh difficulty level", &mosh_difficulty },
		{ _field_byte_integer, "overshield deplete time" },
		FIELD_PAD("RXXH", 1),
		{ _field_terminator }
	};

	STRINGS(game_engine_miscellaneous_options_flags)
	{
		"teams enabled",
		"round reset players",
		"round reset map",
		"perfection enabled",
		"mosh",
		"drop weapons on death",
		"killcam enabled",
		"medal scoring enabled",
		"asymmetric round scoring"
	};
	STRING_LIST(game_engine_miscellaneous_options_flags, game_engine_miscellaneous_options_flags_strings, _countof(game_engine_miscellaneous_options_flags_strings));

	STRINGS(mosh_difficulty)
	{
		"easy",
		"normal",
		"heroic",
		"legendary"
	};
	STRING_LIST(mosh_difficulty, mosh_difficulty_strings, _countof(mosh_difficulty_strings));

	#define GAME_ENGINE_PLAYER_TRAITS_BLOCK_ID { 0xAECDFA4E, 0x754147FD, 0xAA99E781, 0xF6537F90 }
	TAG_STRUCT(
		game_engine_player_traits_block,
		"game_engine_player_traits_block",
		"game_engine_player_traits_block",
		"s_game_engine_player_traits_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_PLAYER_TRAITS_BLOCK_ID)
	{
		{ _field_block, "vitality traits", &player_traits_vitality_block_block },
		{ _field_block, "weapon traits", &player_traits_weapons_block_block },
		{ _field_block, "movement traits", &player_traits_movement_block_block },
		{ _field_block, "appearance traits", &player_traits_appearance_block_block },
		{ _field_block, "sensor traits", &player_traits_sensors_block_block },
		{ _field_terminator }
	};

	#define GAME_ENGINE_PLAYER_TRAITS_LIST_BLOCK_ID { 0xF63362FC, 0x54C34B03, 0xB281876F, 0x6CDFA31E }
	TAG_STRUCT(
		game_engine_player_traits_list_block,
		"game_engine_player_traits_list_block",
		"game_engine_player_traits_list_block",
		"s_game_engine_player_traits_list_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_PLAYER_TRAITS_LIST_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "vitality traits", &player_traits_vitality_block_block },
		{ _field_block, "weapon traits", &player_traits_weapons_block_block },
		{ _field_block, "movement traits", &player_traits_movement_block_block },
		{ _field_block, "appearance traits", &player_traits_appearance_block_block },
		{ _field_block, "sensor traits", &player_traits_sensors_block_block },
		{ _field_terminator }
	};

	#define GAME_ENGINE_PROTOTYPE_OPTIONS_BLOCK_ID { 0x1E7F0911, 0xFD98458A, 0x85DFDCE5, 0x8CDF8AAE }
	TAG_STRUCT(
		game_engine_prototype_options_block,
		"game_engine_prototype_options_block",
		"game_engine_prototype_options_block",
		"s_game_engine_prototype_options_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_PROTOTYPE_OPTIONS_BLOCK_ID)
	{
		{ _field_char_integer, "prototype mode" },
		{ _field_char_integer, "promethean energy kill percent" },
		{ _field_char_integer, "promethean energy time percent" },
		{ _field_char_integer, "promethean energy medal percent" },
		{ _field_char_integer, "promethean duration" },
		{ _field_char_integer, "class color override" },
		{ _field_terminator }
	};

	#define GAME_ENGINE_RESPAWN_OPTIONS_BLOCK_ID { 0xAE909DD1, 0x6A184C06, 0xA850A80C, 0x6156FB90 }
	TAG_STRUCT(
		game_engine_respawn_options_block,
		"game_engine_respawn_options_block",
		"game_engine_respawn_options_block",
		"s_game_engine_respawn_options_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_RESPAWN_OPTIONS_BLOCK_ID)
	{
		{ _field_word_flags, "flags", &game_engine_respawn_options_flags },
		{ _field_char_integer, "lives per round" },
		{ _field_char_integer, "team lives per round" },
		{ _field_char_integer, "min respawn time", nullptr, "seconds" },
		{ _field_char_integer, "respawn time", nullptr, "seconds" },
		{ _field_char_integer, "suicide penalty", nullptr, "seconds" },
		{ _field_char_integer, "betrayal penalty", nullptr, "seconds" },
		{ _field_char_integer, "respawn growth", nullptr, "seconds" },
		FIELD_PAD("EOTOTRXV", 3),
		{ _field_string_id, "respawn player traits name" },
		{ _field_char_integer, "initial loadout selection time", "delay before spawning in at start of round", "seconds" },
		{ _field_char_integer, "respawn player traits duration", nullptr, "seconds" },
		FIELD_PAD("woman bound for glory, why you leaving me again?", 2),
		{ _field_terminator }
	};

	STRINGS(game_engine_respawn_options_flags)
	{
		"inherit respawn time",
		"respawn with teammate",
		"respawn at location",
		"respawn on kills",
		"early respawn allowed"
	};
	STRING_LIST(game_engine_respawn_options_flags, game_engine_respawn_options_flags_strings, _countof(game_engine_respawn_options_flags_strings));

	#define GAME_ENGINE_SANDBOX_VARIANT_BLOCK_ID { 0x5B14CC8E, 0x9237482D, 0xA4EED56E, 0x97F068DA }
	TAG_STRUCT(
		game_engine_sandbox_variant_block,
		"game_engine_sandbox_variant_block",
		"game_engine_sandbox_variant_block",
		"s_game_engine_sandbox_variant_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_SANDBOX_VARIANT_BLOCK_ID)
	{
		{ _field_string_id, "localizable name" },
		{ _field_string_id, "localizable description" },
		{ _field_block, "miscellaneous options", &game_engine_miscellaneous_options_block_block },
		{ _field_block, "prototype options", &game_engine_prototype_options_block_block },
		{ _field_block, "respawn options", &game_engine_respawn_options_block_block },
		{ _field_block, "social options", &game_engine_social_options_block_block },
		{ _field_block, "map override options", &game_engine_map_override_options_block_block },
		{ _field_block, "team options", &game_engine_team_options_block_block },
		{ _field_block, "loadout options", &game_engine_loadout_options_block_block },
		{ _field_block, "ordnance options", &gameengineordnanceoptionsblock_block },
		{ _field_long_flags, "flags", &sandbox_flags },
		{ _field_short_enum, "edit mode", &sandbox_editing_mode },
		{ _field_short_enum, "respawn time", &sandbox_respawn_time },
		{ _field_string_id, "all players traits" },
		{ _field_terminator }
	};

	STRINGS(sandbox_flags)
	{
		"open channel voice",
		"requires all objects"
	};
	STRING_LIST(sandbox_flags, sandbox_flags_strings, _countof(sandbox_flags_strings));

	STRINGS(sandbox_editing_mode)
	{
		"All players",
		"Only Leader"
	};
	STRING_LIST(sandbox_editing_mode, sandbox_editing_mode_strings, _countof(sandbox_editing_mode_strings));

	STRINGS(sandbox_respawn_time)
	{
		"instant",
		"3 seconds",
		"4 seconds",
		"5 seconds",
		"6 seconds",
		"7 seconds",
		"8 seconds",
		"9 seconds",
		"10 seconds",
		"15 seconds",
		"30 seconds",
		"60 seconds"
	};
	STRING_LIST(sandbox_respawn_time, sandbox_respawn_time_strings, _countof(sandbox_respawn_time_strings));

	#define GAME_ENGINE_SETTINGS_DEFINITION_STRUCT_DEFINITION_ID { 0x2644FCED, 0xC39A4930, 0xB9F37CB2, 0x70F9BDA5 }
	TAG_STRUCT(
		game_engine_settings_definition_struct_definition,
		"game_engine_settings_definition_struct_definition",
		"game_engine_settings_definition_struct_definition",
		"s_game_engine_settings_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_SETTINGS_DEFINITION_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Game Engine Settings", "This contains the definitions for the built-in custom multiplayer game variants"),
		{ _field_long_flags, "flags", &game_engine_settings_flags },
		{ _field_block, "player traits", &game_engine_player_traits_list_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "ai traits", &game_engine_ai_traits_list_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "sandbox variants", &game_engine_sandbox_variant_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "survival variants", &game_engine_survival_variant_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "new firefight variants", MAKE_ALT_NAMES("firefight variants new"), &gameenginefirefightvariantshellblock_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "campaign variants", &game_engine_campaign_variant_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_terminator }
	};

	STRINGS(game_engine_settings_flags)
	{
		"unused"
	};
	STRING_LIST(game_engine_settings_flags, game_engine_settings_flags_strings, _countof(game_engine_settings_flags_strings));

	#define GAME_ENGINE_SOCIAL_OPTIONS_BLOCK_ID { 0xEA186C9D, 0xC04940B9, 0xB8F44A1B, 0x4E8326DF }
	TAG_STRUCT(
		game_engine_social_options_block,
		"game_engine_social_options_block",
		"game_engine_social_options_block",
		"s_game_engine_social_options_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_SOCIAL_OPTIONS_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &game_engine_social_options_flags },
		{ _field_terminator }
	};

	STRINGS(game_engine_social_options_flags)
	{
		"observers enabled",
		"team changing enabled",
		"team changing balancing only",
		"friendly fire enabled",
		"betrayal booting enabled",
		"enemy voice enabled",
		"open channel voice enabled",
		"dead player voice enabled"
	};
	STRING_LIST(game_engine_social_options_flags, game_engine_social_options_flags_strings, _countof(game_engine_social_options_flags_strings));

	#define GAME_ENGINE_STATUS_RESPONSE_BLOCK_ID { 0x79A4818A, 0xCCA84A1F, 0x96B1B1D4, 0x3F614F45 }
	TAG_STRUCT(
		game_engine_status_response_block,
		"game_engine_status_response_block",
		"game_engine_status_response_block",
		"s_game_engine_status_response_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_STATUS_RESPONSE_BLOCK_ID)
	{
		{ _field_word_flags, "flags", &game_engine_status_flags_definition },
		FIELD_PAD("FAW", 2),
		{ _field_short_enum, "state", &game_engine_status_enum_definition },
		FIELD_PAD("BNYFIDDGX", 2),
		{ _field_string_id, "ffa message" },
		{ _field_string_id, "team message" },
		{ _field_tag_reference, "unused", &_reference$6 },
		FIELD_PAD("GTL", 4),
		{ _field_terminator }
	};

	STRINGS(game_engine_status_flags_definition)
	{
		"unused"
	};
	STRING_LIST(game_engine_status_flags_definition, game_engine_status_flags_definition_strings, _countof(game_engine_status_flags_definition_strings));

	STRINGS(game_engine_status_enum_definition)
	{
		"waiting for space to clear",
		"observing",
		"respawning soon",
		"sitting out",
		"out of lives",
		"playing (winning)",
		"playing (tied)",
		"playing (losing)",
		"game over (won)",
		"game over (tied)",
		"game over (lost)",
		"game over (you lost, but game tied)",
		"you have flag",
		"enemy has flag",
		"flag not home",
		"carrying oddball",
		"you are juggy",
		"you control hill",
		"switching sides soon",
		"player recently started",
		"you have bomb",
		"flag contested",
		"bomb contested",
		"limited lives left (multiple)",
		"limited lives left (single)",
		"limited lives left (final)",
		"playing (winning, unlimited)",
		"playing (tied, unlimited)",
		"playing (losing, unlimited)",
		"waiting to spawn",
		"waiting for game start",
		"blank"
	};
	STRING_LIST(game_engine_status_enum_definition, game_engine_status_enum_definition_strings, _countof(game_engine_status_enum_definition_strings));

	#define GAME_ENGINE_SURVIVAL_BONUS_WAVE_PROPERTIES_STRUCT_ID { 0x38D197D3, 0x5E0D4E20, 0x89138F88, 0x3567D711 }
	TAG_STRUCT(
		game_engine_survival_bonus_wave_properties_struct,
		"game_engine_survival_bonus_wave_properties_struct",
		"game_engine_survival_bonus_wave_properties_struct",
		"s_game_engine_survival_bonus_wave_properties_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_SURVIVAL_BONUS_WAVE_PROPERTIES_STRUCT_ID)
	{
		{ _field_long_flags, "skulls", MAKE_ALT_NAMES("primary skulls"), &skull_flags },
		{ _field_short_integer, "duration", nullptr, "s" },
		FIELD_PAD("CLKJSDF", 2),
		{ _field_struct, "base properties", &game_engine_survival_wave_properties_struct },
		{ _field_terminator }
	};

	#define GAME_ENGINE_SURVIVAL_CUSTOM_SKULL_BLOCK_ID { 0xD153890A, 0x8AE47F4, 0xA631F0D4, 0xC8E544DE }
	TAG_STRUCT(
		game_engine_survival_custom_skull_block,
		"game_engine_survival_custom_skull_block",
		"game_engine_survival_custom_skull_block",
		"s_game_engine_survival_custom_skull_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_SURVIVAL_CUSTOM_SKULL_BLOCK_ID)
	{
		{ _field_string_id, "spartan player traits" },
		{ _field_string_id, "elite player traits" },
		{ _field_string_id, "ai traits" },
		{ _field_terminator }
	};

	#define GAME_ENGINE_SURVIVAL_ROUND_PROPERTIES_BLOCK_ID { 0xB85241D5, 0x73D143E2, 0xBC7B2803, 0x3D920427 }
	TAG_STRUCT(
		game_engine_survival_round_properties_block,
		"game_engine_survival_round_properties_block",
		"game_engine_survival_round_properties_block",
		"s_game_engine_survival_round_properties_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_SURVIVAL_ROUND_PROPERTIES_BLOCK_ID)
	{
		{ _field_long_flags, "skulls", MAKE_ALT_NAMES("primary skulls"), &skull_flags },
		FIELD_GROUP_BEGIN("initial wave"),
		{ _field_struct, "initial waves", &game_engine_survival_wave_properties_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("primary wave"),
		{ _field_struct, "primary waves", &game_engine_survival_wave_properties_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("boss wave"),
		{ _field_struct, "boss waves", &game_engine_survival_wave_properties_struct },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define GAME_ENGINE_SURVIVAL_SET_PROPERTIES_BLOCK_ID { 0xC3F411AE, 0xF42346FE, 0xB1585B9B, 0x7A789ABC }
	TAG_STRUCT(
		game_engine_survival_set_properties_block,
		"game_engine_survival_set_properties_block",
		"game_engine_survival_set_properties_block",
		"s_game_engine_survival_set_properties_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_SURVIVAL_SET_PROPERTIES_BLOCK_ID)
	{
		{ _field_long_flags, "skulls", MAKE_ALT_NAMES("primary skulls"), &skull_flags },
		{ _field_terminator }
	};

	#define GAME_ENGINE_SURVIVAL_VARIANT_BLOCK_ID { 0x891F8387, 0xD9A941E0, 0x87AAC1DC, 0xFA54ACF0 }
	TAG_STRUCT(
		game_engine_survival_variant_block,
		"game_engine_survival_variant_block",
		"game_engine_survival_variant_block",
		"s_game_engine_survival_variant_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_SURVIVAL_VARIANT_BLOCK_ID)
	{
		{ _field_string_id, "localizable name" },
		{ _field_string_id, "localizable description" },
		{ _field_block, "miscellaneous options", &game_engine_miscellaneous_options_block_block },
		{ _field_block, "prototype options", &game_engine_prototype_options_block_block },
		{ _field_block, "respawn options", &game_engine_respawn_options_block_block },
		{ _field_block, "social options", &game_engine_social_options_block_block },
		{ _field_block, "map override options", &game_engine_map_override_options_block_block },
		{ _field_block, "team options", &game_engine_team_options_block_block },
		{ _field_block, "loadout options", &game_engine_loadout_options_block_block },
		{ _field_block, "ordnance options", &gameengineordnanceoptionsblock_block },
		{ _field_byte_flags, "flags", &game_engine_survival_variant_flags },
		{ _field_char_enum, "game difficulty", &global_campaign_difficulty_enum },
		FIELD_PAD("SDFHJREN", 2),
		{ _field_char_integer, "set count", "survival_mode_get_set_count, -1 to loop last, -2 to loop last 3, -3 to loop all" },
		{ _field_char_integer, "bonus lives awarded", "survival_mode_get_bonus_lives_awarded" },
		{ _field_short_integer, "bonus target", "survival_mode_get_bonus_target" },
		{ _field_short_integer, "spartan lives on elite death" },
		{ _field_short_integer, "extra life score target" },
		{ _field_short_integer, "shared team life count" },
		{ _field_short_integer, "elite life count" },
		{ _field_short_integer, "maximum lives" },
		{ _field_short_integer, "generator count" },
		{ _field_string_id, "spartan player traits" },
		{ _field_string_id, "elite player traits" },
		{ _field_string_id, "ai traits" },
		{ _field_block, "elite respawn options", &game_engine_respawn_options_block_block },
		{ _field_block, "set properties", &game_engine_survival_set_properties_block_block },
		{ _field_block, "round properties", &game_engine_survival_round_properties_block_block },
		FIELD_GROUP_BEGIN("bonus round"),
		{ _field_struct, "bonus round properties", &game_engine_survival_bonus_wave_properties_struct },
		FIELD_GROUP_END(),
		{ _field_block, "custom skulls", &game_engine_survival_custom_skull_block_block },
		{ _field_terminator }
	};

	STRINGS(game_engine_survival_variant_flags)
	{
		"enable scenario hazards",
		"generator defend all",
		"generator random spawn",
		"enable weapon drops",
		"enable ammo crates"
	};
	STRING_LIST(game_engine_survival_variant_flags, game_engine_survival_variant_flags_strings, _countof(game_engine_survival_variant_flags_strings));

	#define GAME_ENGINE_SURVIVAL_WAVE_PROPERTIES_STRUCT_ID { 0x14F6C0C1, 0x7F794B40, 0x8083C34E, 0x615FA34A }
	TAG_STRUCT(
		game_engine_survival_wave_properties_struct,
		"game_engine_survival_wave_properties_struct",
		"game_engine_survival_wave_properties_struct",
		"s_game_engine_survival_wave_properties_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_SURVIVAL_WAVE_PROPERTIES_STRUCT_ID)
	{
		{ _field_byte_flags, "flags", &survival_wave_properties_flags },
		{ _field_char_enum, "wave selection type", &survival_wave_squad_advance_type_enum },
		FIELD_PAD("VJKNMFEN", 2),
		{ _field_block, "wave squads", &survival_wave_squad_block_block },
		{ _field_terminator }
	};

	STRINGS(survival_wave_properties_flags)
	{
		"delivered via dropship"
	};
	STRING_LIST(survival_wave_properties_flags, survival_wave_properties_flags_strings, _countof(survival_wave_properties_flags_strings));

	STRINGS(survival_wave_squad_advance_type_enum)
	{
		"random",
		"sequence"
	};
	STRING_LIST(survival_wave_squad_advance_type_enum, survival_wave_squad_advance_type_enum_strings, _countof(survival_wave_squad_advance_type_enum_strings));

	#define GAME_ENGINE_TEAM_OPTIONS_BLOCK_ID { 0x571F4D81, 0x3C4CD5, 0x950C0645, 0x5B6A6FA0 }
	TAG_STRUCT(
		game_engine_team_options_block,
		"game_engine_team_options_block",
		"game_engine_team_options_block",
		"s_game_engine_team_options_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_TEAM_OPTIONS_BLOCK_ID)
	{
		{ _field_char_enum, "model override type", &game_engine_team_options_model_override_type },
		{ _field_char_enum, "designator switch type", &game_engine_team_options_designator_switch_type },
		FIELD_PAD("pad", 2),
		{ _field_array, "teams", &game_engine_team_options_team_block$2 },
		{ _field_terminator }
	};

	STRINGS(game_engine_team_options_model_override_type)
	{
		"none (player choice)",
		"force spartan",
		"force elite",
		"set by team",
		"set by designator"
	};
	STRING_LIST(game_engine_team_options_model_override_type, game_engine_team_options_model_override_type_strings, _countof(game_engine_team_options_model_override_type_strings));

	STRINGS(game_engine_team_options_designator_switch_type)
	{
		"none",
		"random",
		"rotate"
	};
	STRING_LIST(game_engine_team_options_designator_switch_type, game_engine_team_options_designator_switch_type_strings, _countof(game_engine_team_options_designator_switch_type_strings));

	#define GAME_ENGINE_TEAM_OPTIONS_TEAM_BLOCK_STRUCT_DEFINITION_ID { 0x3303F583, 0x42184740, 0x986A9390, 0x90FCFEE1 }
	TAG_STRUCT(
		game_engine_team_options_team_block_struct_definition,
		"game_engine_team_options_team_block",
		"game_engine_team_options_team_block",
		"s_game_engine_team_options_team_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_ENGINE_TEAM_OPTIONS_TEAM_BLOCK_STRUCT_DEFINITION_ID)
	{
		{ _field_byte_flags, "flags", &game_engine_team_options_team_flags },
		{ _field_char_enum, "initial team designator", &global_multiplayer_team_designator_enum_definition },
		{ _field_char_enum, "model override", &game_engine_team_options_player_model_choice },
		{ _field_byte_integer, "number of fireteams" },
		{ _field_string_id, "description" },
		{ _field_rgb_color, "primary color override", MAKE_ALT_NAMES("color override") },
		{ _field_rgb_color, "secondary color override" },
		{ _field_argb_color, "ui text tint color override" },
		{ _field_argb_color, "ui bitmap tint color override" },
		{ _field_terminator }
	};

	STRINGS(game_engine_team_options_team_flags)
	{
		"enabled",
		"primary override color",
		"secondary override color",
		"override ui text tint color",
		"override ui bitmap tint color",
		"override emblem"
	};
	STRING_LIST(game_engine_team_options_team_flags, game_engine_team_options_team_flags_strings, _countof(game_engine_team_options_team_flags_strings));

	STRINGS(global_multiplayer_team_designator_enum_definition)
	{
		"defender",
		"attacker",
		"third party",
		"fourth party",
		"fifth party",
		"sixth party",
		"seventh party",
		"eighth party{eigth party}",
		"neutral"
	};
	STRING_LIST(global_multiplayer_team_designator_enum_definition, global_multiplayer_team_designator_enum_definition_strings, _countof(global_multiplayer_team_designator_enum_definition_strings));

	STRINGS(game_engine_team_options_player_model_choice)
	{
		"spartan",
		"elite"
	};
	STRING_LIST(game_engine_team_options_player_model_choice, game_engine_team_options_player_model_choice_strings, _countof(game_engine_team_options_player_model_choice_strings));

	#define GAME_GLOBALS_DAMAGE_BLOCK_ID { 0x5E608798, 0x58964FDC, 0xBCD062B5, 0x7302D300 }
	TAG_STRUCT(
		game_globals_damage_block,
		"game_globals_damage_block",
		"game_globals_damage_block",
		"s_game_globals_damage_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_GLOBALS_DAMAGE_BLOCK_ID)
	{
		{ _field_block, "damage groups", &damage_group_block_block },
		{ _field_terminator }
	};

	#define GAME_GLOBALS_GRENADE_LIST_STRUCT_DEFINITION_ID { 0x6AFD3548, 0xBE4A445D, 0xAA007E0A, 0x90F4AA84 }
	TAG_STRUCT(
		game_globals_grenade_list_struct_definition,
		"game_globals_grenade_list_struct_definition",
		"game_globals_grenade_list_struct_definition",
		"s_game_globals_grenade_list_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_GLOBALS_GRENADE_LIST_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "grenades", &gameglobalsgrenadeblock_block },
		{ _field_terminator }
	};

	#define GAME_GLOBALS_ORDNANCE_LIST_STRUCT_DEFINITION_ID { 0x7D88DCED, 0x1F3E433E, 0xB9099675, 0x33B8D47B }
	TAG_STRUCT(
		game_globals_ordnance_list_struct_definition,
		"game_globals_ordnance_list_struct_definition",
		"game_globals_ordnance_list_struct_definition",
		"s_game_globals_ordnance_list_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_GLOBALS_ORDNANCE_LIST_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "ordnance map width", nullptr, "world units" },
		{ _field_real, "random ordnance fanfare duration", nullptr, "seconds" },
		{ _field_tag_reference, "drop pod cleanup effect", &effect_group_reference },
		{ _field_block, "ordnances", &gameglobalsordnanceblock_block },
		{ _field_block, "ordnance remapping tables", &ordnanceremappingvariantblock_block },
		{ _field_real, "equipment invulnerable seconds" },
		{ _field_terminator }
	};

	#define GAME_INCIDENT_DAILY_CHALLENGE_TO_INCREMENT_BLOCK_ID { 0x42BE7F12, 0x282745AF, 0x8FB944C7, 0x5507C3E4 }
	TAG_STRUCT(
		game_incident_daily_challenge_to_increment_block,
		"game_incident_daily_challenge_to_increment_block",
		"game_incident_daily_challenge_to_increment_block",
		"s_game_incident_daily_challenge_to_increment_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_INCIDENT_DAILY_CHALLENGE_TO_INCREMENT_BLOCK_ID)
	{
		{ _field_string_id, "daily challenge" },
		{ _field_terminator }
	};

	#define GAME_INCIDENT_RESPONSE_BLOCK_STRUCT_ID { 0x2CD0CD80, 0x1A094BE0, 0xBEA6B3B3, 0x68205D16 }
	TAG_STRUCT(
		game_incident_response_block_struct,
		"game_incident_response_block_struct",
		"game_incident_response_block_struct",
		"s_game_incident_response_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_INCIDENT_RESPONSE_BLOCK_STRUCT_ID)
	{
		FIELD_GROUP_BEGIN("allowed game modes"),
		{ _field_struct, "allowed game modes", &game_mode_flags_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("allowed campaign and firefight"),
		{ _field_string_id, "allowed level name", "Can only be triggered on this level." },
		{ _field_long_flags, "required skulls", "These skulls must be enabled to trigger.", &skull_flags_definition },
		FIELD_GROUP_END(),
		{ _field_long_integer, "heat award" },
		{ _field_string_id, "game engine event" },
		{ _field_string_id, "medal" },
		{ _field_string_id, "commendation" },
		{ _field_string_id, "achievement" },
		{ _field_string_id, "avatar award" },
		{ _field_block, "challenges", &game_incident_daily_challenge_to_increment_block_block },
		{ _field_string_id, "hs script" },
		{ _field_short_integer, "internal hs script index" },
		FIELD_PAD("VHSLKJNE", 2),
		{ _field_block, "fanfare", &specialized_incident_fanfare_block_block },
		{ _field_tag_reference, "sound response", &sound_incident_response_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(sound_incident_response_group_reference, SOUND_INCIDENT_RESPONSE_TAG);

	#define GAME_MEDAL_BLOCK_ID { 0xF9F8912F, 0x751346A0, 0xB670D5B7, 0x799A1799 }
	TAG_STRUCT(
		game_medal_block,
		"game_medal_block",
		"game_medal_block",
		"s_game_medal_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_MEDAL_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "description" },
		{ _field_short_integer, "sequence index" },
		{ _field_char_enum, "medal class", &medal_class_enum },
		FIELD_PAD("PAD1", 1),
		{ _field_long_integer, "ordnance points", "The number of ordnance points that are awarded to the player when they earn this medal." },
		{ _field_byte_integer, "ordnance multiplier", "The ordnance multiplier to add to players ordnance multiplier when they earn this medal." },
		{ _field_byte_integer, "tier index", "the tier that this medal belongs to" },
		{ _field_short_integer, "override point value", "if greater than zero, this point value will be awarded to players instead of the tier's point value" },
		{ _field_terminator }
	};

	STRINGS(medal_class_enum)
	{
		"special",
		"role spree",
		"spree",
		"multikill",
		"objectives",
		"circumstance",
		"finesse"
	};
	STRING_LIST(medal_class_enum, medal_class_enum_strings, _countof(medal_class_enum_strings));

	#define GAME_MEDAL_GLOBALS_STRUCT_DEFINITION_ID { 0x32C934ED, 0x6C6B4352, 0xB86FFA53, 0x76D54461 }
	TAG_STRUCT(
		game_medal_globals_struct_definition,
		"game_medal_globals_struct_definition",
		"game_medal_globals_struct_definition",
		"s_game_medal_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_MEDAL_GLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "tiers", &gamemedaltiers_block },
		{ _field_block, "medals", &game_medal_block_block },
		{ _field_terminator }
	};

	#define GAME_MODE_FLAGS_STRUCT_ID { 0xA7F78373, 0x6E914D1A, 0xA0806AF6, 0xFDC24EA0 }
	TAG_STRUCT(
		game_mode_flags_struct,
		"game_mode_flags_struct",
		"game_mode_flags_struct",
		"s_game_mode_flags_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_MODE_FLAGS_STRUCT_ID)
	{
		{ _field_byte_flags, "game mode", &game_type_enum_definition },
		{ _field_byte_flags, "matchmaking type", &game_matchmaking_flags_definition },
		{ _field_byte_flags, "difficulty", &global_campaign_difficulty_flags },
		{ _field_char_enum, "player count", &game_player_count_flags_definition },
		{ _field_terminator }
	};

	STRINGS(game_type_enum_definition)
	{
		"campaign",
		"firefight",
		"multiplayer"
	};
	STRING_LIST(game_type_enum_definition, game_type_enum_definition_strings, _countof(game_type_enum_definition_strings));

	STRINGS(game_matchmaking_flags_definition)
	{
		"custom game",
		"matchmaking"
	};
	STRING_LIST(game_matchmaking_flags_definition, game_matchmaking_flags_definition_strings, _countof(game_matchmaking_flags_definition_strings));

	STRINGS(global_campaign_difficulty_flags)
	{
		"easy",
		"normal",
		"heroic",
		"legendary"
	};
	STRING_LIST(global_campaign_difficulty_flags, global_campaign_difficulty_flags_strings, _countof(global_campaign_difficulty_flags_strings));

	STRINGS(game_player_count_flags_definition)
	{
		"any",
		"1 player only",
		"4 players only",
		"more than one player"
	};
	STRING_LIST(game_player_count_flags_definition, game_player_count_flags_definition_strings, _countof(game_player_count_flags_definition_strings));

	#define GAME_PERFORMANCE_THROTTLE_ENTRIES_BLOCK_ID { 0x7195A903, 0x69BE49A5, 0xC5CD305E, 0x57868FDC }
	TAG_STRUCT(
		game_performance_throttle_entries_block,
		"game_performance_throttle_entries_block",
		"game_performance_throttle_entries_block",
		"s_game_performance_throttle_entries_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_PERFORMANCE_THROTTLE_ENTRIES_BLOCK_ID)
	{
		{ _field_struct, "filter", &game_performance_throttle_filter_struct },
		{ _field_struct, "profile", &game_performance_throttle_profile_struct },
		{ _field_terminator }
	};

	#define GAME_PERFORMANCE_THROTTLE_FILTER_STRUCT_ID { 0xAAA4CF05, 0x8434959, 0xC0C30D92, 0x12AB070E }
	TAG_STRUCT(
		game_performance_throttle_filter_struct,
		"game_performance_throttle_filter_struct",
		"game_performance_throttle_filter_struct",
		"s_game_performance_throttle_filter_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_PERFORMANCE_THROTTLE_FILTER_STRUCT_ID)
	{
		{ _field_long_integer, "minimum player count" },
		{ _field_terminator }
	};

	#define GAME_PERFORMANCE_THROTTLE_PROFILE_STRUCT_ID { 0xA9A4CF05, 0x88434959, 0xB0C30D92, 0x16AB070E }
	TAG_STRUCT(
		game_performance_throttle_profile_struct,
		"game_performance_throttle_profile_struct",
		"game_performance_throttle_profile_struct",
		"s_game_performance_throttle_profile_struct",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_PERFORMANCE_THROTTLE_PROFILE_STRUCT_ID)
	{
		{ _field_long_integer, "maximum havok proxy count" },
		{ _field_long_integer, "maximum ragdoll count" },
		{ _field_long_integer, "maximum impact count" },
		{ _field_long_integer, "vehicle suspension update frequency" },
		{ _field_long_integer, "Actor LOD, AI actors to update fully each frame" },
		{ _field_long_integer, "Actor LOD, Number of frames to tick LODed AI" },
		{ _field_long_integer, "Actor LOD, Number of concurrent LOD actors to tick" },
		{ _field_terminator }
	};

	#define GAME_PERFORMANCE_THROTTLE_STRUCT_DEFINITION_ID { 0x1073ABE0, 0x3D1447BB, 0x89E0B4FC, 0xB0BD63B1 }
	TAG_STRUCT(
		game_performance_throttle_struct_definition,
		"game_performance_throttle_struct_definition",
		"game_performance_throttle_struct_definition",
		"s_game_performance_throttle_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_PERFORMANCE_THROTTLE_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "entries", &game_performance_throttle_entries_block_block },
		{ _field_terminator }
	};

	#define GAME_PORTAL_TO_DOOR_OCCLUDER_BLOCK_ID { 0xD969E829, 0x574E4545, 0x9AEAA8B4, 0x755A88B9 }
	TAG_STRUCT(
		game_portal_to_door_occluder_block,
		"game_portal_to_door_occluder_block",
		"game_portal_to_door_occluder_block",
		"s_game_portal_to_door_occluder_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_PORTAL_TO_DOOR_OCCLUDER_BLOCK_ID)
	{
		{ _field_long_integer, "first door occluder index" },
		{ _field_long_integer, "door occluder count" },
		{ _field_terminator }
	};

	#define GAME_PORTAL_TO_PORTAL_MAPPING_BLOCK_ID { 0xB0BFEAC7, 0x25274FE1, 0xBAC1087B, 0x16519CB7 }
	TAG_STRUCT(
		game_portal_to_portal_mapping_block,
		"game_portal_to_portal_mapping_block",
		"game_portal_to_portal_mapping_block",
		"s_game_portal_to_portal_mapping_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAME_PORTAL_TO_PORTAL_MAPPING_BLOCK_ID)
	{
		{ _field_short_integer, "portal index" },
		{ _field_terminator }
	};

	#define GAMEPAD_STICK_INFO_BLOCK_ID { 0xD3417406, 0xF47E4B5F, 0x953C7C15, 0xD364BEAB }
	TAG_STRUCT(
		gamepad_stick_info_block,
		"gamepad_stick_info_block",
		"gamepad_stick_info_block",
		"s_gamepad_stick_info_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GAMEPAD_STICK_INFO_BLOCK_ID)
	{
		{ _field_char_enum, "input shape", &input_mapping_shape_enum },
		FIELD_PAD("F", 3),
		{ _field_real_fraction, "peg threshold", "magnitude of analog input for pegged acceleration to kick in" },
		{ _field_real_point_2d, "pegged time", "time for a pegged look to reach maximum effect" },
		{ _field_real_point_2d, "pegged scale", "the maximum effect achieved over the duration of the pegged time." },
		{ _field_angle, "peg max angular velocity", "the maximum turning speed during peg", "degrees per sec" },
		{ _field_block, "input mapping function", &input_mapping_function_block_block },
		{ _field_terminator }
	};

	STRINGS(input_mapping_shape_enum)
	{
		"none",
		"unit_circle",
		"unit_square"
	};
	STRING_LIST(input_mapping_shape_enum, input_mapping_shape_enum_strings, _countof(input_mapping_shape_enum_strings));

	#define GARBAGE_COLLECTION_BLOCK_ID { 0x49B147E0, 0x863C4847, 0xBE1348AA, 0x6BC92D7E }
	TAG_STRUCT(
		garbage_collection_block,
		"garbage_collection_block",
		"garbage_collection_block",
		"s_garbage_collection_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GARBAGE_COLLECTION_BLOCK_ID)
	{
		FIELD_EXPLANATION("Garbage Times", "time before the game considers that following entities as garbage"),
		{ _field_real, "Dropped item", nullptr, "seconds" },
		{ _field_real, "Dropped item by player", nullptr, "seconds" },
		{ _field_real, "Dropped item in multiplayer", nullptr, "seconds" },
		{ _field_real, "Broken constraints", nullptr, "seconds" },
		{ _field_real, "Dead unit", nullptr, "seconds" },
		{ _field_real, "Dead player", nullptr, "seconds" },
		{ _field_real, "Dead MP Player", nullptr, "seconds" },
		{ _field_real, "Dead MP Player overloaded", nullptr, "seconds" },
		{ _field_long_integer, "Max dead body count ", "above this number, overloaded mp time is used to garbage collect dead bodies" },
		{ _field_terminator }
	};

	#define GEAR_BLOCK_ID { 0x43A70404, 0x7A0440D7, 0xA12F738C, 0x29E046A5 }
	TAG_STRUCT(
		gear_block,
		"gear_block",
		"gear_block",
		"s_gear_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GEAR_BLOCK_ID)
	{
		FIELD_EXPLANATION("loaded torque", nullptr),
		{ _field_struct, "loaded torque curve", &torque_curve_struct },
		FIELD_EXPLANATION("cruising torque", nullptr),
		{ _field_struct, "cruising torque curve", &torque_curve_struct },
		FIELD_EXPLANATION("gearing", nullptr),
		{ _field_real, "min time to upshift", "seconds" },
		{ _field_real, "engine up-shift scale", "0-1" },
		{ _field_real, "gear ratio" },
		{ _field_real, "min time to downshift", "seconds" },
		{ _field_real, "engine down-shift scale", "0-1" },
		{ _field_tag_reference, "gear shift sound - shifting up", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "gear shift sound - shifting down", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_terminator }
	};

	#define GEAR_BLOCK_V1_ID { 0xDF09D8A1, 0x59F94AC6, 0x94E914A9, 0x76B39492 }
	TAG_STRUCT(
		gear_block_v1,
		"gear_block_v1",
		"gear_block_v1",
		"s_gear_block_v1",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN4 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GEAR_BLOCK_V1_ID)
	{
		FIELD_EXPLANATION("loaded torque", nullptr),
		{ _field_struct, "loaded torque curve", &torque_curve_struct$2 },
		FIELD_EXPLANATION("cruising torque", nullptr),
		{ _field_struct, "cruising torque curve", &torque_curve_struct$2 },
		FIELD_EXPLANATION("gearing", nullptr),
		{ _field_real, "min time to upshift", "seconds" },
		{ _field_real, "engine up-shift scale", "0-1" },
		{ _field_real, "gear ratio" },
		{ _field_real, "min time to downshift", "seconds" },
		{ _field_real, "engine down-shift scale", "0-1" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_terminator }
	};

	#define GIANT_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0x127D1256, 0xAD44F51, 0xB07D8B34, 0x4496D0A2 }
	TAG_STRUCT(
		giant_block_index_flags_block_struct,
		"giant_block_index_flags_block_struct",
		"giant_block_index_flags_block_struct",
		"s_giant_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GIANT_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_giant_palette_block_block },
		{ _field_terminator }
	};

	#define GIANT_BUCKLE_PARAMETERS_BLOCK_ID { 0x4E004B41, 0x95E34827, 0xAF0C255E, 0x698BE753 }
	TAG_STRUCT(
		giant_buckle_parameters_block,
		"giant_buckle_parameters_block",
		"giant_buckle_parameters_block",
		"s_giant_buckle_parameters_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GIANT_BUCKLE_PARAMETERS_BLOCK_ID)
	{
		FIELD_EXPLANATION("timing controls", nullptr),
		{ _field_real, "lower time", nullptr, "seconds to reach ground" },
		{ _field_long_enum, "lower curve", &slider_movement_patterns },
		{ _field_real, "raise time", nullptr, "seconds to recover" },
		{ _field_long_enum, "raise curve", &slider_movement_patterns },
		{ _field_real, "pause time (easy)", nullptr, "seconds to wait" },
		{ _field_real, "pause time (normal)", nullptr, "seconds to wait" },
		{ _field_real, "pause time (heroic)", nullptr, "seconds to wait" },
		{ _field_real, "pause time (legendary)", nullptr, "seconds to wait" },
		FIELD_EXPLANATION("optional buckle gravity", "overrides lower time and curve when not 0"),
		{ _field_real, "buckle gravity scale", nullptr, "use gravity to control descent when not 0" },
		FIELD_EXPLANATION("buckling search", nullptr),
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "buckling marker", nullptr, "marker that shows bottom of giant and center of search area" },
		{ _field_real, "forward-rear scan", nullptr, "world-unit search distance" },
		{ _field_real, "left-right scan", nullptr, "world-unit search distance" },
		{ _field_long_integer, "forward-rear steps", nullptr, "number of samples per direction" },
		{ _field_long_integer, "left-right steps", nullptr, "number of samples per direction" },
		FIELD_EXPLANATION("buckling angle control", nullptr),
		{ _field_angle_bounds, "pitch bounds", "giant may rotate the parent node of the buckling marker this much to align with ground.", "degrees" },
		{ _field_angle_bounds, "roll bounds", "giant may rotate the parent node of the buckling marker this much to align with ground.", "degrees" },
		FIELD_EXPLANATION("animations", nullptr),
		{ _field_string_id, "buckle animation", nullptr, "animation to use to lower the giant" },
		{ _field_string_id, "descent overlay", nullptr, "animation to overlay while lowering" },
		{ _field_string_id, "paused overlay", nullptr, "animation to overlay while paused" },
		{ _field_real_fraction, "descent overlay scale", nullptr, "max blend weight of descent overlay" },
		{ _field_real_fraction, "paused overlay scale", nullptr, "max blend weight of paused overlay" },
		{ _field_terminator }
	};

	STRINGS(slider_movement_patterns)
	{
		"linear",
		"light_ease_in",
		"full_ease_in",
		"light_ease_out",
		"full_ease_out",
		"light_ease_in_and_out",
		"full_ease_in_and_out"
	};
	STRING_LIST(slider_movement_patterns, slider_movement_patterns_strings, _countof(slider_movement_patterns_strings));

	#define GIANT_STRUCT_DEFINITION_ID { 0xA855591D, 0xA7A2477E, 0xAB97CD08, 0xA97A8C61 }
	VERSIONED_TAG_STRUCT(
		giant_struct_definition,
		"giant_struct_definition",
		"giant_struct_definition",
		"s_giant_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GIANT_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 18 },
		{ _field_struct, "unit", &unit_struct_definition }, // structure_version:1
		FIELD_GROUP_BEGIN("$$$ GIANT $$$"),
		{ _field_long_flags, "flags", &giant_definition_flags },
		FIELD_EXPLANATION("movement", nullptr),
		{ _field_real, "accel_time", nullptr, "acceleration time in seconds" },
		{ _field_real, "decel_time", nullptr, "deceleration time in seconds" },
		{ _field_real_fraction, "minimum speed scale", nullptr, "as slow as we get" },
		{ _field_real, "speed scale", "overall animation speed scale" },
		{ _field_real_fraction, "elevation change rate", nullptr, "scale per update" },
		{ _field_real, "proxy body offset", "how far to push the physical body", "wu" },
		{ _field_real_fraction, "proxy body deadzone", "the physical body must move this fraction of the offset for it to make the scarab move.  High values make the scarab more resistant to noise in the physics simulation, but less responsive." },
		FIELD_EXPLANATION("foot-placement limit", nullptr),
		{ _field_real, "max_vertical_reach", "how many world-units up/down a leg can reach from the ground elevation under the scarab", "wu" },
		{ _field_real, "foot target radius", "how far around a foot to search for ground targets to stomp.  Set to 0 to not search for targets", "wu" },
		{ _field_block, "buckle-settings", &giant_buckle_parameters_block_block },
		FIELD_EXPLANATION("ankle ik scale", nullptr),
		{ _field_real, "ankle ik scale", nullptr, "lower values drop the ankles towards the ground when computing ik" },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 201 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ UNIT $$$"),
		{ _field_long_flags, "flags", &unit_flags_part1, _field_id_dumb },
		{ _field_long_flags, "flags2", &unit_flags_part2, _field_id_dumb },
		{ _field_short_enum, "default team", &unit_default_teams$2 },
		{ _field_short_enum, "constant sound volume", &ai_sound_volume_enum },
		{ _field_tag_reference, "hologram unit reference", &biped_group_vehicle_group_reference },
		{ _field_block, "campaign metagame bucket", &campaign_metagame_bucket_block_block },
		{ _field_block, "screen effects", &unit_screen_effect_block_block },
		{ _field_real, "camera stiffness" },
		{ _field_struct, "unit camera", &unit_camera_struct },
		FIELD_EXPLANATION("sync action camera fields", nullptr),
		{ _field_struct, "sync action camera", &unit_camera_struct },
		{ _field_tag_reference, "assasination start damage response", &damage_response_definition_group_reference },
		{ _field_tag_reference, "assassination weapon", &weapon_group_reference },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon stow marker", "the anchor we attach the knife to when we stow it" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon out marker", "the anchor we attach the knife to when we pull it out" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon anchor marker", "the marker on the knife that we anchor to the biped" },
		{ _field_tag_reference, "seat acceleration", &spring_acceleration_group_reference },
		FIELD_GROUP_BEGIN("pings"),
		{ _field_real, "soft ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "soft ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "hard ping interrupt time", nullptr, "seconds" },
		{ _field_real, "soft death direction speed threshold", "moving faster than this means you will soft death in the movement direction. zero defaults to damage direction.", "wu/s" },
		{ _field_real, "hard death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death time", nullptr, "seconds" },
		{ _field_real, "pain screen duration", "The duration of the pain function\n0 defaults to 0.5", "seconds" },
		{ _field_real, "pain screen region fade out duration", "The time it takes to fade out a damage region that is no longer the most recent damage region to be hit", "seconds" },
		{ _field_real_fraction, "pain screen region fade out weight threshold", "The threshold weight below which the focus channel must fall before we can cross fade to another region.", nullptr, "[0,1]" },
		{ _field_angle, "pain screen angle tolerance", "The tolerance angle between next and previous damage directions, below which we randomly vary the ping direction.", "degrees" },
		{ _field_angle, "pain screen angle randomness", "The maximum random angle to vary the incoming ping direction by if it's too close to the previous ping.", "degrees" },
		{ _field_real, "defensive screen duration", "The duration of the defensive function\n0 defaults to 2.0", "seconds" },
		{ _field_real_fraction, "defensive screen scrub fallback fraction", "When receiving multiple pings, this is the min percentage of the defensive screen scrub value will fallback to.", nullptr, "[0,1]" },
		FIELD_GROUP_END(),
		{ _field_real, "distance of dive anim", "this must be set to tell the AI how far it should expect our dive animation to move us", "world units" },
		{ _field_real_fraction, "terminal velocity fall ratio", "ratio of airborne_arc animation to switch off falling overlay" },
		FIELD_GROUP_BEGIN("stun"),
		{ _field_real, "stun movement penalty", "1.0 prevents moving while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun turning penalty", "1.0 prevents turning while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun jumping penalty", "1.0 prevents jumping while stunned", nullptr, "[0,1]" },
		{ _field_real, "minimum stun time", "all stunning damage will last for at least this long", "seconds" },
		{ _field_real, "maximum stun time", "no stunning damage will last for longer than this", "seconds" },
		FIELD_GROUP_END(),
		{ _field_real, "feign death chance", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign repeat chance", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "spawned turret character", "automatically created character when this unit is driven", &character_group_reference },
		{ _field_short_integer_bounds, "spawned actor count", "number of actors which we spawn" },
		{ _field_real, "spawned velocity", "velocity at which we throw spawned actors" },
		FIELD_GROUP_BEGIN("aiming/looking"),
		{ _field_string_id, "target aiming pivot marker name", "set this to have your weapon barrel point at its calcualed target instead of matching the aiming of the unit controlling it.  This marker should be along the barrel at point that doesn't move when the barrel pitches up and down." },
		{ _field_angle, "aiming velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "aiming acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual aiming modifier", nullptr, nullptr, "[0,1]" },
		{ _field_angle, "looking velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "looking acceleration maximum", nullptr, "degrees per second squared" },
		FIELD_GROUP_END(),
		{ _field_real, "object velocity maximum", "Debug value for object velocity that corresponds to a blend screen weight of 1, 0 defaults to 5.0", "world units per second" },
		{ _field_string_id, "right_hand_node", "where the primary weapon is attached" },
		{ _field_string_id, "left_hand_node", "where the seconday weapon is attached (for dual-pistol modes)" },
		{ _field_struct, "more damn nodes", &unit_additional_node_names_struct }, // structure_version:1
		{ _field_short_enum, "melee damage class", &global_melee_class_enum_definition },
		FIELD_PAD("PAD", 2),
		FIELD_GROUP_BEGIN("melee damage"),
		{ _field_tag_reference, "melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "native melee override", "when set, characters will melee with these settings rather than their actual held weapon. (for characters that melee with an off hand)", &weapon_group_reference },
		{ _field_struct, "your momma", &unit_boarding_melee_struct }, // structure_version:2
		FIELD_GROUP_END(),
		{ _field_short_enum, "motion sensor blip size", &global_chud_blip_type_definition },
		{ _field_short_enum, "item owner size", &unit_item_owner_size_enum },
		{ _field_string_id, "equipment variant name" },
		{ _field_string_id, "grounded equipment variant name" },
		{ _field_block, "postures", &unit_postures_block_block },
		{ _field_block, "Hud audio cues", &hud_unit_sound_block_block },
		{ _field_block, "dialogue variants", &dialogue_variant_block_block },
		FIELD_GROUP_BEGIN("standard grenade throw"),
		{ _field_real, "grenade angle", nullptr, "degrees" },
		{ _field_real, "grenade angle max elevation", nullptr, "degrees" },
		{ _field_real, "grenade angle min elevation", nullptr, "degrees" },
		{ _field_real, "grenade velocity", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("sprinting grenade throw"),
		{ _field_real, "grenade angle (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade angle max elevation (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade angle min elevation (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade velocity (sprinting)", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("primary weapon toss"),
		{ _field_real, "weapon angle", nullptr, "degrees" },
		{ _field_real, "weapon angle max elevation", nullptr, "degrees" },
		{ _field_real, "weapon angle min elevation", nullptr, "degrees" },
		{ _field_real, "weapon velocity", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		{ _field_short_enum, "grenade type", &global_grenade_type_enum },
		{ _field_short_integer, "grenade count" },
		{ _field_block, "powered seats", &powered_seat_block_block },
		{ _field_block, "weapons", &unit_weapon_block_block },
		{ _field_block, "target tracking", &global_target_tracking_parameters_block_block },
		{ _field_block, "seats", &unit_seat_block_block },
		FIELD_GROUP_BEGIN("open/close"),
		{ _field_real, "opening time", "how long the unit takes to open when the hs_function unit_open is called\nThe current open state can be retrieved from the object function unit_open", "s" },
		{ _field_real, "closing time", "you don't have to go home, but you can't stay here", "s" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("EMP Disabling"),
		{ _field_real, "emp disabled time", nullptr, "seconds" },
		{ _field_real, "emp disabled time (PVP)", "Set to -1 for not disabled in MP but disabled in SP", "seconds " },
		{ _field_tag_reference, "emp disabled effect", &effect_group_reference },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Boost"),
		{ _field_struct, "boost", &unit_boost_struct },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Lipsync", nullptr),
		{ _field_struct, "lipsync", &unit_lipsync_scales_struct }, // structure_version:1
		FIELD_EXPLANATION("Exit and Detach", nullptr),
		{ _field_tag_reference, "exit and detach damage", &damage_effect_group_reference },
		{ _field_tag_reference, "exit and detach weapon", &weapon_group_reference$2 },
		FIELD_EXPLANATION("Experience", nullptr),
		{ _field_short_integer, "experience for kill" },
		{ _field_short_integer, "experience for assist" },
		{ _field_tag_reference, "hero assist equipment", "this is where you stick an equipment that the biped will always have, to implement the bizarrely named hero assist", &equipment_group_reference },
		{ _field_real, "bailout threshold", "the speed above which units will bail out of a vehicle instead of just exiting", "wu/s" },
		FIELD_GROUP_END(),
		{ _field_real_fraction, "iron sight weapon dampening", "when using iron sights, how much to scale the weapon overlays to steady the gun (0 = rock steady, 1= no dampening)", "(0-1)" },
		FIELD_GROUP_BEGIN("Birthing"),
		{ _field_struct, "birth", &unit_birth_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ GIANT $$$"),
		{ _field_long_flags, "flags", &giant_definition_flags },
		FIELD_EXPLANATION("movement", nullptr),
		{ _field_real, "accel_time", nullptr, "acceleration time in seconds" },
		{ _field_real, "decel_time", nullptr, "deceleration time in seconds" },
		{ _field_real_fraction, "minimum speed scale", nullptr, "as slow as we get" },
		{ _field_real, "speed scale", "overall animation speed scale" },
		{ _field_real_fraction, "elevation change rate", nullptr, "scale per update" },
		{ _field_real, "proxy body offset", "how far to push the physical body", "wu" },
		{ _field_real_fraction, "proxy body deadzone", "the physical body must move this fraction of the offset for it to make the scarab move.  High values make the scarab more resistant to noise in the physics simulation, but less responsive." },
		FIELD_EXPLANATION("foot-placement limit", nullptr),
		{ _field_real, "max_vertical_reach", "how many world-units up/down a leg can reach from the ground elevation under the scarab", "wu" },
		{ _field_real, "foot target radius", "how far around a foot to search for ground targets to stomp.  Set to 0 to not search for targets", "wu" },
		{ _field_block, "buckle-settings", &giant_buckle_parameters_block_block },
		FIELD_EXPLANATION("ankle ik scale", nullptr),
		{ _field_real, "ankle ik scale", nullptr, "lower values drop the ankles towards the ground when computing ik" },
		FIELD_GROUP_END(),
		
		{ _field_terminator }
	};

	STRING_LIST(giant_definition_flags, empty_string_list, 0);

	#define GLOBALAIMASSISTBLOCK_ID { 0x36080F7A, 0xF9342AF, 0x80A05AEB, 0xDE985A08 }
	TAG_STRUCT(
		globalaimassistblock,
		"globalAimAssistBlock",
		"globalAimAssistBlock",
		"s_globalaimassistblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBALAIMASSISTBLOCK_ID)
	{
		{ _field_real, "autoaim stick time", "the number of seconds that the crosshair needs to be on target before the larger autoaim stick kicks in", "seconds" },
		{ _field_angle, "autoaim stick angle", "the maximum angle that autoaim works to 'stick' a target.  set to zero to use default behavior.", "degrees" },
		{ _field_angle, "autoaim angle", "the maximum angle that autoaim works at full strength", "degrees" },
		{ _field_real, "autoaim range", "the maximum distance that autoaim works at full strength", "world units" },
		{ _field_real, "autoaim falloff range", "at what point the autoaim starts falling off", "world units" },
		{ _field_real, "autoaim near falloff range", "at what point the autoaim reaches full power", "world units" },
		{ _field_angle, "magnetism angle", "the maximum angle that magnetism works at full strength", "degrees" },
		{ _field_real, "magnetism range", "the maximum distance that magnetism works at full strength", "world units" },
		{ _field_real, "magnetism falloff range", "at what point magnetism starts falling off", "world units" },
		{ _field_real, "magnetism near falloff range", "at what point magnetism reaches full power", "world units" },
		{ _field_angle, "deviation angle", "the maximum angle that a projectile is allowed to deviate from the gun barrel due to autoaim OR network lead vector reconstruction", "degrees" },
		FIELD_PAD("ZHV", 4),
		FIELD_PAD("CVYGPMLMX", 16),
		FIELD_PAD("UQXKLVAXI", 4),
		{ _field_terminator }
	};

	#define GLOBALAIMSWIMBLOCK_ID { 0x124D117, 0xF364B7D, 0x8CFCF7CB, 0x18FE29C7 }
	TAG_STRUCT(
		globalaimswimblock,
		"globalAimSwimBlock",
		"globalAimSwimBlock",
		"s_globalaimswimblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBALAIMSWIMBLOCK_ID)
	{
		FIELD_EXPLANATION("x axis curve", nullptr),
		{ _field_real, "x period", nullptr, "seconds" },
		{ _field_real, "x amplitude" },
		FIELD_EXPLANATION("y axis curve", nullptr),
		{ _field_real, "y period", nullptr, "seconds" },
		{ _field_real, "y amplitude" },
		FIELD_EXPLANATION("biped state scalers", nullptr),
		{ _field_real, "non-moving, crouched" },
		{ _field_real, "non-moving, standing" },
		{ _field_real, "moving" },
		FIELD_EXPLANATION("biped state transition times", nullptr),
		{ _field_real, "to crouched", nullptr, "seconds" },
		{ _field_real, "to standing", nullptr, "seconds" },
		{ _field_terminator }
	};

	#define GLOBAL_CACHE_FILE_PIXEL_SHADERS_STRUCT_DEFINITION_ID { 0xA0F8ADA1, 0x1ACFD5EA, 0xA2DA2122, 0x4AC1DDEE }
	TAG_STRUCT(
		global_cache_file_pixel_shaders_struct_definition,
		"global_cache_file_pixel_shaders_struct_definition",
		"global_cache_file_pixel_shaders_struct_definition",
		"s_global_cache_file_pixel_shaders_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_CACHE_FILE_PIXEL_SHADERS_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "shader count" },
		{ _field_long_integer, "cached shader count" },
		{ _field_long_integer, "total memory size" },
		{ _field_long_integer, "cached memory size" },
		{ _field_block, "compiled shaders", &compiled_pixel_shader_block_block },
		{ _field_terminator }
	};

	#define GLOBAL_CAMERA_IMPULSE_BLOCK_ID { 0x57F39345, 0xB824565, 0xA343C4B0, 0xFDAD9A47 }
	TAG_STRUCT(
		global_camera_impulse_block,
		"global_camera_impulse_block",
		"global_camera_impulse_block",
		"s_global_camera_impulse_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_CAMERA_IMPULSE_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define GLOBAL_COLLISION_BSP_BLOCK_ID { 0xE15E4F1B, 0x1F17442D, 0x8730F6BB, 0xC0E02045 }
	TAG_STRUCT(
		global_collision_bsp_block,
		"global_collision_bsp_block",
		"global_collision_bsp_block",
		"s_global_collision_bsp_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_COLLISION_BSP_BLOCK_ID)
	{
		{ _field_block, "bsp3d nodes", &bsp3d_nodes_block_block },
		{ _field_block, "bsp3d supernodes", &bsp3d_kd_supdernodes_block_block },
		{ _field_block, "planes", &planes_block_block },
		{ _field_block, "leaves", &leaves_block_block },
		{ _field_block, "bsp2d references", &bsp2d_references_block_block },
		{ _field_block, "bsp2d nodes", &bsp2d_nodes_block_block },
		{ _field_block, "surfaces", &surfaces_block_block },
		{ _field_block, "edges", &edges_block_block },
		{ _field_block, "vertices", &vertices_block_block },
		{ _field_terminator }
	};

	#define GLOBAL_COLLISION_BSP_STRUCT_ID { 0x130D16E9, 0xA4684A1E, 0xA91958AD, 0x3BDAA7EC }
	TAG_STRUCT(
		global_collision_bsp_struct,
		"global_collision_bsp_struct",
		"global_collision_bsp_struct",
		"s_global_collision_bsp_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_COLLISION_BSP_STRUCT_ID)
	{
		{ _field_block, "bsp3d nodes", &bsp3d_nodes_block_block },
		{ _field_block, "bsp3d supernodes", &bsp3d_kd_supdernodes_block_block },
		{ _field_block, "planes", &planes_block_block },
		{ _field_block, "leaves", &leaves_block_block },
		{ _field_block, "bsp2d references", &bsp2d_references_block_block },
		{ _field_block, "bsp2d nodes", &bsp2d_nodes_block_block },
		{ _field_block, "surfaces", &surfaces_block_block },
		{ _field_block, "edges", &edges_block_block },
		{ _field_block, "vertices", &vertices_block_block },
		{ _field_terminator }
	};

	#define GLOBAL_DAMAGE_INFO_BLOCK_ID { 0xF8EA703F, 0x560E438E, 0x903E0A00, 0x1C77B3F2 }
	VERSIONED_TAG_STRUCT(
		global_damage_info_block,
		"global_damage_info_block",
		"global_damage_info_block",
		"s_global_damage_info_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_DAMAGE_INFO_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 24 },
		{ _field_long_flags, "flags", &model_damage_info_flags_definition },
		{ _field_string_id, "global indirect material name", "absorbes AOE or child damage" },
		{ _field_short_block_index_custom_search, "indirect damage section", "absorbes AOE or child damage", &damage_section_search_definition },
		FIELD_PAD("XN", 2),
		FIELD_PAD("LPVYKO", 4),
		{ _field_char_enum, "collision damage reporting type", &global_damage_reporting_enum_definition },
		{ _field_char_enum, "response damage reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("MQ", 2),
		FIELD_PAD("MYON", 20),
		FIELD_EXPLANATION("body", nullptr),
		{ _field_struct, "body", &damage_body_parameters_struct },
		FIELD_PAD("IKEIDYSCX", 64),
		FIELD_EXPLANATION("shield", nullptr),
		{ _field_struct, "shield", &damage_shield_parameters_struct },
		{ _field_block, "damage sections", &global_damage_section_block_block },
		{ _field_block, "nodes", &global_damage_nodes_block_block },
		{ _field_short_integer, "runtime shield material type" },
		{ _field_short_integer, "runtime indirect material type" },
		{ _field_real, "runtime shield recharge velocity" },
		{ _field_real, "runtime overcharge velocity" },
		{ _field_real, "runtime health recharge velocity" },
		{ _field_block, "damage seats", &damage_seat_info_block_block },
		{ _field_block, "damage constraints", &damage_constraint_info_block_block },
		FIELD_EXPLANATION("overshield", nullptr),
		
		{ _struct_version_mode_equal, 0, 27 },
		{ _field_long_flags, "flags", &model_damage_info_flags_definition },
		{ _field_string_id, "global indirect material name", "absorbes AOE or child damage" },
		{ _field_real, "maximum vitality" },
		{ _field_real, "body system shock", "anything that kills us (body depleted) doing more than this amount of damage also destroys us" },
		{ _field_real_fraction, "friendly damage resistance", "the fraction of damage caused by friendly units ignored by this object (zero means full damage)", nullptr, "[0,1]" },
		{ _field_tag_reference, "localized damage effect", &effect_group_reference },
		{ _field_real, "area damage effect threshold", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "area damage effect", &effect_group_reference },
		{ _field_real, "body damaged threshold", "when passing this vitality the 'body damaged' effect, below, is created" },
		{ _field_tag_reference, "body damaged effect", &effect_group_reference },
		{ _field_tag_reference, "body depleted effect", &effect_group_reference },
		{ _field_real, "body destroyed threshold", "when passing this vitality (usually negative) the object is deleted" },
		{ _field_tag_reference, "body destroyed effect", &effect_group_reference },
		{ _field_real, "maximum shield vitality", "the default initial and maximum shield vitality of this object" },
		{ _field_string_id, "global shield material name" },
		{ _field_real, "minimum stun damage", "the minimum damage required to stun this object's shields" },
		{ _field_real, "stun time", "the length of time the shields stay stunned (do not recharge) after taking damage", "seconds" },
		{ _field_real, "recharge time", "the length of time it would take for the shields to fully recharge after being completely depleted", "seconds" },
		{ _field_real, "shield damaged threshold" },
		{ _field_tag_reference, "shield damaged effect", &effect_group_reference },
		{ _field_tag_reference, "shield depleted effect", &effect_group_reference },
		{ _field_tag_reference, "shield recharging effect", &effect_group_reference },
		{ _field_block, "damage sections", &global_damage_section_block_block },
		{ _field_block, "nodes", &global_damage_nodes_block_block },
		FIELD_PAD("FJQBU", 2),
		FIELD_PAD("MC", 2),
		FIELD_PAD("MXET", 4),
		
		{ _field_terminator }
	};

	STRINGS(model_damage_info_flags_definition)
	{
		"takes shield damage for children",
		"takes body damage for children",
		"always shields friendly damage",
		"passes area damage to children",
		"parent never takes body damage for us",
		"only damaged by explosives",
		"parent never takes shield damage for us",
		"cannot die from damage",
		"passes attached damage to riders",
		"shield depletion is permanent",
		"shield depletion force hard ping",
		"AI do not damage without player",
		"health regrows while dead",
		"shield recharge plays only when empty",
		"IGNORE force minimum transfer",
		"orphan from postprocess autogen#check this to take control of the new damage info tag block",
		"only damaged by boarding damage"
	};
	STRING_LIST(model_damage_info_flags_definition, model_damage_info_flags_definition_strings, _countof(model_damage_info_flags_definition_strings));

	#define GLOBAL_DAMAGE_NODES_BLOCK_ID { 0x3736D0B4, 0x7C0A40E1, 0xA4811152, 0x22F811F0 }
	TAG_STRUCT(
		global_damage_nodes_block,
		"global_damage_nodes_block",
		"global_damage_nodes_block",
		"s_global_damage_nodes_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_DAMAGE_NODES_BLOCK_ID)
	{
		{ _field_short_integer, "runtime damage part" },
		FIELD_PAD("EOT", 2),
		FIELD_PAD("SBFL", 12),
		{ _field_terminator }
	};

	#define GLOBAL_DAMAGE_SECTION_BLOCK_ID { 0x62D3077B, 0xC6584BCA, 0x9A4E7C7A, 0x989EB4F1 }
	TAG_STRUCT(
		global_damage_section_block,
		"global_damage_section_block",
		"global_damage_section_block",
		"s_global_damage_section_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_DAMAGE_SECTION_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		FIELD_EXPLANATION("damage section flags", "* absorbs body damage: damage to this section does not count against body vitality\n* headshottable: takes extra headshot damage when shot\n* ignores shields: damage to this section bypasses shields"),
		{ _field_long_flags, "flags", &damage_section_flags_definition },
		{ _field_real_fraction, "vitality percentage", "percentage of total object vitality", nullptr, "[0.1]" },
		{ _field_block, "instant responses", &instantaneous_damage_repsonse_block_block },
		{ _field_block, "unused0", &g_null_block_block },
		{ _field_block, "unused1", &g_null_block_block },
		{ _field_real, "stun time", nullptr, "seconds" },
		{ _field_real, "recharge time", nullptr, "seconds" },
		{ _field_real, "runtime recharge velocity" },
		{ _field_string_id, "resurrection restored region name" },
		{ _field_short_integer, "runtime resurrection restored region index" },
		FIELD_PAD("AG", 2),
		{ _field_terminator }
	};

	STRINGS(damage_section_flags_definition)
	{
		"absorbs body damage",
		"takes full dmg when object dies",
		"cannot die with riders",
		"takes full dmg when obj dstryd",
		"restored on ressurection",
		"unused0!",
		"unused1!",
		"heatshottable",
		"ignores shields",
		"takes full dmg when shield depl",
		"networked (e.g. armor lock)",
		"allow damage response overflow"
	};
	STRING_LIST(damage_section_flags_definition, damage_section_flags_definition_strings, _countof(damage_section_flags_definition_strings));

	#define GLOBAL_DECORATOR_PLACEMENT_BLOCK_ID { 0x4F0AFBF, 0x257649DF, 0x916C1650, 0xEC5FBF80 }
	TAG_STRUCT(
		global_decorator_placement_block,
		"global_decorator_placement_block",
		"global_decorator_placement_block",
		"s_global_decorator_placement_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_DECORATOR_PLACEMENT_BLOCK_ID)
	{
		{ _field_real_point_3d, "position" },
		{ _field_byte_integer, "type index" },
		{ _field_byte_integer, "motion scale" },
		{ _field_byte_integer, "ground tint" },
		{ _field_byte_flags, "flags", &decorator_placement_flags_definition },
		{ _field_real_quaternion, "rotation" },
		{ _field_real, "scale" },
		{ _field_real_point_3d, "tint color" },
		{ _field_real_point_3d, "original point" },
		{ _field_real_point_3d, "original normal" },
		{ _field_long_integer, "bsp index" },
		{ _field_short_integer, "cluster index" },
		{ _field_short_integer, "cluster decorator set index" },
		{ _field_terminator }
	};

	STRINGS(decorator_placement_flags_definition)
	{
		"UNUSED!",
		"UNUSED2!"
	};
	STRING_LIST(decorator_placement_flags_definition, decorator_placement_flags_definition_strings, _countof(decorator_placement_flags_definition_strings));

	#define GLOBAL_DECORATOR_TYPE_STRUCT_ID { 0x2B61C35, 0x457E4970, 0xBB11A050, 0x2DF8A18E }
	TAG_STRUCT(
		global_decorator_type_struct,
		"global_decorator_type_struct",
		"global_decorator_type_struct",
		"s_global_decorator_type_struct",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_DECORATOR_TYPE_STRUCT_ID)
	{
		{ _field_long_integer, "index" },
		{ _field_long_block_index, "mesh", &decorator_set_instance_name_block_block },
		{ _field_long_flags, "flags", &decorator_type_flags_definition },
		{ _field_real, "scale min", nullptr, nullptr, "[0.0 - 5.0]" },
		{ _field_real, "scale max", nullptr, nullptr, "[0.0 - 5.0]" },
		{ _field_real, "tilt min", nullptr, "degrees" },
		{ _field_real, "tilt max", nullptr, "degrees" },
		{ _field_real, "wind min", nullptr, nullptr, "[0.0 - 1.0]" },
		{ _field_real, "wind max", nullptr, nullptr, "[0.0 - 1.0]" },
		{ _field_real_rgb_color, "color 0" },
		{ _field_real_rgb_color, "color 1" },
		{ _field_real_rgb_color, "color 2" },
		{ _field_real, "ground tint min", nullptr, nullptr, "[0.0 - 1.0]" },
		{ _field_real, "ground tint max", nullptr, nullptr, "[0.0 - 1.0]" },
		{ _field_real, "hover min", nullptr, nullptr, "[-1.0 - 1.0]" },
		{ _field_real, "hover max", nullptr, nullptr, "[-1.0 - 1.0]" },
		{ _field_real, "minimum distance between decorators", nullptr, "world units" },
		{ _field_real, "placement weight", nullptr, nullptr, "[0.0 - 1.0]" },
		{ _field_real, "postprocessed weight" },
		{ _field_terminator }
	};

	STRINGS(decorator_type_flags_definition)
	{
		"only on ground",
		"random rotation",
		"rotate x axis down",
		"align to normal",
		"align random"
	};
	STRING_LIST(decorator_type_flags_definition, decorator_type_flags_definition_strings, _countof(decorator_type_flags_definition_strings));

	#define GLOBAL_DETAIL_OBJECT_BLOCK_ID { 0x1418CEDE, 0x449D419B, 0x9406F322, 0xA3D43D98 }
	TAG_STRUCT(
		global_detail_object_block,
		"global_detail_object_block",
		"global_detail_object_block",
		"s_global_detail_object_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_DETAIL_OBJECT_BLOCK_ID)
	{
		{ _field_char_integer, "position x" },
		{ _field_char_integer, "position y" },
		{ _field_char_integer, "position z" },
		{ _field_char_integer, "data" },
		{ _field_short_integer, "color" },
		{ _field_terminator }
	};

	#define GLOBAL_DETAIL_OBJECT_CELLS_BLOCK_ID { 0x1960315C, 0xBFE04781, 0xBB7BDB66, 0x5627F0EE }
	TAG_STRUCT(
		global_detail_object_cells_block,
		"global_detail_object_cells_block",
		"global_detail_object_cells_block",
		"s_global_detail_object_cells_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_DETAIL_OBJECT_CELLS_BLOCK_ID)
	{
		{ _field_short_integer, "cell x" },
		{ _field_short_integer, "cell y" },
		{ _field_short_integer, "cell z" },
		{ _field_short_integer, "offset z" },
		{ _field_long_integer, "valid layers flags" },
		{ _field_long_integer, "start index" },
		{ _field_long_integer, "count index" },
		FIELD_PAD("OHF", 12),
		{ _field_terminator }
	};

	#define GLOBAL_DETAIL_OBJECT_COUNTS_BLOCK_ID { 0xCB802C6A, 0xFBE64494, 0x9401AEFB, 0x759E910 }
	TAG_STRUCT(
		global_detail_object_counts_block,
		"global_detail_object_counts_block",
		"global_detail_object_counts_block",
		"s_global_detail_object_counts_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_DETAIL_OBJECT_COUNTS_BLOCK_ID)
	{
		{ _field_short_integer, "count" },
		{ _field_terminator }
	};

	#define GLOBAL_ERROR_REPORT_CATEGORIES_BLOCK_ID { 0x3CBB78D5, 0xCA074D83, 0x8994291A, 0x8E13F496 }
	TAG_STRUCT(
		global_error_report_categories_block,
		"error report category",
		"global_error_report_categories_block",
		"s_global_error_report_categories_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_ERROR_REPORT_CATEGORIES_BLOCK_ID)
	{
		{ _field_long_string, "name" },
		{ _field_short_enum, "report type", &error_report_types },
		{ _field_word_flags, "flags", &error_report_flags },
		{ _field_short_integer, "runtime generation flags" },
		FIELD_PAD("WVTP", 2),
		{ _field_long_integer, "runtime something" },
		{ _field_block, "reports", &error_reports_block_block },
		{ _field_terminator }
	};

	#define GLOBAL_GEOMETRY_MATERIAL_BLOCK_ID { 0xB1135973, 0x34A54DC5, 0x99901631, 0xB0B5E573 }
	TAG_STRUCT(
		global_geometry_material_block,
		"material",
		"global_geometry_material_block",
		"s_global_geometry_material_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_GEOMETRY_MATERIAL_BLOCK_ID)
	{
		{ _field_tag_reference, "render method", &_reference },
		{ _field_long_integer, "imported material index" },
		{ _field_real, "lightmap resolution scale" },
		{ _field_long_integer, "lightmap additive transparency color" },
		{ _field_long_integer, "lightmap traslucency tint color" },
		{ _field_real, "lightmap analytical light absorb" },
		{ _field_real, "lightmap normal light absorb" },
		{ _field_byte_flags, "lightmap flags", &global_geometry_material_lightmap_flags },
		{ _field_char_integer, "breakable surface index" },
		{ _field_short_integer, "lightmap chart group index" },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference, INVALID_TAG);

	STRINGS(global_geometry_material_lightmap_flags)
	{
		"ignore default resolution scale",
		"transparency override",
		"lighting from both sides",
		"version1"
	};
	STRING_LIST(global_geometry_material_lightmap_flags, global_geometry_material_lightmap_flags_strings, _countof(global_geometry_material_lightmap_flags_strings));

	#define GLOBAL_INSTANCE_BUCKET_BLOCK_ID { 0xC556069, 0xC7904BAA, 0xA39F96E0, 0xD9B27120 }
	TAG_STRUCT(
		global_instance_bucket_block,
		"global_instance_bucket_block",
		"global_instance_bucket_block",
		"s_global_instance_bucket_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_INSTANCE_BUCKET_BLOCK_ID)
	{
		{ _field_short_integer, "mesh index" },
		{ _field_short_integer, "definition index" },
		{ _field_block, "instances", &instance_index_word_block_block },
		{ _field_terminator }
	};

	#define GLOBAL_LARGE_COLLISION_BSP_BLOCK_ID { 0xE15AAF1B, 0xBF17422D, 0xB730F6DB, 0xCDE02043 }
	TAG_STRUCT(
		global_large_collision_bsp_block,
		"global_large_collision_bsp_block",
		"global_large_collision_bsp_block",
		"s_global_large_collision_bsp_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_LARGE_COLLISION_BSP_BLOCK_ID)
	{
		{ _field_block, "bsp3d nodes", &large_bsp3d_nodes_block_block },
		{ _field_block, "bsp3d supernodes", &bsp3d_kd_supdernodes_block_block },
		{ _field_block, "planes", &planes_block_block },
		{ _field_block, "leaves", &large_leaves_block_block },
		{ _field_block, "bsp2d references", &large_bsp2d_references_block_block },
		{ _field_block, "bsp2d nodes", &large_bsp2d_nodes_block_block },
		{ _field_block, "surfaces", &large_surfaces_block_block },
		{ _field_block, "edges", &large_edges_block_block },
		{ _field_block, "vertices", &large_vertices_block_block },
		{ _field_terminator }
	};

	#define GLOBAL_LEAF_CONNECTION_BLOCK_ID { 0x7FE10580, 0x88974F2E, 0x810AB1B9, 0xD47E3481 }
	TAG_STRUCT(
		global_leaf_connection_block,
		"global_leaf_connection_block",
		"global_leaf_connection_block",
		"s_global_leaf_connection_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_LEAF_CONNECTION_BLOCK_ID)
	{
		{ _field_long_integer, "plane index" },
		{ _field_long_integer, "back leaf index" },
		{ _field_long_integer, "front leaf index" },
		{ _field_block, "vertices", &leaf_connection_vertex_block_block },
		{ _field_real, "area" },
		{ _field_terminator }
	};

	#define GLOBAL_LIGHTMAP_AO_SETTINGS_STRUCT_ID { 0xC4A4F152, 0x645C49A2, 0xA0626D6A, 0x20FA92B2 }
	TAG_STRUCT(
		global_lightmap_ao_settings_struct,
		"global_lightmap_ao_settings_struct",
		"global_lightmap_ao_settings_struct",
		"s_global_lightmap_ao_settings_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_LIGHTMAP_AO_SETTINGS_STRUCT_ID)
	{
		{ _field_real, "Radius", MAKE_ALT_NAMES("Offset") },
		{ _field_real, "Falloff Power" },
		{ _field_real, "Multiplier" },
		{ _field_real, "MaxThreadCount" },
		{ _field_terminator }
	};

	#define GLOBAL_LIGHTMAP_GLOBAL_ILLUMINATION_FALLOFF_SETTINGS_STRUCT_ID { 0xA062F152, 0x49205CA2, 0xC4A46D6A, 0x6492BFA2 }
	TAG_STRUCT(
		global_lightmap_global_illumination_falloff_settings_struct,
		"global_lightmap_global_illumination_falloff_settings_struct",
		"global_lightmap_global_illumination_falloff_settings_struct",
		"s_global_lightmap_global_illumination_falloff_settings_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_LIGHTMAP_GLOBAL_ILLUMINATION_FALLOFF_SETTINGS_STRUCT_ID)
	{
		{ _field_real, "Falloff Begin" },
		{ _field_real, "Falloff End" },
		{ _field_real_rgb_color, "Far Lighting Color" },
		{ _field_real, "Far Lighting Scalar" },
		{ _field_tag_reference, "Far Lighting Texture", &bitmap_group_reference$3 },
		{ _field_terminator }
	};

	#define GLOBAL_LIGHTMAP_GLOBAL_SETTINGS_STRUCT_ID { 0xA69EDA5B, 0xE3064186, 0x94E282A7, 0xD06C2225 }
	TAG_STRUCT(
		global_lightmap_global_settings_struct,
		"global_lightmap_global_settings_struct",
		"global_lightmap_global_settings_struct",
		"s_global_lightmap_global_settings_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_LIGHTMAP_GLOBAL_SETTINGS_STRUCT_ID)
	{
		{ _field_long_flags, "Global flags", &lightmap_global_flags },
		{ _field_long_enum, "Mode", &lightmap_mode_enum },
		{ _field_long_enum, "Hemicube resolution", &lightmap_hemicube_resolution_enum },
		{ _field_long_enum, "DXT compression quality", &lightmap_dxt_quality_enum },
		{ _field_long_enum, "Indirect quality", &lightmap_indirect_quality_enum },
		{ _field_long_enum, "Direct shadow map resolution", &lightmap_direct_shadow_map_resolution_enum },
		{ _field_long_enum, "Super-sampling factor", &lightmap_supersampling_factor_enum },
		{ _field_long_enum, "AO Sample Quality", &lightmap_ao_quality_enum },
		{ _field_real_vector_3d, "Indirect Restrict AABB Min" },
		{ _field_real_vector_3d, "Indirect Restrict AABB Max" },
		{ _field_terminator }
	};

	STRINGS(lightmap_global_flags)
	{
		"Force draft lighting",
		"Perform sun multisampling",
		"Perform sky multisampling",
		"Use high resolution point shadows",
		"Use new atlaser",
		"Use high quality packing",
		"Include geometry from adjacent bsps",
		"Use 32-bit precision for direct pass",
		"Enable subsampling indirect acceleration",
		"Restrict lightmap samples to Maya regions",
		"Perform Repack",
		"Is Farm Burn"
	};
	STRING_LIST(lightmap_global_flags, lightmap_global_flags_strings, _countof(lightmap_global_flags_strings));

	STRINGS(lightmap_mode_enum)
	{
		"Direct only",
		"One bounce",
		"Two bounce"
	};
	STRING_LIST(lightmap_mode_enum, lightmap_mode_enum_strings, _countof(lightmap_mode_enum_strings));

	STRINGS(lightmap_hemicube_resolution_enum)
	{
		"64 x 64",
		"128 x 128",
		"256 x 256",
		"512 x 512",
		"32 x 32",
		"16 x 16"
	};
	STRING_LIST(lightmap_hemicube_resolution_enum, lightmap_hemicube_resolution_enum_strings, _countof(lightmap_hemicube_resolution_enum_strings));

	STRINGS(lightmap_dxt_quality_enum)
	{
		"Draft",
		"High"
	};
	STRING_LIST(lightmap_dxt_quality_enum, lightmap_dxt_quality_enum_strings, _countof(lightmap_dxt_quality_enum_strings));

	STRINGS(lightmap_indirect_quality_enum)
	{
		"Low",
		"Medium",
		"High",
		"Very High"
	};
	STRING_LIST(lightmap_indirect_quality_enum, lightmap_indirect_quality_enum_strings, _countof(lightmap_indirect_quality_enum_strings));

	STRINGS(lightmap_direct_shadow_map_resolution_enum)
	{
		"1X",
		"2X",
		"4X"
	};
	STRING_LIST(lightmap_direct_shadow_map_resolution_enum, lightmap_direct_shadow_map_resolution_enum_strings, _countof(lightmap_direct_shadow_map_resolution_enum_strings));

	STRINGS(lightmap_supersampling_factor_enum)
	{
		"1X",
		"2X",
		"4X",
		"8X"
	};
	STRING_LIST(lightmap_supersampling_factor_enum, lightmap_supersampling_factor_enum_strings, _countof(lightmap_supersampling_factor_enum_strings));

	STRINGS(lightmap_ao_quality_enum)
	{
		"Off",
		"1x",
		"2x",
		"4x"
	};
	STRING_LIST(lightmap_ao_quality_enum, lightmap_ao_quality_enum_strings, _countof(lightmap_ao_quality_enum_strings));

	#define GLOBAL_LIGHTMAP_LOCAL_OVERRIDE_SETTINGS_STRUCT_ID { 0xE6C2295B, 0xE3064A64, 0x9EDA82A7, 0xD0218265 }
	TAG_STRUCT(
		global_lightmap_local_override_settings_struct,
		"global_lightmap_local_override_settings_struct",
		"global_lightmap_local_override_settings_struct",
		"s_global_lightmap_local_override_settings_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_LIGHTMAP_LOCAL_OVERRIDE_SETTINGS_STRUCT_ID)
	{
		{ _field_long_integer, "High Quality Average Jitter Samples" },
		{ _field_long_integer, "Per Vertex Supersample Count" },
		{ _field_long_integer, "Indirect Quality Offset" },
		{ _field_terminator }
	};

	#define GLOBAL_LIGHTMAP_LOCAL_SETTINGS_STRUCT_ID { 0xABA94F11, 0x80A74320, 0xB518BB46, 0x12432CF8 }
	TAG_STRUCT(
		global_lightmap_local_settings_struct,
		"global_lightmap_local_settings_struct",
		"global_lightmap_local_settings_struct",
		"s_global_lightmap_local_settings_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_LIGHTMAP_LOCAL_SETTINGS_STRUCT_ID)
	{
		{ _field_long_flags, "Local flags", &lightmap_local_flags },
		{ _field_real, "Skydome amplification factor" },
		{ _field_real, "Indirect amplification factor" },
		{ _field_real, "Lightmap Compression Maximum" },
		{ _field_real, "Per Vertex AO Auto Threshold" },
		FIELD_GROUP_BEGIN("Ambient occlusion settings"),
		{ _field_struct, "AO settings", &global_lightmap_ao_settings_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Global illumination falloff settings"),
		{ _field_struct, "Global illumination falloff settings", &global_lightmap_global_illumination_falloff_settings_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Quality Overrides"),
		{ _field_struct, "Local lightmapper override settings", &global_lightmap_local_override_settings_struct },
		FIELD_GROUP_END(),
		{ _field_long_enum, "Forge Lightmap Size Class (if enabled)", &scenario_structure_size_enum },
		{ _field_terminator }
	};

	STRINGS(lightmap_local_flags)
	{
		"Enable floating shadows",
		"Replace sun with brightest directional",
		"Use legacy magic light scalars",
		"Remove lights outside target bsp",
		"Include Skydome",
		"Include Sun",
		"Perform bad pixel analysis",
		"Enable AO",
		"Generate New AO",
		"Ignore sun solid angle",
		"Override AO only",
		"Perform analysis",
		"Global Illumination Falloff",
		"Generate BVH AO (GPU) ",
		"Generate BVH AO (CPU) ",
		"Build packing lightmaps (for lighting forge objects)",
		"Attempt to Use Diffuse UVs",
		"Corrected Light Linking",
		"Burn simplified irradiance lighting",
		"Disable Floating Shadow Geometry",
		"Disable Hybrid Refinement",
		"Burn Probe AO Lighting",
		"Opt Out Per-Vertex Lighting Fix",
		"Generate Adjacent Bounce Info",
		"No Shadow No AO Fix",
		"Allow Spot Suns",
		"Probes Ignore Shadow Linking"
	};
	STRING_LIST(lightmap_local_flags, lightmap_local_flags_strings, _countof(lightmap_local_flags_strings));

	STRINGS(scenario_structure_size_enum)
	{
		"32x32",
		"64x64",
		"128x128",
		"256x256 - 0.4 Meg{0.3Meg_256x256}",
		"512x512 - 1.5 Meg{1Meg_512x512}",
		"768x768 - 3.4 Meg{2.25Meg_768x768}",
		"1024x1024 - 6 Meg{4Meg_1024x1024}",
		"1280x1280 - 9.4 Meg{6.3Meg_1280x1280}",
		"1536x1536 - 13.5 Meg{9Meg_1536x1536}",
		"1792x1792 - 18.4Meg{12.3Meg_1792x1792}"
	};
	STRING_LIST(scenario_structure_size_enum, scenario_structure_size_enum_strings, _countof(scenario_structure_size_enum_strings));

	#define GLOBAL_MAP_LEAF_BLOCK_ID { 0x7963BAF0, 0x35ED4A23, 0x91FEC7CC, 0xC9477083 }
	TAG_STRUCT(
		global_map_leaf_block,
		"global_map_leaf_block",
		"global_map_leaf_block",
		"s_global_map_leaf_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_MAP_LEAF_BLOCK_ID)
	{
		{ _field_block, "faces", &map_leaf_face_block_block },
		{ _field_block, "connection indices", &map_leaf_connection_index_block_block },
		{ _field_terminator }
	};

	#define GLOBAL_MESH_BLOCK_ID { 0xEBB348BB, 0xA7C04CC8, 0xA6E51515, 0xA5A99C7C }
	TAG_STRUCT(
		global_mesh_block,
		"mesh",
		"global_mesh_block",
		"s_global_mesh_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_MESH_BLOCK_ID)
	{
		{ _field_block, "parts", &part_block_block },
		{ _field_block, "subparts", &subpart_block_block },
		{ _field_array, "vertex buffer indices", &vertex_buffer_indices_word_array$2 },
		{ _field_short_integer, "index buffer index" },
		{ _field_short_integer, "index buffer tessellation" },
		{ _field_word_flags, "mesh flags", &mesh_flags },
		{ _field_char_integer, "rigid node index" },
		{ _field_char_enum, "vertex type", &mesh_vertex_type_definition },
		{ _field_char_enum, "PRT vertex type", &mesh_transfer_vertex_type_definition },
		{ _field_char_enum, "lighting policy", &mesh_lighting_policy_type_definition },
		{ _field_char_enum, "index buffer type", &mesh_index_buffer_type_definition },
		FIELD_PAD("BAASDFIR", 1),
		{ _field_short_integer, "pca mesh index" },
		{ _field_block, "instance buckets", &global_instance_bucket_block_block },
		{ _field_block, "water indices start", &indices_word_block_block },
		{ _field_real, "runtime bounding radius", nullptr, "world units", FIELD_FLAG_UNKNOWN0 | FIELD_FLAG_READ_ONLY },
		{ _field_real_point_3d, "runtime bounding offset" },
		{ _field_block, "vertex keys", &vertexkeyblock_block },
		{ _field_short_block_index, "clone index", &global_mesh_block_block },
		{ _field_short_integer, "cumulative part count (initialized by PVS building code)" },
		{ _field_terminator }
	};

	STRINGS(mesh_flags)
	{
		"mesh has vertex color",
		"use region index for sorting",
		"use vertex buffers for indices",
		"mesh has per-instance lighting (do not modify)",
		"mesh is unindexed (do not modify)",
		"subpart were merged",
		"mesh has fur",
		"mesh has decal",
		"mesh doesnt use compressed position",
		"use uncompressed vertex format",
		"mesh is PCA",
		"mesh compression determined",
		"mesh has authored lightmap texture coords",
		"mesh has a useful set of second texture coords",
		"mesh has no lightmap",
		"per vertex lighting"
	};
	STRING_LIST(mesh_flags, mesh_flags_strings, _countof(mesh_flags_strings));

	STRINGS(mesh_vertex_type_definition)
	{
		"world",
		"rigid",
		"skinned",
		"particle_model",
		"flat world",
		"flat rigid",
		"flat skinned",
		"screen",
		"debug",
		"transparent",
		"particle",
		"unused0",
		"light_volume",
		"chud_simple",
		"chud_fancy",
		"decorator",
		"position only",
		"patchy_fog",
		"water",
		"ripple",
		"implicit geometry",
		"unused1",
		"world_tessellated",
		"rigid_tessellated",
		"skinned_tessellated",
		"shader_cache",
		"structure_instance_imposter",
		"object_instance_imposter",
		"rigid compressed",
		"skinned uncompressed",
		"light volume precompiled",
		"blendshape_rigid",
		"blendshape_rigid_blendshaped",
		"rigid_blendshaped",
		"blendshape_skinned",
		"blendshape_skinned_blendshaped",
		"skinned_blendshaped",
		"VirtualGeometryHWtess",
		"VirtualGeometryMemexport",
		"position_only",
		"VirtualGeometryDebug",
		"blendshapeRigidCompressed",
		"skinnedUncompressedBlendshaped",
		"blendshapeSkinnedCompressed",
		"tracer",
		"polyart",
		"vectorart",
		"rigid_boned",
		"rigid_boned_2uv",
		"blendshape_skinned_2uv",
		"blendshape_skinned_2uv_blendshaped",
		"skinned_2uv_blendshaped",
		"polyartUV",
		"blendshape_skinned_uncompressed_blendshaped"
	};
	STRING_LIST(mesh_vertex_type_definition, mesh_vertex_type_definition_strings, _countof(mesh_vertex_type_definition_strings));

	STRINGS(mesh_transfer_vertex_type_definition)
	{
		"No PRT",
		"PRT Ambient",
		"PRT Linear",
		"PRT Quadratic"
	};
	STRING_LIST(mesh_transfer_vertex_type_definition, mesh_transfer_vertex_type_definition_strings, _countof(mesh_transfer_vertex_type_definition_strings));

	STRINGS(mesh_lighting_policy_type_definition)
	{
		"vertex color",
		"single probe",
		"prt ambient"
	};
	STRING_LIST(mesh_lighting_policy_type_definition, mesh_lighting_policy_type_definition_strings, _countof(mesh_lighting_policy_type_definition_strings));

	STRINGS(mesh_index_buffer_type_definition)
	{
		"DEFAULT",
		"line list",
		"line strip",
		"triangle list",
		"triangle fan",
		"triangle strip",
		"quad list",
		"rect list"
	};
	STRING_LIST(mesh_index_buffer_type_definition, mesh_index_buffer_type_definition_strings, _countof(mesh_index_buffer_type_definition_strings));

	#define GLOBAL_MODEL_INSTANCE_GROUP_BLOCK_ID { 0xE2233121, 0xFA0F464B, 0x93BEE223, 0x29DA60B2 }
	TAG_STRUCT(
		global_model_instance_group_block,
		"instance group",
		"global_model_instance_group_block",
		"s_global_model_instance_group_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_MODEL_INSTANCE_GROUP_BLOCK_ID)
	{
		{ _field_string_id, "name", "name of this instance group" },
		{ _field_long_enum, "choice", "how to choose members", &model_instance_group_choice_enum },
		{ _field_block, "member list", &model_instance_group_member_block_block },
		{ _field_real, "total probability" },
		{ _field_terminator }
	};

	STRINGS(model_instance_group_choice_enum)
	{
		"choose one member",
		"choose all members"
	};
	STRING_LIST(model_instance_group_choice_enum, model_instance_group_choice_enum_strings, _countof(model_instance_group_choice_enum_strings));

	#define GLOBAL_MUFFIN_TYPE_STRUCT_ID { 0xEB31413, 0xE68F4840, 0xB0E7C088, 0x51EED254 }
	TAG_STRUCT(
		global_muffin_type_struct,
		"global_muffin_type_struct",
		"global_muffin_type_struct",
		"s_global_muffin_type_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_MUFFIN_TYPE_STRUCT_ID)
	{
		{ _field_short_block_index, "mesh", &muffin_permutation_name_block_block },
		{ _field_word_flags, "flags", &muffin_type_flags_definition },
		{ _field_real_bounds, "spawn delay", "how long to wait before spawning these muffins", "seconds" },
		FIELD_EXPLANATION("SCALE", "animates the size of the muffin"),
		{ _field_real_bounds, "random scale", nullptr, nullptr, "[0-1]" },
		{ _field_struct, "initial growth", &muffin_scalar_function_struct },
		{ _field_real, "growth time", nullptr, "seconds" },
		{ _field_struct, "periodic noise", &muffin_scalar_function_struct },
		FIELD_EXPLANATION("JIGGLE", "Jigglypuff will kick your ass..."),
		{ _field_real, "jiggle", "how much the muffin jiggles (0 = perfectly rigid, 1 = full jiggle, subject to parameters below)", nullptr, "[0.0 - 1.0]" },
		{ _field_real, "jiggle spring length", "spring length affects how the spring reacts to the model moving (this should be approximately how far the muffin sticks out from the model)", "world units" },
		{ _field_real, "jiggle spring strength", "spring strength affects how fast the muffins jiggle (higher numbers jiggle faster)", nullptr, "[0.01 - 1.0]" },
		{ _field_real, "jiggle velocity damp", "velocity damp affects how long the muffins jiggle (the higher numbers jiggle exponentially longer, 1.0 will never stop jiggling)", nullptr, "[0.5 - 0.95]" },
		{ _field_real, "jiggle max velocity", "this just clamps how fast the muffin can jiggle, to keep it from exploding", "world units per frame" },
		FIELD_EXPLANATION("DEATH", "... and then you will be dead."),
		{ _field_real_bounds, "lifetime", "how long before the muffins die", "seconds" },
		{ _field_real, "immortality chance", "the chance that any give muffin of this type will live forever", nullptr, "[0.0 - 1.0]" },
		{ _field_tag_reference, "death effect", &effect_group_reference },
		{ _field_terminator }
	};

	STRINGS(muffin_type_flags_definition)
	{
		"disable for debug",
		"jump to marker on transition#forces the muffins to the new marker location when they are transferred to a new model, may cause popping if the markers aren\'t aligned"
	};
	STRING_LIST(muffin_type_flags_definition, muffin_type_flags_definition_strings, _countof(muffin_type_flags_definition_strings));

	#define GLOBAL_OBJECT_ATTACHMENT_BLOCK_ID { 0x11097257, 0x4775429C, 0xA775D933, 0xEE75453F }
	TAG_STRUCT(
		global_object_attachment_block,
		"global_object_attachment_block",
		"global_object_attachment_block",
		"s_global_object_attachment_block",
		SET_UNKNOWN0 | SET_UNKNOWN3 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_OBJECT_ATTACHMENT_BLOCK_ID)
	{
		{ _field_tag_reference, "type", &light_group_cheap_light_group_light_volume_system_group_effect_group_sound_looping_group_lens_flare_group_cheap_particle_emitter_group_effect_global_force_group_decal_system_group_reference },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_old_string_id, "marker" },
		{ _field_char_enum, "change color", &global_object_change_color_enum },
		{ _field_byte_flags, "flags", &object_attachment_flags },
		FIELD_PAD("DPKP", 2),
		{ _field_string_id, "primary scale" },
		{ _field_string_id, "secondary scale" },
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(light_group_cheap_light_group_light_volume_system_group_effect_group_sound_looping_group_lens_flare_group_cheap_particle_emitter_group_effect_global_force_group_decal_system_group_reference)
	{
		LIGHT_TAG,
		CHEAP_LIGHT_TAG,
		LIGHT_VOLUME_SYSTEM_TAG,
		EFFECT_TAG,
		SOUND_LOOPING_TAG,
		LENS_FLARE_TAG,
		CHEAP_PARTICLE_EMITTER_TAG,
		EFFECT_GLOBAL_FORCE_TAG,
		DECAL_SYSTEM_TAG,
		INVALID_TAG
	};

	STRINGS(global_object_change_color_enum)
	{
		"none",
		"primary",
		"secondary",
		"tertiary",
		"quaternary"
	};
	STRING_LIST(global_object_change_color_enum, global_object_change_color_enum_strings, _countof(global_object_change_color_enum_strings));

	STRINGS(object_attachment_flags)
	{
		"force always on#when this flag is clear we only create the attachment when the function object function is active or set to empty string",
		"effect size scale from object scale"
	};
	STRING_LIST(object_attachment_flags, object_attachment_flags_strings, _countof(object_attachment_flags_strings));

	#define GLOBAL_PIXEL_SHADER_BLOCK_STRUCT_ID { 0x4D7594D2, 0x86B447C9, 0xAB545AE9, 0x92626D45 }
	TAG_STRUCT(
		global_pixel_shader_block_struct,
		"global_pixel_shader_block_struct",
		"global_pixel_shader_block_struct",
		"s_global_pixel_shader_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_PIXEL_SHADER_BLOCK_STRUCT_ID)
	{
		{ _field_block, "entry points", &global_shader_entry_point_block_block },
		{ _field_dword_integer, "version" },
		{ _field_block, "compiled shaders", &compiled_pixel_shader_block_block },
		{ _field_terminator }
	};

	#define GLOBAL_RASTERIZER_CONSTANT_TABLE_STRUCT_ID { 0x88225AE9, 0x664A4892, 0xA3910819, 0x46CAAEFB }
	TAG_STRUCT(
		global_rasterizer_constant_table_struct,
		"global_rasterizer_constant_table_struct",
		"global_rasterizer_constant_table_struct",
		"s_global_rasterizer_constant_table_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_RASTERIZER_CONSTANT_TABLE_STRUCT_ID)
	{
		{ _field_block, "constants", &rasterizer_constant_block_block },
		{ _field_char_enum, "type", &rasterizer_constant_table_type_enum },
		FIELD_PAD("qersaui", 3),
		{ _field_terminator }
	};

	STRINGS(rasterizer_constant_table_type_enum)
	{
		"vertex",
		"pixel"
	};
	STRING_LIST(rasterizer_constant_table_type_enum, rasterizer_constant_table_type_enum_strings, _countof(rasterizer_constant_table_type_enum_strings));

	#define GLOBAL_RENDER_GEOMETRY_STRUCT_ID { 0x25CE2A94, 0x81545BA, 0x9E9A2690, 0xEFDBE832 }
	TAG_STRUCT(
		global_render_geometry_struct,
		"global_render_geometry_struct",
		"global_render_geometry_struct",
		"s_global_render_geometry_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_RENDER_GEOMETRY_STRUCT_ID)
	{
		FIELD_EXPLANATION("Render Geometry", "\nAll new Halo 3 render geometry definitions!\n\n"),
		{ _field_long_flags, "runtime flags", &render_geometry_flags },
		{ _field_block, "meshes", &global_mesh_block_block },
		{ _field_block, "PCA Mesh Indices", &pcameshindexblock_block },
		{ _field_block, "compression info", &compression_info_block_block },
		{ _field_block, "part sorting position", &sorting_position_block_block },
		{ _field_block, "user data", &user_data_block_block },
		{ _field_block, "per mesh temporary", &per_mesh_raw_data_block_block },
		FIELD_PAD("pad3", 12),
		{ _field_block, "per mesh node map", &per_mesh_node_map_block_block },
		{ _field_block, "per mesh subpart visibility", &per_mesh_subpart_visibility_block_block },
		{ _field_block, "per_mesh_prt_data", &per_mesh_prt_data_block_block },
		{ _field_block, "per_instance_lightmap_texcoords", &per_instance_lightmap_texcoords_block_block },
		{ _field_block, "water bounding box block", &water_bounding_box_block_block },
		{ _field_pageable_resource, "api resource", &render_geometry_api_resource_definition },
		{ _field_block, "Optional PVS data", &render_geometry_pvs_data_block_block },
		{ _field_block, "shapeNames", &shapenameblock_block },
		{ _field_terminator }
	};

	STRINGS(render_geometry_flags)
	{
		"processed*!",
		"available*!",
		"has valid budgets (really)*!",
		"manual resource creation*!",
		"keep raw geometry*!",
		"dont use compressed vertex positions*!",
		"pca animation table sorted*!",
		"needs no lightmap uvs*!",
		"always needs lightmap uvs*!"
	};
	STRING_LIST(render_geometry_flags, render_geometry_flags_strings, _countof(render_geometry_flags_strings));

	#define GLOBAL_RENDER_GEOMETRY_USER_DATA_HEADER_STRUCT_ID { 0x90ADB30A, 0xC06E4FA8, 0x96F092C1, 0x20E847F }
	TAG_STRUCT(
		global_render_geometry_user_data_header_struct,
		"global_render_geometry_user_data_header_struct",
		"global_render_geometry_user_data_header_struct",
		"s_global_render_geometry_user_data_header_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_RENDER_GEOMETRY_USER_DATA_HEADER_STRUCT_ID)
	{
		{ _field_char_enum, "data type", &render_geometry_user_data_type_definition },
		{ _field_char_integer, "data count" },
		{ _field_word_integer, "data size" },
		{ _field_terminator }
	};

	STRINGS(render_geometry_user_data_type_definition)
	{
		"PRT Info"
	};
	STRING_LIST(render_geometry_user_data_type_definition, render_geometry_user_data_type_definition_strings, _countof(render_geometry_user_data_type_definition_strings));

	#define GLOBAL_RENDER_MODEL_INSTANCE_PLACEMENT_BLOCK_ID { 0xC01E3AA5, 0x8CC5444B, 0xAA65DA03, 0xDF961696 }
	TAG_STRUCT(
		global_render_model_instance_placement_block,
		"global_render_model_instance_placement_block",
		"global_render_model_instance_placement_block",
		"s_global_render_model_instance_placement_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_RENDER_MODEL_INSTANCE_PLACEMENT_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_block_index, "node_index", &render_model_node_block_block },
		{ _field_real, "scale" },
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "left" },
		{ _field_real_vector_3d, "up" },
		{ _field_real_point_3d, "position" },
		{ _field_terminator }
	};

	#define GLOBAL_SCENARIO_LOAD_PARAMETERS_BLOCK_ID { 0x4B6AED51, 0xF0454236, 0x871E52C4, 0xA013780C }
	TAG_STRUCT(
		global_scenario_load_parameters_block,
		"scenario load parameters",
		"global_scenario_load_parameters_block",
		"s_global_scenario_load_parameters_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_SCENARIO_LOAD_PARAMETERS_BLOCK_ID)
	{
		FIELD_EXPLANATION("SCENARIO LOAD PARAMETERS", "strip-variant <variant-name>\nstrips a given variant out of the model tag\nstrip-dialogue\nstrips all the dialogue for this model i.e. cinematic only"),
		{ _field_tag_reference, "scenario", &scenario_group_reference$2 },
		{ _field_data, "parameters", &parameters_text_definition },
		FIELD_PAD("BDZDSK", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(scenario_group_reference$2, SCENARIO_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define GLOBAL_SELF_TRACK_BLOCK_ID { 0x6420754E, 0xEC0648ED, 0xBFE1980A, 0xF02754DA }
	TAG_STRUCT(
		global_self_track_block,
		"self track log",
		"global_self_track_block",
		"s_global_self_track_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_SELF_TRACK_BLOCK_ID)
	{
		{ _field_string, "time" },
		{ _field_string, "machine" },
		{ _field_long_string, "version" },
		{ _field_long_string, "command" },
		{ _field_terminator }
	};

	#define GLOBAL_SHADER_CATEGORY_DEPENDENCY_ID { 0x5F7BC1E8, 0x34304024, 0xA5DBCB55, 0x1D18FDE8 }
	TAG_STRUCT(
		global_shader_category_dependency,
		"global_shader_category_dependency",
		"global_shader_category_dependency",
		"s_global_shader_category_dependency",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_SHADER_CATEGORY_DEPENDENCY_ID)
	{
		{ _field_long_integer, "definition category index" },
		{ _field_block, "option dependency", &global_shader_option_dependency_block },
		{ _field_terminator }
	};

	#define GLOBAL_SHADER_ENTRY_POINT_BLOCK_ID { 0xC774B246, 0x4B264463, 0x8F00FFB5, 0xDBF46C9D }
	TAG_STRUCT(
		global_shader_entry_point_block,
		"global_shader_entry_point_block",
		"global_shader_entry_point_block",
		"s_global_shader_entry_point_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_SHADER_ENTRY_POINT_BLOCK_ID)
	{
		{ _field_block, "category dependency", &global_shader_category_dependency_block },
		{ _field_long_integer, "default compiled shader index" },
		{ _field_terminator }
	};

	#define GLOBAL_SHADER_OPTION_DEPENDENCY_ID { 0x36B7BB10, 0x29F2482F, 0xA621D1B7, 0x8FC91F6E }
	TAG_STRUCT(
		global_shader_option_dependency,
		"global_shader_option_dependency",
		"global_shader_option_dependency",
		"s_global_shader_option_dependency",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_SHADER_OPTION_DEPENDENCY_ID)
	{
		{ _field_long_integer, "compiled shader index" },
		{ _field_terminator }
	};

	#define GLOBAL_SOUND_EQUALIZER_BLOCK_ID { 0x9EE2BF8D, 0x8CB54AD8, 0xA7D0F3DA, 0x3FDE09A9 }
	TAG_STRUCT(
		global_sound_equalizer_block,
		"global_sound_equalizer_block",
		"global_sound_equalizer_block",
		"s_global_sound_equalizer_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_SOUND_EQUALIZER_BLOCK_ID)
	{
		FIELD_CUSTOM("input gain", _tag_field_custom_type_slider),
		{ _field_real, "input gain", nullptr, "dB", _tag_field_custom_type_slider },
		FIELD_CUSTOM("output gain", _tag_field_custom_type_slider),
		{ _field_real, "output gain", nullptr, "dB", _tag_field_custom_type_slider },
		{ _field_block, "band settings", &sound_equalizer_band_settings_block_block },
		{ _field_terminator }
	};

	#define GLOBAL_SOUND_LOOK_UP_TABLE_DISTORTION_BLOCK_ID { 0x898FB725, 0x714849A9, 0x8A88EB99, 0x9FC092C }
	TAG_STRUCT(
		global_sound_look_up_table_distortion_block,
		"global_sound_look_up_table_distortion_block",
		"global_sound_look_up_table_distortion_block",
		"s_global_sound_look_up_table_distortion_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_SOUND_LOOK_UP_TABLE_DISTORTION_BLOCK_ID)
	{
		FIELD_CUSTOM("table size", _tag_field_custom_type_slider),
		{ _field_long_integer, "table size", _tag_field_custom_type_slider },
		FIELD_CUSTOM("noise amount", _tag_field_custom_type_slider),
		{ _field_real, "noise amount", _tag_field_custom_type_slider },
		{ _field_long_flags, "flags", &look_up_table_flags_definition },
		{ _field_terminator }
	};

	STRINGS(look_up_table_flags_definition)
	{
		"interpolate"
	};
	STRING_LIST(look_up_table_flags_definition, look_up_table_flags_definition_strings, _countof(look_up_table_flags_definition_strings));

	#define GLOBAL_SOUND_LOWPASS_BLOCK_ID { 0xF38F05D9, 0xF9BB4F33, 0x95EAD7FE, 0x61588F25 }
	TAG_STRUCT(
		global_sound_lowpass_block,
		"global_sound_lowpass_block",
		"global_sound_lowpass_block",
		"s_global_sound_lowpass_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_SOUND_LOWPASS_BLOCK_ID)
	{
		FIELD_CUSTOM("cutoff frequency", _tag_field_custom_type_slider),
		{ _field_real, "cutoff frequency", nullptr, "Hz", _tag_field_custom_type_slider },
		FIELD_CUSTOM("output gain", _tag_field_custom_type_slider),
		{ _field_real, "output gain", nullptr, "dB", _tag_field_custom_type_slider },
		{ _field_terminator }
	};

	#define GLOBAL_SOUND_REVERB_BLOCK_ID { 0xE4B31E1D, 0xC5A74C51, 0xAE02D86C, 0x2B3F8B06 }
	TAG_STRUCT(
		global_sound_reverb_block,
		"global_sound_reverb_block",
		"global_sound_reverb_block",
		"s_global_sound_reverb_block",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_SOUND_REVERB_BLOCK_ID)
	{
		FIELD_CUSTOM("room intensity", _tag_field_custom_type_slider),
		{ _field_real, "room intensity", "intensity of the room effect", "dB", _tag_field_custom_type_slider },
		FIELD_CUSTOM("room intensity hf", _tag_field_custom_type_slider),
		{ _field_real, "room intensity hf", "intensity of the room effect above the reference high frequency", "dB", _tag_field_custom_type_slider },
		FIELD_CUSTOM("room rolloff (0 to 10)", _tag_field_custom_type_slider),
		{ _field_real, "room rolloff (0 to 10)", "how quickly the room effect rolls off, from 0.0 to 10.0", _tag_field_custom_type_slider },
		FIELD_CUSTOM("decay time (.1 to 20)", _tag_field_custom_type_slider),
		{ _field_real, "decay time (.1 to 20)", nullptr, "seconds", _tag_field_custom_type_slider },
		FIELD_CUSTOM("decay hf ratio (.1 to 2)", _tag_field_custom_type_slider),
		{ _field_real, "decay hf ratio (.1 to 2)", _tag_field_custom_type_slider },
		FIELD_CUSTOM("reflections intensity", _tag_field_custom_type_slider),
		{ _field_real, "reflections intensity", nullptr, "dB", "[-100,10]", _tag_field_custom_type_slider },
		FIELD_CUSTOM("reflections delay (0 to .3)", _tag_field_custom_type_slider),
		{ _field_real, "reflections delay (0 to .3)", nullptr, "seconds", _tag_field_custom_type_slider },
		FIELD_CUSTOM("reverb intensity", _tag_field_custom_type_slider),
		{ _field_real, "reverb intensity", nullptr, "dB", "[-100,20]", _tag_field_custom_type_slider },
		FIELD_CUSTOM("reverb delay (0 to .1)", _tag_field_custom_type_slider),
		{ _field_real, "reverb delay (0 to .1)", nullptr, "seconds", _tag_field_custom_type_slider },
		FIELD_CUSTOM("diffusion", _tag_field_custom_type_slider),
		{ _field_real, "diffusion", _tag_field_custom_type_slider },
		FIELD_CUSTOM("density", _tag_field_custom_type_slider),
		{ _field_real, "density", _tag_field_custom_type_slider },
		FIELD_CUSTOM("hf reference(20 to 20,000)", _tag_field_custom_type_slider),
		{ _field_real, "hf reference(20 to 20,000)", "for hf values, what frequency defines hf, from 20 to 20,000", "Hz", _tag_field_custom_type_slider },
		FIELD_EXPLANATION("WWise Environment", "Use these values for WWise reverb. Above stuff will be removed eventually."),
		{ _field_string_id, "Environment name", "Name of the environment from WWise. This will be a DSP effect with Environmental Effect checked." },
		FIELD_CUSTOM("Dry mix value", _tag_field_custom_type_slider),
		{ _field_real, "Dry mix value", "0 to 1 with 0 being none, and 1 being full.", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Wet mix value", _tag_field_custom_type_slider),
		{ _field_real, "Wet mix value", "0 to 1 with 0 being none, and 1 being full.", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Player wet mix value", _tag_field_custom_type_slider),
		{ _field_real, "Player wet mix value", "0 to 1 with 0 being none, and 1 being full.", _tag_field_custom_type_slider },
		{ _field_terminator }
	};

	#define GLOBAL_STRUCTURE_PHYSICS_DESIGN_STRUCT_ID { 0x85AE0A45, 0x13D34FA6, 0x8EB153FA, 0xA7162294 }
	TAG_STRUCT(
		global_structure_physics_design_struct,
		"global_structure_physics_design_struct",
		"global_structure_physics_design_struct",
		"s_global_structure_physics_design_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_STRUCTURE_PHYSICS_DESIGN_STRUCT_ID)
	{
		{ _field_long_integer, "importer version" },
		{ _field_block, "soft ceiling mopp code block", &mopp_code_definition_block_block },
		{ _field_block, "soft ceilings block", &structure_soft_ceiling_block_block },
		{ _field_block, "water mopp code", &mopp_code_definition_block_block },
		{ _field_block, "water groups block", &structure_water_groups_block_block },
		{ _field_block, "water instances block", &structure_water_instances_block_block },
		{ _field_terminator }
	};

	#define GLOBAL_STRUCTURE_PHYSICS_STRUCT_ID { 0x85AE0045, 0x53D34FA6, 0x8EF153FA, 0x77162294 }
	VERSIONED_TAG_STRUCT(
		global_structure_physics_struct,
		"global_structure_physics_struct",
		"global_structure_physics_struct",
		"s_global_structure_physics_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_STRUCTURE_PHYSICS_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_block, "breakable surfaces mopp code block", &mopp_code_definition_block_block },
		{ _field_block, "breakable surfaace key table", &breakable_surface_key_table_block_block },
		
		{ _struct_version_mode_equal, 0, 2 },
		{ _field_block, "breakable surfaces mopp code block", &mopp_code_definition_block_block },
		{ _field_block, "breakable surfaace key table", &breakable_surface_key_table_block_block },
		
		{ _field_terminator }
	};

	#define GLOBAL_TARGET_TRACKING_PARAMETERS_BLOCK_ID { 0x5C0DCDA7, 0x2D9244BA, 0x940BE4EB, 0x94D50B22 }
	TAG_STRUCT(
		global_target_tracking_parameters_block,
		"global_target_tracking_parameters_block",
		"global_target_tracking_parameters_block",
		"s_global_target_tracking_parameters_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_TARGET_TRACKING_PARAMETERS_BLOCK_ID)
	{
		{ _field_block, "tracking types", "specify the kinds of targets this tracking system can lock on", &tracking_type_block_block },
		{ _field_real, "acquire time", nullptr, "s" },
		{ _field_real, "grace time", nullptr, "s" },
		{ _field_real, "decay time", nullptr, "s" },
		{ _field_tag_reference, "tracking sound", &sound_combiner_group_sound_old_group_sound_looping_group_sound_group_reference },
		{ _field_tag_reference, "locked sound", &sound_combiner_group_sound_old_group_sound_looping_group_sound_group_reference },
		{ _field_terminator }
	};

	#define GLOBAL_TEAM_ROLE_BLOCK_ID { 0x971A7EDE, 0x2F8D426C, 0x9FE80DD7, 0x1DD603FB }
	TAG_STRUCT(
		global_team_role_block,
		"global_team_role_block",
		"global_team_role_block",
		"s_global_team_role_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_TEAM_ROLE_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &team_role_flags },
		{ _field_short_enum, "team", &global_multiplayer_team_designator_enum_definition },
		FIELD_PAD("QVO", 2),
		{ _field_block, "player roles", &player_role_block_block },
		{ _field_terminator }
	};

	STRINGS(team_role_flags)
	{
		"UNUSED"
	};
	STRING_LIST(team_role_flags, team_role_flags_strings, _countof(team_role_flags_strings));

	#define GLOBAL_TEXTURES_REFS_BLOCK_ID { 0x6CFA3906, 0x9F764CAE, 0x8034C2F5, 0xA11803EA }
	TAG_STRUCT(
		global_textures_refs_block,
		"global_textures_refs_block",
		"global_textures_refs_block",
		"s_global_textures_refs_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_TEXTURES_REFS_BLOCK_ID)
	{
		{ _field_tag_reference, "texture", &bitmap_group_reference$2 },
		{ _field_terminator }
	};

	#define GLOBAL_VEHICLE_ENGINE_STRUCT_ID { 0xB2086F9C, 0xE80E4D79, 0x81DDEB34, 0xBA677DA4 }
	TAG_STRUCT(
		global_vehicle_engine_struct,
		"global_vehicle_engine_struct",
		"global_vehicle_engine_struct",
		"s_global_vehicle_engine_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_VEHICLE_ENGINE_STRUCT_ID)
	{
		FIELD_EXPLANATION("engine", nullptr),
		{ _field_real, "engine moment", "higher moments make engine spin up slower" },
		{ _field_real, "engine max angular velocity", "higher moments make engine spin up slower" },
		{ _field_block, "gears", &gear_block_block },
		{ _field_tag_reference, "gear shift sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_block, "load and cruise sound", &load_and_cruise_block_block },
		{ _field_terminator }
	};

	#define GLOBAL_VERTEX_SHADER_BLOCK_STRUCT_ID { 0x6551E55E, 0x833B4478, 0x87DF6901, 0x1AA92BE2 }
	TAG_STRUCT(
		global_vertex_shader_block_struct,
		"global_vertex_shader_block_struct",
		"global_vertex_shader_block_struct",
		"s_global_vertex_shader_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_VERTEX_SHADER_BLOCK_STRUCT_ID)
	{
		{ _field_block, "vertex types", &global_vertex_shader_vertex_types_block_block },
		{ _field_dword_integer, "version" },
		{ _field_block, "compiled shaders", &compiled_vertex_shader_block_block },
		{ _field_terminator }
	};

	#define GLOBAL_VERTEX_SHADER_VERTEX_TYPES_BLOCK_ID { 0xD8909DB6, 0x9DFC44C9, 0xA2F08BB0, 0x5B8D92E6 }
	TAG_STRUCT(
		global_vertex_shader_vertex_types_block,
		"global_vertex_shader_vertex_types_block",
		"global_vertex_shader_vertex_types_block",
		"s_global_vertex_shader_vertex_types_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_VERTEX_SHADER_VERTEX_TYPES_BLOCK_ID)
	{
		{ _field_block, "entry point dependency", &global_shader_entry_point_block_block },
		{ _field_terminator }
	};

	#define GLOBAL_Z_REFERENCE_VECTOR_BLOCK_ID { 0x2BDA3AB4, 0x28434572, 0xA6BF6C69, 0x72508C99 }
	TAG_STRUCT(
		global_z_reference_vector_block,
		"global_z_reference_vector_block",
		"global_z_reference_vector_block",
		"s_global_z_reference_vector_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBAL_Z_REFERENCE_VECTOR_BLOCK_ID)
	{
		{ _field_real, "z reference i" },
		{ _field_real, "z reference j" },
		{ _field_real, "z reference k" },
		{ _field_real, "z reference l" },
		{ _field_terminator }
	};

	#define GLOBALS_STRUCT_DEFINITION_ID { 0x8DE77CB, 0xA2CF4145, 0xBB807A30, 0xB2A866B3 }
	TAG_STRUCT(
		globals_struct_definition,
		"globals_struct_definition",
		"globals_struct_definition",
		"s_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GLOBALS_STRUCT_DEFINITION_ID)
	{
		FIELD_PAD("YJLTWDSL", 172),
		{ _field_long_enum, "language", &language_enum },
		{ _field_block, "havok cleanup resources", &havok_cleanup_resources_block_block },
		{ _field_block, "sound globals", &sound_globals_block_block },
		FIELD_EXPLANATION("AI globals", "I have moved the ai globals out of this tag, and into its own tag which is referenced here."),
		{ _field_block, "DEPRECATED", MAKE_ALT_NAMES("ai globals"), FIELD_FLAG_UNKNOWN0 | FIELD_FLAG_READ_ONLY, &ai_globals_data_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_tag_reference, "ai globals ref", &ai_globals_group_reference },
		{ _field_block, "damage table", &game_globals_damage_block_block },
		{ _field_block, "sounds", &sound_block_block },
		{ _field_block, "camera", &camera_block_block },
		{ _field_block, "controller input", &controller_input_block_block },
		{ _field_block, "player control", &player_control_block_block },
		{ _field_block, "default player traits", &game_engine_player_traits_block_block },
		{ _field_block, "difficulty", &difficulty_block_block },
		{ _field_block, "co-op difficulty", &coop_difficulty_block_block },
		{ _field_block, "soft ceilings", &soft_ceiling_globals_block_block },
		{ _field_block, "interface tags", &interface_tag_references_block },
		{ _field_block, "weapon list", &cheat_weapons_block_block },
		{ _field_block, "@cheat powerups", &cheat_powerups_block_block },
		{ _field_block, "@player information", &player_information_block_block },
		{ _field_block, "@player representation", &player_representation_block_block },
		{ _field_block, "damage", MAKE_ALT_NAMES("falling damage"), &damage_globals_block_block },
		{ _field_block, "shield boost", &shield_boost_block_block },
		{ _field_block, "materials", &materials_block_block$2, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "profile colors", &multiplayer_color_block_block },
		{ _field_block, "emblem colors", &multiplayer_color_block_block },
		{ _field_block, "visor colors", &visor_color_block_block },
		FIELD_GROUP_BEGIN("Elite specular colors"),
		{ _field_struct, "elite specular color", &elite_specular_color_struct },
		FIELD_GROUP_END(),
		{ _field_tag_reference, "forge globals", &forge_globals_group_reference },
		{ _field_tag_reference, "game engine globals", &game_engine_globals_group_reference },
		{ _field_tag_reference, "multiplayer globals", &multiplayer_globals_group_reference },
		{ _field_tag_reference, "survival_mode globals", &survival_mode_globals_group_reference },
		{ _field_tag_reference, "firefight globals", &firefight_globals_group_reference },
		{ _field_tag_reference, "global multiplayer object type list", &multiplayer_object_type_list_group_reference },
		{ _field_tag_reference, "custom app globals", &custom_app_globals_group_reference },
		{ _field_tag_reference, "grenades", &game_globals_grenade_list_group_reference },
		{ _field_tag_reference, "ordnances", &game_globals_ordnance_list_group_reference },
		{ _field_tag_reference, "silent assist", &silent_assist_globals_group_reference },
		{ _field_block, "cinematics globals", &cinematics_globals_block_block },
		{ _field_block, "campaign metagame globals", &campaign_metagame_globals_block_block },
		{ _field_tag_reference, "game medal globals", &game_medal_globals_group_reference },
		{ _field_struct, "language pack1", &language_pack_definition },
		{ _field_struct, "language pack2", &language_pack_definition },
		{ _field_struct, "language pack3", &language_pack_definition },
		{ _field_struct, "language pack4", &language_pack_definition },
		{ _field_struct, "language pack5", &language_pack_definition },
		{ _field_struct, "language pack6", &language_pack_definition },
		{ _field_struct, "language pack7", &language_pack_definition },
		{ _field_struct, "language pack8", &language_pack_definition },
		{ _field_struct, "language pack9", &language_pack_definition },
		{ _field_struct, "language pack10", &language_pack_definition },
		{ _field_struct, "language pack11", &language_pack_definition },
		{ _field_struct, "language pack12", &language_pack_definition },
		{ _field_struct, "language pack13", &language_pack_definition },
		{ _field_struct, "language pack14", &language_pack_definition },
		{ _field_struct, "language pack15", &language_pack_definition },
		{ _field_struct, "language pack16", &language_pack_definition },
		{ _field_struct, "language pack17", &language_pack_definition },
		FIELD_EXPLANATION("Rasterizer globals", nullptr),
		{ _field_tag_reference, "rasterizer_globals_ref", &rasterizer_globals_group_reference },
		FIELD_EXPLANATION("Default camera fx settings", nullptr),
		{ _field_tag_reference, "default camera fx settings", &camera_fx_settings_group_reference },
		FIELD_EXPLANATION("Default wind settings", nullptr),
		{ _field_tag_reference, "default wind settings", &wind_group_reference },
		FIELD_EXPLANATION("Weather globals", nullptr),
		{ _field_tag_reference, "weather globals", &weather_globals_group_reference },
		FIELD_EXPLANATION("Default collision damage", nullptr),
		{ _field_tag_reference, "collision damage effect", &damage_effect_group_reference },
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference$5 },
		FIELD_EXPLANATION("global material types", nullptr),
		{ _field_string_id, "global water material", "the default value for what material type water is" },
		{ _field_string_id, "global air material", "the default value for what material type air is" },
		{ _field_short_integer, "global water material type" },
		{ _field_short_integer, "global air material type" },
		{ _field_tag_reference, "effect globals", &effect_globals_group_reference },
		{ _field_tag_reference, "havok collision filter", &havok_collision_filter_group_reference },
		{ _field_tag_reference, "default item grounded friction", &grounded_friction_group_reference },
		{ _field_block, "active camo", &active_camo_globals_block_block },
		{ _field_tag_reference, "incident global properties", &incident_global_properties_definition_group_reference },
		{ _field_tag_reference, "player grade globals", &player_grade_globals_definition_group_reference },
		{ _field_tag_reference, "enlistment globals", &player_enlistment_globals_definition_group_reference },
		{ _field_tag_reference, "player model customization globals", &player_model_customization_globals_group_reference },
		{ _field_tag_reference, "loadout globals", &loadout_globals_definition_group_reference },
		{ _field_tag_reference, "challenge globals", &challenge_globals_definition_group_reference },
		{ _field_tag_reference, "game completion rewards globals", &game_completion_rewards_globals_group_reference },
		{ _field_tag_reference, "game achievements", &achievements_group_reference },
		{ _field_tag_reference, "game avatar awards", &avatar_awards_group_reference },
		{ _field_tag_reference, "game performance thortles default", &game_performance_throttle_group_reference },
		{ _field_tag_reference, "armormod globals", &armormod_globals_group_reference },
		{ _field_tag_reference, "progression globals", &progression_group_reference },
		{ _field_block, "garbage collection", &garbage_collection_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "camera impulse", &global_camera_impulse_block_block },
		{ _field_block, "runtime materials", &runtime_materials_block_block },
		{ _field_block, "Hologram Lighting", &hologramlightingglobalsblock_block },
		{ _field_tag_reference, "Narrative globals", &narrativeglobals_group_reference },
		{ _field_terminator }
	};

	STRINGS(language_enum)
	{
		"english",
		"japanese",
		"german",
		"french",
		"spanish",
		"mexican spanish",
		"italian",
		"korean",
		"chinese-traditional",
		"chinese-simplified",
		"portuguese",
		"polish",
		"russian",
		"danish",
		"finnish",
		"dutch",
		"norwegian"
	};
	STRING_LIST(language_enum, language_enum_strings, _countof(language_enum_strings));

	TAG_REFERENCE(ai_globals_group_reference, AI_GLOBALS_TAG);

	TAG_REFERENCE(forge_globals_group_reference, FORGE_GLOBALS_TAG);

	TAG_REFERENCE(game_engine_globals_group_reference, GAME_ENGINE_GLOBALS_TAG);

	TAG_REFERENCE(multiplayer_globals_group_reference, MULTIPLAYER_GLOBALS_TAG);

	TAG_REFERENCE(survival_mode_globals_group_reference, SURVIVAL_MODE_GLOBALS_TAG);

	TAG_REFERENCE(firefight_globals_group_reference, FIREFIGHT_GLOBALS_TAG);

	TAG_REFERENCE(multiplayer_object_type_list_group_reference, MULTIPLAYER_OBJECT_TYPE_LIST_TAG);

	TAG_REFERENCE(custom_app_globals_group_reference, CUSTOM_APP_GLOBALS_TAG);

	TAG_REFERENCE(game_globals_grenade_list_group_reference, GAME_GLOBALS_GRENADE_LIST_TAG);

	TAG_REFERENCE(game_globals_ordnance_list_group_reference, GAME_GLOBALS_ORDNANCE_LIST_TAG);

	TAG_REFERENCE(silent_assist_globals_group_reference, SILENT_ASSIST_GLOBALS_TAG);

	TAG_REFERENCE(game_medal_globals_group_reference, GAME_MEDAL_GLOBALS_TAG);

	TAG_REFERENCE(rasterizer_globals_group_reference, RASTERIZER_GLOBALS_TAG);

	TAG_REFERENCE(wind_group_reference, WIND_TAG);

	TAG_REFERENCE(weather_globals_group_reference, WEATHER_GLOBALS_TAG);

	TAG_REFERENCE(collision_damage_group_reference$5, COLLISION_DAMAGE_TAG);

	TAG_REFERENCE(effect_globals_group_reference, EFFECT_GLOBALS_TAG);

	TAG_REFERENCE(havok_collision_filter_group_reference, HAVOK_COLLISION_FILTER_TAG);

	TAG_REFERENCE(incident_global_properties_definition_group_reference, INCIDENT_GLOBAL_PROPERTIES_DEFINITION_TAG);

	TAG_REFERENCE(player_grade_globals_definition_group_reference, PLAYER_GRADE_GLOBALS_DEFINITION_TAG);

	TAG_REFERENCE(player_enlistment_globals_definition_group_reference, PLAYER_ENLISTMENT_GLOBALS_DEFINITION_TAG);

	TAG_REFERENCE(player_model_customization_globals_group_reference, PLAYER_MODEL_CUSTOMIZATION_GLOBALS_TAG);

	TAG_REFERENCE(loadout_globals_definition_group_reference, LOADOUT_GLOBALS_DEFINITION_TAG);

	TAG_REFERENCE(challenge_globals_definition_group_reference, CHALLENGE_GLOBALS_DEFINITION_TAG);

	TAG_REFERENCE(game_completion_rewards_globals_group_reference, GAME_COMPLETION_REWARDS_GLOBALS_TAG);

	TAG_REFERENCE(achievements_group_reference, ACHIEVEMENTS_TAG);

	TAG_REFERENCE(avatar_awards_group_reference, AVATAR_AWARDS_TAG);

	TAG_REFERENCE(game_performance_throttle_group_reference, GAME_PERFORMANCE_THROTTLE_TAG);

	TAG_REFERENCE(armormod_globals_group_reference, ARMORMOD_GLOBALS_TAG);

	TAG_REFERENCE(progression_group_reference, PROGRESSION_TAG);

	TAG_REFERENCE(narrativeglobals_group_reference, NARRATIVEGLOBALS_TAG);

	#define GPU_COLOR_BLOCK_ID { 0x77A26FFB, 0xC164319, 0x81E4C4D3, 0x69DC3749 }
	TAG_STRUCT(
		gpu_color_block,
		"gpu_color_block",
		"gpu_color_block",
		"s_gpu_color_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GPU_COLOR_BLOCK_ID,
		4)
	{
		{ _field_array, "runtime gpu_color_sub_array", &gpu_color_sub_array$2 },
		{ _field_terminator }
	};

	#define GPU_COLOR_SUB_ARRAY_STRUCT_DEFINITION_ID { 0xEBCC1FB0, 0x84F141D4, 0xA584B00F, 0x8EFF6043 }
	TAG_STRUCT(
		gpu_color_sub_array_struct_definition,
		"gpu_color_sub_array",
		"gpu_color_sub_array",
		"s_gpu_color_sub_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GPU_COLOR_SUB_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "runtime gpu_color_real" },
		{ _field_terminator }
	};

	#define GPU_DATA_STRUCT$2_ID { 0x62F911D6, 0x9725493B, 0x8FFDB178, 0x608FC7B }
	TAG_STRUCT(
		gpu_data_struct$2,
		"gpu_data_struct",
		"gpu_data_struct",
		"s_gpu_data_struct$2",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GPU_DATA_STRUCT$2_ID)
	{
		{ _field_block, "runtime m_sprite", &gpu_sprite_block_block },
		{ _field_block, "runtime m_frames", &gpu_variants_block_block },
		{ _field_terminator }
	};

	#define GPU_DATA_STRUCT_ID { 0xF0F224FF, 0x7CD04586, 0x9698B35C, 0x7E98B715 }
	TAG_STRUCT(
		gpu_data_struct,
		"gpu_data_struct",
		"gpu_data_struct",
		"s_gpu_data_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GPU_DATA_STRUCT_ID)
	{
		{ _field_block, "m_variants", &gpu_variants_block_block },
		{ _field_terminator }
	};

	#define GPU_FUNCTION_BLOCK_ID { 0xE4F4C1FD, 0x776D4521, 0xAACCF4EA, 0x51350BCD }
	TAG_STRUCT(
		gpu_function_block,
		"gpu_function_block",
		"gpu_function_block",
		"s_gpu_function_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GPU_FUNCTION_BLOCK_ID,
		4)
	{
		{ _field_array, "runtime gpu_function_sub_array", &gpu_function_sub_array$2 },
		{ _field_terminator }
	};

	#define GPU_FUNCTION_SUB_ARRAY_STRUCT_DEFINITION_ID { 0xD6260931, 0xE09141A2, 0x984511D9, 0xA3D78599 }
	TAG_STRUCT(
		gpu_function_sub_array_struct_definition,
		"gpu_function_sub_array",
		"gpu_function_sub_array",
		"s_gpu_function_sub_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GPU_FUNCTION_SUB_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "runtime gpu_function_real" },
		{ _field_terminator }
	};

	#define GPU_PROPERTY_BLOCK_ID { 0xA49C0823, 0x46CF4B62, 0xA45B3947, 0x2D11DA0E }
	TAG_STRUCT(
		gpu_property_block,
		"gpu_property_block",
		"gpu_property_block",
		"s_gpu_property_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GPU_PROPERTY_BLOCK_ID,
		4)
	{
		{ _field_array, "runtime gpu_property_sub_array", &gpu_property_sub_array$2 },
		{ _field_terminator }
	};

	#define GPU_PROPERTY_FUNCTION_COLOR_STRUCT_ID { 0x33DE2336, 0x7C6242C5, 0xAD5A8C31, 0x992C78EA }
	TAG_STRUCT(
		gpu_property_function_color_struct,
		"gpu_property_function_color_struct",
		"gpu_property_function_color_struct",
		"s_gpu_property_function_color_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GPU_PROPERTY_FUNCTION_COLOR_STRUCT_ID)
	{
		{ _field_block, "runtime gpu_property_block", &gpu_property_block_block },
		{ _field_block, "runtime gpu_functions_block", &gpu_function_block_block },
		{ _field_block, "runtime gpu_colors_block", &gpu_color_block_block },
		{ _field_terminator }
	};

	#define GPU_PROPERTY_SUB_ARRAY_STRUCT_DEFINITION_ID { 0x5E56CDB1, 0xEC34402B, 0xBF36EF1D, 0x9B7468BA }
	TAG_STRUCT(
		gpu_property_sub_array_struct_definition,
		"gpu_property_sub_array",
		"gpu_property_sub_array",
		"s_gpu_property_sub_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GPU_PROPERTY_SUB_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "runtime gpu_property_real" },
		{ _field_terminator }
	};

	#define GPU_SINGLE_CONSTANT_REGISTER_ARRAY_STRUCT_DEFINITION_ID { 0xA2794AE9, 0x58564257, 0xA6A57292, 0x7319E3F2 }
	TAG_STRUCT(
		gpu_single_constant_register_array_struct_definition,
		"gpu_single_constant_register_array",
		"gpu_single_constant_register_array",
		"s_gpu_single_constant_register_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GPU_SINGLE_CONSTANT_REGISTER_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "runtime gpu_real" },
		{ _field_terminator }
	};

	#define GPU_SPRITE_BLOCK_ID { 0x821F9C90, 0x95844863, 0x9425371D, 0x7AB8E8DD }
	TAG_STRUCT(
		gpu_sprite_block,
		"gpu_sprite_block",
		"gpu_sprite_block",
		"s_gpu_sprite_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GPU_SPRITE_BLOCK_ID,
		4)
	{
		{ _field_array, "runtime gpu_sprite_array", &gpu_single_constant_register_array$2 },
		{ _field_terminator }
	};

	#define GPU_VARIANTS_BLOCK_ID { 0x7820CC6F, 0x22840F4, 0x93225BE7, 0x818DBD97 }
	TAG_STRUCT(
		gpu_variants_block,
		"gpu_variants_block",
		"gpu_variants_block",
		"s_gpu_variants_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GPU_VARIANTS_BLOCK_ID,
		4)
	{
		{ _field_array, "runtime m_count", &gpu_single_constant_register_array$2 },
		{ _field_terminator }
	};

	#define GROUNDED_FRICTION_STRUCT_DEFINITION_ID { 0xE69A028A, 0x3B434D19, 0x9099E80F, 0xC0A18EC7 }
	TAG_STRUCT(
		grounded_friction_struct_definition,
		"grounded_friction_struct_definition",
		"grounded_friction_struct_definition",
		"s_grounded_friction_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GROUNDED_FRICTION_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("GROUNDED FRICTION", "Defines friction to be applied to grounded things (rolling or sliding) relative to the time they\'ve been rolling/sliding. Friction of 1.0 will stop them completely in a single tick.  Friction of 0.0 is the same as no friction at all.  The on-ground timer used to access this graph resets if the object leaves the ground for any period of time (bounces, is blown off the ground, etc). \n\nFOR EXAMPLE: Set up the graph as a \"Curve\", set the range to 0-1 (using the boxes at the top and bottom of the right-hand side of the graph), and set the domain min and max to 0 and 5, respectively. Set the maximum slope for friction to 90 (vertical walls).  The in-game result is that any object using this grounded friction will have friction of 0 (no friction) applied the instant they stop bouncing and start rolling/sliding, and that friction will ramp up (using the curve you provided) to 1 over the course of 5 seconds.  After 5 seconds of sliding/rolling, the object will come to a stop, no matter what (even if it\'s sliding down an 85 degree slope, because you set the maximum slope for friction to 90).  See daldridge or Sage w/ further questions."),
		{ _field_struct, "Friction over time", &scalar_function_named_struct },
		{ _field_real, "Friction over time domain min", "Grounded time at which the graph begins to apply (corresponds to the left side of the graph).  E.g. If you set this to 5.0, no friction will be applied for the first 5 seconds after an object is considered to be \"grounded\".", "seconds" },
		{ _field_real, "Friction over time domain max", "Grounded time at which the graph ends (corresponds to the right side of the graph).  E.g. If want friction to be a constant 0.5 after 15 seconds of grounded motion, set this to 15 and make the graph end at 0.5.", "seconds" },
		{ _field_real, "Maximum slope for friction", "If the slope of the surface the object is resting on is steeper than this, the grounded friction timer will reset to zero (disabling friction temporarily).", "degrees" },
		{ _field_real, "Minimum asymmetry ratio for axis lock", "If the length of the longest axis of the object's bounding box is at least this multiple of the length of its shortest axis, angular friction will be applied only to rotation around the longest axis (to prevent the slow timber effect). 2.0 is the default if this is left at 0.0. Use a very large number to disable (e.g. 10000.0)." },
		{ _field_terminator }
	};

	#define GUARDIAN_BLOCK_ID { 0x3A5289E7, 0xE34740B8, 0xA7CB311D, 0xDAE40875 }
	TAG_STRUCT(
		guardian_block,
		"guardian_block",
		"guardian_block",
		"s_guardian_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GUARDIAN_BLOCK_ID)
	{
		{ _field_struct, "steering control", &vehicle_steering_control_struct },
		{ _field_real, "maximum forward speed" },
		{ _field_real, "maximum reverse speed" },
		{ _field_real, "speed acceleration" },
		{ _field_real, "speed deceleration" },
		{ _field_real, "maximum left slide" },
		{ _field_real, "maximum right slide" },
		{ _field_real, "slide acceleration" },
		{ _field_real, "slide deceleration" },
		{ _field_real, "torque scale", "0 defaults to 1" },
		{ _field_real, "anti-gravity force z-offset" },
		{ _field_terminator }
	};

	#define GUI_ALERT_DESCRIPTION_BLOCK_ID { 0xBE222E19, 0x7F2B4774, 0x8343FCDB, 0x1E293D77 }
	TAG_STRUCT(
		gui_alert_description_block,
		"gui_alert_description_block",
		"gui_alert_description_block",
		"s_gui_alert_description_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GUI_ALERT_DESCRIPTION_BLOCK_ID)
	{
		{ _field_string_id, "error name" },
		{ _field_byte_flags, "flags", &gui_alert_flags },
		{ _field_char_enum, "error category", &gui_error_category_enum },
		{ _field_char_enum, "error icon", &gui_error_icon_enum },
		FIELD_PAD("pad0", 1),
		{ _field_string_id, "title" },
		{ _field_string_id, "message" },
		{ _field_terminator }
	};

	STRINGS(gui_alert_flags)
	{
		"allow auto dismissal",
		"show spinner"
	};
	STRING_LIST(gui_alert_flags, gui_alert_flags_strings, _countof(gui_alert_flags_strings));

	STRINGS(gui_error_category_enum)
	{
		"default",
		"networking",
		"storage (reading/writing failure)",
		"controller"
	};
	STRING_LIST(gui_error_category_enum, gui_error_category_enum_strings, _countof(gui_error_category_enum_strings));

	STRINGS(gui_error_icon_enum)
	{
		"default alert",
		"downloading",
		"paused",
		"uploading",
		"completed"
	};
	STRING_LIST(gui_error_icon_enum, gui_error_icon_enum_strings, _countof(gui_error_icon_enum_strings));

	#define GUI_DIALOG_DESCRIPTION_BLOCK_ID { 0x7C5393A4, 0x94744F38, 0x8CC51E2D, 0x299DFBF4 }
	TAG_STRUCT(
		gui_dialog_description_block,
		"gui_dialog_description_block",
		"gui_dialog_description_block",
		"s_gui_dialog_description_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GUI_DIALOG_DESCRIPTION_BLOCK_ID)
	{
		{ _field_string_id, "dialog name" },
		{ _field_word_flags, "flags", &gui_dialog_flags },
		FIELD_PAD("pad0", 2),
		{ _field_string_id, "title" },
		{ _field_string_id, "message" },
		{ _field_string_id, "first_item" },
		{ _field_string_id, "second_item" },
		{ _field_string_id, "third_item" },
		{ _field_string_id, "fourth_item" },
		{ _field_string_id, "button key" },
		{ _field_short_enum, "default item", &gui_dialog_choice_enum },
		{ _field_short_enum, "b button action", &gui_dialog_b_button_action_enum },
		{ _field_terminator }
	};

	STRINGS(gui_dialog_flags)
	{
		"unused"
	};
	STRING_LIST(gui_dialog_flags, gui_dialog_flags_strings, _countof(gui_dialog_flags_strings));

	STRINGS(gui_dialog_choice_enum)
	{
		"first item",
		"second item",
		"third item",
		"fourth item"
	};
	STRING_LIST(gui_dialog_choice_enum, gui_dialog_choice_enum_strings, _countof(gui_dialog_choice_enum_strings));

	STRINGS(gui_dialog_b_button_action_enum)
	{
		"dismisses dialog",
		"button ignored",
		"first item activates",
		"second item activates",
		"third item activates",
		"fourth item activates"
	};
	STRING_LIST(gui_dialog_b_button_action_enum, gui_dialog_b_button_action_enum_strings, _countof(gui_dialog_b_button_action_enum_strings));

	#define GUI_PORTRAIT_POSE_BLOCK_ID { 0x44F2F85B, 0x26274A15, 0xBDC8AE7C, 0x9A78BCDA }
	TAG_STRUCT(
		gui_portrait_pose_block,
		"gui_portrait_pose_block",
		"gui_portrait_pose_block",
		"s_gui_portrait_pose_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		GUI_PORTRAIT_POSE_BLOCK_ID)
	{
		{ _field_string_id, "pose name" },
		{ _field_string_id, "animation name" },
		{ _field_string_id, "camera view name" },
		{ _field_long_integer, "scenario profile index" },
		{ _field_terminator }
	};

	#define HALF_RGB_LIGHTPROBE_STRUCT_ID { 0x101E5B0B, 0xD7614F00, 0x817C8CE0, 0x91BB5C69 }
	TAG_STRUCT(
		half_rgb_lightprobe_struct,
		"half_rgb_lightprobe_struct",
		"half_rgb_lightprobe_struct",
		"s_half_rgb_lightprobe_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HALF_RGB_LIGHTPROBE_STRUCT_ID)
	{
		{ _field_array, "red sh terms", &half_sh_terms$2 },
		{ _field_array, "green sh terms", &half_sh_terms$2 },
		{ _field_array, "blue sh terms", &half_sh_terms$2 },
		{ _field_short_integer, "analytical visibility" },
		{ _field_terminator }
	};

	#define HALF_SH_TERMS_STRUCT_DEFINITION_ID { 0x20CD467C, 0x4303458B, 0x9980FCD2, 0x2E473035 }
	TAG_STRUCT(
		half_sh_terms_struct_definition,
		"half_sh_terms",
		"half_sh_terms",
		"s_half_sh_terms",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HALF_SH_TERMS_STRUCT_DEFINITION_ID)
	{
		{ _field_short_integer, "coefficient" },
		{ _field_terminator }
	};

	#define HAVOK2_CONVEX_SHAPE_STRUCT_ID { 0x47913D99, 0xBDA04202, 0xC51C913C, 0xECAB9434 }
	TAG_STRUCT(
		havok2_convex_shape_struct,
		"havok2_convex_shape_struct",
		"havok2_convex_shape_struct",
		"s_havok2_convex_shape_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK2_CONVEX_SHAPE_STRUCT_ID)
	{
		{ _field_struct, "base", &havok2_shape_struct },
		{ _field_real, "radius" },
		{ _field_terminator }
	};

	#define HAVOK2_LIST_CHILD_SHAPE_STORAGE_STRUCT_DEFINITION_ID { 0xBC5715BB, 0x2CB4493D, 0x9175BB08, 0x15A82DE6 }
	TAG_STRUCT(
		havok2_list_child_shape_storage_struct_definition,
		"havok2_list_child_shape_storage",
		"havok2_list_child_shape_storage",
		"s_havok2_list_child_shape_storage",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK2_LIST_CHILD_SHAPE_STORAGE_STRUCT_DEFINITION_ID)
	{
		{ _field_struct, "shape reference", &havok_shape_reference_struct },
		{ _field_long_integer, "collision filter" },
		{ _field_terminator }
	};

	#define HAVOK2_LISTS_BLOCK_ID { 0x17C7D29D, 0x4E3C47AA, 0x86F8E6F3, 0x78CD1F23 }
	TAG_STRUCT(
		havok2_lists_block,
		"havok2_lists_block",
		"havok2_lists_block",
		"s_havok2_lists_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK2_LISTS_BLOCK_ID)
	{
		{ _field_struct, "base", &havok2_shape_struct },
		{ _field_long_integer, "QGSYYTGS", _field_id_zero_data },
		{ _field_long_integer, "child shapes size" },
		{ _field_long_integer, "child shapes capacity" },
		{ _field_array, "child shapes storage", &havok2_list_child_shape_storage$2 },
		{ _field_terminator }
	};

	#define HAVOK2_POLYHEDRA_BLOCK_ID { 0xB4733417, 0x61824AC2, 0xAFC84063, 0xDAB19F93 }
	TAG_STRUCT(
		havok2_polyhedra_block,
		"havok2_polyhedra_block",
		"havok2_polyhedra_block",
		"s_havok2_polyhedra_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK2_POLYHEDRA_BLOCK_ID,
		4)
	{
		{ _field_struct, "base", &havok_primitive_struct },
		{ _field_struct, "polyhedron shape", &havok2_convex_shape_struct },
		{ _field_real_vector_3d, "aabb half extents" },
		{ _field_real, "havok w aabb half extents" },
		{ _field_real_vector_3d, "aabb center" },
		{ _field_real, "havok w aabb center" },
		{ _field_long_integer, "QVUFIJ", _field_id_zero_data },
		{ _field_long_integer, "four vectors size" },
		{ _field_long_integer, "four vectors capacity" },
		FIELD_PAD("ZGYFHRV", 4),
		{ _field_array, "four vectors storage", &havok2_rotated_vertices_storage$2 },
		{ _field_long_integer, "num vertices" },
		{ _field_long_integer, "HIZLROMO", _field_id_zero_data },
		{ _field_long_integer, "plane equations size" },
		{ _field_long_integer, "plane equations capacity" },
		{ _field_terminator }
	};

	#define HAVOK2_ROTATED_VERTICES_STORAGE_STRUCT_DEFINITION_ID { 0x31EDBEFE, 0xEA8347E3, 0xA912321B, 0x2145E6BC }
	TAG_STRUCT(
		havok2_rotated_vertices_storage_struct_definition,
		"havok2_rotated_vertices_storage",
		"havok2_rotated_vertices_storage",
		"s_havok2_rotated_vertices_storage",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK2_ROTATED_VERTICES_STORAGE_STRUCT_DEFINITION_ID)
	{
		{ _field_real_vector_3d, "four vectors x" },
		{ _field_real, "havok w four vectors x" },
		{ _field_real_vector_3d, "four vectors y" },
		{ _field_real, "havok w four vectors y" },
		{ _field_real_vector_3d, "four vectors z" },
		{ _field_real, "havok w four vectors z" },
		{ _field_terminator }
	};

	#define HAVOK2_SHAPE_STRUCT_ID { 0xCC42EAA1, 0x9B6A46EB, 0xC0A3AB5E, 0x7120D79C }
	TAG_STRUCT(
		havok2_shape_struct,
		"havok2_shape_struct",
		"havok2_shape_struct",
		"s_havok2_shape_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK2_SHAPE_STRUCT_ID)
	{
		{ _field_long_integer, "field pointer skip", _field_id_zero_data },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		{ _field_long_integer, "user data" },
		{ _field_terminator }
	};

	#define HAVOK_CLEANUP_RESOURCES_BLOCK_ID { 0x1158B5B8, 0xFBFC4D5A, 0xB4862259, 0xCB91EB7B }
	TAG_STRUCT(
		havok_cleanup_resources_block,
		"havok_cleanup_resources_block",
		"havok_cleanup_resources_block",
		"s_havok_cleanup_resources_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK_CLEANUP_RESOURCES_BLOCK_ID)
	{
		{ _field_tag_reference, "object cleanup effect", &effect_group_reference },
		{ _field_terminator }
	};

	#define HAVOK_COLLISION_FILTER_GROUP_BLOCK_ID { 0x6049342A, 0xAB34415C, 0xAF0AB27C, 0x68DABDD9 }
	TAG_STRUCT(
		havok_collision_filter_group_block,
		"havok_collision_filter_group_block",
		"havok_collision_filter_group_block",
		"s_havok_collision_filter_group_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK_COLLISION_FILTER_GROUP_BLOCK_ID)
	{
		{ _field_long_flags, "filter", &collision_filter_enum },
		{ _field_terminator }
	};

	#define HAVOK_COLLISION_FILTER_STRUCT_DEFINITION_ID { 0x509AF768, 0xBE0F4CC5, 0xAAA65F16, 0xBEAB01E6 }
	TAG_STRUCT(
		havok_collision_filter_struct_definition,
		"havok_collision_filter_struct_definition",
		"havok_collision_filter_struct_definition",
		"s_havok_collision_filter_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK_COLLISION_FILTER_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("specify what each group collides with", nullptr),
		{ _field_block, "groups", &havok_collision_filter_group_block_block },
		FIELD_PAD("alignment_pad", 4),
		{ _field_struct, "group filter", &havok_group_filter_filter_struct },
		{ _field_terminator }
	};

	#define HAVOK_CONVEX_SHAPE_STRUCT_ID { 0x65BCED0A, 0xC7424242, 0x98E46503, 0xE2E0DDA }
	TAG_STRUCT(
		havok_convex_shape_struct,
		"havok_convex_shape_struct",
		"havok_convex_shape_struct",
		"s_havok_convex_shape_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK_CONVEX_SHAPE_STRUCT_ID)
	{
		{ _field_struct, "base", &havok_shape_struct },
		{ _field_real, "radius" },
		{ _field_terminator }
	};

	#define HAVOK_CONVEX_SHAPE_STRUCT_2010_2_ID { 0x47913899, 0x5D904202, 0x851C913C, 0xE4EB9434 }
	TAG_STRUCT(
		havok_convex_shape_struct_2010_2,
		"havok_convex_shape_struct_2010_2",
		"havok_convex_shape_struct_2010_2",
		"s_havok_convex_shape_struct_2010_2",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK_CONVEX_SHAPE_STRUCT_2010_2_ID)
	{
		{ _field_struct, "base", &havok_shape_struct_2010_2 },
		{ _field_real, "radius" },
		{ _field_terminator }
	};

	#define HAVOK_CONVEX_TRANSFORM_SHAPE_STRUCT_ID { 0x13B806D5, 0x795947E2, 0xBB5E8C84, 0x747D768C }
	TAG_STRUCT(
		havok_convex_transform_shape_struct,
		"havok_convex_transform_shape_struct",
		"havok_convex_transform_shape_struct",
		"s_havok_convex_transform_shape_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK_CONVEX_TRANSFORM_SHAPE_STRUCT_ID)
	{
		{ _field_struct, "convex", &havok_convex_shape_struct },
		{ _field_long_integer, "field pointer skip", _field_id_zero_data },
		{ _field_struct, "havok shape reference struct", &havok_shape_reference_struct },
		{ _field_long_integer, "child shape size" },
		{ _field_real_vector_3d, "rotation i" },
		{ _field_real, "havok w rotation i" },
		{ _field_real_vector_3d, "rotation j" },
		{ _field_real, "havok w rotation j" },
		{ _field_real_vector_3d, "rotation k" },
		{ _field_real, "havok w rotation k" },
		{ _field_real_vector_3d, "translation" },
		{ _field_real, "havok w translation" },
		{ _field_terminator }
	};

	#define HAVOK_CONVEX_TRANSLATE_SHAPE_STRUCT_ID { 0xCB9F81C2, 0x7F4B47B5, 0x8FE0AB7C, 0x8BB17123 }
	TAG_STRUCT(
		havok_convex_translate_shape_struct,
		"havok_convex_translate_shape_struct",
		"havok_convex_translate_shape_struct",
		"s_havok_convex_translate_shape_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK_CONVEX_TRANSLATE_SHAPE_STRUCT_ID)
	{
		{ _field_struct, "convex", &havok_convex_shape_struct },
		{ _field_long_integer, "field pointer skip", _field_id_zero_data },
		{ _field_struct, "havok shape reference struct", &havok_shape_reference_struct },
		{ _field_long_integer, "child shape size" },
		{ _field_real_vector_3d, "translation" },
		{ _field_real, "havok w translation" },
		{ _field_terminator }
	};

	#define HAVOK_GROUP_FILTER_FILTER_STRUCT_ID { 0x14C2A328, 0xA8CD64B0, 0xCDFB8BE7, 0xDBAF80A0 }
	TAG_STRUCT(
		havok_group_filter_filter_struct,
		"havok_group_filter_filter_struct",
		"havok_group_filter_filter_struct",
		"s_havok_group_filter_filter_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK_GROUP_FILTER_FILTER_STRUCT_ID)
	{
		{ _field_long_integer, "hkReferencedObject vtable", _field_id_zero_data },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		{ _field_long_integer, "hkpCollidableCollidableFilter vtable", _field_id_zero_data },
		{ _field_long_integer, "hkpShapeCollectionFilter vtable", _field_id_zero_data },
		{ _field_long_integer, "hkpRayShapeCollectionFilter vtable", _field_id_zero_data },
		{ _field_long_integer, "hkpRayCollidableFilter vtable", _field_id_zero_data },
		FIELD_PAD("m_prepad[2]", 8),
		{ _field_long_integer, "m_type" },
		FIELD_PAD("m_postpad[3]", 12),
		{ _field_long_integer, "m_nextFreeSystemGroup" },
		{ _field_long_integer, "m_collisionLookupTable00" },
		{ _field_long_integer, "m_collisionLookupTable01" },
		{ _field_long_integer, "m_collisionLookupTable02" },
		{ _field_long_integer, "m_collisionLookupTable03" },
		{ _field_long_integer, "m_collisionLookupTable04" },
		{ _field_long_integer, "m_collisionLookupTable05" },
		{ _field_long_integer, "m_collisionLookupTable06" },
		{ _field_long_integer, "m_collisionLookupTable07" },
		{ _field_long_integer, "m_collisionLookupTable08" },
		{ _field_long_integer, "m_collisionLookupTable09" },
		{ _field_long_integer, "m_collisionLookupTable10" },
		{ _field_long_integer, "m_collisionLookupTable11" },
		{ _field_long_integer, "m_collisionLookupTable12" },
		{ _field_long_integer, "m_collisionLookupTable13" },
		{ _field_long_integer, "m_collisionLookupTable14" },
		{ _field_long_integer, "m_collisionLookupTable15" },
		{ _field_long_integer, "m_collisionLookupTable16" },
		{ _field_long_integer, "m_collisionLookupTable17" },
		{ _field_long_integer, "m_collisionLookupTable18" },
		{ _field_long_integer, "m_collisionLookupTable19" },
		{ _field_long_integer, "m_collisionLookupTable20" },
		{ _field_long_integer, "m_collisionLookupTable21" },
		{ _field_long_integer, "m_collisionLookupTable22" },
		{ _field_long_integer, "m_collisionLookupTable23" },
		{ _field_long_integer, "m_collisionLookupTable24" },
		{ _field_long_integer, "m_collisionLookupTable25" },
		{ _field_long_integer, "m_collisionLookupTable26" },
		{ _field_long_integer, "m_collisionLookupTable27" },
		{ _field_long_integer, "m_collisionLookupTable28" },
		{ _field_long_integer, "m_collisionLookupTable29" },
		{ _field_long_integer, "m_collisionLookupTable30" },
		{ _field_long_integer, "m_collisionLookupTable31" },
		FIELD_PAD("16 byte align pad", 12),
		{ _field_real_vector_3d, "m_pad256[0]" },
		{ _field_real, "havok w m_pad256[0]" },
		{ _field_real_vector_3d, "m_pad256[1]" },
		{ _field_real, "havok w m_pad256[1]" },
		{ _field_real_vector_3d, "m_pad256[2]" },
		{ _field_real, "havok w m_pad256[2]" },
		{ _field_real_vector_3d, "m_pad256[3]" },
		{ _field_real, "havok w m_pad256[3]" },
		{ _field_terminator }
	};

	#define HAVOK_PRIMITIVE_STRUCT_ID { 0xEA25BEF8, 0x1384DFD, 0x886C4497, 0x7BE57757 }
	TAG_STRUCT(
		havok_primitive_struct,
		"havok_primitive_struct",
		"havok_primitive_struct",
		"s_havok_primitive_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK_PRIMITIVE_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_char_block_index, "material", &materials_block_block },
		{ _field_byte_flags, "material flags", &physics_material_flags },
		{ _field_short_integer, "runtime material type" },
		{ _field_real, "relative mass scale" },
		{ _field_real_fraction, "friction" },
		{ _field_real_fraction, "restitution" },
		{ _field_real, "volume " },
		{ _field_real, "mass" },
		{ _field_short_integer, "mass distribution index" },
		{ _field_char_block_index, "phantom", &phantoms_block_block },
		FIELD_EXPLANATION("collision group override", "This value overrides the default group, model, and rigid body."),
		{ _field_char_enum, "proxy collision group", &physics_material_proxy_collision_groups },
		{ _field_terminator }
	};

	STRINGS(physics_material_flags)
	{
		"supresses effects",
		"force enable collision with player#enables collision with the player regardless of the collision group"
	};
	STRING_LIST(physics_material_flags, physics_material_flags_strings, _countof(physics_material_flags_strings));

	STRINGS(physics_material_proxy_collision_groups)
	{
		"NONE",
		"small crate",
		"crate",
		"huge crate",
		"item",
		"projectile",
		"biped",
		"machine",
		"early mover machine",
		"only collide with environment",
		"tech art custom",
		"small expensive plant",
		"ignore environment",
		"huge vehicle",
		"ragdoll",
		"super collidable ragdoll",
		"item blocker",
		"user00",
		"user01",
		"everything",
		"creatures"
	};
	STRING_LIST(physics_material_proxy_collision_groups, physics_material_proxy_collision_groups_strings, _countof(physics_material_proxy_collision_groups_strings));

	#define HAVOK_SHAPE_COLLECTION_STRUCT_2010_2_ID { 0xDD6DCE26, 0x88D54E3D, 0x87B805A2, 0xD7E20D10 }
	TAG_STRUCT(
		havok_shape_collection_struct_2010_2,
		"havok_shape_collection_struct_2010_2",
		"havok_shape_collection_struct_2010_2",
		"s_havok_shape_collection_struct_2010_2",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK_SHAPE_COLLECTION_STRUCT_2010_2_ID)
	{
		{ _field_struct, "base", &havok_shape_struct_2010_2 },
		{ _field_long_integer, "field pointer skip", _field_id_zero_data },
		{ _field_char_integer, "disable welding" },
		{ _field_char_integer, "collection type" },
		FIELD_PAD("VDVAPBSS", 2),
		{ _field_terminator }
	};

	#define HAVOK_SHAPE_REFERENCE_STRUCT_ID { 0x573EF14C, 0x91AC4F07, 0xA1702B47, 0x7875B0E0 }
	TAG_STRUCT(
		havok_shape_reference_struct,
		"havok_shape_reference_struct",
		"havok_shape_reference_struct",
		"s_havok_shape_reference_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK_SHAPE_REFERENCE_STRUCT_ID)
	{
		{ _field_short_enum, "shape type", &shape_enum },
		{ _field_short_block_index_custom_search, "shape", &shape_search },
		{ _field_terminator }
	};

	STRINGS(shape_enum)
	{
		"sphere",
		"pill",
		"box",
		"triangle",
		"polyhedron",
		"multi sphere",
		"unused 0",
		"unused 1",
		"unused 2",
		"unused 3",
		"unused 4",
		"unused 5",
		"unused 6",
		"unused 7",
		"list",
		"mopp"
	};
	STRING_LIST(shape_enum, shape_enum_strings, _countof(shape_enum_strings));

	#define HAVOK_SHAPE_STRUCT_ID { 0x2957D592, 0x3C7D4521, 0x830D6134, 0x29B7361B }
	TAG_STRUCT(
		havok_shape_struct,
		"havok_shape_struct",
		"havok_shape_struct",
		"s_havok_shape_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK_SHAPE_STRUCT_ID)
	{
		{ _field_long_integer, "field pointer skip", _field_id_zero_data },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		{ _field_char_integer, "type" },
		{ _field_char_integer, "dispatchType" },
		{ _field_char_integer, "bitsPerKey" },
		{ _field_char_integer, "codecType" },
		{ _field_long_integer, "user data" },
		{ _field_terminator }
	};

	#define HAVOK_SHAPE_STRUCT_2010_2_ID { 0xCC42E7A1, 0x996A46EB, 0xA0A3AB5E, 0x7120F79C }
	TAG_STRUCT(
		havok_shape_struct_2010_2,
		"havok_shape_struct_2010_2",
		"havok_shape_struct_2010_2",
		"s_havok_shape_struct_2010_2",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK_SHAPE_STRUCT_2010_2_ID)
	{
		{ _field_long_integer, "field pointer skip", _field_id_zero_data },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		{ _field_long_integer, "user data" },
		{ _field_long_integer, "type" },
		{ _field_terminator }
	};

	#define HAVOK_VEHICLE_PHYSICS_STRUCT_ID { 0xF61F67DF, 0xEC364DFE, 0x9AB565F7, 0x2D6F7EA8 }
	TAG_STRUCT(
		havok_vehicle_physics_struct,
		"havok_vehicle_physics_struct",
		"havok_vehicle_physics_struct",
		"s_havok_vehicle_physics_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HAVOK_VEHICLE_PHYSICS_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &havok_vehicle_physics_definition_flags },
		FIELD_IFP_BEGIN(),
		{ _field_real, "ground friction", "this sucks.  for friction based vehicles only" },
		{ _field_real, "ground depth", "this sucks.  for friction based vehicles only" },
		{ _field_real, "ground damp factor", "this sucks.  for friction based vehicles only" },
		{ _field_real, "ground moving friction", "this sucks.  for friction based vehicles only" },
		{ _field_real, "ground maximum slope 0", "degrees 0-90" },
		{ _field_real, "ground maximum slope 1", "degrees 0-90.  and greater than slope 0" },
		{ _field_real, "maximum normal force contribution", "0 defaults to 3, this prevents the physics from becoming unstable when hucked against a surface" },
		{ _field_real, "anti_gravity_bank_lift", "lift per WU." },
		{ _field_real, "steering_bank_reaction_scale", "how quickly we bank when we steer " },
		{ _field_real, "gravity scale", "value of 0 defaults to 1.  .5 is half gravity" },
		FIELD_IFP_END(),
		{ _field_short_enum, "maximum update period ticks", "ticks. 0 is default of 2", &physics_update_period_enum },
		{ _field_short_enum, "maximum remote update period ticks", "ticks. when controlled by an ai or remote player. 0 defaults to 4", &physics_update_period_enum },
		{ _field_long_integer, "iteration count", "0 defaults to 1.  Number of iterations per frame of physics" },
		{ _field_long_integer, "suspension count" },
		{ _field_block, "anti gravity points", &anti_gravity_point_definition_block_block },
		{ _field_block, "friction points", &friction_point_definition_block_block },
		{ _field_struct, "boat physics", &boat_physics_definition_struct },
		{ _field_terminator }
	};

	STRINGS(havok_vehicle_physics_definition_flags)
	{
		"has suspension*!",
		"friction points test only environment"
	};
	STRING_LIST(havok_vehicle_physics_definition_flags, havok_vehicle_physics_definition_flags_strings, _countof(havok_vehicle_physics_definition_flags_strings));

	STRINGS(physics_update_period_enum)
	{
		"defaults (every other frame)",
		"every frame",
		"every other frame",
		"every 3rd frame",
		"every 4th frame",
		"every 5th frame",
		"every 6th frame",
		"every 7th frame",
		"every 8th frame"
	};
	STRING_LIST(physics_update_period_enum, physics_update_period_enum_strings, _countof(physics_update_period_enum_strings));

	#define HINGE_CONSTRAINTS_BLOCK_ID { 0xAF7DC3D5, 0x530140B4, 0x91B125D8, 0x62093ACB }
	TAG_STRUCT(
		hinge_constraints_block,
		"hinge_constraints_block",
		"hinge_constraints_block",
		"s_hinge_constraints_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HINGE_CONSTRAINTS_BLOCK_ID)
	{
		{ _field_struct, "constraint bodies", &constraint_bodies_struct },
		FIELD_PAD("JENFOXHY", 4),
		{ _field_terminator }
	};

	#define HINT_OBJECT_ID_BLOCK_ID { 0x9B758221, 0x4AB243C2, 0x9A3B5FE5, 0xA09A93E0 }
	TAG_STRUCT(
		hint_object_id_block,
		"hint_object_id_block",
		"hint_object_id_block",
		"s_hint_object_id_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HINT_OBJECT_ID_BLOCK_ID)
	{
		{ _field_struct, "object ID", &scenario_object_id_struct },
		{ _field_terminator }
	};

	#define HINT_VERTEX_BLOCK_ID { 0xD1BE6D07, 0xA78F4322, 0x993136EC, 0x1C79F419 }
	TAG_STRUCT(
		hint_vertex_block,
		"hint_vertex_block",
		"hint_vertex_block",
		"s_hint_vertex_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HINT_VERTEX_BLOCK_ID)
	{
		{ _field_real_point_3d, "point" },
		{ _field_terminator }
	};

	#define HLSL_INCLUDE_STRUCT_DEFINITION_ID { 0x7481D09D, 0x2F6D4C89, 0xB397EADA, 0xCEE7E3AE }
	TAG_STRUCT(
		hlsl_include_struct_definition,
		"hlsl_include_struct_definition",
		"hlsl_include_struct_definition",
		"s_hlsl_include_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HLSL_INCLUDE_STRUCT_DEFINITION_ID)
	{
		{ _field_data, "include file", &code_block },
		{ _field_terminator }
	};

	#define HOLOGRAMLIGHT_ID { 0x3906DA32, 0xFC3C45A6, 0xADEDC284, 0x1B292C95 }
	TAG_STRUCT(
		hologramlight,
		"hologramLight",
		"hologramLight",
		"s_hologramlight",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HOLOGRAMLIGHT_ID)
	{
		FIELD_CUSTOM("Hologram Light", _field_id_hologram_light),
		FIELD_CUSTOM("Direction", _tag_field_custom_type_slider),
		{ _field_real, "Direction", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Front-Back", _tag_field_custom_type_slider),
		{ _field_real, "Front-Back", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Intensity", _tag_field_custom_type_slider),
		{ _field_real, "Intensity", _tag_field_custom_type_slider },
		{ _field_real, "Intensity Input" },
		{ _field_real, "Forward Input" },
		{ _field_real, "Right Input" },
		{ _field_real, "Up Input" },
		{ _field_terminator }
	};

	#define HOLOGRAMLIGHTFUNCTIONS_ID { 0x8A259276, 0xAA5542A4, 0x8927B452, 0xA50BEB1 }
	TAG_STRUCT(
		hologramlightfunctions,
		"hologramLightFunctions",
		"hologramLightFunctions",
		"s_hologramlightfunctions",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HOLOGRAMLIGHTFUNCTIONS_ID)
	{
		{ _field_string_id, "Intensity" },
		{ _field_string_id, "Forward" },
		{ _field_string_id, "Right" },
		{ _field_string_id, "Up" },
		{ _field_terminator }
	};

	#define HOLOGRAMLIGHTINGBLOCK_STRUCT_ID { 0xE3E332CA, 0xA5E44DFC, 0x81E9FCB6, 0x6198694A }
	TAG_STRUCT(
		hologramlightingblock_struct,
		"hologramLightingBlock_struct",
		"hologramLightingBlock_struct",
		"s_hologramlightingblock_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HOLOGRAMLIGHTINGBLOCK_STRUCT_ID)
	{
		FIELD_GROUP_BEGIN("HOLOGRAM"),
		FIELD_CUSTOM("Intensity", _tag_field_custom_type_slider),
		{ _field_real, "Intensity", _tag_field_custom_type_slider },
		{ _field_real, "Intensity Input" },
		{ _field_char_enum, "Transparency Mode", &hologramtransparencymode },
		FIELD_PAD("PADDING1", 3),
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("KEY LIGHT"),
		{ _field_struct, "Key Light", &hologramlight },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("FILL LIGHT"),
		{ _field_struct, "Fill Light", &hologramlight },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("RIM LIGHT"),
		{ _field_struct, "Rim Light", &hologramlight },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(hologramtransparencymode)
	{
		"cheap",
		"expensive"
	};
	STRING_LIST(hologramtransparencymode, hologramtransparencymode_strings, _countof(hologramtransparencymode_strings));

	#define HOLOGRAMLIGHTINGGLOBALSBLOCK_ID { 0x8E264B3B, 0x9FD14745, 0x83BCD78E, 0x9FBB73AC }
	TAG_STRUCT(
		hologramlightingglobalsblock,
		"hologramLightingGlobalsBlock",
		"hologramLightingGlobalsBlock",
		"s_hologramlightingglobalsblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HOLOGRAMLIGHTINGGLOBALSBLOCK_ID)
	{
		FIELD_GROUP_BEGIN("HOLOGRAM FUNCTIONS"),
		{ _field_string_id, "Intensity" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("KEY LIGHT FUNCTIONS"),
		{ _field_struct, "Key Light Functions", &hologramlightfunctions },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("FILL LIGHT FUNCTIONS"),
		{ _field_struct, "Fill Light Functions", &hologramlightfunctions },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("RIM LIGHT FUNCTIONS"),
		{ _field_struct, "Rim Light Functions", &hologramlightfunctions },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define HS_GLOBALS_BLOCK_ID { 0x593352A, 0x7FDE40C1, 0x9FA69786, 0x35DEEEA1 }
	TAG_STRUCT(
		hs_globals_block,
		"hs_globals_block",
		"hs_globals_block",
		"s_hs_globals_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HS_GLOBALS_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_enum, "type", &hs_types_enum },
		{ _field_long_integer, "initialization expression index" },
		{ _field_terminator }
	};

	#define HS_REFERENCES_BLOCK_ID { 0xD5081A5A, 0xAAAE49B0, 0xA3DD5C21, 0x984C1A8B }
	TAG_STRUCT(
		hs_references_block,
		"hs_references_block",
		"hs_references_block",
		"s_hs_references_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HS_REFERENCES_BLOCK_ID)
	{
		{ _field_tag_reference, "reference", &_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference$2, INVALID_TAG);

	#define HS_SCRIPT_DATA_STRUCT_ID { 0xD87FEF80, 0x7DE47C3, 0x9785FC28, 0x8E53643F }
	TAG_STRUCT(
		hs_script_data_struct,
		"hs_script_data_struct",
		"hs_script_data_struct",
		"s_hs_script_data_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HS_SCRIPT_DATA_STRUCT_ID)
	{
		{ _field_block, "source file references", &hs_source_reference_block_block },
		{ _field_block, "external source references", &hs_source_reference_block_block },
		{ _field_tag_reference, "compiled script", &script_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(script_group_reference, SCRIPT_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR);

	#define HS_SCRIPT_PARAMETERS_BLOCK_ID { 0x9E0B1B9B, 0xC4DF453F, 0x9C5A8529, 0xFDAB8B17 }
	TAG_STRUCT(
		hs_script_parameters_block,
		"hs_script_parameters_block",
		"hs_script_parameters_block",
		"s_hs_script_parameters_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HS_SCRIPT_PARAMETERS_BLOCK_ID)
	{
		{ _field_string, "name" },
		{ _field_long_enum, "return type", &hs_types_enum },
		{ _field_terminator }
	};

	#define HS_SCRIPTS_BLOCK_ID { 0x743D2F82, 0xC7BE47E3, 0xA33C2E37, 0x4C93AE2F }
	TAG_STRUCT(
		hs_scripts_block,
		"hs_scripts_block",
		"hs_scripts_block",
		"s_hs_scripts_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HS_SCRIPTS_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_enum, "script type", &hs_script_types_enum },
		{ _field_word_flags, "script flags", &scriptflagsenumdefinition },
		{ _field_long_enum, "return type", &hs_types_enum },
		{ _field_long_integer, "root expression index" },
		{ _field_long_integer, "locals stack space" },
		{ _field_block, "parameters", &hs_script_parameters_block_block },
		{ _field_terminator }
	};

	STRINGS(hs_script_types_enum)
	{
		"startup",
		"dormant",
		"continuous",
		"static",
		"command_script",
		"stub"
	};
	STRING_LIST(hs_script_types_enum, hs_script_types_enum_strings, _countof(hs_script_types_enum_strings));

	STRINGS(scriptflagsenumdefinition)
	{
		"instanced",
		"cinema"
	};
	STRING_LIST(scriptflagsenumdefinition, scriptflagsenumdefinition_strings, _countof(scriptflagsenumdefinition_strings));

	#define HS_SOURCE_FILES_BLOCK_ID { 0xCB061583, 0x78C4130, 0xA21DDAC3, 0x5C721332 }
	TAG_STRUCT(
		hs_source_files_block,
		"hs_source_files_block",
		"hs_source_files_block",
		"s_hs_source_files_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HS_SOURCE_FILES_BLOCK_ID)
	{
		{ _field_string, "name" },
		{ _field_data, "source", &hs_source_data_definition },
		{ _field_long_flags, "flags", &hs_source_file_flags },
		{ _field_terminator }
	};

	STRINGS(hs_source_file_flags)
	{
		"generated at runtime",
		"ai fragments",
		"ai performances"
	};
	STRING_LIST(hs_source_file_flags, hs_source_file_flags_strings, _countof(hs_source_file_flags_strings));

	#define HS_SOURCE_REFERENCE_BLOCK_ID { 0x8CF36B3A, 0x8C224FCC, 0xA38A9B83, 0xCEC80ED2 }
	TAG_STRUCT(
		hs_source_reference_block,
		"hs_source_reference_block",
		"hs_source_reference_block",
		"s_hs_source_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HS_SOURCE_REFERENCE_BLOCK_ID)
	{
		{ _field_tag_reference, "reference", &hsc_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(hsc_group_reference, HSC_TAG);

	#define HS_SYNTAX_DATUM_BLOCK_ID { 0x3B57A0DC, 0x8E8147C2, 0xADEB0323, 0x1D9501C3 }
	TAG_STRUCT(
		hs_syntax_datum_block,
		"hs_syntax_datum_block",
		"hs_syntax_datum_block",
		"s_hs_syntax_datum_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HS_SYNTAX_DATUM_BLOCK_ID)
	{
		{ _field_short_integer, "datum header" },
		{ _field_short_integer, "script index/function index/constant type union" },
		{ _field_long_integer, "next node" },
		{ _field_long_integer, "source data" },
		{ _field_long_integer, "source offset location" },
		{ _field_long_enum, "node expression type", &hs_types_enum },
		{ _field_short_integer, "flags" },
		{ _field_short_integer, "source file index" },
		{ _field_long_integer, "source file offset" },
		{ _field_terminator }
	};

	#define HS_UNIT_SEAT_BLOCK_ID { 0x605A618D, 0x49FA4B10, 0x9715B7D2, 0xCC2A0947 }
	TAG_STRUCT(
		hs_unit_seat_block,
		"hs_unit_seat_block",
		"hs_unit_seat_block",
		"s_hs_unit_seat_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HS_UNIT_SEAT_BLOCK_ID)
	{
		{ _field_long_integer, "unit definition tag index" },
		{ _field_long_integer, "unit seats" },
		{ _field_long_integer, "unit seats2" },
		{ _field_terminator }
	};

	#define HUD_UNIT_SOUND_BLOCK_ID { 0xC7767088, 0x7D904BD8, 0x8174AD02, 0x4421D182 }
	TAG_STRUCT(
		hud_unit_sound_block,
		"hud_unit_sound_block",
		"hud_unit_sound_block",
		"s_hud_unit_sound_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HUD_UNIT_SOUND_BLOCK_ID)
	{
		{ _field_block, "Hud audio cues", &hud_unit_sound_cue_block_block },
		FIELD_GROUP_BEGIN("health thresholds"),
		{ _field_real, "health minor" },
		{ _field_real, "health major" },
		{ _field_real, "health critical" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("shield thresholds"),
		{ _field_real, "shield minor" },
		{ _field_real, "shield major" },
		{ _field_real, "shield critical" },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define HUD_UNIT_SOUND_CUE_BLOCK_ID { 0xDCDD571F, 0xE87C4C5F, 0xB5FB4306, 0x32243B3 }
	TAG_STRUCT(
		hud_unit_sound_cue_block,
		"hud_unit_sound_cue_block",
		"hud_unit_sound_cue_block",
		"s_hud_unit_sound_cue_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HUD_UNIT_SOUND_CUE_BLOCK_ID)
	{
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_looping_group_sound_group_reference },
		{ _field_long_flags, "latched to", &hud_sound_cue_flags },
		{ _field_real, "scale" },
		{ _field_terminator }
	};

	STRINGS(hud_sound_cue_flags)
	{
		"health recharging",
		"health minor damaged",
		"health major damaged",
		"health critical damaged",
		"health minor",
		"health major",
		"health critical",
		"shield recharging",
		"shield minor damaged",
		"shield major damaged",
		"shield critical damaged",
		"shield minor",
		"shield major",
		"shield critical",
		"player tracked",
		"player locked"
	};
	STRING_LIST(hud_sound_cue_flags, hud_sound_cue_flags_strings, _countof(hud_sound_cue_flags_strings));

	#define HUMAN_JEEP_BLOCK_ID { 0xE8B7F68B, 0x63C644C7, 0xBE98A235, 0x1AD78551 }
	TAG_STRUCT(
		human_jeep_block,
		"human_jeep_block",
		"human_jeep_block",
		"s_human_jeep_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HUMAN_JEEP_BLOCK_ID)
	{
		{ _field_struct, "steering control", &vehicle_steering_control_struct },
		{ _field_struct, "turning control", &vehicle_turning_control_struct },
		{ _field_struct, "engine", &global_vehicle_engine_struct },
		{ _field_block, "boat engine", &boat_engine_definition_block_block },
		FIELD_EXPLANATION("wheel circumferance", nullptr),
		{ _field_real, "wheel circumferance" },
		{ _field_real, "gravity adjust", "0-1 fraction by which we scale gravity that is not along the ground plane" },
		{ _field_real, "antiroll torque factor", "how much torque should be applied to prevent a vehicle from rolling. Default should be 0.0, 1.0 is a good value for making it hard to roll." },
		{ _field_terminator }
	};

	#define HUMAN_PLANE_BLOCK_ID { 0x3F025A0A, 0x7D8B4893, 0xBEE5EAF1, 0x42591680 }
	TAG_STRUCT(
		human_plane_block,
		"human_plane_block",
		"human_plane_block",
		"s_human_plane_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HUMAN_PLANE_BLOCK_ID)
	{
		FIELD_EXPLANATION("velocity control variables", nullptr),
		{ _field_real, "maximum forward speed" },
		{ _field_real, "maximum reverse speed" },
		{ _field_real, "speed acceleration" },
		{ _field_real, "speed deceleration" },
		{ _field_real, "speed accel against direction", "acceleration when trying to throttle against current speed direction" },
		{ _field_real, "maximum forward speed during boost" },
		{ _field_real, "maximum left slide" },
		{ _field_real, "maximum right slide" },
		{ _field_real, "slide acceleration" },
		{ _field_real, "slide deceleration" },
		{ _field_real, "slide accel against direction", "acceleration when trying to throttle against current slide direction" },
		{ _field_real, "maximum slide speed during boost" },
		{ _field_real, "maximum up rise" },
		{ _field_real, "maximum down rise" },
		{ _field_real, "rise acceleration" },
		{ _field_real, "rise deceleration" },
		{ _field_real, "rise accel against direction", "acceleration when trying to throttle against current rise direction" },
		{ _field_real, "maximum rise speed during boost" },
		FIELD_EXPLANATION("human plane tuning variables", nullptr),
		{ _field_real, "flying torque scale", "big vehicles need to scale this down.  0 defaults to 1, which is generally a good value." },
		{ _field_real, "air friction deceleration", "human plane physics only. 0 is nothing.  1 is like thowing the engine to full reverse" },
		{ _field_real, "thrust scale", "human plane physics only. 0 is default (1)" },
		{ _field_real, "turn rate scale when boosting", "this was originally added for the sentinel enforce, but I could see other uses. 0 defaults to 1" },
		{ _field_real, "maximum roll", "0 defaults to 90 degrees" },
		{ _field_struct, "steering animation", &steering_animation_struct },
		{ _field_terminator }
	};

	#define HUMAN_TANK_STRUCT_ID { 0x7AD171CF, 0x889B48FF, 0x9B3677D4, 0xF2E74E3B }
	TAG_STRUCT(
		human_tank_struct,
		"human_tank_struct",
		"human_tank_struct",
		"s_human_tank_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		HUMAN_TANK_STRUCT_ID)
	{
		{ _field_angle, "forward arc", "outside of this arc the vehicle reverse direciton, around 110 degrees seems to be nice..." },
		{ _field_angle, "perpendicular forward arc", "this is the value of forward arc when turned sideways.  We interpolate from forward arc to this value when camera becomes perpendicular to the vehicle" },
		{ _field_real, "flip window", "seconds" },
		{ _field_real, "pegged fraction", "0-1" },
		{ _field_real, "forward turn scale", "think of this as oversteer" },
		{ _field_real, "reverse turn scale", "think of this as oversteer" },
		FIELD_EXPLANATION("forward differential", "how quickly the differential reaches it\'s target and what the ratio is"),
		{ _field_real, "maximum left differential" },
		{ _field_real, "maximum right differential" },
		{ _field_real, "differential acceleration" },
		{ _field_real, "differential deceleration" },
		FIELD_EXPLANATION("reverse differential", "how quickly the differential reaches it\'s target and what the ratio is"),
		{ _field_real, "maximum left reverse differential" },
		{ _field_real, "maximum right reverse differential" },
		{ _field_real, "differential reverse acceleration" },
		{ _field_real, "differential reverse deceleration" },
		{ _field_struct, "engine", &global_vehicle_engine_struct },
		FIELD_EXPLANATION("wheel circumferance", nullptr),
		{ _field_real, "wheel circumferance" },
		{ _field_real, "gravity adjust", "0-1 fraction by which we scale gravity that is not along the ground plane" },
		FIELD_EXPLANATION("New Tank Controls", nullptr),
		{ _field_byte_flags, "control flags", &tank_flags },
		FIELD_PAD("pad", 3),
		{ _field_real, "at rest forward angle(purple)" },
		{ _field_real, "at rest reverse angle(violet)" },
		{ _field_real, "at rest side on reverse angle closest to front(green)", "first angle starting arc in which the control will cause the tank to reverse while at rest and facing side on" },
		{ _field_real, "at rest side on reverse angle furthest from front(blue)", "second angle ending arc in which the control will cause the tank to reverse while at rest and facing side on" },
		{ _field_real, "at rest facing forward reverse angle(yellow)", "angle forming arc in which the control will cause the tank to reverse while at rest and facing forward" },
		{ _field_real, "at rest facing backward reverse angle(pink)", "#angle forming arc in which the control will cause the tank to reverse while at rest and facing backwards" },
		{ _field_real, "in motion opposing direction angle", "when in motion the angle in which the control must be to start moving in the opposite direction" },
		{ _field_real, "in motion speed", "the speed a tank must reach before we consider it in motion, changing the control mode" },
		{ _field_terminator }
	};

	STRINGS(tank_flags)
	{
		"Enable New Control",
		"Use Linear Velocity#Used to decide if we use linear velocity to calculate if we are in motion",
		"Use Angular Velocity#Used to decide if we use angular velocity to calculate if we are in motion"
	};
	STRING_LIST(tank_flags, tank_flags_strings, _countof(tank_flags_strings));

	#define IMPORT_ANIMATION_EVENT_BLOCK_ID { 0x2AA3BA59, 0xA0014A1F, 0x8DEF04DD, 0x745D9057 }
	TAG_STRUCT(
		import_animation_event_block,
		"import_animation_event_block",
		"import_animation_event_block",
		"s_import_animation_event_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		IMPORT_ANIMATION_EVENT_BLOCK_ID)
	{
		{ _field_string_id, "animation name" },
		{ _field_long_integer, "animation frame count" },
		{ _field_block, "animation events", &import_frame_event_block_block },
		{ _field_block, "sound events", &animation_sound_event_block_extended_block },
		{ _field_block, "effect events", &animation_effects_event_block_extended_block },
		{ _field_block, "dialogue events", &animation_dialogue_event_block_extended_block },
		{ _field_block, "script events", &animation_script_event_block_extended_block },
		{ _field_terminator }
	};

	#define IMPORT_FRAME_EVENT_BLOCK_ID { 0xAB6DDD39, 0xFFC7421B, 0xBCB9FA2C, 0xCBA52259 }
	TAG_STRUCT(
		import_frame_event_block,
		"import_frame_event_block",
		"import_frame_event_block",
		"s_import_frame_event_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		IMPORT_FRAME_EVENT_BLOCK_ID)
	{
		{ _field_string_id, "event name" },
		{ _field_string_id, "animation name" },
		{ _field_short_integer, "frame" },
		{ _field_short_integer, "frame offset" },
		{ _field_short_enum, "type", &frame_event_type_new },
		FIELD_PAD("pad", 2),
		{ _field_long_integer, "unique ID", "(Do not change this)" },
		{ _field_terminator }
	};

	#define IMPOSTER_MODE_NODE_BLOCK_ID { 0xAA9DAC5D, 0x8B574A67, 0xA94FD4D9, 0xE2D76CB1 }
	TAG_STRUCT(
		imposter_mode_node_block,
		"imposter_mode_node_block",
		"imposter_mode_node_block",
		"s_imposter_mode_node_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		IMPOSTER_MODE_NODE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_integer, "base node index" },
		FIELD_PAD("WAXI", 2),
		{ _field_terminator }
	};

	#define IMPOSTER_MODEL_STRUCT_DEFINITION_ID { 0x2A12A29F, 0xCF1C431E, 0x9FA1D5D2, 0xB805F111 }
	TAG_STRUCT(
		imposter_model_struct_definition,
		"imposter_model_struct_definition",
		"imposter_model_struct_definition",
		"s_imposter_model_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		IMPOSTER_MODEL_STRUCT_DEFINITION_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_integer, "quality" },
		FIELD_PAD("NBOML", 2),
		{ _field_real, "brightness adjustment" },
		{ _field_block, "node maps", &imposter_mode_node_block_block },
		{ _field_block, "regions", &render_model_region_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		FIELD_GROUP_BEGIN("render geometry"),
		{ _field_struct, "geometry", &global_render_geometry_struct },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define INCIDENT_ACCUMULATOR_BLOCK_ID { 0x7C9F1078, 0x549D4D20, 0x925A0B61, 0xD07065E2 }
	TAG_STRUCT(
		incident_accumulator_block,
		"incident_accumulator_block",
		"incident_accumulator_block",
		"s_incident_accumulator_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INCIDENT_ACCUMULATOR_BLOCK_ID)
	{
		{ _field_char_enum, "aggregation type", &incident_accumulator_aggregation_method_enum },
		{ _field_char_enum, "resets on", &incident_accumulator_reset_enum },
		FIELD_PAD("VJIOEJNLKS", 2),
		{ _field_block, "child incidents", &incident_accumulator_child_incident_block_block },
		{ _field_terminator }
	};

	STRINGS(incident_accumulator_aggregation_method_enum)
	{
		"all",
		"any"
	};
	STRING_LIST(incident_accumulator_aggregation_method_enum, incident_accumulator_aggregation_method_enum_strings, _countof(incident_accumulator_aggregation_method_enum_strings));

	STRINGS(incident_accumulator_reset_enum)
	{
		"four seconds since last event",
		"player death",
		"round over",
		"game over",
		"on incident"
	};
	STRING_LIST(incident_accumulator_reset_enum, incident_accumulator_reset_enum_strings, _countof(incident_accumulator_reset_enum_strings));

	#define INCIDENT_ACCUMULATOR_CHILD_INCIDENT_BLOCK_ID { 0xC4843BBE, 0xFB7B47AC, 0x8C8D6C0C, 0xBF7AAF10 }
	TAG_STRUCT(
		incident_accumulator_child_incident_block,
		"incident_accumulator_child_incident_block",
		"incident_accumulator_child_incident_block",
		"s_incident_accumulator_child_incident_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INCIDENT_ACCUMULATOR_CHILD_INCIDENT_BLOCK_ID)
	{
		{ _field_byte_flags, "flags", &numeric_comparison_flags },
		FIELD_PAD("VLHSJNRE", 3),
		{ _field_long_integer, "count" },
		{ _field_string_id, "incident name" },
		{ _field_string_id, "reset incident name" },
		{ _field_real, "reset timeout" },
		{ _field_terminator }
	};

	STRINGS(numeric_comparison_flags)
	{
		"equal to",
		"greater than",
		"less than"
	};
	STRING_LIST(numeric_comparison_flags, numeric_comparison_flags_strings, _countof(numeric_comparison_flags_strings));

	#define INCIDENT_DEFINITION_BLOCK_STRUCT_ID { 0xAE3FFFE9, 0xC8F4415E, 0x8E9C451C, 0xC8DCAAE9 }
	TAG_STRUCT(
		incident_definition_block_struct,
		"incident_definition_block_struct",
		"incident_definition_block_struct",
		"s_incident_definition_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INCIDENT_DEFINITION_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		FIELD_GROUP_BEGIN("PROPERTIES"),
		{ _field_byte_flags, "flags", &incident_definition_flags },
		FIELD_PAD("JKOPEIE", 3),
		FIELD_GROUP_BEGIN("DISALLOWED GAME MODES"),
		{ _field_struct, "disallowed game modes", &game_mode_flags_struct },
		FIELD_GROUP_END(),
		{ _field_block, "suppressed incidents", &suppressed_incident_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "suppressed incident blocks", &suppressedincidentblockreferencedefinition_block, _tag_field_attributed_definition_block_collapsed_field_default },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("CREATION"),
		{ _field_block, "specialized incidents", &specialized_incident_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "accumulator incidents", &incident_accumulator_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "sum accumulator incidents", &incident_sum_accumulator_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		FIELD_GROUP_END(),
		{ _field_block, "response", &game_incident_response_block_block },
		{ _field_terminator }
	};

	STRINGS(incident_definition_flags)
	{
		"never network (default is network only to interested parties)",
		"always network to everyone (default is network only to interested parties)",
		"use long delay (used in halo 3 on player_joined and player_rejoined incidents",
		"force game engine event display in campaign"
	};
	STRING_LIST(incident_definition_flags, incident_definition_flags_strings, _countof(incident_definition_flags_strings));

	#define INCIDENT_GLOBAL_PROPERTIES_DEFINITION_STRUCT_DEFINITION_ID { 0x249A61F3, 0xA6094D20, 0x94E24664, 0x95C2EF27 }
	TAG_STRUCT(
		incident_global_properties_definition_struct_definition,
		"incident_global_properties_definition_struct_definition",
		"incident_global_properties_definition_struct_definition",
		"s_incident_global_properties_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INCIDENT_GLOBAL_PROPERTIES_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "campaign multikill time", nullptr, "s" },
		{ _field_real, "survival multikill time", nullptr, "s" },
		{ _field_real, "multiplayer multikill time", nullptr, "s" },
		{ _field_real, "low health threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "shield recharge threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "maximum vengeance time", nullptr, "s" },
		{ _field_real, "lifesaver damage threshold", nullptr, nullptr, "[0,2]" },
		{ _field_real, "avenger dead time", nullptr, "s" },
		{ _field_real, "hologram recently used maximum time", nullptr, "s" },
		{ _field_long_enum, "active camouflage incident minimum level", &active_camo_enum_definition },
		{ _field_real, "thruster pack recently used maximum time", nullptr, "s" },
		{ _field_real, "active shield recently used maximum time", nullptr, "s" },
		{ _field_real, "damage threshold for hologram incidents", nullptr, nullptr, "[0,1]" },
		{ _field_real, "damage threshold for distraction incident killer", nullptr, nullptr, "[0,1]" },
		{ _field_real, "damage threshold for distraction incident distractor", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "reward globals", &reward_globals_definition_group_reference },
		{ _field_tag_reference, "commendation globals", &commendation_globals_definition_group_reference },
		FIELD_GROUP_BEGIN("HEAT"),
		{ _field_short_integer, "maximum heat" },
		FIELD_PAD("KVLHESKH", 2),
		{ _field_real, "full heat decay time", "seconds to completely deplete a full heat meter", "S" },
		{ _field_real, "full heat stun time", "seconds from the time you are at maximum heat until it starts decaying again", "s" },
		{ _field_real, "betrayal heat stun time", "seconds from the time you are at maximum heat until it starts decaying again", "s" },
		FIELD_GROUP_END(),
		{ _field_tag_reference, "incident definitions", &incident_globals_definition_group_reference },
		{ _field_block, "default incident definition", "generated in code", &incident_definition_block_block },
		{ _field_terminator }
	};

	STRINGS(active_camo_enum_definition)
	{
		"poor",
		"good",
		"excellent",
		"invisible",
		"ai"
	};
	STRING_LIST(active_camo_enum_definition, active_camo_enum_definition_strings, _countof(active_camo_enum_definition_strings));

	TAG_REFERENCE(reward_globals_definition_group_reference, REWARD_GLOBALS_DEFINITION_TAG);

	TAG_REFERENCE(commendation_globals_definition_group_reference, COMMENDATION_GLOBALS_DEFINITION_TAG);

	TAG_REFERENCE(incident_globals_definition_group_reference, INCIDENT_GLOBALS_DEFINITION_TAG);

	#define INCIDENT_GLOBALS_DEFINITION_BLOCK_STRUCT_ID { 0x81B17C12, 0x7D6C4B6A, 0xB91D09EA, 0x622C30D7 }
	TAG_STRUCT(
		incident_globals_definition_block_struct,
		"incident_globals_definition_block_struct",
		"incident_globals_definition_block_struct",
		"s_incident_globals_definition_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INCIDENT_GLOBALS_DEFINITION_BLOCK_STRUCT_ID)
	{
		{ _field_block, "incidents", &incident_definition_block_block },
		{ _field_terminator }
	};

	#define INCIDENT_SUM_ACCUMULATOR_BLOCK_ID { 0x6CDCE224, 0xE8B64DC0, 0x85A497BA, 0x8347A1 }
	TAG_STRUCT(
		incident_sum_accumulator_block,
		"incident_sum_accumulator_block",
		"incident_sum_accumulator_block",
		"s_incident_sum_accumulator_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INCIDENT_SUM_ACCUMULATOR_BLOCK_ID)
	{
		{ _field_char_enum, "resets on", &incident_accumulator_reset_enum },
		{ _field_byte_flags, "flags", &numeric_comparison_flags },
		FIELD_PAD("XSEXEC", 2),
		{ _field_long_integer, "count" },
		{ _field_block, "child incidents", &incident_sum_accumulator_child_incident_block_block },
		{ _field_terminator }
	};

	#define INCIDENT_SUM_ACCUMULATOR_CHILD_INCIDENT_BLOCK_ID { 0x3D98BF85, 0xA9BF46E2, 0xA4A9FD5F, 0x7F9748B3 }
	TAG_STRUCT(
		incident_sum_accumulator_child_incident_block,
		"incident_sum_accumulator_child_incident_block",
		"incident_sum_accumulator_child_incident_block",
		"s_incident_sum_accumulator_child_incident_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INCIDENT_SUM_ACCUMULATOR_CHILD_INCIDENT_BLOCK_ID)
	{
		{ _field_string_id, "incident name" },
		{ _field_string_id, "reset incident name" },
		{ _field_real, "reset timeout" },
		{ _field_terminator }
	};

	#define INDEXBUFFERSBLOCK_STRUCT_ID { 0xFB7AA38B, 0x3CE54625, 0xB96C0003, 0x60812BBC }
	TAG_STRUCT(
		indexbuffersblock_struct,
		"indexBuffersBlock_struct",
		"indexBuffersBlock_struct",
		"s_indexbuffersblock_struct",
		SET_DELETE_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INDEXBUFFERSBLOCK_STRUCT_ID)
	{
		{ _field_byte_integer, "declaration type" },
		{ _field_byte_integer, "stride" },
		FIELD_PAD("vertex buffer pad", 2),
		{ _field_dword_integer, "count" },
		{ _field_long_integer, "d3d hardware format" },
		{ _field_terminator }
	};

	#define INDEX_BUFFERS_BLOCK_ID { 0xC747C29E, 0x88D1483B, 0x9336EC15, 0xF00BDD09 }
	TAG_STRUCT(
		index_buffers_block,
		"index_buffers_block",
		"index_buffers_block",
		"s_index_buffers_block",
		SET_DELETE_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INDEX_BUFFERS_BLOCK_ID)
	{
		{ _field_byte_integer, "declaration type" },
		{ _field_byte_integer, "stride" },
		FIELD_PAD("vertex buffer pad", 2),
		{ _field_dword_integer, "count" },
		{ _field_long_integer, "d3d hardware format" },
		{ _field_terminator }
	};

	#define INDEX_LIST_BLOCK_ID { 0x46A289B9, 0xCD4938, 0xBAAECC17, 0x5E24C7BA }
	TAG_STRUCT(
		index_list_block,
		"index_list_block",
		"index_list_block",
		"s_index_list_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INDEX_LIST_BLOCK_ID)
	{
		{ _field_word_integer, "index" },
		{ _field_terminator }
	};

	#define INDICES_DWORD_BLOCK_ID { 0x73514B8E, 0x5EA54978, 0x8AAA440D, 0x39E1C24C }
	TAG_STRUCT(
		indices_dword_block,
		"indices_dword_block",
		"indices_dword_block",
		"s_indices_dword_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INDICES_DWORD_BLOCK_ID)
	{
		{ _field_long_integer, "dword" },
		{ _field_terminator }
	};

	#define INDICES_WORD_BLOCK_ID { 0x92F5E99B, 0xFC5B45B5, 0xA594973C, 0x688E96A8 }
	TAG_STRUCT(
		indices_word_block,
		"indices_word_block",
		"indices_word_block",
		"s_indices_word_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INDICES_WORD_BLOCK_ID)
	{
		{ _field_short_integer, "word" },
		{ _field_terminator }
	};

	#define INFLUENCERSPAWNSETTINGSBLOCK_ID { 0x757BE24D, 0xC5C540AA, 0x961D9850, 0x49F6D4AC }
	TAG_STRUCT(
		influencerspawnsettingsblock,
		"influencerSpawnSettingsBlock",
		"influencerSpawnSettingsBlock",
		"s_influencerspawnsettingsblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INFLUENCERSPAWNSETTINGSBLOCK_ID)
	{
		{ _field_long_flags, "Flags", &influencerspawnsettingsflagsdefinition },
		{ _field_real, "Minimum Influence", nullptr, "Only used if 'Pin' flag is set" },
		{ _field_real, "Maximum Influence", nullptr, "Only used if 'Pin' flag is set" },
		{ _field_terminator }
	};

	STRINGS(influencerspawnsettingsflagsdefinition)
	{
		"Only use largest influence",
		"Pin influence to Minimum and Maximum"
	};
	STRING_LIST(influencerspawnsettingsflagsdefinition, influencerspawnsettingsflagsdefinition_strings, _countof(influencerspawnsettingsflagsdefinition_strings));

	#define INHERITED_ANIMATION_BLOCK_ID { 0xBBA74F4E, 0x94B64EE2, 0xA1DCD8E7, 0x53D89B25 }
	TAG_STRUCT(
		inherited_animation_block,
		"inherited_animation_block",
		"inherited_animation_block",
		"s_inherited_animation_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INHERITED_ANIMATION_BLOCK_ID)
	{
		{ _field_tag_reference, "inherited graph", &model_animation_graph_group_reference$2 },
		{ _field_block, "node map", &inherited_animation_node_map_block_block },
		{ _field_block, "node map flags", &inherited_animation_node_map_flag_block_block },
		{ _field_long_integer, "inheritance_flags" },
		{ _field_real, "uniform translation scale" },
		{ _field_terminator }
	};

	#define INHERITED_ANIMATION_NODE_MAP_BLOCK_ID { 0x1268AB4E, 0x215248B5, 0x946D03DB, 0xA15E169F }
	TAG_STRUCT(
		inherited_animation_node_map_block,
		"inherited_animation_node_map_block",
		"inherited_animation_node_map_block",
		"s_inherited_animation_node_map_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INHERITED_ANIMATION_NODE_MAP_BLOCK_ID)
	{
		{ _field_short_integer, "local node" },
		{ _field_terminator }
	};

	#define INHERITED_ANIMATION_NODE_MAP_FLAG_BLOCK_ID { 0x3ED77110, 0xF524FC0, 0xA34B0BE3, 0x168D8C7F }
	TAG_STRUCT(
		inherited_animation_node_map_flag_block,
		"inherited_animation_node_map_flag_block",
		"inherited_animation_node_map_flag_block",
		"s_inherited_animation_node_map_flag_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INHERITED_ANIMATION_NODE_MAP_FLAG_BLOCK_ID)
	{
		{ _field_long_integer, "local node flags" },
		{ _field_terminator }
	};

	#define INPUT_MAPPING_FUNCTION_BLOCK_ID { 0xAAEEBF63, 0x6AA04553, 0xA5DAA31B, 0x60373717 }
	TAG_STRUCT(
		input_mapping_function_block,
		"input_mapping_function_block",
		"input_mapping_function_block",
		"s_input_mapping_function_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INPUT_MAPPING_FUNCTION_BLOCK_ID)
	{
		{ _field_struct, "function", &scalar_function_named_struct },
		{ _field_terminator }
	};

	#define INSTANCE_IMPOSTER_BLOCK_ID { 0x97F8A998, 0xFEB34595, 0x9C9AC5A1, 0xD7B18C9F }
	TAG_STRUCT(
		instance_imposter_block,
		"instance_imposter_block",
		"instance_imposter_block",
		"s_instance_imposter_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INSTANCE_IMPOSTER_BLOCK_ID)
	{
		{ _field_short_integer, "group index" },
		{ _field_char_integer, "subpart_index" },
		{ _field_byte_flags, "flags", &instance_imposter_element_flags_definition },
		{ _field_terminator }
	};

	STRINGS(instance_imposter_element_flags_definition)
	{
		"card",
		"poly",
		"rainbow box",
		"occlusion"
	};
	STRING_LIST(instance_imposter_element_flags_definition, instance_imposter_element_flags_definition_strings, _countof(instance_imposter_element_flags_definition_strings));

	#define INSTANCE_IMPOSTER_CHECKSUM_BLOCK_ID { 0xBDCB9FB0, 0x1E5341AC, 0x8C9A9538, 0x9EAB6747 }
	TAG_STRUCT(
		instance_imposter_checksum_block,
		"instance_imposter_checksum_block",
		"instance_imposter_checksum_block",
		"s_instance_imposter_checksum_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INSTANCE_IMPOSTER_CHECKSUM_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_integer, "import checksum" },
		{ _field_long_integer, "transform checksum" },
		{ _field_real, "scale" },
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "left" },
		{ _field_real_vector_3d, "up" },
		{ _field_real_point_3d, "position" },
		{ _field_short_integer, "imposter version" },
		{ _field_char_integer, "imposter policy" },
		FIELD_PAD("padefefrdapad", 1),
		{ _field_real, "bounding radius" },
		{ _field_real, "transition distance" },
		{ _field_terminator }
	};

	#define INSTANCE_IMPOSTER_DEFINITION_STRUCT_DEFINITION_ID { 0x5011F34B, 0x64DA4902, 0x8930C061, 0xF724EA33 }
	TAG_STRUCT(
		instance_imposter_definition_struct_definition,
		"instance_imposter_definition_struct_definition",
		"instance_imposter_definition_struct_definition",
		"s_instance_imposter_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INSTANCE_IMPOSTER_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_long_flags, "flags", &instance_imposter_flags_definition },
		{ _field_string_id, "bsp name" },
		{ _field_long_integer, "checksum" },
		{ _field_string_id, "source metadata path" },
		{ _field_block, "instances", &instance_imposter_block_block },
		{ _field_block, "instance checksums", &instance_imposter_checksum_block_block },
		FIELD_GROUP_BEGIN("atlas info"),
		{ _field_short_integer, "atlas tile resolution" },
		{ _field_char_integer, "atlas x tile count" },
		{ _field_char_integer, "atlas y tile count" },
		{ _field_tag_reference, "atlas texture", &bitmap_group_reference$2 },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("mesh data"),
		{ _field_struct, "render geometry", &global_render_geometry_struct },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(instance_imposter_flags_definition)
	{
		"raw geometry compressed",
		"use raw instance imposter verts",
		"valid and good to go",
		"build completed"
	};
	STRING_LIST(instance_imposter_flags_definition, instance_imposter_flags_definition_strings, _countof(instance_imposter_flags_definition_strings));

	#define INSTANCE_INDEX_WORD_BLOCK_ID { 0xBB11BC2A, 0x52524BAC, 0x993757BE, 0x8027853E }
	TAG_STRUCT(
		instance_index_word_block,
		"instance_index_word_block",
		"instance_index_word_block",
		"s_instance_index_word_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INSTANCE_INDEX_WORD_BLOCK_ID)
	{
		{ _field_short_integer, "instance index" },
		{ _field_terminator }
	};

	#define INSTANCE_NODE_MAP_MAPPING_BLOCK_ID { 0x1119ACFD, 0x221F3EF, 0x38131BEE, 0x8441FBB8 }
	TAG_STRUCT(
		instance_node_map_mapping_block,
		"instance_node_map_mapping_block",
		"instance_node_map_mapping_block",
		"s_instance_node_map_mapping_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INSTANCE_NODE_MAP_MAPPING_BLOCK_ID)
	{
		{ _field_short_integer, "instance_node map region node index" },
		{ _field_terminator }
	};

	#define INSTANCE_WETNESS_INSTANCE_BLOCK_ID { 0x6AD8A521, 0xBB2C42CF, 0x8CD61432, 0x47116636 }
	TAG_STRUCT(
		instance_wetness_instance_block,
		"instance_wetness_instance_block",
		"instance_wetness_instance_block",
		"s_instance_wetness_instance_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INSTANCE_WETNESS_INSTANCE_BLOCK_ID)
	{
		{ _field_long_integer, "cluster offset" },
		{ _field_char_integer, "single probe" },
		FIELD_PAD("LHWCHFX", 1),
		FIELD_PAD("DWCIEFG", 2),
		{ _field_terminator }
	};

	#define INSTANTANEOUS_DAMAGE_REPSONSE_BLOCK_ID { 0x2A8C9E6B, 0x10DE4CDB, 0x9C2F98C4, 0xBB69FEED }
	TAG_STRUCT(
		instantaneous_damage_repsonse_block,
		"instantaneous_damage_repsonse_block",
		"instantaneous_damage_repsonse_block",
		"s_instantaneous_damage_repsonse_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INSTANTANEOUS_DAMAGE_REPSONSE_BLOCK_ID)
	{
		{ _field_short_enum, "response type", &damage_response_type_enum_definition },
		FIELD_EXPLANATION("Constraint damage type", "* if you specify a constraint group name (see lower section of this block)\n  you can specify a constraint damage\n* loosening a constraint takes it out of the rigid state - activates it\n* destroying a constraint sets the attached body free"),
		{ _field_short_enum, "constraint damage type", &damage_response_constraint_damage_type_enum_definition },
		FIELD_EXPLANATION("Constraint destruction", "- a response can destroy a single constraint by naming it explicitly.\n- alternatively it can randomly destroy a single constraint from a specified group if the \"destroy one group constraint\" flag is set\n- also it can destroy all constraints in a specified group if the \"destroy all group constraints\" flag is set\n"),
		{ _field_string_id, "constraint/group name" },
		FIELD_EXPLANATION("Damage response flags", "* kills object: when the response fires the object dies regardless of its current health\n* inhibits <x>: from halo 1 - disallows basic behaviors for a unit\n* forces drop weapon: from halo 1 - makes the unit drop its current weapon\n* kills weapon <x> trigger: destroys the <x> trigger on the unit\'s current weapon\n* destroys object: when the response fires the object is destroyed"),
		{ _field_long_flags, "flags", &damage_response_set1, _field_id_dumb },
		{ _field_long_flags, "flags2", &damage_response_set2, _field_id_dumb },
		{ _field_real_fraction, "damage threshold", "response fires after crossing this threshold.  1=full health" },
		{ _field_long_flags, "body threshold flags", &damage_response_body_threshold_flags_definition },
		{ _field_real, "body damage threshold", "response fires after object body damage crosses this threshold, numbers can be negative.  You need to set the flag \"body threshold active\" for this number to be used. 1=full health" },
		{ _field_tag_reference, "transition effect (generic)", MAKE_ALT_NAMES("transition effect"), &effect_group_reference },
		{ _field_tag_reference, "transition effect (specific)", &effect_group_reference },
		{ _field_struct, "damage effect", &instantaneous_response_damage_effect_struct }, // structure_version:1
		{ _field_string_id, "region" },
		{ _field_short_enum, "new state", &model_state_enum_definition },
		{ _field_short_integer, "runtime region index" },
		{ _field_string_id, "region (secondary)" },
		{ _field_short_enum, "new state (secondary)", &model_state_enum_definition },
		{ _field_short_integer, "runtime region index (secondary)" },
		{ _field_short_block_index, "destroy instance group", "all possible instances from this group will be destroyed", &global_model_instance_group_block_block },
		{ _field_short_enum, "custom response behavior", &damage_response_custom_response_behavior_enum_definition },
		{ _field_string_id, "custom response label" },
		{ _field_string_id, "effect marker name" },
		{ _field_struct, "damage effect marker", &instantaneous_response_damage_effect_marker_struct }, // structure_version:1
		FIELD_EXPLANATION("Response delay", "If desired, you can specify a delay until the response fires.This delay is pre-empted if another timed response for the same section fires.The delay effect plays while the timer is counting down.If the damage threshold is taken in a single hit while counting down, it will prematurely fire."),
		{ _field_real, "response delay", "in seconds" },
		{ _field_tag_reference, "delay effect", &effect_group_reference },
		{ _field_string_id, "delay effect marker name" },
		{ _field_real, "response delay premature damage threshold" },
		FIELD_EXPLANATION("seat ejaculation", nullptr),
		{ _field_string_id, "ejecting seat label" },
		FIELD_EXPLANATION("skip fraction", "0.0 always fires, 1.0 never fires"),
		{ _field_real_fraction, "skip fraction" },
		FIELD_EXPLANATION("destroyed child object marker name", "when this response fires, any children objects created at the supplied marker name will be destroyed"),
		{ _field_string_id, "destroyed child object marker name" },
		FIELD_EXPLANATION("total damage threshold", "scale on total damage section vitality"),
		{ _field_real_fraction, "total damage threshold" },
		{ _field_terminator }
	};

	STRINGS(damage_response_type_enum_definition)
	{
		"receives all damage",
		"receives area effect damage",
		"receives local damage"
	};
	STRING_LIST(damage_response_type_enum_definition, damage_response_type_enum_definition_strings, _countof(damage_response_type_enum_definition_strings));

	STRINGS(damage_response_constraint_damage_type_enum_definition)
	{
		"none",
		"destroy one of group#sets the attached body of this constraint free",
		"destroy entire group#sets the attached body of all constraints free",
		"loosen one of group#takes this constraint out of the rigid state - activates it",
		"loosen entire group#takes all constraints out of the rigid state - activates them"
	};
	STRING_LIST(damage_response_constraint_damage_type_enum_definition, damage_response_constraint_damage_type_enum_definition_strings, _countof(damage_response_constraint_damage_type_enum_definition_strings));

	STRINGS(damage_response_set1)
	{
		"kills object#when the response fires the object dies regardless of its current health",
		"inhibits melee attack#from halo 1 - disallows melee for a unit",
		"inhibits weapon attack#from halo 1 - disallows weapon fire for a unit",
		"inhibits walking#from halo 1 - disallows walking for a unit",
		"forces drop weapon#from halo 1 - makes the unit drop its current weapon",
		"kills weapon primary trigger",
		"kills weapon secondary trigger",
		"destroys object#when the response fires the object is destroyed",
		"damages weapon primary trigger#destroys the primary trigger on the unit\'s current weapon",
		"damages weapon secondary trigger#destroys the secondary trigger on the unit\'s current weapon",
		"light damage left turn",
		"major damage left turn",
		"light damage right turn",
		"major damage right turn",
		"light damage engine",
		"major damage engine",
		"kills object (no player solo)",
		"causes detonation",
		"fires on creation",
		"kills variant objects",
		"force unattached effects",
		"fires under threshold",
		"triggers special death",
		"only on special death",
		"only NOT on special death",
		"buckles giants",
		"causes sp detonation",
		"skip sounds on generic effect",
		"kills giants",
		"skip sounds on special death",
		"cause head dismemberment",
		"cause left leg dismemberment"
	};
	STRING_LIST(damage_response_set1, damage_response_set1_strings, _countof(damage_response_set1_strings));

	STRINGS(damage_response_set2)
	{
		"cause right leg dismemberment",
		"cause left arm dismemberment",
		"cause right arm dismemberment",
		"allow damage recharge overflow"
	};
	STRING_LIST(damage_response_set2, damage_response_set2_strings, _countof(damage_response_set2_strings));

	STRINGS(damage_response_body_threshold_flags_definition)
	{
		"body threshold active#this resoponse fires when the body healh fraction crosses this boundary"
	};
	STRING_LIST(damage_response_body_threshold_flags_definition, damage_response_body_threshold_flags_definition_strings, _countof(damage_response_body_threshold_flags_definition_strings));

	STRINGS(damage_response_custom_response_behavior_enum_definition)
	{
		"plays always",
		"plays if labels match",
		"plays if labels differ"
	};
	STRING_LIST(damage_response_custom_response_behavior_enum_definition, damage_response_custom_response_behavior_enum_definition_strings, _countof(damage_response_custom_response_behavior_enum_definition_strings));

	#define INSTANTANEOUS_RESPONSE_DAMAGE_EFFECT_MARKER_STRUCT_ID { 0x6272DDC9, 0xC8664D2F, 0xB77E21BC, 0xB0C9B9DF }
	VERSIONED_TAG_STRUCT(
		instantaneous_response_damage_effect_marker_struct,
		"instantaneous_response_damage_effect_marker_struct",
		"instantaneous_response_damage_effect_marker_struct",
		"s_instantaneous_response_damage_effect_marker_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INSTANTANEOUS_RESPONSE_DAMAGE_EFFECT_MARKER_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_string_id, "damage effect marker name" },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	#define INSTANTANEOUS_RESPONSE_DAMAGE_EFFECT_STRUCT_ID { 0x16BAF761, 0x451A4914, 0xB508138C, 0x7244DA1E }
	VERSIONED_TAG_STRUCT(
		instantaneous_response_damage_effect_struct,
		"instantaneous_response_damage_effect_struct",
		"instantaneous_response_damage_effect_struct",
		"s_instantaneous_response_damage_effect_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INSTANTANEOUS_RESPONSE_DAMAGE_EFFECT_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_tag_reference, "transition damage effect", &damage_effect_group_reference },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	#define INT_BLOCK_ID { 0x484FD1FE, 0x4FD7488B, 0xAFAAE8DB, 0x731747C0 }
	TAG_STRUCT(
		int_block,
		"int_block",
		"int_block",
		"s_int_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INT_BLOCK_ID)
	{
		{ _field_long_integer, "int value" },
		{ _field_terminator }
	};

	#define INT_BLOCK$2_ID { 0xE29C869D, 0xA4AD485B, 0xBF0BF7E6, 0x60402421 }
	TAG_STRUCT(
		int_block$2,
		"int_block",
		"int_block",
		"s_int_block$2",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INT_BLOCK$2_ID)
	{
		{ _field_long_integer, "int value" },
		{ _field_terminator }
	};

	#define INTERFACE_TAG_REFERENCES_ID { 0xEAFCBD42, 0x27264DFB, 0x9C2624C1, 0x928B0D3C }
	TAG_STRUCT(
		interface_tag_references,
		"interface_tag_references",
		"interface_tag_references",
		"s_interface_tag_references",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INTERFACE_TAG_REFERENCES_ID)
	{
		{ _field_tag_reference, "spinner bitmap", &bitmap_group_reference$2 },
		{ _field_tag_reference, "obsolete2", &bitmap_group_reference$2 },
		{ _field_tag_reference, "screen color table", &color_table_group_reference },
		{ _field_tag_reference, "hud color table", &color_table_group_reference },
		{ _field_tag_reference, "editor color table", &color_table_group_reference },
		{ _field_tag_reference, "dialog color table", &color_table_group_reference },
		{ _field_tag_reference, "motion sensor sweep bitmap", &bitmap_group_reference$2 },
		{ _field_tag_reference, "motion sensor sweep bitmap mask", &bitmap_group_reference$2 },
		{ _field_tag_reference, "multiplayer hud bitmap", &bitmap_group_reference$2 },
		{ _field_tag_reference, "unused", &_reference$6 },
		{ _field_tag_reference, "motion sensor blip bitmap", &bitmap_group_reference$2 },
		{ _field_tag_reference, "interface goo map1", &bitmap_group_reference$2 },
		{ _field_tag_reference, "interface goo map2", &bitmap_group_reference$2 },
		{ _field_tag_reference, "interface goo map3", &bitmap_group_reference$2 },
		{ _field_tag_reference, "mainmenu ui globals", &user_interface_globals_definition_group_reference },
		{ _field_tag_reference, "singleplayer ui globals", &user_interface_globals_definition_group_reference },
		{ _field_tag_reference, "multiplayer ui globals", &user_interface_globals_definition_group_reference },
		{ _field_tag_reference, "firefight ui globals", &user_interface_globals_definition_group_reference },
		{ _field_tag_reference, "style sheet globals", &style_sheet_list_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(color_table_group_reference, COLOR_TABLE_TAG);

	TAG_REFERENCE(user_interface_globals_definition_group_reference, USER_INTERFACE_GLOBALS_DEFINITION_TAG);

	TAG_REFERENCE(style_sheet_list_group_reference, STYLE_SHEET_LIST_TAG);

	#define INVOLUNTARY_DATA_BLOCK_ID { 0x208CDC38, 0x8024456, 0x86F2C9BA, 0xA73BF240 }
	TAG_STRUCT(
		involuntary_data_block,
		"involuntary_data_block",
		"involuntary_data_block",
		"s_involuntary_data_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		INVOLUNTARY_DATA_BLOCK_ID)
	{
		{ _field_short_integer, "involuntary vocalization index" },
		FIELD_PAD("JXIFX", 2),
		{ _field_terminator }
	};

	#define ITEM_STRUCT_DEFINITION_ID { 0x21CDF7E3, 0xAD94443E, 0xAE80968D, 0x8CFBEBBF }
	VERSIONED_TAG_STRUCT(
		item_struct_definition,
		"item_struct_definition",
		"item_struct_definition",
		"s_item_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ITEM_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 36 },
		{ _field_struct, "object", &object_struct_definition },
		FIELD_GROUP_BEGIN("$$$ ITEM $$$"),
		{ _field_long_flags, "flags", &item_definition_flags },
		{ _field_short_integer, "OLD message index" },
		{ _field_short_integer, "sort order" },
		{ _field_real, "OLD multiplayer on-ground scale" },
		{ _field_real, "OLD campaign on-ground scale" },
		FIELD_EXPLANATION("NEW hud messages", "everything you need to display shite"),
		{ _field_string_id, "pickup message" },
		{ _field_string_id, "swap message" },
		{ _field_string_id, "pickup message (dual)" },
		{ _field_string_id, "swap message (dual)" },
		{ _field_string_id, "picked up msg" },
		{ _field_string_id, "switch-to msg" },
		{ _field_string_id, "switch-to from ai msg" },
		{ _field_string_id, "notify empty msg" },
		{ _field_string_id, "notify overheated message" },
		{ _field_tag_reference, "collision sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_block, "predicted bitmaps", &predicted_bitmaps_block_block },
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_reference },
		{ _field_real_bounds, "detonation delay", nullptr, "seconds" },
		{ _field_tag_reference, "detonating effect", &effect_group_reference },
		{ _field_tag_reference, "detonation effect", &effect_group_reference },
		FIELD_EXPLANATION("Item scale settings", "because grenades look better as coconuts. 0==1"),
		{ _field_real, "ground scale" },
		{ _field_real, "small unit (armed)" },
		{ _field_real, "small unit (stowed)" },
		{ _field_real, "medium unit (armed)" },
		{ _field_real, "medium unit (stowed)" },
		{ _field_real, "large unit (armed)" },
		{ _field_real, "large unit (stowed)" },
		{ _field_real, "huge unit (armed)" },
		{ _field_real, "huge unit (stowed)" },
		{ _field_tag_reference, "grounded friction settings", "If not present, the default from global.globals is used.", &grounded_friction_group_reference },
		{ _field_tag_reference, "Tossed Override", "Used to override the object tossed when item owner is killed.  Is overridden by tossed weapon override.", &object_group_reference$3 },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 35 },
		FIELD_GROUP_BEGIN("$$$ ITEM $$$"),
		{ _field_long_flags, "flags", &item_definition_flags },
		{ _field_short_integer, "OLD message index" },
		{ _field_short_integer, "sort order" },
		{ _field_real, "OLD multiplayer on-ground scale" },
		{ _field_real, "OLD campaign on-ground scale" },
		FIELD_EXPLANATION("NEW hud messages", "everything you need to display shite"),
		{ _field_string_id, "pickup message" },
		{ _field_string_id, "swap message" },
		{ _field_string_id, "pickup message (dual)" },
		{ _field_string_id, "swap message (dual)" },
		{ _field_string_id, "picked up msg" },
		{ _field_string_id, "switch-to msg" },
		{ _field_string_id, "switch-to from ai msg" },
		{ _field_string_id, "notify empty msg" },
		{ _field_string_id, "notify overheated message" },
		{ _field_tag_reference, "collision sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_block, "predicted bitmaps", &predicted_bitmaps_block_block },
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_reference },
		{ _field_real_bounds, "detonation delay", nullptr, "seconds" },
		{ _field_tag_reference, "detonating effect", &effect_group_reference },
		{ _field_tag_reference, "detonation effect", &effect_group_reference },
		FIELD_EXPLANATION("Item scale settings", "because grenades look better as coconuts. 0==1"),
		{ _field_real, "ground scale" },
		{ _field_real, "small unit (armed)" },
		{ _field_real, "small unit (stowed)" },
		{ _field_real, "medium unit (armed)" },
		{ _field_real, "medium unit (stowed)" },
		{ _field_real, "large unit (armed)" },
		{ _field_real, "large unit (stowed)" },
		{ _field_real, "huge unit (armed)" },
		{ _field_real, "huge unit (stowed)" },
		{ _field_tag_reference, "grounded friction settings", "If not present, the default from global.globals is used.", &grounded_friction_group_reference },
		{ _field_tag_reference, "Tossed Override", "Used to override the object tossed when item owner is killed.  Is overridden by tossed weapon override.", &object_group_reference$3 },
		FIELD_GROUP_END(),
		
		{ _field_terminator }
	};

	#define JACKAL_GLIDER_BLOCK_ID { 0x6ABC199E, 0x12A64A22, 0xB555CB17, 0x2B13DC3C }
	TAG_STRUCT(
		jackal_glider_block,
		"jackal_glider_block",
		"jackal_glider_block",
		"s_jackal_glider_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		JACKAL_GLIDER_BLOCK_ID)
	{
		{ _field_struct, "steering control", &vehicle_steering_control_struct },
		FIELD_EXPLANATION("velocity control variables", nullptr),
		{ _field_real, "maximum forward speed" },
		{ _field_real, "maximum reverse speed" },
		{ _field_real, "speed acceleration" },
		{ _field_real, "speed deceleration" },
		{ _field_real, "maximum left slide" },
		{ _field_real, "maximum right slide" },
		{ _field_real, "slide acceleration" },
		{ _field_real, "slide deceleration" },
		{ _field_real, "torque scale", "0 defaults to 1" },
		FIELD_EXPLANATION("engine object function", nullptr),
		{ _field_struct, "engine object function", &engine_function_struct },
		FIELD_EXPLANATION("contrail object function", nullptr),
		{ _field_struct, "contrail object function", &engine_function_struct },
		{ _field_struct, "steering animation", &steering_animation_struct },
		{ _field_real, "flying velocity threshold" },
		{ _field_angle, "flying look threshold", "degrees" },
		{ _field_real, "flying hover threshold" },
		{ _field_real, "grounded hover threshold" },
		{ _field_real, "landing grounded time" },
		{ _field_angle, "ground turn radius", "degrees" },
		{ _field_real, "ground acceleration", "wu/sec" },
		FIELD_EXPLANATION("wing lift", "lift_force= k*CEILING(SQR(q*forward_velocity), function_ceiling)"),
		{ _field_real, "wing lift q" },
		{ _field_real, "wing lift k" },
		{ _field_real, "wing lift function ceiling" },
		{ _field_real, "aileron to angular acceleartion scale" },
		{ _field_angle, "aileron yaw tilt angle" },
		FIELD_EXPLANATION("wing", nullptr),
		{ _field_struct, "wing surface", &flight_surface_struct },
		FIELD_EXPLANATION("ailerons", nullptr),
		{ _field_struct, "aileron surface", &flight_surface_struct },
		FIELD_EXPLANATION("elevator", nullptr),
		{ _field_struct, "elevator surface", &flight_surface_struct },
		FIELD_EXPLANATION("tail", nullptr),
		{ _field_struct, "tail surface", &flight_surface_struct },
		FIELD_EXPLANATION("rudder", nullptr),
		{ _field_struct, "rudder surface", &flight_surface_struct },
		FIELD_EXPLANATION("taxi", nullptr),
		{ _field_struct, "taxi surface", &flight_surface_struct },
		FIELD_EXPLANATION("ground drag", nullptr),
		{ _field_struct, "ground drag struct", &jackal_glider_drag_struct },
		FIELD_EXPLANATION("air drag", nullptr),
		{ _field_struct, "air drag struct", &jackal_glider_drag_struct },
		FIELD_EXPLANATION("takeoff drag", nullptr),
		{ _field_struct, "takeoff drag struct", &jackal_glider_drag_struct },
		{ _field_terminator }
	};

	#define JACKAL_GLIDER_DRAG_STRUCT_ID { 0xFAEAB498, 0x1A314FAB, 0xACD012D9, 0xD7ABD2D0 }
	TAG_STRUCT(
		jackal_glider_drag_struct,
		"jackal_glider_drag_struct",
		"jackal_glider_drag_struct",
		"s_jackal_glider_drag_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		JACKAL_GLIDER_DRAG_STRUCT_ID)
	{
		FIELD_EXPLANATION("drag", "drag= k*SQR(q*velocity) + constant deceleration"),
		{ _field_real, "q" },
		{ _field_real, "k" },
		{ _field_real, "constant deceleration" },
		{ _field_terminator }
	};

	#define JETWASH_DEFINITION_BLOCK_ID { 0xC47AA872, 0xA224BC5, 0x9B77C993, 0x79969CAB }
	TAG_STRUCT(
		jetwash_definition_block,
		"jetwash_definition_block",
		"jetwash_definition_block",
		"s_jetwash_definition_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		JETWASH_DEFINITION_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_real, "radius" },
		{ _field_long_integer, "maximum traces", nullptr, "traces per second" },
		{ _field_real, "maximum emission length", nullptr, "world units" },
		{ _field_angle_bounds, "trace yaw angle", nullptr, "degrees" },
		{ _field_angle_bounds, "trace pitch angle", nullptr, "degrees" },
		{ _field_real, "particle offset", nullptr, "world units" },
		{ _field_terminator }
	};

	#define LANGUAGE_PACK_DEFINITION_ID { 0x75A16A47, 0xDCD04796, 0x8CB23851, 0x14C59991 }
	TAG_STRUCT(
		language_pack_definition,
		"language_pack_definition",
		"language_pack_definition",
		"s_language_pack_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LANGUAGE_PACK_DEFINITION_ID)
	{
		{ _field_long_integer, "string reference pointer", _field_id_zero_data },
		{ _field_long_integer, "string data pointer", _field_id_zero_data },
		{ _field_long_integer, "number of strings" },
		{ _field_long_integer, "string data size" },
		{ _field_long_integer, "string reference cache offset" },
		{ _field_long_integer, "string data cache offset" },
		{ _field_array, "string reference checksum", &data_hash_definition$2 },
		{ _field_array, "string data checksum", &data_hash_definition$2 },
		{ _field_long_integer, "data loaded boolean" },
		{ _field_terminator }
	};

	#define LARGE_BSP2D_NODES_BLOCK_ID { 0xC17973C7, 0x16C14EE5, 0xA40FA277, 0x212D8050 }
	TAG_STRUCT(
		large_bsp2d_nodes_block,
		"bsp2d node",
		"large_bsp2d_nodes_block",
		"s_large_bsp2d_nodes_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LARGE_BSP2D_NODES_BLOCK_ID)
	{
		{ _field_real_plane_2d, "plane" },
		{ _field_long_integer, "left child" },
		{ _field_long_integer, "right child" },
		{ _field_terminator }
	};

	#define LARGE_BSP2D_REFERENCES_BLOCK_ID { 0x7E600865, 0x481349EE, 0xAA595566, 0x4FD9C2BB }
	TAG_STRUCT(
		large_bsp2d_references_block,
		"bsp2d reference",
		"large_bsp2d_references_block",
		"s_large_bsp2d_references_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LARGE_BSP2D_REFERENCES_BLOCK_ID)
	{
		{ _field_long_integer, "plane" },
		{ _field_long_integer, "bsp2d node" },
		{ _field_terminator }
	};

	#define LARGE_BSP3D_NODES_BLOCK_ID { 0xB16070E2, 0x373C48DD, 0xBC536E38, 0xA979E2E0 }
	TAG_STRUCT(
		large_bsp3d_nodes_block,
		"bsp3d node",
		"large_bsp3d_nodes_block",
		"s_large_bsp3d_nodes_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LARGE_BSP3D_NODES_BLOCK_ID)
	{
		{ _field_long_integer, "plane" },
		{ _field_long_integer, "back child" },
		{ _field_long_integer, "front child" },
		{ _field_terminator }
	};

	#define LARGE_EDGES_BLOCK_ID { 0x76B24BE8, 0xE1574464, 0xB7C09C61, 0x948F3471 }
	TAG_STRUCT(
		large_edges_block,
		"edge",
		"large_edges_block",
		"s_large_edges_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LARGE_EDGES_BLOCK_ID)
	{
		{ _field_long_integer, "start vertex" },
		{ _field_long_integer, "end vertex" },
		{ _field_long_integer, "forward edge" },
		{ _field_long_integer, "reverse edge" },
		{ _field_long_integer, "left surface" },
		{ _field_long_integer, "right surface" },
		{ _field_terminator }
	};

	#define LARGE_LEAVES_BLOCK_ID { 0x6FACAFAA, 0x8B1C4C58, 0x913373AA, 0x7C8A9E94 }
	TAG_STRUCT(
		large_leaves_block,
		"leaf",
		"large_leaves_block",
		"s_large_leaves_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LARGE_LEAVES_BLOCK_ID)
	{
		{ _field_word_flags, "flags", &leaf_flags },
		{ _field_short_integer, "bsp2d reference count" },
		{ _field_long_integer, "first bsp2d reference" },
		{ _field_terminator }
	};

	#define LARGE_SURFACES_BLOCK_STRUCT_ID { 0xABF80B98, 0x164C5B, 0xBACE563D, 0x4A14589 }
	TAG_STRUCT(
		large_surfaces_block_struct,
		"large_surfaces_block_struct",
		"large_surfaces_block_struct",
		"s_large_surfaces_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LARGE_SURFACES_BLOCK_STRUCT_ID)
	{
		{ _field_long_integer, "plane index" },
		{ _field_long_integer, "first edge" },
		{ _field_short_integer, "material" },
		{ _field_short_integer, "breakable surface set" },
		{ _field_short_integer, "breakable surface" },
		{ _field_byte_flags, "flags", &surface_flags },
		{ _field_byte_integer, "best plane calculation vertex index " },
		{ _field_terminator }
	};

	STRINGS(surface_flags)
	{
		"two sided",
		"invisible",
		"climbable",
		"breakable",
		"invalid",
		"conveyor",
		"slip",
		"plane negated"
	};
	STRING_LIST(surface_flags, surface_flags_strings, _countof(surface_flags_strings));

	#define LARGE_VERTICES_BLOCK_ID { 0x459797B, 0xF03B4186, 0xAA638C78, 0xD41B79DD }
	TAG_STRUCT(
		large_vertices_block,
		"vertex",
		"large_vertices_block",
		"s_large_vertices_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LARGE_VERTICES_BLOCK_ID)
	{
		{ _field_real_point_3d, "point" },
		{ _field_long_integer, "first edge" },
		{ _field_long_integer, "sink" },
		{ _field_terminator }
	};

	#define LEAF_CONNECTION_VERTEX_BLOCK_ID { 0x421E487D, 0x11484CA1, 0x853701FC, 0x69284A5C }
	TAG_STRUCT(
		leaf_connection_vertex_block,
		"leaf_connection_vertex_block",
		"leaf_connection_vertex_block",
		"s_leaf_connection_vertex_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LEAF_CONNECTION_VERTEX_BLOCK_ID)
	{
		{ _field_real_point_3d, "vertex" },
		{ _field_terminator }
	};

	#define LEAF_SYSTEM_STRUCT_DEFINITION_ID { 0x609FC23, 0x1694654C, 0x86B19DA1, 0xC0A48B }
	TAG_STRUCT(
		leaf_system_struct_definition,
		"leaf_system_struct_definition",
		"leaf_system_struct_definition",
		"s_leaf_system_struct_definition",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LEAF_SYSTEM_STRUCT_DEFINITION_ID)
	{
		{ _field_long_flags, "flags", &leaf_flags$2 },
		{ _field_string_id, "marker attach name" },
		{ _field_tag_reference, "bitmap sprite plate", &bitmap_group_reference$2 },
		{ _field_real_bounds, "emission rate", "seconds" },
		{ _field_real, "lifetime" },
		{ _field_real_bounds, "wind min/max", "default 0,0" },
		{ _field_real, "wind scale" },
		{ _field_real, "time scale" },
		{ _field_real_bounds, "fade distance", "from maximum movement range (10+). default 0", FIELD_FLAG_UNKNOWN0 },
		{ _field_real, "emissions sphere radius" },
		{ _field_real, "movement cylinder radius" },
		{ _field_real, "fade in time" },
		{ _field_real, "fade out time" },
		{ _field_block, "leaf types", &leaf_type_block_block },
		{ _field_terminator }
	};

	STRINGS(leaf_flags$2)
	{
		"collides structure",
		"collides objects",
		"collides water",
		"affected by explosions"
	};
	STRING_LIST(leaf_flags$2, leaf_flags$2_strings, _countof(leaf_flags$2_strings));

	#define LEAF_TYPE_BLOCK_ID { 0x9CB09D25, 0xB3394521, 0xBC2282FD, 0xFA4AED55 }
	TAG_STRUCT(
		leaf_type_block,
		"leaf_type_block",
		"leaf_type_block",
		"s_leaf_type_block",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LEAF_TYPE_BLOCK_ID)
	{
		{ _field_short_integer, "bitmap sprite index", "assumes sequence 0. if no sprites uses full bitmap" },
		FIELD_PAD("UNAX", 2),
		{ _field_real, "frequency" },
		{ _field_real, "mass" },
		{ _field_real_bounds, "geometry scale", "default of 0 for both means 0.1" },
		{ _field_real, "flitteriness" },
		{ _field_real, "flitteriness swing arm length" },
		{ _field_real, "flitteriness scale" },
		{ _field_real, "flitteriness speed" },
		{ _field_real, "flitteriness leaves phase" },
		{ _field_real, "tumble scale" },
		{ _field_real, "rotation scale" },
		{ _field_real, "starting velocity" },
		{ _field_real_fraction_bounds, "air friction XY and Z" },
		{ _field_terminator }
	};

	#define LENS_FLARE_COLOR_ANIMATION_BLOCK_ID { 0xA0B6D131, 0x2A634A2F, 0x8DD9CB77, 0x8BDC993A }
	TAG_STRUCT(
		lens_flare_color_animation_block,
		"lens_flare_color_animation_block",
		"lens_flare_color_animation_block",
		"s_lens_flare_color_animation_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LENS_FLARE_COLOR_ANIMATION_BLOCK_ID)
	{
		{ _field_struct, "color animation", &lens_flare_color_function_struct },
		{ _field_terminator }
	};

	#define LENS_FLARE_COLOR_FUNCTION_STRUCT_ID { 0x3DBB7F1A, 0x54F94FD0, 0x9D24DA91, 0x297A3078 }
	TAG_STRUCT(
		lens_flare_color_function_struct,
		"lens_flare_color_function_struct",
		"lens_flare_color_function_struct",
		"s_lens_flare_color_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LENS_FLARE_COLOR_FUNCTION_STRUCT_ID)
	{
		{ _field_string_id, "Input Variable", _field_id_function_input_scalar },
		{ _field_string_id, "Range Variable", _field_id_function_input_range },
		{ _field_short_enum, "Output Modifier", &output_mod_enum$3, _field_id_function_output_modifier },
		FIELD_PAD("BVCG1", 2),
		{ _field_string_id, "Output Modifier Input", _field_id_function_output_modifier_input },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "lens flare color mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	STRINGS(output_mod_enum$3)
	{
		" ",
		"Plus",
		"Times"
	};
	STRING_LIST(output_mod_enum$3, output_mod_enum$3_strings, _countof(output_mod_enum$3_strings));

	#define LENS_FLARE_REFLECTION_BLOCK_ID { 0xFBC30377, 0x4BFC46CA, 0x879F8A99, 0xBC0D240A }
	TAG_STRUCT(
		lens_flare_reflection_block,
		"reflection",
		"lens_flare_reflection_block",
		"s_lens_flare_reflection_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LENS_FLARE_REFLECTION_BLOCK_ID)
	{
		FIELD_IFP_BEGIN(),
		{ _field_string_id, "name" },
		{ _field_word_flags, "flags", &lens_flare_reflection_flags_definition },
		{ _field_short_integer, "bitmap index" },
		{ _field_tag_reference, "bitmap override", &bitmap_group_reference$3 },
		{ _field_real, "rotation offset", nullptr, "degrees" },
		{ _field_real, "axis offset", "percent offset in screen space along corona axis - 0.0 is on the corona, 1.0 is primary side edge of the screen, -1.0 is opposite side", "percent" },
		{ _field_real_bounds, "offset bounds", "the axis offset times corona offset is clamped between these values" },
		{ _field_struct, "radius curve", "interpolated by external input", &scalar_function_named_struct },
		{ _field_struct, "scale curve X", "interpolated by external input", &scalar_function_named_struct },
		{ _field_struct, "scale curve Y", "interpolated by external input", &scalar_function_named_struct },
		{ _field_struct, "brightness curve", "interpolated by external input", &scalar_function_named_struct },
		FIELD_EXPLANATION("TINT COLOR", "Tinting and modulating are not the same; \'tinting\' a reflection will color the darker regions but leave the highlights, while \'modulating\' will color everything uniformly. The modulation factor controls how much the reflection is modulated as opposed to tinted (0 is tinted, 1 is modulated). The tint power affects the curve of how much of the color range to tint."),
		{ _field_struct, "color curve", "interpolated by external input", &color_function_named_struct },
		{ _field_real_fraction, "modulation factor", nullptr, nullptr, "[0,1]" },
		{ _field_real, "tint power", nullptr, nullptr, "[0.1, 16]" },
		FIELD_IFP_END(),
		{ _field_terminator }
	};

	STRINGS(lens_flare_reflection_flags_definition)
	{
		"rotate from center of screen",
		"radius scaled by distance",
		"radius scaled by occlusion factor",
		"ignore external color",
		"lock to flare X",
		"lock to flare Y",
		"proximity to center as function input#The input to the curves below should be multiplied by 1 if at the center of the screen and 0 if at the edge",
		"mirror across flare#Also renders this reflection\'s mirror image across the flare center",
		"disabled for debugging",
		"flip U coordinate",
		"flip V coordinate",
		"draw in world space instead of screen space"
	};
	STRING_LIST(lens_flare_reflection_flags_definition, lens_flare_reflection_flags_definition_strings, _countof(lens_flare_reflection_flags_definition_strings));

	#define LENS_FLARE_SCALAR_ANIMATION_BLOCK_ID { 0x70D82126, 0xAABD40BB, 0xA37A03B0, 0x9D77D10B }
	TAG_STRUCT(
		lens_flare_scalar_animation_block,
		"lens_flare_scalar_animation_block",
		"lens_flare_scalar_animation_block",
		"s_lens_flare_scalar_animation_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LENS_FLARE_SCALAR_ANIMATION_BLOCK_ID)
	{
		{ _field_struct, "function", &scalar_function_named_struct },
		{ _field_terminator }
	};

	#define LENS_FLARE_STRUCT_DEFINITION_ID { 0xDA19E8C2, 0xEFC54593, 0xAB4A3192, 0x74E25FCB }
	TAG_STRUCT(
		lens_flare_struct_definition,
		"lens_flare_struct_definition",
		"lens_flare_struct_definition",
		"s_lens_flare_struct_definition",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LENS_FLARE_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("LENS FLARE", nullptr),
		{ _field_angle, "falloff angle", nullptr, "degrees" },
		{ _field_angle, "cutoff angle", nullptr, "degrees" },
		FIELD_EXPLANATION("OCCLUSION", "Occlusion factor affects overall lens flare brightness and can also affect scale. Occlusion never affects rotation."),
		{ _field_long_integer, "occlusion reflection index", "occlusion information will be generated against the size of this reflection" },
		{ _field_real, "occlusion offset distance", "distance along offset direction used to test occlusion", "world units" },
		{ _field_short_enum, "occlusion offset direction", &lens_flare_occlusion_offset_enum_definition },
		FIELD_PAD("PANTS", 2),
		{ _field_real, "occlusion inner radius scale", "percent of the corona to occlude against (ie 0.25, 0.125, etc)" },
		{ _field_real, "near fade begin distance", "distance where the lens flare starts to fade in", "world units" },
		{ _field_real, "near fade end distance", "distance where the lens flare is fully faded in", "world units" },
		{ _field_real, "near fade distance", "distance at which the lens flare brightness is maximum", "world units" },
		{ _field_real, "far fade distance", "distance at which the lens flare brightness is minimum; set to zero to disable distance fading", "world units" },
		{ _field_tag_reference, "bitmap", &bitmap_group_reference$2 },
		{ _field_word_flags, "flags", &lens_flare_flags_definition },
		{ _field_short_integer, "runtime flags" },
		{ _field_short_enum, "rotation function", &lens_flare_corona_rotation_function_enum_definition },
		FIELD_PAD("WWZC", 2),
		{ _field_angle, "rotation function scale", nullptr, "degrees" },
		FIELD_EXPLANATION("EFFECT PARAMETERS", "Only affects lens flares created by effects."),
		{ _field_short_enum, "falloff function", &global_reverse_transition_functions_enum },
		FIELD_PAD("COYUTLR", 2),
		{ _field_block, "reflections", &lens_flare_reflection_block_block },
		FIELD_EXPLANATION("ANIMATION", nullptr),
		{ _field_word_flags, "animation flags", &lens_flare_animation_flags_definition },
		FIELD_PAD("AQVC", 2),
		{ _field_block, "time brightness", &lens_flare_scalar_animation_block_block },
		{ _field_block, "age brightness", &lens_flare_scalar_animation_block_block },
		{ _field_block, "time color", &lens_flare_color_animation_block_block },
		{ _field_block, "age color", &lens_flare_color_animation_block_block },
		{ _field_block, "time rotation", &lens_flare_scalar_animation_block_block },
		{ _field_block, "age rotation", &lens_flare_scalar_animation_block_block },
		{ _field_terminator }
	};

	STRINGS(lens_flare_occlusion_offset_enum_definition)
	{
		"toward viewer",
		"marker forward",
		"none"
	};
	STRING_LIST(lens_flare_occlusion_offset_enum_definition, lens_flare_occlusion_offset_enum_definition_strings, _countof(lens_flare_occlusion_offset_enum_definition_strings));

	STRINGS(lens_flare_flags_definition)
	{
		"rotate occlusion testing box with lens flare#otherwise remains aligned with screen. turn on render_debug_lens_flares and look at green box",
		"no occlusion test",
		"only render in first person",
		"only render in third person",
		"use simple occlusion box test#ignore fancy occlusion box scaling - useful for very big or very far away lens flares (skybox flares, etc)",
		"no reflection opacity feedback#unchecked, each reflection evaluates its opacity from the previous reflection in the list",
		"scale by marker",
		"don\'t autofade#otherwise fade based on effect time, for effect attachments only",
		"don\'t render while zoomed"
	};
	STRING_LIST(lens_flare_flags_definition, lens_flare_flags_definition_strings, _countof(lens_flare_flags_definition_strings));

	STRINGS(lens_flare_corona_rotation_function_enum_definition)
	{
		"none",
		"rotation A",
		"rotation B",
		"rotation-translation",
		"translation"
	};
	STRING_LIST(lens_flare_corona_rotation_function_enum_definition, lens_flare_corona_rotation_function_enum_definition_strings, _countof(lens_flare_corona_rotation_function_enum_definition_strings));

	STRINGS(lens_flare_animation_flags_definition)
	{
		"synchronized"
	};
	STRING_LIST(lens_flare_animation_flags_definition, lens_flare_animation_flags_definition_strings, _countof(lens_flare_animation_flags_definition_strings));

	#define LIGHT_COLOR_FUNCTION_STRUCT_ID { 0x3DBB8F1A, 0x54F94FD0, 0x9D24DA91, 0x297A3078 }
	TAG_STRUCT(
		light_color_function_struct,
		"light_color_function_struct",
		"light_color_function_struct",
		"s_light_color_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIGHT_COLOR_FUNCTION_STRUCT_ID)
	{
		{ _field_string_id, "Input Variable", _field_id_function_input_scalar },
		{ _field_string_id, "Range Variable", _field_id_function_input_range },
		{ _field_short_enum, "Output Modifier", &output_mod_enum$2, _field_id_function_output_modifier },
		FIELD_PAD("BVCG", 2),
		{ _field_string_id, "Output Modifier Input", _field_id_function_output_modifier_input },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	STRINGS(output_mod_enum$2)
	{
		" ",
		"Plus",
		"Times"
	};
	STRING_LIST(output_mod_enum$2, output_mod_enum$2_strings, _countof(output_mod_enum$2_strings));

	#define LIGHT_CONE_STRUCT_DEFINITION_ID { 0xEA23F17B, 0x58F148D7, 0xAD1DFE08, 0xBDD37574 }
	TAG_STRUCT(
		light_cone_struct_definition,
		"light_cone_struct_definition",
		"light_cone_struct_definition",
		"s_light_cone_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIGHT_CONE_STRUCT_DEFINITION_ID)
	{
		{ _field_byte_flags, "flags", &lightconeflags },
		FIELD_PAD("gosh", 3),
		FIELD_CUSTOM("material", _tag_field_custom_type_tag_group_template),
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "actual material?", &material_struct },
		FIELD_HIDE_END(),
		{ _field_real, "angle fade range", nullptr, "degrees" },
		{ _field_real, "angle fade cutoff", nullptr, "degrees" },
		{ _field_real, "far fade range", nullptr, "wus" },
		{ _field_real, "far fade cutoff", nullptr, "wus" },
		{ _field_terminator }
	};

	STRINGS(lightconeflags)
	{
		"disabled in split-screen"
	};
	STRING_LIST(lightconeflags, lightconeflags_strings, _countof(lightconeflags_strings));

	#define LIGHT_RIG_STRUCT_DEFINITION_ID { 0xE085FEC, 0xFF264344, 0x9801B28D, 0xE302AD8D }
	TAG_STRUCT(
		light_rig_struct_definition,
		"light_rig_struct_definition",
		"light_rig_struct_definition",
		"s_light_rig_struct_definition",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIGHT_RIG_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Character Light Rig", nullptr),
		FIELD_CUSTOM("Environment vmf lobe weight", _tag_field_custom_type_slider),
		{ _field_real, "Environment vmf lobe weight", _tag_field_custom_type_slider },
		{ _field_real_rgb_color, "Rig fill color" },
		FIELD_CUSTOM("Rig fill scale", _tag_field_custom_type_slider),
		{ _field_real, "Rig fill scale", _tag_field_custom_type_slider },
		{ _field_block, "Directional light rigs", &directionallightrigblock_block },
		{ _field_real_rgb_color, "Rig vmf lobe color" },
		FIELD_CUSTOM("Rig vmf lobe intensity", _tag_field_custom_type_slider),
		{ _field_real, "Rig vmf lobe intensity", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Rig vmf lobe theta", _tag_field_custom_type_slider),
		{ _field_real, "Rig vmf lobe theta", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Rig vmf lobe phi", _tag_field_custom_type_slider),
		{ _field_real, "Rig vmf lobe phi", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Rig vmf lobe scale", _tag_field_custom_type_slider),
		{ _field_real, "Rig vmf lobe scale", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Rig vmf lobe vs fill scale", _tag_field_custom_type_slider),
		{ _field_real, "Rig vmf lobe vs fill scale", _tag_field_custom_type_slider },
		{ _field_terminator }
	};

	#define LIGHT_SCALAR_FUNCTION_STRUCT_ID { 0x26AA4A83, 0x42B4434A, 0x93ACA3CB, 0x8A920CD }
	TAG_STRUCT(
		light_scalar_function_struct,
		"light_scalar_function_struct",
		"light_scalar_function_struct",
		"s_light_scalar_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIGHT_SCALAR_FUNCTION_STRUCT_ID)
	{
		{ _field_string_id, "Input Variable", _field_id_function_input_scalar },
		{ _field_string_id, "Range Variable", _field_id_function_input_range },
		{ _field_short_enum, "Output Modifier", &output_mod_enum$2, _field_id_function_output_modifier },
		FIELD_PAD("BVCG", 2),
		{ _field_string_id, "Output Modifier Input", _field_id_function_output_modifier_input },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define LIGHT_STRUCT_DEFINITION_ID { 0x671EB9F2, 0xB6AF482D, 0x902D0F25, 0xEDB665A1 }
	TAG_STRUCT(
		light_struct_definition,
		"light_struct_definition",
		"light_struct_definition",
		"s_light_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIGHT_STRUCT_DEFINITION_ID)
	{
		{ _field_struct, "Midnight_Light_Parameters", &midnight_light_struct },
		{ _field_terminator }
	};

	#define LIGHT_VOLUME_DEFINITION_BLOCK_ID { 0x7E3CF99B, 0xB85C4AF7, 0x8F990018, 0xB1E1DD8A }
	TAG_STRUCT(
		light_volume_definition_block,
		"light_volume_definition_block",
		"light_volume_definition_block",
		"s_light_volume_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIGHT_VOLUME_DEFINITION_BLOCK_ID)
	{
		FIELD_IFP_BEGIN(),
		{ _field_string_id, "light_volume name" },
		FIELD_CUSTOM("material", _tag_field_custom_type_tag_group_template),
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "actual material?", &material_struct },
		FIELD_HIDE_END(),
		{ _field_word_flags, "appearance flags", &light_volume_appearance_flags },
		FIELD_PAD("SONGWEOINGEW", 2),
		{ _field_real, "brightness ratio", "avg. brightness head-on/side-view" },
		{ _field_long_flags, "flags", &light_volume_flags },
		{ _field_real, "LOD in distance", "defaults to 0.0, ignored if 'lod enabled' not checked above" },
		{ _field_real, "LOD feather in delta", "defaults to 0.0, ignored if 'lod enabled' not checked above" },
		{ _field_real, "inverse LOD feather in" },
		{ _field_real, "LOD out distance", "defaults to 30.0, ignored if 'lod enabled' not checked above" },
		{ _field_real, "LOD feather out delta", "defaults to 10.0, ignored if 'lod enabled' not checked above" },
		{ _field_real, "inverse LOD feather out" },
		{ _field_struct, "length", &light_volume_property_real },
		{ _field_struct, "offset", &light_volume_property_real },
		{ _field_struct, "profile_density", &light_volume_property_real },
		{ _field_struct, "profile_length", &light_volume_property_real },
		{ _field_struct, "profile_thickness", &light_volume_property_real },
		{ _field_struct, "profile_color", &light_volume_property_real_rgb_color },
		{ _field_struct, "profile_alpha", &light_volume_property_real },
		{ _field_struct, "profile_intensity", &light_volume_property_real },
		FIELD_IFP_END(),
		{ _field_dword_integer, "runtime m_constant_per_profile_properties" },
		{ _field_dword_integer, "runtime m_used_states" },
		{ _field_dword_integer, "runtime m_max_profile_count" },
		{ _field_struct, "runtime m_gpu_data", &gpu_property_function_color_struct },
		{ _field_block, "precompiled vertices", &light_volume_precompiled_vert_block_block },
		{ _field_terminator }
	};

	STRING_LIST(light_volume_appearance_flags, empty_string_list, 0);

	STRINGS(light_volume_flags)
	{
		"lod enabled#if not checked, the following flags do not matter, nor do LOD parameters below",
		"lod always 1.0{ignore lod (render always)}",
		"lod same in splitscreen",
		"disable precompiled profiles",
		"force precompile profiles",
		"can be low res",
		"precompiled!"
	};
	STRING_LIST(light_volume_flags, light_volume_flags_strings, _countof(light_volume_flags_strings));

	#define LIGHT_VOLUME_PRECOMPILED_VERT_BLOCK_ID { 0x12FEF688, 0x36D54ACF, 0xAF16F740, 0x2A42B196 }
	TAG_STRUCT(
		light_volume_precompiled_vert_block,
		"light_volume_precompiled_vert_block",
		"light_volume_precompiled_vert_block",
		"s_light_volume_precompiled_vert_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIGHT_VOLUME_PRECOMPILED_VERT_BLOCK_ID)
	{
		{ _field_word_integer, "r" },
		{ _field_word_integer, "g" },
		{ _field_word_integer, "b" },
		{ _field_word_integer, "thickness" },
		{ _field_terminator }
	};

	#define LIGHT_VOLUME_PROPERTY_REAL_ID { 0xBC2E916E, 0x13C1459C, 0x82BC6E0D, 0x888CE0DD }
	TAG_STRUCT(
		light_volume_property_real,
		"light_volume_property_real",
		"light_volume_property_real",
		"s_light_volume_property_real",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIGHT_VOLUME_PROPERTY_REAL_ID)
	{
		{ _field_char_enum, "Input Variable", &light_volume_state_input_enum, _field_id_function_input_scalar },
		{ _field_char_enum, "Range Variable", &light_volume_state_input_enum, _field_id_function_input_range },
		{ _field_char_enum, "Output Modifier", &output_mod_enum$4, _field_id_function_output_modifier },
		{ _field_char_enum, "Output Modifier Input", &light_volume_state_input_enum, _field_id_function_output_modifier_input },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_real, "runtime m_constant_value" },
		{ _field_word_integer, "runtime m_flags" },
		FIELD_PAD("DSFDSGLKJ", 2),
		{ _field_terminator }
	};

	STRINGS(light_volume_state_input_enum)
	{
		"profile position",
		"game time",
		"light volume age",
		"light volume random",
		"light volume correlation 1",
		"light volume correlation 2",
		"light volume lod",
		"effect a scale",
		"effect b scale",
		"invalid state --- please set again"
	};
	STRING_LIST(light_volume_state_input_enum, light_volume_state_input_enum_strings, _countof(light_volume_state_input_enum_strings));

	STRINGS(output_mod_enum$4)
	{
		" ",
		"Plus",
		"Times"
	};
	STRING_LIST(output_mod_enum$4, output_mod_enum$4_strings, _countof(output_mod_enum$4_strings));

	#define LIGHT_VOLUME_PROPERTY_REAL_RGB_COLOR_ID { 0x59110FA9, 0x9D244BEE, 0x8CBB0FF2, 0x3A822ECF }
	TAG_STRUCT(
		light_volume_property_real_rgb_color,
		"light_volume_property_real_rgb_color",
		"light_volume_property_real_rgb_color",
		"s_light_volume_property_real_rgb_color",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIGHT_VOLUME_PROPERTY_REAL_RGB_COLOR_ID)
	{
		{ _field_char_enum, "Input Variable", &light_volume_state_input_enum, _field_id_function_input_scalar },
		{ _field_char_enum, "Range Variable", &light_volume_state_input_enum, _field_id_function_input_range },
		{ _field_char_enum, "Output Modifier", &output_mod_enum$4, _field_id_function_output_modifier },
		{ _field_char_enum, "Output Modifier Input", &light_volume_state_input_enum, _field_id_function_output_modifier_input },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_real, "runtime m_constant_value" },
		{ _field_word_integer, "runtime m_flags" },
		FIELD_PAD("DSFDSGLKJ", 2),
		{ _field_terminator }
	};

	#define LIGHT_VOLUME_SYSTEM_STRUCT_DEFINITION_ID { 0x668829E0, 0x9E2E4295, 0xACE1F43F, 0x67789BC }
	TAG_STRUCT(
		light_volume_system_struct_definition,
		"light_volume_system_struct_definition",
		"light_volume_system_struct_definition",
		"s_light_volume_system_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIGHT_VOLUME_SYSTEM_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "light_volumes", &light_volume_definition_block_block },
		{ _field_terminator }
	};

	#define LIGHTMAP_MODEL_GLOBALS_STRUCT_DEFINITION_ID { 0x6B8CA05A, 0xD02345D2, 0xAB8CB22B, 0x1234EE33 }
	TAG_STRUCT(
		lightmap_model_globals_struct_definition,
		"lightmap_model_globals_struct_definition",
		"lightmap_model_globals_struct_definition",
		"s_lightmap_model_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIGHTMAP_MODEL_GLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "Lightmapped Models", &lightmap_model_reference_block_block },
		{ _field_terminator }
	};

	#define LIGHTMAP_MODEL_REFERENCE_BLOCK_ID { 0xD9134E31, 0xEE313145, 0x9A55ECD4, 0x75AEAA8B }
	TAG_STRUCT(
		lightmap_model_reference_block,
		"lightmap_model_reference_block",
		"lightmap_model_reference_block",
		"s_lightmap_model_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIGHTMAP_MODEL_REFERENCE_BLOCK_ID)
	{
		{ _field_tag_reference, "Model Reference", &model_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(model_group_reference, MODEL_TAG);

	#define LIGHTMAPPER_GLOBALS_STRUCT_DEFINITION_ID { 0x6A05AB8C, 0xD07B4982, 0x8DB8412B, 0x526205C9 }
	TAG_STRUCT(
		lightmapper_globals_struct_definition,
		"lightmapper_globals_struct_definition",
		"lightmapper_globals_struct_definition",
		"s_lightmapper_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIGHTMAPPER_GLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "Version" },
		FIELD_GROUP_BEGIN("GLOBAL QUALITY SETTINGS"),
		{ _field_struct, "Global lightmapper settings", &global_lightmap_global_settings_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("LOCAL SETTINGS"),
		{ _field_struct, "Local lightmapper settings", &global_lightmap_local_settings_struct },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define LIMITED_HINGE_CONSTRAINTS_BLOCK_ID { 0xCA7D0DCC, 0x98DD4A69, 0x99C928CE, 0xB478F286 }
	TAG_STRUCT(
		limited_hinge_constraints_block,
		"limited_hinge_constraints_block",
		"limited_hinge_constraints_block",
		"s_limited_hinge_constraints_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIMITED_HINGE_CONSTRAINTS_BLOCK_ID)
	{
		{ _field_struct, "constraint bodies", &constraint_bodies_struct },
		FIELD_PAD("TC", 4),
		{ _field_real, "limit friction" },
		{ _field_real, "limit min angle" },
		{ _field_real, "limit max angle" },
		{ _field_terminator }
	};

	#define LIST_SHAPES_BLOCK_STRUCT_ID { 0xB12BCE87, 0xDE7F4555, 0xAB450E06, 0x37A15489 }
	TAG_STRUCT(
		list_shapes_block_struct,
		"list_shapes_block_struct",
		"list_shapes_block_struct",
		"s_list_shapes_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LIST_SHAPES_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "shape reference", &havok_shape_reference_struct },
		{ _field_long_integer, "collision filter" },
		{ _field_long_integer, "shape size" },
		{ _field_long_integer, "num child shapes" },
		{ _field_terminator }
	};

	#define LISTS_BLOCK_ID { 0xD663F86E, 0xB8D94D62, 0x922BA3C3, 0xBB29D488 }
	TAG_STRUCT(
		lists_block,
		"lists_block",
		"lists_block",
		"s_lists_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LISTS_BLOCK_ID,
		4)
	{
		{ _field_struct, "base", &havok_shape_collection_struct_2010_2 },
		{ _field_long_integer, "field pointer skip", _field_id_zero_data },
		{ _field_long_integer, "child shapes size" },
		{ _field_long_integer, "child shapes capacity" },
		FIELD_PAD("nail_in_dick", 12),
		{ _field_real_vector_3d, "aabb half extents" },
		{ _field_real, "havok w aabb half extents" },
		{ _field_real_vector_3d, "aabb center" },
		{ _field_real, "havok w aabb center" },
		{ _field_long_integer, "enabled children0" },
		{ _field_long_integer, "enabled children1" },
		{ _field_long_integer, "enabled children2" },
		{ _field_long_integer, "enabled children3" },
		{ _field_long_integer, "enabled children4" },
		{ _field_long_integer, "enabled children5" },
		{ _field_long_integer, "enabled children6" },
		{ _field_long_integer, "enabled children7" },
		{ _field_terminator }
	};

	#define LOADSCREENBLOCK_ID { 0x2E46384A, 0xEF8849AA, 0xB23A75A8, 0xFD5DEE4F }
	TAG_STRUCT(
		loadscreenblock,
		"loadScreenBlock",
		"loadScreenBlock",
		"s_loadscreenblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LOADSCREENBLOCK_ID)
	{
		{ _field_long_flags, "flags", &loadscreenflags },
		FIELD_EXPLANATION("Model parameters", nullptr),
		{ _field_tag_reference, "source render model", &render_model_group_reference$4 },
		{ _field_real, "spawn rate multiplier", "the higher this number, the sooner the model is fully spawned in" },
		{ _field_real_point_3d, "source scan position", "the direction in model space that the scan starts from.\nIgnored if do not sort vertex order flag is set above" },
		{ _field_real, "scale factor", "model scale to match camera space" },
		FIELD_EXPLANATION("Camera parameters", nullptr),
		{ _field_real_point_3d, "camera position" },
		{ _field_real_point_3d, "camera target position" },
		{ _field_real, "camera orbit period", "0 means camera is stationary" },
		FIELD_EXPLANATION("Particles", "The following control particle behavior"),
		{ _field_real, "particle scale", "scale factor for individual particles" },
		{ _field_real, "particle acceleration", "This is the acceleration rate when particles spawn in and move to their ultimate destination.  Higher numbers move faster." },
		{ _field_real, "particle initial offset multiplier", "If flag particles spawn radially is set, this is the multiple of the particle location along the radial axis.\nIf not, this the random spawn distance from the particle destination." },
		FIELD_EXPLANATION("Generated data", "the following are generated from running the tool generate-loadscreen command on this tag."),
		{ _field_long_integer, "computed model vertex count", nullptr, "vertices" },
		{ _field_block, "model vertices", &vertexblock_block },
		{ _field_terminator }
	};

	STRINGS(loadscreenflags)
	{
		"resolve two sided",
		"do not sort vertex order",
		"particles spawn radially#see particle initial offset multiplier"
	};
	STRING_LIST(loadscreenflags, loadscreenflags_strings, _countof(loadscreenflags_strings));

	TAG_REFERENCE(render_model_group_reference$4, RENDER_MODEL_TAG);

	#define LOADSCREENREFERENCEBLOCK_ID { 0x56847268, 0xE9764C18, 0xBDD617A3, 0xF04F21D2 }
	TAG_STRUCT(
		loadscreenreferenceblock,
		"loadScreenReferenceBlock",
		"loadScreenReferenceBlock",
		"s_loadscreenreferenceblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LOADSCREENREFERENCEBLOCK_ID)
	{
		FIELD_EXPLANATION("Map IDs", "These are pulled from levels_map_id_constants.h\nk_mp_z00_testchamber_map_id\t\t\t10777)\nk_mp_wraparound_map_id\t\t\t\t\t10080)  \nk_mp_z05_cliffside_map_id              10085)  // complex \nk_mp_z11_valhalla_id\t\t\t\t\t10091)\nk_mp_ca_gore_valley_map_id\t\t\t\t10200)\nk_mp_ca_tower_map_id\t\t\t\t\t10202)\nk_mp_ca_warhouse_map_id\t\t\t\t10210)\nk_mp_ca_blood_cavern_map_id\t\t\t10225)\nk_mp_ca_blood_crash_map_id\t\t\t\t10226)\nk_mp_ca_forge_erosion_map_id\t\t\t10245)\nk_mp_ca_redoubt_map_id\t\t\t\t\t10252)\nk_mp_ca_forge_bonanza_map_id\t\t\t10255)\nk_mp_ca_forge_ravine_map_id\t\t\t10256)\nk_mp_ca_canyon_map_id\t\t\t\t\t10261)\nk_mp_zd_02_grind_map_id\t\t\t\t10102)\n\nk_ff81_courtyard_map_id\t\t\t\t11081)\nk_ff82_scurve_map_id\t\t\t\t\t11071)\nk_ff83_breach_map_id\t\t\t\t\t11061)\nk_ff84_temple_map_id\t\t\t\t\t11084)\nk_ff85_island_map_id\t\t\t\t\t11091)\nk_ff86_sniperalley_map_id\t\t\t\t11101)\nk_ff87_chopperbowl_map_id\t\t\t\t11111)\nk_ff88_horseshou_map_id\t\t\t\t11121)\nk_ff89_infinity_map_id\t\t\t\t\t11131)\nk_ff90_fortsw_map_id\t\t\t\t\t11141)\n\nk_sp_intro_map_id\t\t\t\t\t\t12000)\nk_sp_m10_crash_map_id\t\t\t\t\t12010)\nk_sp_m20_haven_map_id\t\t\t\t\t12020)\nk_sp_m30_cryptum_map_id\t\t\t\t12030)\nk_sp_m40_invasion_map_id\t\t\t\t12040)\nk_sp_m60_rescue_map_id\t\t\t\t\t12060)\nk_sp_m70_liftoff_map_id\t\t\t\t12070)\nk_sp_m80_delta_map_id\t\t\t\t\t12080)\nk_sp_m90_sacrifice_map_id\t\t\t\t12090)\n\nk_sp_max_environment_solo_map_id\t\t12499)\n"),
		{ _field_long_integer, "Map ID", "Only valid for main menu - otherwise always use first reference" },
		{ _field_tag_reference, "Load Screen Reference", &load_screen_group_reference },
		{ _field_real, "Tint Gradient Lookup V Coordinate", "Value between 0.0 and 1.0 determines which line to use for tint.\nA negative value will choose a random tint from the palette." },
		{ _field_terminator }
	};

	TAG_REFERENCE(load_screen_group_reference, LOAD_SCREEN_TAG);

	#define LOAD_AND_CRUISE_BLOCK_ID { 0x9CF23975, 0xE2494C32, 0x95369BF4, 0x4DD24649 }
	TAG_STRUCT(
		load_and_cruise_block,
		"load_and_cruise_block",
		"load_and_cruise_block",
		"s_load_and_cruise_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LOAD_AND_CRUISE_BLOCK_ID)
	{
		{ _field_string_id, "load cruise function" },
		{ _field_long_block_index, "attachment index", &global_object_attachment_block_block },
		{ _field_terminator }
	};

	#define LOADOUT_DEFINITION_STRUCT_ID { 0x5C0C246C, 0x32674BAA, 0x9C95C60D, 0x7F5607D6 }
	TAG_STRUCT(
		loadout_definition_struct,
		"loadout_definition_struct",
		"loadout_definition_struct",
		"s_loadout_definition_struct",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LOADOUT_DEFINITION_STRUCT_ID)
	{
		{ _field_string_id, "loadout name" },
		{ _field_string_id, "app1", "name of an element from custom_app_globals/custom_apps.  Can be left empty." },
		{ _field_string_id, "app2", "see above" },
		{ _field_string_id, "initial primary weapon", "name of an element from global starting weapons block. Other values:\n(empty) - unchanged\nunchanged - unchanged\ndefault - take from starting profiles in scenario\nnone - no weapon\nrandom - use random item from valid starting weapons" },
		{ _field_string_id, "initial primary weapon variant name" },
		{ _field_string_id, "initial secondary weapon", "see above" },
		{ _field_string_id, "initial secondary weapon variant name" },
		{ _field_string_id, "initial equipment", "see above" },
		{ _field_char_enum, "initial grenade count", &player_trait_initial_grenade_count_enum },
		FIELD_PAD("SDJCESLRN", 3),
		{ _field_terminator }
	};

	STRINGS(player_trait_initial_grenade_count_enum)
	{
		"unchanged",
		"map_default",
		"0",
		"1_frag",
		"2_frag",
		"1_plasma",
		"2_plasma",
		"1_type2",
		"2_type2",
		"1_type3",
		"2_type3",
		"1_type4",
		"2_type4",
		"1_type5",
		"2_type5",
		"1_type6",
		"2_type6",
		"1_type7",
		"2_type7"
	};
	STRING_LIST(player_trait_initial_grenade_count_enum, player_trait_initial_grenade_count_enum_strings, _countof(player_trait_initial_grenade_count_enum_strings));

	#define LOADOUT_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID { 0x5693EB43, 0x326642CF, 0x9E14B116, 0x47BA7EC3 }
	TAG_STRUCT(
		loadout_globals_definition_struct_definition,
		"loadout_globals_definition_struct_definition",
		"loadout_globals_definition_struct_definition",
		"s_loadout_globals_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LOADOUT_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "loadouts", &loadout_definition_block_block },
		{ _field_block, "loadout palettes", &loadout_palette_definition_block_block },
		{ _field_block, "loadout names", &loadout_name_block_block },
		{ _field_block, "default custom loadouts", &custom_loadout_defaults_block_block },
		{ _field_terminator }
	};

	#define LOADOUT_INDEX_BLOCK_ID { 0x9F5C94AF, 0xDA6A4E2D, 0x96F55A0D, 0x2ED3BCD3 }
	TAG_STRUCT(
		loadout_index_block,
		"loadout_index_block",
		"loadout_index_block",
		"s_loadout_index_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LOADOUT_INDEX_BLOCK_ID)
	{
		{ _field_short_block_index, "loadout", &loadout_definition_block_block },
		FIELD_PAD("padding0", 2),
		{ _field_terminator }
	};

	#define LOADOUT_NAME_BLOCK_ID { 0xEC398708, 0x26884E12, 0x8AFC21CD, 0xFCC7EF66 }
	TAG_STRUCT(
		loadout_name_block,
		"loadout_name_block",
		"loadout_name_block",
		"s_loadout_name_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LOADOUT_NAME_BLOCK_ID)
	{
		{ _field_string_id, "display name" },
		{ _field_terminator }
	};

	#define LOADOUT_PALETTE_DEFINITION_BLOCK_ID { 0xEA3BF1F1, 0x1E794E79, 0xA7A6CFF0, 0x12B16524 }
	TAG_STRUCT(
		loadout_palette_definition_block,
		"loadout_palette_definition_block",
		"loadout_palette_definition_block",
		"s_loadout_palette_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LOADOUT_PALETTE_DEFINITION_BLOCK_ID)
	{
		{ _field_string_id, "palette name" },
		{ _field_block, "loadout choices", &loadout_index_block_block },
		{ _field_terminator }
	};

	#define LOCATION_NAME_BLOCK_ID { 0x4DCE9A5, 0x6A094478, 0x8B8EB132, 0x2A8C5A6A }
	TAG_STRUCT(
		location_name_block,
		"location_name_block",
		"location_name_block",
		"s_location_name_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LOCATION_NAME_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	#define LOCATION_NAME_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID { 0xEB8D99C2, 0xBA8D4F05, 0xBC2A8672, 0xFC4A012A }
	TAG_STRUCT(
		location_name_globals_definition_struct_definition,
		"location_name_globals_definition_struct_definition",
		"location_name_globals_definition_struct_definition",
		"s_location_name_globals_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LOCATION_NAME_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "location names", &location_name_block_block },
		{ _field_tag_reference, "location name string list", &multilingual_unicode_string_list_group_reference },
		{ _field_terminator }
	};

	#define LOCATION_OFFSETS_ARRAY_DEFINITION_STRUCT_DEFINITION_ID { 0x18557C2E, 0x60C811E0, 0xA9F9FD26, 0xE0D72085 }
	TAG_STRUCT(
		location_offsets_array_definition_struct_definition,
		"location_offsets_array_definition",
		"location_offsets_array_definition",
		"s_location_offsets_array_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LOCATION_OFFSETS_ARRAY_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "offset" },
		{ _field_terminator }
	};

	#define LOOPING_SOUND_DETAIL_BLOCK_ID { 0xA617A95E, 0x4F7447C1, 0xB14046E5, 0xAE77AE0F }
	VERSIONED_TAG_STRUCT(
		looping_sound_detail_block,
		"looping_sound_detail_block",
		"looping_sound_detail_block",
		"s_looping_sound_detail_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LOOPING_SOUND_DETAIL_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 13 },
		{ _field_string_id, "name" },
		{ _field_tag_reference, "sound", &sound_old_group_sound_group_reference },
		FIELD_EXPLANATION("frequency of play", nullptr),
		{ _field_long_enum, "period type", &looping_sound_detail_period_type_enum },
		{ _field_real_bounds, "random period bounds", "the time between successive playings of this sound will be randomly selected from this range.", "seconds" },
		{ _field_real, "detail gain", nullptr, "dB", _field_id_decibels },
		{ _field_real, "fade out duration", nullptr, "seconds" },
		{ _field_long_enum, "fade out mode", &looping_sound_fade_modes },
		{ _field_long_flags, "flags", &looping_sound_detail_flags },
		FIELD_EXPLANATION("random spatialization", "if the flag above is not set, this detail will be randomly spatialized according to the following constraints. if both lower and upper bounds are zero for any of the following fields, the sound\'s position will be randomly selected from all possible directions or distances."),
		{ _field_angle_bounds, "yaw bounds", "the sound's position along the horizon will be randomly selected from this range.", "degrees" },
		{ _field_angle_bounds, "pitch bounds", "the sound's position above (positive values) or below (negative values) the horizon will be randomly selected from this range.", "degrees" },
		{ _field_real_bounds, "distance bounds", "the sound's distance (from its spatialized looping sound or from the listener if the looping sound is stereo) will be randomly selected from this range.", "world units" },
		
		{ _struct_version_mode_equal, 0, 10 },
		{ _field_tag_reference, "sound", &sound_old_group_sound_group_reference },
		FIELD_EXPLANATION("frequency of play", nullptr),
		{ _field_real_bounds, "random period bounds", "the time between successive playings of this sound will be randomly selected from this range.", "seconds" },
		{ _field_real, "gain", nullptr, "dB" },
		{ _field_long_flags, "flags", &looping_sound_detail_flags },
		FIELD_PAD("GEFTEE", 48),
		FIELD_EXPLANATION("random spatialization", "if the sound specified above is not stereo it will be randomly spatialized according to the following constraints. if both lower and upper bounds are zero for any of the following fields, the sound\'s position will be randomly selected from all possible directions or distances."),
		{ _field_angle_bounds, "yaw bounds", "the sound's position along the horizon will be randomly selected from this range.", "degrees" },
		{ _field_angle_bounds, "pitch bounds", "the sound's position above (positive values) or below (negative values) the horizon will be randomly selected from this range.", "degrees" },
		{ _field_real_bounds, "distance bounds", "the sound's distance (from its spatialized looping sound or from the listener if the looping sound is stereo) will be randomly selected from this range.", "world units" },
		
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(sound_old_group_sound_group_reference, TAG_REFERENCE_FLAG_RESOLVED_BY_GAME)
	{
		SOUND_OLD_TAG,
		SOUND_TAG,
		INVALID_TAG
	};

	STRINGS(looping_sound_detail_period_type_enum)
	{
		"ignores playback time",
		"relative to end of playback"
	};
	STRING_LIST(looping_sound_detail_period_type_enum, looping_sound_detail_period_type_enum_strings, _countof(looping_sound_detail_period_type_enum_strings));

	STRINGS(looping_sound_fade_modes)
	{
		"default",
		"linear",
		"equal power",
		"inverse power",
		"s curve"
	};
	STRING_LIST(looping_sound_fade_modes, looping_sound_fade_modes_strings, _countof(looping_sound_fade_modes_strings));

	STRINGS(looping_sound_detail_flags)
	{
		"don\'t play with alternate",
		"don\'t play without alternate",
		"start immediately with loop",
		"inherit scale from loop",
		"don\'t fade with loop"
	};
	STRING_LIST(looping_sound_detail_flags, looping_sound_detail_flags_strings, _countof(looping_sound_detail_flags_strings));

	#define LOOPING_SOUND_TRACK_BLOCK_ID { 0x274E50ED, 0x4CB34CFA, 0x8469F40F, 0xEDAF50AC }
	TAG_STRUCT(
		looping_sound_track_block,
		"looping_sound_track_block",
		"looping_sound_track_block",
		"s_looping_sound_track_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LOOPING_SOUND_TRACK_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_word_flags, "flags", &looping_sound_track_flags },
		{ _field_short_enum, "output effect", &sound_effects_enum },
		{ _field_real, "gain", nullptr, "dB", _field_id_decibels },
		{ _field_tag_reference, "in", &sound_old_group_sound_group_reference },
		{ _field_tag_reference, "loop", &sound_old_group_sound_group_reference },
		{ _field_tag_reference, "out", &sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alt loop", &sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alt out", &sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alt trans in", &sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alt trans out", &sound_old_group_sound_group_reference },
		{ _field_real, "fade in duration", nullptr, "seconds" },
		{ _field_long_enum, "fade in mode", &looping_sound_fade_modes },
		{ _field_real, "fade out duration", nullptr, "seconds" },
		{ _field_long_enum, "fade out mode", &looping_sound_fade_modes },
		{ _field_real, "alt crossfade duration", nullptr, "seconds" },
		{ _field_long_enum, "alt crossfade mode", &looping_sound_fade_modes },
		{ _field_real, "alt fade out duration", nullptr, "seconds" },
		{ _field_long_enum, "alt fade out mode", &looping_sound_fade_modes },
		FIELD_EXPLANATION("Layer Settings", nullptr),
		{ _field_short_enum, "layer", &looping_sound_layers },
		{ _field_word_flags, "layer flags", &looping_sound_track_layer_flags },
		{ _field_real, "layer fade in duration", nullptr, "seconds" },
		{ _field_long_enum, "layer fade in mode", &looping_sound_fade_modes },
		{ _field_real, "layer fade out duration", nullptr, "seconds" },
		{ _field_long_enum, "layer fade out mode", &looping_sound_fade_modes },
		{ _field_terminator }
	};

	STRINGS(looping_sound_track_flags)
	{
		"fade in at start#the loop sound should fade in while the start sound is playing.",
		"fade out at stop#the loop sound should fade out while the stop sound is playing.",
		"fade out at alt stop#the alt loop sound should fade out while the alt stop sound is playing.",
		"crossfade alt loop#crossfade when switching between alt loop and loop.",
		"make fades wait for markers",
		"master surround sound track"
	};
	STRING_LIST(looping_sound_track_flags, looping_sound_track_flags_strings, _countof(looping_sound_track_flags_strings));

	STRINGS(sound_effects_enum)
	{
		"none",
		"output front speakers",
		"output rear speakers",
		"output center speakers"
	};
	STRING_LIST(sound_effects_enum, sound_effects_enum_strings, _countof(sound_effects_enum_strings));

	STRINGS(looping_sound_layers)
	{
		"none",
		"1",
		"2",
		"3",
		"4"
	};
	STRING_LIST(looping_sound_layers, looping_sound_layers_strings, _countof(looping_sound_layers_strings));

	STRINGS(looping_sound_track_layer_flags)
	{
		"make layer wait for markers"
	};
	STRING_LIST(looping_sound_track_layer_flags, looping_sound_track_layer_flags_strings, _countof(looping_sound_track_layer_flags_strings));

	#define LOOPING_SOUNDS_BLOCK_ID { 0x44B2F1E2, 0x220F4C4E, 0xBBEC6399, 0x48A923A2 }
	TAG_STRUCT(
		looping_sounds_block,
		"looping_sounds_block",
		"looping_sounds_block",
		"s_looping_sounds_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		LOOPING_SOUNDS_BLOCK_ID)
	{
		{ _field_tag_reference, "looping sound", &sound_looping_group_reference$2 },
		{ _field_terminator }
	};

	#define MACHINE_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0x266621B5, 0xFDB64754, 0x8FC9D2C5, 0xA7FF5BDF }
	TAG_STRUCT(
		machine_block_index_flags_block_struct,
		"machine_block_index_flags_block_struct",
		"machine_block_index_flags_block_struct",
		"s_machine_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MACHINE_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_machine_palette_block_block },
		{ _field_terminator }
	};

	#define MAGAZINE_OBJECTS_ID { 0x3EF33972, 0xC4AC4C51, 0x96B58412, 0x7427D4AC }
	VERSIONED_TAG_STRUCT(
		magazine_objects,
		"magazine_objects",
		"magazine_objects",
		"s_magazine_objects",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MAGAZINE_OBJECTS_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 3 },
		{ _field_short_integer, "rounds" },
		FIELD_PAD("DTDPY", 2),
		{ _field_tag_reference, "equipment", &equipment_group_reference },
		
		{ _struct_version_mode_equal, 0, 3 },
		{ _field_short_integer, "rounds" },
		FIELD_PAD("WKBB", 10),
		{ _field_tag_reference, "equipment", &equipment_group_reference },
		
		{ _field_terminator }
	};

	#define MAGAZINES_ID { 0xB8FCF9A4, 0xA0194C8E, 0x8CFE64C5, 0xB1CFC041 }
	VERSIONED_TAG_STRUCT(
		magazines,
		"magazines",
		"magazines",
		"s_magazines",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MAGAZINES_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 21 },
		{ _field_long_flags, "flags", &magazine_flags },
		{ _field_short_integer, "rounds recharged", nullptr, "per second" },
		{ _field_short_integer, "rounds total initial" },
		{ _field_short_integer, "rounds total maximum" },
		{ _field_short_integer, "rounds loaded maximum" },
		{ _field_short_integer, "runtime rounds inventory maximum" },
		{ _field_short_integer, "Ammopack rounds total initial", "AmmoPack armormod - alternate total_initial value due to AmmoPack" },
		{ _field_short_integer, "Ammopack rounds total maximum", "AmmoPack armormod - alternate total_maximum value due to armor mod AmmoPack" },
		FIELD_PAD("pad", 2),
		{ _field_real, "reload dialogue time", "the length of time we wait before saying the reload dialogue", "seconds" },
		{ _field_short_integer, "rounds reloaded" },
		FIELD_PAD("VJGZW", 2),
		{ _field_real, "chamber time", "the length of time it takes to chamber the next round", "seconds - NOT USED", FIELD_FLAG_UNKNOWN0 },
		FIELD_PAD("HPMIV", 8),
		FIELD_PAD("P", 16),
		{ _field_tag_reference, "reloading effect", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "reloading damage effect", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "chambering effect", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "chambering damage effect", &damage_effect_group_damage_response_definition_group_reference },
		FIELD_USELESS_PAD("value", 12),
		{ _field_block, "magazines", &magazine_objects_block },
		
		{ _struct_version_mode_equal, 0, 15 },
		{ _field_long_flags, "flags", &magazine_flags },
		{ _field_short_integer, "rounds recharged", nullptr, "per second" },
		{ _field_short_integer, "rounds total initial" },
		{ _field_short_integer, "rounds total maximum" },
		{ _field_short_integer, "rounds loaded maximum" },
		FIELD_PAD("NH", 8),
		{ _field_short_integer, "rounds reloaded" },
		FIELD_PAD("NWGAF", 2),
		{ _field_real, "chamber time", "the length of time it takes to chamber the next round", "seconds" },
		FIELD_PAD("HPMIV", 8),
		FIELD_PAD("P", 16),
		{ _field_tag_reference, "reloading effect", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "chambering effect", &sound_old_group_effect_group_reference },
		FIELD_PAD("M", 12),
		{ _field_block, "magazines", &magazine_objects_block },
		
		{ _field_terminator }
	};

	STRINGS(magazine_flags)
	{
		"wastes rounds when reloaded",
		"every round must be chambered",
		"magazine cannot change state while firing#will prevent reload until fire is complete (sticky det)",
		"allow overheated reload when empty",
		"bottomless inventory"
	};
	STRING_LIST(magazine_flags, magazine_flags_strings, _countof(magazine_flags_strings));

	#define MAIN_MENU_VOICEOVER_LINES_BLOCK_ID { 0xA2BD65AB, 0x8CF84DDF, 0x90B4297C, 0x4CE53C1B }
	TAG_STRUCT(
		main_menu_voiceover_lines_block,
		"main_menu_voiceover_lines_block",
		"main_menu_voiceover_lines_block",
		"s_main_menu_voiceover_lines_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MAIN_MENU_VOICEOVER_LINES_BLOCK_ID)
	{
		{ _field_tag_reference, "sound", &sound_group_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(sound_group_reference$2, SOUND_TAG, TAG_REFERENCE_FLAG_RESOLVED_BY_GAME);

	#define MAIN_MENU_VOICEOVER_STRUCT_DEFINITION_ID { 0xCA80030F, 0x173E410E, 0x8E0F3585, 0x39D36E05 }
	TAG_STRUCT(
		main_menu_voiceover_struct_definition,
		"main_menu_voiceover_struct_definition",
		"main_menu_voiceover_struct_definition",
		"s_main_menu_voiceover_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MAIN_MENU_VOICEOVER_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "lines", &main_menu_voiceover_lines_block_block },
		{ _field_terminator }
	};

	#define MANTIS_BLOCK_ID { 0x3D5289E7, 0xE2554038, 0xA70B311D, 0xAAE49B2B }
	TAG_STRUCT(
		mantis_block,
		"mantis_block",
		"mantis_block",
		"s_mantis_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MANTIS_BLOCK_ID)
	{
		{ _field_struct, "steering control", &vehicle_steering_control_struct },
		{ _field_struct, "turning control", &vehicle_turning_control_struct },
		FIELD_EXPLANATION("velocity control variables", nullptr),
		{ _field_real, "maximum forward speed" },
		{ _field_real, "maximum reverse speed" },
		{ _field_real, "speed acceleration" },
		{ _field_real, "speed deceleration" },
		{ _field_real, "maximum left slide" },
		{ _field_real, "maximum right slide" },
		{ _field_real, "slide acceleration" },
		{ _field_real, "slide deceleration" },
		{ _field_struct, "walker physics", &walker_physics_struct },
		{ _field_real, "walk cycle pause", "fraction of walkcycle at end for pause" },
		{ _field_short_integer, "stable planted legs", "number of legs mantis needs planted to be considered stable." },
		FIELD_PAD("pad", 2),
		{ _field_real, "time without plant buffer", "seconds" },
		{ _field_real, "not along up gravity scale", "0-1" },
		{ _field_real, "speed acceleration limit" },
		{ _field_real, "speed acceleration match scale" },
		{ _field_real, "slide acceleration limit" },
		{ _field_real, "slide acceleration match scale" },
		{ _field_real, "turn acceleration limit" },
		{ _field_real, "turn acceleration match scale" },
		FIELD_EXPLANATION("jumping", nullptr),
		{ _field_real, "jump set time", "seconds" },
		{ _field_real, "jump set interpolation fraction", "0-1, portion of set time spent interpolating into neutral stance" },
		{ _field_real, "jump leap time", "seconds" },
		{ _field_real, "jump recovery time", "seconds" },
		{ _field_real, "jump recovery fraction", "0-1, portion of recovery time spent interpolating into neutral stance" },
		{ _field_real, "jump leg set distance", "WU, amount foot moves up to get ready to jump" },
		{ _field_real, "jump leg distance", "WU, amount foot moves down when jumping" },
		{ _field_terminator }
	};

	#define MANUALBSPFLAGSREFERENCES_ID { 0x749519ED, 0x976649C5, 0x93B9867B, 0x7A6FAAF2 }
	TAG_STRUCT(
		manualbspflagsreferences,
		"manualBspFlagsReferences",
		"manualBspFlagsReferences",
		"s_manualbspflagsreferences",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MANUALBSPFLAGSREFERENCES_ID)
	{
		FIELD_CUSTOM("manual bsp flags", _tag_field_attributed_definition_scenario_object_manual_bsp_flags),
		{ _field_block, "references block", &scenariobspreferenceblock_block },
		{ _field_long_integer, "flags" },
		{ _field_terminator }
	};

	#define MAPVARIANTPALETTEDEPENDENCYBLOCK_ID { 0x2662643F, 0x4E854FC7, 0x9C8653EB, 0xF80B243D }
	TAG_STRUCT(
		mapvariantpalettedependencyblock,
		"mapVariantPaletteDependencyBlock",
		"mapVariantPaletteDependencyBlock",
		"s_mapvariantpalettedependencyblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MAPVARIANTPALETTEDEPENDENCYBLOCK_ID)
	{
		{ _field_tag, "tag" },
		{ _field_terminator }
	};

	#define MAPVARIANTRESOURCEMANIFEST_ID { 0x489BAAF5, 0x2DD44507, 0xB66346C4, 0x27F7ADCB }
	TAG_STRUCT(
		mapvariantresourcemanifest,
		"mapVariantResourceManifest",
		"mapVariantResourceManifest",
		"s_mapvariantresourcemanifest",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MAPVARIANTRESOURCEMANIFEST_ID)
	{
		{ _field_block, "attachedResourceOwners", &mapvariantpalettedependencyblock_block },
		{ _field_block, "topLevelResourceOwners", &mapvariantpalettedependencyblock_block },
		{ _field_block, "attachedResources", &resourcehandleblock_block },
		{ _field_block, "orphanedResources", &resourcehandleblock_block },
		{ _field_terminator }
	};

	#define MAP_LEAF_CONNECTION_INDEX_BLOCK_ID { 0xDE3F27ED, 0x242A469D, 0xAF139C96, 0xFB3C81EA }
	TAG_STRUCT(
		map_leaf_connection_index_block,
		"map_leaf_connection_index_block",
		"map_leaf_connection_index_block",
		"s_map_leaf_connection_index_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MAP_LEAF_CONNECTION_INDEX_BLOCK_ID)
	{
		{ _field_long_integer, "connection index" },
		{ _field_terminator }
	};

	#define MAP_LEAF_FACE_BLOCK_ID { 0x76C78229, 0x504B49E6, 0xAE70E1D0, 0x63A16B1E }
	TAG_STRUCT(
		map_leaf_face_block,
		"map_leaf_face_block",
		"map_leaf_face_block",
		"s_map_leaf_face_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MAP_LEAF_FACE_BLOCK_ID)
	{
		{ _field_long_integer, "node index" },
		{ _field_block, "vertices", &map_leaf_face_vertex_block_block },
		{ _field_terminator }
	};

	#define MAP_LEAF_FACE_VERTEX_BLOCK_ID { 0xF918DB0A, 0x67E04ADB, 0x9440FD77, 0x21A4734D }
	TAG_STRUCT(
		map_leaf_face_vertex_block,
		"map_leaf_face_vertex_block",
		"map_leaf_face_vertex_block",
		"s_map_leaf_face_vertex_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MAP_LEAF_FACE_VERTEX_BLOCK_ID)
	{
		{ _field_real_point_3d, "vertex" },
		{ _field_terminator }
	};

	#define MAP_VARIANT_OBJECT_VARIANT_BLOCK_ID { 0x904D356F, 0x1B284614, 0x87F7F4D0, 0x90A8594D }
	TAG_STRUCT(
		map_variant_object_variant_block,
		"map_variant_object_variant_block",
		"map_variant_object_variant_block",
		"s_map_variant_object_variant_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MAP_VARIANT_OBJECT_VARIANT_BLOCK_ID)
	{
		{ _field_string_id, "display name" },
		{ _field_tag_reference, "object", &object_group_reference$10 },
		{ _field_string_id, "variant name" },
		{ _field_struct, "resource dependencies", &mapvariantresourcemanifest },
		{ _field_terminator }
	};

	TAG_REFERENCE(object_group_reference$10, OBJECT_TAG);

	#define MAP_VARIANT_PALETTE_BLOCK_ID { 0x650FDFED, 0x967F4D74, 0xA8A4A448, 0x74D1A04C }
	TAG_STRUCT(
		map_variant_palette_block,
		"map_variant_palette_block",
		"map_variant_palette_block",
		"s_map_variant_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MAP_VARIANT_PALETTE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_byte_flags, "flags", &map_variant_palette_flags },
		FIELD_PAD("pad", 3),
		{ _field_block, "entries", &map_variant_palette_entry_block_block },
		{ _field_terminator }
	};

	STRINGS(map_variant_palette_flags)
	{
		"hidden#this palette is only visible in superforge, and objects within it are only editable in superforge"
	};
	STRING_LIST(map_variant_palette_flags, map_variant_palette_flags_strings, _countof(map_variant_palette_flags_strings));

	#define MAP_VARIANT_PALETTE_ENTRY_BLOCK_ID { 0x59340D8A, 0x6B2D46D7, 0x8684F40D, 0x41B5680C }
	TAG_STRUCT(
		map_variant_palette_entry_block,
		"map_variant_palette_entry_block",
		"map_variant_palette_entry_block",
		"s_map_variant_palette_entry_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MAP_VARIANT_PALETTE_ENTRY_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "variants", &map_variant_object_variant_block_block },
		{ _field_long_integer, "maximum allowed", "if this is <= 0, these are 'unlimited' (up to a reasonable code-defined maximum)" },
		{ _field_long_integer, "price per instance" },
		{ _field_terminator }
	};

	#define MAPPING_FUNCTION_ID { 0x5A14A98F, 0x53FA4484, 0x801068D4, 0xAF1459E }
	VERSIONED_TAG_STRUCT(
		mapping_function,
		"mapping_function",
		"mapping_function",
		"s_mapping_function",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MAPPING_FUNCTION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 3 },
		FIELD_HIDE_BEGIN(),
		{ _field_data, "data", &function_definition_data },
		FIELD_HIDE_END(),
		
		{ _struct_version_mode_equal, 1, 3 },
		FIELD_HIDE_BEGIN(),
		{ _field_block, "data", &byte_block_block },
		FIELD_HIDE_END(),
		
		{ _struct_version_mode_equal, 0, 11 },
		FIELD_HIDE_BEGIN(),
		{ _field_char_integer, "Function Type" },
		{ _field_byte_flags, "Flags", &function_flags },
		{ _field_char_integer, "Function 1" },
		{ _field_char_integer, "Function 2" },
		{ _field_rgb_color, "Color 0" },
		{ _field_rgb_color, "Color 1" },
		{ _field_rgb_color, "Color 2" },
		{ _field_rgb_color, "Color 3" },
		{ _field_block, "Values", &real_block_block },
		FIELD_HIDE_END(),
		
		{ _field_terminator }
	};

	STRINGS(function_flags)
	{
		"Range",
		"Unused 0",
		"Unused 1",
		"Unused 2",
		"Color Bit 0",
		"Color Bit 1",
		"Color Bit 2",
		"Color Bit 3"
	};
	STRING_LIST(function_flags, function_flags_strings, _countof(function_flags_strings));

	#define MAPPING_FUNCTION_DEFAULT_ONE_ID { 0x9019ABA5, 0x4C5A4A1A, 0xAD1AF034, 0x11FDA1AD }
	VERSIONED_TAG_STRUCT(
		mapping_function_default_one,
		"mapping_function_default_one",
		"mapping_function_default_one",
		"s_mapping_function_default_one",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MAPPING_FUNCTION_DEFAULT_ONE_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 3 },
		FIELD_HIDE_BEGIN(),
		{ _field_data, "data", &function_definition_data },
		FIELD_HIDE_END(),
		
		{ _struct_version_mode_equal, 1, 3 },
		FIELD_HIDE_BEGIN(),
		{ _field_block, "data", &byte_block_block },
		FIELD_HIDE_END(),
		
		{ _struct_version_mode_equal, 0, 11 },
		FIELD_HIDE_BEGIN(),
		{ _field_char_integer, "Function Type" },
		{ _field_byte_flags, "Flags", &function_flags },
		{ _field_char_integer, "Function 1" },
		{ _field_char_integer, "Function 2" },
		{ _field_rgb_color, "Color 0" },
		{ _field_rgb_color, "Color 1" },
		{ _field_rgb_color, "Color 2" },
		{ _field_rgb_color, "Color 3" },
		{ _field_block, "Values", &real_block_block },
		FIELD_HIDE_END(),
		
		{ _field_terminator }
	};

	#define MASS_DISTRIBUTIONS_BLOCK_ID { 0xD795D66A, 0x38FD48C4, 0x9283011C, 0xB7D8ACA0 }
	TAG_STRUCT(
		mass_distributions_block,
		"mass_distributions_block",
		"mass_distributions_block",
		"s_mass_distributions_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MASS_DISTRIBUTIONS_BLOCK_ID,
		4)
	{
		{ _field_real_vector_3d, "center of mass" },
		{ _field_real, "havok w center of mass" },
		{ _field_real_vector_3d, "inertia tensor i" },
		{ _field_real, "havok w inertia tensor i" },
		{ _field_real_vector_3d, "inertia tensor j" },
		{ _field_real, "havok w inertia tensor j" },
		{ _field_real_vector_3d, "inertia tensor k" },
		{ _field_real, "havok w inertia tensor k" },
		{ _field_terminator }
	};

	#define MATERIAL_BLOCK_STRUCT_ID { 0x2EF5672B, 0xA9634408, 0x8E6FA15E, 0xB24C9B83 }
	TAG_STRUCT(
		material_block_struct,
		"material_block_struct",
		"material_block_struct",
		"s_material_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_BLOCK_STRUCT_ID)
	{
		{ _field_tag_reference, "material shader", &material_shader_group_reference },
		{ _field_block, "material parameters", &material_shader_parameter_block_block },
		{ _field_block, "postprocess definition", &material_postprocess_block_block },
		{ _field_string_id, "physics material name" },
		{ _field_string_id, "physics material name 2" },
		{ _field_string_id, "physics material name 3" },
		{ _field_string_id, "physics material name 4" },
		{ _field_real, "sort offset" },
		{ _field_char_enum, "alpha blend mode", &alpha_blend_mode_enum },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_byte_flags, "flags", &materialflags },
		{ _field_byte_flags, "render flags", &materialrenderflags },
		{ _field_char_enum, "Transparent Shadow Policy", &materialtransparentshadowpolicyenum },
		FIELD_PAD("transparentshadowpad", 3),
		{ _field_terminator }
	};

	TAG_REFERENCE(material_shader_group_reference, MATERIAL_SHADER_TAG);

	STRINGS(alpha_blend_mode_enum)
	{
		"opaque",
		"additive",
		"multiply",
		"alpha_blend",
		"double_multiply",
		"pre_multiplied_alpha",
		"maximum",
		"multiply_add",
		"add_src_times_dstalpha",
		"add_src_times_srcalpha",
		"inv_alpha_blend",
		"motion_blur_static",
		"motion_blur_inhibit",
		"apply_shadow_into_shadow_mask",
		"alpha_blend_constant",
		"overdraw_apply",
		"wet_screen_effect",
		"minimum",
		"revsubtract",
		"forge_lightmap",
		"forge_lightmap_inv",
		"replace_all_channels",
		"alpha_blend_max",
		"opaque_alpha_blend",
		"alpha_blend_additive_transparent"
	};
	STRING_LIST(alpha_blend_mode_enum, alpha_blend_mode_enum_strings, _countof(alpha_blend_mode_enum_strings));

	STRINGS(materialflags)
	{
		"converted from shader",
		"decal post lighting"
	};
	STRING_LIST(materialflags, materialflags_strings, _countof(materialflags_strings));

	STRINGS(materialrenderflags)
	{
		"resolve screen before rendering"
	};
	STRING_LIST(materialrenderflags, materialrenderflags_strings, _countof(materialrenderflags_strings));

	STRINGS(materialtransparentshadowpolicyenum)
	{
		"none",
		"render as decal (cheap)",
		"render with material (expensive)"
	};
	STRING_LIST(materialtransparentshadowpolicyenum, materialtransparentshadowpolicyenum_strings, _countof(materialtransparentshadowpolicyenum_strings));

	#define MATERIAL_EFFECT_BLOCK_V2_ID { 0xB0032D67, 0x821D41B8, 0xAE3F37AC, 0x6CC0FD16 }
	TAG_STRUCT(
		material_effect_block_v2,
		"material_effect_block_v2",
		"material_effect_block_v2",
		"s_material_effect_block_v2",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_EFFECT_BLOCK_V2_ID)
	{
		{ _field_block, "old materials (DO NOT USE)", &old_material_effect_material_block_block },
		{ _field_block, "sounds", &material_effect_material_block_block },
		{ _field_block, "effects", &material_effect_material_block_block },
		{ _field_terminator }
	};

	#define MATERIAL_EFFECT_MATERIAL_BLOCK_ID { 0x8FCE6765, 0x945C435C, 0x9241DE33, 0xDC8ED887 }
	VERSIONED_TAG_STRUCT(
		material_effect_material_block,
		"material_effect_material_block",
		"material_effect_material_block",
		"s_material_effect_material_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_EFFECT_MATERIAL_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 7 },
		{ _field_tag_reference, "tag (effect or sound)", &sound_old_group_sound_looping_group_sound_group_effect_group_reference },
		{ _field_tag_reference, "secondary tag (effect or sound)", &sound_old_group_sound_looping_group_sound_group_effect_group_reference },
		{ _field_string_id, "material name" },
		{ _field_short_integer, "runtime material index" },
		{ _field_char_enum, "sweetener mode", &sweeneter_mode_enum },
		FIELD_PAD("L", 1),
		{ _field_real, "max_visibility_distance", "manual override for the max distance this effect can be from the camera and still be rendered (not valid for sounds)." },
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_tag_reference, "tag (effect or sound)", &sound_old_group_sound_looping_group_sound_group_effect_group_reference },
		{ _field_string_id, "material name" },
		{ _field_short_integer, "runtime material index" },
		{ _field_char_enum, "sweetener mode", &sweeneter_mode_enum },
		FIELD_PAD("DR", 1),
		
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(sound_old_group_sound_looping_group_sound_group_effect_group_reference, TAG_REFERENCE_FLAG_RESOLVED_BY_GAME)
	{
		SOUND_OLD_TAG,
		SOUND_LOOPING_TAG,
		SOUND_TAG,
		EFFECT_TAG,
		INVALID_TAG
	};

	STRINGS(sweeneter_mode_enum)
	{
		"sweetener default",
		"sweetener enabled",
		"sweetener disabled"
	};
	STRING_LIST(sweeneter_mode_enum, sweeneter_mode_enum_strings, _countof(sweeneter_mode_enum_strings));

	#define MATERIAL_EFFECTS_BLOCK_STRUCT_ID { 0x1B36A19F, 0x5F674BCE, 0x97D54F55, 0xE0F07B7A }
	TAG_STRUCT(
		material_effects_block_struct,
		"material_effects_block_struct",
		"material_effects_block_struct",
		"s_material_effects_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_EFFECTS_BLOCK_STRUCT_ID)
	{
		{ _field_block, "effects", &material_effect_block_v2_block },
		FIELD_USELESS_PAD("value", 128),
		{ _field_terminator }
	};

	#define MATERIAL_PHYSICS_PROPERTIES_STRUCT_ID { 0x8DB8D6D8, 0x833D4150, 0xA47D3861, 0x5C3FDD97 }
	VERSIONED_TAG_STRUCT(
		material_physics_properties_struct,
		"material_physics_properties_struct",
		"material_physics_properties_struct",
		"s_material_physics_properties_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_PHYSICS_PROPERTIES_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 15 },
		{ _field_long_integer, "flags" },
		{ _field_real, "friction" },
		{ _field_real_fraction, "restitution" },
		{ _field_real, "density", nullptr, "kg/m^3" },
		FIELD_EXPLANATION("Drag", nullptr),
		{ _field_tag_reference, "water physics drag properties", &water_physics_drag_properties_group_reference },
		{ _field_block, "drag overrides", &object_type_drag_properties_block_block },
		FIELD_EXPLANATION("Floatation", "objects of this flotation category have this density relative to being in this material (1.0f==neutral)"),
		FIELD_PAD("default", 4),
		{ _field_real, "super floater" },
		{ _field_real, "floater" },
		{ _field_real, "neutral" },
		{ _field_real, "sinker" },
		{ _field_real, "super sinker" },
		FIELD_PAD("none", 4),
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	TAG_REFERENCE(water_physics_drag_properties_group_reference, WATER_PHYSICS_DRAG_PROPERTIES_TAG);

	#define MATERIAL_POSTPROCESS_BLOCK_ID { 0x1D50D0C3, 0xC85241C0, 0x9E5B9057, 0xCE98F3A3 }
	TAG_STRUCT(
		material_postprocess_block,
		"material_postprocess_block",
		"material_postprocess_block",
		"s_material_postprocess_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_POSTPROCESS_BLOCK_ID)
	{
		{ _field_block, "textures", &material_postprocess_texture_block_block },
		{ _field_block, "texture constants", &real_vector4d_block_block$2 },
		{ _field_block, "real vectors", &real_vector4d_block_block$2 },
		{ _field_block, "real vertex vectors", &real_vector4d_block_block$2 },
		{ _field_block, "int constants", &int_block_block$2 },
		{ _field_long_integer, "bool constants" },
		{ _field_long_integer, "used bool constants" },
		{ _field_long_integer, "bool render phase mask" },
		{ _field_long_integer, "vertex bool constants" },
		{ _field_long_integer, "used vertex bool constants" },
		{ _field_long_integer, "vertex bool render phase mask" },
		{ _field_block, "functions", &material_shader_function_parameter_block_block },
		{ _field_block, "function parameters", &functionparameterblock_block },
		{ _field_block, "extern parameters", &externparameterblock_block },
		{ _field_char_enum, "alpha blend mode", &alpha_blend_mode_enum },
		{ _field_char_enum, "layer blend mode", &layerblendmodeenum },
		{ _field_word_flags, "flags", &materialpostprocessflags },
		{ _field_array, "runtime queryable properties table", &runtime_queryable_properties$4 },
		{ _field_struct, "physics material 0", &material_type_struct },
		{ _field_struct, "physics material 1", &material_type_struct },
		{ _field_struct, "physics material 2", &material_type_struct },
		{ _field_struct, "physics material 3", &material_type_struct },
		{ _field_terminator }
	};

	STRINGS(layerblendmodeenum)
	{
		"none",
		"blended",
		"layered"
	};
	STRING_LIST(layerblendmodeenum, layerblendmodeenum_strings, _countof(layerblendmodeenum_strings));

	STRINGS(materialpostprocessflags)
	{
		"wireframe outline",
		"force single pass",
		"has pixel constant functions",
		"has vertex constant functions",
		"has texture transform functions",
		"has texture frame functions",
		"resolve screen before rendering",
		"disable atmosphere fog",
		"uses depth camera",
		"material is variable"
	};
	STRING_LIST(materialpostprocessflags, materialpostprocessflags_strings, _countof(materialpostprocessflags_strings));

	#define MATERIAL_POSTPROCESS_TEXTURE_BLOCK_ID { 0xCD9812EC, 0x3CD64BE1, 0xB33BFE48, 0xBBCA596 }
	TAG_STRUCT(
		material_postprocess_texture_block,
		"material_postprocess_texture_block",
		"material_postprocess_texture_block",
		"s_material_postprocess_texture_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_POSTPROCESS_TEXTURE_BLOCK_ID)
	{
		{ _field_tag_reference, "bitmap reference", &bitmap_group_reference$2 },
		{ _field_byte_integer, "address mode" },
		{ _field_byte_integer, "filter mode" },
		{ _field_byte_integer, "frame index parameter" },
		{ _field_byte_integer, "sampler index" },
		{ _field_char_integer, "level of smallest mipmap to use" },
		{ _field_char_integer, "level of largest mipmap to use" },
		{ _field_byte_integer, "render phase mask" },
		FIELD_PAD("DHaFS", 1),
		{ _field_terminator }
	};

	#define MATERIAL_SHADER_BANK_BLOCK_STRUCT_ID { 0xB8F8C973, 0x40FF466B, 0x89CFF6B7, 0xD45234AF }
	TAG_STRUCT(
		material_shader_bank_block_struct,
		"material_shader_bank_block_struct",
		"material_shader_bank_block_struct",
		"s_material_shader_bank_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_SHADER_BANK_BLOCK_STRUCT_ID)
	{
		{ _field_block, "compiled vertex shaders", &compiled_vertex_shader_block_block },
		{ _field_block, "compiled vertex shader hashes", &compiled_shader_hash_block_block },
		{ _field_block, "compiled vertex shader binding info", &vertexshaderuniquebindinginfoblock_block },
		{ _field_block, "compiled pixel shaders", &compiled_pixel_shader_block_block },
		{ _field_block, "compiled pixel shader hashes", &compiled_shader_hash_block_block },
		{ _field_terminator }
	};

	#define MATERIAL_SHADER_BLOCK_STRUCT_ID { 0x1D0531C4, 0xBFBC4D8F, 0x945CF431, 0x7567B718 }
	TAG_STRUCT(
		material_shader_block_struct,
		"material_shader_block_struct",
		"material_shader_block_struct",
		"s_material_shader_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_SHADER_BLOCK_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &material_shader_flags },
		{ _field_block, "source shader files", &material_shader_source_file_block_block },
		{ _field_block, "compiled effects", &compiled_effects_block_block },
		{ _field_long_integer, "source shader hash" },
		{ _field_long_integer, "compiled shader hash" },
		{ _field_tag_reference, "shader bank", &material_shader_bank_group_reference },
		{ _field_block, "vertex shader entry points", &material_vertex_shader_entry_point_block_block },
		{ _field_block, "pixel shader entry points", &compiled_pixel_shader_refererence_block_block },
		{ _field_block, "material parameters", &material_shader_parameter_block_block },
		{ _field_terminator }
	};

	STRINGS(material_shader_flags)
	{
		"is_distortion",
		"is_decal",
		"blended_materials",
		"no_physics_material",
		"is_volume_fog",
		"is_water",
		"is_waterfall",
		"is_hologram",
		"is_blended_hologram",
		"is_emblem",
		"blended_materials_2",
		"blended_materials_3",
		"is_alpha_clip",
		"is_lightable_transparent"
	};
	STRING_LIST(material_shader_flags, material_shader_flags_strings, _countof(material_shader_flags_strings));

	TAG_REFERENCE(material_shader_bank_group_reference, MATERIAL_SHADER_BANK_TAG);

	#define MATERIAL_SHADER_FUNCTION_PARAMETER_BLOCK_ID { 0x5471F0E3, 0xF54D4472, 0xAD55A516, 0x9A007BED }
	TAG_STRUCT(
		material_shader_function_parameter_block,
		"material_shader_function_parameter_block",
		"material_shader_function_parameter_block",
		"s_material_shader_function_parameter_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_SHADER_FUNCTION_PARAMETER_BLOCK_ID)
	{
		{ _field_long_enum, "type", &material_animated_parameter_type_enum },
		{ _field_string_id, "input name", _field_id_function_input_scalar },
		{ _field_string_id, "range name", _field_id_function_input_range },
		{ _field_char_enum, "Output Modifier", &materialfunctionoutputmodenum, _field_id_function_output_modifier },
		FIELD_PAD("BVCG", 3),
		{ _field_string_id, "Output Modifier Input", _field_id_function_output_modifier_input },
		{ _field_real, "time period", nullptr, "seconds", _field_id_function_unknown },
		FIELD_EXPLANATION("FUNCTION", nullptr),
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "function", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	STRINGS(material_animated_parameter_type_enum)
	{
		"value",
		"color",
		"scale uniform",
		"scale u",
		"scale v",
		"offset u",
		"offset v",
		"frame index",
		"alpha"
	};
	STRING_LIST(material_animated_parameter_type_enum, material_animated_parameter_type_enum_strings, _countof(material_animated_parameter_type_enum_strings));

	STRINGS(materialfunctionoutputmodenum)
	{
		" ",
		"Add",
		"Multiply"
	};
	STRING_LIST(materialfunctionoutputmodenum, materialfunctionoutputmodenum_strings, _countof(materialfunctionoutputmodenum_strings));

	#define MATERIAL_SHADER_PARAMETER_BLOCK_ID { 0x5E4B3E06, 0x18A84736, 0xBECF963F, 0x42CAD69D }
	TAG_STRUCT(
		material_shader_parameter_block,
		"material_shader_parameter_block",
		"material_shader_parameter_block",
		"s_material_shader_parameter_block",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_SHADER_PARAMETER_BLOCK_ID)
	{
		{ _field_string_id, "parameter name" },
		{ _field_long_enum, "parameter type", &material_shader_parameter_type_enum },
		{ _field_long_integer, "parameter index" },
		{ _field_tag_reference, "bitmap", &bitmap_group_reference$9 },
		{ _field_string_id, "bitmap path" },
		{ _field_real_argb_color, "color" },
		{ _field_real, "real" },
		{ _field_real_vector_3d, "vector" },
		{ _field_long_integer, "int/bool" },
		{ _field_word_integer, "bitmap flags" },
		{ _field_word_integer, "bitmap filter mode" },
		{ _field_word_integer, "bitmap address mode" },
		{ _field_word_integer, "bitmap address mode x" },
		{ _field_word_integer, "bitmap address mode y" },
		{ _field_word_integer, "bitmap sharpen mode" },
		{ _field_byte_integer, "bitmap extern mode" },
		{ _field_byte_integer, "bitmap min mipmap" },
		{ _field_byte_integer, "bitmap max mipmap" },
		{ _field_byte_integer, "render phases used" },
		{ _field_block, "function parameters", &material_shader_function_parameter_block_block },
		{ _field_data, "display name", &help_text_block },
		{ _field_data, "display group", &help_text_block },
		{ _field_data, "display help text", &help_text_block },
		{ _field_real, "display minimum" },
		{ _field_real, "display maximum" },
		{ _field_byte_integer, "register index" },
		{ _field_byte_integer, "register offset" },
		{ _field_byte_integer, "register count" },
		{ _field_char_enum, "register set", &register_set_enum },
		{ _field_terminator }
	};

	STRINGS(material_shader_parameter_type_enum)
	{
		"bitmap",
		"real",
		"int",
		"bool",
		"color"
	};
	STRING_LIST(material_shader_parameter_type_enum, material_shader_parameter_type_enum_strings, _countof(material_shader_parameter_type_enum_strings));

	TAG_REFERENCE(bitmap_group_reference$9, BITMAP_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR | TAG_REFERENCE_FLAG_NOT_A_RESOURCE_DEPENDENCY);

	STRINGS(register_set_enum)
	{
		"bool",
		"int",
		"float",
		"sampler",
		"vertex_bool",
		"vertex_int",
		"vertex_float",
		"vertex_sampler"
	};
	STRING_LIST(register_set_enum, register_set_enum_strings, _countof(register_set_enum_strings));

	#define MATERIAL_SHADER_SOURCE_FILE_BLOCK_ID { 0xB9DD4E56, 0x85724A5B, 0x9191D4D2, 0xEF3D72CA }
	TAG_STRUCT(
		material_shader_source_file_block,
		"material_shader_source_file_block",
		"material_shader_source_file_block",
		"s_material_shader_source_file_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_SHADER_SOURCE_FILE_BLOCK_ID)
	{
		{ _field_long_string, "shader path" },
		{ _field_data, "shader data", &shader_code_block },
		{ _field_terminator }
	};

	#define MATERIAL_STRUCT_ID { 0x13810D23, 0x3C154406, 0xAA769459, 0xA7F03D07 }
	TAG_STRUCT(
		material_struct,
		"material_struct",
		"material_struct",
		"s_material_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_STRUCT_ID)
	{
		{ _field_tag_reference, "material shader", &material_shader_group_reference },
		{ _field_block, "material parameters", &material_shader_parameter_block_block },
		{ _field_block, "postprocess definition", &material_postprocess_block_block },
		{ _field_string_id, "physics material name" },
		{ _field_string_id, "physics material name 2" },
		{ _field_string_id, "physics material name 3" },
		{ _field_string_id, "physics material name 4" },
		{ _field_real, "sort offset" },
		{ _field_char_enum, "alpha blend mode", &alpha_blend_mode_enum },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_byte_flags, "flags", &materialflags },
		{ _field_byte_flags, "render flags", &materialrenderflags },
		{ _field_char_enum, "Transparent Shadow Policy", &materialtransparentshadowpolicyenum },
		FIELD_PAD("transparentshadowpad", 3),
		{ _field_terminator }
	};

	#define MATERIAL_TEXTURES_REFS_BLOCK_ID { 0xF4DB844, 0xFD9F48CD, 0xB9DCAA47, 0x2D47CCD4 }
	TAG_STRUCT(
		material_textures_refs_block,
		"material_textures_refs_block",
		"material_textures_refs_block",
		"s_material_textures_refs_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_TEXTURES_REFS_BLOCK_ID)
	{
		{ _field_tag_reference, "material textures", &bitmap_group_reference$2 },
		{ _field_terminator }
	};

	#define MATERIAL_TYPE_STRUCT_ID { 0xFDEBAF30, 0x1AB34195, 0xA37ECE6C, 0xE4A2D97E }
	TAG_STRUCT(
		material_type_struct,
		"material_type_struct",
		"material_type_struct",
		"s_material_type_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_TYPE_STRUCT_ID)
	{
		{ _field_short_integer, "global material index" },
		{ _field_terminator }
	};

	#define MATERIAL_VERTEX_SHADER_ENTRY_POINT_BLOCK_STRUCT_ID { 0xB4C9BC4F, 0xA11E40AE, 0xA23D74EA, 0xB323A5EA }
	TAG_STRUCT(
		material_vertex_shader_entry_point_block_struct,
		"material_vertex_shader_entry_point_block_struct",
		"material_vertex_shader_entry_point_block_struct",
		"s_material_vertex_shader_entry_point_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIAL_VERTEX_SHADER_ENTRY_POINT_BLOCK_STRUCT_ID)
	{
		{ _field_block, "vertex type shader indices", &compiled_vertex_shader_refererence_block_block },
		{ _field_terminator }
	};

	#define MATERIALS_BLOCK$2_ID { 0x4D5F9153, 0xB947A3, 0xBCAF406F, 0xC56F065C }
	TAG_STRUCT(
		materials_block$2,
		"materials_block",
		"materials_block",
		"s_materials_block$2",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIALS_BLOCK$2_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "parent name" },
		{ _field_short_integer, "runtime material index" },
		{ _field_word_flags, "flags", &global_material_flags_definition },
		{ _field_string_id, "general armor" },
		{ _field_string_id, "specific armor" },
		{ _field_struct, "wet proxies", &wet_proxies_struct },
		{ _field_short_integer, "runtime dry base material index" },
		FIELD_PAD("RMBP1", 2),
		{ _field_struct, "physics properties", &material_physics_properties_struct }, // structure_version:1
		{ _field_tag_reference, "breakable surface", &breakable_surface_group_reference },
		{ _field_struct, "sweeteners", &materials_sweeteners_struct },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_block, "underwater proxies", &underwater_proxies_block_block },
		{ _field_terminator }
	};

	STRINGS(global_material_flags_definition)
	{
		"flammable",
		"biomass",
		"rad xfer interior",
		"used directly!",
		"used by children!"
	};
	STRING_LIST(global_material_flags_definition, global_material_flags_definition_strings, _countof(global_material_flags_definition_strings));

	TAG_REFERENCE(breakable_surface_group_reference, BREAKABLE_SURFACE_TAG);

	#define MATERIALS_BLOCK_ID { 0xAC367567, 0x39714E57, 0x9B17ED70, 0x20402724 }
	TAG_STRUCT(
		materials_block,
		"materials_block",
		"materials_block",
		"s_materials_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIALS_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_byte_flags, "flags", &physics_material_flags },
		FIELD_PAD("flags pad", 3),
		{ _field_string_id, "global material name" },
		{ _field_short_block_index, "phantom type", &phantom_types_block_block },
		FIELD_EXPLANATION("collision group override", "This value overrides the default collision group.  It is overridden by any values specified rigid bodies block that overlap. Values set here can be overridden per shape through the shape primitive blocks."),
		{ _field_char_enum, "proxy collision group", &physics_material_proxy_collision_groups },
		{ _field_char_integer, "runtime collision group" },
		{ _field_terminator }
	};

	#define MATERIALS_SWEETENERS_STRUCT_ID { 0x9F74BAB9, 0xC3664288, 0xB82EFC4F, 0x59924C4B }
	TAG_STRUCT(
		materials_sweeteners_struct,
		"materials_sweeteners_struct",
		"materials_sweeteners_struct",
		"s_materials_sweeteners_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MATERIALS_SWEETENERS_STRUCT_ID)
	{
		{ _field_tag_reference, "sound sweetener (small)", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "sound sweetener (medium)", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "sound sweetener (large)", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "sound sweetener rolling", &sound_looping_group_reference$2 },
		{ _field_tag_reference, "sound sweetener grinding", &sound_looping_group_reference$2 },
		{ _field_tag_reference, "sound sweetener (melee small)", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "sound sweetener (melee)", "this is a medium sweetener and was the old default", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "sound sweetener (melee large)", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "effect sweetener (small)", &effect_group_reference },
		{ _field_tag_reference, "effect sweetener (medium)", &effect_group_reference },
		{ _field_tag_reference, "effect sweetener (large)", &effect_group_reference },
		{ _field_tag_reference, "effect sweetener rolling", &effect_group_reference },
		{ _field_tag_reference, "effect sweetener grinding", &effect_group_reference },
		{ _field_tag_reference, "effect sweetener (melee)", &effect_group_reference },
		{ _field_tag_reference, "water ripple (small)", &render_water_ripple_group_reference },
		{ _field_tag_reference, "water ripple (medium)", &render_water_ripple_group_reference },
		{ _field_tag_reference, "water ripple (large)", &render_water_ripple_group_reference },
		FIELD_EXPLANATION("sweetener inheritance flags", "when a sweetener inheritance flag is set the sound\\effect is not inherited from the parent material.  If you leave the sweetener blank and set the flag than no effect\\sound will play"),
		{ _field_long_flags, "sweetener inheritance flags", &materials_sweeteners_inheritance_flags },
		{ _field_terminator }
	};

	TAG_REFERENCE(render_water_ripple_group_reference, RENDER_WATER_RIPPLE_TAG);

	STRINGS(materials_sweeteners_inheritance_flags)
	{
		"sound_small",
		"sound_medium",
		"sound_large",
		"sound_rolling",
		"sound_grinding",
		"sound_melee_small",
		"sound_melee",
		"sound_melee_large",
		"effect_small",
		"effect_medium",
		"effect_large",
		"effect_rolling",
		"effect_grinding",
		"effect_melee",
		"water_ripple_small",
		"water_ripple_medium",
		"water_ripple_large"
	};
	STRING_LIST(materials_sweeteners_inheritance_flags, materials_sweeteners_inheritance_flags_strings, _countof(materials_sweeteners_inheritance_flags_strings));

	#define MEDALAGGREGATOR_ID { 0x76FDA036, 0x899340B2, 0xB8B3DAAE, 0xF99E191 }
	TAG_STRUCT(
		medalaggregator,
		"medalAggregator",
		"medalAggregator",
		"s_medalaggregator",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MEDALAGGREGATOR_ID)
	{
		{ _field_string_id, "display name" },
		FIELD_GROUP_BEGIN("allowed game modes"),
		{ _field_struct, "allowed game modes", &game_mode_flags_struct },
		FIELD_GROUP_END(),
		{ _field_block, "contributing medals", &medalaggregatorentry_block },
		{ _field_terminator }
	};

	#define MEDALAGGREGATORENTRY_ID { 0x6EBDB42C, 0xCEA840C2, 0x9264DA6F, 0x99C58621 }
	TAG_STRUCT(
		medalaggregatorentry,
		"medalAggregatorEntry",
		"medalAggregatorEntry",
		"s_medalaggregatorentry",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MEDALAGGREGATORENTRY_ID)
	{
		{ _field_string_id, "medal name" },
		{ _field_terminator }
	};

	#define MEDALCHALLENGEAGGREGATOR_ID { 0x7B61FBDD, 0x349748E5, 0xA23985CC, 0x7C3DA8CA }
	TAG_STRUCT(
		medalchallengeaggregator,
		"medalChallengeAggregator",
		"medalChallengeAggregator",
		"s_medalchallengeaggregator",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MEDALCHALLENGEAGGREGATOR_ID)
	{
		{ _field_string_id, "challenge to increment" },
		{ _field_struct, "medals", &medalaggregator },
		{ _field_terminator }
	};

	#define MEDALCOMMENDATIONAGGREGATOR_ID { 0x96CA56CE, 0x70B54D2A, 0x81BF7588, 0xAB4B56E0 }
	TAG_STRUCT(
		medalcommendationaggregator,
		"medalCommendationAggregator",
		"medalCommendationAggregator",
		"s_medalcommendationaggregator",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MEDALCOMMENDATIONAGGREGATOR_ID)
	{
		{ _field_string_id, "commendation to award" },
		{ _field_struct, "medals", &medalaggregator },
		{ _field_terminator }
	};

	#define MEDAL_CHALLENGE_AGGREGATOR_LIST_STRUCT_DEFINITION_ID { 0xD03365AC, 0xF68547BA, 0x9555A47C, 0x88C2D660 }
	TAG_STRUCT(
		medal_challenge_aggregator_list_struct_definition,
		"medal_challenge_aggregator_list_struct_definition",
		"medal_challenge_aggregator_list_struct_definition",
		"s_medal_challenge_aggregator_list_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MEDAL_CHALLENGE_AGGREGATOR_LIST_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "lists", &medalchallengeaggregator_block },
		{ _field_terminator }
	};

	#define MEDAL_COMMENDATION_AGGREGATOR_LIST_STRUCT_DEFINITION_ID { 0x358B415E, 0xA96F4B51, 0xA64F35A0, 0xB280D9B1 }
	TAG_STRUCT(
		medal_commendation_aggregator_list_struct_definition,
		"medal_commendation_aggregator_list_struct_definition",
		"medal_commendation_aggregator_list_struct_definition",
		"s_medal_commendation_aggregator_list_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MEDAL_COMMENDATION_AGGREGATOR_LIST_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "lists", &medalcommendationaggregator_block },
		{ _field_terminator }
	};

	#define MEGALO_STRING_ID_BLOCK_ID { 0x6B782187, 0x32C24E8D, 0xBE17E379, 0xEB772B96 }
	TAG_STRUCT(
		megalo_string_id_block,
		"megalo_string_id_block",
		"megalo_string_id_block",
		"s_megalo_string_id_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MEGALO_STRING_ID_BLOCK_ID)
	{
		{ _field_string_id, "string_id" },
		{ _field_terminator }
	};

	#define MEGALO_STRING_ID_TABLE_STRUCT_DEFINITION_ID { 0xAE0F2571, 0xF8A94B50, 0x8323DF3D, 0x4D21B8E7 }
	TAG_STRUCT(
		megalo_string_id_table_struct_definition,
		"megalo_string_id_table_struct_definition",
		"megalo_string_id_table_struct_definition",
		"s_megalo_string_id_table_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MEGALO_STRING_ID_TABLE_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "megalo string_ids", &megalo_string_id_block_block },
		{ _field_block, "megalo string_ids sprite mapping", &megalo_string_id_to_sprite_index_block_block },
		{ _field_terminator }
	};

	#define MEGALO_STRING_ID_TO_SPRITE_INDEX_BLOCK_ID { 0xFC7D7AC9, 0xADF84548, 0x8019B5CB, 0xC6C6FDAD }
	TAG_STRUCT(
		megalo_string_id_to_sprite_index_block,
		"megalo_string_id_to_sprite_index_block",
		"megalo_string_id_to_sprite_index_block",
		"s_megalo_string_id_to_sprite_index_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MEGALO_STRING_ID_TO_SPRITE_INDEX_BLOCK_ID)
	{
		{ _field_long_block_index_custom_search, "from megalo string_id", &megalo_string_collection_search_definition },
		{ _field_long_integer, "loadout menu sprite frame" },
		{ _field_terminator }
	};

	#define MEGALOGAMENGINE_SOUNDS_STRUCT_DEFINITION_ID { 0xF6682BF2, 0xBFF4179, 0xB03B73EF, 0xE781ED60 }
	TAG_STRUCT(
		megalogamengine_sounds_struct_definition,
		"megalogamengine_sounds_struct_definition",
		"megalogamengine_sounds_struct_definition",
		"s_megalogamengine_sounds_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MEGALOGAMENGINE_SOUNDS_STRUCT_DEFINITION_ID)
	{
		{ _field_tag_reference, "slayer", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ctf", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "flag_captured", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "flag_dropped", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "flag_recovered", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "flag_reset", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "flag_stolen", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "flag_taken", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "vip", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "new_vip", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "vip_killed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "juggernaut", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "new_juggernaut", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "territories", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "territory_captured", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "territory_lost", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "assault", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bomb_armed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bomb_detonated", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bomb_disarmed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bomb_dropped", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bomb_reset", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bomb_returned", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bomb_taken", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "infection", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "infected", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "last_man_standing", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "new_zombie", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "oddball", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ball_spawned", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ball_taken", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ball_dropped", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ball_reset", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "king", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "hill_controlled", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "hill_contested", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "hill_moved", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "headhunter", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "stockpile", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "race", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "defense", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "offense", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "destination_moved", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "generator_armed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "core_armed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "generator_disarmed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "core_disarmed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "sudden_death", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "game_over", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_cv_defeat", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_cv_ph1_defeat", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_cv_ph1_intro", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_cv_ph1_victory", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_cv_ph2_defeat", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_cv_ph2_victory", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_cv_ph3_victory", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_cv_victory", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_sp_defeat", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_sp_ph1_intro", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_sp_ph1_victory", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_sp_ph2_intro", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_sp_ph2_victory", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_sp_ph3_intro", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_sp_ph3_victory", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_cv_defeat", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_cv_ph1_defeat", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_cv_ph1_intro", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_cv_ph2_intro", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_cv_ph2_victory", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_cv_ph3_intro", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_cv_ph3_victory", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_sp_defeat", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_sp_ph1_defeat", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_sp_ph1_extra", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_sp_ph1_intro", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_sp_ph1_victory", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_sp_ph2_defeat", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_sp_ph2_victory", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_sp_ph3_victory", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_sp_victory", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bone_sp_ph3_defeat", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "isle_cv_ph3_defeat", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "covy_big_win", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "covy_win1", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "covy_win2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "invasion_beginning", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "unsc_big_win", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "unsc_win1", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "unsc_win2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "power_down", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "reinforcements", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "respawn_tick", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alpha_under_attack", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "bravo_under_attack", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "charlie_under_attack", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_base1", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_base2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_base3", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_base4", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_base5", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_base_contested", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_base_captured", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_base_gendown", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_score_tick", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "regicide_intro", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "king_crowned_regicide", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "king_crowned_regicide2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "king_crowned_frompoints", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "king_crowned_frompoints2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "king_killed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "king_killed2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "king_max_bonus", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "king_spree", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "king_tacular", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "king_reignofterror", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "king_slayer", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "king_execution", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "king_itsyou", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_offline_base", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_offline_base1", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_offline_base2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_offline_base3", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_offline_base4", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_offline_base5", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_online_base", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_online_base1", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_online_base2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_online_base3", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_online_base4", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_online_base5", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_enemy_base", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_enemy_base1", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_enemy_base2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_enemy_base3", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_enemy_base4", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_enemy_base5", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_start_enemy_base", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_start_enemy_base1", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_start_enemy_base2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_start_enemy_base3", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_start_enemy_base4", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_start_enemy_base5", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_team_base", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_team_base1", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_team_base2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_team_base3", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_team_base4", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_team_base5", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_stop_team_base", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_stop_team_base1", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_stop_team_base2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_stop_team_base3", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_stop_team_base4", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_cap_stop_team_base5", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_laststand_capped_all", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_laststand_capped_none", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_laststand_must_cap", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_title", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_title_kingdom", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_title_tyranny", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_obective", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_obective_kingdom", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_obective_tyranny", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_team_castle_locked", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_team_castle_unlocked", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_enemy_castle_locked", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_enemy_castle_unlocked", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_team_upgrade2_base1", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_team_upgrade3_base1", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_team_upgrade2_base2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_team_upgrade3_base2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_team_upgrade2_base3", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_team_upgrade3_base3", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_team_upgrade2_base4", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_team_upgrade3_base4", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_team_upgrade2_base5", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_team_upgrade3_base5", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_activate_cap_sfx", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_deactivate_cap_sfx", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_vehicle_terminal_use_sfx", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "dom_lost_base", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_base_upgrade", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_base_boot", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_base_power_offline", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_base_power_restored", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_generator_power_offline", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_generator_power_restored", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_base_ambient_start", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_base_ambient_stop", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_shield_power_up", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_shield_power_down", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_base_terminal_use_start", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_base_terminal_use_stop", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_vehicle_terminal_use_start", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_vehicle_terminal_use_stop", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_generator_terminal_use_start", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_generator_terminal_use_stop", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_generic_stop", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "ca_dom_generic_start", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_disarmed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_disarmed_site1", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_disarmed_site2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_disarmed_site3", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_disarmed_site4", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_disarmed_site5", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_planted", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_planted_site1", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_planted_site2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_planted_site3", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_planted_site4", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_planted_site5", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_site_available", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_site_moved", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_objective_attack", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_objective_defend", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_title", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_title_symmetric", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_title_grifball", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_title_oneshot", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_title_scorchedearth", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_destroyed_site1", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_destroyed_site2", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_destroyed_site3", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_destroyed_site4", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_destroyed_site5", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_arming_sfx", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_disarming_sfx", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "blam_bomb_explosion_sfx", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "escape_objective_attacker", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "escape_objective_defender", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "escape_objective_attacker_switches", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "escape_objective_defender_switches", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "escape_portal_moved", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "escape_portal_off", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "escape_portal_on", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "escape_portal_open", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "escape_switch_activated", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "escape_switch_portal_on", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "escape_switch_portal_off", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "escape_title", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_terminator }
	};

	#define MELEE_DAMAGE_PARAMETERS_BLOCK_ID { 0xB9EBA02E, 0xE895A76C, 0xAB8BEA74, 0x409CC1A5 }
	TAG_STRUCT(
		melee_damage_parameters_block,
		"melee_damage_parameters_block",
		"melee_damage_parameters_block",
		"s_melee_damage_parameters_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MELEE_DAMAGE_PARAMETERS_BLOCK_ID)
	{
		FIELD_EXPLANATION("melee damage parameters", "damage pyramid angles: defines the frustum from the camera that the melee-attack uses to find targets\ndamage pyramid depth: how far the melee attack searches for a target"),
		{ _field_real_euler_angles_2d, "damage pyramid angles" },
		{ _field_real, "damage pyramid depth", "0 defaults to 0.8f", "wu" },
		{ _field_real, "maximum lunge range", "0 defaults to 1.22f", "wu" },
		{ _field_real, "damage lunge explosive depth", "the distance out from the pyramid center to spawn explosive effects.  This value will be clamped to the damage pyramid depth. 0 defaults to the damage pyramid depth", "wu" },
		{ _field_real, "runtime damage lunge explosive fraction" },
		{ _field_tag_reference, "melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "melee response", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "lunge melee damage", "this is only important for the energy sword", &damage_effect_group_reference },
		{ _field_tag_reference, "lunge melee response", "this is only important for the energy sword", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "empty melee damage", "this is only important for the energy sword", &damage_effect_group_reference },
		{ _field_tag_reference, "empty melee response", "this is only important for the energy sword", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "clang melee damage", "this is only important for the energy sword", &damage_effect_group_reference },
		{ _field_tag_reference, "clang melee response", "this is only important for the energy sword", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "clang melee against melee weapon damage", "e.g. used by AR to damage sword guy when clanging sword attack", &damage_effect_group_reference },
		{ _field_tag_reference, "clang melee against melee weapon damage response", "e.g. used by AR to damage sword guy when clanging sword attack", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "lunge melee explosive damage", &effect_group_reference },
		{ _field_terminator }
	};

	#define METER_STRUCT_DEFINITION_ID { 0x3B48AAFB, 0xF0C147FC, 0xAD439E06, 0xEDAF749A }
	TAG_STRUCT(
		meter_struct_definition,
		"meter_struct_definition",
		"meter_struct_definition",
		"s_meter_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		METER_STRUCT_DEFINITION_ID)
	{
		{ _field_long_flags, "flags", &meter_flags },
		{ _field_tag_reference, "stencil bitmaps", "two bitmaps specifying the mask and the meter levels", &bitmap_group_reference$11 },
		{ _field_tag_reference, "source bitmap", "optional bitmap to draw into the unmasked regions of the meter (modulated by the colors below)", &bitmap_group_reference$2 },
		{ _field_short_integer, "stencil sequence index" },
		{ _field_short_integer, "source sequence index" },
		FIELD_PAD("KBT", 16),
		FIELD_PAD("ON", 4),
		{ _field_short_enum, "interpolate colors...", &color_interpolation_modes_enum },
		{ _field_short_enum, "anchor colors...", &color_anchors_enum },
		FIELD_PAD("WMTT", 8),
		{ _field_real_argb_color, "empty color" },
		{ _field_real_argb_color, "full color" },
		FIELD_PAD("VNJW", 20),
		{ _field_real, "unmask distance", "fade from fully masked to fully unmasked this distance beyond full (and below empty)", "meter units" },
		{ _field_real, "mask distance", "fade from fully unmasked to fully masked this distance below full (and beyond empty)", "meter units" },
		FIELD_PAD("SBQWDR", 20),
		{ _field_data, "encoded stencil", &meter_stencil_data_definition },
		{ _field_terminator }
	};

	STRING_LIST(meter_flags, empty_string_list, 0);

	TAG_REFERENCE(bitmap_group_reference$11, BITMAP_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR);

	STRINGS(color_interpolation_modes_enum)
	{
		"linearly",
		"faster near empty",
		"faster near full",
		"through random noise"
	};
	STRING_LIST(color_interpolation_modes_enum, color_interpolation_modes_enum_strings, _countof(color_interpolation_modes_enum_strings));

	STRINGS(color_anchors_enum)
	{
		"at both ends",
		"at empty",
		"at full"
	};
	STRING_LIST(color_anchors_enum, color_anchors_enum_strings, _countof(color_anchors_enum_strings));

	#define MIDNIGHT_LIGHT_STRUCT_ID { 0xC74B158E, 0xE0004613, 0x893D65F6, 0xE1E69DA7 }
	TAG_STRUCT(
		midnight_light_struct,
		"midnight_light_struct",
		"midnight_light_struct",
		"s_midnight_light_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MIDNIGHT_LIGHT_STRUCT_ID)
	{
		{ _field_long_integer, "Version" },
		FIELD_EXPLANATION("Dynamic/Static Shared Light Parameters", nullptr),
		{ _field_string_id, "haloLightNode", "Light node name in DCC.", FIELD_FLAG_INDEX },
		{ _field_long_enum, "Light Type", "Geometry shape of light.", &midnight_light_type_enum_definition },
		{ _field_real_rgb_color, "Light Color" },
		{ _field_struct, "Intensity", nullptr, nullptr, "[0-1+]", &light_scalar_function_struct },
		{ _field_long_enum, "Lighting Mode", "Attenuation overrides.", &midnight_lighting_mode_definition },
		{ _field_real, "Distance Attenuation Start", "Inner penumbra start." },
		{ _field_struct, "Distance Attenuation End", "Radius or size of light", &light_scalar_function_struct },
		{ _field_real, "Camera Distance Fade Start", "Distance at which we start to fade out this light" },
		{ _field_real, "Camera Distance Fade End", "Distance at which the light should be completely faded out and not seen" },
		{ _field_real, "Specular Power", "For screen-space dynamic lights" },
		{ _field_real, "Specular Intensity", "For screen-space dynamic lights" },
		FIELD_EXPLANATION("Shared Spot Parameters", nullptr),
		{ _field_real, "Inner Cone Angle", "Inner hotspot attenuation end.", nullptr, "[0-160 degrees]" },
		{ _field_struct, "Outer Cone End", "Angle size of spotlight.", nullptr, "[0-160 degrees]", &light_scalar_function_struct },
		{ _field_long_enum, "Cone Projection Shape", "Use cone in all cases unless you have a gobo you need to project, frustum uses the full clip area of the light", &midnight_projection_definition },
		FIELD_EXPLANATION("Dynamic Only Parameters", nullptr),
		{ _field_real, "Shadow Near Clip Plane" },
		{ _field_real, "Shadow Far Clip Plane" },
		{ _field_real, "Shadow Bias Offset" },
		{ _field_real_rgb_color, "Shadow Color", "Shadow tint." },
		{ _field_short_enum, "Dynamic Shadow Quality", &midnight_dynamic_shadow_quality_modes },
		{ _field_short_enum, "Shadows", &midnight_boolean_enum_definition },
		{ _field_char_enum, "Screenspace Light", &midnight_boolean_enum_definition },
		{ _field_char_enum, "Ignore Dynamic Objects", &midnight_boolean_enum_definition },
		{ _field_char_enum, "Cinema Objects Only", "This should only be turned on if you have light linking data correctly setup", &midnight_boolean_enum_definition },
		{ _field_char_enum, "Cinema Only", &midnight_boolean_enum_definition },
		{ _field_char_enum, "Cinema Exclude", &midnight_boolean_enum_definition },
		FIELD_PAD("PADDING1", 1),
		{ _field_char_enum, "Specular Contribution", &midnight_boolean_enum_definition },
		{ _field_char_enum, "Diffuse Contribution", &midnight_boolean_enum_definition },
		FIELD_EXPLANATION("Dynamic Gobo", nullptr),
		{ _field_tag_reference, "Gobo Tag Path", "Bitmap file for spotlight. Cube map for point light. Gobo bitmap must be synced to xbox.", &bitmap_group_reference$10 },
		{ _field_struct, "Rotation", nullptr, nullptr, "[0-360 degrees]", &light_scalar_function_struct },
		{ _field_real, "Aspect Ratio", "Shape length and width of Gobo.", nullptr, "[-0-1+]" },
		{ _field_long_enum, "Tile Behavior", "Gobo texture lookup behavior when tiled.", &midnight_gobo_tile_behavior_enum_definition },
		{ _field_real, "Repeat X", "Tile Gobo.", nullptr, "[0-1+]" },
		{ _field_real, "Repeat Y", "Tile Gobo.", nullptr, "[0-1+]" },
		{ _field_struct, "Offset X", "Offset Gobo.", &light_scalar_function_struct },
		{ _field_struct, "Offset Y", "Offset Gobo.", &light_scalar_function_struct },
		FIELD_EXPLANATION("Color Change", nullptr),
		{ _field_struct, "Interpolation Function", &light_color_function_struct },
		{ _field_real_rgb_color, "Target Color" },
		FIELD_EXPLANATION("Channels", nullptr),
		{ _field_long_flags, "Light Channels", &channeldefinitionflags },
		{ _field_long_flags, "Shadow Channels", &channeldefinitionflags },
		FIELD_EXPLANATION("Bungie Parameters", nullptr),
		{ _field_long_flags, "flags", &light_definition_flags },
		{ _field_real, "destroy light after", "automatically destroys the light after it has existed this long (0 to disable)", "seconds" },
		{ _field_tag_reference, "Lens Flare", &lens_flare_group_reference },
		{ _field_terminator }
	};

	STRINGS(midnight_light_type_enum_definition)
	{
		"Point",
		"Spot",
		"Directional",
		"Area",
		"Sun"
	};
	STRING_LIST(midnight_light_type_enum_definition, midnight_light_type_enum_definition_strings, _countof(midnight_light_type_enum_definition_strings));

	STRINGS(midnight_lighting_mode_definition)
	{
		"Physically Correct",
		"Artistic"
	};
	STRING_LIST(midnight_lighting_mode_definition, midnight_lighting_mode_definition_strings, _countof(midnight_lighting_mode_definition_strings));

	STRINGS(midnight_projection_definition)
	{
		"Cone",
		"Frustum"
	};
	STRING_LIST(midnight_projection_definition, midnight_projection_definition_strings, _countof(midnight_projection_definition_strings));

	STRINGS(midnight_dynamic_shadow_quality_modes)
	{
		"Normal",
		"Expensive (cinematics only)"
	};
	STRING_LIST(midnight_dynamic_shadow_quality_modes, midnight_dynamic_shadow_quality_modes_strings, _countof(midnight_dynamic_shadow_quality_modes_strings));

	TAG_REFERENCE(bitmap_group_reference$10, BITMAP_TAG);

	STRINGS(midnight_gobo_tile_behavior_enum_definition)
	{
		"Clamp",
		"Repeat",
		"Mirror"
	};
	STRING_LIST(midnight_gobo_tile_behavior_enum_definition, midnight_gobo_tile_behavior_enum_definition_strings, _countof(midnight_gobo_tile_behavior_enum_definition_strings));

	STRINGS(channeldefinitionflags)
	{
		"0",
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9",
		"10",
		"11",
		"12",
		"13",
		"14",
		"15",
		"16",
		"17",
		"18",
		"19",
		"20",
		"21",
		"22",
		"23",
		"24",
		"25",
		"26",
		"27",
		"28",
		"29",
		"30",
		"31"
	};
	STRING_LIST(channeldefinitionflags, channeldefinitionflags_strings, _countof(channeldefinitionflags_strings));

	STRINGS(light_definition_flags)
	{
		"allow shadows and gels!#",
		"shadow casting#turns on shadow casting",
		"render first person only#only render when camera is 1st person",
		"render third person only#don\'t render when camera is 1st person",
		"dont render splitscreen#no rendering this light in splitscreen mode",
		"render while active camo#keep rendering this light when the attached player goes camo",
		"render in multiplayer override#overrides game settings that disable dynamic lights",
		"move to camera in first person#moves the light to match the camera",
		"never priority cull#never cull this light because of low priority",
		"affected by game_can_use_flashlights",
		"screenspace specular lighting#uses expensive specular lighting on screenspace lights",
		"always on for weapon#even it is dropped"
	};
	STRING_LIST(light_definition_flags, light_definition_flags_strings, _countof(light_definition_flags_strings));

	TAG_REFERENCE(lens_flare_group_reference, LENS_FLARE_TAG);

	#define MISSION_DIALOGUE_LINES_BLOCK_ID { 0xB95BD27F, 0x5B6545A1, 0xB83D0094, 0x922D3337 }
	TAG_STRUCT(
		mission_dialogue_lines_block,
		"mission_dialogue_lines_block",
		"mission_dialogue_lines_block",
		"s_mission_dialogue_lines_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MISSION_DIALOGUE_LINES_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "variants", &mission_dialogue_variants_block_block },
		{ _field_string_id, "default sound effect" },
		{ _field_terminator }
	};

	#define MISSION_DIALOGUE_VARIANTS_BLOCK_ID { 0x5DE3B90C, 0xABBB4DE3, 0x870EFC07, 0x7BB2AA80 }
	TAG_STRUCT(
		mission_dialogue_variants_block,
		"mission_dialogue_variants_block",
		"mission_dialogue_variants_block",
		"s_mission_dialogue_variants_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MISSION_DIALOGUE_VARIANTS_BLOCK_ID)
	{
		{ _field_string_id, "variant designation", "3-letter designation for the character", FIELD_FLAG_INDEX },
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_string_id, "sound effect" },
		{ _field_terminator }
	};

	TAG_REFERENCE(sound_group_reference, SOUND_TAG, TAG_REFERENCE_FLAG_RESOLVED_BY_GAME);

	#define MODE_OR_STANCE_ALIAS_BLOCK_STRUCT_ID { 0xC7C10AFC, 0x369245FF, 0x8F012522, 0x3A3A5FA6 }
	TAG_STRUCT(
		mode_or_stance_alias_block_struct,
		"mode_or_stance_alias_block_struct",
		"mode_or_stance_alias_block_struct",
		"s_mode_or_stance_alias_block_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODE_OR_STANCE_ALIAS_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "mode or stance" },
		{ _field_string_id, "alias" },
		{ _field_terminator }
	};

	#define MODELDISSOLVEDATABLOCK_ID { 0x95694A9F, 0x93E94F6B, 0x8959AD40, 0x96A8A349 }
	TAG_STRUCT(
		modeldissolvedatablock,
		"modelDissolveDataBlock",
		"modelDissolveDataBlock",
		"s_modeldissolvedatablock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODELDISSOLVEDATABLOCK_ID)
	{
		{ _field_tag_reference, "model dissolve data", &model_dissolve_definition_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(model_dissolve_definition_group_reference, MODEL_DISSOLVE_DEFINITION_TAG);

	#define MODELDISSOLVEPERREGIONTIMEOFFSETBLOCK_ID { 0xF1ED5F99, 0x6FF4668, 0x8C2EFC8F, 0x2EF5CEE3 }
	TAG_STRUCT(
		modeldissolveperregiontimeoffsetblock,
		"modelDissolvePerRegionTimeOffsetBlock",
		"modelDissolvePerRegionTimeOffsetBlock",
		"s_modeldissolveperregiontimeoffsetblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODELDISSOLVEPERREGIONTIMEOFFSETBLOCK_ID)
	{
		{ _field_string_id, "region name" },
		{ _field_real, "region time offset" },
		{ _field_terminator }
	};

	#define MODEL_ANIMATION_GRAPH_BLOCK_STRUCT_ID { 0xBC9BFC5F, 0xD294C40, 0xAD92DA9E, 0xA336E795 }
	TAG_STRUCT(
		model_animation_graph_block_struct,
		"model_animation_graph_block_struct",
		"model_animation_graph_block_struct",
		"s_model_animation_graph_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_ANIMATION_GRAPH_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "definitions", &animation_graph_definitions_struct },
		{ _field_struct, "content", &animation_graph_contents_struct },
		{ _field_struct, "run time data", &model_animation_runtime_data_struct },
		{ _field_block, "additional node data", &additional_node_data_block_block },
		{ _field_block, "tag resource groups", &model_animation_tag_resource_group_block },
		{ _field_struct, "codec data", &animation_codec_data_struct },
		{ _field_terminator }
	};

	#define MODEL_ANIMATION_RUNTIME_DATA_STRUCT_ID { 0xB1091BBF, 0xFC474475, 0x85A2D6A5, 0x2FAF2F30 }
	TAG_STRUCT(
		model_animation_runtime_data_struct,
		"model_animation_runtime_data_struct",
		"model_animation_runtime_data_struct",
		"s_model_animation_runtime_data_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_ANIMATION_RUNTIME_DATA_STRUCT_ID)
	{
		FIELD_EXPLANATION("RUN-TIME DATA", nullptr),
		{ _field_block, "inheritence list", &inherited_animation_block_block },
		{ _field_block, "new inheritance list", &inherited_animation_block_block },
		{ _field_block, "weapon list", &weapon_class_lookup_block_block },
		{ _field_array, "left arm bit vector", &g_node_flag_storage_array$2 },
		{ _field_array, "right arm bit vector", &g_node_flag_storage_array$2 },
		{ _field_data, "animationPlayCounts", &animationplaycountdata },
		{ _field_terminator }
	};

	#define MODEL_ANIMATION_TAG_RESOURCE_GROUP_ID { 0x47846C50, 0x26C74AF5, 0x8CBDED72, 0x972458F6 }
	TAG_STRUCT(
		model_animation_tag_resource_group,
		"model_animation_tag_resource_group",
		"model_animation_tag_resource_group",
		"s_model_animation_tag_resource_group",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_ANIMATION_TAG_RESOURCE_GROUP_ID)
	{
		{ _field_long_integer, "reference_count" },
		{ _field_pageable_resource, "tag_resource", &model_animation_tag_resource },
		{ _field_terminator }
	};

	#define MODEL_ANIMATION_TAG_RESOURCE_MEMBER_ID { 0xF84A790E, 0xBB494C5C, 0xA5D85B12, 0x9758A12C }
	TAG_STRUCT(
		model_animation_tag_resource_member,
		"model_animation_tag_resource_member",
		"model_animation_tag_resource_member",
		"s_model_animation_tag_resource_member",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_ANIMATION_TAG_RESOURCE_MEMBER_ID)
	{
		{ _field_long_integer, "animation_index" },
		{ _field_dword_integer, "animation_checksum" },
		{ _field_short_integer, "frame count" },
		{ _field_char_integer, "node count" },
		{ _field_char_enum, "movement_data_type", &frame_info_type_enum },
		{ _field_struct, "data sizes", &packed_data_sizes_struct },
		{ _field_data, "animation_data", &aligned_animation_data_definition_v1 },
		{ _field_terminator }
	};

	STRINGS(frame_info_type_enum)
	{
		"none",
		"dx,dy",
		"dx,dy,dyaw",
		"dx,dy,dz,dyaw",
		"dx,dy,dz,dangle-axis",
		"x,y,z - absolute",
		"auto"
	};
	STRING_LIST(frame_info_type_enum, frame_info_type_enum_strings, _countof(frame_info_type_enum_strings));

	#define MODEL_ANIMATION_TAG_RESOURCE_STRUCT_ID { 0x9439BE6, 0x3BDA48B1, 0x9947AD2E, 0xA1280611 }
	TAG_STRUCT(
		model_animation_tag_resource_struct,
		"model_animation_tag_resource_struct",
		"model_animation_tag_resource_struct",
		"s_model_animation_tag_resource_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_ANIMATION_TAG_RESOURCE_STRUCT_ID)
	{
		{ _field_block, "group_members", &model_animation_tag_resource_member_block },
		{ _field_terminator }
	};

	#define MODEL_ANIMATION_VARIANT_BLOCK_ID { 0xFD63AA7E, 0xC884058, 0x9FA74CD9, 0x53B1BCA6 }
	TAG_STRUCT(
		model_animation_variant_block,
		"model_animation_variant_block",
		"model_animation_variant_block",
		"s_model_animation_variant_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_ANIMATION_VARIANT_BLOCK_ID)
	{
		{ _field_string_id, "variant name" },
		{ _field_long_flags, "variant flags", &model_animation_variant_flags },
		{ _field_block, "mode or stance aliases", &mode_or_stance_alias_block_block },
		{ _field_terminator }
	};

	STRINGS(model_animation_variant_flags)
	{
		"needs mandible replacement"
	};
	STRING_LIST(model_animation_variant_flags, model_animation_variant_flags_strings, _countof(model_animation_variant_flags_strings));

	#define MODEL_BLOCK_STRUCT_ID { 0xAB569A7E, 0xC76C4EA3, 0x99F00227, 0xD006A3D8 }
	TAG_STRUCT(
		model_block_struct,
		"model_block_struct",
		"model_block_struct",
		"s_model_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("MODEL", nullptr),
		FIELD_CUSTOM("value", _tag_field_custom_type_model_bulk_import_command),
		{ _field_tag_reference, "render model", &render_model_group_reference$2 },
		{ _field_tag_reference, "collision model", &collision_model_group_reference },
		{ _field_tag_reference, "animation", &model_animation_graph_group_reference },
		{ _field_tag_reference, "physics_model", &physics_model_group_reference },
		{ _field_tag_reference, "imposter model", &imposter_model_group_reference$2 },
		{ _field_long_integer, "runtime render checksum" },
		{ _field_long_integer, "runtime collision checksum" },
		FIELD_EXPLANATION("Optional Static Lightmap", "\n"),
		{ _field_tag_reference, "Lighting Info", &scenario_structure_lighting_info_group_reference },
		{ _field_long_enum, "Size Class", &scenario_structure_size_enum },
		{ _field_long_flags, "Lightmap Flags", MAKE_ALT_NAMES("PVS flags"), &model_lightmap_flags_definition },
		{ _field_long_block_index, "Lightmap Variant", &model_variant_block_block },
		FIELD_EXPLANATION("PVS", "\n"),
		{ _field_real, "PVS bounding box extension factor ", "How much we extend the PVS region around the objects AABB : [good initial value 2.5]" },
		{ _field_real_vector_3d, "PVS block size ", "How big a single PVS block is, in world units : [good initial value (2.0,2.0,2.0)]" },
		{ _field_long_integer, "PVS sampling subdivision per axis ", "How many sample subdivisions we perform per PVS block when generating the data : [good initial value 2]" },
		{ _field_real, "PVS visibility threshold ", "Minimum amount we need to see of an individual part mesh to care about it : [good initial value 0.004]" },
		FIELD_EXPLANATION("level of detail", "\n"),
		{ _field_real, "disappear distance", nullptr, "world units" },
		{ _field_real, "begin fade distance", nullptr, "world units" },
		{ _field_real, "animation lod distance", nullptr, "world units" },
		{ _field_real, "shadow fade distance", "NOTE this is only a maximum distance, shadows may fade closer when you exceed the shadow budget, you should balance the total shadows in a scene", "world units" },
		{ _field_real, "imposter render distance", nullptr, "world units" },
		{ _field_short_enum, "imposter quality", &imposter_quality_definition },
		{ _field_short_enum, "imposter policy", &imposter_policy_definition },
		{ _field_real, "imposter brightness adjustment" },
		{ _field_real, "instance disappear distance", nullptr, "world units" },
		{ _field_real, "midrange detail disappear distance", "distance at which the midrange detail disappears", "world units" },
		{ _field_real, "close detail disappear distance", "distance at which the close detail disappears", "world units" },
		{ _field_real, "tessellation max draw distance", nullptr, "world units" },
		{ _field_long_flags, "resource distance override flags", &model_lod_resource_distance_flags_definition },
		{ _field_real, "medium priority distance" },
		{ _field_real, "low priority distance" },
		{ _field_block, "variants", &model_variant_block_block },
		{ _field_block, "region sort", &region_name_block_block },
		{ _field_block, "instance groups", &global_model_instance_group_block_block },
		{ _field_block, "model materials", &model_material_block_new_block },
		{ _field_block, "new damage info", &global_damage_info_block_block },
		{ _field_struct, "damage info", &model_damage_info_struct },
		{ _field_block, "targets old", MAKE_ALT_NAMES("targets"), FIELD_FLAG_UNKNOWN0, &model_target_block_old_block },
		{ _field_block, "model targets", &model_target_block_new_block },
		{ _field_block, "runtime regions", &model_region_block_block },
		{ _field_block, "runtime nodes", &model_node_block_block },
		{ _field_long_integer, "runtime node list checksum" },
		FIELD_EXPLANATION("more stuff", nullptr),
		{ _field_tag_reference, "default dialogue", "The default dialogue tag for this model (overriden by variants)", &dialogue_group_reference$3 },
		{ _field_tag_reference, "default dialogue female", "The default FEMALE dialogue tag for this model (overriden by variants)", &dialogue_group_reference$3 },
		{ _field_long_flags, "flags", &model_flags_definition },
		{ _field_string_id, "default dialogue effect", "The default dialogue tag for this model (overriden by variants)" },
		{ _field_array, "render-only node flags", &g_node_flag_storage_array$2 },
		{ _field_array, "render-only section flags", &g_node_flag_storage_array$2 },
		{ _field_long_flags, "runtime flags", &model_private_flags_definition },
		{ _field_block, "scenario load parameters", &global_scenario_load_parameters_block_block },
		{ _field_block, "game mode render model override", &model_game_mode_render_model_override_block },
		{ _field_real_fraction, "Sky parallax percent", "If flag checked % between sky pos and camera pos 0=camera" },
		{ _field_real, "shadow depth compare bias", "Default is 0.002" },
		{ _field_real, "shadow slope scale bias", "controls cutoff point for shadows around edges.  Default is 81 degrees", "degrees" },
		{ _field_real, "shadow depth compare bias (dynamic lights)", "Default is 0.0008" },
		{ _field_real, "shadow slope scale bias (dynamic lights)", "controls cutoff point for shadows around edges.  Default is 81 degrees", "degrees" },
		FIELD_EXPLANATION("PRT Shadows (soft self-shadow)", "By default, the shadows on each permutation are computed using the first permutation in\nevery other region as shadow casters.  You can override this behavior below by specifying\nwhich permutation to use as a shadow caster in a given region.\n\n  PRT shadow bounces:\n    the number of light bounces to use when computing the global illumination.\n    (0 bounces gets only direct light).  Increasing the number of bounces\n    increases the calculation time.  1 or 2 bounces should be good enough for\n    almost all models.\n"),
		{ _field_char_enum, "PRT shadow detail", "how much information is recorded about different light directions", &model_self_shadow_detail_definition },
		{ _field_char_enum, "PRT shadow bounces", "0 means direct light only", &model_self_shadow_bounces_definition },
		FIELD_PAD("NCFGBA", 2),
		{ _field_block, "shadow cast override", &model_self_shadow_region_cast_override_block_block },
		{ _field_block, "shadow receive override", &model_self_shadow_region_receive_override_block_block },
		{ _field_block, "occlusion spheres", &model_occlusion_sphere_block_block },
		FIELD_EXPLANATION("Shield impact overrides", "Regular and 1st person shield impact effect overrides\n"),
		{ _field_tag_reference, "shield impact parameter override", &shield_impact_group_reference },
		{ _field_tag_reference, "1st person shield impact parameter override", &shield_impact_group_reference },
		{ _field_real, "runtime bounding radius", nullptr, "world units", FIELD_FLAG_UNKNOWN0 | FIELD_FLAG_READ_ONLY },
		{ _field_real_point_3d, "runtime bounding offset" },
		{ _field_terminator }
	};

	TAG_REFERENCE(render_model_group_reference$2, RENDER_MODEL_TAG);

	TAG_REFERENCE(collision_model_group_reference, COLLISION_MODEL_TAG);

	TAG_REFERENCE(physics_model_group_reference, PHYSICS_MODEL_TAG);

	TAG_REFERENCE(imposter_model_group_reference$2, IMPOSTER_MODEL_TAG);

	STRINGS(model_lightmap_flags_definition)
	{
		"pvs enabled",
		"per vertex all",
		"generate forge atlas"
	};
	STRING_LIST(model_lightmap_flags_definition, model_lightmap_flags_definition_strings, _countof(model_lightmap_flags_definition_strings));

	STRINGS(imposter_quality_definition)
	{
		"default",
		"high",
		"super"
	};
	STRING_LIST(imposter_quality_definition, imposter_quality_definition_strings, _countof(imposter_quality_definition_strings));

	STRINGS(imposter_policy_definition)
	{
		"default",
		"never",
		"always"
	};
	STRING_LIST(imposter_policy_definition, imposter_policy_definition_strings, _countof(imposter_policy_definition_strings));

	STRINGS(model_lod_resource_distance_flags_definition)
	{
		"override enabled"
	};
	STRING_LIST(model_lod_resource_distance_flags_definition, model_lod_resource_distance_flags_definition_strings, _countof(model_lod_resource_distance_flags_definition_strings));

	TAG_REFERENCE(dialogue_group_reference$3, DIALOGUE_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR);

	STRINGS(model_flags_definition)
	{
		"active camo always on",
		"active camo never",
		"inconsequential target#used in magnetism and campaign saving",
		"model use airprobe lighting first{model use airprobe lighting}",
		"locked precomputed probes#air or scenery probe",
		"If sky attaches to camera#parallax % between sky pos and camera pos below",
		"model is big battle object",
		"model never uses compressed vertex position",
		"model is invisible, even attachments",
		"model can have shield impact effect!*",
		"model is good z occluder",
		"no child objects in lightmap shadow",
		"should include model in floating shadow"
	};
	STRING_LIST(model_flags_definition, model_flags_definition_strings, _countof(model_flags_definition_strings));

	STRINGS(model_private_flags_definition)
	{
		"contains run-time nodes"
	};
	STRING_LIST(model_private_flags_definition, model_private_flags_definition_strings, _countof(model_private_flags_definition_strings));

	STRINGS(model_self_shadow_detail_definition)
	{
		"Ambient Occlusion (2 bytes per vertex){0}",
		"Linear (8 bytes per vertex){1}",
		"Quadratic (18 bytes per vertex){2}"
	};
	STRING_LIST(model_self_shadow_detail_definition, model_self_shadow_detail_definition_strings, _countof(model_self_shadow_detail_definition_strings));

	STRINGS(model_self_shadow_bounces_definition)
	{
		"0 bounces (very fast, direct light only)",
		"1 bounce  (slower, pretty good)",
		"2 bounces (molasses, very good)",
		"3 bounces (sloth in molasses, overkill really)"
	};
	STRING_LIST(model_self_shadow_bounces_definition, model_self_shadow_bounces_definition_strings, _countof(model_self_shadow_bounces_definition_strings));

	#define MODEL_DAMAGE_INFO_STRUCT_ID { 0xDF8AD947, 0xD85A4A9F, 0xA4D8F89C, 0xD3E30B24 }
	TAG_STRUCT(
		model_damage_info_struct,
		"model_damage_info_struct",
		"model_damage_info_struct",
		"s_model_damage_info_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_DAMAGE_INFO_STRUCT_ID)
	{
		FIELD_EXPLANATION("Damage Info", nullptr),
		{ _field_long_flags, "flags", &new_model_damage_info_flags_definition },
		{ _field_real, "maximum vitality", "value of zero implies 'damage sections' should be empty" },
		{ _field_string_id, "indirect material name", "absorbes AOE or child damage" },
		{ _field_short_block_index, "indirect damage section", "absorbes AOE or child damage", &new_global_damage_section_block_block },
		{ _field_short_block_index, "shielded state damage section", "the model's shielded/unshielded state reflects the depletion of this damage section", &new_global_damage_section_block_block },
		{ _field_char_enum, "collision damage reporting type", &global_damage_reporting_enum_definition },
		{ _field_char_enum, "response damage reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("MDIBP0", 2),
		{ _field_block, "damage sections", &new_global_damage_section_block_block },
		{ _field_block, "damage constraints", &damage_constraint_info_block_block },
		{ _field_block, "nodes", &global_damage_nodes_block_block },
		{ _field_short_integer, "runtime indirect material type" },
		FIELD_PAD("MDIBP1", 2),
		{ _field_terminator }
	};

	STRINGS(new_model_damage_info_flags_definition)
	{
		"takes damage for children#useful for bipeds shielding/taking damage for weapons",
		"parent never takes damage for us#useful for attached shields",
		"cannot die from damage",
		"dies with riders",
		"passes area damage to children"
	};
	STRING_LIST(new_model_damage_info_flags_definition, new_model_damage_info_flags_definition_strings, _countof(new_model_damage_info_flags_definition_strings));

	#define MODEL_DISSOLVE_DEFINITION_STRUCT_DEFINITION_ID { 0xB46D6344, 0x9E9A42C1, 0xA96370B0, 0xA5728CF5 }
	TAG_STRUCT(
		model_dissolve_definition_struct_definition,
		"model_dissolve_definition_struct_definition",
		"model_dissolve_definition_struct_definition",
		"s_model_dissolve_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_DISSOLVE_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_byte_flags, "flags", &modeldissolveflags },
		{ _field_char_enum, "particle spawn position", &modeldissolveparticlespawnposition },
		FIELD_PAD("graaag", 2),
		{ _field_real, "particle spawn random radius" },
		{ _field_tag_reference, "cheap particle emitter", &cheap_particle_emitter_group_reference$2 },
		{ _field_real, "cheap particle spawn distance threshold" },
		FIELD_GROUP_BEGIN("particle velocity factors"),
		{ _field_real, "velocity up" },
		{ _field_real, "velocity toward dissolve point" },
		{ _field_real, "velocity toward dissolve surface" },
		{ _field_real, "velocity along dissolve surface" },
		{ _field_real, "velocity random" },
		FIELD_GROUP_END(),
		{ _field_real, "particle forced speed", "if non-zero, we normalize the speed to this value" },
		{ _field_real, "duration" },
		{ _field_real, "extra duration", "particularly for reverse dissolves, to prevent popping" },
		{ _field_real, "particle spawn time offset", "particularly for reverse dissolves, to cause particles to arrive at the leading edge" },
		{ _field_block, "per-region time offset", &modeldissolveperregiontimeoffsetblock_block },
		FIELD_GROUP_BEGIN("effects"),
		{ _field_tag_reference, "dissolve point", &effect_group_reference$3 },
		{ _field_tag_reference, "opposite dissolve point", &effect_group_reference$3 },
		{ _field_tag_reference, "dissolve surface", &effect_group_reference$3 },
		{ _field_tag_reference, "bounding sphere center", &effect_group_reference$3 },
		FIELD_GROUP_END(),
		{ _field_tag_reference, "finish effect", &effect_group_reference$3 },
		{ _field_tag_reference, "knight taint crate", &crate_group_reference$6 },
		FIELD_CUSTOM("material", _tag_field_custom_type_tag_group_template),
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "actual material?", &material_struct },
		FIELD_HIDE_END(),
		{ _field_terminator }
	};

	STRINGS(modeldissolveflags)
	{
		"draw backfaces on overlay",
		"reverse dissolve",
		"pin to animation",
		"time particles to die when arriving",
		"needs transmission over network",
		"can be restarted",
		"bounding center effect is taint spawn"
	};
	STRING_LIST(modeldissolveflags, modeldissolveflags_strings, _countof(modeldissolveflags_strings));

	STRINGS(modeldissolveparticlespawnposition)
	{
		"dissolve surface",
		"dissolve point",
		"opposite from dissolve point"
	};
	STRING_LIST(modeldissolveparticlespawnposition, modeldissolveparticlespawnposition_strings, _countof(modeldissolveparticlespawnposition_strings));

	TAG_REFERENCE(cheap_particle_emitter_group_reference$2, CHEAP_PARTICLE_EMITTER_TAG);

	TAG_REFERENCE(crate_group_reference$6, CRATE_TAG);

	#define MODEL_GAME_MODE_RENDER_MODEL_OVERRIDE_ID { 0x6DD2DC3C, 0x333C4458, 0xA2BABBF8, 0x84C20B15 }
	TAG_STRUCT(
		model_game_mode_render_model_override,
		"game mode render model override",
		"model_game_mode_render_model_override",
		"s_model_game_mode_render_model_override",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_GAME_MODE_RENDER_MODEL_OVERRIDE_ID)
	{
		{ _field_short_enum, "game mode", &model_game_mode_types },
		FIELD_PAD("BL", 2),
		{ _field_tag_reference, "render model override", &render_model_group_reference$3 },
		{ _field_terminator }
	};

	STRINGS(model_game_mode_types)
	{
		"campaign",
		"multiplayer",
		"firefight",
		"mainmenu"
	};
	STRING_LIST(model_game_mode_types, model_game_mode_types_strings, _countof(model_game_mode_types_strings));

	TAG_REFERENCE(render_model_group_reference$3, RENDER_MODEL_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define MODEL_INSTANCE_GROUP_MEMBER_BLOCK_ID { 0xB9F452BD, 0xE5364484, 0xBCA75D3E, 0x96AF278 }
	TAG_STRUCT(
		model_instance_group_member_block,
		"instance group member",
		"model_instance_group_member_block",
		"s_model_instance_group_member_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_INSTANCE_GROUP_MEMBER_BLOCK_ID)
	{
		{ _field_long_block_index, "subgroup", "if this member is chosen, this subgroup will be chosen as well", &global_model_instance_group_block_block },
		{ _field_string_id, "instances", "instance name, a partial name will choose all matching instances, leave blank for NONE" },
		{ _field_real, "probability", "higher numbers make it more likely", "> 0.0" },
		{ _field_long_integer, "instance placement mask 0" },
		{ _field_long_integer, "instance placement mask 1" },
		{ _field_long_integer, "instance placement mask 2" },
		{ _field_long_integer, "instance placement mask 3" },
		{ _field_terminator }
	};

	#define MODEL_MATERIAL_BLOCK_NEW_ID { 0x9D7DA35A, 0x8B7E4FD9, 0x9C66D02E, 0xB415A680 }
	TAG_STRUCT(
		model_material_block_new,
		"material",
		"model_material_block_new",
		"s_model_material_block_new",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_MATERIAL_BLOCK_NEW_ID)
	{
		{ _field_string_id, "material name" },
		FIELD_PAD("unused flags", 2),
		{ _field_short_block_index, "damage section", &new_global_damage_section_block_block },
		{ _field_short_integer, "runtime collision material index" },
		{ _field_short_integer, "runtime damager material index" },
		{ _field_string_id, "global material name" },
		{ _field_short_integer, "runtime global material index" },
		FIELD_PAD("SEWETKHRE", 2),
		{ _field_terminator }
	};

	#define MODEL_NODE_BLOCK_ID { 0xE5E9FB01, 0xF8384408, 0xAFEC9EFF, 0x28E7E6F4 }
	TAG_STRUCT(
		model_node_block,
		"model_node_block",
		"model_node_block",
		"s_model_node_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_NODE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "parent node", &model_node_block_block },
		{ _field_short_block_index, "first child node", &model_node_block_block },
		{ _field_short_block_index, "next sibling node", &model_node_block_block },
		FIELD_PAD("GHTI", 2),
		{ _field_real_point_3d, "default translation" },
		{ _field_real_quaternion, "default rotation" },
		{ _field_real, "default inverse scale" },
		{ _field_real_vector_3d, "default inverse forward" },
		{ _field_real_vector_3d, "default inverse left" },
		{ _field_real_vector_3d, "default inverse up" },
		{ _field_real_point_3d, "default inverse position" },
		{ _field_terminator }
	};

	#define MODEL_OCCLUSION_SPHERE_BLOCK_ID { 0x6301C370, 0x3F4846FD, 0x8AF5CD6F, 0x79C5363C }
	TAG_STRUCT(
		model_occlusion_sphere_block,
		"model_occlusion_sphere_block",
		"model_occlusion_sphere_block",
		"s_model_occlusion_sphere_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_OCCLUSION_SPHERE_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker 1 name" },
		{ _field_long_integer, "marker 1 index" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker 2 name" },
		{ _field_long_integer, "marker 2 index" },
		{ _field_real, "radius" },
		{ _field_terminator }
	};

	#define MODEL_PERMUTATION_BLOCK_ID { 0x72671B5F, 0x63CE4207, 0xBE9A29D5, 0x3EB1033F }
	TAG_STRUCT(
		model_permutation_block,
		"model_permutation_block",
		"model_permutation_block",
		"s_model_permutation_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_PERMUTATION_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_byte_flags, "flags", &model_permutation_flags_definition },
		{ _field_char_integer, "collision permutation index" },
		{ _field_char_integer, "physics permutation index" },
		FIELD_PAD("AVZQS", 1),
		{ _field_terminator }
	};

	STRINGS(model_permutation_flags_definition)
	{
		"cannot be chosen randomly"
	};
	STRING_LIST(model_permutation_flags_definition, model_permutation_flags_definition_strings, _countof(model_permutation_flags_definition_strings));

	#define MODEL_REFERENCES_BLOCK_ID { 0x6910250B, 0x56194147, 0xBD8BA5D6, 0x51ED8CA3 }
	TAG_STRUCT(
		model_references_block,
		"model_references_block",
		"model_references_block",
		"s_model_references_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_REFERENCES_BLOCK_ID)
	{
		{ _field_tag_reference, "model reference", &model_group_reference$5 },
		{ _field_terminator }
	};

	TAG_REFERENCE(model_group_reference$5, MODEL_TAG);

	#define MODEL_REGION_BLOCK_ID { 0x4E1EFAA1, 0x9CA248F7, 0x9223106F, 0xC7A5C1A4 }
	TAG_STRUCT(
		model_region_block,
		"model_region_block",
		"model_region_block",
		"s_model_region_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_REGION_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_char_integer, "collision region index" },
		{ _field_char_integer, "physics region index" },
		FIELD_PAD("QDSJS", 2),
		{ _field_block, "permutations", &model_permutation_block_block },
		{ _field_terminator }
	};

	#define MODEL_SELF_SHADOW_REGION_CAST_OVERRIDE_BLOCK_ID { 0x9AAFE87A, 0xEB8C4EC7, 0x89BAEF7B, 0x7ADE02DB }
	TAG_STRUCT(
		model_self_shadow_region_cast_override_block,
		"model_self_shadow_region_cast_override_block",
		"model_self_shadow_region_cast_override_block",
		"s_model_self_shadow_region_cast_override_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_SELF_SHADOW_REGION_CAST_OVERRIDE_BLOCK_ID)
	{
		{ _field_string_id, "region" },
		{ _field_string_id, "shadow cast permutation", "leave blank for none" },
		{ _field_terminator }
	};

	#define MODEL_SELF_SHADOW_REGION_RECEIVE_OVERRIDE_BLOCK_ID { 0x7EB85F6C, 0x6B57414C, 0xAF117275, 0x5EA33656 }
	TAG_STRUCT(
		model_self_shadow_region_receive_override_block,
		"model_self_shadow_region_receive_override_block",
		"model_self_shadow_region_receive_override_block",
		"s_model_self_shadow_region_receive_override_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_SELF_SHADOW_REGION_RECEIVE_OVERRIDE_BLOCK_ID)
	{
		{ _field_string_id, "region" },
		{ _field_long_enum, "shadow type", &model_prt_shadow_receive_mode_definition },
		{ _field_terminator }
	};

	STRINGS(model_prt_shadow_receive_mode_definition)
	{
		"PRT shadows from all regions (default permutations)",
		"PRT self-shadow only (no shadows from other regions)",
		"No PRT shadows at all (probably not useful)"
	};
	STRING_LIST(model_prt_shadow_receive_mode_definition, model_prt_shadow_receive_mode_definition_strings, _countof(model_prt_shadow_receive_mode_definition_strings));

	#define MODEL_STATE_PERMUTATION_INDEX_ARRAY_STRUCT_DEFINITION_ID { 0x42CDCB9B, 0x148440EA, 0xB21C6D08, 0xB3C86C53 }
	TAG_STRUCT(
		model_state_permutation_index_array_struct_definition,
		"model_state_permutation_index_array",
		"model_state_permutation_index_array",
		"s_model_state_permutation_index_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_STATE_PERMUTATION_INDEX_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_char_integer, "runtime permutation index" },
		{ _field_terminator }
	};

	#define MODEL_TARGET_BLOCK_NEW_ID { 0x9ECA6B32, 0x9EF4F1E, 0xAC641ADB, 0x98E0337B }
	TAG_STRUCT(
		model_target_block_new,
		"model_target_block_new",
		"model_target_block_new",
		"s_model_target_block_new",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_TARGET_BLOCK_NEW_ID)
	{
		{ _field_byte_flags, "flags", &model_target_flags_definition },
		FIELD_PAD("MTBNP1", 3),
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name", "multiple markers become multiple spheres of the same radius" },
		{ _field_real, "size", "sphere radius" },
		{ _field_angle, "cone angle", "the target is only visible when viewed within this angle of the marker's x axis" },
		{ _field_short_block_index, "damage section", "the target is associated with this damage section", &new_global_damage_section_block_block },
		{ _field_short_block_index, "variant", "the target will only appear with this variant", &model_variant_block_block },
		{ _field_real_fraction, "targeting relevance", "higher relevances turn into stronger magnetisms" },
		{ _field_real, "aoe exclusion radius", "ignored if zero" },
		{ _field_struct, "lock-on data", &model_target_lock_on_data_struct },
		{ _field_terminator }
	};

	STRINGS(model_target_flags_definition)
	{
		"aoe top level",
		"aoe test obstruction",
		"shows tracking reticle#use this model targets center for displaying the targetting reticle"
	};
	STRING_LIST(model_target_flags_definition, model_target_flags_definition_strings, _countof(model_target_flags_definition_strings));

	#define MODEL_TARGET_BLOCK_OLD_ID { 0x98F4CB8B, 0xA25646F3, 0x9B244873, 0xF1005E11 }
	TAG_STRUCT(
		model_target_block_old,
		"model_target_block_old",
		"model_target_block_old",
		"s_model_target_block_old",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_TARGET_BLOCK_OLD_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name", "multiple markers become multiple spheres of the same radius" },
		{ _field_real, "size", "sphere radius" },
		{ _field_angle, "cone angle", "the target is only visible when viewed within this angle of the marker's x axis" },
		{ _field_short_block_index_custom_search, "damage section", "the target is associated with this damage section", &damage_section_search_definition },
		{ _field_short_block_index, "variant", "the target will only appear with this variant", &model_variant_block_block },
		{ _field_real_fraction, "targeting relevance", "higher relevances turn into stronger magnetisms" },
		{ _field_real, "aoe exclusion radius", "ignored if zero" },
		{ _field_struct, "lock-on data", &model_target_lock_on_data_struct },
		{ _field_terminator }
	};

	#define MODEL_TARGET_LOCK_ON_DATA_STRUCT_ID { 0x3BEBBCB0, 0xF83B4943, 0x9C36F114, 0x2C166B4D }
	TAG_STRUCT(
		model_target_lock_on_data_struct,
		"model_target_lock_on_data_struct",
		"model_target_lock_on_data_struct",
		"s_model_target_lock_on_data_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_TARGET_LOCK_ON_DATA_STRUCT_ID)
	{
		FIELD_EXPLANATION("lock-on fields", nullptr),
		{ _field_byte_flags, "flags", &model_target_lock_on_flags_definition },
		FIELD_PAD("SVLKJERAF", 3),
		{ _field_real, "lock on distance" },
		{ _field_string_id, "tracking type", "a weapon can track/lock on this target if this string is in the weapon's tracking block" },
		{ _field_terminator }
	};

	STRINGS(model_target_lock_on_flags_definition)
	{
		"headshot",
		"vulnerable",
		"ignored on local physics",
		"use for network lead vector only"
	};
	STRING_LIST(model_target_lock_on_flags_definition, model_target_lock_on_flags_definition_strings, _countof(model_target_lock_on_flags_definition_strings));

	#define MODEL_VARIANT_BLOCK_ID { 0x539CDDB4, 0x7412487A, 0x91B85DAA, 0xC3AAF510 }
	TAG_STRUCT(
		model_variant_block,
		"variant",
		"model_variant_block",
		"s_model_variant_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_VARIANT_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_array, "runtime variant region indices", &runtime_region_index_array$2 },
		{ _field_block, "regions", &model_variant_region_block_block },
		{ _field_block, "objects", &model_variant_object_block_block },
		{ _field_long_block_index, "instance group", "selects an instance group for this variant", &global_model_instance_group_block_block },
		{ _field_block, "muted nodes", "turn off animation on these named nodes and children", &model_variant_muted_node_block_block },
		{ _field_array, "muted flag", &g_node_flag_storage_array$2 },
		{ _field_terminator }
	};

	#define MODEL_VARIANT_MUTED_NODE_BLOCK_ID { 0xFBAAF7D3, 0x5A714A16, 0x9A3638D1, 0xC70FEEF5 }
	TAG_STRUCT(
		model_variant_muted_node_block,
		"muted node",
		"model_variant_muted_node_block",
		"s_model_variant_muted_node_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_VARIANT_MUTED_NODE_BLOCK_ID)
	{
		{ _field_string_id, "node name", nullptr, "must match node name in render_model" },
		{ _field_terminator }
	};

	#define MODEL_VARIANT_OBJECT_BLOCK_ID { 0x86B36FDB, 0xEAD546C3, 0xB0190BC3, 0x34938689 }
	TAG_STRUCT(
		model_variant_object_block,
		"object",
		"model_variant_object_block",
		"s_model_variant_object_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_VARIANT_OBJECT_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "parent marker" },
		{ _field_string_id, "parent controlling seat label", "the seat in my parent that will control me" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "child marker" },
		{ _field_string_id, "child variant name", "optional" },
		{ _field_tag_reference, "child object", &object_group_reference$5 },
		{ _field_short_block_index, "damage section", &new_global_damage_section_block_block },
		{ _field_byte_flags, "flags", &modelvariantobjectflagsdefinition },
		FIELD_PAD("MVOBP1", 1),
		{ _field_terminator }
	};

	TAG_REFERENCE(object_group_reference$5, OBJECT_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR);

	STRINGS(modelvariantobjectflagsdefinition)
	{
		"enable physics"
	};
	STRING_LIST(modelvariantobjectflagsdefinition, modelvariantobjectflagsdefinition_strings, _countof(modelvariantobjectflagsdefinition_strings));

	#define MODEL_VARIANT_PERMUTATION_BLOCK_ID { 0x4ED99004, 0x1D7045CC, 0x98959600, 0x6C3550AD }
	TAG_STRUCT(
		model_variant_permutation_block,
		"permutation",
		"model_variant_permutation_block",
		"s_model_variant_permutation_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_VARIANT_PERMUTATION_BLOCK_ID)
	{
		{ _field_string_id, "permutation name" },
		{ _field_char_integer, "runtime permutation index" },
		{ _field_byte_flags, "flags", &model_variant_permutation_flags_definition },
		FIELD_PAD("KSJOSR", 2),
		{ _field_real, "probability", nullptr, "(0,+inf)" },
		{ _field_block, "states", &model_variant_state_block_block },
		{ _field_array, "runtime state permutation indices", &model_state_permutation_index_array$2 },
		FIELD_PAD("LOOEL", 7),
		{ _field_terminator }
	};

	STRINGS(model_variant_permutation_flags_definition)
	{
		"copy states to all permutations"
	};
	STRING_LIST(model_variant_permutation_flags_definition, model_variant_permutation_flags_definition_strings, _countof(model_variant_permutation_flags_definition_strings));

	#define MODEL_VARIANT_REGION_BLOCK_ID { 0x70F6AFA, 0x5F64F74, 0xBAFFFFE6, 0x12F8BD5C }
	TAG_STRUCT(
		model_variant_region_block,
		"region",
		"model_variant_region_block",
		"s_model_variant_region_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_VARIANT_REGION_BLOCK_ID)
	{
		{ _field_string_id, "region name", nullptr, "must match region name in render_model" },
		{ _field_char_integer, "runtime region index" },
		{ _field_byte_integer, "runtime flags" },
		{ _field_short_block_index, "parent variant", &model_variant_block_block },
		{ _field_block, "permutations", &model_variant_permutation_block_block },
		{ _field_short_enum, "sort order", "negative values mean closer to the camera", &region_sort_enum },
		FIELD_PAD("JO", 2),
		{ _field_terminator }
	};

	STRINGS(region_sort_enum)
	{
		"no sorting",
		"-5 (closest)",
		"-4",
		"-3",
		"-2",
		"-1",
		"0 (same as model)",
		"1",
		"2",
		"3",
		"4",
		"5 (farthest)"
	};
	STRING_LIST(region_sort_enum, region_sort_enum_strings, _countof(region_sort_enum_strings));

	#define MODEL_VARIANT_STATE_BLOCK_ID { 0xDD3D5ACB, 0xC81742A9, 0x911C9F78, 0x4A18CA81 }
	TAG_STRUCT(
		model_variant_state_block,
		"model_variant_state_block",
		"model_variant_state_block",
		"s_model_variant_state_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MODEL_VARIANT_STATE_BLOCK_ID)
	{
		{ _field_string_id, "permutation name" },
		{ _field_char_integer, "runtime permutation index" },
		{ _field_byte_flags, "property flags", &model_state_property_flags_definition },
		{ _field_short_enum, "state", &model_state_enum_definition },
		{ _field_real_fraction, "initial probability" },
		{ _field_terminator }
	};

	STRINGS(model_state_property_flags_definition)
	{
		"blurred",
		"hella blurred",
		"unshielded{shielded}",
		"battery depleted"
	};
	STRING_LIST(model_state_property_flags_definition, model_state_property_flags_definition_strings, _countof(model_state_property_flags_definition_strings));

	#define MOPP_BV_TREE_SHAPE_STRUCT_ID { 0x662B38A4, 0xAAAC448C, 0x81C491AB, 0xA4E2A6EE }
	TAG_STRUCT(
		mopp_bv_tree_shape_struct,
		"mopp_bv_tree_shape_struct",
		"mopp_bv_tree_shape_struct",
		"s_mopp_bv_tree_shape_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MOPP_BV_TREE_SHAPE_STRUCT_ID,
		4)
	{
		{ _field_struct, "mopp bv tree shape", &havok_shape_struct_2010_2 },
		FIELD_PAD("m_bvTreeType", 1),
		FIELD_PAD("3 other bytes", 3),
		{ _field_long_integer, "mopp code pointer", _field_id_zero_data },
		{ _field_long_integer, "mopp data skip", _field_id_zero_data },
		{ _field_long_integer, "mopp data size" },
		{ _field_real_vector_3d, "code info copy" },
		{ _field_real, "havok w code info copy" },
		{ _field_long_integer, "child shape vtable", _field_id_zero_data },
		{ _field_long_integer, "child shape pointer", _field_id_zero_data },
		{ _field_long_integer, "child size" },
		FIELD_PAD("mopp alignment", 4),
		{ _field_real, "mopp scale" },
		FIELD_PAD("final pad", 12),
		{ _field_terminator }
	};

	#define MOPP_CODE_DATA_DEFINITION_BLOCK_ID { 0xEAB741F, 0xF5D74408, 0x9D5A32E1, 0x12D4FD6D }
	TAG_STRUCT(
		mopp_code_data_definition_block,
		"mopp_code_data_definition_block",
		"mopp_code_data_definition_block",
		"s_mopp_code_data_definition_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MOPP_CODE_DATA_DEFINITION_BLOCK_ID)
	{
		{ _field_byte_integer, "mopp data" },
		{ _field_terminator }
	};

	#define MOPP_CODE_DEFINITION_BLOCK_ID { 0xEE2BC898, 0x8AD14E98, 0xB64351E5, 0x635CF676 }
	TAG_STRUCT(
		mopp_code_definition_block,
		"mopp_code_definition_block",
		"mopp_code_definition_block",
		"s_mopp_code_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MOPP_CODE_DEFINITION_BLOCK_ID,
		4)
	{
		{ _field_long_integer, "field pointer skip", _field_id_zero_data },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD("total shit pad1", 8),
		{ _field_real, "v.i" },
		{ _field_real, "v.j" },
		{ _field_real, "v.k" },
		{ _field_real, "v.w" },
		{ _field_long_integer, "m_data pointer", _field_id_zero_data },
		{ _field_long_integer, "int m_size" },
		{ _field_long_integer, "int m_capacityAndFlags" },
		{ _field_char_integer, "int8 m_buildType" },
		FIELD_PAD("total shit pad2", 3),
		FIELD_HIDE_BEGIN(),
		{ _field_block, "mopp data block ", &mopp_code_data_definition_block_block },
		FIELD_HIDE_END(),
		{ _field_char_integer, "mopp build type", "they say it only matters for ps3" },
		FIELD_PAD("explicit alignment pad 3", 3),
		{ _field_terminator }
	};

	#define MOPPS_BLOCK_STRUCT_ID { 0xE4F5D223, 0x227240B1, 0xA6CE731C, 0x47D19CDC }
	TAG_STRUCT(
		mopps_block_struct,
		"mopps_block_struct",
		"mopps_block_struct",
		"s_mopps_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MOPPS_BLOCK_STRUCT_ID,
		4)
	{
		{ _field_struct, "base", &havok_shape_struct },
		FIELD_PAD("m_bvTreeType", 1),
		FIELD_PAD("3 other bytes", 3),
		{ _field_long_integer, "mopp code pointer", _field_id_zero_data },
		{ _field_long_integer, "mopp data skip", _field_id_zero_data },
		{ _field_long_integer, "mopp data size" },
		{ _field_real_vector_3d, "m_codeInfoCopy" },
		{ _field_real, "havok w m_codeInfoCopy" },
		{ _field_long_integer, "child shape vtable", _field_id_zero_data },
		{ _field_struct, "childShapePointer", &havok_shape_reference_struct },
		{ _field_long_integer, "child size" },
		FIELD_PAD("mopp alignment", 4),
		{ _field_real, "scale" },
		FIELD_PAD("final alignment", 12),
		{ _field_terminator }
	};

	#define MOVEMENT_MAPPING_BLOCK_ID { 0x2D4F623E, 0xEF304628, 0xBA8D7DA4, 0xD747C2E7 }
	TAG_STRUCT(
		movement_mapping_block,
		"movement_mapping_block",
		"movement_mapping_block",
		"s_movement_mapping_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MOVEMENT_MAPPING_BLOCK_ID)
	{
		{ _field_real, "chance" },
		FIELD_EXPLANATION("MAPPING", "Movement type -> stance"),
		{ _field_string_id, "idle" },
		{ _field_string_id, "alert" },
		{ _field_string_id, "engage" },
		{ _field_string_id, "self_preserve" },
		{ _field_string_id, "search" },
		{ _field_string_id, "retreat" },
		{ _field_string_id, "panic" },
		{ _field_string_id, "flank" },
		{ _field_string_id, "protected" },
		{ _field_string_id, "stunned" },
		{ _field_string_id, "post_combat" },
		{ _field_string_id, "custom_1" },
		{ _field_string_id, "custom_2" },
		{ _field_string_id, "custom_3" },
		{ _field_string_id, "custom_4" },
		{ _field_terminator }
	};

	#define MOVEMENT_STATIONARY_PAUSE_BLOCK_ID { 0xCD24A769, 0x416F456E, 0xB2335CFB, 0xEABA2837 }
	TAG_STRUCT(
		movement_stationary_pause_block,
		"movement_stationary_pause_block",
		"movement_stationary_pause_block",
		"s_movement_stationary_pause_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MOVEMENT_STATIONARY_PAUSE_BLOCK_ID)
	{
		FIELD_EXPLANATION("Inertial pause settings", "These values tell the actor to remain stationary for the specified number of ticks if he changes his direction of movement by at least \'change angle\'. Specifying an angle of 0 means pause this much every time you get to your destination."),
		{ _field_angle, "direction change angle", nullptr, "degrees" },
		{ _field_long_integer, "stationary change", nullptr, "ticks" },
		{ _field_terminator }
	};

	#define MOVEMENT_THROTTLE_BLOCK_ID { 0x471A7D90, 0xEE01407E, 0xA1F77B89, 0x5435EA17 }
	TAG_STRUCT(
		movement_throttle_block,
		"movement_throttle_block",
		"movement_throttle_block",
		"s_movement_throttle_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MOVEMENT_THROTTLE_BLOCK_ID)
	{
		{ _field_real, "distance", "If AI needs to move at greater or equal to this distance, they will move at the given throttle", "wus" },
		{ _field_real, "throttle scale", "Throttle scale between minimum and maximum throttle", nullptr, "[0-1]" },
		{ _field_terminator }
	};

	#define MOVEMENT_THROTTLE_CONTROL_BLOCK_ID { 0x82A12886, 0xA634485F, 0xB8A3F2BF, 0x8C086C23 }
	TAG_STRUCT(
		movement_throttle_control_block,
		"movement_throttle_control_block",
		"movement_throttle_control_block",
		"s_movement_throttle_control_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MOVEMENT_THROTTLE_CONTROL_BLOCK_ID)
	{
		{ _field_short_enum, "combat status", "When combat status is bigger or equal to this combat status, use the throttle settings below.", &combat_status_enum_definition },
		{ _field_word_flags, "flags", &movement_throttle_control_flags },
		{ _field_block, "throttle settings", &movement_throttle_block_block },
		{ _field_terminator }
	};

	STRINGS(combat_status_enum_definition)
	{
		"asleep",
		"idle",
		"alert",
		"active",
		"uninspected orphan",
		"definite orphan",
		"certain orphan",
		"visible enemy",
		"clear enemy los",
		"dangerous enemy"
	};
	STRING_LIST(combat_status_enum_definition, combat_status_enum_definition_strings, _countof(combat_status_enum_definition_strings));

	STRINGS(movement_throttle_control_flags)
	{
		"resample distance every tick"
	};
	STRING_LIST(movement_throttle_control_flags, movement_throttle_control_flags_strings, _countof(movement_throttle_control_flags_strings));

	#define MUFFIN_BLOCK_ID { 0x9457B543, 0xE9544059, 0xB3F1A8B8, 0x4492C9F1 }
	TAG_STRUCT(
		muffin_block,
		"muffin_block",
		"muffin_block",
		"s_muffin_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MUFFIN_BLOCK_ID)
	{
		FIELD_CUSTOM("link to render model", _tag_field_custom_type_tool_command),
		{ _field_tag_reference, "render model", &render_model_group_reference$5 },
		{ _field_block, "render model permutation names", &muffin_permutation_name_block_block },
		{ _field_long_integer, "render model permutation name valid count" },
		{ _field_block, "muffin markers", "defines where muffins appear, how often, and which types", MAKE_ALT_NAMES("default markers"), &muffin_marker_block_block },
		{ _field_block, "muffin types", &global_muffin_type_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(render_model_group_reference$5, RENDER_MODEL_TAG);

	#define MUFFIN_MARKER_BLOCK_ID { 0x2BF185B, 0xBDE44510, 0x94C0C253, 0x327F1A01 }
	TAG_STRUCT(
		muffin_marker_block,
		"muffin_marker_block",
		"muffin_marker_block",
		"s_muffin_marker_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MUFFIN_MARKER_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_word_integer, "muffinage chance", "how often muffins will appear on this marker", "percent ", "[0 - 100]" },
		{ _field_word_block_flags, "allowed muffin types", &global_muffin_type_block_block },
		{ _field_terminator }
	};

	#define MUFFIN_PERMUTATION_NAME_BLOCK_ID { 0x549A4CAB, 0xC2DE4599, 0x8E98C68E, 0xC87E36AA }
	TAG_STRUCT(
		muffin_permutation_name_block,
		"muffin_permutation_name_block",
		"muffin_permutation_name_block",
		"s_muffin_permutation_name_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MUFFIN_PERMUTATION_NAME_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	#define MUFFIN_SCALAR_FUNCTION_STRUCT_ID { 0xE0DF474A, 0xDBEB491C, 0xB0EC54D4, 0x593073E1 }
	TAG_STRUCT(
		muffin_scalar_function_struct,
		"muffin_scalar_function_struct",
		"muffin_scalar_function_struct",
		"s_muffin_scalar_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MUFFIN_SCALAR_FUNCTION_STRUCT_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define MULTI_SPHERE_VECTOR_STORAGE_STRUCT_DEFINITION_ID { 0xC2F4C73E, 0xD6904055, 0xB0613D10, 0x58830BA2 }
	TAG_STRUCT(
		multi_sphere_vector_storage_struct_definition,
		"multi_sphere_vector_storage",
		"multi_sphere_vector_storage",
		"s_multi_sphere_vector_storage",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTI_SPHERE_VECTOR_STORAGE_STRUCT_DEFINITION_ID)
	{
		{ _field_real_vector_3d, "sphere" },
		{ _field_real, "havok w sphere" },
		{ _field_terminator }
	};

	#define MULTI_SPHERES_BLOCK_STRUCT_ID { 0x2190C1C0, 0xB31C4810, 0x88FABD1C, 0x7E8CF19D }
	TAG_STRUCT(
		multi_spheres_block_struct,
		"multi_spheres_block_struct",
		"multi_spheres_block_struct",
		"s_multi_spheres_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTI_SPHERES_BLOCK_STRUCT_ID,
		4)
	{
		{ _field_struct, "base", &havok_primitive_struct },
		{ _field_struct, "sphere rep shape", &havok_shape_struct },
		{ _field_long_integer, "num spheres" },
		FIELD_PAD("bull434", 12),
		{ _field_array, "four vectors storage", &multi_sphere_vector_storage$2 },
		{ _field_terminator }
	};

	#define MULTILINGUAL_UNICODE_STRING_LIST_LANGUAGE_PACK_OFFSETS_STRUCT_DEFINITION_ID { 0xD3554473, 0x3F7445DD, 0x86D39D3C, 0x59003C59 }
	TAG_STRUCT(
		multilingual_unicode_string_list_language_pack_offsets_struct_definition,
		"multilingual_unicode_string_list_language_pack_offsets",
		"multilingual_unicode_string_list_language_pack_offsets",
		"s_multilingual_unicode_string_list_language_pack_offsets",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTILINGUAL_UNICODE_STRING_LIST_LANGUAGE_PACK_OFFSETS_STRUCT_DEFINITION_ID)
	{
		{ _field_short_integer, "start index" },
		{ _field_short_integer, "string count" },
		{ _field_terminator }
	};

	#define MULTILINGUAL_UNICODE_STRING_LIST_STRUCT_DEFINITION_ID { 0x257EFBBE, 0x66F84C7A, 0x8922D3CD, 0x800AE80F }
	TAG_STRUCT(
		multilingual_unicode_string_list_struct_definition,
		"multilingual_unicode_string_list_struct_definition",
		"multilingual_unicode_string_list_struct_definition",
		"s_multilingual_unicode_string_list_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTILINGUAL_UNICODE_STRING_LIST_STRUCT_DEFINITION_ID)
	{
		FIELD_CUSTOM("import", _tag_field_custom_type_tool_command_with_directory),
		FIELD_CUSTOM("import clean", _tag_field_custom_type_tool_command_with_directory),
		{ _field_block, "string references", &multilingual_unicode_string_reference_block_block },
		{ _field_block, "substitution pairs", &string_substitution_pair_block_block },
		{ _field_data, "string data utf8", &utf8_string_data },
		{ _field_array, "language pack offsets", &multilingual_unicode_string_list_language_pack_offsets$2 },
		{ _field_terminator }
	};

	#define MULTILINGUAL_UNICODE_STRING_REFERENCE_BLOCK_ID { 0xC5BC6DA3, 0x37A44EB2, 0xA26A511D, 0x236996E6 }
	TAG_STRUCT(
		multilingual_unicode_string_reference_block,
		"multilingual_unicode_string_reference_block",
		"multilingual_unicode_string_reference_block",
		"s_multilingual_unicode_string_reference_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTILINGUAL_UNICODE_STRING_REFERENCE_BLOCK_ID)
	{
		{ _field_string_id, "string id" },
		{ _field_long_integer, "english offset" },
		{ _field_long_integer, "japanese offset" },
		{ _field_long_integer, "german offset" },
		{ _field_long_integer, "french offset" },
		{ _field_long_integer, "spanish offset" },
		{ _field_long_integer, "mexican spanish offset" },
		{ _field_long_integer, "italian offset" },
		{ _field_long_integer, "korean offset" },
		{ _field_long_integer, "traditional chinese offset" },
		{ _field_long_integer, "simplified chinese offset" },
		{ _field_long_integer, "portuguese offset" },
		{ _field_long_integer, "polish offset" },
		{ _field_long_integer, "russian offset" },
		{ _field_long_integer, "danish offset" },
		{ _field_long_integer, "finnish offset" },
		{ _field_long_integer, "dutch offset" },
		{ _field_long_integer, "norwegian offset" },
		{ _field_terminator }
	};

	#define MULTIPLAYEREFFECTSBLOCK_ID { 0xF6E8B719, 0xC1EE4D13, 0xAA4A949C, 0x284C8CDC }
	TAG_STRUCT(
		multiplayereffectsblock,
		"multiplayerEffectsBlock",
		"multiplayerEffectsBlock",
		"s_multiplayereffectsblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYEREFFECTSBLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_tag_reference, "effect", &effect_group_reference$5 },
		{ _field_terminator }
	};

	TAG_REFERENCE(effect_group_reference$5, EFFECT_TAG, TAG_REFERENCE_FLAG_RESOLVED_BY_GAME);

	#define MULTIPLAYEREFFECTS_STRUCT_DEFINITION_ID { 0x32C93FFF, 0x6C6B4352, 0xB86FFA53, 0x76DFFF61 }
	TAG_STRUCT(
		multiplayereffects_struct_definition,
		"multiplayerEffects_struct_definition",
		"multiplayerEffects_struct_definition",
		"s_multiplayereffects_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYEREFFECTS_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "effects", &multiplayereffectsblock_block },
		{ _field_terminator }
	};

	#define MULTIPLAYER_COLOR_BLOCK$2_ID { 0x7E9866A8, 0xDE8F426F, 0x9F08988D, 0xFED37A7C }
	TAG_STRUCT(
		multiplayer_color_block$2,
		"multiplayer_color_block",
		"multiplayer_color_block",
		"s_multiplayer_color_block$2",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_COLOR_BLOCK$2_ID)
	{
		{ _field_real_rgb_color, "color" },
		{ _field_terminator }
	};

	#define MULTIPLAYER_COLOR_BLOCK_ID { 0xA6C9756, 0xF0E24866, 0xA708F3E9, 0xC9C41962 }
	TAG_STRUCT(
		multiplayer_color_block,
		"multiplayer_color_block",
		"multiplayer_color_block",
		"s_multiplayer_color_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_COLOR_BLOCK_ID)
	{
		{ _field_real_rgb_color, "color" },
		{ _field_terminator }
	};

	#define MULTIPLAYER_CONSTANTS_BLOCK_ID { 0x8FFC2A96, 0xD8DF4203, 0xBBF5DD91, 0xE6C61E5A }
	TAG_STRUCT(
		multiplayer_constants_block,
		"multiplayer_constants_block",
		"multiplayer_constants_block",
		"s_multiplayer_constants_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_CONSTANTS_BLOCK_ID)
	{
		FIELD_EXPLANATION("PLAYER SPAWN INFLUENCERS", "These are the default spawn influencer settings which can be overridden by scenario tags"),
		{ _field_tag_reference, "Default Spawn Settings", &spawnsettings_group_reference },
		FIELD_EXPLANATION("MORE MP CONSTANTS", "More old Halo2 stuff follows..."),
		{ _field_real, "teleporter recharge time", nullptr, "seconds" },
		{ _field_tag_reference, "sandbox effect", &effect_group_reference },
		{ _field_string_id, "blocked teleporter string" },
		FIELD_EXPLANATION("RESPAWN STRINGS", "These are used for respawn status message displays\nThe text comes from the in-game-text multiplayer message strings list tag\nin the multiplayer runtime globals block above"),
		{ _field_string_id, "voluntary respawn control instructions" },
		{ _field_string_id, "spawn allowed default respawn" },
		{ _field_string_id, "spawn at player allowed looking at self" },
		{ _field_string_id, "spawn at player allowed looking at target" },
		{ _field_string_id, "spawn at player allowed looking at potential target" },
		{ _field_string_id, "spawn at territory allowed looking at target" },
		{ _field_string_id, "spawn at territory allowed looking at potential target" },
		{ _field_string_id, "you are out of lives" },
		{ _field_string_id, "invalid spawn target selected" },
		{ _field_string_id, "targetted player enemies nearby" },
		{ _field_string_id, "targetted player unfriendly team" },
		{ _field_string_id, "targetted player dead" },
		{ _field_string_id, "targetted player in combat" },
		{ _field_string_id, "targetted player too far from owned flag" },
		{ _field_string_id, "no available netpoints" },
		{ _field_string_id, "targetted netpoint contested" },
		{ _field_terminator }
	};

	#define MULTIPLAYER_EQUIPMENT_REMAP_TABLE_BLOCK_ID { 0x81601365, 0x203745A7, 0x851C3490, 0xE5F4EBEA }
	TAG_STRUCT(
		multiplayer_equipment_remap_table_block,
		"multiplayer_equipment_remap_table_block",
		"multiplayer_equipment_remap_table_block",
		"s_multiplayer_equipment_remap_table_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_EQUIPMENT_REMAP_TABLE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "remap table", &multiplayer_equipment_remap_table_entry_block_block },
		{ _field_terminator }
	};

	#define MULTIPLAYER_EQUIPMENT_REMAP_TABLE_ENTRY_BLOCK_ID { 0x282324D8, 0xD01A40AB, 0xB32458CC, 0x6E2FB06 }
	TAG_STRUCT(
		multiplayer_equipment_remap_table_entry_block,
		"multiplayer_equipment_remap_table_entry_block",
		"multiplayer_equipment_remap_table_entry_block",
		"s_multiplayer_equipment_remap_table_entry_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_EQUIPMENT_REMAP_TABLE_ENTRY_BLOCK_ID)
	{
		{ _field_long_block_index_custom_search, "from object", &multiplayer_equipment_collection_search_definition },
		{ _field_long_block_index_custom_search, "to object", &multiplayer_equipment_collection_search_definition },
		{ _field_terminator }
	};

	#define MULTIPLAYER_GLOBALS_STRUCT_DEFINITION_ID { 0x5DEE8F01, 0xEE20468C, 0xA3EE7C18, 0x2D409CC3 }
	TAG_STRUCT(
		multiplayer_globals_struct_definition,
		"multiplayer_globals_struct_definition",
		"multiplayer_globals_struct_definition",
		"s_multiplayer_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_GLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "universal", &multiplayer_universal_block_block },
		{ _field_block, "runtime", &multiplayer_runtime_block_block },
		{ _field_terminator }
	};

	#define MULTIPLAYER_OBJECT_BLOCK_ID { 0x27B0263, 0xE97643DE, 0xB173536B, 0x73AEE467 }
	TAG_STRUCT(
		multiplayer_object_block,
		"multiplayer_object_block",
		"multiplayer_object_block",
		"s_multiplayer_object_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_OBJECT_BLOCK_ID)
	{
		FIELD_EXPLANATION("GAME ENGINE INCLUSION", "Set which game engines you desire this object to appear in"),
		{ _field_byte_flags, "game engine flags", &global_game_engine_type_flags },
		FIELD_EXPLANATION("TYPE AND FLAGS", "Type pertains to how you want the game engine to handle this object\nCertain flags applicable only to certain object types, should be self evident"),
		{ _field_char_enum, "type", &multiplayer_object_type },
		{ _field_byte_flags, "teleporter passability", nullptr, "used only for teleporters", &teleporter_passability_flags },
		{ _field_char_enum, "spawn timer type", &multiplayer_object_spawn_timer_types },
		FIELD_EXPLANATION("GOAL ", "These fields are only used for goal area objects with boundaries, and for respawn zones"),
		{ _field_real, "boundary width/radius" },
		{ _field_real, "boundary box length" },
		{ _field_real, "boundary positive height", MAKE_ALT_NAMES("boundary +height") },
		{ _field_real, "boundary negative height", MAKE_ALT_NAMES("boundary -height") },
		{ _field_char_enum, "boundary shape", &multiplayer_object_boundary_shape },
		FIELD_PAD("pad_shape", 3),
		FIELD_EXPLANATION("SPAWNING DATA", "These fields are used for default spawning times and remapping"),
		{ _field_short_integer, "default spawn time", nullptr, "seconds" },
		{ _field_short_integer, "default abandonment time", nullptr, "seconds" },
		{ _field_word_flags, "flags", &multiplayer_object_flags },
		FIELD_PAD("pad1", 2),
		FIELD_EXPLANATION("RESPAWN ZONE DATA", "These are respawn zone weights, used only for respawn zones"),
		{ _field_real, "normal weight", nullptr, "aka natural weight" },
		{ _field_block, "falloff function", "Multiplier applied to weight (domain is center to radius, range should be 0 to 1).", &spawn_influence_weight_falloff_function_block_block },
		FIELD_EXPLANATION("MARKER DATA", "These fields are only used for defining certain, special markers to use for positional locations if the default position (object origin) is not sufficient"),
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "boundary center marker" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "spawned object marker name" },
		FIELD_EXPLANATION("SPAWNED OBJECT", "If this object is intended to spawn something, the object it spawns should be specified here"),
		{ _field_tag_reference, "spawned object", &object_group_reference },
		{ _field_string_id, "NYI boundary material" },
		FIELD_EXPLANATION("BOUNDARY SHADER - DEFAULT", "These are default shaders used for boundary geometry"),
		{ _field_tag_reference, "boundary standard shader", &material_group_render_method_group_reference },
		{ _field_tag_reference, "boundary opaque shader", &material_group_render_method_group_reference },
		FIELD_EXPLANATION("BOUNDARY SHADER - SPHERE", "These are custom shaders used for spherical boundary geometry"),
		{ _field_tag_reference, "sphere standard shader", &material_group_render_method_group_reference },
		{ _field_tag_reference, "sphere opaque shader", &material_group_render_method_group_reference },
		FIELD_EXPLANATION("BOUNDARY SHADER - CYLINDER", "These are custom shaders used for cylindrical boundary geometry"),
		{ _field_tag_reference, "cylinder standard shader", &material_group_render_method_group_reference },
		{ _field_tag_reference, "cylinder opaque shader", &material_group_render_method_group_reference },
		FIELD_EXPLANATION("BOUNDARY SHADER - BOX", "These are custom shaders used for box boundary geometry"),
		{ _field_tag_reference, "box standard shader", &material_group_render_method_group_reference },
		{ _field_tag_reference, "box opaque shader", &material_group_render_method_group_reference },
		{ _field_terminator }
	};

	STRINGS(global_game_engine_type_flags)
	{
		"none",
		"sandbox",
		"megalogamengine",
		"campaign",
		"survival",
		"firefight"
	};
	STRING_LIST(global_game_engine_type_flags, global_game_engine_type_flags_strings, _countof(global_game_engine_type_flags_strings));

	STRINGS(multiplayer_object_type)
	{
		"ordinary",
		"weapon",
		"grenade",
		"projectile",
		"powerup",
		"equipment",
		"ammo pack",
		"light land vehicle",
		"heavy land vehicle",
		"flying vehicle",
		"turret",
		"device",
		"dispenser",
		"teleporter 2way",
		"teleporter sender",
		"teleporter receiver",
		"player spawn location",
		"player respawn zone",
		"secondary objective",
		"primary objective",
		"named location area",
		"danger zone",
		"fireteam 1 respawn zone",
		"fireteam 2 respawn zone",
		"fireteam 3 respawn zone",
		"fireteam 4 respawn zone",
		"safe volume",
		"kill volume",
		"cinematic camera position",
		"mosh enemy spawn location",
		"ordnance drop point",
		"trait zone",
		"initial ordnance drop point",
		"random ordnance drop point",
		"objective ordnance drop point",
		"personal ordnance drop point"
	};
	STRING_LIST(multiplayer_object_type, multiplayer_object_type_strings, _countof(multiplayer_object_type_strings));

	STRINGS(teleporter_passability_flags)
	{
		"disallow players",
		"allow light land vehicles",
		"allow heavy land vehicles",
		"allow flying vehicles",
		"allow projectiles"
	};
	STRING_LIST(teleporter_passability_flags, teleporter_passability_flags_strings, _countof(teleporter_passability_flags_strings));

	STRINGS(multiplayer_object_spawn_timer_types)
	{
		"starts on death",
		"starts on disturbance"
	};
	STRING_LIST(multiplayer_object_spawn_timer_types, multiplayer_object_spawn_timer_types_strings, _countof(multiplayer_object_spawn_timer_types_strings));

	STRINGS(multiplayer_object_boundary_shape)
	{
		"unused",
		"sphere",
		"cylinder",
		"box"
	};
	STRING_LIST(multiplayer_object_boundary_shape, multiplayer_object_boundary_shape_strings, _countof(multiplayer_object_boundary_shape_strings));

	STRINGS(multiplayer_object_flags)
	{
		"only visible in editor",
		"phased physics in forge",
		"valid initial player spawn",
		"fixed boundary orientation",
		"candy monitor should ignore",
		"inherit owning team color",
		"boundary volume doesn\'t kill immediately"
	};
	STRING_LIST(multiplayer_object_flags, multiplayer_object_flags_strings, _countof(multiplayer_object_flags_strings));

	TAG_REFERENCE(object_group_reference, OBJECT_TAG);

	TAG_REFERENCE_GROUP(material_group_render_method_group_reference)
	{
		MATERIAL_TAG,
		RENDER_METHOD_TAG,
		INVALID_TAG
	};

	#define MULTIPLAYER_OBJECT_COLLECTION_STRUCT_ID { 0x929B2F5E, 0x14FD4020, 0x87A0C0BE, 0x54A4F353 }
	TAG_STRUCT(
		multiplayer_object_collection_struct,
		"multiplayer_object_collection_struct",
		"multiplayer_object_collection_struct",
		"s_multiplayer_object_collection_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_OBJECT_COLLECTION_STRUCT_ID)
	{
		{ _field_long_block_index, "object type", &multiplayer_object_type_block_block },
		{ _field_string_id, "object description" },
		{ _field_string_id, "object header text" },
		{ _field_string_id, "object help text" },
		{ _field_real, "random weight" },
		{ _field_long_integer, "loadout menu sprite frame" },
		{ _field_string_id, "icon string id" },
		{ _field_terminator }
	};

	#define MULTIPLAYER_OBJECT_TYPE_BLOCK_ID { 0x817E82BA, 0xFCB54E3E, 0x81A64345, 0x9EDA7B38 }
	TAG_STRUCT(
		multiplayer_object_type_block,
		"multiplayer_object_type_block",
		"multiplayer_object_type_block",
		"s_multiplayer_object_type_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_OBJECT_TYPE_BLOCK_ID)
	{
		FIELD_EXPLANATION("WARNING", "This block is readonly because adding, removing, reordering, or renaming elements after we ship a map pack will completely break the game.  And I will punch you.  Hard.  In the face."),
		{ _field_string_id, "name" },
		{ _field_tag_reference, "object", &object_group_reference$7 },
		{ _field_terminator }
	};

	TAG_REFERENCE(object_group_reference$7, OBJECT_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define MULTIPLAYER_OBJECT_TYPE_LIST_STRUCT_DEFINITION_ID { 0x85887EB3, 0x26F44812, 0x81B36A2A, 0x51B63FC9 }
	TAG_STRUCT(
		multiplayer_object_type_list_struct_definition,
		"multiplayer_object_type_list_struct_definition",
		"multiplayer_object_type_list_struct_definition",
		"s_multiplayer_object_type_list_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_OBJECT_TYPE_LIST_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("MEGALO", "After changing this tag you will need to run the tool command multiplayer-generate-global-object-type-list (once) and rebuild the .mapinfo file for each multiplayer scenario in order to use the new objects in megalo"),
		{ _field_block, "object types", &multiplayer_object_type_block_block },
		{ _field_block, "weapons", &multiplayer_weapon_collection_block_block },
		{ _field_block, "vehicles", &multiplayer_vehicle_collection_block_block },
		{ _field_block, "grenades", &multiplayer_grenade_collection_block_block },
		{ _field_block, "equipment", &multiplayer_equipment_collection_block_block },
		FIELD_EXPLANATION("REMAPPING TABLES", "Note - if a remap table has a single element whose \'from\' is NONE, then every object will be remapped to the \'to\' object"),
		{ _field_block, "weapon remapping", &multiplayer_weapon_remap_table_block_block },
		{ _field_block, "vehicle remapping", &multiplayer_vehicle_remap_table_block_block },
		{ _field_block, "equipment remapping", &multiplayer_equipment_remap_table_block_block },
		{ _field_long_integer, "random weapon menu sprite frame" },
		{ _field_long_integer, "random equipment menu sprite frame" },
		{ _field_string_id, "random weapon icon string id" },
		{ _field_string_id, "random equipment icon string id" },
		{ _field_terminator }
	};

	#define MULTIPLAYER_RUNTIME_BLOCK_ID { 0x6F17154D, 0x48564D05, 0xB362026A, 0x93F87F54 }
	TAG_STRUCT(
		multiplayer_runtime_block,
		"multiplayer_runtime_block",
		"multiplayer_runtime_block",
		"s_multiplayer_runtime_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_RUNTIME_BLOCK_ID)
	{
		{ _field_tag_reference, "editor biped", &unit_group_reference$4 },
		{ _field_tag_reference, "editor helper", &object_group_reference$8 },
		{ _field_tag_reference, "flag", &item_group_reference },
		{ _field_tag_reference, "ball", &item_group_reference },
		{ _field_tag_reference, "assault bomb", &item_group_reference },
		{ _field_tag_reference, "vip influence area", &object_group_reference$8 },
		{ _field_tag_reference, "in game text", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "sounds", &sounds_block_block },
		{ _field_block, "looping sounds", &looping_sounds_block_block },
		{ _field_tag_reference, "megalo sounds", MAKE_ALT_NAMES("english"), &megalogamengine_sounds_group_reference },
		{ _field_tag_reference, "communication sounds", MAKE_ALT_NAMES("comm english"), &communication_sounds_group_reference },
		{ _field_long_integer, "maximum frag count" },
		{ _field_long_integer, "maximum plasma count" },
		{ _field_block, "multiplayer constants", &multiplayer_constants_block_block },
		{ _field_block, "state responses", &game_engine_status_response_block_block },
		{ _field_tag_reference, "scoreboard emblem bitmap", &bitmap_group_reference$2 },
		{ _field_tag_reference, "scoreboard dead emblem bitmap", &bitmap_group_reference$2 },
		{ _field_tag_reference, "hill shader", &material_group_render_method_group_reference$2 },
		{ _field_tag_reference, "default_biped_simulation_interpolation", &simulation_interpolation_group_reference },
		{ _field_tag_reference, "default_vehicle_simulation_interpolation", &simulation_interpolation_group_reference },
		{ _field_tag_reference, "default_crate_simulation_interpolation", &simulation_interpolation_group_reference },
		{ _field_tag_reference, "default_item_simulation_interpolation", &simulation_interpolation_group_reference },
		{ _field_tag_reference, "default_projectile_simulation_interpolation", &simulation_interpolation_group_reference },
		{ _field_tag_reference, "default_object_simulation_interpolation", &simulation_interpolation_group_reference },
		{ _field_tag_reference, "co-op spawning globals", &coop_spawning_globals_definition_group_reference },
		{ _field_tag_reference, "megalo string_id table", &megalo_string_id_table_group_reference },
		{ _field_tag_reference, "killcam parameters", "Used for non projectile killcams.", &killcamcameraparamter_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(unit_group_reference$4, UNIT_TAG);

	TAG_REFERENCE(object_group_reference$8, OBJECT_TAG);

	TAG_REFERENCE(megalogamengine_sounds_group_reference, MEGALOGAMENGINE_SOUNDS_TAG);

	TAG_REFERENCE(communication_sounds_group_reference, COMMUNICATION_SOUNDS_TAG);

	TAG_REFERENCE_GROUP(material_group_render_method_group_reference$2)
	{
		MATERIAL_TAG,
		RENDER_METHOD_TAG,
		INVALID_TAG
	};

	TAG_REFERENCE(megalo_string_id_table_group_reference, MEGALO_STRING_ID_TABLE_TAG);

	TAG_REFERENCE(killcamcameraparamter_group_reference, KILLCAMCAMERAPARAMTER_TAG);

	#define MULTIPLAYER_SCENARIO_DESCRIPTION_STRUCT_DEFINITION_ID { 0xD647C9B6, 0xBBE94E29, 0xA5059E78, 0x431E3C82 }
	TAG_STRUCT(
		multiplayer_scenario_description_struct_definition,
		"multiplayer_scenario_description_struct_definition",
		"multiplayer_scenario_description_struct_definition",
		"s_multiplayer_scenario_description_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_SCENARIO_DESCRIPTION_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "multiplayer scenarios", &scenario_description_block_block },
		{ _field_terminator }
	};

	#define MULTIPLAYER_UNIVERSAL_BLOCK_ID { 0x2F00F890, 0x345F45B7, 0x879F73D4, 0xA5D9AEC }
	TAG_STRUCT(
		multiplayer_universal_block,
		"multiplayer_universal_block",
		"multiplayer_universal_block",
		"s_multiplayer_universal_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_UNIVERSAL_BLOCK_ID)
	{
		{ _field_tag_reference, "random player names", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "team names", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "teams", &teamdefinitionblock_block },
		{ _field_tag_reference, "multiplayer text", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "sandbox text", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "sandbox object properties values", &sandbox_text_value_pair_definition_group_reference },
		{ _field_tag_reference, "effects", &multiplayereffects_group_reference },
		{ _field_block, "multiplayer roles", &global_team_role_block_block },
		{ _field_block, "requisition constants", &requisition_constants_block_block },
		{ _field_block, "player starting profile", &scenario_profiles_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(sandbox_text_value_pair_definition_group_reference, SANDBOX_TEXT_VALUE_PAIR_DEFINITION_TAG);

	TAG_REFERENCE(multiplayereffects_group_reference, MULTIPLAYEREFFECTS_TAG);

	#define MULTIPLAYER_VARIANT_SETTINGS_INTERFACE_DEFINITION_STRUCT_DEFINITION_ID { 0x7D9BF44, 0xA8044D74, 0x9C09C13F, 0xF5077BB7 }
	TAG_STRUCT(
		multiplayer_variant_settings_interface_definition_struct_definition,
		"multiplayer_variant_settings_interface_definition_struct_definition",
		"multiplayer_variant_settings_interface_definition_struct_definition",
		"s_multiplayer_variant_settings_interface_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_VARIANT_SETTINGS_INTERFACE_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_string_id, "name (unused)" },
		{ _field_block, "game engine settings", &variant_setting_edit_reference_block_block },
		{ _field_terminator }
	};

	#define MULTIPLAYER_VEHICLE_REMAP_TABLE_BLOCK_ID { 0xFCC3A7AF, 0x57C246DD, 0x85D85E79, 0x8FA0C8A0 }
	TAG_STRUCT(
		multiplayer_vehicle_remap_table_block,
		"multiplayer_vehicle_remap_table_block",
		"multiplayer_vehicle_remap_table_block",
		"s_multiplayer_vehicle_remap_table_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_VEHICLE_REMAP_TABLE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "remap table", &multiplayer_vehicle_remap_table_entry_block_block },
		{ _field_terminator }
	};

	#define MULTIPLAYER_VEHICLE_REMAP_TABLE_ENTRY_BLOCK_ID { 0xFD90B365, 0x80804E2F, 0xB147502F, 0x907D75DB }
	TAG_STRUCT(
		multiplayer_vehicle_remap_table_entry_block,
		"multiplayer_vehicle_remap_table_entry_block",
		"multiplayer_vehicle_remap_table_entry_block",
		"s_multiplayer_vehicle_remap_table_entry_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_VEHICLE_REMAP_TABLE_ENTRY_BLOCK_ID)
	{
		{ _field_long_block_index_custom_search, "from object", &multiplayer_vehicle_collection_search_definition },
		{ _field_long_block_index_custom_search, "to object", &multiplayer_vehicle_collection_search_definition },
		{ _field_terminator }
	};

	#define MULTIPLAYER_WEAPON_REMAP_TABLE_BLOCK_ID { 0x5D3D9F30, 0x90004CB3, 0x96C20653, 0x745D3F42 }
	TAG_STRUCT(
		multiplayer_weapon_remap_table_block,
		"multiplayer_weapon_remap_table_block",
		"multiplayer_weapon_remap_table_block",
		"s_multiplayer_weapon_remap_table_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_WEAPON_REMAP_TABLE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "remap table", &multiplayer_weapon_remap_table_entry_block_block },
		{ _field_terminator }
	};

	#define MULTIPLAYER_WEAPON_REMAP_TABLE_ENTRY_BLOCK_ID { 0x4C7E7EBC, 0xBF9D4357, 0x8BACB076, 0x3DFC779A }
	TAG_STRUCT(
		multiplayer_weapon_remap_table_entry_block,
		"multiplayer_weapon_remap_table_entry_block",
		"multiplayer_weapon_remap_table_entry_block",
		"s_multiplayer_weapon_remap_table_entry_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MULTIPLAYER_WEAPON_REMAP_TABLE_ENTRY_BLOCK_ID)
	{
		{ _field_long_block_index_custom_search, "from object", &multiplayer_weapon_collection_search_definition },
		{ _field_long_block_index_custom_search, "to object", &multiplayer_weapon_collection_search_definition },
		{ _field_terminator }
	};

	#define MUX_GENERATOR_MATERIAL_BLOCK_ID { 0xEB1A54DC, 0x46534B9C, 0xBEA3C266, 0xBDAE8035 }
	TAG_STRUCT(
		mux_generator_material_block,
		"mux_generator_material_block",
		"mux_generator_material_block",
		"s_mux_generator_material_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MUX_GENERATOR_MATERIAL_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_tag_reference, "mux material", &shader_mux_material_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(shader_mux_material_group_reference, SHADER_MUX_MATERIAL_TAG);

	#define MUX_GENERATOR_STRUCT_DEFINITION_ID { 0xA616DC83, 0x5C9B46DF, 0xA97EF406, 0x704B43E8 }
	TAG_STRUCT(
		mux_generator_struct_definition,
		"mux_generator_struct_definition",
		"mux_generator_struct_definition",
		"s_mux_generator_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		MUX_GENERATOR_STRUCT_DEFINITION_ID)
	{
		FIELD_CUSTOM("generate", _tag_field_custom_type_tool_command),
		FIELD_EXPLANATION("Blend Map", "The blend map determines which material shows up where in your mux shader.\nWhere the blend map is black (color 0) you will see the first material\nWhere it is white (color 255), you will see the last material\nIn between it will blend through all the materials in order (at least once through the list)\nSo if you have 5 materials, first set to 1, and last set to 2, the material order is:\n1-2-3-4-0-1-2\nBy default, it starts and ends at the first material:\n0-1-2-3-4-0\n"),
		{ _field_tag_reference, "blend texture", &bitmap_group_reference$12 },
		{ _field_long_block_index, "first material in blend map", &mux_generator_material_block_block },
		{ _field_long_block_index, "last material in blend map", &mux_generator_material_block_block },
		{ _field_block, "materials", &mux_generator_material_block_block },
		FIELD_EXPLANATION("TARGETS", "these will be filled out automatically if you don\'t specify them\nthese are the tags that will be modified by this mux generator\n"),
		{ _field_tag_reference, "target mux shader", &shader_mux_group_reference },
		{ _field_tag_reference, "target albedo base", &bitmap_group_reference$12 },
		{ _field_tag_reference, "target albedo detail", &bitmap_group_reference$12 },
		{ _field_tag_reference, "target bump base", &bitmap_group_reference$12 },
		{ _field_tag_reference, "target bump detail", &bitmap_group_reference$12 },
		{ _field_tag_reference, "target parallax", &bitmap_group_reference$12 },
		{ _field_tag_reference, "target material 0", &bitmap_group_reference$12 },
		{ _field_tag_reference, "target material 1", &bitmap_group_reference$12 },
		{ _field_terminator }
	};

	TAG_REFERENCE(bitmap_group_reference$12, BITMAP_TAG);

	TAG_REFERENCE(shader_mux_group_reference, SHADER_MUX_TAG);

	#define NAMED_LOCATION_VOLUME_POINT_BLOCK_ID { 0x93E2B78A, 0x31554713, 0x814F05D1, 0xE48C66BB }
	TAG_STRUCT(
		named_location_volume_point_block,
		"named_location_volume_point_block",
		"named_location_volume_point_block",
		"s_named_location_volume_point_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NAMED_LOCATION_VOLUME_POINT_BLOCK_ID)
	{
		{ _field_real_point_3d, "position" },
		{ _field_real_euler_angles_2d, "normal" },
		{ _field_terminator }
	};

	#define NEW_ANIMATION_BLEND_SCREEN_BLOCK_STRUCT_ID { 0xA19A4F54, 0x33704B09, 0x8889289B, 0xCBDA74EE }
	TAG_STRUCT(
		new_animation_blend_screen_block_struct,
		"new_animation_blend_screen_block_struct",
		"new_animation_blend_screen_block_struct",
		"s_new_animation_blend_screen_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NEW_ANIMATION_BLEND_SCREEN_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_flags, "flags", &blend_screen_definition_flags },
		{ _field_real, "weight" },
		{ _field_real_fraction, "interpolation rate", "A value of zero or one means no interpolation.", nullptr, "[0,1]" },
		FIELD_PAD("nabsbfp0", 2),
		{ _field_short_enum, "yaw source", &blend_screen_variable_sources },
		{ _field_short_enum, "pitch source", &blend_screen_variable_sources },
		{ _field_short_enum, "weight source", &blend_screen_weight_sources },
		FIELD_CUSTOM("value", _tag_field_custom_type_custom_object_function_field),
		{ _field_string_id, "yaw source object function" },
		FIELD_CUSTOM("value", _tag_field_custom_type_custom_object_function_field),
		{ _field_string_id, "pitch source object function" },
		FIELD_CUSTOM("value", _tag_field_custom_type_custom_object_function_field),
		{ _field_string_id, "weight source object function" },
		{ _field_short_block_index, "weight function", "Function applied to input from weight function source", &animation_function_block_block },
		FIELD_PAD("nabsbfp1", 2),
		{ _field_struct, "animation", MAKE_ALT_NAMES("animation info"), &animation_index_struct },
		{ _field_terminator }
	};

	STRINGS(blend_screen_definition_flags)
	{
		"active only when weapon down",
		"attempt piece-wise blending",
		"allow parent adjustment"
	};
	STRING_LIST(blend_screen_definition_flags, blend_screen_definition_flags_strings, _countof(blend_screen_definition_flags_strings));

	STRINGS(blend_screen_variable_sources)
	{
		"none",
		"object function",
		"horizontal test",
		"vertical test",
		"aim yaw",
		"aim pitch",
		"look yaw",
		"look pitch",
		"object yaw",
		"object pitch",
		"acceleration yaw",
		"acceleration pitch",
		"steering",
		"velocity yaw",
		"velocity pitch",
		"damage gut yaw",
		"damage gut pitch",
		"damage chest yaw",
		"damage chest pitch",
		"damage head yaw",
		"damage head pitch",
		"damage left shoulder yaw",
		"damage left shoulder pitch",
		"damage left arm yaw",
		"damage left arm pitch",
		"damage left leg yaw",
		"damage left leg pitch",
		"damage left foot yaw",
		"damage left foot pitch",
		"damage right shoulder yaw",
		"damage right shoulder pitch",
		"damage right arm yaw",
		"damage right arm pitch",
		"damage right leg yaw",
		"damage right leg pitch",
		"damage right foot yaw",
		"damage right foot pitch",
		"defense yaw",
		"defense pitch",
		"first person pitch",
		"first person turn",
		"throttle side",
		"throttle_forward"
	};
	STRING_LIST(blend_screen_variable_sources, blend_screen_variable_sources_strings, _countof(blend_screen_variable_sources_strings));

	STRINGS(blend_screen_weight_sources)
	{
		"none",
		"object function",
		"acceleration magnitude",
		"velocity magnitude",
		"state function a",
		"state function b",
		"state function c",
		"state function d",
		"damage chest{damage focus chest}",
		"damage gut{damage focus gut}",
		"damage head{damage focus head}",
		"damage left shoulder{damage focus left shoulder}",
		"damage left arm{damage focus left arm}",
		"damage left leg{damage focus left leg}",
		"damage left foot{damage focus left foot}",
		"damage right shoulder{damage focus right shoulder}",
		"damage right arm{damage focus right arm}",
		"damage right leg{damage focus right leg}",
		"damage right foot{damage focus right foot}",
		"defense"
	};
	STRING_LIST(blend_screen_weight_sources, blend_screen_weight_sources_strings, _countof(blend_screen_weight_sources_strings));

	#define NEW_ANIMATION_FUNCTION_OVERLAY_BLOCK_ID { 0x91C27244, 0x40FD4B06, 0xACBDAAB1, 0x42BF1AB9 }
	TAG_STRUCT(
		new_animation_function_overlay_block,
		"new_animation_function_overlay_block",
		"new_animation_function_overlay_block",
		"s_new_animation_function_overlay_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NEW_ANIMATION_FUNCTION_OVERLAY_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_flags, "flags", &function_overlay_definition_flags },
		FIELD_EXPLANATION("Frame Ratio or Playback Speed", "Enter either or leave blank.  Entering both will default to frame ratio option for playback control."),
		FIELD_CUSTOM("value", _tag_field_custom_type_custom_object_function_field),
		{ _field_string_id, "frame ratio object function" },
		FIELD_CUSTOM("value", _tag_field_custom_type_custom_object_function_field),
		{ _field_string_id, "playback speed object function" },
		FIELD_CUSTOM("value", _tag_field_custom_type_custom_object_function_field),
		{ _field_string_id, "blend weight object function" },
		{ _field_struct, "animation", &animation_index_struct },
		{ _field_terminator }
	};

	STRINGS(function_overlay_definition_flags)
	{
		"strict looping#loop without blending the first and last frames"
	};
	STRING_LIST(function_overlay_definition_flags, function_overlay_definition_flags_strings, _countof(function_overlay_definition_flags_strings));

	#define NEW_CINEMATIC_LIGHTING_STRUCT_DEFINITION_ID { 0x6E8A26A1, 0xE0954B7C, 0xA1044895, 0x5B59B00D }
	TAG_STRUCT(
		new_cinematic_lighting_struct_definition,
		"new_cinematic_lighting_struct_definition",
		"new_cinematic_lighting_struct_definition",
		"s_new_cinematic_lighting_struct_definition",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NEW_CINEMATIC_LIGHTING_STRUCT_DEFINITION_ID)
	{
		FIELD_GROUP_BEGIN("Cinematic Lighting"),
		FIELD_CUSTOM("Cinema Lighting", _tag_field_custom_type_cinematic_vmf_light),
		{ _field_long_integer, "version" },
		FIELD_CUSTOM("Direction", _tag_field_custom_type_slider),
		{ _field_real, "Direction", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Front-Back", _tag_field_custom_type_slider),
		{ _field_real, "Front-Back", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Shadow Interpolation", _tag_field_custom_type_slider),
		{ _field_real, "Shadow Interpolation", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Overall weight", _tag_field_custom_type_slider),
		{ _field_real, "Overall weight", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Direct weight", _tag_field_custom_type_slider),
		{ _field_real, "Direct weight", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Indirect weight", _tag_field_custom_type_slider),
		{ _field_real, "Indirect weight", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Airprobe weight", _tag_field_custom_type_slider),
		{ _field_real, "Airprobe weight", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Sun weight", _tag_field_custom_type_slider),
		{ _field_real, "Sun weight", _tag_field_custom_type_slider },
		{ _field_real_rgb_color, "Direct color" },
		FIELD_CUSTOM("Direct intensity", _tag_field_custom_type_slider),
		{ _field_real, "Direct intensity", _tag_field_custom_type_slider },
		{ _field_real_rgb_color, "Indirect color" },
		FIELD_CUSTOM("Indirect intensity", _tag_field_custom_type_slider),
		{ _field_real, "Indirect intensity", _tag_field_custom_type_slider },
		FIELD_CUSTOM("Interpolation", _tag_field_custom_type_slider),
		{ _field_real, "Interpolation", _tag_field_custom_type_slider },
		FIELD_GROUP_END(),
		{ _field_block, "Authored Light Probe", &authored_light_probe_block_group_block },
		{ _field_block, "Cortana Lighting", &hologramlightingblock_block },
		{ _field_block, "dynamic lights", &cinematic_dynamic_light_block_block },
		{ _field_terminator }
	};

	#define NEW_GLOBAL_DAMAGE_SECTION_BLOCK_ID { 0xB8F6D2FD, 0xEE1D49A5, 0xA82B01A4, 0xFE09380E }
	TAG_STRUCT(
		new_global_damage_section_block,
		"new_global_damage_section_block",
		"new_global_damage_section_block",
		"s_new_global_damage_section_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NEW_GLOBAL_DAMAGE_SECTION_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_flags, "flags", &new_damage_section_flags_definition },
		{ _field_real_fraction, "vitality percentage", "percentage of total object vitality", nullptr, "[0.1]" },
		{ _field_string_id, "shield material name", "set this to make this damage section a shield" },
		FIELD_EXPLANATION("stun", nullptr),
		{ _field_real, "stun time", nullptr, "seconds" },
		{ _field_real, "minimum stun damage", "the minimum damage required to stun this object's health" },
		FIELD_EXPLANATION("recharge", nullptr),
		{ _field_real, "recharge time", nullptr, "seconds" },
		{ _field_block, "recharge speed curve", &damage_section_recharge_speed_curve_block_block },
		{ _field_block, "recharge fractions", &damage_section_segmented_recharge_fraction_block },
		{ _field_tag_reference, "recharging effect", &effect_group_reference },
		{ _field_real, "pre recharge effect warn time", "(main shield only) how long before the recharge begins the pre-recharge effect fires", "seconds" },
		{ _field_tag_reference, "pre recharge effect", "(main shield only)", &effect_group_reference },
		{ _field_string_id, "pre recharge effect marker", "(main shield only)" },
		{ _field_tag_reference, "pre recharge abort effect", "(main shield only) if the pre-recharge effect is aborted before the actual recharge starts, this effect plays", &effect_group_reference },
		{ _field_string_id, "pre recharge abort effect marker", "(main shield only)" },
		FIELD_EXPLANATION("overcharge", nullptr),
		{ _field_real, "overcharge time", "time it takes to reach full \"overcharge fraction\"", "seconds" },
		{ _field_real, "overcharge fraction", "fraction to which shields will automatically overcharge, values <= 1.0 are ignored" },
		FIELD_EXPLANATION("decay", nullptr),
		{ _field_real, "pre decay time", "time for this section to be active before it will start to decay", "seconds" },
		{ _field_real, "decay time", "time for need for this section to fully decay with full health.", "seconds" },
		FIELD_EXPLANATION("resurrection", nullptr),
		{ _field_string_id, "resurrection restored region name" },
		{ _field_block, "instant responses", &new_instantaneous_damage_response_block_block },
		{ _field_block, "section damage transfers", &damage_transfer_block_block },
		{ _field_block, "rendering", &damage_section_rendering_paramters_block },
		{ _field_real, "runtime recharge velocity" },
		{ _field_real, "runtime overcharge velocity" },
		{ _field_short_integer, "runtime resurrection restored region index" },
		{ _field_short_integer, "runtime global shield material type" },
		{ _field_terminator }
	};

	STRINGS(new_damage_section_flags_definition)
	{
		"starts inactive#this section will be initialized with zero health and will be stunned indefinitely",
		"takes full dmg when object dies",
		"takes full dmg when obj dstryd",
		"restored on ressurection",
		"headshot#takes extra headshot damage when shot",
		"depletion is permanent",
		"recharges while dead",
		"play recharge effect only when empty",
		"networked (note that primary body and shield are always networked)",
		"can recharge independently#always a shield layer to recharge even if there is an inner shield layer that is stunned"
	};
	STRING_LIST(new_damage_section_flags_definition, new_damage_section_flags_definition_strings, _countof(new_damage_section_flags_definition_strings));

	#define NEW_INSTANTANEOUS_DAMAGE_RESPONSE_BLOCK_ID { 0x559D19CA, 0xE3724DAB, 0xB0CCAE0B, 0xFF415CD4 }
	TAG_STRUCT(
		new_instantaneous_damage_response_block,
		"new_instantaneous_damage_response_block",
		"new_instantaneous_damage_response_block",
		"s_new_instantaneous_damage_response_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NEW_INSTANTANEOUS_DAMAGE_RESPONSE_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &newdamageresponseflagspart1, _field_id_dumb },
		{ _field_long_flags, "flags2", &newdamageresponseflagspart2, _field_id_dumb },
		{ _field_string_id, "label" },
		{ _field_real_fraction, "damage threshold", "response fires after crossing this threshold.  1=full health" },
		{ _field_tag_reference, "transition effect (generic)", MAKE_ALT_NAMES("transition effect"), &effect_group_reference },
		{ _field_string_id, "generic effect marker", MAKE_ALT_NAMES("effect marker name") },
		{ _field_tag_reference, "transition effect (specific)", &effect_group_reference },
		{ _field_string_id, "specific effect marker" },
		{ _field_struct, "damage effect", &instantaneous_response_damage_effect_struct }, // structure_version:1
		{ _field_struct, "damage effect marker", &instantaneous_response_damage_effect_marker_struct }, // structure_version:1
		{ _field_tag_reference, "looping effect", "will play until the next response is triggered.", &effect_group_reference },
		{ _field_block, "region_transitions", &damage_response_region_transition_block_block },
		{ _field_block, "response damage transfers", &damage_transfer_block_block },
		{ _field_short_block_index, "destroy instance group", "all possible instances from this group will be destroyed", &global_model_instance_group_block_block },
		{ _field_short_enum, "custom response behavior", &damage_response_custom_response_behavior_enum_definition },
		{ _field_string_id, "custom response label" },
		{ _field_real, "response delay", "time to wait until firing the response. This delay is pre-empted if another timed response for the same section fires.", "seconds" },
		{ _field_tag_reference, "delay effect", "plays while the timer is counting down", &effect_group_reference },
		{ _field_string_id, "delay effect marker name" },
		{ _field_block, "seat eject", &seat_ejection_block_block },
		{ _field_real_fraction, "skip fraction", "0.0 always fires, 1.0 never fires" },
		{ _field_string_id, "destroyed child object marker name", "when this response fires, any children objects created at the supplied marker name will be destroyed" },
		{ _field_real_fraction, "total damage threshold", "scale on total damage section vitality" },
		{ _field_string_id, "constraint/group name", "can specify a randomly-selected single constraint or the entire group of named constraints" },
		{ _field_short_enum, "constraint damage type", &damage_response_constraint_damage_type_enum_definition },
		FIELD_PAD("IDRBCDT", 2),
		{ _field_terminator }
	};

	STRINGS(newdamageresponseflagspart1)
	{
		"kills object#when the response fires the object dies regardless of its current health",
		"inhibits melee attack#from halo 1 - disallows melee for a unit",
		"inhibits weapon attack#from halo 1 - disallows weapon fire for a unit",
		"inhibits walking#from halo 1 - disallows walking for a unit",
		"forces drop weapon#from halo 1 - makes the unit drop its current weapon",
		"kills weapon primary trigger",
		"kills weapon secondary trigger",
		"destroys object#when the response fires the object is destroyed",
		"damages weapon primary trigger#destroys the primary trigger on the unit\'s current weapon",
		"damages weapon secondary trigger#destroys the secondary trigger on the unit\'s current weapon",
		"kills object (no player solo)",
		"causes detonation",
		"kills variant objects",
		"force unattached effects",
		"fires under threshold",
		"triggers special death",
		"only on special death",
		"only NOT on special death",
		"buckles giants",
		"causes sp detonation",
		"skip sounds on generic effect",
		"kills giants",
		"skip sounds on special death",
		"force hard ping",
		"can refire#can fire again if the section ever recharges past its threshold",
		"can skip transition effects#will not spawn effects if previous response also fired",
		"cause head dismemberment",
		"cause left leg dismemberment",
		"cause right leg dismemberment",
		"cause left arm dismemberment",
		"cause right arm dismemberment",
		"allow damage recharge overflow"
	};
	STRING_LIST(newdamageresponseflagspart1, newdamageresponseflagspart1_strings, _countof(newdamageresponseflagspart1_strings));

	STRINGS(newdamageresponseflagspart2)
	{
		"hides object if destroyed by response on predicted client#if the destroys object flag and this flag are both checked, the object will be hidden on predicted clients when the response fires (hologram hack)"
	};
	STRING_LIST(newdamageresponseflagspart2, newdamageresponseflagspart2_strings, _countof(newdamageresponseflagspart2_strings));

	#define NODE_INDICES_ARRAY_STRUCT_DEFINITION_ID { 0x96D9B877, 0x7D854A1A, 0x94447B36, 0x3D993ECB }
	TAG_STRUCT(
		node_indices_array_struct_definition,
		"node_indices_array",
		"node_indices_array",
		"s_node_indices_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NODE_INDICES_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_byte_integer, "node index" },
		{ _field_terminator }
	};

	#define NODE_MAP_BYTE_BLOCK_ID { 0x77DB2A4A, 0xEC6490D, 0x822EA727, 0x3026F880 }
	TAG_STRUCT(
		node_map_byte_block,
		"node_map_byte_block",
		"node_map_byte_block",
		"s_node_map_byte_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NODE_MAP_BYTE_BLOCK_ID)
	{
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	#define NODE_WEIGHTS_COMPLETE_ARRAY_STRUCT_DEFINITION_ID { 0x93F6CB70, 0x935C4824, 0xAFBCAA80, 0x199C0BA7 }
	TAG_STRUCT(
		node_weights_complete_array_struct_definition,
		"node_weights_complete_array",
		"node_weights_complete_array",
		"s_node_weights_complete_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NODE_WEIGHTS_COMPLETE_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "node weight" },
		{ _field_terminator }
	};

	#define NODE_WEIGHTS_IMPLICIT_ARRAY_STRUCT_DEFINITION_ID { 0x688AC376, 0x93AA40C8, 0xB49A447E, 0x88C1B821 }
	TAG_STRUCT(
		node_weights_implicit_array_struct_definition,
		"node_weights_implicit_array",
		"node_weights_implicit_array",
		"s_node_weights_implicit_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NODE_WEIGHTS_IMPLICIT_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "node weight" },
		{ _field_terminator }
	};

	#define NODES_BLOCK_ID { 0xF92912E1, 0xA4364CD1, 0xA65724A1, 0xBB8A252B }
	TAG_STRUCT(
		nodes_block,
		"nodes_block",
		"nodes_block",
		"s_nodes_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		NODES_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_word_flags, "flags", &nodes_flags },
		{ _field_short_block_index, "parent", &nodes_block_block },
		{ _field_short_block_index, "sibling", &nodes_block_block },
		{ _field_short_block_index, "child", &nodes_block_block },
		{ _field_terminator }
	};

	STRINGS(nodes_flags)
	{
		"does not animate"
	};
	STRING_LIST(nodes_flags, nodes_flags_strings, _countof(nodes_flags_strings));

	#define OBJECTFUNCTIONSWITCHBLOCK_ID { 0xCD9999FC, 0xAB6642CE, 0xB74F1753, 0x1EA31C54 }
	TAG_STRUCT(
		objectfunctionswitchblock,
		"objectFunctionSwitchBlock",
		"objectFunctionSwitchBlock",
		"s_objectfunctionswitchblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECTFUNCTIONSWITCHBLOCK_ID)
	{
		{ _field_string_id, "switch function name" },
		{ _field_string_id, "export name" },
		{ _field_block, "switched functions", &objectfunctionswitchfunctionblock_block },
		{ _field_terminator }
	};

	#define OBJECTFUNCTIONSWITCHFUNCTIONBLOCK_ID { 0x42436123, 0x650F44BF, 0x93C16EC7, 0xD73545F7 }
	TAG_STRUCT(
		objectfunctionswitchfunctionblock,
		"objectFunctionSwitchFunctionBlock",
		"objectFunctionSwitchFunctionBlock",
		"s_objectfunctionswitchfunctionblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECTFUNCTIONSWITCHFUNCTIONBLOCK_ID)
	{
		{ _field_real_bounds, "selection bounds", "if the switch function is between these values, this function will be picked" },
		{ _field_string_id, "function name" },
		{ _field_terminator }
	};

	#define OBJECT_ABANDONMENT_STRUCT_ID { 0x7F949B78, 0x6EE94045, 0x95026EDA, 0x7FEFA28A }
	TAG_STRUCT(
		object_abandonment_struct,
		"object_abandonment_struct",
		"object_abandonment_struct",
		"s_object_abandonment_struct",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_ABANDONMENT_STRUCT_ID)
	{
		{ _field_real, "Vitality Limit To Start Countdown" },
		{ _field_real, "Countdown Time In Seconds" },
		{ _field_byte_flags, "flags", &object_abandonment_flags },
		FIELD_PAD("DPKP", 3),
		{ _field_terminator }
	};

	STRINGS(object_abandonment_flags)
	{
		"Enable In Multiplayer",
		"Enable In Single Player"
	};
	STRING_LIST(object_abandonment_flags, object_abandonment_flags_strings, _countof(object_abandonment_flags_strings));

	#define OBJECT_AI_PROPERTIES_BLOCK_ID { 0x26FB5335, 0x712E447D, 0x93F77F52, 0xAFFD7871 }
	TAG_STRUCT(
		object_ai_properties_block,
		"object_ai_properties_block",
		"object_ai_properties_block",
		"s_object_ai_properties_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_AI_PROPERTIES_BLOCK_ID)
	{
		{ _field_long_flags, "ai flags", &ai_properties_flags },
		{ _field_string_id, "ai type name", "used for combat dialogue, etc." },
		{ _field_string_id, "interaction name", "if you checked the consider for interaction flag, type what interaction the AI should do with this object (NYI - you can use any)" },
		{ _field_short_enum, "ai size", &ai_size_enum },
		{ _field_short_enum, "leap jump speed", &global_ai_jump_height_enum },
		{ _field_terminator }
	};

	STRINGS(ai_properties_flags)
	{
		"detroyable cover",
		"pathfinding ignore when dead",
		"dynamic cover",
		"non flight-blocking",
		"dynamic cover from centre",
		"has corner markers!",
		"idle when flying",
		"consider for interaction"
	};
	STRING_LIST(ai_properties_flags, ai_properties_flags_strings, _countof(ai_properties_flags_strings));

	STRINGS(ai_size_enum)
	{
		"default",
		"tiny",
		"small",
		"medium",
		"large",
		"huge",
		"immobile"
	};
	STRING_LIST(ai_size_enum, ai_size_enum_strings, _countof(ai_size_enum_strings));

	#define OBJECT_CHANGE_COLOR_FUNCTION_ID { 0x9F69CB7C, 0xBA0D4F58, 0x96CEA30C, 0xD0A89C28 }
	TAG_STRUCT(
		object_change_color_function,
		"object_change_color_function",
		"object_change_color_function",
		"s_object_change_color_function",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_CHANGE_COLOR_FUNCTION_ID)
	{
		FIELD_PAD("TJJWBYNU", 4),
		{ _field_long_flags, "scale flags", &global_rgb_interpolation_flags },
		{ _field_real_rgb_color, "color lower bound" },
		{ _field_real_rgb_color, "color upper bound" },
		{ _field_string_id, "darken by" },
		{ _field_string_id, "scale by" },
		{ _field_terminator }
	};

	#define OBJECT_CHANGE_COLOR_INITIAL_PERMUTATION_ID { 0xFC403E79, 0xA7A64D2E, 0xAD0C6C21, 0xC2A06C7B }
	TAG_STRUCT(
		object_change_color_initial_permutation,
		"object_change_color_initial_permutation",
		"object_change_color_initial_permutation",
		"s_object_change_color_initial_permutation",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_CHANGE_COLOR_INITIAL_PERMUTATION_ID)
	{
		{ _field_real, "weight" },
		{ _field_real_rgb_color, "color lower bound" },
		{ _field_real_rgb_color, "color upper bound" },
		{ _field_string_id, "variant name", "if empty, may be used by any model variant" },
		{ _field_terminator }
	};

	#define OBJECT_CHANGE_COLORS_ID { 0xAB056AD, 0x8F3241C9, 0x9EDBB26A, 0x9B24F6FE }
	TAG_STRUCT(
		object_change_colors,
		"object_change_colors",
		"object_change_colors",
		"s_object_change_colors",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_CHANGE_COLORS_ID)
	{
		FIELD_USELESS_PAD("value", 32),
		{ _field_block, "initial permutations", &object_change_color_initial_permutation_block },
		{ _field_block, "functions", &object_change_color_function_block },
		{ _field_terminator }
	};

	#define OBJECT_EARLY_MOVER_OBB_BLOCK_ID { 0x7AD1FFFF, 0xAAAA48FF, 0xCB3677D4, 0xFFE70E3B }
	TAG_STRUCT(
		object_early_mover_obb_block,
		"object_early_mover_obb_block",
		"object_early_mover_obb_block",
		"s_object_early_mover_obb_block",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_EARLY_MOVER_OBB_BLOCK_ID)
	{
		{ _field_string_id, "node name", "empty mean object space" },
		{ _field_long_integer, "runtime node index" },
		{ _field_real, "x0" },
		{ _field_real, "x1" },
		{ _field_real, "y0" },
		{ _field_real, "y1" },
		{ _field_real, "z0" },
		{ _field_real, "z1" },
		{ _field_real_euler_angles_3d, "angles" },
		{ _field_terminator }
	};

	#define OBJECT_FUNCTION_BLOCK_ID { 0xD2EFDBE6, 0x41EE4DC2, 0x805F2410, 0x82F5BAD9 }
	TAG_STRUCT(
		object_function_block,
		"object_function_block",
		"object_function_block",
		"s_object_function_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_FUNCTION_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &object_function_flags },
		{ _field_string_id, "import name", "if you leave this field blank then you can set this function's input value with the hs_function object_set_function_variable" },
		{ _field_string_id, "export name" },
		{ _field_string_id, "turn off with", "if the specified function is off, so is this function" },
		{ _field_string_id, "ranged interpolation name", "if you have the ranged button checked" },
		{ _field_real, "min value", "function must exceed this value (after mapping) to be active 0. means do nothing" },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "default function", &mapping_function }, // structure_version:2
		{ _field_string_id, "scale by" },
		{ _field_block, "interpolation", &object_function_interpolation_block_block },
		{ _field_long_block_index, "runtime interpolator index", &object_runtime_interpolator_functions_block_block },
		{ _field_terminator }
	};

	STRINGS(object_function_flags)
	{
		"invert#result of function is one minus actual result",
		"mapping does not controls active#the curve mapping can make the function active/inactive",
		"always active#function does not deactivate when at or below lower bound",
		"random time offset#function offsets periodic function input by random value between 0 and 1",
		"always exports value#when this function is deactivated, it still exports its value",
		"turn off with uses magnitude#the function will be turned off if the value of the turns_off_with function is 0"
	};
	STRING_LIST(object_function_flags, object_function_flags_strings, _countof(object_function_flags_strings));

	#define OBJECT_FUNCTION_INTERPOLATION_BLOCK_ID { 0x5A96873E, 0xAC0D4C1C, 0x8A0B6541, 0x46288D2E }
	TAG_STRUCT(
		object_function_interpolation_block,
		"object_function_interpolation_block",
		"object_function_interpolation_block",
		"s_object_function_interpolation_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_FUNCTION_INTERPOLATION_BLOCK_ID)
	{
		{ _field_long_enum, "interpolation mode", &object_function_interpolation_mode_enum },
		{ _field_real, "linear travel time", "used by constant velocity", "s" },
		{ _field_real, "acceleration", "used by linear acceleration", "1/s/s" },
		FIELD_EXPLANATION("springs", "the damping ratio is c/(2*sqrt(k)). if this ratio is:\n= 0 : oscillates forever\n< 1 : oscillates with decreasing amplitude\n= 1 : reaches the target precisely and quickly (no oscillation)\n> 1 : reaches the target slowly\nthe higher the value of k, the quicker the system will reach the target value"),
		{ _field_real, "spring k", "used by damped spring\ndetermines acceleration by displacement" },
		{ _field_real, "spring c", "used by damped spring\ndetermines damping based on velocity" },
		{ _field_real, "fraction", "used by fractional\nhow mush of the distance to the target to cover each update", "0-1" },
		{ _field_terminator }
	};

	STRINGS(object_function_interpolation_mode_enum)
	{
		"constant velocity",
		"linear acceleration",
		"damped spring",
		"fractional#covers a fixed fraction of the distance to the target on each update"
	};
	STRING_LIST(object_function_interpolation_mode_enum, object_function_interpolation_mode_enum_strings, _countof(object_function_interpolation_mode_enum_strings));

	#define OBJECT_RUNTIME_INTERPOLATOR_FUNCTIONS_BLOCK_ID { 0xA2EFDBE6, 0x4BEE4DC2, 0x305F2410, 0x32F5BAD9 }
	TAG_STRUCT(
		object_runtime_interpolator_functions_block,
		"object_runtime_interpolator_functions_block",
		"object_runtime_interpolator_functions_block",
		"s_object_runtime_interpolator_functions_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_RUNTIME_INTERPOLATOR_FUNCTIONS_BLOCK_ID)
	{
		{ _field_long_integer, "runtime interpolator to object function mapping" },
		{ _field_terminator }
	};

	#define OBJECT_SALT_STORAGE_ARRAY_STRUCT_DEFINITION_ID { 0x2BAB1657, 0x98084D7F, 0x8C0FFCBC, 0x954E72C1 }
	TAG_STRUCT(
		object_salt_storage_array_struct_definition,
		"object_salt_storage_array",
		"object_salt_storage_array",
		"s_object_salt_storage_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_SALT_STORAGE_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "salt" },
		{ _field_terminator }
	};

	#define OBJECT_SPACE_NODE_DATA_BLOCK_ID { 0x27BCCD47, 0x4C147A1, 0x9D4D4A77, 0xFA16E702 }
	TAG_STRUCT(
		object_space_node_data_block,
		"object_space_node_data_block",
		"object_space_node_data_block",
		"s_object_space_node_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_SPACE_NODE_DATA_BLOCK_ID)
	{
		{ _field_short_block_index, "node index", MAKE_ALT_NAMES("node_index"), FIELD_FLAG_INDEX, &animation_graph_node_block_block },
		{ _field_word_flags, "flags", &object_space_node_flags },
		{ _field_struct, "parent orientation", MAKE_ALT_NAMES("orientation"), FIELD_FLAG_READ_ONLY, &quantized_orientation_struct },
		{ _field_terminator }
	};

	STRINGS(object_space_node_flags)
	{
		"rotation",
		"translation",
		"scale",
		"motion root"
	};
	STRING_LIST(object_space_node_flags, object_space_node_flags_strings, _countof(object_space_node_flags_strings));

	#define OBJECT_SPACE_OFFSET_NODE_BLOCK_ID { 0xF10FB882, 0x154F22, 0x8BF8942F, 0xBBEBAE8A }
	TAG_STRUCT(
		object_space_offset_node_block,
		"object_space_offset_node_block",
		"object_space_offset_node_block",
		"s_object_space_offset_node_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_SPACE_OFFSET_NODE_BLOCK_ID)
	{
		{ _field_short_block_index, "object space offset node", &animation_graph_node_block_block },
		FIELD_PAD("wsonbp", 2),
		{ _field_terminator }
	};

	#define OBJECT_SPAWN_EFFECTS_BLOCK_ID { 0xCAA36528, 0x4BD44D30, 0x92DBFEEC, 0xA3A75C32 }
	TAG_STRUCT(
		object_spawn_effects_block,
		"object_spawn_effects_block",
		"object_spawn_effects_block",
		"s_object_spawn_effects_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_SPAWN_EFFECTS_BLOCK_ID)
	{
		FIELD_EXPLANATION("Spawn Effects", "Effect played when an object of this type spawns in during each game mode.\nUnlike creation effect, it is only played when the object spawns in through certain methods, not whenever one is created."),
		{ _field_tag_reference, "multiplayer spawn effect", "effect played when this object spawns in MP games", &effect_group_reference },
		{ _field_tag_reference, "survival spawn effect", "effect played when this object spawns in Firefight games", &effect_group_reference },
		{ _field_tag_reference, "campaign spawn effect", "effect played when this object spawns in Campaign games", &effect_group_reference },
		{ _field_terminator }
	};

	#define OBJECT_STRUCT_DEFINITION_ID { 0x94A95A6C, 0xF5FC457A, 0x88A44257, 0x803394F0 }
	TAG_STRUCT(
		object_struct_definition,
		"object_struct_definition",
		"object_struct_definition",
		"s_object_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_STRUCT_DEFINITION_ID)
	{
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define OBJECT_TYPE_DRAG_PROPERTIES_BLOCK_ID { 0x12B22BB0, 0xAF9E4906, 0xB0CCE6BA, 0xB6C4E365 }
	TAG_STRUCT(
		object_type_drag_properties_block,
		"object_type_drag_properties_block",
		"object_type_drag_properties_block",
		"s_object_type_drag_properties_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_TYPE_DRAG_PROPERTIES_BLOCK_ID)
	{
		{ _field_tag_reference, "drag properties", &water_physics_drag_properties_group_reference },
		{ _field_terminator }
	};

	#define OBJECT_WIDGET_BLOCK_ID { 0x62919B1E, 0xA5AA4661, 0xB8317D8A, 0x3AC0DDAA }
	TAG_STRUCT(
		object_widget_block,
		"object_widget_block",
		"object_widget_block",
		"s_object_widget_block",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECT_WIDGET_BLOCK_ID)
	{
		{ _field_tag_reference, "type", &antenna_group_cloth_group_reference },
		FIELD_USELESS_PAD("value", 16),
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(antenna_group_cloth_group_reference)
	{
		ANTENNA_TAG,
		CLOTH_TAG,
		INVALID_TAG
	};

	#define OBJECTIVES_BLOCK_ID { 0x337629EE, 0xC49F426B, 0xB388142C, 0xD2A66AE8 }
	TAG_STRUCT(
		objectives_block,
		"objectives_block",
		"objectives_block",
		"s_objectives_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OBJECTIVES_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "opposing objectives", &opposing_objective_block_block },
		{ _field_word_flags, "objective flags", &objective_flags },
		{ _field_short_block_index, "zone index", &zone_block_block },
		{ _field_short_block_index, "first task index", &tasks_block_block },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		{ _field_block, "tasks", &tasks_block_block },
		{ _field_terminator }
	};

	STRINGS(objective_flags)
	{
		"use front area selection",
		"use players as front",
		"inhibit vehicle entry"
	};
	STRING_LIST(objective_flags, objective_flags_strings, _countof(objective_flags_strings));

	#define OCCLUDING_PORTAL_TO_PORTAL_MAPPING_BLOCK_ID { 0x2C0DB1E1, 0xB4BF44D2, 0xA25D8986, 0x1E698E9F }
	TAG_STRUCT(
		occluding_portal_to_portal_mapping_block,
		"occluding_portal_to_portal_mapping_block",
		"occluding_portal_to_portal_mapping_block",
		"s_occluding_portal_to_portal_mapping_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OCCLUDING_PORTAL_TO_PORTAL_MAPPING_BLOCK_ID)
	{
		{ _field_short_integer, "portal index" },
		{ _field_terminator }
	};

	#define OLD_MATERIAL_EFFECT_MATERIAL_BLOCK_ID { 0x4F36A27D, 0x89FD4598, 0x8E5E3AD5, 0xF3F90ADA }
	TAG_STRUCT(
		old_material_effect_material_block,
		"old_material_effect_material_block",
		"old_material_effect_material_block",
		"s_old_material_effect_material_block",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OLD_MATERIAL_EFFECT_MATERIAL_BLOCK_ID)
	{
		{ _field_tag_reference, "effect", &effect_group_reference },
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_looping_group_sound_group_reference },
		{ _field_string_id, "material name" },
		{ _field_short_integer, "runtime material index" },
		FIELD_PAD("KTRVUIKB", 2),
		{ _field_char_enum, "sweetener mode", &sweeneter_mode_enum },
		FIELD_PAD("QNGPTA", 3),
		FIELD_USELESS_PAD("value", 4),
		{ _field_terminator }
	};

	#define OLD_PROJECTILE_MATERIAL_RESPONSE_BLOCK_ID { 0x33464F1F, 0x1BE74B67, 0x8A913714, 0x60E78572 }
	TAG_STRUCT(
		old_projectile_material_response_block,
		"old_projectile_material_response_block",
		"old_projectile_material_response_block",
		"s_old_projectile_material_response_block",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OLD_PROJECTILE_MATERIAL_RESPONSE_BLOCK_ID)
	{
		FIELD_EXPLANATION("default result", "(if the potential result, below, fails to happen)"),
		{ _field_short_enum, "default response", &material_response },
		FIELD_PAD("KJSH", 2),
		{ _field_string_id, "material name" },
		{ _field_short_integer, "runtime material index" },
		FIELD_PAD("JJHT", 2),
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("potential result", nullptr),
		{ _field_short_enum, "potential response", &material_response },
		{ _field_word_flags, "response flags", &material_possible_response_flags },
		{ _field_real_fraction, "chance fraction", nullptr, nullptr, "[0,1]" },
		{ _field_angle_bounds, "between", nullptr, "degrees" },
		{ _field_real_bounds, "and", nullptr, "world units per second" },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("misc", nullptr),
		{ _field_short_enum, "scale effects by", &effect_scale_enum },
		FIELD_PAD("BDFI", 2),
		{ _field_angle, "angular noise", "the angle of incidence is randomly perturbed by at most this amount to simulate irregularity.", "degrees" },
		{ _field_real, "velocity noise", "the velocity is randomly perturbed by at most this amount to simulate irregularity.", "world units per second" },
		FIELD_USELESS_PAD("value", 24),
		FIELD_EXPLANATION("penetration", nullptr),
		{ _field_real, "initial friction", "the fraction of the projectile's velocity lost on penetration" },
		FIELD_EXPLANATION("reflection", nullptr),
		{ _field_real, "parallel friction", "the fraction of the projectile's velocity parallel to the surface lost on impact" },
		{ _field_real, "perpendicular friction", "the fraction of the projectile's velocity perpendicular to the surface lost on impact" },
		{ _field_terminator }
	};

	STRINGS(material_response)
	{
		"impact (detonate)",
		"fizzle",
		"overpenetrate",
		"attach",
		"bounce",
		"bounce (dud)",
		"fizzle (ricochet)",
		"turn physical"
	};
	STRING_LIST(material_response, material_response_strings, _countof(material_response_strings));

	STRINGS(material_possible_response_flags)
	{
		"only against units (except giants){only against units}",
		"never against units (except giants){never against units}",
		"only against bipeds",
		"only against vehicles",
		"never against wuss players",
		"only when tethered",
		"only when not tethered",
		"only against dead bipeds",
		"never against dead bipeds",
		"only AI projectiles",
		"never AI projectiles"
	};
	STRING_LIST(material_possible_response_flags, material_possible_response_flags_strings, _countof(material_possible_response_flags_strings));

	STRINGS(effect_scale_enum)
	{
		"damage",
		"angle"
	};
	STRING_LIST(effect_scale_enum, effect_scale_enum_strings, _countof(effect_scale_enum_strings));

	#define OLD_SCENARIO_DEVICE_STRUCT_ID { 0xA2079CEA, 0xF38E4D09, 0x8A1996BD, 0x136AB156 }
	TAG_STRUCT(
		old_scenario_device_struct,
		"old_scenario_device_struct",
		"old_scenario_device_struct",
		"s_old_scenario_device_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OLD_SCENARIO_DEVICE_STRUCT_ID)
	{
		{ _field_short_block_index, "power group", &device_group_block_block },
		{ _field_short_block_index, "position group", &device_group_block_block },
		{ _field_long_flags, "flags", &scenario_device_flags },
		{ _field_terminator }
	};

	STRINGS(scenario_device_flags)
	{
		"initially open (1.0)",
		"initially off (0.0)",
		"can change only once",
		"position reversed",
		"not usable from any side",
		"closes without power"
	};
	STRING_LIST(scenario_device_flags, scenario_device_flags_strings, _countof(scenario_device_flags_strings));

	#define OLD_SCENARIO_UNIT_STRUCT_ID { 0x484E1FEE, 0xEF0E4197, 0xA3579B7E, 0xA6B5C5EC }
	TAG_STRUCT(
		old_scenario_unit_struct,
		"old_scenario_unit_struct",
		"old_scenario_unit_struct",
		"s_old_scenario_unit_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OLD_SCENARIO_UNIT_STRUCT_ID)
	{
		{ _field_real, "body vitality", nullptr, nullptr, "[0,1]" },
		{ _field_long_flags, "flags", &scenario_unit_datum_flags },
		FIELD_PAD("BHETPV", 8),
		{ _field_terminator }
	};

	STRINGS(scenario_unit_datum_flags)
	{
		"dead",
		"opened",
		"not enterable by player"
	};
	STRING_LIST(scenario_unit_datum_flags, scenario_unit_datum_flags_strings, _countof(scenario_unit_datum_flags_strings));

	#define ONE_DEPENDENCY_BLOCK_DEFINITION_ID { 0xD35E5ED1, 0xE81246C5, 0xAA31F553, 0x3A8A909C }
	TAG_STRUCT(
		one_dependency_block_definition,
		"one_dependency_block_definition",
		"one_dependency_block_definition",
		"s_one_dependency_block_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ONE_DEPENDENCY_BLOCK_DEFINITION_ID)
	{
		{ _field_tag_reference, "tag reference", &_reference$4 },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference$4, INVALID_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR | TAG_REFERENCE_FLAG_NOT_A_RESOURCE_DEPENDENCY);

	#define OPPOSING_OBJECTIVE_BLOCK_ID { 0xB1CF4807, 0x862A48E5, 0x987F56BD, 0x4ACD02F3 }
	TAG_STRUCT(
		opposing_objective_block,
		"opposing_objective_block",
		"opposing_objective_block",
		"s_opposing_objective_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OPPOSING_OBJECTIVE_BLOCK_ID)
	{
		{ _field_short_block_index, "objective", &objectives_block_block },
		FIELD_PAD("pad0", 2),
		{ _field_terminator }
	};

	#define OPTIONALUNITCAMERABLOCK_ID { 0x85EBC038, 0x51394353, 0xAEDC0BB1, 0x6CA0F4B }
	TAG_STRUCT(
		optionalunitcamerablock,
		"optionalUnitCameraBlock",
		"optionalUnitCameraBlock",
		"s_optionalunitcamerablock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OPTIONALUNITCAMERABLOCK_ID)
	{
		{ _field_struct, "unit camera", &unit_camera_struct },
		{ _field_terminator }
	};

	#define ORDER_COMPLETION_CONDITION_ID { 0xF28511DE, 0xF3EF4ED6, 0xAA67399F, 0x165711C7 }
	TAG_STRUCT(
		order_completion_condition,
		"order_completion_condition",
		"order_completion_condition",
		"s_order_completion_condition",
		SET_UNKNOWN4 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ORDER_COMPLETION_CONDITION_ID)
	{
		{ _field_short_enum, "rule type", &condition_type_enum },
		{ _field_short_block_index, "squad", &squads_block_block },
		{ _field_short_block_index, "squad group", &squad_groups_block_block },
		{ _field_short_integer, "a" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "x" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_short_block_index, "trigger volume", &scenario_trigger_volume_block_block },
		FIELD_PAD("VZNEYGLW", 2),
		FIELD_USELESS_PAD("value", 8),
		{ _field_string, "Exit condition script", _field_id_halo_script_block },
		{ _field_short_integer, "script index" },
		FIELD_PAD("LEV", 2),
		FIELD_USELESS_PAD("value", 36),
		{ _field_long_flags, "flags", &completion_condition_flags },
		{ _field_terminator }
	};

	STRINGS(condition_type_enum)
	{
		"A or greater alive",
		"A or fewer alive",
		"X or greater strength",
		"X or less strength",
		"If enemy sighted",
		"After A ticks",
		"If alerted by squad A",
		"Script ref TRUE",
		"Script ref FALSE",
		"If player in trigger volume",
		"If ALL players in trigger volume",
		"Combat status A or more",
		"Combat status A or less",
		"Arrived",
		"In vehicle",
		"Sighted player",
		"A or greater fighting",
		"A or fewer fighting",
		"Player within X world units",
		"Player shot more than X seconds ago",
		"Game safe to save"
	};
	STRING_LIST(condition_type_enum, condition_type_enum_strings, _countof(condition_type_enum_strings));

	STRINGS(completion_condition_flags)
	{
		"NOT!"
	};
	STRING_LIST(completion_condition_flags, completion_condition_flags_strings, _countof(completion_condition_flags_strings));

	#define ORDER_ENDING_BLOCK_ID { 0xFB397E2B, 0xE8894CCB, 0x95BBC537, 0x6463876 }
	TAG_STRUCT(
		order_ending_block,
		"order_ending_block",
		"order_ending_block",
		"s_order_ending_block",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ORDER_ENDING_BLOCK_ID)
	{
		{ _field_short_block_index, "next order", &orders_block_block },
		{ _field_short_enum, "combination rule", &combination_rules_enum },
		{ _field_real, "delay time" },
		{ _field_short_enum, "dialogue type", "when this ending is triggered, launch a dialogue event of the given type", &order_ending_dialogue_enum },
		FIELD_PAD("YVKPCQIYY", 2),
		FIELD_USELESS_PAD("value", 16),
		{ _field_block, "triggers", &trigger_references_block },
		{ _field_terminator }
	};

	STRINGS(order_ending_dialogue_enum)
	{
		"none",
		"enemy is advancing",
		"enemy is charging",
		"enemy is falling back",
		"advance",
		"charge",
		"fall_back",
		"move on{moveone}",
		"follow_player",
		"arriving into combat",
		"end combat",
		"investigate",
		"spread out",
		"hold position{hold}",
		"find cover",
		"covering fire"
	};
	STRING_LIST(order_ending_dialogue_enum, order_ending_dialogue_enum_strings, _countof(order_ending_dialogue_enum_strings));

	#define ORDERS_BLOCK_ID { 0xAA153229, 0x3F434BB1, 0xA442B744, 0xB378C50A }
	TAG_STRUCT(
		orders_block,
		"orders_block",
		"orders_block",
		"s_orders_block",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ORDERS_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_string, "name" },
		{ _field_short_block_index, "Style", &style_palette_block_block },
		FIELD_PAD("YATIWNRNR", 2),
		{ _field_long_flags, "flags", &order_flags },
		{ _field_short_enum, "Force combat status", &force_combat_status_enum },
		FIELD_PAD("PWY", 2),
		{ _field_string, "Entry Script", _field_id_halo_script_block },
		{ _field_short_integer, "Script index" },
		{ _field_short_block_index, "Follow squad", &squads_block_block },
		{ _field_real, "follow radius" },
		{ _field_block, "Primary area set", &area_reference_block_block },
		{ _field_block, "Secondary area set", &area_reference_block_block },
		{ _field_block, "Secondary set trigger", &secondary_set_trigger_block_block },
		{ _field_block, "Special movement", &special_movement_block_block },
		FIELD_USELESS_PAD("value", 12),
		{ _field_block, "Order endings", &order_ending_block_block },
		{ _field_terminator }
	};

	STRINGS(order_flags)
	{
		"locked",
		"always active",
		"debug on",
		"strict area def",
		"follow closest player",
		"follow squad",
		"suppress active camo",
		"suppress combat until engaged",
		"inhibit vehicle use"
	};
	STRING_LIST(order_flags, order_flags_strings, _countof(order_flags_strings));

	STRINGS(force_combat_status_enum)
	{
		"NONE",
		"Idle",
		"Alert",
		"Combat"
	};
	STRING_LIST(force_combat_status_enum, force_combat_status_enum_strings, _countof(force_combat_status_enum_strings));

	#define OVERLAY_DEFINITION_ID { 0x8836D58B, 0x4A6A6F0A, 0x66733DA3, 0x9BCB5AF9 }
	TAG_STRUCT(
		overlay_definition,
		"overlay_definition",
		"overlay_definition",
		"s_overlay_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OVERLAY_DEFINITION_ID)
	{
		{ _field_string_id, "resolution" },
		{ _field_string_id, "theme" },
		{ _field_block, "components", &component_properties_definition_block },
		{ _field_block, "animations", &animation_definition_block },
		{ _field_terminator }
	};

	#define OVERLAY_EDITOR_ONLY_DEFINITION_ID { 0xE972B73F, 0x46783E11, 0x5D16EAAB, 0xC2D1B897 }
	TAG_STRUCT(
		overlay_editor_only_definition,
		"overlay_editor_only_definition",
		"overlay_editor_only_definition",
		"s_overlay_editor_only_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OVERLAY_EDITOR_ONLY_DEFINITION_ID)
	{
		{ _field_string_id, "resolution" },
		{ _field_string_id, "theme" },
		{ _field_byte_flags, "flags", &editor_overlay_info_flags },
		{ _field_block, "components editor only", &component_editor_only_definition_block },
		{ _field_block, "animations editor only", &animation_editor_only_definition_block },
		FIELD_PAD("pad0", 3),
		{ _field_terminator }
	};

	STRINGS(editor_overlay_info_flags)
	{
		"exclude overlay"
	};
	STRING_LIST(editor_overlay_info_flags, editor_overlay_info_flags_strings, _countof(editor_overlay_info_flags_strings));

	#define OVERLAY_GROUP_DEFINITION_BLOCK_ID { 0xB0C28EAA, 0xAD92455C, 0xBCF71470, 0x116D2507 }
	TAG_STRUCT(
		overlay_group_definition_block,
		"overlay_group_definition_block",
		"overlay_group_definition_block",
		"s_overlay_group_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		OVERLAY_GROUP_DEFINITION_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "blend screens", MAKE_ALT_NAMES("blend screen"), &blend_screen_item_definition_block_block },
		{ _field_block, "function overlays", &function_overlay_item_definition_block_block },
		{ _field_terminator }
	};

	#define PACKED_DATA_SIZES_STRUCT_ID { 0x1FBE28A2, 0x840641F2, 0x8852141E, 0x2D54A2E }
	TAG_STRUCT(
		packed_data_sizes_struct,
		"packed_data_sizes_struct",
		"packed_data_sizes_struct",
		"s_packed_data_sizes_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PACKED_DATA_SIZES_STRUCT_ID)
	{
		{ _field_long_integer, "static_node_flags" },
		{ _field_long_integer, "animated_node_flags" },
		{ _field_long_integer, "movement_data" },
		{ _field_long_integer, "pill_offset_data" },
		{ _field_long_integer, "default_data" },
		{ _field_long_integer, "uncompressed_data" },
		{ _field_long_integer, "compressed_data" },
		{ _field_long_integer, "blend_screen_data" },
		{ _field_long_integer, "object_space_offset_data" },
		{ _field_long_integer, "ik_chain_event_data" },
		{ _field_long_integer, "ik_chain_control_data" },
		{ _field_long_integer, "ik_chain_proxy_data" },
		{ _field_long_integer, "ik_chain_pole_vector_data" },
		{ _field_long_integer, "uncompressed_object_space_data" },
		{ _field_long_integer, "fik_anchor_data" },
		{ _field_long_integer, "uncompressed_object_space_node_flags" },
		{ _field_long_integer, "compressed_event_curve" },
		{ _field_long_integer, "compressed_static_pose" },
		{ _field_terminator }
	};

	#define PART_BLOCK_ID { 0x4A81849D, 0xFBEE42B4, 0xA3C956AC, 0xE6530F18 }
	TAG_STRUCT(
		part_block,
		"part_block",
		"part_block",
		"s_part_block",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PART_BLOCK_ID)
	{
		{ _field_short_block_index, "render method index", &global_geometry_material_block_block },
		{ _field_short_block_index, "transparent sorting index", &sorting_position_block_block },
		{ _field_long_integer, "index start" },
		{ _field_long_integer, "index count" },
		{ _field_short_integer, "subpart start" },
		{ _field_short_integer, "subpart count" },
		{ _field_char_integer, "part type" },
		{ _field_char_enum, "specialized render", &specialized_render_definition },
		{ _field_word_flags, "part flags", &part_flags },
		{ _field_word_integer, "budget vertex count" },
		{ _field_short_enum, "tessellation", &tessellation_mode_definition },
		{ _field_terminator }
	};

	STRINGS(specialized_render_definition)
	{
		"none",
		"fail",
		"fur",
		"fur_stencil",
		"decal",
		"shield",
		"water",
		"lightmap_only",
		"hologram"
	};
	STRING_LIST(specialized_render_definition, specialized_render_definition_strings, _countof(specialized_render_definition_strings));

	STRINGS(part_flags)
	{
		"is water surface",
		"per vertex lightmap part",
		"debug flag instance part",
		"subparts has uberlights info",
		"draw cull distance medium",
		"draw cull distance close",
		"draw cull rendering shields",
		"cannot single pass render",
		"is transparent",
		"cannot two pass",
		"transparent should output depth for DoF#expensive",
		"do not include in static lightmap",
		"do not include in PVS generation",
		"draw cull rendering active camo"
	};
	STRING_LIST(part_flags, part_flags_strings, _countof(part_flags_strings));

	STRINGS(tessellation_mode_definition)
	{
		"none",
		"fixed x4 faces",
		"fixed x9 faces",
		"fixed x36 faces"
	};
	STRING_LIST(tessellation_mode_definition, tessellation_mode_definition_strings, _countof(tessellation_mode_definition_strings));

	#define PARTICLE_CONTROLLER_ID { 0xFFDF1EEA, 0xE003416F, 0xBBE85C7F, 0xA06AFA10 }
	TAG_STRUCT(
		particle_controller,
		"particle_controller",
		"particle_controller",
		"s_particle_controller",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_CONTROLLER_ID)
	{
		{ _field_short_enum, "type", &particle_movement_type },
		{ _field_byte_flags, "flags", &particle_controller_flags },
		FIELD_PAD("KNTXOMS", 1),
		{ _field_block, "parameters", &particle_controller_parameters_block },
		{ _field_long_integer, "runtime m_constant_parameters" },
		{ _field_long_integer, "runtime m_used_particle_states" },
		{ _field_terminator }
	};

	STRINGS(particle_movement_type)
	{
		"physics",
		"collider",
		"swarm",
		"wind",
		"turbulence",
		"global force"
	};
	STRING_LIST(particle_movement_type, particle_movement_type_strings, _countof(particle_movement_type_strings));

	STRINGS(particle_controller_flags)
	{
		"properties fully indexed"
	};
	STRING_LIST(particle_controller_flags, particle_controller_flags_strings, _countof(particle_controller_flags_strings));

	#define PARTICLE_CONTROLLER_PARAMETERS_ID { 0xAC90ED63, 0x7FCF4CE1, 0xADDEA140, 0x9C137F95 }
	TAG_STRUCT(
		particle_controller_parameters,
		"particle_controller_parameters",
		"particle_controller_parameters",
		"s_particle_controller_parameters",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_CONTROLLER_PARAMETERS_ID)
	{
		{ _field_long_integer, "parameter id" },
		{ _field_struct, "property", &particle_property_scalar_struct_new },
		{ _field_terminator }
	};

	#define PARTICLE_EMITTER_BOAT_HULL_GROUP_BLOCK_ID { 0xC25B4B2B, 0x662C49B9, 0xAAA42775, 0xAE9CE079 }
	TAG_STRUCT(
		particle_emitter_boat_hull_group_block,
		"particle_emitter_boat_hull_group_block",
		"particle_emitter_boat_hull_group_block",
		"s_particle_emitter_boat_hull_group_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_EMITTER_BOAT_HULL_GROUP_BLOCK_ID)
	{
		{ _field_string_id, "marker group" },
		{ _field_terminator }
	};

	#define PARTICLE_EMITTER_BOAT_HULL_SHAPE_STRUCT_DEFINITION_ID { 0xD30AB71D, 0xA7974D90, 0x8547B676, 0x631E2683 }
	TAG_STRUCT(
		particle_emitter_boat_hull_shape_struct_definition,
		"particle_emitter_boat_hull_shape_struct_definition",
		"particle_emitter_boat_hull_shape_struct_definition",
		"s_particle_emitter_boat_hull_shape_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_EMITTER_BOAT_HULL_SHAPE_STRUCT_DEFINITION_ID)
	{
		{ _field_char_enum, "distribution", "heuristic used to determine where to spawn particles", &particle_emitter_boat_hull_distribution_type },
		FIELD_PAD("PEBHSP1", 3),
		{ _field_block, "markers", &particle_emitter_boat_hull_group_block_block },
		{ _field_terminator }
	};

	STRINGS(particle_emitter_boat_hull_distribution_type)
	{
		"connect the dots#project hull surface locations onto the water and spawn particles along the resulting path.",
		"along hull surface only#spawn particles on the hull surface where it intersects with the water."
	};
	STRING_LIST(particle_emitter_boat_hull_distribution_type, particle_emitter_boat_hull_distribution_type_strings, _countof(particle_emitter_boat_hull_distribution_type_strings));

	#define PARTICLE_EMITTER_CUSTOM_POINT_BLOCK_ID { 0x705D9DDC, 0x15864BBC, 0x898A1244, 0x8425BCAE }
	TAG_STRUCT(
		particle_emitter_custom_point_block,
		"particle_emitter_custom_point_block",
		"particle_emitter_custom_point_block",
		"s_particle_emitter_custom_point_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_EMITTER_CUSTOM_POINT_BLOCK_ID)
	{
		{ _field_short_integer, "position_x" },
		{ _field_short_integer, "position_y" },
		{ _field_short_integer, "position_z" },
		{ _field_char_integer, "normal_x" },
		{ _field_char_integer, "normal_y" },
		{ _field_char_integer, "normal_z" },
		{ _field_byte_integer, "correlation" },
		{ _field_terminator }
	};

	#define PARTICLE_EMITTER_CUSTOM_POINTS_STRUCT_DEFINITION_ID { 0xB96E0D8B, 0xD98049CD, 0xB32EB972, 0x2FBDCDDB }
	TAG_STRUCT(
		particle_emitter_custom_points_struct_definition,
		"particle_emitter_custom_points_struct_definition",
		"particle_emitter_custom_points_struct_definition",
		"s_particle_emitter_custom_points_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_EMITTER_CUSTOM_POINTS_STRUCT_DEFINITION_ID)
	{
		FIELD_CUSTOM("import", _tag_field_custom_type_tool_command),
		FIELD_EXPLANATION("PARTICLE POINTS", "Explanation goes here.\nWoo....\n"),
		{ _field_tag_reference, "source reference", &particle_model_group_reference },
		{ _field_real_vector_3d, "compression scale" },
		{ _field_real_vector_3d, "compression offset" },
		{ _field_block, "points", &particle_emitter_custom_point_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(particle_model_group_reference, PARTICLE_MODEL_TAG);

	#define PARTICLE_MODEL_STRUCT_DEFINITION_ID { 0xC4C7FDE0, 0xADA64FF1, 0x9CDCC3BE, 0xF1D59F65 }
	TAG_STRUCT(
		particle_model_struct_definition,
		"particle_model_struct_definition",
		"particle_model_struct_definition",
		"s_particle_model_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_MODEL_STRUCT_DEFINITION_ID)
	{
		FIELD_CUSTOM("Import model", _tag_field_custom_type_import_particle_model_command),
		FIELD_EXPLANATION("WHY IS THIS TAG EMPTY?", "This tag is only a shell for containing imported particle geometry data.\nEven an empty geometry structure is pretty large, so I didn\'t want to put it in the parent particle tag.\n"),
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "render geometry", &global_render_geometry_struct },
		FIELD_HIDE_END(),
		{ _field_struct, "m_gpu_data", &gpu_data_struct },
		{ _field_terminator }
	};

	#define PARTICLE_PHYSICS_STRUCT_ID { 0x2E19EA87, 0xEB8741A8, 0xB25C5661, 0x9D4201DD }
	TAG_STRUCT(
		particle_physics_struct,
		"particle_physics_struct",
		"particle_physics_struct",
		"s_particle_physics_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_PHYSICS_STRUCT_ID)
	{
		{ _field_tag_reference, "template", &particle_physics_group_reference },
		{ _field_word_flags, "flags", &particle_movement_flags },
		{ _field_char_integer, "collision controller index" },
		{ _field_char_integer, "turbulence controller index" },
		{ _field_char_integer, "global force controller index" },
		FIELD_PAD("pphys", 3),
		{ _field_block, "movements", &particle_controller_block },
		{ _field_tag_reference, "turbulence texture", &bitmap_group_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(particle_physics_group_reference, PARTICLE_PHYSICS_TAG);

	STRINGS(particle_movement_flags)
	{
		"physics",
		"collide with structure",
		"collide with water",
		"collide with scenery",
		"collide with vehicles",
		"collide with bipeds",
		"always collide every frame",
		"swarm",
		"wind",
		"turbulence",
		"global force",
		"disable swarm collision"
	};
	STRING_LIST(particle_movement_flags, particle_movement_flags_strings, _countof(particle_movement_flags_strings));

	#define PARTICLE_PHYSICS_STRUCT_DEFINITION_ID { 0xC86CD2D6, 0xEB9C4A4F, 0x96C423E9, 0x48A52870 }
	TAG_STRUCT(
		particle_physics_struct_definition,
		"particle_physics_struct_definition",
		"particle_physics_struct_definition",
		"s_particle_physics_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_PHYSICS_STRUCT_DEFINITION_ID)
	{
		{ _field_tag_reference, "template", &particle_physics_group_reference },
		{ _field_word_flags, "flags", &particle_movement_flags },
		{ _field_char_integer, "collision controller index" },
		{ _field_char_integer, "turbulence controller index" },
		{ _field_char_integer, "global force controller index" },
		FIELD_PAD("pphys", 3),
		{ _field_block, "movements", &particle_controller_block },
		{ _field_tag_reference, "turbulence texture", &bitmap_group_reference$2 },
		{ _field_terminator }
	};

	#define PARTICLE_PROPERTY_COLOR_STRUCT_NEW_ID { 0x342C0071, 0xBAFB43CF, 0x9FDA5DD6, 0x630D2DCA }
	TAG_STRUCT(
		particle_property_color_struct_new,
		"particle_property_color_struct_new",
		"particle_property_color_struct_new",
		"s_particle_property_color_struct_new",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_PROPERTY_COLOR_STRUCT_NEW_ID)
	{
		{ _field_char_enum, "Input Variable", &game_state_type_enum, _field_id_function_input_scalar },
		{ _field_char_enum, "Range Variable", &game_state_type_enum, _field_id_function_input_range },
		{ _field_char_enum, "Output Modifier", &output_mod_enum, _field_id_function_output_modifier },
		{ _field_char_enum, "Output Modifier Input", &game_state_type_enum, _field_id_function_output_modifier_input },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_real, "runtime m_constant_value" },
		{ _field_word_integer, "runtime m_flags" },
		FIELD_PAD("DSFDSGLKJ", 2),
		{ _field_terminator }
	};

	STRINGS(output_mod_enum)
	{
		" ",
		"Plus",
		"Times"
	};
	STRING_LIST(output_mod_enum, output_mod_enum_strings, _countof(output_mod_enum_strings));

	#define PARTICLE_PROPERTY_REAL_EULER_ANGLES2D_STRUCT_NEW_ID { 0x937386F6, 0xD5844EB4, 0x82972518, 0xEF8BF01E }
	TAG_STRUCT(
		particle_property_real_euler_angles2d_struct_new,
		"particle_property_real_euler_angles2d_struct_new",
		"particle_property_real_euler_angles2d_struct_new",
		"s_particle_property_real_euler_angles2d_struct_new",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_PROPERTY_REAL_EULER_ANGLES2D_STRUCT_NEW_ID)
	{
		{ _field_char_enum, "Input Variable", &game_state_type_enum, _field_id_function_input_scalar },
		{ _field_char_enum, "Range Variable", &game_state_type_enum, _field_id_function_input_range },
		{ _field_char_enum, "Output Modifier", &output_mod_enum, _field_id_function_output_modifier },
		{ _field_char_enum, "Output Modifier Input", &game_state_type_enum, _field_id_function_output_modifier_input },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_real, "runtime m_constant_value" },
		{ _field_word_integer, "runtime m_flags" },
		FIELD_PAD("DSFDSGLKJ", 2),
		{ _field_real_euler_angles_2d, "Direction at 0" },
		{ _field_real_euler_angles_2d, "Direction at 1" },
		{ _field_terminator }
	};

	#define PARTICLE_PROPERTY_REAL_POINT3D_STRUCT_NEW_ID { 0xBEB218F, 0x6CE546FA, 0xA21161F6, 0xE75582FC }
	TAG_STRUCT(
		particle_property_real_point3d_struct_new,
		"particle_property_real_point3d_struct_new",
		"particle_property_real_point3d_struct_new",
		"s_particle_property_real_point3d_struct_new",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_PROPERTY_REAL_POINT3D_STRUCT_NEW_ID)
	{
		{ _field_char_enum, "Input Variable", &game_state_type_enum, _field_id_function_input_scalar },
		{ _field_char_enum, "Range Variable", &game_state_type_enum, _field_id_function_input_range },
		{ _field_char_enum, "Output Modifier", &output_mod_enum, _field_id_function_output_modifier },
		{ _field_char_enum, "Output Modifier Input", &game_state_type_enum, _field_id_function_output_modifier_input },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_real, "runtime m_constant_value" },
		{ _field_word_integer, "runtime m_flags" },
		FIELD_PAD("DSFDSGLKJ", 2),
		{ _field_real_point_3d, "Starting interpolant" },
		{ _field_real_point_3d, "Ending interpolant" },
		{ _field_terminator }
	};

	#define PARTICLE_PROPERTY_REAL_VECTOR3D_STRUCT_NEW_ID { 0x2581257, 0x6A544BEE, 0xA48450A0, 0xA5C42FB5 }
	TAG_STRUCT(
		particle_property_real_vector3d_struct_new,
		"particle_property_real_vector3d_struct_new",
		"particle_property_real_vector3d_struct_new",
		"s_particle_property_real_vector3d_struct_new",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_PROPERTY_REAL_VECTOR3D_STRUCT_NEW_ID)
	{
		{ _field_char_enum, "Input Variable", &game_state_type_enum, _field_id_function_input_scalar },
		{ _field_char_enum, "Range Variable", &game_state_type_enum, _field_id_function_input_range },
		{ _field_char_enum, "Output Modifier", &output_mod_enum, _field_id_function_output_modifier },
		{ _field_char_enum, "Output Modifier Input", &game_state_type_enum, _field_id_function_output_modifier_input },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_real, "runtime m_constant_value" },
		{ _field_word_integer, "runtime m_flags" },
		FIELD_PAD("DSFDSGLKJ", 2),
		{ _field_real_vector_3d, "Starting interpolant" },
		{ _field_real_vector_3d, "Ending interpolant" },
		{ _field_terminator }
	};

	#define PARTICLE_PROPERTY_SCALAR_STRUCT_NEW_ID { 0x64607252, 0xE8084E37, 0x8447409D, 0x9411483C }
	TAG_STRUCT(
		particle_property_scalar_struct_new,
		"particle_property_scalar_struct_new",
		"particle_property_scalar_struct_new",
		"s_particle_property_scalar_struct_new",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_PROPERTY_SCALAR_STRUCT_NEW_ID)
	{
		{ _field_char_enum, "Input Variable", &game_state_type_enum, _field_id_function_input_scalar },
		{ _field_char_enum, "Range Variable", &game_state_type_enum, _field_id_function_input_range },
		{ _field_char_enum, "Output Modifier", &output_mod_enum, _field_id_function_output_modifier },
		{ _field_char_enum, "Output Modifier Input", &game_state_type_enum, _field_id_function_output_modifier_input },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_real, "runtime m_constant_value" },
		{ _field_word_integer, "runtime m_flags" },
		{ _field_byte_flags, "force flags", &force_flags_definition },
		FIELD_PAD("DSFDSGLKJ", 1),
		{ _field_terminator }
	};

	STRINGS(force_flags_definition)
	{
		"force constant"
	};
	STRING_LIST(force_flags_definition, force_flags_definition_strings, _countof(force_flags_definition_strings));

	#define PARTICLE_STRUCT_DEFINITION_ID { 0x9ED62376, 0x9F9E4A9D, 0x9DE72B9D, 0x51E76D25 }
	TAG_STRUCT(
		particle_struct_definition,
		"particle_struct_definition",
		"particle_struct_definition",
		"s_particle_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_STRUCT_DEFINITION_ID)
	{
		FIELD_IFP_BEGIN(),
		{ _field_long_flags, "main flags", &particle_main_flags },
		{ _field_block, "attachments", &attachment_block_block },
		FIELD_EXPLANATION("PARTICLE APPEARANCE", nullptr),
		{ _field_long_flags, "appearance flags", &particle_appearance_flags },
		{ _field_short_enum, "particle billboard style", &particle_billboard_type_enum },
		FIELD_PAD("NQCLLBQ", 2),
		{ _field_short_integer, "first sequence index" },
		{ _field_short_integer, "sequence count" },
		{ _field_real, "low res switch distance", "the distance at which we switch from low res (close) to high res (far)", "wu" },
		{ _field_real_point_2d, "center offset" },
		{ _field_real, "curvature", nullptr, "0=flat, 1=hemisphere" },
		{ _field_real, "angle fade range", "degrees beyond cutoff over which particles fade", "degrees" },
		{ _field_real, "angle fade cutoff", "degrees away from edge-on where fade is total", "degrees" },
		{ _field_real, "motion blur translation scale", "affects billboard tilt from observer motion" },
		{ _field_real, "motion blur rotation scale", "affects billboard tilt from observer turning" },
		{ _field_real, "motion blur aspect scale", "affects aspect ratio stretching from particle and observer motion" },
		FIELD_CUSTOM("material", _tag_field_custom_type_tag_group_template),
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "actual material?", &material_struct },
		FIELD_HIDE_END(),
		FIELD_IFP_END(),
		{ _field_struct, "aspect ratio", &particle_property_scalar_struct_new },
		{ _field_struct, "color", "controls how the color of the particle changes as a function of its input", "RGB", &particle_property_color_struct_new },
		{ _field_struct, "intensity", "multiplies color to give dynamic range outside [0,1]", &particle_property_scalar_struct_new },
		{ _field_struct, "alpha", "separate from color, controls how the particle fades as a function of its input", &particle_property_scalar_struct_new },
		{ _field_real, "tint factor", "switches between modulate (multiply) and tint(preserve whites)", "0=modulate, 1=tint" },
		FIELD_EXPLANATION("PARTICLE ANIMATION", nullptr),
		{ _field_long_flags, "animation flags", &particle_animation_flags },
		{ _field_struct, "frame index", "0=first frame, 1=last frame", &particle_property_scalar_struct_new },
		{ _field_struct, "animation rate", nullptr, "index cycles per second", &particle_property_scalar_struct_new },
		{ _field_struct, "palette animation", nullptr, "v coord of palette", &particle_property_scalar_struct_new },
		FIELD_EXPLANATION("Mesh data, if this is a mesh particle", nullptr),
		{ _field_tag_reference, "Model", &particle_model_group_reference$2 },
		FIELD_GROUP_BEGIN("OLD DEPRECATED shader definition"),
		FIELD_CUSTOM("shader", _tag_field_custom_type_tag_group_template),
		FIELD_GROUP_END(),
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "actual shader?", &shader_particle_struct_definition }, // structure_version:0
		FIELD_HIDE_END(),
		{ _field_dword_integer, "runtime m_used_particle_states" },
		{ _field_dword_integer, "runtime m_constant_per_particle_properties" },
		{ _field_dword_integer, "runtime m_constant_over_time_properties" },
		{ _field_struct, "runtime m_gpu_data", &gpu_data_struct$2 },
		{ _field_terminator }
	};

	STRINGS(particle_main_flags)
	{
		"dies at rest",
		"dies on structure collision",
		"dies in water",
		"dies in air",
		"has sweetener",
		"uses cheap shader"
	};
	STRING_LIST(particle_main_flags, particle_main_flags_strings, _countof(particle_main_flags_strings));

	STRINGS(particle_appearance_flags)
	{
		"random u mirror",
		"random v mirror",
		"random starting rotation",
		"tint from lightmap",
		"tint from diffuse texture",
		"bitmap authored vertically",
		"intensity affects alpha",
		"fade when viewed edge-on",
		"motion blur",
		"double-sided",
		"low res#renders heavy overdraw particles faster",
		"low res tighter mask#requires depth fade",
		"never kill verts on GPU (expensive)",
		"particle velocity relative to camera#makes parallel and perpindicular to velocity behave differently based upon camera motion"
	};
	STRING_LIST(particle_appearance_flags, particle_appearance_flags_strings, _countof(particle_appearance_flags_strings));

	STRINGS(particle_billboard_type_enum)
	{
		"screen facing",
		"camera facing",
		"parallel to direction",
		"perpendicular to direction",
		"vertical",
		"horizontal",
		"local vertical",
		"local horizontal",
		"world (particle models)",
		"velocity horizontal (particle models)"
	};
	STRING_LIST(particle_billboard_type_enum, particle_billboard_type_enum_strings, _countof(particle_billboard_type_enum_strings));

	STRINGS(particle_animation_flags)
	{
		"frame animation one shot",
		"can animate backwards"
	};
	STRING_LIST(particle_animation_flags, particle_animation_flags_strings, _countof(particle_animation_flags_strings));

	TAG_REFERENCE(particle_model_group_reference$2, PARTICLE_MODEL_TAG);

	#define PARTICLE_SYSTEM_DEFINITION_BLOCK_NEW_ID { 0x1A9DCA45, 0x13064A9F, 0x9D46034E, 0xC703387 }
	TAG_STRUCT(
		particle_system_definition_block_new,
		"particle_system_definition_block_new",
		"particle_system_definition_block_new",
		"s_particle_system_definition_block_new",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_SYSTEM_DEFINITION_BLOCK_NEW_ID)
	{
		FIELD_IFP_BEGIN(),
		{ _field_char_enum, "priority", &global_effect_priority_enum },
		FIELD_PAD("CXAEIHGADNF", 3),
		{ _field_tag_reference, "particle", &particle_group_reference },
		{ _field_long_block_index, "location", &effect_locations_block_block },
		{ _field_short_enum, "coordinate system", &coordinate_system_enum },
		{ _field_short_enum, "environment", &effect_environments },
		{ _field_short_enum, "disposition", &effect_dispositions },
		{ _field_short_enum, "camera mode", &effect_camera_modes },
		{ _field_char_enum, "game mode", &effectpartgamemodedefinition },
		FIELD_PAD("pad0", 1),
		{ _field_short_integer, "sort bias", "use values between -10 and 10 to move closer and farther from camera (positive is closer)" },
		{ _field_long_flags, "flags", &particle_system_flags },
		{ _field_real_bounds, "percent velocity to inherit", "flag must be checked above" },
		{ _field_real, "size scale", "multiplied by all \"size\" related fields, like scale, velocity, acceleration" },
		{ _field_real, "camera offset", "the particle is pushed away from the camera this distance (can be negative)", "world units" },
		FIELD_CUSTOM("Estimate overdraw threshold", _tag_field_custom_type_estimate_overdraw_command),
		{ _field_real, "Pixel budget", nullptr, "ms" },
		{ _field_real, "near fade range", "distance beyond cutoff over which particles fade", "world units" },
		{ _field_real, "near fade cutoff", "distance in front of camera where fade is complete", "world units", FIELD_FLAG_READ_ONLY },
		{ _field_real, "near fade override", "distance in front of camera where fade is complete", "world units" },
		{ _field_real, "far fade range", "distance before cutoff over which particles fade", "world units" },
		{ _field_real, "far fade cutoff", "distance from camera where fade is complete", "world units" },
		{ _field_real, "LOD in distance" },
		{ _field_real, "LOD feather in delta", "minimum is 0.0001" },
		{ _field_real, "inverse LOD feather in" },
		{ _field_real, "LOD out distance", "defaults to 20.0" },
		{ _field_real, "LOD feather out delta", "0 defaults to 5.0, minimum is 0.0001" },
		{ _field_real, "inverse LOD feather out" },
		FIELD_IFP_END(),
		{ _field_block, "emitters", &particle_system_emitter_definition_block_block },
		{ _field_real, "runtime max lifespan" },
		{ _field_real, "runtime overdraw" },
		{ _field_terminator }
	};

	TAG_REFERENCE(particle_group_reference, PARTICLE_TAG);

	STRINGS(coordinate_system_enum)
	{
		"world",
		"local"
	};
	STRING_LIST(coordinate_system_enum, coordinate_system_enum_strings, _countof(coordinate_system_enum_strings));

	STRINGS(particle_system_flags)
	{
		"particles freeze when offscreen",
		"particles continue as usual when offscreen{skip visibility test}{cinematics}",
		"lod always 1.0{ignore lod (render always)}",
		"lod same in splitscreen",
		"disabled in any splitscreen",
		"disabled in 3- and 4-way splitscreen",
		"disabled for debugging",
		"inherit effect velocity",
		"don\'t render system",
		"render when zoomed",
		"force cpu updating{force cpu rendering}",
		"force gpu updating{force gpu rendering}",
		"override near fade (use with caution)",
		"particles die when effect ends{die when orphaned}",
		"use synchronized random seed#synchronized across particle systems",
		"use world orientation#particle system uses local-space position but up is always \'global up\'",
		"render in spawn order#first particle spawned renders first (at the back), last particle spawned renders last (front)",
		"dynamic particle resolution#use distance and multiplier (below) to tune high- or low-res rendering",
		"particles live forever",
		"disable in vision mode",
		"disable velocity",
		"disable when zoomed",
		"continue when offscreen ignores .performance_throttles tag"
	};
	STRING_LIST(particle_system_flags, particle_system_flags_strings, _countof(particle_system_flags_strings));

	#define PARTICLE_SYSTEM_EMITTER_DEFINITION_BLOCK_ID { 0xD274EE53, 0x85814DDA, 0x82E8BD20, 0x70B91AB5 }
	TAG_STRUCT(
		particle_system_emitter_definition_block,
		"particle_system_emitter_definition_block",
		"particle_system_emitter_definition_block",
		"s_particle_system_emitter_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLE_SYSTEM_EMITTER_DEFINITION_BLOCK_ID)
	{
		FIELD_IFP_BEGIN(),
		{ _field_string_id, "emitter name" },
		FIELD_GROUP_BEGIN("EMITTER SETTINGS"),
		{ _field_char_enum, "emission shape", &emission_shape_enum },
		{ _field_byte_flags, "flags", &emitter_flags },
		{ _field_byte_flags, "emitter flags", &visible_emitter_flags },
		{ _field_char_enum, "particle axis (for models)", &emission_axis_enum },
		{ _field_char_enum, "particle reference axis", &emission_reference_axis_enum },
		FIELD_PAD("Pad0", 3),
		{ _field_tag_reference, "custom shape", &particle_emitter_custom_points_group_reference },
		{ _field_tag_reference, "boat hull", &particle_emitter_boat_hull_shape_group_reference },
		{ _field_real, "bounding radius estimate", "used if override is zero", "world units" },
		{ _field_real, "bounding radius override", "used if non-zero", "world units" },
		{ _field_real_point_3d, "axis scale", "NOTE - setting this will break automatic bounding sphere calculation, you must enter radius manually" },
		{ _field_real_vector_2d, "uv scrolling", nullptr, "tiles per second" },
		FIELD_IFP_END(),
		{ _field_struct, "translational offset", "XYZ controls that offset the emitter's origin from the original location", "world units", &particle_property_real_point3d_struct_new },
		{ _field_struct, "relative direction", "yaw/pitch that changes the initial rotation of the emitter", &particle_property_real_euler_angles2d_struct_new },
		FIELD_IFP_BEGIN(),
		{ _field_struct, "emission radius", "defines the size of the emitter", "world units", &particle_property_scalar_struct_new },
		{ _field_struct, "emission angle", "determines the angle at which particles are emitted", "degrees", &particle_property_scalar_struct_new },
		{ _field_struct, "emission axis angle", "determines the max tilt for particle axis", "degrees", &particle_property_scalar_struct_new },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("EMISSION SETTINGS"),
		{ _field_struct, "particle starting count", "number of particles that are spawned at the birth of the effect", &particle_property_scalar_struct_new },
		{ _field_struct, "particle max count", "max number of particles allowed to exist at one time", "0=unlimited", &particle_property_scalar_struct_new },
		{ _field_struct, "particle emission rate", "number of particles that are spawned every second from the emitters", "particles per second", &particle_property_scalar_struct_new },
		{ _field_struct, "particle emission per distance", "number of particles that are spawned every world unit of motion from the emitters", "particles per world unit", &particle_property_scalar_struct_new },
		{ _field_struct, "particle lifespan", "the number of seconds a particle will live after emission", "seconds", &particle_property_scalar_struct_new },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("PARTICLE MOTION"),
		FIELD_CUSTOM("particle physics template", _tag_field_custom_type_tag_group_template),
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "particle movement", &particle_physics_struct },
		FIELD_HIDE_END(),
		{ _field_block, "particle attractor/repulsor", &emitterglobalforceblock_block },
		{ _field_block, "particle clip sphere", &emitterclipsphereblock_block },
		{ _field_struct, "particle self-acceleration", nullptr, "world units per second per second", &particle_property_real_vector3d_struct_new },
		{ _field_struct, "particle initial velocity", nullptr, "world units per second", MAKE_ALT_NAMES("particle velocity"), &particle_property_scalar_struct_new },
		{ _field_struct, "particle rotation", nullptr, ".25=90�, .5=180�, 1=360� ... adds to physics", &particle_property_scalar_struct_new },
		{ _field_struct, "particle initial rotation rate", nullptr, "360 degree rotations per second", MAKE_ALT_NAMES("particle angular velocity"), &particle_property_scalar_struct_new },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("PARTICLE APPEARANCE"),
		{ _field_struct, "particle size", nullptr, "world units", &particle_property_scalar_struct_new },
		{ _field_struct, "particle scale", nullptr, "multiple of size", &particle_property_scalar_struct_new },
		{ _field_struct, "particle scale x", nullptr, "multiple of size", &particle_property_scalar_struct_new },
		{ _field_struct, "particle scale y", nullptr, "multiple of size", &particle_property_scalar_struct_new },
		{ _field_struct, "particle tint", "controls the overall tint of the particle", "RGB", &particle_property_color_struct_new },
		{ _field_struct, "particle alpha", &particle_property_scalar_struct_new },
		{ _field_struct, "particle alpha black point", nullptr, "0=normal, 1=clamped", &particle_property_scalar_struct_new },
		{ _field_struct, "particle alpha white point", nullptr, "1=normal, 0=clamped", &particle_property_scalar_struct_new },
		FIELD_GROUP_END(),
		FIELD_IFP_END(),
		{ _field_long_integer, "runtime m_constant_per_particle_properties" },
		{ _field_long_integer, "runtime m_constant_over_time_properties" },
		{ _field_long_integer, "runtime m_used_particle_states" },
		{ _field_struct, "runtime m_gpu_data", &gpu_property_function_color_struct },
		{ _field_terminator }
	};

	STRINGS(emission_shape_enum)
	{
		"sprayer",
		"disc",
		"globe",
		"implode",
		"tube",
		"halo",
		"impact contour",
		"impact area",
		"debris",
		"line",
		"breakable surface",
		"custom points",
		"boat hull surface",
		"cube",
		"cylinder",
		"unweighted line",
		"plane",
		"jetwash",
		"planar orbit",
		"sphere orbit"
	};
	STRING_LIST(emission_shape_enum, emission_shape_enum_strings, _countof(emission_shape_enum_strings));

	STRING_LIST(emitter_flags, empty_string_list, 0);

	STRINGS(visible_emitter_flags)
	{
		"volume emitter particle velocities are random#By default, particles emit radially away from the emitter center.  This option gives them random velocity instead.  This only applies to volume emitters."
	};
	STRING_LIST(visible_emitter_flags, visible_emitter_flags_strings, _countof(visible_emitter_flags_strings));

	STRINGS(emission_axis_enum)
	{
		"constant",
		"cone",
		"disc",
		"globe"
	};
	STRING_LIST(emission_axis_enum, emission_axis_enum_strings, _countof(emission_axis_enum_strings));

	STRINGS(emission_reference_axis_enum)
	{
		"x",
		"y",
		"z"
	};
	STRING_LIST(emission_reference_axis_enum, emission_reference_axis_enum_strings, _countof(emission_reference_axis_enum_strings));

	TAG_REFERENCE(particle_emitter_custom_points_group_reference, PARTICLE_EMITTER_CUSTOM_POINTS_TAG);

	TAG_REFERENCE(particle_emitter_boat_hull_shape_group_reference, PARTICLE_EMITTER_BOAT_HULL_SHAPE_TAG);

	#define PARTICLEIZE_SCALAR_FUNCTION_STRUCT_ID { 0xC1CB3A69, 0x25F9489C, 0xB45FE276, 0x343B2B }
	TAG_STRUCT(
		particleize_scalar_function_struct,
		"particleize_scalar_function_struct",
		"particleize_scalar_function_struct",
		"s_particleize_scalar_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLEIZE_SCALAR_FUNCTION_STRUCT_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define PARTICLEMAN_STRUCT_DEFINITION_ID { 0x9690B47C, 0x91684047, 0x9760BBA7, 0x242F7513 }
	TAG_STRUCT(
		particleman_struct_definition,
		"particleman_struct_definition",
		"particleman_struct_definition",
		"s_particleman_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PARTICLEMAN_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Particleize Settings", "Defines a particular particleize effect\n\nDensity modifies how many particles are made\nSize indicates how large the effect can be in world units\nShape indicates the shape of the effect\nCurve defines how the shape evolves over time\n"),
		{ _field_short_enum, "Shape", &particleize_shape_enum },
		{ _field_word_flags, "Flags", &particleize_flags },
		{ _field_real, "Duration", nullptr, "sec" },
		{ _field_real, "Density" },
		{ _field_real, "Size", nullptr, "world units" },
		{ _field_struct, "Curve", &particleize_scalar_function_struct },
		{ _field_terminator }
	};

	STRINGS(particleize_shape_enum)
	{
		"cloud"
	};
	STRING_LIST(particleize_shape_enum, particleize_shape_enum_strings, _countof(particleize_shape_enum_strings));

	STRINGS(particleize_flags)
	{
		"hide object when effect completes",
		"move particles towards current set target location",
		"override any currently running particleization"
	};
	STRING_LIST(particleize_flags, particleize_flags_strings, _countof(particleize_flags_strings));

	#define PATCH_GLOBALS_STRUCT_DEFINITION_ID { 0x61508392, 0x3EAD42E3, 0x8EC54AE9, 0xD301A46B }
	TAG_STRUCT(
		patch_globals_struct_definition,
		"patch_globals_struct_definition",
		"patch_globals_struct_definition",
		"s_patch_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PATCH_GLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_struct, "language pack1", &language_pack_definition },
		{ _field_struct, "language pack2", &language_pack_definition },
		{ _field_struct, "language pack3", &language_pack_definition },
		{ _field_struct, "language pack4", &language_pack_definition },
		{ _field_struct, "language pack5", &language_pack_definition },
		{ _field_struct, "language pack6", &language_pack_definition },
		{ _field_struct, "language pack7", &language_pack_definition },
		{ _field_struct, "language pack8", &language_pack_definition },
		{ _field_struct, "language pack9", &language_pack_definition },
		{ _field_struct, "language pack10", &language_pack_definition },
		{ _field_struct, "language pack11", &language_pack_definition },
		{ _field_struct, "language pack12", &language_pack_definition },
		{ _field_struct, "language pack13", &language_pack_definition },
		{ _field_struct, "language pack14", &language_pack_definition },
		{ _field_struct, "language pack15", &language_pack_definition },
		{ _field_struct, "language pack16", &language_pack_definition },
		{ _field_struct, "language pack17", &language_pack_definition },
		{ _field_terminator }
	};

	#define PATHFINDING_BLOCK_STRUCT_ID { 0xD3F52F17, 0x90744223, 0x826FDF85, 0xF45838AC }
	TAG_STRUCT(
		pathfinding_block_struct,
		"pathfinding_block_struct",
		"pathfinding_block_struct",
		"s_pathfinding_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PATHFINDING_BLOCK_STRUCT_ID)
	{
		{ _field_block, "bsp pathfinding data", &pathfinding_data_block_block },
		{ _field_block, "mobileNavMeshes", &mobilenavmeshblock_block },
		{ _field_block, "navVolumes", &navvolumeblock_block },
		{ _field_block, "navClimbs", &navclimbblock_block },
		{ _field_block, "user edges", &user_edge_block_block },
		{ _field_block, "hints", &user_hint_block_block },
		{ _field_byte_integer, "already Converted" },
		FIELD_PAD("fuckPad", 3),
		{ _field_terminator }
	};

	#define PATHFINDING_DATA_BLOCK_ID { 0xD935AB3C, 0x86AC4216, 0xBCB736BB, 0x9AE0727C }
	TAG_STRUCT(
		pathfinding_data_block,
		"pathfinding_data_block",
		"pathfinding_data_block",
		"s_pathfinding_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PATHFINDING_DATA_BLOCK_ID,
		4)
	{
		{ _field_long_integer, "runtimeNavMesh", _field_id_zero_data },
		{ _field_long_integer, "runtimeNavGraph", _field_id_zero_data },
		{ _field_long_integer, "runtimeNavMediator", _field_id_zero_data },
		FIELD_PAD("pads", 4),
		{ _field_data, "navGraphData", &navgraphdatadefinition },
		{ _field_data, "navMediatorData", &navmediatordatadefinition },
		{ _field_block, "faceUserData", &faceuserdatablock_block },
		{ _field_long_integer, "structure checksum" },
		FIELD_PAD("pads2", 8),
		{ _field_terminator }
	};

	#define PATHFINDING_OBJECT_INDEX_LIST_BLOCK_ID { 0x37C77D68, 0xF2954BAD, 0xA5D4509E, 0xBAE0F213 }
	TAG_STRUCT(
		pathfinding_object_index_list_block,
		"pathfinding_object_index_list_block",
		"pathfinding_object_index_list_block",
		"s_pathfinding_object_index_list_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PATHFINDING_OBJECT_INDEX_LIST_BLOCK_ID)
	{
		{ _field_short_integer, "bsp index" },
		{ _field_short_integer, "pathfinding object index" },
		{ _field_terminator }
	};

	#define PATROL_POINT_BLOCK_ID { 0xC516E1B0, 0x97634244, 0x80F25696, 0x88B435C1 }
	TAG_STRUCT(
		patrol_point_block,
		"patrol_point_block",
		"patrol_point_block",
		"s_patrol_point_block",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PATROL_POINT_BLOCK_ID)
	{
		{ _field_short_block_index_custom_search, "point", &custom_patrol_point_block_index_definition },
		{ _field_word_flags, "flags", &patrol_point_flags },
		{ _field_real, "delay", "how long the AI should pause at this point", "seconds" },
		{ _field_real, "angle", "the angle-from-forward that the AI can pick at this point", "degrees" },
		{ _field_string_id, "activity name" },
		{ _field_short_enum, "activity", &g_activity_enum },
		{ _field_short_integer, "activity variant" },
		{ _field_string_id, "command script", _field_id_halo_script_block },
		{ _field_short_integer, "command script index" },
		FIELD_PAD("post-command-script", 2),
		{ _field_terminator }
	};

	STRINGS(patrol_point_flags)
	{
		"single use"
	};
	STRING_LIST(patrol_point_flags, patrol_point_flags_strings, _countof(patrol_point_flags_strings));

	STRINGS(g_activity_enum)
	{
		"none",
		"patrol",
		"stand",
		"crouch",
		"stand_drawn",
		"crouch_drawn",
		"combat",
		"backup",
		"guard",
		"guard_crouch",
		"guard_wall",
		"typing",
		"kneel",
		"gaze",
		"poke",
		"sniff",
		"track",
		"watch",
		"examine",
		"sleep",
		"at_ease",
		"cower",
		"tai_chi",
		"pee",
		"doze",
		"eat",
		"medic",
		"work",
		"cheering",
		"injured",
		"captured"
	};
	STRING_LIST(g_activity_enum, g_activity_enum_strings, _countof(g_activity_enum_strings));

	#define PCA_ANIMATION_BLOCK_STRUCT_ID { 0x7CDBDEA2, 0x89A44131, 0x8B74D5FD, 0xD31DFAA3 }
	TAG_STRUCT(
		pca_animation_block_struct,
		"pca_animation_block_struct",
		"pca_animation_block_struct",
		"s_pca_animation_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PCA_ANIMATION_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("Links", "links to the tags this data is associated with. These will be set by the importer, you don\'t need to do it manually"),
		{ _field_tag_reference, "RenderModel", &render_model_group_reference$6 },
		{ _field_tag_reference, "AnimationGraph", &model_animation_graph_group_reference },
		{ _field_long_flags, "pcaFlags", &pca_animation_tag_flags },
		{ _field_long_integer, "PCA Animation Count" },
		{ _field_long_integer, "PCA Checksum" },
		FIELD_EXPLANATION("Imported Data", "imported data"),
		{ _field_block, "frame data", &pcaimportedframedatablock_block },
		{ _field_block, "mesh data", &pcaimportedmeshdatablock_block },
		FIELD_EXPLANATION("Resource Data", "vertex buffers"),
		{ _field_pageable_resource, "api resource", &render_geometry_api_resource_definition },
		{ _field_terminator }
	};

	TAG_REFERENCE(render_model_group_reference$6, RENDER_MODEL_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	STRINGS(pca_animation_tag_flags)
	{
		"lookup table ready",
		"resources generated",
		"resources committed"
	};
	STRING_LIST(pca_animation_tag_flags, pca_animation_tag_flags_strings, _countof(pca_animation_tag_flags_strings));

	#define PCA_COEFFICIENTS_RESOURCE_DEFINITION_STRUCT_ID { 0x53EAA5E8, 0x27D74A19, 0xB37E2E13, 0xA022F958 }
	TAG_STRUCT(
		pca_coefficients_resource_definition_struct,
		"pca_coefficients_resource_definition_struct",
		"pca_coefficients_resource_definition_struct",
		"s_pca_coefficients_resource_definition_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PCA_COEFFICIENTS_RESOURCE_DEFINITION_STRUCT_ID)
	{
		{ _field_data, "Coefficients", &pcacoefficientsdefinition },
		{ _field_terminator }
	};

	#define PER_INSTANCE_LIGHTMAP_TEXCOORDS_BLOCK_ID { 0xF880A4D0, 0xF9F848AE, 0x99B436D5, 0xC2C552E5 }
	TAG_STRUCT(
		per_instance_lightmap_texcoords_block,
		"per_instance_lightmap_texcoords_block",
		"per_instance_lightmap_texcoords_block",
		"s_per_instance_lightmap_texcoords_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PER_INSTANCE_LIGHTMAP_TEXCOORDS_BLOCK_ID)
	{
		{ _field_block, "texture coordinates", &raw_vertex_block_block },
		{ _field_block, "texture coordinates (concise)", &raw_texcoord_block_block },
		{ _field_short_integer, "vertex buffer index" },
		FIELD_PAD("HTJIAHA", 2),
		{ _field_terminator }
	};

	#define PER_INSTANCE_PRT_DATA_BLOCK_ID { 0x836CA33D, 0x37D944DB, 0xBBEFF22E, 0x6F5D159B }
	TAG_STRUCT(
		per_instance_prt_data_block,
		"per_instance_prt_data_block",
		"per_instance_prt_data_block",
		"s_per_instance_prt_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PER_INSTANCE_PRT_DATA_BLOCK_ID)
	{
		{ _field_data, "mesh pca data", &mesh_pca_data_definition },
		{ _field_terminator }
	};

	#define PER_MESH_NODE_MAP_BLOCK_ID { 0xC23B2003, 0x2AA6450C, 0x8B2497D9, 0x6C50810F }
	TAG_STRUCT(
		per_mesh_node_map_block,
		"per_mesh_node_map_block",
		"per_mesh_node_map_block",
		"s_per_mesh_node_map_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PER_MESH_NODE_MAP_BLOCK_ID)
	{
		{ _field_block, "node map", &node_map_byte_block_block },
		{ _field_terminator }
	};

	#define PER_MESH_PRT_DATA_BLOCK_ID { 0x7ECBA5AF, 0x689D4385, 0xBE237733, 0x820D7068 }
	TAG_STRUCT(
		per_mesh_prt_data_block,
		"per_mesh_prt_data_block",
		"per_mesh_prt_data_block",
		"s_per_mesh_prt_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PER_MESH_PRT_DATA_BLOCK_ID)
	{
		{ _field_data, "mesh pca data", &mesh_pca_data_definition },
		{ _field_block, "per instance prt data", &per_instance_prt_data_block_block },
		{ _field_terminator }
	};

	#define PER_MESH_RAW_DATA_BLOCK_ID { 0x52900AB0, 0x23054B64, 0xBA861C13, 0x2CC95C01 }
	TAG_STRUCT(
		per_mesh_raw_data_block,
		"per_mesh_raw_data_block",
		"per_mesh_raw_data_block",
		"s_per_mesh_raw_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PER_MESH_RAW_DATA_BLOCK_ID)
	{
		{ _field_block, "raw vertices", &raw_vertex_block_block },
		{ _field_block, "raw indices", &indices_word_block_block },
		{ _field_block, "raw indices32", &indices_dword_block_block },
		{ _field_block, "raw water data", &raw_water_block_block },
		{ _field_block, "raw imposter data", &raw_imposter_brdf_block_block },
		{ _field_block, "raw instance imposter verts", &raw_instance_imposter_block_block },
		{ _field_block, "raw blendshapes", &raw_blendshape_block_block },
		{ _field_long_integer, "per vertex lighting vertex size" },
		{ _field_short_integer, "parameterized texture width" },
		{ _field_short_integer, "parameterized texture height" },
		{ _field_long_flags, "flags", &per_mesh_raw_data_flags },
		{ _field_terminator }
	};

	STRINGS(per_mesh_raw_data_flags)
	{
		"indices are triangle strips",
		"indices are triangle lists",
		"indices are quad lists"
	};
	STRING_LIST(per_mesh_raw_data_flags, per_mesh_raw_data_flags_strings, _countof(per_mesh_raw_data_flags_strings));

	#define PER_MESH_SUBPART_VISIBILITY_BLOCK_ID { 0x6360432, 0x14BE47E0, 0x818AB223, 0xA6DB06A2 }
	TAG_STRUCT(
		per_mesh_subpart_visibility_block,
		"per_mesh_subpart_visibility_block",
		"per_mesh_subpart_visibility_block",
		"s_per_mesh_subpart_visibility_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PER_MESH_SUBPART_VISIBILITY_BLOCK_ID)
	{
		{ _field_block, "bounding_sphere", &sorting_position_block_block },
		{ _field_terminator }
	};

	#define PERFORMANCE_TEMPLATE_ACTOR_BLOCK_STRUCT_ID { 0x7B70E3B5, 0x7F8E4983, 0x8B995D0B, 0xE8E80DC7 }
	TAG_STRUCT(
		performance_template_actor_block_struct,
		"performance_template_actor_block_struct",
		"performance_template_actor_block_struct",
		"s_performance_template_actor_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERFORMANCE_TEMPLATE_ACTOR_BLOCK_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &scenario_performance_actor_flags_definition },
		{ _field_string_id, "Actor name" },
		{ _field_tag_reference, "Actor type", &character_group_reference$5 },
		{ _field_tag_reference, "Vehicle type", &vehicle_group_reference },
		{ _field_string_id, "Vehicle seat label" },
		{ _field_tag_reference, "Weapon type", &weapon_group_reference$7 },
		FIELD_PAD("pad0", 2),
		{ _field_short_block_index_custom_search, "Spawn Point", &custom_performance_template_point_block_index_definition },
		{ _field_terminator }
	};

	STRINGS(scenario_performance_actor_flags_definition)
	{
		"actor is critical"
	};
	STRING_LIST(scenario_performance_actor_flags_definition, scenario_performance_actor_flags_definition_strings, _countof(scenario_performance_actor_flags_definition_strings));

	TAG_REFERENCE(character_group_reference$5, CHARACTER_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	TAG_REFERENCE(vehicle_group_reference, VEHICLE_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	TAG_REFERENCE(weapon_group_reference$7, WEAPON_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define PERFORMANCE_TEMPLATE_BLOCK_STRUCT_ID { 0x75BA5372, 0x8E344209, 0x96284F55, 0x56AA1347 }
	TAG_STRUCT(
		performance_template_block_struct,
		"performance_template_block_struct",
		"performance_template_block_struct",
		"s_performance_template_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERFORMANCE_TEMPLATE_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "script name", "The name of a custom script used to drive the performance. If none is given, a default script is uses that goes through the lines in sequence" },
		{ _field_block, "Actors", &performance_template_actor_block_block },
		{ _field_block, "Lines", &scenario_performance_line_block_block },
		{ _field_block, "Points", &performance_template_point_block_block },
		{ _field_terminator }
	};

	#define PERFORMANCE_TEMPLATE_POINT_BLOCK_STRUCT_ID { 0x969B27EE, 0x95614149, 0x9EA14F37, 0x1AA14CB6 }
	TAG_STRUCT(
		performance_template_point_block_struct,
		"performance_template_point_block_struct",
		"performance_template_point_block_struct",
		"s_performance_template_point_block_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERFORMANCE_TEMPLATE_POINT_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "Point name" },
		{ _field_real_vector_3d, "Relative Position", "The offset of the performance point from the center of the performance" },
		{ _field_real_euler_angles_2d, "Relative Facing", "The facing at the point in the space of the performance" },
		{ _field_terminator }
	};

	#define PERFORMANCE_THROTTLES_STRUCT_DEFINITION_ID { 0x44A4563, 0x26134854, 0xA54E1DDE, 0x72F14803 }
	TAG_STRUCT(
		performance_throttles_struct_definition,
		"performance_throttles_struct_definition",
		"performance_throttles_struct_definition",
		"s_performance_throttles_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERFORMANCE_THROTTLES_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Performance Throttles", "Split-screen throttle settings should be more aggresive than non-local co-op settings\nblock index 0:\tdefault non split screen\nblock index 1: two way split screen\nblock index 2: three way split screen\nblock index 3: four way split screen\nblock index 4: one additional non-local player\nblock index 5: two additional non-local players\nblock index 6: three additional non-local players\n\n"),
		{ _field_block, "Performance Throttles", &performane_throttle_block_block },
		{ _field_terminator }
	};

	#define PERFORMANE_THROTTLE_BLOCK_ID { 0x85D15105, 0x8B6740B3, 0xA382FD88, 0xD1A37CE3 }
	TAG_STRUCT(
		performane_throttle_block,
		"performane_throttle_block",
		"performane_throttle_block",
		"s_performane_throttle_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERFORMANE_THROTTLE_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &performance_throttle_flags },
		{ _field_real, "water tessellation scale" },
		{ _field_real, "decorator fade dist scale", nullptr, "0 = off" },
		{ _field_real, "effect lod distance scale", MAKE_ALT_NAMES("effect lod limit") },
		FIELD_GROUP_BEGIN("Object settings"),
		{ _field_real, "instance fade modifier" },
		{ _field_real, "object fade modifier", "scales down the distances at which objects first imposter and then fade out" },
		{ _field_real, "object detail fade modifier" },
		{ _field_real, "object lighting time limit", "per frame time limit to spend sampling new lighting radiosity", "s 0=0.001s" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("IO settings"),
		{ _field_real, "IO fade modifier", "scales down the distances at which IOs imposter" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Dynamic light settings"),
		{ _field_long_integer, "max forward dynamic lights", "will quickly fade gpu lights when we try to render more than this many:0 = off", MAKE_ALT_NAMES("max gpu dynamic lights") },
		{ _field_real, "forward dynamic light fade distance scale", "scales the size used for distance-fade (set smaller to make it fade earlier)", MAKE_ALT_NAMES("gpu light fade distance scale") },
		{ _field_long_integer, "max screenspace dynamic lights", "will quickly fade screenspace lights when we try to render more than this many:0 = off" },
		{ _field_real, "screenspace light fade distance scale", "scales the size used for distance-fade (set smaller to make it fade earlier)" },
		{ _field_long_integer, "max effect lights (screenspace)", "limits the number of effect lights we allow to be active at a time (eg. needler needles lighting up objects):0 = off" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Shadow settings"),
		{ _field_long_integer, "max shadow casting objects", nullptr, "0 = off" },
		{ _field_real, "shadow quality lod", "scales resolution of object shadows:[0.0 to 1.0]" },
		{ _field_real, "floating shadow quality lod", "scales resolution of floating shadow:[0.0 to 1.0], 0 = off" },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(performance_throttle_flags)
	{
		"disable object attachment lights",
		"disable first person shadow",
		"disable cheap particles",
		"disable blob shadows",
		"disable patchy fog",
		"disable screen distortion",
		"disable light shafts",
		"disable first person depth of field",
		"disable motion blur",
		"disable particles continue offscreen",
		"disable light cones",
		"disable water interraction",
		"disable water refraction",
		"disable decorators",
		"disable instance occlusion queries#WARNING Will likely hurt perf on most maps"
	};
	STRING_LIST(performance_throttle_flags, performance_throttle_flags_strings, _countof(performance_throttle_flags_strings));

	#define PERMUTATIONS_BLOCK_ID { 0xB9073D8F, 0x99774226, 0x951F4436, 0x864FD834 }
	TAG_STRUCT(
		permutations_block,
		"permutations_block",
		"permutations_block",
		"s_permutations_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERMUTATIONS_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "rigid bodies", &rigid_body_indices_block_block },
		{ _field_terminator }
	};

	#define PGCR_DAMAGE_TYPE_IMAGE_BLOCK_ID { 0xA58519CD, 0xBDFA479A, 0xAD03CCFB, 0x836DF305 }
	TAG_STRUCT(
		pgcr_damage_type_image_block,
		"pgcr_damage_type_image_block",
		"pgcr_damage_type_image_block",
		"s_pgcr_damage_type_image_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PGCR_DAMAGE_TYPE_IMAGE_BLOCK_ID)
	{
		{ _field_long_enum, "damage type", &global_damage_reporting_enum_definition },
		{ _field_string_id, "display name" },
		{ _field_tag_reference, "sprite", &bitmap_group_reference$2 },
		{ _field_short_integer, "sprite index" },
		FIELD_PAD("pad0", 2),
		{ _field_terminator }
	};

	#define PGCR_DAMAGE_TYPE_IMAGE_MAPPING_DEFINITION_STRUCT_DEFINITION_ID { 0x1294C4E2, 0x1F1D4FBF, 0xAA479C98, 0xC6592582 }
	TAG_STRUCT(
		pgcr_damage_type_image_mapping_definition_struct_definition,
		"pgcr_damage_type_image_mapping_definition_struct_definition",
		"pgcr_damage_type_image_mapping_definition_struct_definition",
		"s_pgcr_damage_type_image_mapping_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PGCR_DAMAGE_TYPE_IMAGE_MAPPING_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "damage type mapping", &pgcr_damage_type_image_block_block },
		{ _field_terminator }
	};

	#define PGCR_ENEMY_TO_CATEGORY_ENTRY_BLOCK_ID { 0x27D7EA73, 0x810A49B9, 0x99464770, 0x298B605 }
	TAG_STRUCT(
		pgcr_enemy_to_category_entry_block,
		"pgcr_enemy_to_category_entry_block",
		"pgcr_enemy_to_category_entry_block",
		"s_pgcr_enemy_to_category_entry_block",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PGCR_ENEMY_TO_CATEGORY_ENTRY_BLOCK_ID)
	{
		{ _field_char_enum, "character type", &campaign_metagame_bucket_type_with_none_enum },
		{ _field_char_enum, "character class", &campaign_metagame_bucket_class_with_none_enum },
		FIELD_PAD("pad0", 2),
		{ _field_terminator }
	};

	STRINGS(campaign_metagame_bucket_type_with_none_enum)
	{
		"any",
		"brute",
		"grunt",
		"jackel",
		"skirmisher",
		"marine",
		"spartan",
		"bugger",
		"hunter",
		"flood_infection",
		"flood_carrier",
		"flood_combat",
		"flood_pure",
		"sentinel",
		"elite",
		"engineer",
		"mule",
		"turret",
		"mongoose",
		"warthog",
		"scorpion",
		"hornet",
		"pelican",
		"revenant",
		"seraph",
		"shade",
		"watchtower",
		"ghost",
		"chopper",
		"mauler",
		"wraith",
		"banshee",
		"phantom",
		"scarab",
		"guntower",
		"tuning_fork",
		"broadsword",
		"mammoth",
		"lich",
		"mantis",
		"wasp",
		"phaeton",
		"bishop",
		"knight",
		"pawn"
	};
	STRING_LIST(campaign_metagame_bucket_type_with_none_enum, campaign_metagame_bucket_type_with_none_enum_strings, _countof(campaign_metagame_bucket_type_with_none_enum_strings));

	STRINGS(campaign_metagame_bucket_class_with_none_enum)
	{
		"any",
		"infantry",
		"leader",
		"hero",
		"specialist",
		"light vehicle",
		"heavy vehicle",
		"giant vehicle",
		"standard vehicle"
	};
	STRING_LIST(campaign_metagame_bucket_class_with_none_enum, campaign_metagame_bucket_class_with_none_enum_strings, _countof(campaign_metagame_bucket_class_with_none_enum_strings));

	#define PGCR_ENEMY_TO_CATEGORY_LIST_BLOCK_ID { 0x13CB91F2, 0x8FA0486C, 0xAD93BA1A, 0x1A12334 }
	TAG_STRUCT(
		pgcr_enemy_to_category_list_block,
		"pgcr_enemy_to_category_list_block",
		"pgcr_enemy_to_category_list_block",
		"s_pgcr_enemy_to_category_list_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PGCR_ENEMY_TO_CATEGORY_LIST_BLOCK_ID)
	{
		{ _field_string_id, "category display name" },
		{ _field_short_integer, "sprite index" },
		{ _field_byte_flags, "flags", &pgcr_enemy_to_category_entry_flags },
		FIELD_PAD("pad0", 1),
		{ _field_block, "player types", &pgcr_player_to_category_entry_block_block },
		{ _field_block, "enemy types", &pgcr_enemy_to_category_entry_block_block },
		{ _field_terminator }
	};

	STRINGS(pgcr_enemy_to_category_entry_flags)
	{
		"category contains players"
	};
	STRING_LIST(pgcr_enemy_to_category_entry_flags, pgcr_enemy_to_category_entry_flags_strings, _countof(pgcr_enemy_to_category_entry_flags_strings));

	#define PGCR_ENEMY_TO_CATEGORY_MAPPING_DEFINITION_STRUCT_DEFINITION_ID { 0x21E13268, 0x65D94C93, 0xAF53E865, 0x3B4C8BFC }
	TAG_STRUCT(
		pgcr_enemy_to_category_mapping_definition_struct_definition,
		"pgcr_enemy_to_category_mapping_definition_struct_definition",
		"pgcr_enemy_to_category_mapping_definition_struct_definition",
		"s_pgcr_enemy_to_category_mapping_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PGCR_ENEMY_TO_CATEGORY_MAPPING_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "character categories", &pgcr_enemy_to_category_list_block_block },
		{ _field_block, "vehicle categories", &pgcr_enemy_to_category_list_block_block },
		{ _field_terminator }
	};

	#define PGCR_INCIDENT_BLOCK_STRUCT_ID { 0x177FA8B3, 0xD2614622, 0xBBDF9F2E, 0xC598B9 }
	TAG_STRUCT(
		pgcr_incident_block_struct,
		"pgcr_incident_block_struct",
		"pgcr_incident_block_struct",
		"s_pgcr_incident_block_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PGCR_INCIDENT_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "incident name" },
		{ _field_long_integer, "maximum stat count", "number of times this can happen before the PGCR stops tracking them" },
		{ _field_terminator }
	};

	#define PGCR_PLAYER_TO_CATEGORY_ENTRY_BLOCK_ID { 0xB6D21071, 0xD5C44DA8, 0xA2F448A1, 0xAC68E5A2 }
	TAG_STRUCT(
		pgcr_player_to_category_entry_block,
		"pgcr_player_to_category_entry_block",
		"pgcr_player_to_category_entry_block",
		"s_pgcr_player_to_category_entry_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PGCR_PLAYER_TO_CATEGORY_ENTRY_BLOCK_ID)
	{
		{ _field_char_enum, "player type", &pgcr_player_type_enum },
		FIELD_PAD("pad0", 3),
		{ _field_terminator }
	};

	STRINGS(pgcr_player_type_enum)
	{
		"UNSC",
		"Covenant"
	};
	STRING_LIST(pgcr_player_type_enum, pgcr_player_type_enum_strings, _countof(pgcr_player_type_enum_strings));

	#define PHANTOM_TYPES_BLOCK_STRUCT_ID { 0xF2904025, 0x298545D0, 0x9C80A4E1, 0xCA6BA6FE }
	TAG_STRUCT(
		phantom_types_block_struct,
		"phantom_types_block_struct",
		"phantom_types_block_struct",
		"s_phantom_types_block_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHANTOM_TYPES_BLOCK_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &phantomflagsv2 },
		{ _field_real, "brittle timer", "objects in this phantom volume will be set to brittle collision damage for this amount of time.", "seconds" },
		{ _field_char_enum, "minimum size", &rigid_body_size_enum },
		{ _field_char_enum, "maximum size", &rigid_body_size_enum },
		FIELD_PAD("OF", 2),
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name", "you don't need this if you're just generating effects.  If empty it defaults to the up of the object" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "alignment marker name", "you don't need this if you're just generating effects.  If empty it defaults to \"marker name\"" },
		FIELD_EXPLANATION("Linear Motion", "0 - means do nothing\nCENTER: motion towards marker position \nAXIS: motion towards marker axis, such that object is on the axis\nDIRECTION: motion along marker direction"),
		FIELD_PAD("WTBFO", 8),
		{ _field_real, "hookes law e", "0 if you don't want this to behave like spring.  1 is a good starting point if you do." },
		{ _field_real, "linear dead radius", "radius from linear motion origin in which acceleration is dead." },
		{ _field_real, "center acc" },
		{ _field_real, "center max vel" },
		{ _field_real, "axis acc" },
		{ _field_real, "axis max vel" },
		{ _field_real, "direction acc" },
		{ _field_real, "direction max vel" },
		{ _field_real, "orbit acc", "negative values spin the opposite direction from positive ones" },
		{ _field_real, "orbit max vel" },
		FIELD_PAD("TF", 28),
		FIELD_EXPLANATION("Angular Motion", "0 - means do nothing\nALIGNMENT: algin objects in the phantom with the marker\nSPIN: spin the object about the marker axis"),
		{ _field_real, "alignment hookes law e", "0 if you don't want this to behave like spring.  1 is a good starting point if you do." },
		{ _field_real, "alignment acc" },
		{ _field_real, "alignment max vel" },
		FIELD_PAD("TYXJL", 8),
		{ _field_terminator }
	};

	STRINGS(phantomflagsv2)
	{
		"UNUSED",
		"use acc as force",
		"negates gravity",
		"ignores players",
		"ignores nonplayers",
		"ignores bipeds",
		"ignores vehicles",
		"ignores weapons",
		"ignores equipment",
		"ignores projectiles",
		"ignores scenery",
		"ignores devices",
		"ignores crates",
		"ignores creatures",
		"ignores giants",
		"ignores spawners",
		"ignores mechs",
		"ignores team objects",
		"smart directional acceleration",
		"ignores grounded bipeds",
		"localizes physics",
		"disable linear damping",
		"disable angular damping",
		"ignores dead bipeds",
		"ignores live bipeds",
		"reciprocal acc",
		"reciprocal acc ONLY",
		"latching disabled",
		"mirrored axis",
		"activate ragdolls",
		"ignores forge editor"
	};
	STRING_LIST(phantomflagsv2, phantomflagsv2_strings, _countof(phantomflagsv2_strings));

	STRINGS(rigid_body_size_enum)
	{
		"default",
		"tiny",
		"small",
		"medium",
		"large",
		"huge",
		"extra huge"
	};
	STRING_LIST(rigid_body_size_enum, rigid_body_size_enum_strings, _countof(rigid_body_size_enum_strings));

	#define PHANTOMS_BLOCK_STRUCT_ID { 0x9825B672, 0xFCDE4371, 0xA3E1D01A, 0xC83E8BD0 }
	TAG_STRUCT(
		phantoms_block_struct,
		"phantoms_block_struct",
		"phantoms_block_struct",
		"s_phantoms_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHANTOMS_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "bv shape", &havok_shape_struct },
		{ _field_struct, "havok shape reference struct1", &havok_shape_reference_struct },
		{ _field_long_integer, "field pointer skip", _field_id_zero_data },
		{ _field_long_integer, "child shape pointer", _field_id_zero_data },
		{ _field_struct, "phantom shape", &havok_shape_struct },
		{ _field_terminator }
	};

	#define PHYSICS_FORCE_FUNCTION_STRUCT_ID { 0xC5E705F1, 0xAA0C4E01, 0x981B4053, 0x44CC22DC }
	TAG_STRUCT(
		physics_force_function_struct,
		"physics_force_function_struct",
		"physics_force_function_struct",
		"s_physics_force_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHYSICS_FORCE_FUNCTION_STRUCT_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "velocity to pressure", &mapping_function }, // structure_version:2
		{ _field_real, "max velocity", nullptr, "wu/s" },
		{ _field_terminator }
	};

	#define PHYSICS_MODEL_CONSTRAINT_EDGE_CONSTRAINT_BLOCK_ID { 0x47C5C654, 0x707F4F7B, 0x956BA9B5, 0xAC3E2279 }
	TAG_STRUCT(
		physics_model_constraint_edge_constraint_block,
		"physics_model_constraint_edge_constraint_block",
		"physics_model_constraint_edge_constraint_block",
		"s_physics_model_constraint_edge_constraint_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHYSICS_MODEL_CONSTRAINT_EDGE_CONSTRAINT_BLOCK_ID)
	{
		{ _field_short_enum, "type", &rigid_constraint_types_enum },
		{ _field_short_block_index_custom_search, "index", &custom_constraint_reference_block_index_definition },
		{ _field_long_flags, "flags", &rigid_body_constraint_edge_constraint_flags_definition },
		{ _field_real, "friction", "0 is the default (takes what it was set in max) anything else overrides that value" },
		{ _field_block, "ragdoll motors", &physics_model_ragdoll_motors_block_block },
		{ _field_block, "limited hinge motors", &physics_model_limited_hinge_motors_block_block },
		{ _field_terminator }
	};

	STRINGS(rigid_constraint_types_enum)
	{
		"hinge",
		"limited hinge",
		"ragdoll",
		"stiff spring",
		"ball and socket",
		"prismatic",
		"powered chain"
	};
	STRING_LIST(rigid_constraint_types_enum, rigid_constraint_types_enum_strings, _countof(rigid_constraint_types_enum_strings));

	STRINGS(rigid_body_constraint_edge_constraint_flags_definition)
	{
		"is physical child#this constraint will only be created when this object is a child of another physical object (turrets on vehicles for example)",
		"is rigid#this constraint makes the edge rigid until it is loosened by damage",
		"disable effects#this constraint will not generate impact effects",
		"not created automatically#this flag is used for special systems that need to create constraints dynamically"
	};
	STRING_LIST(rigid_body_constraint_edge_constraint_flags_definition, rigid_body_constraint_edge_constraint_flags_definition_strings, _countof(rigid_body_constraint_edge_constraint_flags_definition_strings));

	#define PHYSICS_MODEL_DAMPED_SPRING_MOTOR_BLOCK_ID { 0x60496061, 0xD264415C, 0xAF53227C, 0x68D09DA9 }
	TAG_STRUCT(
		physics_model_damped_spring_motor_block,
		"physics_model_damped_spring_motor_block",
		"physics_model_damped_spring_motor_block",
		"s_physics_model_damped_spring_motor_block",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHYSICS_MODEL_DAMPED_SPRING_MOTOR_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_real, "maximum force", "0 defaults to k_real_max" },
		{ _field_real, "minimum force", "0 defaults to maximum force.  In general you should leave this alone unless working on ragdolls or something like them" },
		{ _field_real, "spring k" },
		{ _field_real, "damping", "0 means default daming of 1.0f" },
		{ _field_real, "initial position" },
		{ _field_terminator }
	};

	#define PHYSICS_MODEL_LIMITED_HINGE_MOTORS_BLOCK_ID { 0xB4F83810, 0x94E14E38, 0x95347376, 0xA5785B3A }
	TAG_STRUCT(
		physics_model_limited_hinge_motors_block,
		"physics_model_limited_hinge_motors_block",
		"physics_model_limited_hinge_motors_block",
		"s_physics_model_limited_hinge_motors_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHYSICS_MODEL_LIMITED_HINGE_MOTORS_BLOCK_ID)
	{
		{ _field_struct, "motor", &physics_model_motor_reference_struct },
		{ _field_terminator }
	};

	#define PHYSICS_MODEL_MOTOR_REFERENCE_STRUCT_ID { 0xAB7B559D, 0xD744412, 0x84CDF67A, 0x370BCC34 }
	TAG_STRUCT(
		physics_model_motor_reference_struct,
		"physics_model_motor_reference_struct",
		"physics_model_motor_reference_struct",
		"s_physics_model_motor_reference_struct",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHYSICS_MODEL_MOTOR_REFERENCE_STRUCT_ID)
	{
		{ _field_short_enum, "motor type", &physics_model_motor_types_enum },
		{ _field_short_block_index_custom_search, "index", &custom_physics_model_motor_reference_block_index_definition },
		{ _field_terminator }
	};

	STRINGS(physics_model_motor_types_enum)
	{
		"none",
		"damped spring",
		"stongest force"
	};
	STRING_LIST(physics_model_motor_types_enum, physics_model_motor_types_enum_strings, _countof(physics_model_motor_types_enum_strings));

	#define PHYSICS_MODEL_NODE_CONSTRAINT_EDGE_BLOCK_ID { 0x1E831F9B, 0x155146A0, 0x9A054B86, 0x462C1033 }
	TAG_STRUCT(
		physics_model_node_constraint_edge_block,
		"physics_model_node_constraint_edge_block",
		"physics_model_node_constraint_edge_block",
		"s_physics_model_node_constraint_edge_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHYSICS_MODEL_NODE_CONSTRAINT_EDGE_BLOCK_ID)
	{
		{ _field_short_integer, "runtime material type a" },
		{ _field_short_integer, "runtime material type b" },
		{ _field_short_block_index, "node a", &nodes_block_block },
		{ _field_short_block_index, "node b", &nodes_block_block },
		{ _field_block, "constraints", &physics_model_constraint_edge_constraint_block_block },
		{ _field_string_id, "node a material", "if you don't fill this out we will pluck the material from the first primitive, of the first rigid body attached to node a" },
		{ _field_string_id, "node b material", "if you don't fill this out we will pluck the material from the first primitive, of the first rigid body attached to node b, if node b is none we use whatever material a has" },
		{ _field_terminator }
	};

	#define PHYSICS_MODEL_POSITION_MOTOR_BLOCK_ID { 0xC0C65573, 0xE34244CE, 0xBFDAC94B, 0xF92ECE8C }
	TAG_STRUCT(
		physics_model_position_motor_block,
		"physics_model_position_motor_block",
		"physics_model_position_motor_block",
		"s_physics_model_position_motor_block",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHYSICS_MODEL_POSITION_MOTOR_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_real, "maximum force" },
		{ _field_real, "minimum force", "0 defaults to maximum force.  In general you should leave this alone unless working on ragdolls or something like them" },
		{ _field_real, "tau", "from 0-1.  relative stiffness" },
		{ _field_real, "damping", "from 0-1" },
		{ _field_real, "proportion recover vel", "fraction of recover velocity used.  0 defaults to 1" },
		{ _field_real, "consant recover vel", "velocity used to recover when errors happen.  in degress per second" },
		{ _field_real, "initial position" },
		{ _field_terminator }
	};

	#define PHYSICS_MODEL_POWERED_CHAIN_CONSTRAINTS_BLOCK_ID { 0xBB331F9B, 0x1CEF4AA0, 0xA354B86, 0x462AEBB3 }
	TAG_STRUCT(
		physics_model_powered_chain_constraints_block,
		"physics_model_powered_chain_constraints_block",
		"physics_model_powered_chain_constraints_block",
		"s_physics_model_powered_chain_constraints_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHYSICS_MODEL_POWERED_CHAIN_CONSTRAINTS_BLOCK_ID)
	{
		{ _field_short_enum, "constraint type", &rigid_constraint_types_enum },
		{ _field_short_block_index_custom_search, "constraint index", &custom_powered_chain_constraint_reference_block_index_definition },
		{ _field_struct, "motor x", &physics_model_motor_reference_struct },
		{ _field_struct, "motor y", &physics_model_motor_reference_struct },
		{ _field_struct, "motor z", &physics_model_motor_reference_struct },
		{ _field_terminator }
	};

	#define PHYSICS_MODEL_POWERED_CHAIN_NODES_BLOCK_ID { 0xBBC31F9B, 0x1DEF4AA0, 0x2354B86, 0x462AEBA3 }
	TAG_STRUCT(
		physics_model_powered_chain_nodes_block,
		"physics_model_powered_chain_nodes_block",
		"physics_model_powered_chain_nodes_block",
		"s_physics_model_powered_chain_nodes_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHYSICS_MODEL_POWERED_CHAIN_NODES_BLOCK_ID)
	{
		{ _field_short_block_index, "node", &nodes_block_block },
		{ _field_terminator }
	};

	#define PHYSICS_MODEL_POWERED_CHAINS_BLOCK_ID { 0xABC31F9B, 0x1DEF46A0, 0x12354B86, 0x462CEBA3 }
	TAG_STRUCT(
		physics_model_powered_chains_block,
		"physics_model_powered_chains_block",
		"physics_model_powered_chains_block",
		"s_physics_model_powered_chains_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHYSICS_MODEL_POWERED_CHAINS_BLOCK_ID)
	{
		{ _field_block, "nodes", &physics_model_powered_chain_nodes_block_block },
		{ _field_block, "constraints", &physics_model_powered_chain_constraints_block_block },
		{ _field_terminator }
	};

	#define PHYSICS_MODEL_RAGDOLL_MOTORS_BLOCK_ID { 0x62A96AB5, 0x48164E64, 0xA529F07B, 0x62FA3B40 }
	TAG_STRUCT(
		physics_model_ragdoll_motors_block,
		"physics_model_ragdoll_motors_block",
		"physics_model_ragdoll_motors_block",
		"s_physics_model_ragdoll_motors_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHYSICS_MODEL_RAGDOLL_MOTORS_BLOCK_ID)
	{
		FIELD_EXPLANATION("twist", nullptr),
		{ _field_struct, "twist motor", &physics_model_motor_reference_struct },
		FIELD_EXPLANATION("cone", nullptr),
		{ _field_struct, "cone motor", &physics_model_motor_reference_struct },
		FIELD_EXPLANATION("plane", nullptr),
		{ _field_struct, "plane motor", &physics_model_motor_reference_struct },
		{ _field_terminator }
	};

	#define PHYSICS_MODEL_STRUCT_DEFINITION_ID { 0xB3439E17, 0xDDD4542, 0xB8B59423, 0x9665EE90 }
	VERSIONED_TAG_STRUCT(
		physics_model_struct_definition,
		"physics_model_struct_definition",
		"physics_model_struct_definition",
		"s_physics_model_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHYSICS_MODEL_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 3, 41 },
		{ _field_long_flags, "flags", &physics_model_flags },
		{ _field_real, "mass scale", "scales the mass of each rigid body.  If you leave this field as 0, then it will be calculated from the total mass below." },
		{ _field_real, "mass", "override total mass of all rigid bodies.  Note that this will NOT be the mass of the object if not all rigid bodies are present (for example if you are using permutations)\nIf you set a mass scale above, this field is unused." },
		{ _field_real, "low freq. deactivation scale", "0 is default (1). LESS than 1 deactivates less aggressively. GREATER than 1 is more agressive." },
		{ _field_real, "high freq. deactivation scale", "0 is default (1). LESS than 1 deactivates less aggressively. GREATER than 1 is more agressive." },
		{ _field_real, "custom shape radius", "0 defaults to .016.  This field is intentionally hidden because we should only alter this for very special situations.  Lower number == lower performance" },
		{ _field_real, "maximum penetration depth scale", "0 is default (1). for objects that are prone to falling through the world we can reduce this number at the cost of performance" },
		{ _field_char_integer, "import version" },
		FIELD_PAD("pad0", 3),
		{ _field_block, "damped spring motors", &physics_model_damped_spring_motor_block_block },
		{ _field_block, "position motors", &physics_model_position_motor_block_block },
		{ _field_block, "phantom types", &phantom_types_block_block },
		{ _field_block, "powered chains", &physics_model_powered_chains_block_block },
		{ _field_block, "node edges", &physics_model_node_constraint_edge_block_block },
		{ _field_block, "rigid bodies", &rigid_bodies_block_block },
		{ _field_block, "materials", &materials_block_block },
		{ _field_block, "spheres", &spheres_block_block },
		{ _field_block, "multi spheres", &multi_spheres_block_block },
		{ _field_block, "pills", &pills_block_block },
		{ _field_block, "boxes", &boxes_block_block },
		{ _field_block, "triangles", &triangles_block_block },
		{ _field_block, "polyhedra", &polyhedra_block_block },
		{ _field_block, "polyhedron four vectors", &polyhedron_four_vectors_block_block },
		{ _field_block, "polyhedron plane equations", &polyhedron_plane_equations_block_block },
		{ _field_block, "mass distributions", &mass_distributions_block_block },
		{ _field_block, "lists", &lists_block_block },
		{ _field_block, "list shapes", &list_shapes_block_block },
		{ _field_block, "mopps", &mopps_block_block },
		{ _field_data, "mopp codes", &mopp_code_data_definition },
		{ _field_block, "hinge constraints", &hinge_constraints_block_block },
		{ _field_block, "ragdoll constraints", &ragdoll_constraints_block_block },
		{ _field_block, "regions", &regions_block_block },
		{ _field_block, "nodes", &nodes_block_block },
		{ _field_block, "errors", &global_error_report_categories_block_block },
		{ _field_block, "point to path curves", &point_to_path_curve_block_block },
		{ _field_block, "limited hinge constraints", &limited_hinge_constraints_block_block },
		{ _field_block, "ball and socket constraints", &ball_and_socket_constraints_block_block },
		{ _field_block, "stiff spring constraints", &stiff_spring_constraints_block_block },
		{ _field_block, "prismatic constraints", &prismatic_constraints_block_block },
		{ _field_block, "phantoms", &phantoms_block_block },
		{ _field_block, "RigidBody Serialized Shapes", &rigidbodyserializedshapesblock_block },
		
		{ _struct_version_mode_equal, 2, 40 },
		{ _field_long_flags, "flags", &physics_model_flags },
		{ _field_real, "mass scale" },
		{ _field_real, "mass" },
		{ _field_real, "low freq. deactivation scale", "0 is default (1). LESS than 1 deactivates less aggressively. GREATER than 1 is more agressive." },
		{ _field_real, "high freq. deactivation scale", "0 is default (1). LESS than 1 deactivates less aggressively. GREATER than 1 is more agressive." },
		{ _field_real, "custom shape radius", "0 defaults to .016.  This field is intentionally hidden because we should only alter this for very special situations.  Lower number == lower performance\nThis is used by the importer - if you change it you need to reimport to see the effects" },
		{ _field_real, "maximum penetration depth scale", "0 is default (1). for objects that are prone to falling through the world we can reduce this number at the cost of performance" },
		{ _field_char_integer, "import version" },
		FIELD_PAD("pad0", 3),
		{ _field_block, "damped spring motors", &physics_model_damped_spring_motor_block_block },
		{ _field_block, "position motors", &physics_model_position_motor_block_block },
		{ _field_block, "phantom types", &phantom_types_block_block },
		{ _field_block, "powered chains", &physics_model_powered_chains_block_block },
		{ _field_block, "node edges", &physics_model_node_constraint_edge_block_block },
		{ _field_block, "rigid bodies", &rigid_bodies_block_block },
		{ _field_block, "materials", &materials_block_block },
		{ _field_block, "spheres", &spheres_block_block },
		{ _field_block, "multi spheres", &multi_spheres_block_block },
		{ _field_block, "pills", &pills_block_block },
		{ _field_block, "boxes", &boxes_block_block },
		{ _field_block, "triangles", &triangles_block_block },
		{ _field_block, "polyhedra", &havok2_polyhedra_block_block },
		{ _field_block, "polyhedron four vectors", &polyhedron_four_vectors_block_block },
		{ _field_block, "polyhedron plane equations", &polyhedron_plane_equations_block_block },
		{ _field_block, "mass distributions", &mass_distributions_block_block },
		{ _field_block, "lists", &havok2_lists_block_block },
		{ _field_block, "list shapes", &list_shapes_block_block },
		{ _field_block, "mopps", &mopps_block_block },
		{ _field_data, "mopp codes", &mopp_code_data_definition },
		{ _field_block, "hinge constraints", &hinge_constraints_block_block },
		{ _field_block, "ragdoll constraints", &ragdoll_constraints_block_block },
		{ _field_block, "regions", &regions_block_block },
		{ _field_block, "nodes", &nodes_block_block },
		{ _field_block, "errors", &global_error_report_categories_block_block },
		{ _field_block, "point to path curves", &point_to_path_curve_block_block },
		{ _field_block, "limited hinge constraints", &limited_hinge_constraints_block_block },
		{ _field_block, "ball and socket constraints", &ball_and_socket_constraints_block_block },
		{ _field_block, "stiff spring constraints", &stiff_spring_constraints_block_block },
		{ _field_block, "prismatic constraints", &prismatic_constraints_block_block },
		{ _field_block, "phantoms", &phantoms_block_block },
		
		{ _struct_version_mode_equal, 1, 40 },
		{ _field_long_flags, "flags", &physics_model_flags },
		{ _field_real, "mass scale" },
		{ _field_real, "mass" },
		{ _field_real, "low freq. deactivation scale", "0 is default (1). LESS than 1 deactivates less aggressively. GREATER than 1 is more agressive." },
		{ _field_real, "high freq. deactivation scale", "0 is default (1). LESS than 1 deactivates less aggressively. GREATER than 1 is more agressive." },
		{ _field_real, "custom shape radius", "0 defaults to .016.  This field is intentionally hidden because we should only alter this for very special situations.  Lower number == lower performance\nThis is used by the importer - if you change it you need to reimport to see the effects" },
		{ _field_real, "maximum penetration depth scale", "0 is default (1). for objects that are prone to falling through the world we can reduce this number at the cost of performance" },
		{ _field_char_integer, "import version" },
		FIELD_PAD("pad0", 3),
		{ _field_block, "damped spring motors", &physics_model_damped_spring_motor_block_block },
		{ _field_block, "position motors", &physics_model_position_motor_block_block },
		{ _field_block, "phantom types", &phantom_types_block_block },
		{ _field_block, "powered chains", &physics_model_powered_chains_block_block },
		{ _field_block, "node edges", &physics_model_node_constraint_edge_block_block },
		{ _field_block, "rigid bodies", &rigid_bodies_block_block },
		{ _field_block, "materials", &materials_block_block },
		{ _field_block, "spheres", &spheres_block_block },
		{ _field_block, "multi spheres", &multi_spheres_block_block },
		{ _field_block, "pills", &pills_block_block },
		{ _field_block, "boxes", &boxes_block_block },
		{ _field_block, "triangles", &triangles_block_block },
		{ _field_block, "polyhedra", &havok2_polyhedra_block_block },
		{ _field_block, "polyhedron four vectors", &polyhedron_four_vectors_block_block },
		{ _field_block, "polyhedron plane equations", &polyhedron_plane_equations_block_block },
		{ _field_block, "mass distributions", &mass_distributions_block_block },
		{ _field_block, "lists", &havok2_lists_block_block },
		{ _field_block, "list shapes", &list_shapes_block_block },
		{ _field_block, "mopps", &mopps_block_block },
		{ _field_data, "mopp codes", &mopp_code_data_definition },
		{ _field_block, "hinge constraints", &hinge_constraints_block_block },
		{ _field_block, "ragdoll constraints", &ragdoll_constraints_block_block },
		{ _field_block, "regions", &regions_block_block },
		{ _field_block, "nodes", &nodes_block_block },
		{ _field_block, "errors", &global_error_report_categories_block_block },
		{ _field_block, "point to path curves", &point_to_path_curve_block_block },
		{ _field_block, "limited hinge constraints", &limited_hinge_constraints_block_block },
		{ _field_block, "ball and socket constraints", &ball_and_socket_constraints_block_block },
		{ _field_block, "stiff spring constraints", &stiff_spring_constraints_block_block },
		{ _field_block, "prismatic constraints", &prismatic_constraints_block_block },
		{ _field_block, "phantoms", &phantoms_block_block },
		
		{ _struct_version_mode_equal, 0, 23 },
		{ _field_long_flags, "flags", &physics_model_flags },
		{ _field_real, "mass" },
		FIELD_PAD("FPW", 56),
		{ _field_block, "rigid bodies", &rigid_bodies_block_block },
		{ _field_block, "materials", &materials_block_block },
		{ _field_block, "spheres", &spheres_block_block },
		{ _field_block, "pills", &pills_block_block },
		{ _field_block, "boxes", &boxes_block_block },
		{ _field_block, "triangles", &triangles_block_block },
		{ _field_block, "polyhedra", &havok2_polyhedra_block_block },
		{ _field_block, "polyhedron four vectors", &polyhedron_four_vectors_block_block },
		{ _field_block, "polyhedron plane equations", &polyhedron_plane_equations_block_block },
		{ _field_block, "mass distributions", &mass_distributions_block_block },
		{ _field_block, "lists", &havok2_lists_block_block },
		{ _field_block, "list shapes", &list_shapes_block_block },
		{ _field_block, "mopps", &mopps_block_block },
		{ _field_data, "mopp codes", &mopp_code_data_definition },
		{ _field_block, "hinge constraints", &hinge_constraints_block_block },
		{ _field_block, "ragdoll constraints", &ragdoll_constraints_block_block },
		{ _field_block, "regions", &regions_block_block },
		{ _field_block, "nodes", &nodes_block_block },
		{ _field_block, "REMOVE ME", &g_null_block_block },
		{ _field_block, "errors", &global_error_report_categories_block_block },
		
		{ _field_terminator }
	};

	STRINGS(physics_model_flags)
	{
		"mopp codes dirty*!",
		"serialized havok data converted to target platform!*",
		"make physical children keyframed",
		"shrink radius by havok complex radius"
	};
	STRING_LIST(physics_model_flags, physics_model_flags_strings, _countof(physics_model_flags_strings));

	#define PHYSICS_TRANSITIONS_BLOCK_ID { 0x16FD6B96, 0xFCF44A90, 0x8475A4B0, 0x61B5C28B }
	TAG_STRUCT(
		physics_transitions_block,
		"physics_transitions_block",
		"physics_transitions_block",
		"s_physics_transitions_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PHYSICS_TRANSITIONS_BLOCK_ID)
	{
		{ _field_real, "transition velocity", "speed at which flight model transition occurs", "wu/s" },
		{ _field_real, "velocity threshold side", "0 if velocity should be smaller than transition value, else 1", "0 or 1" },
		{ _field_real, "transition throttle", "throttle input at which physics model transition occurs", "-1 to 1" },
		{ _field_real, "throttle threshold side", "0 if throttle should be smaller than transition value, else 1", "0 or 1" },
		{ _field_char_enum, "transition target vehicle type", "upon reaching transition velocity, act like this vehicle type", &vehicle_type_enum },
		FIELD_PAD("pad after transition target vehicle type", 3),
		{ _field_terminator }
	};

	STRINGS(vehicle_type_enum)
	{
		"vehicle_type_human_tank",
		"vehicle_type_human_jeep",
		"vehicle_type_human_plane",
		"vehicle_type_wolverine",
		"vehicle_type_alien_scout",
		"vehicle_type_alien_fighter",
		"vehicle_type_turret",
		"vehicle_type_mantis",
		"vehicle_type_vtol",
		"vehicle_type_chopper",
		"vehicle_type_guardian",
		"vehicle_type_jackal_glider",
		"vehicle_type_boat",
		"vehicle_type_space_fighter",
		"vehicle_type_revenant"
	};
	STRING_LIST(vehicle_type_enum, vehicle_type_enum_strings, _countof(vehicle_type_enum_strings));

	#define PILLS_BLOCK_STRUCT_ID { 0xE2750B3, 0x8BBA4B7F, 0xADA773AF, 0x644AD79A }
	TAG_STRUCT(
		pills_block_struct,
		"pills_block_struct",
		"pills_block_struct",
		"s_pills_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PILLS_BLOCK_STRUCT_ID,
		4)
	{
		{ _field_struct, "base", &havok_primitive_struct },
		{ _field_struct, "capsule shape", &havok_convex_shape_struct },
		FIELD_PAD("algn243", 12),
		{ _field_real_vector_3d, "bottom" },
		{ _field_real, "havok w bottom" },
		{ _field_real_vector_3d, "top" },
		{ _field_real, "havok w top" },
		{ _field_terminator }
	};

	#define PIXEL_ENTRY_POINT_BLOCK_ID { 0x1E202E95, 0x6BA407D, 0x9B57749D, 0xC19E5EF2 }
	TAG_STRUCT(
		pixel_entry_point_block,
		"pixel_entry_point_block",
		"pixel_entry_point_block",
		"s_pixel_entry_point_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PIXEL_ENTRY_POINT_BLOCK_ID)
	{
		{ _field_byte_integer, "start index" },
		{ _field_byte_integer, "count" },
		{ _field_terminator }
	};

	#define PIXEL_SHADER_BLOCK_STRUCT_ID { 0xA0282D19, 0x14CF4500, 0xBB7ADB22, 0x40C57D44 }
	TAG_STRUCT(
		pixel_shader_block_struct,
		"pixel_shader_block_struct",
		"pixel_shader_block_struct",
		"s_pixel_shader_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PIXEL_SHADER_BLOCK_STRUCT_ID)
	{
		{ _field_block, "entry points", &pixel_entry_point_block_block },
		{ _field_dword_integer, "version" },
		{ _field_block, "compiled shaders", &compiled_pixel_shader_block_block },
		{ _field_terminator }
	};

	#define PLANAR_FOG_CLUSTER_VISIBILITY_DEFINITION_BLOCK_ID { 0x359AA341, 0x6A39AC4D, 0xB036CD9A, 0xAB6EA046 }
	TAG_STRUCT(
		planar_fog_cluster_visibility_definition_block,
		"planar_fog_cluster_visibility_definition_block",
		"planar_fog_cluster_visibility_definition_block",
		"s_planar_fog_cluster_visibility_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLANAR_FOG_CLUSTER_VISIBILITY_DEFINITION_BLOCK_ID)
	{
		{ _field_block, "attached fogs", &planar_fog_reference_definition_block_block },
		{ _field_terminator }
	};

	#define PLANAR_FOG_DEFINITION_BLOCK_ID { 0x35629341, 0x62394A4D, 0xBC854D9A, 0x946EE346 }
	TAG_STRUCT(
		planar_fog_definition_block,
		"planar_fog_definition_block",
		"planar_fog_definition_block",
		"s_planar_fog_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLANAR_FOG_DEFINITION_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_tag_reference, "appearance settings", &planar_fog_parameters_group_reference },
		{ _field_block, "vertices", &planar_fog_vertex_block_block },
		{ _field_block, "triangles", &planar_fog_triangle_block_block },
		{ _field_real, "depth" },
		{ _field_real_vector_3d, "normal" },
		{ _field_terminator }
	};

	TAG_REFERENCE(planar_fog_parameters_group_reference, PLANAR_FOG_PARAMETERS_TAG);

	#define PLANAR_FOG_PARAMETERS_STRUCT_DEFINITION_ID { 0x9E9FE02A, 0x81DC4FFC, 0x9D107ADB, 0xFF0BCF4 }
	TAG_STRUCT(
		planar_fog_parameters_struct_definition,
		"planar_fog_parameters_struct_definition",
		"planar_fog_parameters_struct_definition",
		"s_planar_fog_parameters_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLANAR_FOG_PARAMETERS_STRUCT_DEFINITION_ID)
	{
		{ _field_word_flags, "flags", &planar_fog_flags },
		FIELD_PAD("ABCDadf", 2),
		{ _field_real, "fog thickness" },
		{ _field_real, "per-vertex fog thickness modulation", nullptr, "(only for transparents)" },
		{ _field_real, "full fog depth", nullptr, "world units" },
		{ _field_real_rgb_color, "fog color" },
		{ _field_real, "fog color intensity" },
		{ _field_tag_reference, "palette texture", &bitmap_group_reference$2 },
		FIELD_GROUP_BEGIN("patchy effect"),
		{ _field_tag_reference, "patchy texture", &bitmap_group_reference$2 },
		{ _field_real_rgb_color, "patchy color" },
		{ _field_real, "patchy color intensity" },
		{ _field_real, "patchy texture tile size", nullptr, "world units" },
		{ _field_real, "patchy distance between sheets", nullptr, "world units" },
		{ _field_real, "patchy z-buffer fade factor" },
		{ _field_real, "patchy distance falloff start", nullptr, "world units" },
		{ _field_real, "patchy distance falloff power", nullptr, "world units" },
		{ _field_real, "patchy density" },
		{ _field_real, "patchy surface depth", nullptr, "world units" },
		{ _field_real, "patchy fade range", nullptr, "world units" },
		{ _field_real_vector_3d, "patchy wind direction", nullptr, "world units" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("LoD settings (N/A yet)"),
		{ _field_real, "max fog draw distance", nullptr, "world units" },
		{ _field_real, "patchy fade start distance", nullptr, "world units" },
		{ _field_real, "patchy fade end distance", nullptr, "world units" },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(planar_fog_flags)
	{
		"enable patchy effect",
		"enable color palette",
		"enable alpha palette",
		"render only"
	};
	STRING_LIST(planar_fog_flags, planar_fog_flags_strings, _countof(planar_fog_flags_strings));

	#define PLANAR_FOG_REFERENCE_DEFINITION_BLOCK_ID { 0x354AA341, 0x6A39AC4D, 0xB036CD9A, 0xAB6EA046 }
	TAG_STRUCT(
		planar_fog_reference_definition_block,
		"planar_fog_reference_definition_block",
		"planar_fog_reference_definition_block",
		"s_planar_fog_reference_definition_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLANAR_FOG_REFERENCE_DEFINITION_BLOCK_ID)
	{
		{ _field_short_integer, "structure design index" },
		{ _field_short_integer, "fog index" },
		{ _field_terminator }
	};

	#define PLANAR_FOG_SET_DEFINITION_STRUCT_ID { 0xADF66371, 0xDA8642BF, 0xCD987004, 0xBABC69EC }
	TAG_STRUCT(
		planar_fog_set_definition_struct,
		"planar_fog_set_definition_struct",
		"planar_fog_set_definition_struct",
		"s_planar_fog_set_definition_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLANAR_FOG_SET_DEFINITION_STRUCT_ID)
	{
		{ _field_block, "planar fogs", &planar_fog_definition_block_block },
		{ _field_block, "mopp code", &mopp_code_definition_block_block },
		{ _field_terminator }
	};

	#define PLANAR_FOG_STRUCTURE_VISIBILITY_DEFINITION_BLOCK_ID { 0x3593A341, 0x6239A94D, 0xB035CD9A, 0xAB6EA346 }
	TAG_STRUCT(
		planar_fog_structure_visibility_definition_block,
		"planar_fog_structure_visibility_definition_block",
		"planar_fog_structure_visibility_definition_block",
		"s_planar_fog_structure_visibility_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLANAR_FOG_STRUCTURE_VISIBILITY_DEFINITION_BLOCK_ID)
	{
		{ _field_block, "cluster visiblity", &planar_fog_cluster_visibility_definition_block_block },
		{ _field_terminator }
	};

	#define PLANAR_FOG_TRIANGLE_BLOCK_ID { 0x3AB29341, 0x62666A4D, 0x99854D9A, 0xAB3EE346 }
	TAG_STRUCT(
		planar_fog_triangle_block,
		"planar_fog_triangle_block",
		"planar_fog_triangle_block",
		"s_planar_fog_triangle_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLANAR_FOG_TRIANGLE_BLOCK_ID)
	{
		{ _field_block, "planes", &planar_fog_triangle_planes_block_block },
		{ _field_terminator }
	};

	#define PLANAR_FOG_TRIANGLE_PLANES_BLOCK_ID { 0x3AB29AB, 0x62666A4D, 0x3854D9A, 0xAB3AB346 }
	TAG_STRUCT(
		planar_fog_triangle_planes_block,
		"planar_fog_triangle_planes_block",
		"planar_fog_triangle_planes_block",
		"s_planar_fog_triangle_planes_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLANAR_FOG_TRIANGLE_PLANES_BLOCK_ID)
	{
		{ _field_real_plane_3d, "plane" },
		{ _field_terminator }
	};

	#define PLANAR_FOG_VERTEX_BLOCK_ID { 0xE3CCF250, 0x83D64DB6, 0x852C0EE8, 0xD14E650D }
	TAG_STRUCT(
		planar_fog_vertex_block,
		"planar_fog_vertex_block",
		"planar_fog_vertex_block",
		"s_planar_fog_vertex_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLANAR_FOG_VERTEX_BLOCK_ID)
	{
		{ _field_real_point_3d, "position" },
		{ _field_terminator }
	};

	#define PLANAR_FOG_ZONE_SET_VISIBILITY_DEFINITION_BLOCK_ID { 0x35939341, 0x6239A44D, 0xB0354D9A, 0xAB6EE346 }
	TAG_STRUCT(
		planar_fog_zone_set_visibility_definition_block,
		"planar_fog_zone_set_visibility_definition_block",
		"planar_fog_zone_set_visibility_definition_block",
		"s_planar_fog_zone_set_visibility_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLANAR_FOG_ZONE_SET_VISIBILITY_DEFINITION_BLOCK_ID)
	{
		{ _field_block, "structure visiblity", &planar_fog_structure_visibility_definition_block_block },
		{ _field_terminator }
	};

	#define PLANES_BLOCK_ID { 0x5D188A8D, 0x719C4E0D, 0x8015A6DA, 0x22E342EB }
	TAG_STRUCT(
		planes_block,
		"planes_block",
		"planes_block",
		"s_planes_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLANES_BLOCK_ID,
		4)
	{
		{ _field_real_plane_3d, "plane" },
		{ _field_terminator }
	};

	#define PLATFORM_SOUND_PLAYBACK_BLOCK_STRUCT_ID { 0x334A1B38, 0x94C44B5C, 0x9CBD395C, 0x8A7B7F5A }
	TAG_STRUCT(
		platform_sound_playback_block_struct,
		"platform_sound_playback_block_struct",
		"platform_sound_playback_block_struct",
		"s_platform_sound_playback_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLATFORM_SOUND_PLAYBACK_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_struct, "playback", &platform_sound_playback_struct },
		{ _field_terminator }
	};

	#define PLATFORM_SOUND_PLAYBACK_COMPONENT_BLOCK_STRUCT_ID { 0x7F148C26, 0x4A18433F, 0xA4754101, 0x5B0E7F87 }
	TAG_STRUCT(
		platform_sound_playback_component_block_struct,
		"platform_sound_playback_component_block_struct",
		"platform_sound_playback_component_block_struct",
		"s_platform_sound_playback_component_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLATFORM_SOUND_PLAYBACK_COMPONENT_BLOCK_STRUCT_ID)
	{
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_looping_group_sound_group_reference },
		{ _field_real, "gain", "additional attenuation to sound", "dB" },
		{ _field_long_flags, "flags", &platform_sound_playback_component_flags },
		{ _field_terminator }
	};

	STRINGS(platform_sound_playback_component_flags)
	{
		"don\'t play at start",
		"play on stop",
		"play alternate",
		"sync with origin looping sound"
	};
	STRING_LIST(platform_sound_playback_component_flags, platform_sound_playback_component_flags_strings, _countof(platform_sound_playback_component_flags_strings));

	#define PLATFORM_SOUND_PLAYBACK_LOWPASS_BLOCK_STRUCT_ID { 0x881A1219, 0x1DE4EA7, 0x8BC63300, 0xBAA416AB }
	TAG_STRUCT(
		platform_sound_playback_lowpass_block_struct,
		"platform_sound_playback_lowpass_block_struct",
		"platform_sound_playback_lowpass_block_struct",
		"s_platform_sound_playback_lowpass_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLATFORM_SOUND_PLAYBACK_LOWPASS_BLOCK_STRUCT_ID)
	{
		{ _field_real, "attack", nullptr, "seconds" },
		{ _field_real, "release", nullptr, "seconds" },
		{ _field_struct, "settings", &global_sound_lowpass_block },
		{ _field_terminator }
	};

	#define PLATFORM_SOUND_PLAYBACK_STRUCT_ID { 0x4A19C737, 0xDB944AA2, 0x9B7BCF04, 0x64F78334 }
	TAG_STRUCT(
		platform_sound_playback_struct,
		"platform_sound_playback_struct",
		"platform_sound_playback_struct",
		"s_platform_sound_playback_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLATFORM_SOUND_PLAYBACK_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &platform_sound_effect_flags_definition },
		{ _field_tag_reference, "radio effect", &sound_radio_settings_group_reference },
		{ _field_tag_reference, "Start event", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "End event", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "Immediate stop event", "Must clear the effect without any transition - used for exiting levels, etc", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_block, "lowpass effect", &platform_sound_playback_lowpass_block_block },
		{ _field_block, "sound components", &platform_sound_playback_component_block_block },
		{ _field_terminator }
	};

	STRINGS(platform_sound_effect_flags_definition)
	{
		"turn off in splitscreen",
		"only turn on in first person"
	};
	STRING_LIST(platform_sound_effect_flags_definition, platform_sound_effect_flags_definition_strings, _countof(platform_sound_effect_flags_definition_strings));

	TAG_REFERENCE(sound_radio_settings_group_reference, SOUND_RADIO_SETTINGS_TAG);

	#define PLAYERENLISTMENTDEFINITIONBLOCK_ID { 0x4E1F9AFD, 0x505D40F2, 0xA048FABB, 0xC8D79F05 }
	TAG_STRUCT(
		playerenlistmentdefinitionblock,
		"playerEnlistmentDefinitionBlock",
		"playerEnlistmentDefinitionBlock",
		"s_playerenlistmentdefinitionblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYERENLISTMENTDEFINITIONBLOCK_ID)
	{
		{ _field_string_id, "name", "the string id of the name of this enlistment" },
		{ _field_string_id, "description", "the string id of the description of this enlistment" },
		{ _field_short_integer, "sprite index", "the sprite index of the icon for this enlistment" },
		{ _field_byte_flags, "flags", &playerenlistmentflags },
		FIELD_PAD("PAD0", 1),
		{ _field_string_id, "unlocked emblem fg" },
		{ _field_string_id, "unlocked emblem bg" },
		{ _field_string_id, "unlocked helmet" },
		{ _field_string_id, "unlocked chest" },
		{ _field_string_id, "unlocked left shoulder" },
		{ _field_string_id, "unlocked right shoulder" },
		{ _field_string_id, "unlocked arms" },
		{ _field_string_id, "unlocked legs" },
		{ _field_string_id, "unlocked visor" },
		{ _field_block, "grades", "the grades that define the leveling track for this enlistment", &player_grade_definition_block_block },
		{ _field_terminator }
	};

	STRINGS(playerenlistmentflags)
	{
		"disabled#since we can\'t reorder the list after ship, this allows us to disable/enable this enlistment"
	};
	STRING_LIST(playerenlistmentflags, playerenlistmentflags_strings, _countof(playerenlistmentflags_strings));

	#define PLAYER_CONTROL_BLOCK_ID { 0xAFAD7414, 0x8FE4A96, 0x94E4BCF6, 0x39C2EEFC }
	TAG_STRUCT(
		player_control_block,
		"player_control_block",
		"player_control_block",
		"s_player_control_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_CONTROL_BLOCK_ID)
	{
		{ _field_block, "controller button mappings", &controller_mapping_reference_block_block },
		{ _field_block, "move stick info", &gamepad_stick_info_block_block },
		{ _field_block, "look stick info", &gamepad_stick_info_block_block },
		{ _field_real_fraction, "magnetism friction", "how much the crosshair slows over enemies" },
		{ _field_real_fraction, "magnetism adhesion", "how much the crosshair sticks to enemies" },
		{ _field_real_fraction, "inconsequential target scale", "scales magnetism level for inconsequential targets like infection forms" },
		FIELD_EXPLANATION("crosshair", nullptr),
		{ _field_real_point_2d, "crosshair location", "-1..1, 0 is middle of the screen" },
		FIELD_EXPLANATION("fireteam", nullptr),
		{ _field_real, "fireteam command mode duration", "How long is command mode on after you initially attempt to issue an order", "seconds" },
		FIELD_EXPLANATION("looking", nullptr),
		{ _field_real, "look autolevelling scale", "1 is fast, 0 is none, >1 will probably be really fast" },
		{ _field_real, "gravity_scale" },
		FIELD_PAD("VM", 2),
		{ _field_short_integer, "minimum autolevelling ticks", "amount of time player needs to move and not look up or down for autolevelling to kick in" },
		{ _field_angle, "minimum angle for vehicle flipping", "0 means the vehicle's up vector is along the ground, 90 means the up vector is pointing straight up:degrees" },
		FIELD_EXPLANATION("weapons may optionally be set to require extra button hold time (e.g. ordnance power weapon drops)", nullptr),
		{ _field_real, "minimum action hold time", "time that player needs to press ACTION to register as a HOLD", "seconds" },
		{ _field_real, "minimum action hold time for teammates", "teammates of player who dropped/spawned weapon", "seconds" },
		{ _field_real, "minimum action hold time for opponents", "opponents of player who dropped/spawned weapon", "seconds" },
		{ _field_real, "pegged zoom supression threshold", "for spinny-shotgun goodness" },
		FIELD_EXPLANATION("double/triple jump", nullptr),
		{ _field_real, "minimum vertical velocity", nullptr, "wu/s" },
		{ _field_real, "cooldown time", nullptr, "seconds" },
		{ _field_real_vector_2d, "double jump velocity", nullptr, "horizontal, vertical" },
		{ _field_real_vector_2d, "triple jump velocity", nullptr, "aiming, vertical" },
		FIELD_EXPLANATION("stick throws", nullptr),
		{ _field_real, "throw channel width", "how close to an axis you have to be" },
		{ _field_real, "throw peg threshold", "how far from the center you have to be" },
		{ _field_real, "throw centered min time", "how long the stick must be centered to start a throw", "s" },
		{ _field_real, "throw drawing max time", "how long you can take to become pegged at the start of a throw", "s" },
		{ _field_real, "throw drawn max time", "how long you can stay pegged at the start of a throw", "s" },
		{ _field_real, "throw throwing max time", "how long you can take to throw the stick to pegged on the other side", "s" },
		{ _field_real, "flick peg jump max time", "max time you can be pegged and then press jump to activate", "s" },
		{ _field_real, "double tap interval time", "to engage double-tap, user must press jump twice in this much time", "s" },
		FIELD_EXPLANATION("Jump Assist", nullptr),
		{ _field_real, "vault_speed_gain" },
		{ _field_real, "vaultSprint_speed_gain" },
		{ _field_real, "vault_height_high" },
		{ _field_real, "vaultSprint_height_high" },
		{ _field_real, "vault_height_medium" },
		{ _field_real, "vaultSprint_height_medium" },
		{ _field_real, "vault_height_min" },
		{ _field_real, "vaultSprint_height_min" },
		{ _field_real, "vault_height_traverse" },
		{ _field_real, "vaultSprint_height_traverse" },
		{ _field_real, "vault_max_downward_distance" },
		{ _field_real, "vaultSprint_max_downward_distance" },
		{ _field_real, "vault_max_distance" },
		{ _field_real, "vaultSprint_max_distance" },
		{ _field_real, "vault_gravity_gain" },
		{ _field_real, "vaultSprint_gravity_gain" },
		{ _field_real, "vault_stationary_probe_distance" },
		{ _field_real, "vault_stationary_probe_angle" },
		{ _field_real, "vault_stationary_probe_min_z" },
		{ _field_real, "vault_lateral_speed_gain" },
		{ _field_real, "vaultSprint_lateral_speed_gain" },
		{ _field_real, "jump_air_control_gain" },
		{ _field_real, "jump_forward_horizontal_speed_0" },
		{ _field_real, "jump_forward_horizontal_speed_1" },
		{ _field_real, "jump_forward_horizontal_speed_2" },
		{ _field_real, "jump_forward_gravity_0" },
		{ _field_real, "jump_forward_gravity_1" },
		{ _field_real, "jump_forward_gravity_2" },
		{ _field_real, "jump_forward_height" },
		{ _field_real, "jump_lateral_horizontal_speed_0" },
		{ _field_real, "jump_lateral_horizontal_speed_1" },
		{ _field_real, "jump_lateral_horizontal_speed_2" },
		{ _field_real, "jump_lateral_gravity_0" },
		{ _field_real, "jump_lateral_gravity_1" },
		{ _field_real, "jump_lateral_gravity_2" },
		{ _field_real, "jump_lateral_height" },
		{ _field_real, "jump_reverse_horizontal_speed_0" },
		{ _field_real, "jump_reverse_horizontal_speed_1" },
		{ _field_real, "jump_reverse_horizontal_speed_2" },
		{ _field_real, "jump_reverse_gravity_0" },
		{ _field_real, "jump_reverse_gravity_1" },
		{ _field_real, "jump_reverse_gravity_2" },
		{ _field_real, "jump_reverse_height" },
		{ _field_real, "jump_stationary_horizontal_speed_0" },
		{ _field_real, "jump_stationary_horizontal_speed_1" },
		{ _field_real, "jump_stationary_horizontal_speed_2" },
		{ _field_real, "jump_stationary_gravity_0" },
		{ _field_real, "jump_stationary_gravity_1" },
		{ _field_real, "jump_stationary_gravity_2" },
		{ _field_real, "jump_stationary_height" },
		{ _field_real, "Downward_Vault_Min_Laterial_Distance" },
		{ _field_real, "Vault_AutoCorrect_MaxAngle" },
		{ _field_real, "Vault ideal distance", "When several via vault targets are found, vaults closer to this distance are more likely to be chosen" },
		{ _field_real, "Vault Sprint ideal distance", "When several via vault targets are found, vaults closer to this distance are more likely to be chosen" },
		{ _field_terminator }
	};

	#define PLAYER_ENLISTMENT_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID { 0x4F115FB8, 0x7BE8489F, 0xBFFFE0D8, 0x36B4D323 }
	TAG_STRUCT(
		player_enlistment_globals_definition_struct_definition,
		"player_enlistment_globals_definition_struct_definition",
		"player_enlistment_globals_definition_struct_definition",
		"s_player_enlistment_globals_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_ENLISTMENT_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Enlistments", "!!! DO NOT, UNDER ANY CIRCUMSTANCES, REORDER THIS BLOCK AFTER SHIP !!!"),
		{ _field_block, "enlistments", &playerenlistmentdefinitionblock_block },
		{ _field_terminator }
	};

	#define PLAYER_GRADE_DEFINITION_BLOCK_ID { 0x6E98160, 0xD9D646B4, 0xBD6054A2, 0x970CE24B }
	TAG_STRUCT(
		player_grade_definition_block,
		"player_grade_definition_block",
		"player_grade_definition_block",
		"s_player_grade_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_GRADE_DEFINITION_BLOCK_ID)
	{
		{ _field_long_integer, "xp threshold ", "total earned XP needed to reach this rank" },
		{ _field_string_id, "name" },
		{ _field_short_integer, "sprite index" },
		FIELD_PAD("pad0", 2),
		{ _field_real, "time played multiplier", "This is an additional multiplier to rewards given for time played for players at this grade" },
		{ _field_block, "level up rewards", "These rewards will be given to the player when they reach this grade", &rewardblock_block },
		{ _field_terminator }
	};

	#define PLAYER_GRADE_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID { 0xCE27F00B, 0x5AC44866, 0xA310574D, 0x5912AF36 }
	TAG_STRUCT(
		player_grade_globals_definition_struct_definition,
		"player_grade_globals_definition_struct_definition",
		"player_grade_globals_definition_struct_definition",
		"s_player_grade_globals_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_GRADE_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "player grades", &player_grade_definition_block_block },
		{ _field_terminator }
	};

	#define PLAYER_INFORMATION_BLOCK_ID { 0x45AF4745, 0x4D24477D, 0xA205702C, 0xE5CAEBE7 }
	TAG_STRUCT(
		player_information_block,
		"player_information_block",
		"player_information_block",
		"s_player_information_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_INFORMATION_BLOCK_ID)
	{
		{ _field_real, "walking speed", nullptr, "world units per second" },
		{ _field_real, "run forward", nullptr, "world units per second" },
		{ _field_real, "run backward", nullptr, "world units per second" },
		{ _field_real, "run sideways", nullptr, "world units per second" },
		{ _field_real, "run acceleration", nullptr, "world units per second squared" },
		{ _field_real, "sneak forward", nullptr, "world units per second" },
		{ _field_real, "sneak backward", nullptr, "world units per second" },
		{ _field_real, "sneak sideways", nullptr, "world units per second" },
		{ _field_real, "sneak acceleration", nullptr, "world units per second squared" },
		{ _field_real, "airborne acceleration", nullptr, "world units per second squared" },
		{ _field_real, "weapon ready anim scaler" },
		{ _field_real_point_3d, "grenade origin" },
		{ _field_struct, "grenade aiming", "determines the distance along the aiming vector to orient the grenade based on the camera pitch", &scalar_function_named_struct },
		{ _field_real_bounds, "first person idle time", nullptr, "seconds" },
		{ _field_real_fraction, "first person skip fraction", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "coop countdown sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "coop respawn sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "coop respawn effect", &effect_group_reference },
		{ _field_tag_reference, "hologram death effect", &effect_group_reference },
		{ _field_long_integer, "binoculars zoom count" },
		{ _field_real_bounds, "binoculars zoom range" },
		{ _field_tag_reference, "night vision on", MAKE_ALT_NAMES("flashlight on"), &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "night vision off", MAKE_ALT_NAMES("flashlight off"), &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "fire team objective range" },
		{ _field_real, "fire team sandbox range" },
		{ _field_real, "fire team cone angle", nullptr, "in degrees" },
		FIELD_EXPLANATION("sprinting/momentum", nullptr),
		{ _field_block, "momentum and sprinting", &player_momentum_data_block_block },
		{ _field_terminator }
	};

	#define PLAYER_MODEL_CUSTOMIZATION_GLOBALS_STRUCT_DEFINITION_ID { 0x3E8116B0, 0x7B4242AC, 0xA0790D22, 0x888057AC }
	TAG_STRUCT(
		player_model_customization_globals_struct_definition,
		"player_model_customization_globals_struct_definition",
		"player_model_customization_globals_struct_definition",
		"s_player_model_customization_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_MODEL_CUSTOMIZATION_GLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_tag_reference, "spartan render model", "used for string list generation", &render_model_group_reference$7 },
		{ _field_tag_reference, "elite render model", &render_model_group_reference$7 },
		{ _field_block, "helmet selections", &customized_model_selection_block_block },
		{ _field_block, "chest selections", &customized_model_selection_block_block },
		{ _field_block, "elite selections", &customized_model_selection_block_block },
		{ _field_block, "left shoulder", &customized_model_selection_block_block },
		{ _field_block, "right shoulder", &customized_model_selection_block_block },
		{ _field_block, "arms", &customized_model_selection_block_block },
		{ _field_block, "legs", &customized_model_selection_block_block },
		{ _field_block, "unused 5", &customized_model_selection_block_block },
		{ _field_block, "spartan armor effect selections", &customized_model_selection_block_block },
		{ _field_block, "elite armor effect selections", &customized_model_selection_block_block },
		{ _field_block, "male spartan selections", &customized_model_player_bits_block_block },
		{ _field_block, "female spartan selections", &customized_model_player_bits_block_block },
		{ _field_block, "spartan model defaults", &customized_model_player_bits_block_block },
		{ _field_block, "elite model defaults", &customized_model_player_bits_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(render_model_group_reference$7, RENDER_MODEL_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define PLAYER_MOMENTUM_DATA_BLOCK_ID { 0x7AA5B02F, 0x50D74B18, 0x892AD20A, 0x2B334390 }
	TAG_STRUCT(
		player_momentum_data_block,
		"player_momentum_data_block",
		"player_momentum_data_block",
		"s_player_momentum_data_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_MOMENTUM_DATA_BLOCK_ID)
	{
		{ _field_byte_flags, "flag", &momentumflag },
		FIELD_PAD("PAD", 3),
		{ _field_real, "seconds to start", "how long you must be pegged before you gain momentum" },
		{ _field_real, "seconds to full speed", "how long you must have momentum before you reach top speed" },
		{ _field_real, "decay rate", "how fast being unpegged decays the timer (seconds per second)" },
		{ _field_real, "full speed multiplier", "how much faster we actually go when at full momentum" },
		{ _field_real, "sprint turn multiplier", "how much faster to turn when sprinting" },
		{ _field_real, "pegged magnitude", "how far the stick needs to be pressed before being considered pegged" },
		{ _field_real, "pegged angular threshold", "how far off straight up (in degrees) we consider pegged" },
		{ _field_angle, "max look yaw velocity", nullptr, "degrees per second" },
		{ _field_angle, "max look pitch velocity", nullptr, "degrees per second" },
		{ _field_real, "minimum player velocity to be considered in a momentum state", nullptr, "world units per second" },
		{ _field_real, "look window length", "period of time over which we record the biped's look angle for deciding if we should drop him out of momentum", "seconds" },
		{ _field_string_id, "momentum animation stance" },
		{ _field_real, "min weapon error", "[0, 1] while using this type of momentum, the player's weapon error cannot drop below this value" },
		{ _field_terminator }
	};

	STRINGS(momentumflag)
	{
		"disable soft ping check",
		"disable hard ping check"
	};
	STRING_LIST(momentumflag, momentumflag_strings, _countof(momentumflag_strings));

	#define PLAYER_REPRESENTATION_BLOCK_ID { 0x4F35E23A, 0xFACB43D1, 0x90C6D726, 0x49C496B7 }
	TAG_STRUCT(
		player_representation_block,
		"player_representation_block",
		"player_representation_block",
		"s_player_representation_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_REPRESENTATION_BLOCK_ID)
	{
		{ _field_byte_flags, "flags", &player_representation_flags },
		FIELD_PAD("pad", 3),
		{ _field_tag_reference, "hud screen reference", &cui_screen_group_reference },
		{ _field_tag_reference, "first person hands model", &model_group_reference$4 },
		{ _field_string_id, "first person multiplayer hands variant" },
		{ _field_tag_reference, "first person body model", &model_group_reference$4 },
		{ _field_string_id, "first person multiplayer body variant" },
		{ _field_block, "hidden fpBody regions", &firstpersonphiddenbodyregionsblock_block },
		{ _field_tag_reference, "third person unit", &unit_group_reference$3 },
		{ _field_string_id, "third person variant" },
		{ _field_tag_reference, "binoculars zoom in sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "binoculars zoom out sounds", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_long_block_index, "player information", &player_information_block_block },
		{ _field_terminator }
	};

	STRINGS(player_representation_flags)
	{
		"can use health packs"
	};
	STRING_LIST(player_representation_flags, player_representation_flags_strings, _countof(player_representation_flags_strings));

	TAG_REFERENCE(model_group_reference$4, MODEL_TAG);

	TAG_REFERENCE(unit_group_reference$3, UNIT_TAG);

	#define PLAYER_ROLE_BLOCK_ID { 0x78742FC8, 0x50AC4EBE, 0xB0892D25, 0x6C8578CB }
	TAG_STRUCT(
		player_role_block,
		"player_role_block",
		"player_role_block",
		"s_player_role_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_ROLE_BLOCK_ID)
	{
		{ _field_string_id, "role name" },
		{ _field_long_flags, "flags", &player_role_flags },
		{ _field_tag_reference, "primary weapon", &weapon_group_reference$5 },
		{ _field_short_integer, "primary weapon rounds loaded" },
		{ _field_short_integer, "primary weapon rounds total" },
		{ _field_tag_reference, "secondary weapon", &weapon_group_reference$5 },
		{ _field_short_integer, "secondary weapon rounds loaded" },
		{ _field_short_integer, "secondary weapon rounds total" },
		{ _field_short_integer, "frag grenade count" },
		{ _field_short_integer, "plasma grenade count" },
		{ _field_short_integer, "UNUSED" },
		{ _field_short_integer, "spawn location index" },
		{ _field_tag_reference, "starting equipment", &equipment_group_reference },
		{ _field_string, "display name" },
		{ _field_long_flags, "installed apps", &custom_app_flags$2 },
		{ _field_long_integer, "killstreak bonus time", nullptr, "secs" },
		{ _field_real, "movement speed multiplier" },
		{ _field_tag_reference, "killstreak bonus equipment", &equipment_group_reference },
		{ _field_tag_reference, "killstreak bonus activation sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_terminator }
	};

	STRINGS(player_role_flags)
	{
		"UNUSED"
	};
	STRING_LIST(player_role_flags, player_role_flags_strings, _countof(player_role_flags_strings));

	TAG_REFERENCE(weapon_group_reference$5, WEAPON_TAG);

	STRINGS(custom_app_flags$2)
	{
		"Weightless",
		"Defiance",
		"Maltreat",
		"Recharge",
		"Impervious",
		"Exploiter",
		"Momentum",
		"Reclaim",
		"Detector",
		"Scrimmage",
		"Sprint",
		"Twofold",
		"Supplement",
		"Manifest"
	};
	STRING_LIST(custom_app_flags$2, custom_app_flags$2_strings, _countof(custom_app_flags$2_strings));

	#define PLAYER_TRAINING_ENTRY_DATA_BLOCK_ID { 0x2521B32, 0x611C4819, 0xA1067B6A, 0x683D77BF }
	TAG_STRUCT(
		player_training_entry_data_block,
		"player_training_entry_data_block",
		"player_training_entry_data_block",
		"s_player_training_entry_data_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_TRAINING_ENTRY_DATA_BLOCK_ID)
	{
		{ _field_string_id, "display string", "comes out of the HUD text globals" },
		{ _field_word_integer, "max display time", "how long the message can be on screen before being hidden" },
		{ _field_word_integer, "display count", "how many times a training message will get displayed (0-3 only!)" },
		{ _field_word_integer, "dissapear delay", "how long a displayed but untriggered message stays up" },
		{ _field_word_integer, "redisplay delay", "how long after display this message will stay hidden" },
		{ _field_real, "display delay (s)", "how long the event can be triggered before it's displayed" },
		{ _field_word_flags, "flags", &player_training_flags },
		FIELD_PAD("HURLUV", 2),
		{ _field_terminator }
	};

	STRINGS(player_training_flags)
	{
		"not in multiplayer"
	};
	STRING_LIST(player_training_flags, player_training_flags_strings, _countof(player_training_flags_strings));

	#define PLAYER_TRAITS_APPEARANCE_BLOCK_ID { 0x3F915812, 0xEA7541DC, 0xA0BC41A6, 0xE81CFC01 }
	TAG_STRUCT(
		player_traits_appearance_block,
		"player_traits_appearance_block",
		"player_traits_appearance_block",
		"s_player_traits_appearance_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_TRAITS_APPEARANCE_BLOCK_ID)
	{
		{ _field_char_enum, "active camo", &player_trait_active_camo },
		{ _field_char_enum, "waypoint", &player_trait_waypoint },
		{ _field_char_enum, "gamertag visible", &player_trait_waypoint },
		{ _field_char_enum, "aura", &player_trait_aura },
		FIELD_EXPLANATION("death effect/attached effect", "Type any string from the relevant sections of multiplayer/megalo/multiplayer_effects.multiplayereffects."),
		{ _field_string_id, "death effect" },
		{ _field_string_id, "attached effect" },
		{ _field_terminator }
	};

	STRINGS(player_trait_waypoint)
	{
		"unchanged",
		"off",
		"allies",
		"all"
	};
	STRING_LIST(player_trait_waypoint, player_trait_waypoint_strings, _countof(player_trait_waypoint_strings));

	STRINGS(player_trait_aura)
	{
		"unchanged",
		"off",
		"team_color",
		"black",
		"white"
	};
	STRING_LIST(player_trait_aura, player_trait_aura_strings, _countof(player_trait_aura_strings));

	#define PLAYER_TRAITS_MOVEMENT_BLOCK_ID { 0x4F62673D, 0x6D6146F6, 0xA3A6684D, 0x38C167B3 }
	TAG_STRUCT(
		player_traits_movement_block,
		"player_traits_movement_block",
		"player_traits_movement_block",
		"s_player_traits_movement_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_TRAITS_MOVEMENT_BLOCK_ID)
	{
		{ _field_long_flags, "should apply trait", &player_traits_movement_float_flags },
		{ _field_real, "speed" },
		{ _field_real, "gravity multiplier" },
		{ _field_real, "jump multiplier" },
		{ _field_real, "turn speed multiplier" },
		{ _field_char_enum, "vehicle usage", &player_trait_vehicle_usage },
		{ _field_char_enum, "double jump", &player_trait_double_jump },
		{ _field_char_enum, "sprint usage", &player_trait_bool_enum },
		{ _field_char_enum, "automatic momentum usage", &player_trait_bool_enum },
		{ _field_char_enum, "vaulting enabled", &player_trait_bool_enum },
		{ _field_char_enum, "stealthy", &player_trait_bool_enum },
		FIELD_PAD("grue", 2),
		{ _field_terminator }
	};

	STRINGS(player_traits_movement_float_flags)
	{
		"speed",
		"gravity multiplier",
		"jump multiplier",
		"turn speed multiplier"
	};
	STRING_LIST(player_traits_movement_float_flags, player_traits_movement_float_flags_strings, _countof(player_traits_movement_float_flags_strings));

	STRINGS(player_trait_vehicle_usage)
	{
		"unchanged",
		"none",
		"passenger_only",
		"driver_only",
		"gunner_only",
		"not_passenger",
		"not_driver",
		"not_gunner",
		"full"
	};
	STRING_LIST(player_trait_vehicle_usage, player_trait_vehicle_usage_strings, _countof(player_trait_vehicle_usage_strings));

	STRINGS(player_trait_double_jump)
	{
		"unchanged",
		"off",
		"on",
		"on_plus_lunge"
	};
	STRING_LIST(player_trait_double_jump, player_trait_double_jump_strings, _countof(player_trait_double_jump_strings));

	#define PLAYER_TRAITS_SENSORS_BLOCK_ID { 0xE4C40B0C, 0xE0674B60, 0xAA103371, 0x9BFE5DAA }
	TAG_STRUCT(
		player_traits_sensors_block,
		"player_traits_sensors_block",
		"player_traits_sensors_block",
		"s_player_traits_sensors_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_TRAITS_SENSORS_BLOCK_ID)
	{
		{ _field_long_flags, "should apply trait", &player_traits_sensors_float_flags },
		{ _field_real, "motion tracker range" },
		{ _field_real, "nemesis duration", nullptr, "seconds" },
		{ _field_char_enum, "motion tracker", &player_trait_motion_tracker },
		{ _field_char_enum, "motion tracker while zoomed", &player_trait_bool_enum },
		{ _field_char_enum, "directional damage indicator", &player_trait_bool_enum },
		{ _field_char_enum, "vision mode", &player_trait_bool_enum },
		{ _field_char_enum, "battle awareness", &player_trait_bool_enum },
		{ _field_char_enum, "threat view", &player_trait_bool_enum },
		{ _field_char_enum, "aural enhancement", &player_trait_bool_enum },
		{ _field_char_enum, "nemesis", &player_trait_bool_enum },
		{ _field_terminator }
	};

	STRINGS(player_traits_sensors_float_flags)
	{
		"motion tracker range",
		"nemesis duration"
	};
	STRING_LIST(player_traits_sensors_float_flags, player_traits_sensors_float_flags_strings, _countof(player_traits_sensors_float_flags_strings));

	STRINGS(player_trait_motion_tracker)
	{
		"unchanged",
		"off",
		"moving_friendly_bipeds_moving_neutral_vehicles",
		"moving_bipeds_moving_vehicles",
		"all_bipeds_moving_vehicles"
	};
	STRING_LIST(player_trait_motion_tracker, player_trait_motion_tracker_strings, _countof(player_trait_motion_tracker_strings));

	#define PLAYER_TRAITS_VITALITY_BLOCK_ID { 0x8F23B52B, 0x7E564650, 0xBD6ED274, 0xD5A66FE8 }
	TAG_STRUCT(
		player_traits_vitality_block,
		"player_traits_vitality_block",
		"player_traits_vitality_block",
		"s_player_traits_vitality_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_TRAITS_VITALITY_BLOCK_ID)
	{
		{ _field_long_flags, "should apply trait", &player_traits_vitality_float_flags },
		FIELD_EXPLANATION("damage resistance", "Any damage taken is divided by this number.  If you put -1, that means \"invulnerable\"."),
		{ _field_real, "damage resistance" },
		{ _field_real, "shield multiplier" },
		{ _field_real, "body multiplier" },
		{ _field_real, "shield stun duration" },
		{ _field_real, "shield recharge rate" },
		{ _field_real, "body recharge rate" },
		{ _field_real, "overshield recharge rate" },
		{ _field_real, "vampirism percent" },
		{ _field_real, "explosive damage resistance", "incoming damage multiplied by (1 - resistance)" },
		{ _field_real, "wheelman armor vehicle stun time modifier" },
		{ _field_real, "wheelman armor vehicle recharge time modifier" },
		{ _field_real, "wheelman armor vehicle emp disabled time modifier" },
		{ _field_real, "fall damage multiplier" },
		{ _field_char_enum, "headshot immunity", &player_trait_bool_enum },
		{ _field_char_enum, "assassination immunity", &player_trait_bool_enum },
		{ _field_char_enum, "deathless", &player_trait_bool_enum },
		{ _field_char_enum, "fast track armor", &player_trait_bool_enum },
		{ _field_char_enum, "powerup cancellation", &player_trait_powerup_cancellation_enum },
		FIELD_PAD("pad", 3),
		{ _field_terminator }
	};

	STRINGS(player_traits_vitality_float_flags)
	{
		"damage resistance",
		"shield multiplier",
		"body multiplier",
		"shield stun duration",
		"shield recharge rate",
		"body recharge rate",
		"overshield recharge rate",
		"vampirism percent",
		"explosive damage resistance",
		"wheelman armor vehicle stun time modifier",
		"wheelman armor vehicle recharge time modifier",
		"wheelman armor vehicle emp disabled time modifier",
		"fall damage multiplier"
	};
	STRING_LIST(player_traits_vitality_float_flags, player_traits_vitality_float_flags_strings, _countof(player_traits_vitality_float_flags_strings));

	STRINGS(player_trait_powerup_cancellation_enum)
	{
		"unchanged",
		"none",
		"no_overshield"
	};
	STRING_LIST(player_trait_powerup_cancellation_enum, player_trait_powerup_cancellation_enum_strings, _countof(player_trait_powerup_cancellation_enum_strings));

	#define PLAYER_TRAITS_WEAPONS_BLOCK_ID { 0xB29D76D0, 0x3A954289, 0xAB81D09D, 0xC0A90761 }
	TAG_STRUCT(
		player_traits_weapons_block,
		"player_traits_weapons_block",
		"player_traits_weapons_block",
		"s_player_traits_weapons_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PLAYER_TRAITS_WEAPONS_BLOCK_ID)
	{
		{ _field_long_flags, "should apply trait", &player_traits_weapons_float_flags },
		{ _field_real, "damage multiplier" },
		{ _field_real, "melee damage multiplier" },
		{ _field_real, "grenade recharge seconds frag" },
		{ _field_real, "grenade recharge seconds plasma" },
		{ _field_real, "grenade recharge seconds spike" },
		{ _field_real, "hero equipment energy use rate modifier" },
		{ _field_real, "hero equipment energy recharge delay modifier" },
		{ _field_real, "hero equipment energy recharge rate modifier" },
		{ _field_real, "hero equipment initial energy modifier" },
		{ _field_real, "equipment energy use rate modifier" },
		{ _field_real, "equipment energy recharge delay modifier" },
		{ _field_real, "equipment energy use recharge rate modifier" },
		{ _field_real, "equipment energy initial energy modifier" },
		{ _field_real, "switch speed modifier" },
		{ _field_real, "reload speed modifier" },
		{ _field_real, "ordnance points modifier" },
		{ _field_real, "explosive area of effect radius modifier" },
		{ _field_real, "gunner armor modifier" },
		{ _field_real, "stability armor modifier" },
		{ _field_real, "drop recon warning seconds" },
		{ _field_real, "drop recon distance modifier" },
		{ _field_real, "assassination speed modifier" },
		{ _field_char_enum, "weapon pickup allowed", &player_trait_bool_enum },
		{ _field_char_enum, "initial grenade count", &player_trait_initial_grenade_count_enum },
		{ _field_char_enum, "infinite ammo", &player_trait_infinite_ammo_enum },
		{ _field_char_enum, "equipment usage", &player_trait_equipment_usage_enum },
		{ _field_char_enum, "equipment usage excepting auto turret", "false will disable all equipment except auto turret", &player_trait_equipment_usage_enum },
		{ _field_char_enum, "equipment drop", &player_trait_bool_enum },
		{ _field_char_enum, "infinite equipment", &player_trait_bool_enum },
		{ _field_char_enum, "weapons ammopack", &player_trait_bool_enum },
		{ _field_char_enum, "weapons grenadier", &player_trait_bool_enum },
		{ _field_char_enum, "weapons explode on death armormod", "spawns projectile specified in globals.globals", &player_trait_bool_enum },
		{ _field_char_enum, "ordnance markers visible", &player_trait_bool_enum },
		{ _field_char_enum, "weapons ordnance reroll available", &player_trait_bool_enum },
		{ _field_char_enum, "weapons resourceful", "grenade probabilities defined in grenade_list.game_globals_grenade_list", &player_trait_bool_enum },
		{ _field_char_enum, "weapons well equipped", &player_trait_bool_enum },
		{ _field_char_enum, "ordnance disabled", &player_trait_bool_enum },
		FIELD_PAD("weapons_padding", 1),
		FIELD_EXPLANATION("initial weapons/equipment", "Type any string from the relevant sections of multiplayer/globals.multiplayer_object_type_list."),
		{ _field_string_id, "initial primary weapon" },
		{ _field_string_id, "initial secondary weapon" },
		{ _field_string_id, "initial equipment" },
		{ _field_string_id, "initial tactical package" },
		{ _field_string_id, "initial support upgrade" },
		{ _field_terminator }
	};

	STRINGS(player_traits_weapons_float_flags)
	{
		"damage multiplier",
		"melee damage multiplier",
		"grenade recharge seconds frag",
		"grenade recharge seconds plasma",
		"grenade recharge seconds spike",
		"hero equipment energy use rate modifier",
		"hero equipment energy recharge delay modifier",
		"hero equipment energy recharge rate modifier",
		"hero equipment initial energy modifier",
		"equipment energy use rate modifier",
		"equipment energy recharge delay modifier",
		"equipment energy use recharge rate modifier",
		"equipment energy initial energy modifier",
		"switch speed modifier",
		"reload speed modifier",
		"ordnance points modifier",
		"explosive area of effect radius modifier",
		"gunner armor modifier",
		"stability armor modifier",
		"drop recon warning seconds",
		"drop recon distance modifier",
		"assassination speed modifier"
	};
	STRING_LIST(player_traits_weapons_float_flags, player_traits_weapons_float_flags_strings, _countof(player_traits_weapons_float_flags_strings));

	STRINGS(player_trait_infinite_ammo_enum)
	{
		"unchanged",
		"off",
		"on",
		"bottomless_clip"
	};
	STRING_LIST(player_trait_infinite_ammo_enum, player_trait_infinite_ammo_enum_strings, _countof(player_trait_infinite_ammo_enum_strings));

	STRINGS(player_trait_equipment_usage_enum)
	{
		"unchanged",
		"off",
		"not with objectives",
		"on"
	};
	STRING_LIST(player_trait_equipment_usage_enum, player_trait_equipment_usage_enum_strings, _countof(player_trait_equipment_usage_enum_strings));

	#define POINT_PHYSICS_STRUCT_DEFINITION_ID { 0x25622995, 0xA9214233, 0x8BD5DA29, 0xE1C6CC0A }
	TAG_STRUCT(
		point_physics_struct_definition,
		"point_physics_struct_definition",
		"point_physics_struct_definition",
		"s_point_physics_struct_definition",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		POINT_PHYSICS_STRUCT_DEFINITION_ID)
	{
		{ _field_long_flags, "flags", &point_physics_definition_flags },
		{ _field_real, "runtime mass over radius cubed" },
		{ _field_real, "runtime inverse density" },
		{ _field_long_integer, "IGNORE1" },
		{ _field_long_integer, "IGNORE2" },
		{ _field_long_integer, "IGNORE3" },
		{ _field_long_integer, "IGNORE4" },
		{ _field_long_integer, "IGNORE5" },
		{ _field_real, "density", nullptr, "g/mL" },
		{ _field_real, "air friction" },
		{ _field_real, "water friction" },
		{ _field_real, "surface friction", "when hitting the ground or interior, percentage of velocity lost in one collision" },
		{ _field_real, "elasticity", "0.0 is inelastic collisions (no bounce) 1.0 is perfectly elastic (reflected velocity equals incoming velocity)" },
		FIELD_PAD("DR", 12),
		FIELD_EXPLANATION("Densities (g/mL)", "air        0.0011 (g/mL)\nsnow       0.128\ncork       0.24\ncedar      0.43\noak        0.866\nice        0.897\nwater      1.0\nsoil       1.1\ncotton     1.491\ndry earth  1.52\nsand       1.7\ngranite    2.4\nglass      2.5\niron       7.65\nsteel      7.77\nlead       11.37\nuranium    18.74\ngold       19.3\n"),
		{ _field_terminator }
	};

	STRINGS(point_physics_definition_flags)
	{
		"UNUSED",
		"collides with structures",
		"collides with water surface",
		"uses simple wind#the wind on this point won\'t have high-frequency variations",
		"uses damped wind#the wind on this point will be artificially slow",
		"no gravity#the point is not affected by gravity"
	};
	STRING_LIST(point_physics_definition_flags, point_physics_definition_flags_strings, _countof(point_physics_definition_flags_strings));

	#define POINT_TO_PATH_CURVE_BLOCK_ID { 0x295B83E5, 0x915B4FEA, 0xB9C37400, 0xF93E5BD0 }
	TAG_STRUCT(
		point_to_path_curve_block,
		"point_to_path_curve_block",
		"point_to_path_curve_block",
		"s_point_to_path_curve_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		POINT_TO_PATH_CURVE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "node index", &nodes_block_block },
		FIELD_PAD("TNLRSOSY", 2),
		{ _field_block, "points", &point_to_path_curve_point_block_block },
		{ _field_terminator }
	};

	#define POINT_TO_PATH_CURVE_POINT_BLOCK_ID { 0x7D8769F4, 0xBCD646C2, 0x99D3A2DC, 0x900FAE2F }
	TAG_STRUCT(
		point_to_path_curve_point_block,
		"point_to_path_curve_point_block",
		"point_to_path_curve_point_block",
		"s_point_to_path_curve_point_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		POINT_TO_PATH_CURVE_POINT_BLOCK_ID)
	{
		{ _field_real_point_3d, "position" },
		{ _field_real, "t value" },
		{ _field_terminator }
	};

	#define POLYARTCAMERABLOCK_ID { 0x99094E2A, 0xF7534A48, 0x81EC3343, 0x888B0CD }
	TAG_STRUCT(
		polyartcamerablock,
		"polyartCameraBlock",
		"polyartCameraBlock",
		"s_polyartcamerablock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		POLYARTCAMERABLOCK_ID)
	{
		{ _field_real, "horizontal fov" },
		{ _field_real, "vertical fov" },
		{ _field_real, "near z plane distance" },
		{ _field_real, "far z plane distance" },
		{ _field_real_point_3d, "camera position" },
		{ _field_terminator }
	};

	#define POLYARTINDEXBLOCK_ID { 0xA4C7CB01, 0x25404D14, 0xB5A27FA2, 0x93764DF2 }
	TAG_STRUCT(
		polyartindexblock,
		"polyartIndexBlock",
		"polyartIndexBlock",
		"s_polyartindexblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		POLYARTINDEXBLOCK_ID)
	{
		{ _field_short_integer, "index" },
		{ _field_terminator }
	};

	#define POLYARTINDEXBUFFERDESCRIPTORSTRUCT_ID { 0xC68DB74F, 0x2B9B4252, 0xB42C6C75, 0x53870BEA }
	TAG_STRUCT(
		polyartindexbufferdescriptorstruct,
		"polyartIndexBufferDescriptorStruct",
		"polyartIndexBufferDescriptorStruct",
		"s_polyartindexbufferdescriptorstruct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		POLYARTINDEXBUFFERDESCRIPTORSTRUCT_ID)
	{
		{ _field_data, "index_data", &polyartindexdata },
		{ _field_terminator }
	};

	#define POLYARTVERTEXBLOCK_ID { 0x118494C3, 0xB73F4B9B, 0xA4744DDC, 0x674329B }
	TAG_STRUCT(
		polyartvertexblock,
		"polyartVertexBlock",
		"polyartVertexBlock",
		"s_polyartvertexblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		POLYARTVERTEXBLOCK_ID)
	{
		{ _field_short_integer, "half x" },
		{ _field_short_integer, "half y" },
		{ _field_short_integer, "half z" },
		{ _field_short_integer, "half alpha" },
		{ _field_short_integer, "half u" },
		{ _field_short_integer, "half v" },
		{ _field_terminator }
	};

	#define POLYARTVERTEXBUFFERDESCRIPTORSTRUCT_ID { 0xDCA698FD, 0x811B4662, 0xA0E506EA, 0x7ED63171 }
	TAG_STRUCT(
		polyartvertexbufferdescriptorstruct,
		"polyartVertexBufferDescriptorStruct",
		"polyartVertexBufferDescriptorStruct",
		"s_polyartvertexbufferdescriptorstruct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		POLYARTVERTEXBUFFERDESCRIPTORSTRUCT_ID)
	{
		{ _field_data, "vertices", &polyartvertexbufferdata },
		{ _field_long_integer, "vertex type" },
		{ _field_terminator }
	};

	#define POLYART_ASSET_BLOCK_STRUCT_ID { 0x45F0FE75, 0xE82041BA, 0x98938411, 0xCA2B86CF }
	TAG_STRUCT(
		polyart_asset_block_struct,
		"polyart_asset_block_struct",
		"polyart_asset_block_struct",
		"s_polyart_asset_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		POLYART_ASSET_BLOCK_STRUCT_ID)
	{
		{ _field_char_enum, "runtime flags", &g_polyartassetstateflags },
		{ _field_char_enum, "Polyart vertex type", &polyartvertexformattypeenum },
		{ _field_char_integer, "uvSet index" },
		FIELD_PAD("MERP", 1),
		{ _field_real, "antialiasing extent size" },
		{ _field_block, "placement data", &polyartcamerablock_block },
		{ _field_block, "vertices", &polyartvertexblock_block },
		{ _field_block, "indices", &polyartindexblock_block },
		{ _field_block, "pc vertex buffers", &vertexbuffersblock_block },
		{ _field_block, "pc index buffers", &indexbuffersblock_block },
		{ _field_api_interop, "vertex buffer interop", &polyartvertexbufferinteropdefinition },
		{ _field_api_interop, "index buffer interop", &polyartindexbufferinteropdefinition },
		{ _field_terminator }
	};

	STRINGS(g_polyartassetstateflags)
	{
		"processed*!",
		"available*!"
	};
	STRING_LIST(g_polyartassetstateflags, g_polyartassetstateflags_strings, _countof(g_polyartassetstateflags_strings));

	STRINGS(polyartvertexformattypeenum)
	{
		"Position",
		"Position And UV"
	};
	STRING_LIST(polyartvertexformattypeenum, polyartvertexformattypeenum_strings, _countof(polyartvertexformattypeenum_strings));

	#define POLYHEDRA_BLOCK_STRUCT_ID { 0xF4968889, 0xF5C145D7, 0x99A8D99E, 0x17508FB6 }
	TAG_STRUCT(
		polyhedra_block_struct,
		"polyhedra_block_struct",
		"polyhedra_block_struct",
		"s_polyhedra_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		POLYHEDRA_BLOCK_STRUCT_ID,
		4)
	{
		{ _field_struct, "base", &havok_primitive_struct },
		{ _field_struct, "polyhedron shape", &havok_convex_shape_struct },
		FIELD_PAD("algn743", 12),
		{ _field_real_vector_3d, "aabb half extents" },
		{ _field_real, "havok w aabb half extents" },
		{ _field_real_vector_3d, "aabb center" },
		{ _field_real, "havok w aabb center" },
		{ _field_long_integer, "field pointer skip", _field_id_zero_data },
		{ _field_long_integer, "four vectors size" },
		{ _field_long_integer, "four vectors capacity" },
		{ _field_long_integer, "num vertices" },
		{ _field_char_integer, "m_useSpuBuffer" },
		FIELD_PAD("algn434", 3),
		{ _field_long_integer, "another field pointer skip", _field_id_zero_data },
		{ _field_long_integer, "plane equations size" },
		{ _field_long_integer, "plane equations capacity" },
		{ _field_long_integer, "connectivity", _field_id_zero_data },
		FIELD_PAD("SAMTRA", 12),
		{ _field_terminator }
	};

	#define POLYHEDRON_FOUR_VECTORS_BLOCK_ID { 0x919AD72B, 0xA3A24A74, 0xAC7F3BB6, 0x43B76BC1 }
	TAG_STRUCT(
		polyhedron_four_vectors_block,
		"polyhedron_four_vectors_block",
		"polyhedron_four_vectors_block",
		"s_polyhedron_four_vectors_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		POLYHEDRON_FOUR_VECTORS_BLOCK_ID,
		4)
	{
		{ _field_real_vector_3d, "four vectors x" },
		{ _field_real, "havok w four vectors x" },
		{ _field_real_vector_3d, "four vectors y" },
		{ _field_real, "havok w four vectors y" },
		{ _field_real_vector_3d, "four vectors z" },
		{ _field_real, "havok w four vectors z" },
		{ _field_terminator }
	};

	#define POLYHEDRON_PLANE_EQUATIONS_BLOCK_ID { 0x6C2FB23C, 0xBA2C4042, 0xBFBACDF2, 0x2191CAB5 }
	TAG_STRUCT(
		polyhedron_plane_equations_block,
		"polyhedron_plane_equations_block",
		"polyhedron_plane_equations_block",
		"s_polyhedron_plane_equations_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		POLYHEDRON_PLANE_EQUATIONS_BLOCK_ID,
		4)
	{
		{ _field_real_vector_3d, "plane equations" },
		{ _field_real, "havok w plane equations" },
		{ _field_terminator }
	};

	#define PORTRAIT_POSES_DEFINITION_STRUCT_DEFINITION_ID { 0xF0850C93, 0x4E2245F1, 0xB23D8D60, 0xE64B9FE0 }
	TAG_STRUCT(
		portrait_poses_definition_struct_definition,
		"portrait_poses_definition_struct_definition",
		"portrait_poses_definition_struct_definition",
		"s_portrait_poses_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PORTRAIT_POSES_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "portrait poses", &gui_portrait_pose_block_block },
		{ _field_terminator }
	};

	#define POWERED_SEAT_BLOCK_ID { 0x26FB2A20, 0x2F5946C9, 0x912DAE92, 0xEC1BCBB6 }
	TAG_STRUCT(
		powered_seat_block,
		"powered_seat_block",
		"powered_seat_block",
		"s_powered_seat_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		POWERED_SEAT_BLOCK_ID)
	{
		{ _field_real, "driver powerup time", nullptr, "seconds" },
		{ _field_real, "driver powerdown time", nullptr, "seconds" },
		{ _field_terminator }
	};

	#define PREDICTED_BITMAPS_BLOCK_ID { 0x7A456E83, 0x479F4218, 0xBEF99B2A, 0x736B520 }
	TAG_STRUCT(
		predicted_bitmaps_block,
		"predicted_bitmaps_block",
		"predicted_bitmaps_block",
		"s_predicted_bitmaps_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PREDICTED_BITMAPS_BLOCK_ID)
	{
		{ _field_tag_reference, "bitmap", &bitmap_group_reference$2 },
		{ _field_terminator }
	};

	#define PREDICTED_DATA_BLOCK_ID { 0x6BB73155, 0x9E884B00, 0xA986C881, 0xDA52AEA3 }
	TAG_STRUCT(
		predicted_data_block,
		"predicted_data_block",
		"predicted_data_block",
		"s_predicted_data_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PREDICTED_DATA_BLOCK_ID)
	{
		{ _field_long_integer, "predicted vocalization index" },
		{ _field_terminator }
	};

	#define PREFAB_STRUCT_DEFINITION_ID { 0xE161B79D, 0x69904839, 0xBCB1689B, 0x7197C39E }
	TAG_STRUCT(
		prefab_struct_definition,
		"prefab_struct_definition",
		"prefab_struct_definition",
		"s_prefab_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PREFAB_STRUCT_DEFINITION_ID)
	{
		{ _field_tag_reference, "bsp reference", &scenario_structure_bsp_group_reference$3 },
		{ _field_terminator }
	};

	TAG_REFERENCE(scenario_structure_bsp_group_reference$3, SCENARIO_STRUCTURE_BSP_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR);

	#define PRISMATIC_CONSTRAINTS_BLOCK_ID { 0x6514A948, 0x92AC4D16, 0x807D1F7F, 0x6DF5D8A4 }
	TAG_STRUCT(
		prismatic_constraints_block,
		"prismatic_constraints_block",
		"prismatic_constraints_block",
		"s_prismatic_constraints_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PRISMATIC_CONSTRAINTS_BLOCK_ID)
	{
		{ _field_struct, "constraint bodies", &constraint_bodies_struct },
		FIELD_PAD("XVEPD", 4),
		{ _field_real, "min_limit" },
		{ _field_real, "max_limit" },
		{ _field_real, "max_friction_force" },
		{ _field_terminator }
	};

	#define PROBABILITY_DISTRIBUTION_BLOCK_STRUCT_ID { 0x2CC76578, 0x7224D22, 0x82DAF697, 0xAB1327F8 }
	TAG_STRUCT(
		probability_distribution_block_struct,
		"probability_distribution_block_struct",
		"probability_distribution_block_struct",
		"s_probability_distribution_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROBABILITY_DISTRIBUTION_BLOCK_STRUCT_ID)
	{
		{ _field_real, "chance per second" },
		{ _field_terminator }
	};

	#define PROGRESSIONGLOBALSBLOCK_ID { 0x593DE7, 0x36974F01, 0xB8742966, 0x4420D58A }
	TAG_STRUCT(
		progressionglobalsblock,
		"progressionGlobalsBlock",
		"progressionGlobalsBlock",
		"s_progressionglobalsblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROGRESSIONGLOBALSBLOCK_ID)
	{
		{ _field_long_integer, "ordnance points gained on killing another player" },
		{ _field_long_integer, "ordnance points gained on killing an NPC" },
		{ _field_long_integer, "ordnance points lost on death" },
		{ _field_tag_reference, "droppod UI remote strike", "special version of RS used by player to position droppod location", &equipment_group_reference },
		{ _field_tag_reference, "drop pod (object)", &scenery_group_reference$3 },
		{ _field_tag_reference, "drop pod warning (effect)", "spawned at drop location at start of fanfare delay", &effect_group_reference },
		{ _field_tag_reference, "drop pod locator (effect)", "used by random ordnance drop system for air drops", &effect_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(scenery_group_reference$3, SCENERY_TAG);

	#define PROJECTILEDISTRIBUTIONCUSTOMVECTOR_ID { 0x9DB02E18, 0xCD2D4FEB, 0xA6B7BDAB, 0x84E8773C }
	TAG_STRUCT(
		projectiledistributioncustomvector,
		"projectileDistributionCustomVector",
		"projectileDistributionCustomVector",
		"s_projectiledistributioncustomvector",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROJECTILEDISTRIBUTIONCUSTOMVECTOR_ID)
	{
		{ _field_real_point_2d, "Point offset", "x-y offset - +x is right, +y is up", nullptr, "[-1.1]" },
		{ _field_terminator }
	};

	#define PROJECTILESPAWNINFLUENCEBLOCK_ID { 0x6E14464D, 0x2EB94C80, 0xA81C3654, 0xB772B549 }
	TAG_STRUCT(
		projectilespawninfluenceblock,
		"projectileSpawnInfluenceBlock",
		"projectileSpawnInfluenceBlock",
		"s_projectilespawninfluenceblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROJECTILESPAWNINFLUENCEBLOCK_ID)
	{
		{ _field_tag_reference, "projectile", &projectile_group_reference$4 },
		{ _field_real, "lead time", nullptr, "seconds" },
		{ _field_real, "collision cylinder radius", nullptr, "wu" },
		{ _field_real, "weight" },
		{ _field_terminator }
	};

	TAG_REFERENCE(projectile_group_reference$4, PROJECTILE_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY | TAG_REFERENCE_FLAG_DEPENDENCY_FOR_CACHE_FILE_SHARING);

	#define PROJECTILE_GROUP$2_ID { 0xF7D82E78, 0x19074B8C, 0x80D49472, 0x7BD600C1 }
	VERSIONED_TAG_STRUCT(
		projectile_group$2,
		"projectile",
		"projectile_group",
		"s_projectile_group$2",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROJECTILE_GROUP$2_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 83 },
		{ _field_struct, "object", &object_struct_definition },
		FIELD_GROUP_BEGIN("$$$ PROJECTILE $$$"),
		{ _field_long_flags, "flags", &projectile_flags },
		{ _field_long_flags, "secondary flags", &secondary_projectile_flags },
		{ _field_short_enum, "detonation timer starts", &projectile_detonation_timer_modes },
		{ _field_short_enum, "impact noise", &ai_sound_volume_enum },
		{ _field_real, "detonation biped proximity", "if >0, both 'detonation timer starts' + a biped must be within this proximity for condition to be met; see 'biped proximity enemies only' flag", "wu" },
		{ _field_real, "max lifetime to detonate", "if >0, projectile will detonate regardless of other conditions after this total time", "seconds" },
		{ _field_real, "collision radius", nullptr, "world units" },
		FIELD_EXPLANATION("detonation", nullptr),
		{ _field_real, "arming time", "won't detonate before this time elapses", "seconds" },
		{ _field_real, "danger radius", nullptr, "world units" },
		{ _field_real, "danger stimuli radius", "Overrides the danger radius when non-zero for stimuli related danger radius calculations.", "world units" },
		{ _field_short_integer, "danger group burst count", "The number of projectiles in this burst before this burst is considered dangerous" },
		{ _field_short_integer, "danger group burst max count", "The maximum number of projectiles we allow in a group" },
		{ _field_real_bounds, "timer", "detonation countdown (zero is untimed)", "seconds" },
		{ _field_real, "minimum velocity", "detonates when slowed below this velocity", "world units per second" },
		{ _field_real, "maximum range", "detonates after travelling this distance", "world units" },
		{ _field_real, "bounce maximum range", "detonates after travelling this distance, but is reset after a bounce.  Combines with maximum range", "world units" },
		{ _field_real, "max latch time to detonate", "projectile will detonate regardless of weapon latching after this total time", "seconds" },
		{ _field_real, "max latch time to arm", "projectile will arm itself regardless of detonation mode if latched for this amount of time.", "seconds" },
		{ _field_short_enum, "detonation noise", &ai_sound_volume_enum },
		{ _field_short_integer, "super det. projectile count" },
		{ _field_real, "super det. time" },
		{ _field_real_bounds, "super det. range", "The range within which supercombine will happen - outside this range, no supercombine", "world units" },
		{ _field_tag_reference, "super det. behavior", "An equipment reference that is attached to the target upon super detonation", &object_group_reference$6 },
		{ _field_real, "tether release safety delay", "if the weapon the projectile is tethered to loses its owner, this amount of time will pass before detonation" },
		FIELD_EXPLANATION("tethering", "A detonating tethered projectile attached to an object will use the \'super\' versions of damage ie \'super attached detonation damage\' instead of \'attached detonation damage\'."),
		{ _field_tag_reference, "detonation started", "effect", &effect_group_reference },
		{ _field_tag_reference, "detonation effect (airborne)", &effect_group_reference },
		{ _field_tag_reference, "detonation effect (ground)", &effect_group_reference },
		{ _field_tag_reference, "detonation damage", &damage_effect_group_reference },
		{ _field_tag_reference, "detonation behavior", "An equipment reference that is attached to the target upon detonation", &object_group_reference$6 },
		{ _field_tag_reference, "attached detonation damage", &damage_effect_group_reference },
		{ _field_tag_reference, "super detonation", &effect_group_reference },
		{ _field_struct, "your momma", &super_detonation_damage_struct }, // structure_version:1
		{ _field_tag_reference, "detonation sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_char_enum, "damage reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("UAQLONXGN", 1),
		{ _field_word_flags, "super detonation object types", &object_type_enum_definition },
		{ _field_tag_reference, "super attached detonation damage", &damage_effect_group_reference },
		{ _field_real, "material effect radius", "radius within we will generate material effects" },
		FIELD_EXPLANATION("flyby/impact", nullptr),
		{ _field_tag_reference, "flyby sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "flyby damage response", &damage_response_definition_group_reference$2 },
		{ _field_real, "flyby damage response max distance" },
		{ _field_tag_reference, "impact effect", &effect_group_reference },
		{ _field_tag_reference, "object impact effect", &effect_group_reference },
		{ _field_tag_reference, "impact damage", &damage_effect_group_reference },
		FIELD_EXPLANATION("boarding fields", nullptr),
		{ _field_real, "boarding detonation time" },
		{ _field_tag_reference, "boarding detonation damage", &damage_effect_group_reference },
		{ _field_tag_reference, "boarding attached detonation damage", &damage_effect_group_reference },
		FIELD_EXPLANATION("physics", "damage range low is unused unless \'distance based damage scaling uses damage range low bounds\' flag is true."),
		{ _field_real, "air gravity scale", "the proportion of normal gravity applied to the projectile when in air." },
		{ _field_real_bounds, "air damage range", "the range over which damage is scaled when the projectile is in air.", "world units" },
		{ _field_real, "water gravity scale", "the proportion of normal gravity applied to the projectile when in water." },
		{ _field_real_bounds, "water damage range", "the range over which damage is scaled when the projectile is in water.", "world units" },
		{ _field_real, "initial velocity", "bullet's velocity when inflicting maximum damage", "world units per second" },
		{ _field_real, "final velocity", "bullet's velocity when inflicting minimum damage", "world units per second" },
		{ _field_real, "indirect fire velocity", "base velocity used for ballistics calculations for indirect firing.", "world units per second" },
		{ _field_real, "ai velocity scale (normal)", "scale on the initial velocity when fired by the ai on normal difficulty (0 defaults to 1.0", nullptr, "[0-1]" },
		{ _field_real, "ai velocity scale (heroic)", "scale on the initial velocity when fired by the ai on heroic difficulty (0 defaults to 1.0)", nullptr, "[0-1]" },
		{ _field_real, "ai velocity scale (legendary)", "scale on the initial velocity when fired by the ai on legendary difficulty (0 defaults to 1.0)", nullptr, "[0-1]" },
		{ _field_real, "ai guided angular velocity scale (normal)", "scale on the guided angular velocity when fired by the ai on normal difficulty (0 defaults to 1.0", nullptr, "[0-1]" },
		{ _field_real, "ai guided angular velocity scale (legendary)", "scale on the guided angular velocity when fired by the ai on legendary difficulty (0 defaults to 1.0)", nullptr, "[0-1]" },
		{ _field_struct, "blah", &angular_velocity_lower_bound_struct }, // structure_version:1
		{ _field_angle, "guided angular velocity (upper)", nullptr, "degrees per second" },
		{ _field_angle, "guided angular velocity at rest", nullptr, "degrees per second" },
		{ _field_real_bounds, "acceleration range", "what distance range the projectile goes from initial velocity to final velocity", "world units" },
		{ _field_real, "runtime acceleration bound inverse" },
		{ _field_real_fraction, "targeted leading fraction" },
		{ _field_real, "guided projectile (outer range) error radius" },
		{ _field_real, "autoaim leading max lead time" },
		{ _field_block, "old material responses", MAKE_ALT_NAMES("material responses"), FIELD_FLAG_UNKNOWN0, &old_projectile_material_response_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "material response", &projectile_material_response_block_block },
		{ _field_block, "brute grenade", &brute_grenade_block_block },
		{ _field_block, "fire bomb grenade", &fire_bomb_grenade_block_block },
		{ _field_block, "conical spread", &conical_projection_block_block },
		{ _field_tag_reference, "grounded friction settings", "If not present, the default from global.globals is used.", &grounded_friction_group_reference },
		{ _field_tag_reference, "killcam parameters", "if not present, first person will be used.", &killcamcameraparamter_group_reference },
		{ _field_block, "Sound RTPCs", &projectilesoundrtpcblock_block },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 1, 137 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ PROJECTILE $$$"),
		{ _field_long_flags, "flags", &projectile_flags },
		{ _field_long_flags, "secondary flags", &secondary_projectile_flags },
		{ _field_short_enum, "detonation timer starts", &projectile_detonation_timer_modes },
		{ _field_short_enum, "impact noise", &ai_sound_volume_enum },
		{ _field_real, "detonation biped proximity", "if >0, both 'detonation timer starts' + a biped must be within this proximity for condition to be met; see 'biped proximity enemies only' flag", "wu" },
		{ _field_real, "max lifetime to detonate", "if >0, projectile will detonate regardless of other conditions after this total time", "seconds" },
		{ _field_real, "collision radius", nullptr, "world units" },
		FIELD_EXPLANATION("detonation", nullptr),
		{ _field_real, "arming time", "won't detonate before this time elapses", "seconds" },
		{ _field_real, "danger radius", nullptr, "world units" },
		{ _field_real, "danger stimuli radius", "Overrides the danger radius when non-zero for stimuli related danger radius calculations.", "world units" },
		{ _field_short_integer, "danger group burst count", "The number of projectiles in this burst before this burst is considered dangerous" },
		{ _field_short_integer, "danger group burst max count", "The maximum number of projectiles we allow in a group" },
		{ _field_real_bounds, "timer", "detonation countdown (zero is untimed)", "seconds" },
		{ _field_real, "minimum velocity", "detonates when slowed below this velocity", "world units per second" },
		{ _field_real, "maximum range", "detonates after travelling this distance", "world units" },
		{ _field_real, "bounce maximum range", "detonates after travelling this distance, but is reset after a bounce.  Combines with maximum range", "world units" },
		{ _field_real, "max latch time to detonate", "projectile will detonate regardless of weapon latching after this total time", "seconds" },
		{ _field_real, "max latch time to arm", "projectile will arm itself regardless of detonation mode if latched for this amount of time.", "seconds" },
		{ _field_short_enum, "detonation noise", &ai_sound_volume_enum },
		{ _field_short_integer, "super det. projectile count" },
		{ _field_real, "super det. time" },
		{ _field_real_bounds, "super det. range", "The range within which supercombine will happen - outside this range, no supercombine", "world units" },
		{ _field_tag_reference, "super det. behavior", "An equipment reference that is attached to the target upon super detonation", &object_group_reference$6 },
		{ _field_real, "tether release safety delay", "if the weapon the projectile is tethered to loses its owner, this amount of time will pass before detonation" },
		FIELD_EXPLANATION("tethering", "A detonating tethered projectile attached to an object will use the \'super\' versions of damage ie \'super attached detonation damage\' instead of \'attached detonation damage\'."),
		{ _field_tag_reference, "detonation started", "effect", &effect_group_reference },
		{ _field_tag_reference, "detonation effect (airborne)", &effect_group_reference },
		{ _field_tag_reference, "detonation effect (ground)", &effect_group_reference },
		{ _field_tag_reference, "detonation damage", &damage_effect_group_reference },
		{ _field_tag_reference, "detonation behavior", "An equipment reference that is attached to the target upon detonation", &object_group_reference$6 },
		{ _field_tag_reference, "attached detonation damage", &damage_effect_group_reference },
		{ _field_tag_reference, "super detonation", &effect_group_reference },
		{ _field_struct, "your momma", &super_detonation_damage_struct }, // structure_version:1
		{ _field_tag_reference, "detonation sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_char_enum, "damage reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("UAQLONXGN", 1),
		{ _field_word_flags, "super detonation object types", &object_type_enum_definition },
		{ _field_tag_reference, "super attached detonation damage", &damage_effect_group_reference },
		{ _field_real, "material effect radius", "radius within we will generate material effects" },
		FIELD_EXPLANATION("flyby/impact", nullptr),
		{ _field_tag_reference, "flyby sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "flyby damage response", &damage_response_definition_group_reference$2 },
		{ _field_real, "flyby damage response max distance" },
		{ _field_tag_reference, "impact effect", &effect_group_reference },
		{ _field_tag_reference, "object impact effect", &effect_group_reference },
		{ _field_tag_reference, "impact damage", &damage_effect_group_reference },
		FIELD_EXPLANATION("boarding fields", nullptr),
		{ _field_real, "boarding detonation time" },
		{ _field_tag_reference, "boarding detonation damage", &damage_effect_group_reference },
		{ _field_tag_reference, "boarding attached detonation damage", &damage_effect_group_reference },
		FIELD_EXPLANATION("physics", "damage range low is unused unless \'distance based damage scaling uses damage range low bounds\' flag is true."),
		{ _field_real, "air gravity scale", "the proportion of normal gravity applied to the projectile when in air." },
		{ _field_real_bounds, "air damage range", "the range over which damage is scaled when the projectile is in air.", "world units" },
		{ _field_real, "water gravity scale", "the proportion of normal gravity applied to the projectile when in water." },
		{ _field_real_bounds, "water damage range", "the range over which damage is scaled when the projectile is in water.", "world units" },
		{ _field_real, "initial velocity", "bullet's velocity when inflicting maximum damage", "world units per second" },
		{ _field_real, "final velocity", "bullet's velocity when inflicting minimum damage", "world units per second" },
		{ _field_real, "indirect fire velocity", "base velocity used for ballistics calculations for indirect firing.", "world units per second" },
		{ _field_real, "ai velocity scale (normal)", "scale on the initial velocity when fired by the ai on normal difficulty (0 defaults to 1.0", nullptr, "[0-1]" },
		{ _field_real, "ai velocity scale (heroic)", "scale on the initial velocity when fired by the ai on heroic difficulty (0 defaults to 1.0)", nullptr, "[0-1]" },
		{ _field_real, "ai velocity scale (legendary)", "scale on the initial velocity when fired by the ai on legendary difficulty (0 defaults to 1.0)", nullptr, "[0-1]" },
		{ _field_real, "ai guided angular velocity scale (normal)", "scale on the guided angular velocity when fired by the ai on normal difficulty (0 defaults to 1.0", nullptr, "[0-1]" },
		{ _field_real, "ai guided angular velocity scale (legendary)", "scale on the guided angular velocity when fired by the ai on legendary difficulty (0 defaults to 1.0)", nullptr, "[0-1]" },
		{ _field_struct, "blah", &angular_velocity_lower_bound_struct }, // structure_version:1
		{ _field_angle, "guided angular velocity (upper)", nullptr, "degrees per second" },
		{ _field_angle, "guided angular velocity at rest", nullptr, "degrees per second" },
		{ _field_real_bounds, "acceleration range", "what distance range the projectile goes from initial velocity to final velocity", "world units" },
		{ _field_real, "runtime acceleration bound inverse" },
		{ _field_real_fraction, "targeted leading fraction" },
		{ _field_real, "guided projectile (outer range) error radius" },
		{ _field_real, "autoaim leading max lead time" },
		{ _field_block, "old material responses", MAKE_ALT_NAMES("material responses"), FIELD_FLAG_UNKNOWN0, &old_projectile_material_response_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "material response", &projectile_material_response_block_block },
		{ _field_block, "brute grenade", &brute_grenade_block_block },
		{ _field_block, "fire bomb grenade", &fire_bomb_grenade_block_block },
		{ _field_block, "conical spread", &conical_projection_block_block },
		{ _field_tag_reference, "grounded friction settings", "If not present, the default from global.globals is used.", &grounded_friction_group_reference },
		{ _field_tag_reference, "killcam parameters", "if not present, first person will be used.", &killcamcameraparamter_group_reference },
		{ _field_block, "Sound RTPCs", &projectilesoundrtpcblock_block },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 92 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("$$$ PROJECTILE $$$", nullptr),
		{ _field_long_flags, "flags", &projectile_flags },
		{ _field_short_enum, "detonation timer starts", &projectile_detonation_timer_modes },
		{ _field_short_enum, "impact noise", &ai_sound_volume_enum },
		{ _field_short_enum, "old obsolete A in", &projectile_function_enum },
		{ _field_short_enum, "old obsolete B in", &projectile_function_enum },
		{ _field_short_enum, "old obsolete C in", &projectile_function_enum },
		{ _field_short_enum, "old obsolete D in", &projectile_function_enum },
		{ _field_tag_reference, "super detonation", &effect_group_reference },
		{ _field_real, "AI perception radius", nullptr, "world units" },
		{ _field_real, "collision radius", nullptr, "world units" },
		FIELD_EXPLANATION("detonation", nullptr),
		{ _field_real, "arming time", "won't detonate before this time elapses", "seconds" },
		{ _field_real, "danger radius", nullptr, "world units" },
		{ _field_tag_reference, "effect", &effect_group_reference },
		{ _field_real_bounds, "timer", "detonation countdown (zero is untimed)", "seconds" },
		{ _field_real, "minimum velocity", "detonates when slowed below this velocity", "world units per second" },
		{ _field_real, "maximum range", "detonates after travelling this distance", "world units" },
		FIELD_EXPLANATION("physics", nullptr),
		{ _field_real, "air gravity scale", "the proportion of normal gravity applied to the projectile when in air." },
		{ _field_real_bounds, "air damage range", "the range over which damage is scaled when the projectile is in air.", "world units" },
		{ _field_real, "water gravity scale", "the proportion of normal gravity applied to the projectile when in water." },
		{ _field_real_bounds, "water damage range", "the range over which damage is scaled when the projectile is in water.", "world units" },
		{ _field_real, "initial velocity", "bullet's velocity when inflicting maximum damage", "world units per second" },
		{ _field_real, "final velocity", "bullet's velocity when inflicting minimum damage", "world units per second" },
		{ _field_angle, "guided angular velocity", nullptr, "degrees per second" },
		{ _field_short_enum, "detonation noise", &ai_sound_volume_enum },
		FIELD_PAD("WKVWZ", 2),
		{ _field_tag_reference, "detonation started", &effect_group_reference },
		{ _field_tag_reference, "flyby sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "attached detonation damage", &damage_effect_group_reference },
		{ _field_tag_reference, "impact damage", &damage_effect_group_reference },
		FIELD_PAD("ECXIQT", 12),
		{ _field_block, "material response", &projectile_material_response_block_block },
		FIELD_EXPLANATION("New/unsorted fields", nullptr),
		{ _field_tag_reference, "impact effect", &effect_group_reference },
		{ _field_tag_reference, "detonation damage", &damage_effect_group_reference },
		
		{ _field_terminator }
	};

	STRINGS(projectile_flags)
	{
		"oriented along velocity",
		"AI must use ballistic aiming",
		"detonation max time if attached#If attach happens timeout is set to timer.high",
		"damage scales based on distance",
		"steering adjusts orientation",
		"don\'t noise up steering",
		"can track behind itself",
		"ROBOTRON STEERING#or robotech, maybe",
		"affected by phantom volumes",
		"notifies target units",
		"use ground detonation when attached",
		"AI minor tracking threat",
		"dangerous when inactive",
		"AI stimulus when attached",
		"OverPeneDetonation",
		"no impact effects on bounce",
		"RC1 overpenetration fixes",
		"Disable instantaneous first tick",
		"Constrain gravity to velocity bounds",
		"allow deceleration below final velocity#use for bouncing projectiles that also have initial/final velocity so that can reliably come to rest.",
		"supports tethering#projectile waits for trigger unlatch before immediately detonating",
		"damage_not_predictable_by_clients#used on the focus rifle to disable observer shield flash prediction for a high-dps weapon that does low damage per projectile",
		"collides with physics-only surfaces#aka sphere-only collision.  Use this for projectiles that you want to bounce smoothly up stairs, but don\'t use it for projectiles that may come to rest on stairs",
		"detonates when attached to objects#when projectiles move slowly enough they attach to objects or come to rest.  Check this for projectiles that don\'t normally attach to things like frag grenades",
		"cannot be detached by equipment#armor lock will not detach these projectiles - for the airstrike",
		"always attach regardless of material",
		"does not collide with world geometry#this gun shoots through schools",
		"is collectible#Projectile is collectible by projectile collector equipment",
		"continuous damage while attached and tethered",
		"combinations of projectiles from different weapons or different bursts of the same weapon will not trigger super combine detonation",
		"distance based damage scaling uses damage range low bounds#damage scales from 1.f --> 0.f  between \'damage range - low\' --> \'damage range - high\'",
		"skip object first tick#similar to Disable instantaneous first tick, but there\'s actually two types of ticks"
	};
	STRING_LIST(projectile_flags, projectile_flags_strings, _countof(projectile_flags_strings));

	STRINGS(secondary_projectile_flags)
	{
		"Use projectile radius for thickness testing#IF THIS IS OFF, NO THICKNESS OR CHUBBY TESTS ARE PERFORMED.",
		"Expensive chubby test#Will only be active if thickness testing is ON.",
		"Use play collision#Will use simple and smooth collision mesh.",
		"Highlight projectile in vision mode#Makes the projectile show up as an enemy in vision mode",
		"biped proximity enemies only#modifies behavior of \'detonation biped proximity\'",
		"always use localized physics#overrides early mover localize projectiles",
		"never use localized physics#overrides early mover localize projectiles"
	};
	STRING_LIST(secondary_projectile_flags, secondary_projectile_flags_strings, _countof(secondary_projectile_flags_strings));

	STRINGS(projectile_detonation_timer_modes)
	{
		"immediately",
		"after first bounce off floor{after first bounce}",
		"when at rest",
		"after first bounce off any surface"
	};
	STRING_LIST(projectile_detonation_timer_modes, projectile_detonation_timer_modes_strings, _countof(projectile_detonation_timer_modes_strings));

	STRINGS(projectile_function_enum)
	{
		"none",
		"range remaining",
		"time remaining",
		"tracer",
		"acceleration_range",
		"projectile_attach",
		"bounce",
		"damage_scale",
		"tethered_detonation_time",
		"tethered_to_local_player"
	};
	STRING_LIST(projectile_function_enum, projectile_function_enum_strings, _countof(projectile_function_enum_strings));

	#define PROJECTILE_MATERIAL_RESPONSE_BLOCK_ID { 0x3308637F, 0xA6D14D9A, 0x9838E978, 0xC1152B05 }
	TAG_STRUCT(
		projectile_material_response_block,
		"projectile_material_response_block",
		"projectile_material_response_block",
		"s_projectile_material_response_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROJECTILE_MATERIAL_RESPONSE_BLOCK_ID)
	{
		FIELD_EXPLANATION("matching criteria", nullptr),
		{ _field_string_id, "material name" },
		{ _field_short_integer, "runtime material index" },
		{ _field_word_flags, "response flags", &material_possible_response_flags },
		{ _field_real_fraction, "chance fraction", nullptr, nullptr, "[0,1]" },
		{ _field_angle_bounds, "between", nullptr, "degrees" },
		{ _field_real_bounds, "and", nullptr, "world units per second" },
		FIELD_EXPLANATION("response", nullptr),
		{ _field_short_enum, "response", &material_response },
		FIELD_EXPLANATION("misc", nullptr),
		{ _field_short_enum, "scale effects by", &effect_scale_enum },
		{ _field_angle, "angular noise", "the angle of incidence is randomly perturbed by at most this amount to simulate irregularity.", "degrees" },
		{ _field_real, "velocity noise", "the velocity is randomly perturbed by at most this amount to simulate irregularity.", "world units per second" },
		FIELD_EXPLANATION("overpenetration", nullptr),
		{ _field_real, "initial friction", "the fraction of the projectile's velocity lost on penetration" },
		FIELD_EXPLANATION("reflection", nullptr),
		{ _field_real, "parallel friction", "the fraction of the projectile's velocity parallel to the surface lost on impact" },
		{ _field_real, "perpendicular friction", "the fraction of the projectile's velocity perpendicular to the surface lost on impact" },
		{ _field_terminator }
	};

	#define PROPERTIES_STRUCT_ID { 0xB1A7EC45, 0xBC3D439E, 0xA6D9F1A4, 0xA30957AF }
	TAG_STRUCT(
		properties_struct,
		"properties_struct",
		"properties_struct",
		"s_properties_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROPERTIES_STRUCT_ID)
	{
		{ _field_block, "long properties", &property_long_value_block },
		{ _field_block, "real properties", &property_real_value_block },
		{ _field_block, "string_id properties", &property_string_id_value_block },
		{ _field_block, "component ptr properties", &propertycomponentptrvalue_block },
		{ _field_block, "tag reference properties", &property_tag_reference_value_block },
		{ _field_block, "string properties", &property_text_value_block },
		{ _field_block, "argb color properties", &property_argb_color_value_block },
		{ _field_terminator }
	};

	#define PROPERTYCOMPONENTPTRVALUE_ID { 0xB824C8C9, 0x9FE444AF, 0xA4AA330E, 0x970B0EB6 }
	TAG_STRUCT(
		propertycomponentptrvalue,
		"propertyComponentPtrValue",
		"propertyComponentPtrValue",
		"s_propertycomponentptrvalue",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROPERTYCOMPONENTPTRVALUE_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "value" },
		{ _field_byte_flags, "flags", &propertycomponentptrflags },
		FIELD_PAD("pad0", 3),
		{ _field_terminator }
	};

	STRINGS(propertycomponentptrflags)
	{
		"source is in external system"
	};
	STRING_LIST(propertycomponentptrflags, propertycomponentptrflags_strings, _countof(propertycomponentptrflags_strings));

	#define PROPERTY_ARGB_COLOR_VALUE_ID { 0xA86FC89B, 0x478A4BAC, 0x97ED6B44, 0xC3099AB8 }
	TAG_STRUCT(
		property_argb_color_value,
		"property_argb_color_value",
		"property_argb_color_value",
		"s_property_argb_color_value",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROPERTY_ARGB_COLOR_VALUE_ID)
	{
		{ _field_string_id, "name" },
		{ _field_real_argb_color, "value" },
		{ _field_terminator }
	};

	#define PROPERTY_BINDING_ID { 0x4888CD37, 0xF2EF410F, 0xB0BBC0C9, 0xD9F1582E }
	TAG_STRUCT(
		property_binding,
		"property_binding",
		"property_binding",
		"s_property_binding",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROPERTY_BINDING_ID)
	{
		{ _field_word_flags, "flags", &property_binding_flags },
		{ _field_short_enum, "conversion function", &binding_conversion_function_enum_definition },
		{ _field_string_id, "source component name" },
		{ _field_string_id, "source property name" },
		{ _field_string_id, "target component name" },
		{ _field_string_id, "target property name" },
		{ _field_terminator }
	};

	STRINGS(property_binding_flags)
	{
		"source is in external screen",
		"source is in external system",
		"target is in external system"
	};
	STRING_LIST(property_binding_flags, property_binding_flags_strings, _countof(property_binding_flags_strings));

	STRINGS(binding_conversion_function_enum_definition)
	{
		"none",
		"negate bool",
		"compare long"
	};
	STRING_LIST(binding_conversion_function_enum_definition, binding_conversion_function_enum_definition_strings, _countof(binding_conversion_function_enum_definition_strings));

	#define PROPERTY_EDITOR_ONLY_DEFINITION_ID { 0x4F28B89C, 0x45CE002A, 0xE2FCC3A9, 0xC080DDDE }
	TAG_STRUCT(
		property_editor_only_definition,
		"property_editor_only_definition",
		"property_editor_only_definition",
		"s_property_editor_only_definition",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROPERTY_EDITOR_ONLY_DEFINITION_ID)
	{
		{ _field_string_id, "name" },
		{ _field_byte_flags, "flags", &editor_property_info_flags },
		FIELD_PAD("pad0", 3),
		{ _field_terminator }
	};

	STRINGS(editor_property_info_flags)
	{
		"default value"
	};
	STRING_LIST(editor_property_info_flags, editor_property_info_flags_strings, _countof(editor_property_info_flags_strings));

	#define PROPERTY_LONG_VALUE_ID { 0x63DD2829, 0xD1F14D14, 0x96387952, 0x8FCC1FFC }
	TAG_STRUCT(
		property_long_value,
		"property_long_value",
		"property_long_value",
		"s_property_long_value",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROPERTY_LONG_VALUE_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_integer, "value" },
		{ _field_terminator }
	};

	#define PROPERTY_REAL_VALUE_ID { 0x758DA8A4, 0x59124090, 0xA1FB5462, 0xD2453C69 }
	TAG_STRUCT(
		property_real_value,
		"property_real_value",
		"property_real_value",
		"s_property_real_value",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROPERTY_REAL_VALUE_ID)
	{
		{ _field_string_id, "name" },
		{ _field_real, "value" },
		{ _field_terminator }
	};

	#define PROPERTY_STRING_ID_VALUE_ID { 0x63CAF970, 0xFAF4EA9, 0xB3FEB12C, 0xA47C0015 }
	TAG_STRUCT(
		property_string_id_value,
		"property_string_id_value",
		"property_string_id_value",
		"s_property_string_id_value",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROPERTY_STRING_ID_VALUE_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "value" },
		{ _field_terminator }
	};

	#define PROPERTY_TAG_REFERENCE_VALUE_ID { 0xCAA80A14, 0x9B1245B5, 0xA53A40F5, 0xFFA44C2E }
	TAG_STRUCT(
		property_tag_reference_value,
		"property_tag_reference_value",
		"property_tag_reference_value",
		"s_property_tag_reference_value",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROPERTY_TAG_REFERENCE_VALUE_ID)
	{
		{ _field_string_id, "name" },
		{ _field_tag_reference, "value", &_reference$3 },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference$3, INVALID_TAG);

	#define PROPERTY_TEXT_VALUE_ID { 0x9B80DCD3, 0xD0F84F46, 0xAF7A6043, 0x97549DDA }
	TAG_STRUCT(
		property_text_value,
		"property_text_value",
		"property_text_value",
		"s_property_text_value",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PROPERTY_TEXT_VALUE_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_string, "value" },
		{ _field_terminator }
	};

	#define PURCHASE_PLAYER_APP_BLOCK_ID { 0x3E41A4EE, 0x646248BE, 0xA5ACD8A5, 0x59F267F7 }
	TAG_STRUCT(
		purchase_player_app_block,
		"purchase_player_app_block",
		"purchase_player_app_block",
		"s_purchase_player_app_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASE_PLAYER_APP_BLOCK_ID)
	{
		{ _field_string_id, "object_name", "This must match an item in the custom app globals." },
		{ _field_terminator }
	};

	#define PURCHASE_PLAYER_APP_MOD_SLOT_BLOCK_ID { 0xB5C06B4D, 0xA3C74BFA, 0x8ABCC728, 0xB53E8C35 }
	TAG_STRUCT(
		purchase_player_app_mod_slot_block,
		"purchase_player_app_mod_slot_block",
		"purchase_player_app_mod_slot_block",
		"s_purchase_player_app_mod_slot_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASE_PLAYER_APP_MOD_SLOT_BLOCK_ID)
	{
		{ _field_byte_integer, "app_count", "Total apps you're allowed (from 0 to 2)." },
		{ _field_byte_integer, "mod_count", "Total mods you're allowed (from 0 to 1)." },
		{ _field_terminator }
	};

	#define PURCHASE_PLAYER_APPEARANCE_EFFECT_EMBLEM_INDEX_BLOCK_ID { 0x10888DA4, 0x230542AF, 0x891842A8, 0xF57892D2 }
	TAG_STRUCT(
		purchase_player_appearance_effect_emblem_index_block,
		"purchase_player_appearance_effect_emblem_index_block",
		"purchase_player_appearance_effect_emblem_index_block",
		"s_purchase_player_appearance_effect_emblem_index_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASE_PLAYER_APPEARANCE_EFFECT_EMBLEM_INDEX_BLOCK_ID)
	{
		{ _field_char_integer, "emblem index" },
		{ _field_terminator }
	};

	#define PURCHASE_PLAYER_APPEARANCE_EFFECT_MODEL_PERMUTATION_BLOCK_ID { 0x4F98615, 0x46AE40E6, 0xB62BDDDF, 0x8C73E74C }
	TAG_STRUCT(
		purchase_player_appearance_effect_model_permutation_block,
		"purchase_player_appearance_effect_model_permutation_block",
		"purchase_player_appearance_effect_model_permutation_block",
		"s_purchase_player_appearance_effect_model_permutation_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASE_PLAYER_APPEARANCE_EFFECT_MODEL_PERMUTATION_BLOCK_ID)
	{
		{ _field_char_enum, "model_region", "See player customization globals, linked from globals.globals.", &player_model_customization_area_enum },
		FIELD_PAD("pad1", 3),
		{ _field_string_id, "model_customization_selection_name", "This must match one of the selections in the model customization globals (within the selected region)." },
		{ _field_terminator }
	};

	STRINGS(player_model_customization_area_enum)
	{
		"spartan helmet",
		"spartan chest",
		"elite armor",
		"unused_1",
		"unused_2",
		"unused_3",
		"unused_4",
		"unused_5"
	};
	STRING_LIST(player_model_customization_area_enum, player_model_customization_area_enum_strings, _countof(player_model_customization_area_enum_strings));

	#define PURCHASE_PLAYER_APPEARANCE_EFFECT_NON_MODEL_PERMUTATION_BLOCK_ID { 0x2B8FD9DD, 0xB6B84F52, 0x9786DDEE, 0x1E6BEC95 }
	TAG_STRUCT(
		purchase_player_appearance_effect_non_model_permutation_block,
		"purchase_player_appearance_effect_non_model_permutation_block",
		"purchase_player_appearance_effect_non_model_permutation_block",
		"s_purchase_player_appearance_effect_non_model_permutation_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASE_PLAYER_APPEARANCE_EFFECT_NON_MODEL_PERMUTATION_BLOCK_ID)
	{
		{ _field_char_enum, "non_model_region", "See player customization globals, linked from globals.globals.", &player_non_model_customization_area_enum },
		FIELD_PAD("pad1", 3),
		{ _field_string_id, "non_model_customization_selection_name", "This must match one of the selections in the model customization globals (within the selected region)." },
		{ _field_terminator }
	};

	STRINGS(player_non_model_customization_area_enum)
	{
		"spartan armour effect",
		"elite armour effect"
	};
	STRING_LIST(player_non_model_customization_area_enum, player_non_model_customization_area_enum_strings, _countof(player_non_model_customization_area_enum_strings));

	#define PURCHASE_PLAYER_APPEARANCE_EFFECT_VISOR_TINT_BLOCK_ID { 0xF420151F, 0xD41D481B, 0xA60F863D, 0xB8318C9 }
	TAG_STRUCT(
		purchase_player_appearance_effect_visor_tint_block,
		"purchase_player_appearance_effect_visor_tint_block",
		"purchase_player_appearance_effect_visor_tint_block",
		"s_purchase_player_appearance_effect_visor_tint_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASE_PLAYER_APPEARANCE_EFFECT_VISOR_TINT_BLOCK_ID)
	{
		{ _field_string_id, "visor color name" },
		{ _field_terminator }
	};

	#define PURCHASE_PLAYER_ITEM_BLOCK_ID { 0x6DF197DD, 0x56AA434D, 0xB24D15BE, 0xCE1CC937 }
	TAG_STRUCT(
		purchase_player_item_block,
		"purchase_player_item_block",
		"purchase_player_item_block",
		"s_purchase_player_item_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASE_PLAYER_ITEM_BLOCK_ID)
	{
		{ _field_char_enum, "item_category", "From the global multiplayer object list.", &player_item_category_enum },
		FIELD_PAD("pad1", 3),
		{ _field_string_id, "object_name", "This must match one of the global objects." },
		{ _field_byte_integer, "object variant index", "e.g. used for weapon skins" },
		FIELD_PAD("ppib", 3),
		{ _field_terminator }
	};

	STRINGS(player_item_category_enum)
	{
		"weapon",
		"grenade",
		"equipment",
		"vehicle"
	};
	STRING_LIST(player_item_category_enum, player_item_category_enum_strings, _countof(player_item_category_enum_strings));

	#define PURCHASE_PLAYER_LOADOUT_SLOT_BLOCK_ID { 0xA652532, 0xF8B48C7, 0x9DDBC3AE, 0xF94BA410 }
	TAG_STRUCT(
		purchase_player_loadout_slot_block,
		"purchase_player_loadout_slot_block",
		"purchase_player_loadout_slot_block",
		"s_purchase_player_loadout_slot_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASE_PLAYER_LOADOUT_SLOT_BLOCK_ID)
	{
		{ _field_byte_integer, "slot_count", "Total slots you're allowed." },
		{ _field_terminator }
	};

	#define PURCHASE_PREREQUISITE_COMMENDATION_DEFINITION_BLOCK_ID { 0xD075D6AB, 0x69CF49C9, 0x8AA142ED, 0x6CA22A5E }
	TAG_STRUCT(
		purchase_prerequisite_commendation_definition_block,
		"purchase_prerequisite_commendation_definition_block",
		"purchase_prerequisite_commendation_definition_block",
		"s_purchase_prerequisite_commendation_definition_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASE_PREREQUISITE_COMMENDATION_DEFINITION_BLOCK_ID)
	{
		{ _field_string_id, "commendation id", "This must match one of the commendation names." },
		{ _field_char_enum, "type", &aggregatordependenttypeenumdefinition },
		{ _field_char_integer, "minimum level", "This field is ignored if 'type' is set to 'aggregator'." },
		FIELD_PAD("PAD1", 2),
		{ _field_terminator }
	};

	#define PURCHASE_PREREQUISITE_GRADE_DEFINITION_BLOCK_ID { 0x9AF241A1, 0x6F44BE8, 0x893A86A5, 0x707FD4A4 }
	TAG_STRUCT(
		purchase_prerequisite_grade_definition_block,
		"purchase_prerequisite_grade_definition_block",
		"purchase_prerequisite_grade_definition_block",
		"s_purchase_prerequisite_grade_definition_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASE_PREREQUISITE_GRADE_DEFINITION_BLOCK_ID)
	{
		{ _field_long_integer, "enlistment index" },
		{ _field_long_integer, "minimum grade" },
		{ _field_terminator }
	};

	#define PURCHASE_PREREQUISITES_OFFER_DEFINITION_BLOCK_ID { 0x28A28E77, 0x1D3E44AB, 0x9249DE5E, 0xD58EA8FE }
	TAG_STRUCT(
		purchase_prerequisites_offer_definition_block,
		"purchase_prerequisites_offer_definition_block",
		"purchase_prerequisites_offer_definition_block",
		"s_purchase_prerequisites_offer_definition_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASE_PREREQUISITES_OFFER_DEFINITION_BLOCK_ID)
	{
		{ _field_char_enum, "offer type", &marketplaceoffertypeenum },
		FIELD_PAD("pad1", 3),
		{ _field_terminator }
	};

	STRINGS(marketplaceoffertypeenum)
	{
		"DeadeyeHelmet",
		"LocusHelmet",
		"GungnirPulse",
		"VenatorRaptor",
		"CIOWeb",
		"HazopForest",
		"OceanicCircuit",
		"BattleRifleArctic",
		"BonebreakerEmblem",
		"AssassinEmblem",
		"BulletproofEmblem",
		"SpartanEmblem",
		"MjolnirEmblem",
		"LCE1Emblem",
		"SpartanIVArmorUnique",
		"AssaultRifleUnique",
		"Specializations",
		"UnicornEmblem",
		"UnicornArmor",
		"UnicornLightRifle",
		"LiveEmblem",
		"ScannerHelmet",
		"StriderHelmet",
		"FalconEmblem",
		"Reserved01",
		"Reserved02",
		"Reserved04",
		"Reserved08",
		"Reserved10",
		"Reserved20",
		"Reserved40",
		"ReservedDoNotUse80"
	};
	STRING_LIST(marketplaceoffertypeenum, marketplaceoffertypeenum_strings, _countof(marketplaceoffertypeenum_strings));

	#define PURCHASE_PREREQUISITES_UNLOCKABLE_DEFINITION_BLOCK_ID { 0xA7314672, 0x7AB34B28, 0xA1AB8A3A, 0x9F9A1765 }
	TAG_STRUCT(
		purchase_prerequisites_unlockable_definition_block,
		"purchase_prerequisites_unlockable_definition_block",
		"purchase_prerequisites_unlockable_definition_block",
		"s_purchase_prerequisites_unlockable_definition_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PURCHASE_PREREQUISITES_UNLOCKABLE_DEFINITION_BLOCK_ID)
	{
		{ _field_string_id, "unlockable name" },
		{ _field_terminator }
	};

	#define PVS_BOUND_OBJECT_IDENTIFIERS_BLOCK_ID { 0x4AB47B87, 0xCD3440E9, 0x957EFE53, 0x1AD8B62 }
	TAG_STRUCT(
		pvs_bound_object_identifiers_block,
		"pvs_bound_object_identifiers_block",
		"pvs_bound_object_identifiers_block",
		"s_pvs_bound_object_identifiers_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PVS_BOUND_OBJECT_IDENTIFIERS_BLOCK_ID)
	{
		{ _field_struct, "object ID", &scenario_object_id_struct },
		{ _field_terminator }
	};

	#define PVS_BOUND_OBJECT_REFERENCES_BLOCK_ID { 0xAAB47B87, 0xCD3AA0E9, 0x9BBEFE53, 0x1AD8BCC }
	TAG_STRUCT(
		pvs_bound_object_references_block,
		"pvs_bound_object_references_block",
		"pvs_bound_object_references_block",
		"s_pvs_bound_object_references_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PVS_BOUND_OBJECT_REFERENCES_BLOCK_ID)
	{
		{ _field_struct, "scenario object reference", &scenario_object_reference_struct },
		{ _field_terminator }
	};

	#define QUANTIZED_ORIENTATION_STRUCT_ID { 0x214A3836, 0x146C45DD, 0x91315D22, 0x78CBEE5D }
	TAG_STRUCT(
		quantized_orientation_struct,
		"quantized_orientation_struct",
		"quantized_orientation_struct",
		"s_quantized_orientation_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		QUANTIZED_ORIENTATION_STRUCT_ID)
	{
		{ _field_short_integer, "rotation x" },
		{ _field_short_integer, "rotation y" },
		{ _field_short_integer, "rotation z" },
		{ _field_short_integer, "rotation w" },
		{ _field_real_point_3d, "default translation" },
		{ _field_real, "default scale" },
		{ _field_terminator }
	};

	#define RADIAL_DISTRIBUTION_BLOCK_STRUCT_ID { 0xDA5E1767, 0x3784497B, 0x90304D5B, 0xE716564 }
	TAG_STRUCT(
		radial_distribution_block_struct,
		"radial_distribution_block_struct",
		"radial_distribution_block_struct",
		"s_radial_distribution_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RADIAL_DISTRIBUTION_BLOCK_STRUCT_ID)
	{
		{ _field_real, "radius" },
		{ _field_short_integer, "travel time (ticks)" },
		FIELD_PAD("post-travel-time", 2),
		{ _field_terminator }
	};

	#define RADIANCE_TRANSFER_MATRIX_STRUCT_DEFINITION_ID { 0xFA34AD9, 0x785D45B5, 0xA12B1861, 0x7B84E30C }
	TAG_STRUCT(
		radiance_transfer_matrix_struct_definition,
		"radiance_transfer_matrix",
		"radiance_transfer_matrix",
		"s_radiance_transfer_matrix",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RADIANCE_TRANSFER_MATRIX_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "element" },
		{ _field_terminator }
	};

	#define RAGDOLL_CONSTRAINTS_BLOCK_ID { 0x71F3DE11, 0xA1B24FB1, 0xAEBDF8E1, 0x2005975C }
	TAG_STRUCT(
		ragdoll_constraints_block,
		"ragdoll_constraints_block",
		"ragdoll_constraints_block",
		"s_ragdoll_constraints_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RAGDOLL_CONSTRAINTS_BLOCK_ID)
	{
		{ _field_struct, "constraint bodies", &constraint_bodies_struct },
		FIELD_PAD("OVIM", 4),
		{ _field_real, "min twist" },
		{ _field_real, "max twist" },
		{ _field_real, "min cone" },
		{ _field_real, "max cone" },
		{ _field_real, "min plane" },
		{ _field_real, "max plane" },
		{ _field_real, "max friciton torque" },
		{ _field_terminator }
	};

	#define RAIN_DEFINITION_STRUCT_DEFINITION_ID { 0xFC205D87, 0xB7394393, 0x92C1BD07, 0x91B04875 }
	TAG_STRUCT(
		rain_definition_struct_definition,
		"rain_definition_struct_definition",
		"rain_definition_struct_definition",
		"s_rain_definition_struct_definition",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RAIN_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "version", "INTERNAL TAG USE ONLY DO NOT CHANGE" },
		{ _field_real, "rain amount", "fade control for all rain effects", nullptr, "[0,1]" },
		FIELD_EXPLANATION("Rain Effects", "These effects are applied when this rain is active\n"),
		{ _field_tag_reference, "effect", &effect_group_reference },
		{ _field_tag_reference, "screen effect", &area_screen_effect_group_reference },
		{ _field_tag_reference, "camera fx", &camera_fx_settings_group_reference },
		FIELD_GROUP_BEGIN("particles"),
		{ _field_long_flags, "flags", &rain_particle_flags },
		{ _field_tag_reference, "drop texture", &bitmap_group_reference$2 },
		{ _field_tag_reference, "splash texture", &bitmap_group_reference$2 },
		{ _field_real, "density", nullptr, "particles per square world unit" },
		{ _field_real_vector_3d, "direction", "k -1 is down" },
		{ _field_real, "fall speed", nullptr, "world units per second" },
		{ _field_real, "size", "size of the rain particles", "world units" },
		{ _field_real, "max vertical camera-relative motion", "the max velocity in which we allow world-relative vertical rain motion.  over this velocity we clamp to camera-relative vertical rain motion", "world units per second" },
		{ _field_real, "max aspect ratio", "height to width ratio" },
		{ _field_real, "min aspect for intensity", "intensity will scale inversely with aspect ratio, this clamps the aspect ratio before scaling" },
		{ _field_real_rgb_color, "tint color", "tints the rain drops" },
		{ _field_real, "intensity", "brightness of the rain drops" },
		{ _field_real, "alpha scale", "transparency of the rain drops" },
		{ _field_real, "drop near fade distance", "distance at which the drops fade out", "world units" },
		{ _field_real, "collision range", "depth range over which the particle will search for collisions with the depth buffer", "world units" },
		{ _field_real, "splash size", "length of a side of the splash particle card", "world units" },
		{ _field_real, "splash height", "height off the ground of the center of the splash particle", "world units" },
		{ _field_real, "splash lifetime", "how long the splash lasts", "seconds" },
		{ _field_real, "near fade distance", "distance at which the splash fades out", "world units" },
		{ _field_real_rgb_color, "splash tint", "tints the splashes" },
		{ _field_real, "splash intensity", "brightness of the splashes" },
		{ _field_real, "splash alpha", "transparency of the splashes" },
		{ _field_real, "ripple initial size", "size of the ripple at impact" },
		{ _field_real, "ripple max size", "maximum size of the ripple" },
		{ _field_real, "ripple lifetime", "how long the ripples last", "seconds" },
		{ _field_real, "ripple intensity", "intensifies ripples" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("rain sheet"),
		{ _field_tag_reference, "rain sheet texture", &bitmap_group_reference$2 },
		{ _field_real, "rain sheet speed" },
		{ _field_real, "rain sheet intervals" },
		{ _field_real, "rain sheet minimum distance" },
		{ _field_real, "rain sheet intensity" },
		{ _field_real, "rain texture tile scale" },
		{ _field_real, "rain sheet parallax speed" },
		{ _field_real, "rain sheet depth fade", MAKE_ALT_NAMES("rain sheet fade factor") },
		{ _field_real, "transparent sort distance" },
		{ _field_real, "transparent sort layer" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("light volume"),
		{ _field_tag_reference, "light volume texture", &bitmap_group_reference$2 },
		{ _field_real, "light volume intensity" },
		{ _field_real, "light volume texture scale" },
		{ _field_real, "rain drop/particle intensity" },
		{ _field_real, "farthest rain particle distance" },
		{ _field_real, "closest rain sheet distance" },
		{ _field_real, "rain drop length compensation", "make it longer when it is far" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("rain transition"),
		{ _field_real, "wetness fade in time", nullptr, "seconds" },
		{ _field_real, "wetness fade out time", nullptr, "seconds" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("material dim"),
		{ _field_real, "dim of point light" },
		{ _field_real, "dim of imposters" },
		{ _field_real, "dim of decorators" },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(rain_particle_flags)
	{
		"alpha blend",
		"disable collision"
	};
	STRING_LIST(rain_particle_flags, rain_particle_flags_strings, _countof(rain_particle_flags_strings));

	#define RAIN_RIPPLE_SETTING_BLOCK_ID { 0x514BC6BA, 0x360C4B17, 0x8CA56212, 0x9E0BB16A }
	TAG_STRUCT(
		rain_ripple_setting_block,
		"rain_ripple_setting_block",
		"rain_ripple_setting_block",
		"s_rain_ripple_setting_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RAIN_RIPPLE_SETTING_BLOCK_ID)
	{
		{ _field_tag_reference, "rain ripple texture", &bitmap_group_reference$2 },
		{ _field_real, "group period time", nullptr, "seconds" },
		{ _field_real, "texture tile size", nullptr, "world units" },
		{ _field_real, "reflection intensify" },
		{ _field_terminator }
	};

	#define RANGED_ANIMATION_ENTRY_BLOCK_STRUCT_ID { 0x951AB02D, 0xA1C6432B, 0x96E32919, 0x7BBE629D }
	TAG_STRUCT(
		ranged_animation_entry_block_struct,
		"ranged_animation_entry_block_struct",
		"ranged_animation_entry_block_struct",
		"s_ranged_animation_entry_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RANGED_ANIMATION_ENTRY_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "overlay group", MAKE_ALT_NAMES("pose overlay|overlay"), &overlay_group_definition_block_block },
		{ _field_short_block_index, "ik set", &animation_ik_set_block },
		{ _field_struct, "animation", &animation_index_struct },
		{ _field_real, "animation parameter", "Numerical value associated with the ranged action animation (e.g. velocity for jumps)" },
		{ _field_real, "animation parameter b" },
		{ _field_terminator }
	};

	#define RASTERIZER_CACHE_FILE_GLOBALS_STRUCT_DEFINITION_ID { 0x3FAFA78E, 0x905B48F5, 0x82089983, 0x561E7C3B }
	TAG_STRUCT(
		rasterizer_cache_file_globals_struct_definition,
		"rasterizer_cache_file_globals_struct_definition",
		"rasterizer_cache_file_globals_struct_definition",
		"s_rasterizer_cache_file_globals_struct_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RASTERIZER_CACHE_FILE_GLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "texture header count" },
		{ _field_long_integer, "maximum vertex shader gprs" },
		{ _field_long_integer, "maximum pixel shader gprs" },
		{ _field_terminator }
	};

	#define RASTERIZER_COMPILED_SHADER_STRUCT_ID { 0xF99B344C, 0x5A344EF5, 0x8D1FB1EE, 0xFC6B0182 }
	TAG_STRUCT(
		rasterizer_compiled_shader_struct,
		"rasterizer_compiled_shader_struct",
		"rasterizer_compiled_shader_struct",
		"s_rasterizer_compiled_shader_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RASTERIZER_COMPILED_SHADER_STRUCT_ID)
	{
		{ _field_long_flags, "shader flags", &shader_flags },
		{ _field_data, "xenon compiled shader", MAKE_ALT_NAMES("..:xenon compiled shader"), &xenon_compiled_shader_data },
		{ _field_data, "dx9 compiled shader", MAKE_ALT_NAMES("..:dx9 compiled shader"), &dx9_compiled_shader_data },
		FIELD_EXPLANATION("Xenon constant table", nullptr),
		{ _field_struct, "xenon rasterizer constant table", &global_rasterizer_constant_table_struct },
		FIELD_EXPLANATION("DX9 constant table", nullptr),
		{ _field_struct, "dx9 rasterizer constant table", &global_rasterizer_constant_table_struct },
		{ _field_dword_integer, "gprs", MAKE_ALT_NAMES("..:gprs") },
		{ _field_long_integer, "cache file reference" },
		{ _field_terminator }
	};

	STRINGS(shader_flags)
	{
		"requires constant table"
	};
	STRING_LIST(shader_flags, shader_flags_strings, _countof(shader_flags_strings));

	#define RASTERIZER_CONSTANT_BLOCK_ID { 0x9EAC07AB, 0x559D43EF, 0x88AEF5BC, 0x656E3255 }
	TAG_STRUCT(
		rasterizer_constant_block,
		"rasterizer_constant_block",
		"rasterizer_constant_block",
		"s_rasterizer_constant_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RASTERIZER_CONSTANT_BLOCK_ID)
	{
		{ _field_string_id, "constant name" },
		{ _field_word_integer, "register start" },
		{ _field_byte_integer, "register count" },
		{ _field_char_enum, "register set", &register_set_enum },
		{ _field_terminator }
	};

	#define RASTERIZER_GLOBALS_STRUCT_DEFINITION_ID { 0x1E0FE0EA, 0x9D3048D5, 0x9D86E7F7, 0xCAA91C4A }
	TAG_STRUCT(
		rasterizer_globals_struct_definition,
		"rasterizer_globals_struct_definition",
		"rasterizer_globals_struct_definition",
		"s_rasterizer_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RASTERIZER_GLOBALS_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("default bitmaps", "0:  ............... default 2D texture (white)\n1:  ............... default normal map (no bump)\n2:  ............... default cube map (error pattern)\n3:  ............... color bars\n4:  ............... black 2D texture\n5:  ............... transparent black 2D texture\n6:  ............... gray 2D texture\n7:  ............... auto exposure weight\n8:  ............... auto exposure weight (4x3)\n9:  ............... stencil dither pattern\n10: ............... smooth noise warp\n11: ............... ripple pattern\n12: ............... rain ripple\n13: ............... unsigned noise\n14: ............... MLAA area map\n15: ............... red 2D texture\n16: ............... green 2D texture\n17: ............... blue 2D texture\n18: ............... cyan 2D texture\n19: ............... dxt5 atlas texture\n20: ............... dxn atlas texture\n"),
		{ _field_block, "default bitmaps", &default_textures_refs_block_block },
		FIELD_EXPLANATION("material textures", "0: ............... lightmap falloff sharpening\n6: ............... Approximate specular curve\n"),
		{ _field_block, "material textures", &material_textures_refs_block_block },
		FIELD_EXPLANATION("explicit shaders", "0: ............... debug\n1: ............... debug2d\n2: ............... copy w/ scale\n3: ............... edge detect\n4: ............... blendshape generate\n5: ............... bloom: downsample 4x4 (with bloom curve)\n6: ............... bloom: downsample 4x4\n7: ............... bloom: copy RGBE -> RGB\n8: ............... debug_mesh\n9: ............... bloom: add downsampled\n10: ...............bloom: add\n11: .............. bloom: kernel blur (11 horizontal)\n12: .............. bloom: kernel blur (11 vertical)\n13: .............. cubemap: blur (phi)\n14: .............. cubemap: blur (theta)\n15: .............. cubemap: clamp\n16: .............. cubemap: divide\n17: .............. write depth\n18: .............. final composite\n19: .............. tracer stateless setup\n20: .............. transparent\n21: .............. ordnance map generate\n22: .............. postprocess hologram\n23: .............. overhead map geometry\n24: .............. hologram composite\n25: .............. volume fog\n26: .............. particle update\n27: .............. particle spawn\n28: .............. screenshot combine\n29: .............. downsample 2x2\n30: .............. rotate 2d\n31: .............. bspline resample\n32: .............. bloom; downsample 4x4 (with bloom curve + DOF)\n33: .............. final composite (with DOF)\n34: .............. convolve 5-tap kernel\n35: .............. exposure downsample\n36: .............. yuv to rgb\n37: .............. displacement\n38: .............. screenshot display\n39: .............. downsample 4x4 block\n40: .............. crop\n41: .............. screenshot combine (with DOF)\n42: .............. gamma correction\n43: .............. poisson blur (alpha)\n44: .............. poisson blur (depth)\n45: .............. stencil 8x8 dither pattern\n46: .............. lens flare render\n47: .............. decorator render wind billboard\n48: .............. bloom: NEW downsample 4x4 block (with bloom curve)\n49: .............. bloom: NEW downsample 4x4 gaussian\n50: .............. apply color matrix\n51: .............. copy\n52: .............. shadow geometry\n53: .............. shadow apply\n54: .............. gradient\n55: .............. alpha test\n56: .............. patchy fog\n57: .............. light volume\n58: .............. water ripple\n59: .............. double gradient\n60: .............. sniper scope\n61: .............. shield impact\n62: .............. cheap particle spawn explicit\n63: .............. player emblem-screen\n64: .............. implicit hill\n65: .............. chud overlay blend\n66: .............. bloom add alpha1\n67: .............. lightmap debug\n68: .............. restore LDR, HDR, and depth to EDRAM\n69: .............. unused\n70: .............. decorators static billboard\n71: .............. decorators mesh\n72: .............. decorators far object\n73: .............. decorators underwater\n74: .............. final composite zoom\n75: .............. shadow apply clouds\n76: .............. shadow apply point\n77: .............. shadow apply bilinear\n78: .............. shadow apply fancy\n79: .............. shadow apply faster\n81: .............. displacement with motion blur\n82: .............. decorators volume\n83: .............. screenshot memexport\n84: .............. shadow apply variance\n85: .............. shadow generate variance\n86: .............. shadow apply blob\n87: .............. shadow apply variance no normal test\n88: .............. custom gamma correct\n89: .............. pixel copy\n90: .............. antialias blur combine\n91: .............. UNUSED\n92: .............. hud camera\n93: .............. hud camera nightvision\n94: .............. hud camera mask\n.\n.\n99-114 screen space light...\n.\n.\n116: .............. render imposter\n109: .\n110: .\n119.................shield impact procedural uv\n120.................render_rain_particles\n121.................weather wet\n122-118 rain splash...\n127.................rain sheets\n128.................screen space atmosphere fog\n129.................debug portals\n130.................shader light debug\n131.................shader light debug frustum\n132.................cui copy\n133.................cui change channel\n134.................cui linear gradient\n135.................cui directional blur\n136.................cui overlay mask\n137.................initialize cheap particles\n138.................update cheap particles\n139.................render cheap particles\n140.................spawn cheap particles\n141.................cui emblem\n142.................planar fog\n.\n.\n155.................cui debug\n156.................rigid world geometry\n157.................effects debug wireframe\n158.................effects debug heatmap\n159.................downsample 2x2 block bloom\n160.................kernel 5 sqrt\n161: ............. gaussian shadow\n162: ............. poisson shadow\n163: ............. vector hud\n176: ............. restore depth to EDRAM\n177: ............. restore color to EDRAM\n179: ............. midnight light parfait\n180: ............. particleize\n181: ............. midgraph poisson shadow 8\n182: ............. midgraph poisson shadow 6\n183: ............. gobo parfait\n184: ............. specular parfait\n185: ............. spotlight specular parfait\n186: ............. spotlight gobo specular parfait\n187: ............. gobo specular parfait\n188: ............. forge lightmap render sun structure\n189: ............. forge lightmap render sun\n190: ............. forge shadow render\n191: ............. forge lightmap render\n192: ............. forge lightmap block merge\n193: ............. forge lightmap block compress\n194: ............. forge lightmap error\n195: ............. character lighting\n196: ............. vision environment shader\n197: ............. vision object shader\n198: ............. forge lightmap postprocess\n199: ............. cui gamma correct copy\n200: ............. cui gamma correct overlay mask\n201: ............. copy surface sqrt\n202: ............. copy surface gamma 2.2\n203: ............. decorator_wind_volume\n204: ............. Midnight Point Physically Correct\n205: ............. tracer spawn\n206: ............. tracer update\n207: ............. polyart render\n208: ............. gamma correct double draw text\n209: ............. volumetric light shafts\n210: ............. Cui: Gamma correct text\n211: ............. MLAA Generate\n212: ............. FXAA\n213: ............. Hud Meter\n214: ............. Quadrant Gradient\n215: ............. Blend: Overlay\n216: ............. Filter: DropShadow\n217: ............. Filter: OuterGlow\n218: ............. Filter: InnerGlow\n219: ............. Filter: Stroke\n220: ............. Filter: EdgeDetectSetup\n221: ............. Cui: Clip corners\n222: ............. Cui: Chromatic aberration\n223: ............. Cui: Hud Meter Two Tone\n224: ............. Cui: Background blur\n225: ............. Cui: high contrast additive\n226: ............. Cui: double draw additive\n227: ............. Cui: Adjust hsv\n228: ............. Cui: Hud meter radial\n229: ............. Cui: Hud meter color blend\n230: ............. Chud: Damage generate\n231: ............. Chud: Damage apply\n232: ............. Forge: Tint highlighted\n233: ............. Forge: Tint selected\n234: ............. Forge: Tint locked\n235: ............. Cui: Shearing\n"),
		{ _field_block, "explicit shaders", &explicit_shader_refs_block_block },
		{ _field_tag_reference, "Active Camo Distortion Texture", &bitmap_group_reference$2 },
		{ _field_tag_reference, "default performance throttles", &performance_throttles_group_reference },
		{ _field_tag_reference, "Logo Texture", &bitmap_group_reference$2 },
		{ _field_tag_reference, "Cheap Particle Type Library", &cheap_particle_type_library_group_reference$2 },
		{ _field_tag_reference, "Emblem Library", &emblem_library_group_reference },
		FIELD_EXPLANATION("Motion blur parameters", "max blur:............  max amount to blur, as a percentage of the screen\nblur scale:..........  scales blur for a given velocity\ncenter falloff:....... reduces motion blur around the screen center (larger values give smaller reduction regions...)\nexpected dt:.......... expected time per tick, in seconds (used to correct motion blur in fast/slow frames)\n"),
		{ _field_real, "max blur", "max amount to blur, as a percentage of the screen", nullptr, "[0 - 0.2]", MAKE_ALT_NAMES("max blur x") },
		{ _field_real, "blur scale", "scales blur for a given velocity", nullptr, "[0 - 0.5]", MAKE_ALT_NAMES("blur scale x") },
		{ _field_real, "center falloff x", "larger values make smaller areas of no blur", nullptr, "[0 - 20]" },
		{ _field_real, "center falloff y", "larger values make smaller areas of no blur", nullptr, "[0 - 20]" },
		FIELD_EXPLANATION("screen space light parameters", nullptr),
		{ _field_real, "cheap albedo blend", "for all screen space light without shader reference" },
		FIELD_EXPLANATION("Lighting layer debug mode albedo override", "By default the engine uses linear 50% grey\nSet a non-black color to override this debug color\n"),
		{ _field_real_rgb_color, "lighting layer albedo color", "the floating point values are linear and what the shader will sample for albedo" },
		{ _field_tag_reference, "Hologram Camera FX", &camera_fx_settings_group_reference },
		{ _field_tag_reference, "Global load screen model", &load_screen_group_reference },
		{ _field_real, "Global load screen gradient coordinate" },
		{ _field_tag_reference, "airprobe render model", &render_model_group_reference$8 },
		{ _field_terminator }
	};

	TAG_REFERENCE(performance_throttles_group_reference, PERFORMANCE_THROTTLES_TAG);

	TAG_REFERENCE(cheap_particle_type_library_group_reference$2, CHEAP_PARTICLE_TYPE_LIBRARY_TAG);

	TAG_REFERENCE(emblem_library_group_reference, EMBLEM_LIBRARY_TAG);

	TAG_REFERENCE(render_model_group_reference$8, RENDER_MODEL_TAG);

	#define RAW_BLENDSHAPE_BLOCK_ID { 0x7D5E5593, 0xF97E4DB9, 0x8E97BC00, 0x72EC5CE9 }
	TAG_STRUCT(
		raw_blendshape_block,
		"raw_blendshape_block",
		"raw_blendshape_block",
		"s_raw_blendshape_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RAW_BLENDSHAPE_BLOCK_ID)
	{
		{ _field_real_vector_3d, "position" },
		{ _field_real_vector_3d, "normal" },
		{ _field_real_argb_color, "tension and ambient occlusion" },
		{ _field_terminator }
	};

	#define RAW_IMPOSTER_BRDF_BLOCK_ID { 0xC248C753, 0x679B4873, 0x82D2CC05, 0xBB8A57A9 }
	TAG_STRUCT(
		raw_imposter_brdf_block,
		"raw_imposter_brdf_block",
		"raw_imposter_brdf_block",
		"s_raw_imposter_brdf_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RAW_IMPOSTER_BRDF_BLOCK_ID)
	{
		{ _field_real_rgb_color, "diffuse" },
		{ _field_real_rgb_color, "ambient" },
		{ _field_real_rgb_color, "specular" },
		{ _field_real, "shininess" },
		{ _field_real, "alpha" },
		{ _field_real_argb_color, "change color tint of diffuse" },
		{ _field_real_argb_color, "change color tint of specular" },
		{ _field_terminator }
	};

	#define RAW_INSTANCE_IMPOSTER_BLOCK_ID { 0x22CF4DD4, 0xFDE8470E, 0x83FA52AB, 0x7303B0CC }
	TAG_STRUCT(
		raw_instance_imposter_block,
		"raw_instance_imposter_block",
		"raw_instance_imposter_block",
		"s_raw_instance_imposter_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RAW_INSTANCE_IMPOSTER_BLOCK_ID)
	{
		{ _field_real_vector_3d, "position" },
		{ _field_dword_integer, "color" },
		{ _field_real, "HDR scaler" },
		{ _field_terminator }
	};

	#define RAW_TEXCOORD_BLOCK_ID { 0x6E3D7633, 0x56F5492D, 0x84F0F79E, 0xE70CD1A }
	TAG_STRUCT(
		raw_texcoord_block,
		"raw_texcoord_block",
		"raw_texcoord_block",
		"s_raw_texcoord_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RAW_TEXCOORD_BLOCK_ID)
	{
		{ _field_real_point_2d, "texcoord" },
		{ _field_terminator }
	};

	#define RAW_VERTEX_BLOCK_ID { 0x98F6C836, 0xCD9343C5, 0xBA313188, 0x5BDBA77 }
	TAG_STRUCT(
		raw_vertex_block,
		"raw_vertex_block",
		"raw_vertex_block",
		"s_raw_vertex_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RAW_VERTEX_BLOCK_ID)
	{
		{ _field_real_point_3d, "position" },
		{ _field_real_point_2d, "texcoord" },
		{ _field_real_point_3d, "normal" },
		{ _field_real_point_3d, "binormal" },
		{ _field_real_point_3d, "tangent" },
		{ _field_real_point_2d, "lightmap texcoord" },
		{ _field_array, "node indices", &node_indices_array$2 },
		{ _field_array, "node weights", &node_weights_complete_array$2 },
		{ _field_real_point_3d, "vertex color" },
		{ _field_real_point_2d, "texcoord1" },
		{ _field_terminator }
	};

	#define RAW_WATER_APPEND_BLOCK_ID { 0xB6F83085, 0xC99A41B1, 0xB7F454A8, 0x5AE2008E }
	TAG_STRUCT(
		raw_water_append_block,
		"raw_water_append_block",
		"raw_water_append_block",
		"s_raw_water_append_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RAW_WATER_APPEND_BLOCK_ID)
	{
		{ _field_real_point_2d, "base texcoord" },
		{ _field_terminator }
	};

	#define RAW_WATER_BLOCK_ID { 0x4F09C644, 0x93ED4F12, 0xA9D754E1, 0x6E7054C7 }
	TAG_STRUCT(
		raw_water_block,
		"raw_water_block",
		"raw_water_block",
		"s_raw_water_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RAW_WATER_BLOCK_ID)
	{
		{ _field_block, "raw water indices", &indices_word_block_block },
		{ _field_block, "raw water vertices", &raw_water_append_block_block },
		{ _field_terminator }
	};

	#define REAL_BLOCK_ID { 0x4FF07107, 0xF4B542A5, 0xBA051EC8, 0xD6C5BD64 }
	TAG_STRUCT(
		real_block,
		"real_block",
		"real_block",
		"s_real_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		REAL_BLOCK_ID)
	{
		{ _field_real, "Value" },
		{ _field_terminator }
	};

	#define REAL_RGB_LIGHTPROBE_ARRAY_STRUCT_DEFINITION_ID { 0xE8F85914, 0xE49BA421, 0x1216AB74, 0xB6D7111 }
	TAG_STRUCT(
		real_rgb_lightprobe_array_struct_definition,
		"real_rgb_lightprobe_array",
		"real_rgb_lightprobe_array",
		"s_real_rgb_lightprobe_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		REAL_RGB_LIGHTPROBE_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "sh data" },
		{ _field_terminator }
	};

	#define REAL_VECTOR4D_BLOCK_ID { 0xFF9E024C, 0x7D184C50, 0x90D73F8E, 0x22EF3A5D }
	TAG_STRUCT(
		real_vector4d_block,
		"real_vector4d_block",
		"real_vector4d_block",
		"s_real_vector4d_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		REAL_VECTOR4D_BLOCK_ID)
	{
		{ _field_real_vector_3d, "vector" },
		{ _field_real, "vector w" },
		{ _field_terminator }
	};

	#define REAL_VECTOR4D_BLOCK$2_ID { 0x97A81143, 0x6C1C43F9, 0x9055F558, 0xC20B4CF1 }
	TAG_STRUCT(
		real_vector4d_block$2,
		"real_vector4d_block",
		"real_vector4d_block",
		"s_real_vector4d_block$2",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		REAL_VECTOR4D_BLOCK$2_ID)
	{
		{ _field_real_vector_3d, "vector" },
		{ _field_real, "vector w" },
		{ _field_terminator }
	};

	#define RECORDED_ANIMATION_BLOCK_ID { 0x739519D, 0x2BC04823, 0x8A0427CB, 0xE4550DC1 }
	TAG_STRUCT(
		recorded_animation_block,
		"recorded_animation_block",
		"recorded_animation_block",
		"s_recorded_animation_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RECORDED_ANIMATION_BLOCK_ID)
	{
		{ _field_string, "name" },
		{ _field_char_integer, "version" },
		{ _field_char_integer, "raw animation data" },
		{ _field_char_integer, "unit control data version" },
		FIELD_PAD("DVU", 1),
		{ _field_short_integer, "length of animation", nullptr, "ticks" },
		FIELD_PAD("DCAU", 2),
		FIELD_PAD("HL", 4),
		{ _field_data, "recorded animation event stream", &recorded_animation_event_stream_data },
		{ _field_terminator }
	};

	#define REGION_NAME_BLOCK_ID { 0xD0B3901B, 0xC2D24E95, 0x86D47E0D, 0xE9133E84 }
	TAG_STRUCT(
		region_name_block,
		"region_name_block",
		"region_name_block",
		"s_region_name_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		REGION_NAME_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	#define REGIONS_BLOCK_ID { 0x43CF00C4, 0x48FA425D, 0x9F3945E3, 0xC0CC414D }
	TAG_STRUCT(
		regions_block,
		"regions_block",
		"regions_block",
		"s_regions_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		REGIONS_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "permutations", &permutations_block_block },
		{ _field_terminator }
	};

	#define RENDER_GEOMETRY_API_RESOURCE_DEFINITION_STRUCT_ID { 0x8AEB8021, 0xF60A4164, 0x970C7091, 0x23365545 }
	TAG_STRUCT(
		render_geometry_api_resource_definition_struct,
		"render_geometry_api_resource_definition_struct",
		"render_geometry_api_resource_definition_struct",
		"s_render_geometry_api_resource_definition_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_GEOMETRY_API_RESOURCE_DEFINITION_STRUCT_ID)
	{
		{ _field_block, "pc vertex buffers", &vertex_buffers_block_block },
		{ _field_block, "pc index buffers", &index_buffers_block_block },
		{ _field_block, "xenon vertex buffers", &render_vertex_buffer_block_block },
		{ _field_block, "xenon index buffers", &render_index_buffer_block_block },
		{ _field_terminator }
	};

	#define RENDER_GEOMETRY_PVS_DATA_BLOCK_ID { 0x401E2C, 0x6BD94BE6, 0xAA5D6719, 0xC5566AFD }
	TAG_STRUCT(
		render_geometry_pvs_data_block,
		"render_geometry_pvs_data_block",
		"render_geometry_pvs_data_block",
		"s_render_geometry_pvs_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_GEOMETRY_PVS_DATA_BLOCK_ID)
	{
		{ _field_block, "Visibility array", &render_geometry_pvs_data_visibility_value_block_block },
		{ _field_block, "Per-block visibility offset array", &render_geometry_pvs_data_visibility_index_block_block },
		{ _field_long_integer, "Bits per block" },
		{ _field_real_point_3d, "Object space grid AABB min" },
		{ _field_real_point_3d, "Object space grid AABB max" },
		{ _field_real_vector_3d, "Block Size" },
		{ _field_long_integer, "Num blocks X" },
		{ _field_long_integer, "Num blocks Y" },
		{ _field_long_integer, "Num blocks Z" },
		{ _field_terminator }
	};

	#define RENDER_GEOMETRY_PVS_DATA_VISIBILITY_INDEX_BLOCK_ID { 0xCB84FF, 0xD9574E41, 0xA4708748, 0x921E2594 }
	TAG_STRUCT(
		render_geometry_pvs_data_visibility_index_block,
		"render_geometry_pvs_data_visibility_index_block",
		"render_geometry_pvs_data_visibility_index_block",
		"s_render_geometry_pvs_data_visibility_index_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_GEOMETRY_PVS_DATA_VISIBILITY_INDEX_BLOCK_ID)
	{
		{ _field_word_integer, "Index" },
		{ _field_terminator }
	};

	#define RENDER_GEOMETRY_PVS_DATA_VISIBILITY_VALUE_BLOCK_ID { 0xCDAA41DE, 0xDEE94EC6, 0x9E9B798E, 0x24E8F6F7 }
	TAG_STRUCT(
		render_geometry_pvs_data_visibility_value_block,
		"render_geometry_pvs_data_visibility_value_block",
		"render_geometry_pvs_data_visibility_value_block",
		"s_render_geometry_pvs_data_visibility_value_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_GEOMETRY_PVS_DATA_VISIBILITY_VALUE_BLOCK_ID)
	{
		{ _field_dword_integer, "Value" },
		{ _field_terminator }
	};

	#define RENDER_INDEX_BUFFER_BLOCK_ID { 0x34F8376, 0xE6BB4E0E, 0x8039CB4B, 0xE53EC97C }
	TAG_STRUCT(
		render_index_buffer_block,
		"render_index_buffer_block",
		"render_index_buffer_block",
		"s_render_index_buffer_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_INDEX_BUFFER_BLOCK_ID)
	{
		{ _field_api_interop, "index buffer interop", &render_index_buffer_interop_definition },
		{ _field_terminator }
	};

	#define RENDER_INDEX_BUFFER_DESCRIPTOR_STRUCT_ID { 0x92B1FF62, 0x80FC4C26, 0x8BDC1478, 0x642346D2 }
	TAG_STRUCT(
		render_index_buffer_descriptor_struct,
		"render_index_buffer_descriptor_struct",
		"render_index_buffer_descriptor_struct",
		"s_render_index_buffer_descriptor_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_INDEX_BUFFER_DESCRIPTOR_STRUCT_ID)
	{
		{ _field_long_integer, "primitive type" },
		{ _field_char_integer, "is index32" },
		FIELD_PAD("index buffer descicriptor padding", 3),
		{ _field_data, "index_data", &render_geometry_index_data },
		{ _field_terminator }
	};

	#define RENDER_METHOD_ANIMATED_PARAMETER_BLOCK_ID { 0x70665B4B, 0xBE174B76, 0x87B39EE2, 0xB5CC3A0 }
	TAG_STRUCT(
		render_method_animated_parameter_block,
		"render_method_animated_parameter_block",
		"render_method_animated_parameter_block",
		"s_render_method_animated_parameter_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_ANIMATED_PARAMETER_BLOCK_ID)
	{
		{ _field_long_enum, "type", &render_method_animated_parameter_type_enum },
		{ _field_string_id, "input name", _field_id_function_input_scalar },
		{ _field_string_id, "range name", _field_id_function_input_range },
		{ _field_real, "time period", nullptr, "seconds", _field_id_function_unknown },
		FIELD_EXPLANATION("FUNCTION", nullptr),
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "function", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	STRINGS(render_method_animated_parameter_type_enum)
	{
		"value",
		"color",
		"scale uniform",
		"scale x",
		"scale y",
		"translation x",
		"translation y",
		"frame index",
		"alpha"
	};
	STRING_LIST(render_method_animated_parameter_type_enum, render_method_animated_parameter_type_enum_strings, _countof(render_method_animated_parameter_type_enum_strings));

	#define RENDER_METHOD_CATEGORY_BLOCK_ID { 0xE2DDAEE5, 0x1BE349F1, 0xAB13830F, 0x6F22F795 }
	TAG_STRUCT(
		render_method_category_block,
		"render_method_category_block",
		"render_method_category_block",
		"s_render_method_category_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_CATEGORY_BLOCK_ID)
	{
		{ _field_string_id, "category name" },
		{ _field_block, "options", &render_method_options_block_block },
		{ _field_string_id, "vertex function" },
		{ _field_string_id, "pixel function" },
		{ _field_terminator }
	};

	#define RENDER_METHOD_DEFINITION_STRUCT_DEFINITION_ID { 0x45573089, 0x681B4D5B, 0xB00F0E44, 0xDE8E72DC }
	TAG_STRUCT(
		render_method_definition_struct_definition,
		"render_method_definition_struct_definition",
		"render_method_definition_struct_definition",
		"s_render_method_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_tag_reference, "global options", &render_method_option_group_reference },
		{ _field_block, "categories", &render_method_category_block_block },
		{ _field_block, "entry_points", &render_method_entry_points_block_block },
		{ _field_block, "vertex_types", &vertex_types_block_block },
		{ _field_tag_reference, "shared pixel shaders", &global_pixel_shader_group_reference },
		{ _field_tag_reference, "shared vertex shaders", &global_vertex_shader_group_reference },
		{ _field_long_flags, "flags", &render_method_definition_flags },
		{ _field_dword_integer, "version", nullptr, "bump to force recompile" },
		FIELD_EXPLANATION("source file location", "like templated\\shader ..."),
		{ _field_long_string, "location" },
		{ _field_terminator }
	};

	TAG_REFERENCE(render_method_option_group_reference, RENDER_METHOD_OPTION_TAG, TAG_REFERENCE_FLAG_NOT_A_RESOURCE_DEPENDENCY);

	TAG_REFERENCE(global_pixel_shader_group_reference, GLOBAL_PIXEL_SHADER_TAG);

	TAG_REFERENCE(global_vertex_shader_group_reference, GLOBAL_VERTEX_SHADER_TAG);

	STRINGS(render_method_definition_flags)
	{
		"use automatic macros",
		"build constant table in shader"
	};
	STRING_LIST(render_method_definition_flags, render_method_definition_flags_strings, _countof(render_method_definition_flags_strings));

	#define RENDER_METHOD_ENTRY_POINTS_BLOCK_ID { 0xB66B69D3, 0x677844FA, 0xAC873549, 0xC59E32FB }
	TAG_STRUCT(
		render_method_entry_points_block,
		"render_method_entry_points_block",
		"render_method_entry_points_block",
		"s_render_method_entry_points_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_ENTRY_POINTS_BLOCK_ID)
	{
		{ _field_long_enum, "entry point", &entry_point_enum },
		{ _field_block, "passes", &render_method_pass_block_block },
		{ _field_terminator }
	};

	STRINGS(entry_point_enum)
	{
		"default",
		"albedo",
		"static_per_pixel",
		"static_per_pixel_hybrid_refinement",
		"static_per_pixel_analytic",
		"static_per_pixel_analytic_hybrid_refinement",
		"static_per_pixel_floating_shadow",
		"static_per_vertex",
		"static_probe",
		"static_per_pixel_forge",
		"static_per_pixel_object",
		"static_per_vertex_object",
		"dynamic_light",
		"shadow_generate",
		"shadow_apply",
		"active_camo",
		"lightmap_debug_mode",
		"vertex_color_lighting",
		"water_tessellation",
		"water_shading",
		"unused2",
		"single_pass_per_pixel",
		"single_pass_per_vertex",
		"single_pass_single_probe",
		"single_pass_as_decal",
		"midnight_spotlight",
		"midnight_spotlight_transparents",
		"motion_blur",
		"volume_fog_stencil",
		"volume_fog_depth",
		"curved_cui",
		"single_pass_shadowed_no_fog_per_pixel",
		"single_pass_shadowed_no_fog_per_vertex",
		"single_pass_shadowed_no_fog_single_probe",
		"static_per_pixel_floating_shadow_simple",
		"static_per_pixel_simple",
		"static_per_pixel_ao",
		"static_per_vertex_ao",
		"static_lit_cui",
		"curved_static_lit_cui"
	};
	STRING_LIST(entry_point_enum, entry_point_enum_strings, _countof(entry_point_enum_strings));

	#define RENDER_METHOD_LOCKED_PARAMETER_BLOCK_ID { 0x8F4FC57, 0xD7B146CC, 0x925B90EE, 0x3108E35E }
	TAG_STRUCT(
		render_method_locked_parameter_block,
		"render_method_locked_parameter_block",
		"render_method_locked_parameter_block",
		"s_render_method_locked_parameter_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_LOCKED_PARAMETER_BLOCK_ID)
	{
		{ _field_string_id, "parameter name" },
		{ _field_long_enum, "parameter type", &render_method_parameter_type_enum },
		{ _field_dword_integer, "animated parameter flags" },
		{ _field_terminator }
	};

	STRINGS(render_method_parameter_type_enum)
	{
		"bitmap",
		"color",
		"real",
		"int",
		"bool",
		"argb color"
	};
	STRING_LIST(render_method_parameter_type_enum, render_method_parameter_type_enum_strings, _countof(render_method_parameter_type_enum_strings));

	#define RENDER_METHOD_OPTION_PARAMETER_BLOCK_ID { 0x11BB68C2, 0x756A4F92, 0xBC2DAAF6, 0xEF1AB32E }
	TAG_STRUCT(
		render_method_option_parameter_block,
		"render_method_option_parameter_block",
		"render_method_option_parameter_block",
		"s_render_method_option_parameter_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_OPTION_PARAMETER_BLOCK_ID)
	{
		{ _field_string_id, "parameter name" },
		{ _field_string_id, "parameter ui override name" },
		{ _field_long_enum, "parameter type", &render_method_parameter_type_enum },
		{ _field_long_enum, "source extern", &render_method_extern_enum },
		{ _field_tag_reference, "default bitmap", &bitmap_group_reference$2 },
		{ _field_real, "default real value" },
		{ _field_long_integer, "default int/bool value" },
		{ _field_word_integer, "flags" },
		{ _field_short_enum, "default filter mode", &render_method_bitmap_filter_mode_enum },
		{ _field_short_enum, "default address mode", &render_method_bitmap_address_mode_enum },
		{ _field_word_integer, "anisotropy amount" },
		{ _field_argb_color, "default color" },
		{ _field_real, "default bitmap scale" },
		{ _field_long_flags, "usage flags", &ui_and_usage_flags },
		{ _field_short_enum, "force function type", &function_type_enum_definition },
		{ _field_short_enum, "force function color count", &color_graph_type_enum_definition },
		{ _field_real, "suggested real min" },
		{ _field_real, "suggested real max" },
		{ _field_long_integer, "ticks from min to max" },
		{ _field_data, "help text", &code_block$2 },
		{ _field_terminator }
	};

	STRINGS(render_method_extern_enum)
	{
		"none",
		"texaccum target",
		"normal target",
		"z target",
		"shadow mask",
		"shadow 1 target",
		"shadow 2 target",
		"shadow 3 target",
		"shadow 4 target",
		"texture camera target",
		"reflection target",
		"refraction target",
		"dualvmf direction ps",
		"dualvmf intensity ps",
		"dualvmf direction vs",
		"dualvmf intensity vs",
		"gel texture of analytical light",
		"unused 1",
		"unused 2",
		"change color primary",
		"change color secondary",
		"change color tertiary",
		"change color quaternary",
		"emblem color background",
		"emblem color primary",
		"emblem color secondary",
		"dynamic environment map 1",
		"dynamic environment map 2",
		"cook torrance array",
		"vmf diffuse table",
		"vmf diffuse table vs",
		"direction lut",
		"zonal rotation table",
		"phong specular table",
		"diffuse power specular table",
		"light dir 0",
		"light color 0",
		"light dir 1",
		"light color 1",
		"light dir 2",
		"light color 2",
		"light dir 3",
		"light color 3",
		"unused 3",
		"unused 4",
		"unused 5",
		"dynamic light gel 0",
		"flat envmap matrix x",
		"flat envmap matrix y",
		"flat envmap matrix z",
		"debug tint",
		"screen constants",
		"active camo distortion texture",
		"scene ldr texture",
		"water memexport addr",
		"tree animation timer",
		"depth constants",
		"camera forward",
		"wrinkle weights a",
		"wrinkle weights b",
		"static lighting previs"
	};
	STRING_LIST(render_method_extern_enum, render_method_extern_enum_strings, _countof(render_method_extern_enum_strings));

	STRINGS(render_method_bitmap_filter_mode_enum)
	{
		"trilinear",
		"point",
		"bilinear",
		"UNUSED 0",
		"anisotropic (2) expensive",
		"UNUSED 1",
		"anisotropic (4) EXPENSIVE",
		"lightprobe texture array",
		"texture array quadlinear",
		"texture array quadanisotropic (2)"
	};
	STRING_LIST(render_method_bitmap_filter_mode_enum, render_method_bitmap_filter_mode_enum_strings, _countof(render_method_bitmap_filter_mode_enum_strings));

	STRINGS(ui_and_usage_flags)
	{
		"use force function type",
		"use force function color count",
		"parameter invisible in ui",
		"lock function value"
	};
	STRING_LIST(ui_and_usage_flags, ui_and_usage_flags_strings, _countof(ui_and_usage_flags_strings));

	STRINGS(function_type_enum_definition)
	{
		"identity",
		"constant",
		"transition",
		"periodic",
		"linear",
		"linear key",
		"multi linear key",
		"spline",
		"multi spline",
		"exponent",
		"spline2"
	};
	STRING_LIST(function_type_enum_definition, function_type_enum_definition_strings, _countof(function_type_enum_definition_strings));

	STRINGS(color_graph_type_enum_definition)
	{
		"scalar (intensity)",
		"constant",
		"2-color",
		"3-color",
		"4-color"
	};
	STRING_LIST(color_graph_type_enum_definition, color_graph_type_enum_definition_strings, _countof(color_graph_type_enum_definition_strings));

	#define RENDER_METHOD_OPTION_STRUCT_DEFINITION_ID { 0x64873A7E, 0x31464CE2, 0xBB5A3107, 0xBCDDB84C }
	TAG_STRUCT(
		render_method_option_struct_definition,
		"render_method_option_struct_definition",
		"render_method_option_struct_definition",
		"s_render_method_option_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_OPTION_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "parameters", &render_method_option_parameter_block_block },
		{ _field_terminator }
	};

	#define RENDER_METHOD_OPTIONS_BLOCK_ID { 0xDC643C49, 0x41DB4D7D, 0xBB8D4C90, 0x71AEF410 }
	TAG_STRUCT(
		render_method_options_block,
		"render_method_options_block",
		"render_method_options_block",
		"s_render_method_options_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_OPTIONS_BLOCK_ID)
	{
		{ _field_string_id, "option name" },
		{ _field_tag_reference, "option", &render_method_option_group_reference },
		{ _field_string_id, "vertex function" },
		{ _field_string_id, "pixel function" },
		{ _field_terminator }
	};

	#define RENDER_METHOD_PARAMETER_BLOCK_ID { 0x1EF54661, 0x630F4E8D, 0xAD88BD76, 0x5BBF101C }
	TAG_STRUCT(
		render_method_parameter_block,
		"render_method_parameter_block",
		"render_method_parameter_block",
		"s_render_method_parameter_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_PARAMETER_BLOCK_ID)
	{
		{ _field_string_id, "parameter name" },
		{ _field_long_enum, "parameter type", &render_method_parameter_type_enum },
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_real, "real" },
		{ _field_long_integer, "int/bool" },
		{ _field_word_integer, "bitmap flags" },
		{ _field_word_integer, "bitmap filter mode" },
		{ _field_word_integer, "bitmap address mode" },
		{ _field_word_integer, "bitmap address mode x" },
		{ _field_word_integer, "bitmap address mode y" },
		{ _field_short_integer, "bitmap anisotropy amount" },
		{ _field_short_integer, "bitmap extern RTT mode" },
		{ _field_word_integer, "bitmap sharpen mode" },
		{ _field_block, "animated parameters", &render_method_animated_parameter_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(bitmap_group_reference, BITMAP_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR | TAG_REFERENCE_FLAG_NOT_A_RESOURCE_DEPENDENCY);

	#define RENDER_METHOD_PASS_BLOCK_ID { 0xF41A0813, 0xBFB7492D, 0x8B50A95B, 0x2474B0C0 }
	TAG_STRUCT(
		render_method_pass_block,
		"render_method_pass_block",
		"render_method_pass_block",
		"s_render_method_pass_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_PASS_BLOCK_ID)
	{
		{ _field_word_flags, "flags", &render_method_pass_flags },
		FIELD_PAD("nothing", 2),
		{ _field_block, "category dependencies", &render_method_pass_category_dependencies_block },
		{ _field_block, "shared VS category dependencies", &render_method_pass_category_dependencies_block },
		{ _field_terminator }
	};

	STRINGS(render_method_pass_flags)
	{
		"shared entry point compilation&shared pixel shader compilation",
		"shared VS only care non-default option of depended category",
		"only be compiled to xenon platform",
		"allow failed shader compile"
	};
	STRING_LIST(render_method_pass_flags, render_method_pass_flags_strings, _countof(render_method_pass_flags_strings));

	#define RENDER_METHOD_PASS_CATEGORY_DEPENDENCIES_ID { 0xC2CF2C86, 0x74B042BC, 0xB50C5874, 0xEC6E468D }
	TAG_STRUCT(
		render_method_pass_category_dependencies,
		"render_method_pass_category_dependencies",
		"render_method_pass_category_dependencies",
		"s_render_method_pass_category_dependencies",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_PASS_CATEGORY_DEPENDENCIES_ID)
	{
		{ _field_short_block_index, "category", &render_method_category_block_block },
		{ _field_terminator }
	};

	#define RENDER_METHOD_POSTPROCESS_BLOCK_ID { 0x448CE620, 0x8C944D92, 0xBCD05705, 0x362CBBF6 }
	TAG_STRUCT(
		render_method_postprocess_block,
		"render_method_postprocess_block",
		"render_method_postprocess_block",
		"s_render_method_postprocess_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_POSTPROCESS_BLOCK_ID)
	{
		{ _field_tag_reference, "shader template", &render_method_template_group_reference },
		{ _field_block, "textures", &render_method_postprocess_texture_block_block },
		{ _field_block, "real vectors", &real_vector4d_block_block },
		{ _field_block, "int constants", &int_block_block },
		{ _field_long_integer, "bool constants" },
		{ _field_block, "entry points", &tag_block_index_block_block },
		{ _field_block, "passes", &render_method_postprocess_pass_block_block },
		{ _field_block, "routing info", &render_method_routing_info_block_block },
		{ _field_block, "overlays", &render_method_animated_parameter_block_block },
		{ _field_long_integer, "blend mode" },
		{ _field_long_integer, "flags" },
		{ _field_long_integer, "im_so_fired_pad" },
		{ _field_array, "runtime queryable properties table", &runtime_queryable_properties$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(render_method_template_group_reference, RENDER_METHOD_TEMPLATE_TAG);

	#define RENDER_METHOD_POSTPROCESS_PASS_BLOCK_ID { 0x920AA523, 0xD662493D, 0x887E528D, 0xAFE64288 }
	TAG_STRUCT(
		render_method_postprocess_pass_block,
		"render_method_postprocess_pass_block",
		"render_method_postprocess_pass_block",
		"s_render_method_postprocess_pass_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_POSTPROCESS_PASS_BLOCK_ID)
	{
		{ _field_word_integer, "bitmaps", "divide by 1024 for count, remainder is start index" },
		{ _field_word_integer, "vertex real", "divide by 1024 for count, remainder is start index" },
		{ _field_word_integer, "pixel real", "divide by 1024 for count, remainder is start index" },
		{ _field_terminator }
	};

	#define RENDER_METHOD_POSTPROCESS_TEXTURE_BLOCK_ID { 0x9491A651, 0xAFB44C1E, 0x9822B53F, 0x607F03C2 }
	TAG_STRUCT(
		render_method_postprocess_texture_block,
		"render_method_postprocess_texture_block",
		"render_method_postprocess_texture_block",
		"s_render_method_postprocess_texture_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_POSTPROCESS_TEXTURE_BLOCK_ID)
	{
		{ _field_tag_reference, "bitmap reference", &bitmap_group_reference$2 },
		{ _field_short_integer, "bitmap index" },
		{ _field_byte_integer, "address mode" },
		{ _field_byte_integer, "filter mode" },
		{ _field_byte_integer, "extern texture mode" },
		{ _field_char_block_index, "texture transform constant index", &g_null_block_block },
		{ _field_struct, "texture transform overlay indices", &tag_block_index_struct },
		{ _field_terminator }
	};

	#define RENDER_METHOD_ROUTING_INFO_BLOCK_ID { 0x3D3CBE29, 0x43EC44D6, 0x961AE5CB, 0x249A1D37 }
	TAG_STRUCT(
		render_method_routing_info_block,
		"render_method_routing_info_block",
		"render_method_routing_info_block",
		"s_render_method_routing_info_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_ROUTING_INFO_BLOCK_ID)
	{
		{ _field_word_integer, "destination index", "D3D constant index or sampler index" },
		{ _field_byte_integer, "source index", "into constant tables below, unless this is an extern parameter" },
		{ _field_byte_integer, "type specific", "bitmap flags or shader component mask" },
		{ _field_terminator }
	};

	#define RENDER_METHOD_STRUCT_DEFINITION_ID { 0xE5438218, 0x3A6340DC, 0x9DAFA818, 0x761ADDF3 }
	TAG_STRUCT(
		render_method_struct_definition,
		"render_method_struct_definition",
		"render_method_struct_definition",
		"s_render_method_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_STRUCT_DEFINITION_ID)
	{
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(render_method_definition_group_reference, RENDER_METHOD_DEFINITION_TAG, TAG_REFERENCE_FLAG_NOT_A_RESOURCE_DEPENDENCY);

	TAG_REFERENCE(render_method_group_reference, RENDER_METHOD_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR);

	STRINGS(global_render_method_lock_option_flags_defintion)
	{
		"option 0",
		"option 1",
		"option 2",
		"option 3",
		"option 4",
		"option 5",
		"option 6",
		"option 7",
		"option 8",
		"option 9",
		"option 10",
		"option 11",
		"option 12",
		"option 13",
		"option 14",
		"option 15",
		"option 16",
		"option 17",
		"option 18",
		"option 19",
		"option 20",
		"option 21",
		"option 22",
		"option 23",
		"option 24",
		"option 25",
		"option 26",
		"option 27",
		"option 28",
		"option 29",
		"option 30",
		"option 31"
	};
	STRING_LIST(global_render_method_lock_option_flags_defintion, global_render_method_lock_option_flags_defintion_strings, _countof(global_render_method_lock_option_flags_defintion_strings));

	STRINGS(global_render_method_flags_defintion)
	{
		"don\'t fog me",
		"use custom setting",
		"calculate Z camera",
		"never render for shields",
		"only render for shields"
	};
	STRING_LIST(global_render_method_flags_defintion, global_render_method_flags_defintion_strings, _countof(global_render_method_flags_defintion_strings));

	#define RENDER_METHOD_TEMPLATE_CONSTANT_TABLE_BLOCK_ID { 0x17C33ABC, 0xC3DE46B7, 0xB84ECBCA, 0x13595216 }
	TAG_STRUCT(
		render_method_template_constant_table_block,
		"render_method_template_constant_table_block",
		"render_method_template_constant_table_block",
		"s_render_method_template_constant_table_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_TEMPLATE_CONSTANT_TABLE_BLOCK_ID)
	{
		{ _field_string_id, "parameter name" },
		{ _field_terminator }
	};

	#define RENDER_METHOD_TEMPLATE_PASS_BLOCK_ID { 0x10A89CAE, 0x2C24E53, 0xB26A4E02, 0x2A6E6525 }
	TAG_STRUCT(
		render_method_template_pass_block,
		"render_method_template_pass_block",
		"render_method_template_pass_block",
		"s_render_method_template_pass_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_TEMPLATE_PASS_BLOCK_ID)
	{
		{ _field_word_integer, "bitmaps", "divide by 1024 for count, remainder is start index" },
		{ _field_word_integer, "vertex real constants", "divide by 1024 for count, remainder is start index" },
		{ _field_word_integer, "vertex int constants", "divide by 1024 for count, remainder is start index" },
		{ _field_word_integer, "vertex bool constants", "divide by 1024 for count, remainder is start index" },
		{ _field_word_integer, "pixel real constants", "divide by 1024 for count, remainder is start index" },
		{ _field_word_integer, "pixel int constants", "divide by 1024 for count, remainder is start index" },
		{ _field_word_integer, "pixel bool constants", "divide by 1024 for count, remainder is start index" },
		{ _field_word_integer, "extern bitmaps", "divide by 1024 for count, remainder is start index" },
		{ _field_word_integer, "extern vertex real constants", "divide by 1024 for count, remainder is start index" },
		{ _field_word_integer, "extern vertex int constants", "divide by 1024 for count, remainder is start index" },
		{ _field_word_integer, "extern pixel real constants", "divide by 1024 for count, remainder is start index" },
		{ _field_word_integer, "extern pixel int constants", "divide by 1024 for count, remainder is start index" },
		{ _field_long_integer, "alpha blend mode" },
		{ _field_terminator }
	};

	#define RENDER_METHOD_TEMPLATE_PLATFORM_BLOCK_ID { 0x1926C436, 0x483246AA, 0x86067626, 0x533DDEA8 }
	TAG_STRUCT(
		render_method_template_platform_block,
		"render_method_template_platform_block",
		"render_method_template_platform_block",
		"s_render_method_template_platform_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_TEMPLATE_PLATFORM_BLOCK_ID)
	{
		{ _field_tag_reference, "vertex shader", &vertex_shader_group_reference },
		{ _field_tag_reference, "pixel shader", &pixel_shader_group_reference },
		{ _field_dword_integer, "available entry_points" },
		{ _field_block, "entry points", &tag_block_index_block_block },
		{ _field_block, "passes", &render_method_template_pass_block_block },
		{ _field_block, "routing info", &render_method_routing_info_block_block },
		{ _field_block, "float constants", &render_method_template_constant_table_block_block },
		{ _field_block, "int constants", &render_method_template_constant_table_block_block },
		{ _field_block, "bool constants", &render_method_template_constant_table_block_block },
		{ _field_block, "textures", &render_method_template_constant_table_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(vertex_shader_group_reference, VERTEX_SHADER_TAG);

	TAG_REFERENCE(pixel_shader_group_reference, PIXEL_SHADER_TAG);

	#define RENDER_METHOD_TEMPLATE_STRUCT_DEFINITION_ID { 0xE29233A9, 0xAE7B4321, 0x93DFA5CE, 0x4E5BD1D5 }
	TAG_STRUCT(
		render_method_template_struct_definition,
		"render_method_template_struct_definition",
		"render_method_template_struct_definition",
		"s_render_method_template_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_METHOD_TEMPLATE_STRUCT_DEFINITION_ID)
	{
		{ _field_tag_reference, "vertex shader", &vertex_shader_group_reference },
		{ _field_tag_reference, "pixel shader", &pixel_shader_group_reference },
		{ _field_dword_integer, "available entry points" },
		{ _field_block, "entry points", &tag_block_index_block_block },
		{ _field_block, "passes", &render_method_template_pass_block_block },
		{ _field_block, "routing info", &render_method_routing_info_block_block },
		{ _field_block, "float constants", &render_method_template_constant_table_block_block },
		{ _field_block, "int constants", &render_method_template_constant_table_block_block },
		{ _field_block, "bool constants", &render_method_template_constant_table_block_block },
		{ _field_block, "textures", &render_method_template_constant_table_block_block },
		{ _field_block, "other platforms", &render_method_template_platform_block_block },
		{ _field_terminator }
	};

	#define RENDER_MODEL_BLOCK_STRUCT_ID { 0x69FF7DC3, 0x7F94EB6, 0xA4788DFF, 0xBBF9621C }
	TAG_STRUCT(
		render_model_block_struct,
		"render_model_block_struct",
		"render_model_block_struct",
		"s_render_model_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_MODEL_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_word_flags, "flags", &render_model_flags_definition },
		{ _field_word_integer, "version" },
		FIELD_DONT_CHECKSUM_BEGIN(),
		{ _field_long_integer, "runtime import info checksum" },
		FIELD_DONT_CHECKSUM_END(),
		{ _field_block, "regions", &render_model_region_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_char_integer, "L1 section group index", nullptr, "(low)" },
		{ _field_char_integer, "L2 section group index", nullptr, "(high)" },
		FIELD_PAD("PUJJ", 2),
		{ _field_long_block_index, "instance mesh index", &global_mesh_block_block },
		{ _field_block, "instance placements", &global_render_model_instance_placement_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_long_integer, "node list checksum" },
		{ _field_block, "nodes", &render_model_node_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "marker groups", &render_model_marker_group_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "materials", &global_geometry_material_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "errors", &global_error_report_categories_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_real, "don't draw over camera cosine angle", "dont draw fp model when camera > this angle cosine (-1,1) Sugg. -0.2. 0 disables." },
		{ _field_struct, "render geometry", &global_render_geometry_struct },
		{ _field_block, "node map mapping", &instance_node_map_mapping_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "volume samples", &volume_samples_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "runtime node orientations", &default_node_orientations_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_block, "bone groups", &rendermodelbonegroupblock_block, _tag_field_attributed_definition_block_collapsed_field_default },
		FIELD_EXPLANATION("Static Lightmap", nullptr),
		{ _field_tag_reference, "structure meta data", &structure_meta_group_reference },
		{ _field_tag_reference, "lightmap bsp data reference", &scenario_lightmap_bsp_data_group_reference },
		{ _field_tag_reference, "forge lightmap atlases", &render_model_lightmap_atlas_group_reference },
		{ _field_terminator }
	};

	STRINGS(render_model_flags_definition)
	{
		"is hologram",
		"UNUSED2",
		"has node maps",
		"has fur shader"
	};
	STRING_LIST(render_model_flags_definition, render_model_flags_definition_strings, _countof(render_model_flags_definition_strings));

	TAG_REFERENCE(structure_meta_group_reference, STRUCTURE_META_TAG);

	TAG_REFERENCE(scenario_lightmap_bsp_data_group_reference, SCENARIO_LIGHTMAP_BSP_DATA_TAG);

	TAG_REFERENCE(render_model_lightmap_atlas_group_reference, RENDER_MODEL_LIGHTMAP_ATLAS_TAG);

	#define RENDER_MODEL_LIGHTMAP_ATLAS_STRUCT_DEFINITION_ID { 0xCA337E, 0x43CE7697, 0xABE1E3E, 0x1D862276 }
	TAG_STRUCT(
		render_model_lightmap_atlas_struct_definition,
		"render_model_lightmap_atlas_struct_definition",
		"render_model_lightmap_atlas_struct_definition",
		"s_render_model_lightmap_atlas_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_MODEL_LIGHTMAP_ATLAS_STRUCT_DEFINITION_ID)
	{
		{ _field_struct, "atlas geometry", &global_render_geometry_struct },
		{ _field_real, "world scale ratio" },
		{ _field_terminator }
	};

	#define RENDER_MODEL_MARKER_BLOCK_ID { 0xD7CC940F, 0x39874D92, 0x808A0C39, 0xAF0AC68 }
	TAG_STRUCT(
		render_model_marker_block,
		"marker",
		"render_model_marker_block",
		"s_render_model_marker_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_MODEL_MARKER_BLOCK_ID)
	{
		{ _field_char_integer, "region index" },
		{ _field_char_integer, "permutation index" },
		{ _field_byte_integer, "node index" },
		{ _field_byte_flags, "flags", &render_model_marker_flags_definition },
		{ _field_real_point_3d, "translation" },
		{ _field_real_quaternion, "rotation" },
		{ _field_real, "scale" },
		{ _field_real_vector_3d, "direction" },
		{ _field_terminator }
	};

	STRINGS(render_model_marker_flags_definition)
	{
		"has node relative direction"
	};
	STRING_LIST(render_model_marker_flags_definition, render_model_marker_flags_definition_strings, _countof(render_model_marker_flags_definition_strings));

	#define RENDER_MODEL_MARKER_GROUP_BLOCK_ID { 0xE60694FA, 0xA9EC4D0D, 0x89E6238C, 0xF66CBE15 }
	TAG_STRUCT(
		render_model_marker_group_block,
		"marker group",
		"render_model_marker_group_block",
		"s_render_model_marker_group_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_MODEL_MARKER_GROUP_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "markers", &render_model_marker_block_block },
		{ _field_terminator }
	};

	#define RENDER_MODEL_NODE_BLOCK_ID { 0xB74453B7, 0xD6E3402E, 0x8A1587D0, 0xEFBF22EA }
	TAG_STRUCT(
		render_model_node_block,
		"node",
		"render_model_node_block",
		"s_render_model_node_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_MODEL_NODE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "parent node", &render_model_node_block_block },
		{ _field_short_block_index, "first child node", &render_model_node_block_block },
		{ _field_short_block_index, "next sibling node", &render_model_node_block_block },
		FIELD_PAD("RELFLFLLE", 2),
		{ _field_real_point_3d, "default translation" },
		{ _field_real_quaternion, "default rotation" },
		{ _field_real_vector_3d, "inverse forward" },
		{ _field_real_vector_3d, "inverse left" },
		{ _field_real_vector_3d, "inverse up" },
		{ _field_real_point_3d, "inverse position" },
		{ _field_real, "inverse scale" },
		{ _field_real, "distance from parent" },
		FIELD_GROUP_BEGIN("Procedural Joint"),
		{ _field_char_enum, "procedure", &procedure_enum_definition },
		{ _field_char_enum, "procedure axis", &procedure_axis_enum_definition },
		FIELD_PAD("pad", 2),
		{ _field_short_block_index, "procedure node A", &render_model_node_block_block },
		{ _field_short_block_index, "procedure node B", &render_model_node_block_block },
		{ _field_real, "procedure var 1" },
		{ _field_real, "procedure var 2" },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(procedure_enum_definition)
	{
		"NONE",
		"multiply rotation"
	};
	STRING_LIST(procedure_enum_definition, procedure_enum_definition_strings, _countof(procedure_enum_definition_strings));

	STRINGS(procedure_axis_enum_definition)
	{
		"ALL",
		"Yaw (Maya Y)",
		"Pitch (Maya X)",
		"Roll (Maya Z)"
	};
	STRING_LIST(procedure_axis_enum_definition, procedure_axis_enum_definition_strings, _countof(procedure_axis_enum_definition_strings));

	#define RENDER_MODEL_PERMUTATION_BLOCK_ID { 0x7900DDE2, 0x64B40BE, 0x8F806330, 0x878B35EB }
	TAG_STRUCT(
		render_model_permutation_block,
		"permutation",
		"render_model_permutation_block",
		"s_render_model_permutation_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_MODEL_PERMUTATION_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_integer, "mesh index" },
		{ _field_short_integer, "mesh count" },
		{ _field_string_id, "clone name" },
		{ _field_long_flags, "instance mask 0-31", &render_model_instance_bitfield_flags_definition },
		{ _field_long_flags, "instance mask 32-63", &render_model_instance_bitfield_flags_definition },
		{ _field_long_flags, "instance mask 64-95", &render_model_instance_bitfield_flags_definition },
		{ _field_long_flags, "instance mask 96-127", &render_model_instance_bitfield_flags_definition },
		{ _field_terminator }
	};

	STRINGS(render_model_instance_bitfield_flags_definition)
	{
		"0",
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9",
		"10",
		"11",
		"12",
		"13",
		"14",
		"15",
		"16",
		"17",
		"18",
		"19",
		"20",
		"21",
		"22",
		"23",
		"24",
		"25",
		"26",
		"27",
		"28",
		"29",
		"30",
		"31"
	};
	STRING_LIST(render_model_instance_bitfield_flags_definition, render_model_instance_bitfield_flags_definition_strings, _countof(render_model_instance_bitfield_flags_definition_strings));

	#define RENDER_MODEL_REGION_BLOCK_ID { 0x5F23BC11, 0xB76B42D7, 0xA38C6C46, 0x1DEE5813 }
	TAG_STRUCT(
		render_model_region_block,
		"region",
		"render_model_region_block",
		"s_render_model_region_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_MODEL_REGION_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "permutations", &render_model_permutation_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_terminator }
	};

	#define RENDER_TEXTURE_FORMAT_DEFINITION_ID { 0xA5D6641E, 0xAC074AA2, 0x9ADEF9FC, 0x336413F7 }
	TAG_STRUCT(
		render_texture_format_definition,
		"render_texture_format_definition",
		"render_texture_format_definition",
		"s_render_texture_format_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_TEXTURE_FORMAT_DEFINITION_ID)
	{
		{ _field_short_integer, "width" },
		{ _field_short_integer, "height" },
		{ _field_char_integer, "depth" },
		{ _field_char_integer, "total mipmap count" },
		{ _field_char_enum, "type", &bitmap_types },
		{ _field_char_integer, "pad1_1" },
		{ _field_char_enum, "is high res bitmap", &boolean_enum_definition },
		{ _field_char_enum, "is medium res bitmap", &boolean_enum_definition },
		{ _field_char_enum, "pad2_1", &boolean_enum_definition },
		{ _field_char_enum, "pad2_2", &boolean_enum_definition },
		{ _field_long_integer, "exponent bias" },
		{ _field_long_integer, "xenon d3d format" },
		{ _field_terminator }
	};

	STRINGS(boolean_enum_definition)
	{
		"false",
		"true"
	};
	STRING_LIST(boolean_enum_definition, boolean_enum_definition_strings, _countof(boolean_enum_definition_strings));

	#define RENDER_TEXTURE_INTERLEAVED_INTEROP_DEFINITION_STRUCT_ID { 0x90486D0A, 0x944A4941, 0x9FE79AF0, 0x39E2E611 }
	TAG_STRUCT(
		render_texture_interleaved_interop_definition_struct,
		"render_texture_interleaved_interop_definition_struct",
		"render_texture_interleaved_interop_definition_struct",
		"s_render_texture_interleaved_interop_definition_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_TEXTURE_INTERLEAVED_INTEROP_DEFINITION_STRUCT_ID)
	{
		{ _field_data, "pixel data", &base_render_texture_data },
		{ _field_data, "medium res data", &medium_res_render_texture_data },
		{ _field_array, "interleaved textures", &render_interleaved_texture_array_definition },
		{ _field_terminator }
	};

	#define RENDER_TEXTURE_INTEROP_DEFINITION_STRUCT_ID { 0x64017671, 0x437A46F0, 0x9A33C422, 0x517096E3 }
	TAG_STRUCT(
		render_texture_interop_definition_struct,
		"render_texture_interop_definition_struct",
		"render_texture_interop_definition_struct",
		"s_render_texture_interop_definition_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_TEXTURE_INTEROP_DEFINITION_STRUCT_ID)
	{
		{ _field_data, "pixel data", &base_render_texture_data },
		{ _field_data, "medium res data", &medium_res_render_texture_data },
		{ _field_data, "high res data", &high_res_render_texture_data },
		{ _field_short_integer, "width" },
		{ _field_short_integer, "height" },
		{ _field_char_integer, "depth" },
		{ _field_char_integer, "total mipmap count" },
		{ _field_char_enum, "type", &bitmap_types },
		{ _field_char_integer, "pad1_1" },
		{ _field_char_enum, "is high res bitmap", &boolean_enum_definition },
		{ _field_char_enum, "is medium res bitmap", &boolean_enum_definition },
		{ _field_char_enum, "pad2_1", &boolean_enum_definition },
		{ _field_char_enum, "pad2_2", &boolean_enum_definition },
		{ _field_long_integer, "exponent bias" },
		{ _field_long_integer, "xenon d3d format" },
		{ _field_terminator }
	};

	#define RENDER_VERTEX_BUFFER_BLOCK_ID { 0xFB026490, 0xD41E4141, 0xA8A023BE, 0x6497B4E }
	TAG_STRUCT(
		render_vertex_buffer_block,
		"render_vertex_buffer_block",
		"render_vertex_buffer_block",
		"s_render_vertex_buffer_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_VERTEX_BUFFER_BLOCK_ID)
	{
		{ _field_api_interop, "vertex buffer interop", &render_vertex_buffer_interop_definition },
		{ _field_terminator }
	};

	#define RENDER_VERTEX_BUFFER_DESCRIPTOR_STRUCT_ID { 0x44953A7F, 0x73B448CB, 0xA68E5A44, 0x28379244 }
	TAG_STRUCT(
		render_vertex_buffer_descriptor_struct,
		"render_vertex_buffer_descriptor_struct",
		"render_vertex_buffer_descriptor_struct",
		"s_render_vertex_buffer_descriptor_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_VERTEX_BUFFER_DESCRIPTOR_STRUCT_ID)
	{
		{ _field_long_integer, "vertex count" },
		{ _field_short_integer, "declaration" },
		{ _field_short_integer, "stride" },
		{ _field_data, "vertices", &render_geometry_vertex_buffer_data },
		{ _field_terminator }
	};

	#define RENDER_WATER_RIPPLE_STRUCT_DEFINITION_ID { 0xCB60D088, 0x882E4775, 0x883C8C94, 0x8CE7CD58 }
	TAG_STRUCT(
		render_water_ripple_struct_definition,
		"render_water_ripple_struct_definition",
		"render_water_ripple_struct_definition",
		"s_render_water_ripple_struct_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RENDER_WATER_RIPPLE_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("TYPE FLAGS", nullptr),
		{ _field_long_flags, "flags", &ripple_behavior_flags },
		FIELD_EXPLANATION("INITIAL SETTINGS", nullptr),
		{ _field_real, "initial radius", MAKE_ALT_NAMES("radius") },
		{ _field_real, "initial amplitude", MAKE_ALT_NAMES("amplitude") },
		{ _field_real, "spread speed" },
		{ _field_real, "speed bias" },
		{ _field_real, "position random range" },
		{ _field_real, "max visibility distance" },
		FIELD_EXPLANATION("LIFE SETTINGS", "what happens during the ripple life. damping should be always larger than 0."),
		{ _field_real, "duration max" },
		{ _field_real, "duration min" },
		{ _field_real, "rise period ratio" },
		{ _field_short_enum, "rise function", &transition_function_enum },
		{ _field_short_enum, "descend function", &transition_function_enum },
		FIELD_EXPLANATION("PENDULUM SETTINGS", "Only valid in case of the predulum flag has been checked."),
		{ _field_real, "phase revolution speed" },
		{ _field_real, "phase repeat along radius" },
		FIELD_EXPLANATION("SHAPE TRANSITION", "interpolate between shapes in ripple pattern array"),
		{ _field_real, "pattern start idx" },
		{ _field_real, "pattern end idx" },
		{ _field_short_enum, "pattern transition", &transition_function_enum },
		FIELD_PAD("SexyPadding1", 2),
		FIELD_EXPLANATION("FOAM", "quick flashed foam"),
		{ _field_real, "foam out radius" },
		{ _field_real, "foam fade distance" },
		{ _field_real, "foam duration" },
		{ _field_short_enum, "foam fade function", &transition_function_enum },
		FIELD_PAD("SexyPadding2", 2),
		{ _field_terminator }
	};

	STRINGS(ripple_behavior_flags)
	{
		"ripple drifted by flow",
		"amplitude changed by pendulum function",
		"display flash foam",
		"foam size defined in game unit"
	};
	STRING_LIST(ripple_behavior_flags, ripple_behavior_flags_strings, _countof(ripple_behavior_flags_strings));

	STRINGS(transition_function_enum)
	{
		"linear",
		"early",
		"very early",
		"late",
		"very late",
		"cosine",
		"one",
		"zero"
	};
	STRING_LIST(transition_function_enum, transition_function_enum_strings, _countof(transition_function_enum_strings));

	#define REQUISITION_CONSTANTS_BLOCK_ID { 0xA196181E, 0xFD0647BC, 0x81450BED, 0x8D1F89ED }
	TAG_STRUCT(
		requisition_constants_block,
		"requisition_constants_block",
		"requisition_constants_block",
		"s_requisition_constants_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		REQUISITION_CONSTANTS_BLOCK_ID)
	{
		{ _field_real, "FTL bonus fraction", "multiplier to apply to money earned by minions to also give to the fireteam leader" },
		FIELD_EXPLANATION("AWARD AMOUNTS", "These are requisition award amounts for various thing players can get money for"),
		{ _field_long_integer, "Kill" },
		{ _field_long_integer, "Assist" },
		{ _field_long_integer, "Fire team leader kill" },
		{ _field_long_integer, "vehicle kill", "Default, only applies if the vehicle doesn't have a custom award amount in the scenario requisition palette." },
		{ _field_long_integer, "objective destroyed", "awarded to entire team" },
		{ _field_long_integer, "objective armed", "awarded to entire team" },
		{ _field_long_integer, "objective disarmed", "awarded to entire team" },
		{ _field_long_integer, "objective defending", "awarded every 3 seconds to any individuals near secondary defensive objectives" },
		{ _field_long_integer, "neutral territory owned", "awarded every 3 seconds to entire team that owns BFG" },
		{ _field_long_integer, "served as reinforcement target", "awarded to a reinforcement target when a teammate spawns on him (to encourage cooperation)" },
		{ _field_long_integer, "uberassault gun captured", "awarded on gaining ownership of a gun to every member of the new owning team" },
		{ _field_long_integer, "uberassault gun owned", "awarded every 3 seconds to the entire team that owns this gun.  Money from multiple guns stacks (so if you own all 3, you'll get 3x this money every 3 seconds)." },
		FIELD_EXPLANATION("PENALTY AMOUNTS", "Requisition penalties for various discouraged actions"),
		{ _field_long_integer, "Betrayed a teammate" },
		FIELD_EXPLANATION("FIRE TEAM TIER KILL REQUIREMENTS", "Number of kills a fireteam must have to reach each fire team tier"),
		{ _field_long_integer, "Bronze kill minimum" },
		{ _field_long_integer, "Silver kill minimum" },
		{ _field_long_integer, "Gold kill minimum" },
		FIELD_EXPLANATION("FIRE TEAM TIER BONUS MULTIPLIERS", "Applied to money earned from biped kills and assists"),
		{ _field_real, "Bronze multiplier" },
		{ _field_real, "Silver multiplier" },
		{ _field_real, "Gold multiplier" },
		FIELD_EXPLANATION("FIRE TEAM TIER TIME REQUIREMENT", "Game time in seconds after which everyone is promoted to at least this tier"),
		{ _field_long_integer, "Bronze advancement time" },
		{ _field_long_integer, "Silver advancement time" },
		{ _field_long_integer, "Gold advancement time" },
		{ _field_block, "Requisition palette", &requisition_palette_block_block },
		{ _field_terminator }
	};

	#define REQUISITION_PALETTE_BLOCK_ID { 0xE6C17A5, 0x171B4EF7, 0x8A0E0E6A, 0x11C92E17 }
	TAG_STRUCT(
		requisition_palette_block,
		"requisition_palette_block",
		"requisition_palette_block",
		"s_requisition_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		REQUISITION_PALETTE_BLOCK_ID)
	{
		FIELD_EXPLANATION("CUSTOM APPS", "If you want the award to be a custom app, point at globals/custom_app_globals, and match one of the names from that tag for \"display_name\""),
		{ _field_tag_reference, "name", &object_group_vehicle_group_custom_app_globals_group_reference },
		{ _field_string_id, "display_name" },
		{ _field_long_enum, "special_buy", &requisition_special_buy_enum },
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(object_group_vehicle_group_custom_app_globals_group_reference, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY | TAG_REFERENCE_FLAG_DEPENDENCY_FOR_CACHE_FILE_SHARING)
	{
		OBJECT_TAG,
		VEHICLE_TAG,
		CUSTOM_APP_GLOBALS_TAG,
		INVALID_TAG
	};

	STRINGS(requisition_special_buy_enum)
	{
		"none",
		"airstrike!",
		"mac cannon",
		"magnetic ammo",
		"laser ammo",
		"explosive ammo",
		"normal ammo",
		"friendly ai light infantry",
		"friendly ai heavy infantry",
		"friendly ai light vehicle",
		"friendly ai heavy vehicle",
		"friendly ai flyer"
	};
	STRING_LIST(requisition_special_buy_enum, requisition_special_buy_enum_strings, _countof(requisition_special_buy_enum_strings));

	#define RESOURCEHANDLEBLOCK_ID { 0xD5ED98ED, 0xFBF04B93, 0xB1E0B2DC, 0x1F89A529 }
	TAG_STRUCT(
		resourcehandleblock,
		"resourceHandleBlock",
		"resourceHandleBlock",
		"s_resourcehandleblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RESOURCEHANDLEBLOCK_ID)
	{
		{ _field_long_integer, "resourceHandle" },
		{ _field_terminator }
	};

	#define RESOURCE_CATEGORY_BLOCK_ID { 0xC450B05F, 0xDFCD4840, 0xAED5D08F, 0x1D23AEB7 }
	TAG_STRUCT(
		resource_category_block,
		"resource_category_block",
		"resource_category_block",
		"s_resource_category_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RESOURCE_CATEGORY_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	#define RESOURCE_CHECKSUM_STRUCT_ID { 0x6DA6A4F0, 0x19C443F8, 0x8B233E7F, 0xE4FB0736 }
	TAG_STRUCT(
		resource_checksum_struct,
		"resource_checksum_struct",
		"resource_checksum_struct",
		"s_resource_checksum_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RESOURCE_CHECKSUM_STRUCT_ID)
	{
		{ _field_long_integer, "checksum" },
		{ _field_array, "entire hash", &resource_hash_definition$2 },
		{ _field_array, "first chunk hash", &resource_hash_definition$2 },
		{ _field_array, "last chunk hash", &resource_hash_definition$2 },
		{ _field_terminator }
	};

	#define RESOURCE_HASH_DEFINITION_STRUCT_DEFINITION_ID { 0xF713F8B8, 0xA3FB4157, 0x956953B8, 0x16833EDB }
	TAG_STRUCT(
		resource_hash_definition_struct_definition,
		"resource_hash_definition",
		"resource_hash_definition",
		"s_resource_hash_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RESOURCE_HASH_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_byte_integer, "hash byte" },
		{ _field_terminator }
	};

	#define RESOURCE_LAYOUT_COMPRESSED_SIZE_ARRAY_DEFINITION_STRUCT_DEFINITION_ID { 0x48483D04, 0x7DB4B74, 0xAA4B1292, 0xCC40B002 }
	TAG_STRUCT(
		resource_layout_compressed_size_array_definition_struct_definition,
		"resource_layout_compressed_size_array_definition",
		"resource_layout_compressed_size_array_definition",
		"s_resource_layout_compressed_size_array_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RESOURCE_LAYOUT_COMPRESSED_SIZE_ARRAY_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "compressed size" },
		{ _field_terminator }
	};

	#define RESOURCE_LAYOUT_MEMORY_SIZE_ARRAY_DEFINITION_STRUCT_DEFINITION_ID { 0xBF77779F, 0xBE234452, 0xB2A3C7EC, 0xF73AFF38 }
	TAG_STRUCT(
		resource_layout_memory_size_array_definition_struct_definition,
		"resource_layout_memory_size_array_definition",
		"resource_layout_memory_size_array_definition",
		"s_resource_layout_memory_size_array_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RESOURCE_LAYOUT_MEMORY_SIZE_ARRAY_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "memory size" },
		{ _field_terminator }
	};

	#define RESOURCE_USAGE_PAGE_SIZE_ARRAY_DEFINITION_STRUCT_DEFINITION_ID { 0x75BD02C0, 0xF0BA48F9, 0x851711E4, 0xDB4626C6 }
	TAG_STRUCT(
		resource_usage_page_size_array_definition_struct_definition,
		"resource_usage_page_size_array_definition",
		"resource_usage_page_size_array_definition",
		"s_resource_usage_page_size_array_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RESOURCE_USAGE_PAGE_SIZE_ARRAY_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "page size" },
		{ _field_terminator }
	};

	#define RESPONSE_BLOCK_ID { 0xD94F560, 0x7A584446, 0x8346DEA4, 0x8A08206A }
	TAG_STRUCT(
		response_block,
		"response_block",
		"response_block",
		"s_response_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RESPONSE_BLOCK_ID)
	{
		{ _field_string_id, "vocalization name" },
		{ _field_word_flags, "flags", &response_flags },
		{ _field_short_integer, "vocalization index" },
		{ _field_short_enum, "response type", &response_type_enum },
		{ _field_short_integer, "dialogue index (import)" },
		{ _field_terminator }
	};

	STRINGS(response_flags)
	{
		"nonexclusive",
		"trigger response"
	};
	STRING_LIST(response_flags, response_flags_strings, _countof(response_flags_strings));

	STRINGS(response_type_enum)
	{
		"friend",
		"enemy",
		"listener",
		"joint",
		"peer",
		"leader",
		"friend_infantry"
	};
	STRING_LIST(response_type_enum, response_type_enum_strings, _countof(response_type_enum_strings));

	#define REVENANT_BLOCK_ID { 0xF532AD7A, 0x164C4A28, 0x905A8AA1, 0xD0038D15 }
	TAG_STRUCT(
		revenant_block,
		"revenant_block",
		"revenant_block",
		"s_revenant_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		REVENANT_BLOCK_ID)
	{
		{ _field_struct, "tank block", &human_tank_struct },
		FIELD_EXPLANATION("velocity control variables", nullptr),
		{ _field_real, "maximum forward speed" },
		{ _field_real, "maximum reverse speed" },
		{ _field_real, "speed acceleration" },
		{ _field_real, "speed deceleration" },
		{ _field_real, "maximum left slide" },
		{ _field_real, "maximum right slide" },
		{ _field_real, "slide acceleration" },
		{ _field_real, "slide deceleration" },
		{ _field_struct, "steering animation", &steering_animation_struct },
		FIELD_EXPLANATION("specific types", "different types are treated differently alien scout controller"),
		{ _field_char_enum, "specific type", &alien_scout_specific_type_enum },
		{ _field_real, "drag coeficient" },
		{ _field_real, "constant deceleration" },
		{ _field_real, "torque scale", "0 defaults to 1" },
		FIELD_PAD("BLURBY", 3),
		{ _field_terminator }
	};

	#define REWARDBLOCK_ID { 0xF59C2E93, 0xFF814434, 0xB447120D, 0x3229DE7F }
	TAG_STRUCT(
		rewardblock,
		"rewardBlock",
		"rewardBlock",
		"s_rewardblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		REWARDBLOCK_ID)
	{
		{ _field_char_enum, "currency type", "Type of currency given by this reward.", &currencytypeenumdefinition },
		FIELD_PAD("PJB1", 1),
		{ _field_short_integer, "reward amount", "Amount of the given currency to be given with this reward." },
		{ _field_terminator }
	};

	#define REWARDDEFINITIONBLOCK_ID { 0x93E5D8A, 0xA9E7437D, 0x807AAE8F, 0xD94A13A7 }
	TAG_STRUCT(
		rewarddefinitionblock,
		"rewardDefinitionBlock",
		"rewardDefinitionBlock",
		"s_rewarddefinitionblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		REWARDDEFINITIONBLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_char_enum, "type", &rewardtypeenum },
		FIELD_PAD("PJB1", 3),
		{ _field_block, "rewards", &rewardblock_block },
		{ _field_terminator }
	};

	STRINGS(rewardtypeenum)
	{
		"invasion",
		"bounties",
		"slot machine",
		"heat",
		"mission scripting",
		"commendation",
		"daily challenge",
		"achievement",
		"console scripting",
		"game complete",
		"time spent",
		"score",
		"winning",
		"hopper",
		"slot machinelsp_jackpot",
		"double_xp",
		"fast_track_armor"
	};
	STRING_LIST(rewardtypeenum, rewardtypeenum_strings, _countof(rewardtypeenum_strings));

	#define REWARD_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID { 0x78615FBC, 0x4B164E69, 0xA8272FE7, 0x4E40CB80 }
	TAG_STRUCT(
		reward_globals_definition_struct_definition,
		"reward_globals_definition_struct_definition",
		"reward_globals_definition_struct_definition",
		"s_reward_globals_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		REWARD_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "reward definitions", MAKE_ALT_NAMES("cookie awards"), &rewarddefinitionblock_block },
		{ _field_terminator }
	};

	#define RIGID_BODIES_BLOCK_ID { 0xF902EE13, 0xFEA643C7, 0x9C90BED0, 0xF9D06754 }
	VERSIONED_TAG_STRUCT(
		rigid_bodies_block,
		"rigid_bodies_block",
		"rigid_bodies_block",
		"s_rigid_bodies_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RIGID_BODIES_BLOCK_ID,
		4)
	{
		{ _struct_version_mode_greater_or_equal, 1, 46 },
		{ _field_short_block_index, "node", &nodes_block_block },
		{ _field_short_block_index, "region", &regions_block_block },
		{ _field_short_block_index_custom_search, "permutattion", &permutation_search },
		{ _field_short_block_index, "serialized shapes", &rigidbodyserializedshapesblock_block },
		{ _field_real_point_3d, "bouding sphere offset" },
		{ _field_real, "bounding sphere radius" },
		{ _field_word_flags, "flags", &rigid_body_flags },
		{ _field_short_block_index, "no phantom power alt", &rigid_bodies_block_block },
		{ _field_char_enum, "motion type", &rigid_body_motion_enum },
		FIELD_EXPLANATION("collision group override", "This value overrides the default group.  It also overrides values specified in the materials block of this tag. Values set here can be overridden per shape through the shape primitive blocks."),
		{ _field_char_enum, "proxy collision group", &physics_material_proxy_collision_groups },
		{ _field_short_enum, "size", &rigid_body_size_enum },
		FIELD_EXPLANATION("inertia tensor scales", "if you want to set he scale uniforml just set \"inertia tensor scale\".  If you want to set the values seperately per axis you can set \"inertia tensor scale x\\y\\z\""),
		{ _field_real, "inertia tensor scale", "0.0 defaults to 1.0" },
		{ _field_real, "inertia tensor scale x", "0.0 defaults to 1.0" },
		{ _field_real, "inertia tensor scale y", "0.0 defaults to 1.0" },
		{ _field_real, "inertia tensor scale z", "0.0 defaults to 1.0" },
		{ _field_real, "linear damping", "this goes from 0-10 (10 is really, really high)" },
		{ _field_real, "angular damping", "this goes from 0-10 (10 is really, really high)" },
		{ _field_real_vector_3d, "center off mass offset" },
		FIELD_EXPLANATION("water physics bounding box", "if any of these fields are non-zero, this overrides the bounding box used for water physics"),
		{ _field_real, "water physics x0", "x0 value of the water physics aabb" },
		{ _field_real, "water physics x1", "x1 value of the water physics aabb" },
		{ _field_real, "water physics y0", "y0 value of the water physics aabb" },
		{ _field_real, "water physics y1", "y1 value of the water physics aabb" },
		{ _field_real, "water physics z0", "z0 value of the water physics aabb" },
		{ _field_real, "water physics z1", "z1 value of the water physics aabb" },
		{ _field_long_integer, "Runtime Shape Pointer", _field_id_zero_data },
		{ _field_real_vector_3d, "center of mass" },
		{ _field_real, "havok w center of mass" },
		{ _field_real_vector_3d, "intertia tensor x" },
		{ _field_real, "havok w intertia tensor x" },
		{ _field_real_vector_3d, "intertia tensor y" },
		{ _field_real, "havok w intertia tensor y" },
		{ _field_real_vector_3d, "intertia tensor z" },
		{ _field_real, "havok w intertia tensor z" },
		{ _field_long_integer, "runtime havok group mask " },
		{ _field_struct, "shape reference", &havok_shape_reference_struct },
		{ _field_real, "mass", nullptr, "kg", FIELD_FLAG_UNKNOWN0 | FIELD_FLAG_READ_ONLY },
		{ _field_real, "bounding sphere pad", "the bounding sphere for this rigid body will be outset by this much" },
		{ _field_char_enum, "collision quality override type", &rigid_body_collision_quality_enum },
		FIELD_PAD("pad3", 1),
		{ _field_short_integer, "runtime_flags" },
		FIELD_EXPLANATION("Stupid mass override", "If you want to override what the calculated mass distribution or artist set mass is, this is where you do it. Also, this will show up as n/100 in the game debugger. Awesome."),
		{ _field_real, "Mass body override" },
		FIELD_PAD("pad4", 8),
		
		{ _struct_version_mode_equal, 0, 21 },
		{ _field_short_block_index, "node", &nodes_block_block },
		{ _field_short_block_index, "region", &regions_block_block },
		{ _field_short_block_index_custom_search, "permutation", &permutation_search },
		FIELD_PAD("GEOIOW", 2),
		{ _field_word_flags, "flags", &rigid_body_flags },
		{ _field_short_enum, "motion type", &rigid_body_motion_enum },
		FIELD_PAD("FMEB", 4),
		{ _field_real, "linear damping", "this goes from 0-10 (10 is really, really high)" },
		{ _field_real, "angular damping", "this goes from 0-10 (10 is really, really high)" },
		{ _field_struct, "shape reference", &havok_shape_reference_struct },
		{ _field_real, "mass", nullptr, "kg", FIELD_FLAG_UNKNOWN0 | FIELD_FLAG_READ_ONLY },
		{ _field_real_vector_3d, "center of mass" },
		{ _field_real, "havok w center of mass" },
		{ _field_real_vector_3d, "intertia tensor x" },
		{ _field_real, "havok w intertia tensor x" },
		{ _field_real_vector_3d, "intertia tensor y" },
		{ _field_real, "havok w intertia tensor y" },
		{ _field_real_vector_3d, "intertia tensor z" },
		{ _field_real, "havok w intertia tensor z" },
		{ _field_real_vector_3d, "center off mass offset" },
		FIELD_PAD("JUCOI", 4),
		
		{ _field_terminator }
	};

	STRINGS(rigid_body_flags)
	{
		"has no phantom power version#don\'t check this flag without talking to eamon",
		"infinite intertia tensor#rigid body will never have angular velocity",
		"can use mopps#this flag was invented for the behemoth and is dangerous to use anywhere else (obsolete)!",
		"Havok rigid body#rigid body properties like center of mass and inertia tensor come from Havok Content Tools (and shouldn\'t be edited in Bonobo)",
		"explicit mass#the mass is explicit, and not computed based on volume and density",
		"absolute center of mass#the \'center of mass offset\' is relative to the pivot and not to the computed center",
		"force keyframed#rigid body is always keyframed and can\'t be overriden to dynamic or fixed",
		"force not cut NavMesh#this rigid body will not generate a cutting silhouette"
	};
	STRING_LIST(rigid_body_flags, rigid_body_flags_strings, _countof(rigid_body_flags_strings));

	STRINGS(rigid_body_motion_enum)
	{
		"sphere",
		"stabilized sphere",
		"box",
		"stabilized box",
		"keyframed",
		"fixed"
	};
	STRING_LIST(rigid_body_motion_enum, rigid_body_motion_enum_strings, _countof(rigid_body_motion_enum_strings));

	STRINGS(rigid_body_collision_quality_enum)
	{
		"none",
		"debris_simple_toi",
		"moving",
		"critical",
		"bullet",
		"character",
		"fixed"
	};
	STRING_LIST(rigid_body_collision_quality_enum, rigid_body_collision_quality_enum_strings, _countof(rigid_body_collision_quality_enum_strings));

	#define RIGID_BODY_INDICES_BLOCK_ID { 0xC6210EEA, 0x4B0D46CA, 0xB5ECB5CE, 0xFCB173A7 }
	TAG_STRUCT(
		rigid_body_indices_block,
		"rigid_body_indices_block",
		"rigid_body_indices_block",
		"s_rigid_body_indices_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RIGID_BODY_INDICES_BLOCK_ID)
	{
		{ _field_short_block_index, "rigid body", &rigid_bodies_block_block },
		{ _field_terminator }
	};

	#define ROOM_DOOR_PORTAL_ENCODED_PAS_BLOCK_ID { 0x79C40107, 0xC34F4FFE, 0xA9B0E0BA, 0x40627A21 }
	TAG_STRUCT(
		room_door_portal_encoded_pas_block,
		"room_door_portal_encoded_pas_block",
		"room_door_portal_encoded_pas_block",
		"s_room_door_portal_encoded_pas_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ROOM_DOOR_PORTAL_ENCODED_PAS_BLOCK_ID)
	{
		{ _field_long_integer, "encoded data" },
		{ _field_terminator }
	};

	#define RULES_BLOCK_ID { 0xDBEB4D68, 0x20704C35, 0x9B47CD3F, 0xC94F08B }
	TAG_STRUCT(
		rules_block,
		"rules_block",
		"rules_block",
		"s_rules_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RULES_BLOCK_ID)
	{
		{ _field_string, "name" },
		{ _field_real_rgb_color, "tint color" },
		FIELD_PAD("VJSKSPI", 32),
		{ _field_block, "states", &states_block_block },
		{ _field_terminator }
	};

	#define RUMBLE_DEFINITION_STRUCT_ID { 0xF1DC7B29, 0xB7B46B3, 0xBF03AEBC, 0x767187CF }
	TAG_STRUCT(
		rumble_definition_struct,
		"rumble_definition_struct",
		"rumble_definition_struct",
		"s_rumble_definition_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RUMBLE_DEFINITION_STRUCT_ID)
	{
		FIELD_EXPLANATION("low frequency rumble", nullptr),
		{ _field_struct, "low frequency rumble", &rumble_frequency_definition_struct },
		FIELD_EXPLANATION("high frequency rumble", nullptr),
		{ _field_struct, "high frequency rumble", &rumble_frequency_definition_struct },
		{ _field_terminator }
	};

	#define RUMBLE_FREQUENCY_DEFINITION_STRUCT_ID { 0xEA65C648, 0xFDA541ED, 0x98C4CA63, 0xC70E97CC }
	TAG_STRUCT(
		rumble_frequency_definition_struct,
		"rumble_frequency_definition_struct",
		"rumble_frequency_definition_struct",
		"s_rumble_frequency_definition_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RUMBLE_FREQUENCY_DEFINITION_STRUCT_ID)
	{
		{ _field_real, "duration", nullptr, "seconds" },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "dirty whore", &mapping_function }, // structure_version:2
		FIELD_USELESS_PAD("value", 16),
		{ _field_terminator }
	};

	#define RUMBLE_STRUCT_DEFINITION_ID { 0xA87A0F82, 0xD7044788, 0x8CCC9E6E, 0xC4B87FD1 }
	TAG_STRUCT(
		rumble_struct_definition,
		"rumble_struct_definition",
		"rumble_struct_definition",
		"s_rumble_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RUMBLE_STRUCT_DEFINITION_ID)
	{
		{ _field_struct, "rumble", &rumble_definition_struct },
		{ _field_terminator }
	};

	#define RUNTIME_DECORATOR_SET_BLOCK_ID { 0xEBC8164A, 0x583140C6, 0xBB8277A0, 0x58357ADA }
	TAG_STRUCT(
		runtime_decorator_set_block,
		"runtime_decorator_set_block",
		"runtime_decorator_set_block",
		"s_runtime_decorator_set_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RUNTIME_DECORATOR_SET_BLOCK_ID)
	{
		{ _field_tag_reference, "decorator set reference", &decorator_set_group_reference },
		{ _field_terminator }
	};

	#define RUNTIME_MATERIALS_BLOCK_ID { 0x83B9D6FB, 0xE0F845B8, 0x945A3F96, 0xD4F38AEE }
	TAG_STRUCT(
		runtime_materials_block,
		"runtime_materials_block",
		"runtime_materials_block",
		"s_runtime_materials_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RUNTIME_MATERIALS_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "parent name" },
		{ _field_short_integer, "runtime material index" },
		{ _field_word_flags, "flags", &global_material_flags_definition },
		{ _field_string_id, "general armor" },
		{ _field_string_id, "specific armor" },
		{ _field_struct, "wet proxies", &wet_proxies_struct },
		{ _field_short_integer, "runtime dry base material index" },
		FIELD_PAD("RMBP1", 2),
		{ _field_struct, "physics properties", &material_physics_properties_struct }, // structure_version:1
		{ _field_tag_reference, "breakable surface", &breakable_surface_group_reference },
		{ _field_struct, "sweeteners", &materials_sweeteners_struct },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_block, "underwater proxies", &underwater_proxies_block_block },
		{ _field_terminator }
	};

	#define RUNTIME_QUERYABLE_PROPERTIES$3_ID { 0xC7C8D371, 0x1E1A4BB1, 0xBE9FC430, 0xBEC7DEBE }
	TAG_STRUCT(
		runtime_queryable_properties$3,
		"runtime_queryable_properties",
		"runtime_queryable_properties",
		"s_runtime_queryable_properties$3",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RUNTIME_QUERYABLE_PROPERTIES$3_ID)
	{
		{ _field_short_block_index, "index", &g_null_block_block },
		{ _field_terminator }
	};

	#define RUNTIME_QUERYABLE_PROPERTIES_STRUCT_DEFINITION_ID { 0xC5470BA, 0x5AEE4BEC, 0xBEC72F30, 0x8902CAC }
	TAG_STRUCT(
		runtime_queryable_properties_struct_definition,
		"runtime_queryable_properties",
		"runtime_queryable_properties",
		"s_runtime_queryable_properties",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RUNTIME_QUERYABLE_PROPERTIES_STRUCT_DEFINITION_ID)
	{
		{ _field_short_block_index, "index", &g_null_block_block },
		{ _field_terminator }
	};

	#define RUNTIME_REGION_INDEX_ARRAY_STRUCT_DEFINITION_ID { 0x698D671C, 0x87E64985, 0x8D63EF05, 0xF3EAE84E }
	TAG_STRUCT(
		runtime_region_index_array_struct_definition,
		"runtime_region_index_array",
		"runtime_region_index_array",
		"s_runtime_region_index_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		RUNTIME_REGION_INDEX_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_char_integer, "runtime region index" },
		{ _field_terminator }
	};

	#define S_SCENARIO_LIGHTMAP_SILHOUETTE_EDGE_ID { 0x49FD0680, 0x27CF4DB4, 0xB00C2B82, 0x3FA77F66 }
	TAG_STRUCT(
		s_scenario_lightmap_silhouette_edge,
		"s_scenario_lightmap_silhouette_edge",
		"s_scenario_lightmap_silhouette_edge",
		"s_s_scenario_lightmap_silhouette_edge",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		S_SCENARIO_LIGHTMAP_SILHOUETTE_EDGE_ID)
	{
		{ _field_long_integer, "First index" },
		{ _field_long_integer, "Second index" },
		{ _field_terminator }
	};

	#define S_SCENARIO_LIGHTMAP_SILHOUETTE_GROUP_ID { 0x87979F29, 0x51A74613, 0xBB149BB5, 0x80E554C9 }
	TAG_STRUCT(
		s_scenario_lightmap_silhouette_group,
		"s_scenario_lightmap_silhouette_group",
		"s_scenario_lightmap_silhouette_group",
		"s_s_scenario_lightmap_silhouette_group",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		S_SCENARIO_LIGHTMAP_SILHOUETTE_GROUP_ID)
	{
		{ _field_long_integer, "First edge" },
		{ _field_long_integer, "Edge count" },
		{ _field_real_vector_3d, "direction" },
		{ _field_real, "attenuation factor" },
		{ _field_real, "attenuation distance" },
		{ _field_real, "shaft intensity" },
		{ _field_terminator }
	};

	#define S_SCENARIO_LIGHTMAP_SILHOUETTE_VERTEX_ID { 0xB6061A2F, 0x5DAD41D4, 0x81C1BD29, 0xC20C8CEE }
	TAG_STRUCT(
		s_scenario_lightmap_silhouette_vertex,
		"s_scenario_lightmap_silhouette_vertex",
		"s_scenario_lightmap_silhouette_vertex",
		"s_s_scenario_lightmap_silhouette_vertex",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		S_SCENARIO_LIGHTMAP_SILHOUETTE_VERTEX_ID)
	{
		{ _field_real_point_3d, "position" },
		{ _field_terminator }
	};

	#define SANDBOX_PROPERTY_ALLOWED_VALUES_REFERENCE_BLOCK_ID { 0x266531A0, 0x83F842C7, 0x802AA55C, 0x5A9D94BE }
	TAG_STRUCT(
		sandbox_property_allowed_values_reference_block,
		"sandbox_property_allowed_values_reference_block",
		"sandbox_property_allowed_values_reference_block",
		"s_sandbox_property_allowed_values_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SANDBOX_PROPERTY_ALLOWED_VALUES_REFERENCE_BLOCK_ID)
	{
		{ _field_string_id, "property name" },
		{ _field_char_enum, "parameter_type", &text_value_pair_parameter_type },
		FIELD_PAD("blug", 3),
		{ _field_block, "allowed values", &text_value_pair_reference_block_block },
		{ _field_terminator }
	};

	STRINGS(text_value_pair_parameter_type)
	{
		"integer",
		"string id",
		"real range",
		"real"
	};
	STRING_LIST(text_value_pair_parameter_type, text_value_pair_parameter_type_strings, _countof(text_value_pair_parameter_type_strings));

	#define SANDBOX_TEXT_VALUE_PAIR_DEFINITION_STRUCT_DEFINITION_ID { 0x42D0D8BD, 0x41594A07, 0x93653D79, 0x74AD97DD }
	TAG_STRUCT(
		sandbox_text_value_pair_definition_struct_definition,
		"sandbox_text_value_pair_definition_struct_definition",
		"sandbox_text_value_pair_definition_struct_definition",
		"s_sandbox_text_value_pair_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SANDBOX_TEXT_VALUE_PAIR_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "property values", &sandbox_property_allowed_values_reference_block_block },
		{ _field_terminator }
	};

	#define SCALAR_FUNCTION_NAMED_STRUCT_ID { 0x72CB9289, 0x276481E, 0x9467A351, 0xF56D7C18 }
	TAG_STRUCT(
		scalar_function_named_struct,
		"scalar_function_named_struct",
		"scalar_function_named_struct",
		"s_scalar_function_named_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCALAR_FUNCTION_NAMED_STRUCT_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "function", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define SCALAR_FUNCTION_NAMED_STRUCT_DEFAULT_ONE_ID { 0x384EBA00, 0x2AA94534, 0xAD11D043, 0x4A23EF26 }
	TAG_STRUCT(
		scalar_function_named_struct_default_one,
		"scalar_function_named_struct_default_one",
		"scalar_function_named_struct_default_one",
		"s_scalar_function_named_struct_default_one",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCALAR_FUNCTION_NAMED_STRUCT_DEFAULT_ONE_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "function", &mapping_function_default_one }, // structure_version:2
		{ _field_terminator }
	};

	#define SCENARIOATTACHEDEFFECTSBLOCK_ID { 0xB21743AF, 0x88CE4201, 0x8541372F, 0x5401FFD4 }
	TAG_STRUCT(
		scenarioattachedeffectsblock,
		"scenarioAttachedEffectsBlock",
		"scenarioAttachedEffectsBlock",
		"s_scenarioattachedeffectsblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIOATTACHEDEFFECTSBLOCK_ID)
	{
		{ _field_long_integer, "cutscene flag index" },
		{ _field_tag_reference, "effect reference", &effect_group_reference$6 },
		{ _field_terminator }
	};

	TAG_REFERENCE(effect_group_reference$6, EFFECT_TAG, TAG_REFERENCE_FLAG_NOT_A_RESOURCE_DEPENDENCY);

	#define SCENARIOATTACHEDLENSFLARESBLOCK_ID { 0x1CC24BE7, 0x4FC44DAE, 0xABDDD6C1, 0xD3C9E07 }
	TAG_STRUCT(
		scenarioattachedlensflaresblock,
		"scenarioAttachedLensFlaresBlock",
		"scenarioAttachedLensFlaresBlock",
		"s_scenarioattachedlensflaresblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIOATTACHEDLENSFLARESBLOCK_ID)
	{
		{ _field_long_integer, "cutscene flag index" },
		{ _field_tag_reference, "lens flare reference", &lens_flare_group_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(lens_flare_group_reference$2, LENS_FLARE_TAG, TAG_REFERENCE_FLAG_NOT_A_RESOURCE_DEPENDENCY);

	#define SCENARIOATTACHEDLIGHTCONESBLOCK_ID { 0x27DC2CA5, 0x251942AB, 0x992F3401, 0x5F00B2BA }
	TAG_STRUCT(
		scenarioattachedlightconesblock,
		"scenarioAttachedLightConesBlock",
		"scenarioAttachedLightConesBlock",
		"s_scenarioattachedlightconesblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIOATTACHEDLIGHTCONESBLOCK_ID)
	{
		{ _field_long_integer, "cutscene flag index" },
		{ _field_tag_reference, "light cone reference", &light_cone_group_reference },
		{ _field_real_argb_color, "color" },
		{ _field_real_point_2d, "size" },
		{ _field_real, "intensity" },
		{ _field_tag_reference, "intensity curve", &curve_scalar_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(light_cone_group_reference, LIGHT_CONE_TAG);

	TAG_REFERENCE(curve_scalar_group_reference, CURVE_SCALAR_TAG);

	#define SCENARIOBSPREFERENCEBLOCK_ID { 0x7DDBEF56, 0x5E7649D4, 0xA10F631A, 0xC7523C29 }
	TAG_STRUCT(
		scenariobspreferenceblock,
		"scenarioBspReferenceBlock",
		"scenarioBspReferenceBlock",
		"s_scenariobspreferenceblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIOBSPREFERENCEBLOCK_ID)
	{
		{ _field_tag_reference, "structure design", &scenario_structure_bsp_group_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(scenario_structure_bsp_group_reference$2, SCENARIO_STRUCTURE_BSP_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define SCENARIODESIGNERRESOURCEDEPENDENCIESBLOCK_ID { 0xA3BBAFF9, 0xC83C4712, 0xBB6E582F, 0xFB6D2D17 }
	TAG_STRUCT(
		scenariodesignerresourcedependenciesblock,
		"scenarioDesignerResourceDependenciesBlock",
		"scenarioDesignerResourceDependenciesBlock",
		"s_scenariodesignerresourcedependenciesblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIODESIGNERRESOURCEDEPENDENCIESBLOCK_ID)
	{
		{ _field_tag_reference, "tag", &_reference$11 },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference$11, INVALID_TAG);

	#define SCENARIODESIGNERZONETAGREFERENCEBLOCK_ID { 0xC7638BFA, 0x6D494909, 0x8E215D8D, 0xD8F92497 }
	TAG_STRUCT(
		scenariodesignerzonetagreferenceblock,
		"scenarioDesignerZoneTagReferenceBlock",
		"scenarioDesignerZoneTagReferenceBlock",
		"s_scenariodesignerzonetagreferenceblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIODESIGNERZONETAGREFERENCEBLOCK_ID)
	{
		{ _field_tag_reference, "tag", &_reference$9 },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference$9, INVALID_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define SCENARIOFLOATINGSHADOWCASCADESETTINGSARRAY_ID { 0xB53B3A91, 0xBF404DB2, 0x89CA7210, 0x6570A7D4 }
	TAG_STRUCT(
		scenariofloatingshadowcascadesettingsarray,
		"scenarioFloatingShadowCascadeSettingsArray",
		"scenarioFloatingShadowCascadeSettingsArray",
		"s_scenariofloatingshadowcascadesettingsarray",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIOFLOATINGSHADOWCASCADESETTINGSARRAY_ID)
	{
		FIELD_GROUP_BEGIN("CASCADE"),
		{ _field_real, "cascade half-width" },
		{ _field_real, "cascade length" },
		{ _field_real, "cascade offset" },
		{ _field_real, "bias" },
		{ _field_real, "filter width" },
		{ _field_real, "sun direction offset", "if we want to slide the frustum up closer to the sun so that not as much of the frustum is below the ground" },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define SCENARIOFLOATINGSHADOWSETTINGSSTRUCT_ID { 0x1F09F99A, 0x3F304C08, 0xA8530F29, 0xAA552F0A }
	TAG_STRUCT(
		scenariofloatingshadowsettingsstruct,
		"scenarioFloatingShadowSettingsStruct",
		"scenarioFloatingShadowSettingsStruct",
		"s_scenariofloatingshadowsettingsstruct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIOFLOATINGSHADOWSETTINGSSTRUCT_ID)
	{
		{ _field_byte_integer, "number of cascades" },
		{ _field_byte_integer, "has been initialized" },
		{ _field_char_enum, "quality", &floatingshadowqualitydefinition },
		{ _field_char_enum, "resolution", &floatingshadowbufferresolution },
		{ _field_real, "static shadow sharpening" },
		{ _field_array, "frustums", &scenariofloatingshadowcascadesettingsarray$2 },
		{ _field_terminator }
	};

	STRINGS(floatingshadowqualitydefinition)
	{
		"8 tap",
		"12 tap",
		"6 tap"
	};
	STRING_LIST(floatingshadowqualitydefinition, floatingshadowqualitydefinition_strings, _countof(floatingshadowqualitydefinition_strings));

	STRINGS(floatingshadowbufferresolution)
	{
		"512x512",
		"800x800"
	};
	STRING_LIST(floatingshadowbufferresolution, floatingshadowbufferresolution_strings, _countof(floatingshadowbufferresolution_strings));

	#define SCENARIORANDOMORDNANCEDROPPOINTBLOCK_ID { 0x8246CA07, 0xC304010, 0xBBFA7F86, 0x6DBDDF6A }
	TAG_STRUCT(
		scenariorandomordnancedroppointblock,
		"scenarioRandomOrdnanceDropPointBlock",
		"scenarioRandomOrdnanceDropPointBlock",
		"s_scenariorandomordnancedroppointblock",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIORANDOMORDNANCEDROPPOINTBLOCK_ID)
	{
		{ _field_short_block_index, "Drop point", &scenario_scenery_block_block },
		{ _field_terminator }
	};

	#define SCENARIORANDOMORDNANCEDROPSETBLOCK_ID { 0x53132DE6, 0x9A8A49F1, 0xA35A67A0, 0x2E1EE7C6 }
	TAG_STRUCT(
		scenariorandomordnancedropsetblock,
		"scenarioRandomOrdnanceDropSetBlock",
		"scenarioRandomOrdnanceDropSetBlock",
		"s_scenariorandomordnancedropsetblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIORANDOMORDNANCEDROPSETBLOCK_ID)
	{
		{ _field_word_flags, "drop set flags", &ordnance_dropset_flags },
		FIELD_PAD("ODSF", 2),
		{ _field_string, "name" },
		{ _field_long_integer, "count" },
		{ _field_tag_reference, "Ordnance List", &scenario_ordnance_list_group_reference },
		{ _field_block, "Drop point list", &scenariorandomordnancedroppointblock_block },
		{ _field_terminator }
	};

	STRINGS(ordnance_dropset_flags)
	{
		"initial drop#will be used for initial drops",
		"player drop#will be used for personal drops",
		"random drop#will be used for random drops",
		"objective drop#will be used for objective-based drops"
	};
	STRING_LIST(ordnance_dropset_flags, ordnance_dropset_flags_strings, _countof(ordnance_dropset_flags_strings));

	TAG_REFERENCE(scenario_ordnance_list_group_reference, SCENARIO_ORDNANCE_LIST_TAG);

	#define SCENARIOUNSAFESPAWNZONETRIGGERVOLUMESBLOCK_ID { 0xD81BF5E7, 0xF2C24D8E, 0xA5E09973, 0xD7BACE17 }
	TAG_STRUCT(
		scenariounsafespawnzonetriggervolumesblock,
		"scenarioUnsafeSpawnZoneTriggerVolumesBlock",
		"scenarioUnsafeSpawnZoneTriggerVolumesBlock",
		"s_scenariounsafespawnzonetriggervolumesblock",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIOUNSAFESPAWNZONETRIGGERVOLUMESBLOCK_ID)
	{
		{ _field_short_block_index, "trigger volume", &scenario_trigger_volume_block_block },
		{ _field_terminator }
	};

	#define SCENARIOVOLUMETRICLIGHTSHAFTSETTINGSSTRUCT_ID { 0xDF38658D, 0x7724BB3, 0xB0012C2A, 0xACBA277F }
	TAG_STRUCT(
		scenariovolumetriclightshaftsettingsstruct,
		"scenarioVolumetricLightShaftSettingsStruct",
		"scenarioVolumetricLightShaftSettingsStruct",
		"s_scenariovolumetriclightshaftsettingsstruct",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIOVOLUMETRICLIGHTSHAFTSETTINGSSTRUCT_ID)
	{
		{ _field_byte_flags, "flags", &scenariovolumetriclightshaftsettingsflags },
		FIELD_PAD("pad the byte flag", 3),
		{ _field_real_vector_3d, "source direction" },
		{ _field_real_rgb_color, "shaft color tint" },
		{ _field_real, "exposure level" },
		{ _field_real, "decay" },
		{ _field_terminator }
	};

	STRINGS(scenariovolumetriclightshaftsettingsflags)
	{
		"enable volumetric light shafts for this BSP"
	};
	STRING_LIST(scenariovolumetriclightshaftsettingsflags, scenariovolumetriclightshaftsettingsflags_strings, _countof(scenariovolumetriclightshaftsettingsflags_strings));

	#define SCENARIO_ACOUSTIC_CLUSTER_REFERENCE_DEFINITION_ID { 0xCD19EBEB, 0x3BC64C0C, 0x86924A34, 0x74C2621D }
	TAG_STRUCT(
		scenario_acoustic_cluster_reference_definition,
		"scenario_acoustic_cluster_reference_definition",
		"scenario_acoustic_cluster_reference_definition",
		"s_scenario_acoustic_cluster_reference_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ACOUSTIC_CLUSTER_REFERENCE_DEFINITION_ID)
	{
		{ _field_char_integer, "bsp index" },
		{ _field_byte_integer, "cluster index" },
		{ _field_terminator }
	};

	#define SCENARIO_ACOUSTIC_LOCATION_DEFINITION_ID { 0xDEE4A7BC, 0xF61B4AED, 0xB8F89514, 0x79034AFF }
	TAG_STRUCT(
		scenario_acoustic_location_definition,
		"scenario_acoustic_location_definition",
		"scenario_acoustic_location_definition",
		"s_scenario_acoustic_location_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ACOUSTIC_LOCATION_DEFINITION_ID)
	{
		{ _field_short_block_index, "sector index", &scenario_acoustic_sector_block_block },
		{ _field_struct, "cluster reference", &scenario_acoustic_cluster_reference_definition },
		{ _field_terminator }
	};

	#define SCENARIO_ACOUSTIC_SECTOR_BLOCK_STRUCT_ID { 0xED9F5D9C, 0xFBD64377, 0x93DCA409, 0xD6DDDBB8 }
	TAG_STRUCT(
		scenario_acoustic_sector_block_struct,
		"scenario_acoustic_sector_block_struct",
		"scenario_acoustic_sector_block_struct",
		"s_scenario_acoustic_sector_block_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ACOUSTIC_SECTOR_BLOCK_STRUCT_ID)
	{
		{ _field_block, "points", &acoustic_sector_point_block_block },
		{ _field_real_plane_3d, "top plane" },
		{ _field_real_plane_3d, "bottom plane" },
		{ _field_long_flags, "flags", &acousticpaletteflags },
		{ _field_real, "occlusion value" },
		{ _field_short_block_index, "acoustics", &scenario_acoustics_palette_block_definition_block },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		{ _field_real, "height" },
		{ _field_real, "sink" },
		{ _field_terminator }
	};

	STRINGS(acousticpaletteflags)
	{
		"occlude if above",
		"occlude if below"
	};
	STRING_LIST(acousticpaletteflags, acousticpaletteflags_strings, _countof(acousticpaletteflags_strings));

	#define SCENARIO_ACOUSTIC_TRANSITION_BLOCK_STRUCT_ID { 0xA2CCEB01, 0x558A4A16, 0x963B2BAC, 0x2F917EB4 }
	TAG_STRUCT(
		scenario_acoustic_transition_block_struct,
		"scenario_acoustic_transition_block_struct",
		"scenario_acoustic_transition_block_struct",
		"s_scenario_acoustic_transition_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ACOUSTIC_TRANSITION_BLOCK_STRUCT_ID)
	{
		{ _field_real_point_3d, "center" },
		{ _field_real_point_3d, "forward" },
		{ _field_real_point_3d, "up" },
		{ _field_real, "half width" },
		{ _field_real, "half height" },
		{ _field_real, "sample point offset 0" },
		{ _field_real, "sample point offset 1" },
		{ _field_short_block_index, "sample 0", &scenario_acoustics_palette_block_definition_block },
		{ _field_short_block_index, "sample 1", &scenario_acoustics_palette_block_definition_block },
		{ _field_struct, "location 0", &scenario_acoustic_location_definition },
		{ _field_struct, "location 1", &scenario_acoustic_location_definition },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		FIELD_PAD("CKJEWRSDF", 2),
		{ _field_terminator }
	};

	#define SCENARIO_ACOUSTICS_AMBIENCE_DEFINITION_ID { 0x35137799, 0x93F24E9E, 0x81364E61, 0xE072BBAB }
	TAG_STRUCT(
		scenario_acoustics_ambience_definition,
		"scenario_acoustics_ambience_definition",
		"scenario_acoustics_ambience_definition",
		"s_scenario_acoustics_ambience_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ACOUSTICS_AMBIENCE_DEFINITION_ID)
	{
		{ _field_tag_reference, "background sound", &sound_looping_group_reference$2 },
		{ _field_tag_reference, "weather sound", "plays when rain is active, weather rate gets applied to scale.", &sound_looping_group_reference$2 },
		{ _field_tag_reference, "entry sound", "plays when entering this area", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "exit sound", "plays when leaving this area", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "cutoff distance" },
		{ _field_real, "interpolation time", nullptr, "seconds", MAKE_ALT_NAMES("interpolation speed") },
		{ _field_long_flags, "scale flags DEPRICATED", &background_sound_scale_flags_definition },
		{ _field_real_fraction, "interior scale DEPRICATED" },
		{ _field_real_fraction, "portal scale DEPRICATED" },
		{ _field_real_fraction, "exterior scale DEPRICATED" },
		{ _field_terminator }
	};

	STRINGS(background_sound_scale_flags_definition)
	{
		"override default scale",
		"use adjacent cluster as portal scale",
		"use adjacent cluster as exterior scale",
		"scale with weather intensity"
	};
	STRING_LIST(background_sound_scale_flags_definition, background_sound_scale_flags_definition_strings, _countof(background_sound_scale_flags_definition_strings));

	#define SCENARIO_ACOUSTICS_ENVIRONMENT_DEFINITION_ID { 0x718F78F4, 0x7FB14DA7, 0x88A566D2, 0x3608B533 }
	TAG_STRUCT(
		scenario_acoustics_environment_definition,
		"scenario_acoustics_environment_definition",
		"scenario_acoustics_environment_definition",
		"s_scenario_acoustics_environment_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ACOUSTICS_ENVIRONMENT_DEFINITION_ID)
	{
		{ _field_tag_reference, "sound environment", &sound_environment_group_reference },
		{ _field_long_enum, "type", &sound_class_acoustics_string_definition },
		{ _field_real, "cutoff distance" },
		{ _field_real, "interpolation time", nullptr, "seconds", MAKE_ALT_NAMES("interpolation speed") },
		{ _field_terminator }
	};

	TAG_REFERENCE(sound_environment_group_reference, SOUND_ENVIRONMENT_TAG);

	STRINGS(sound_class_acoustics_string_definition)
	{
		"outside",
		"inside"
	};
	STRING_LIST(sound_class_acoustics_string_definition, sound_class_acoustics_string_definition_strings, _countof(sound_class_acoustics_string_definition_strings));

	#define SCENARIO_ACOUSTICS_PALETTE_BLOCK_DEFINITION_STRUCT_ID { 0xCADEB9A2, 0x119B467B, 0x82D36013, 0xDE6C1794 }
	TAG_STRUCT(
		scenario_acoustics_palette_block_definition_struct,
		"scenario_acoustics_palette_block_definition_struct",
		"scenario_acoustics_palette_block_definition_struct",
		"s_scenario_acoustics_palette_block_definition_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ACOUSTICS_PALETTE_BLOCK_DEFINITION_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		FIELD_EXPLANATION("SOUND ENVIRONMENT", nullptr),
		{ _field_struct, "reverb", &scenario_acoustics_environment_definition },
		FIELD_EXPLANATION("BACKGROUND SOUND", nullptr),
		{ _field_struct, "ambience", &scenario_acoustics_ambience_definition },
		FIELD_EXPLANATION("SOUND BANK", nullptr),
		{ _field_tag_reference, "Sound bank tag", &soundbank_group_reference },
		{ _field_tag_reference, "DVD Only sound bank tag", &soundbank_group_reference },
		{ _field_terminator }
	};

	#define SCENARIO_AIRPROBES_BLOCK_ID { 0x7F6345AD, 0x5BD4425F, 0x8DEEF6ED, 0xF522A677 }
	TAG_STRUCT(
		scenario_airprobes_block,
		"scenario_airprobes_block",
		"scenario_airprobes_block",
		"s_scenario_airprobes_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_AIRPROBES_BLOCK_ID)
	{
		{ _field_real_point_3d, "airprobe position" },
		{ _field_string_id, "airprobe name" },
		{ _field_long_integer, "BSP index" },
		{ _field_terminator }
	};

	#define SCENARIO_AND_ZONE_SET_STRUCT_ID { 0x68E9CE6F, 0xC3964CAE, 0xB0D8CDC6, 0xA3F5786D }
	TAG_STRUCT(
		scenario_and_zone_set_struct,
		"scenario_and_zone_set_struct",
		"scenario_and_zone_set_struct",
		"s_scenario_and_zone_set_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_AND_ZONE_SET_STRUCT_ID)
	{
		FIELD_CUSTOM("custom ui", _tag_field_custom_type_scenario_and_zone_set),
		{ _field_tag_reference, "scenario", &scenario_group_reference },
		{ _field_long_integer, "zone set" },
		{ _field_terminator }
	};

	TAG_REFERENCE(scenario_group_reference, SCENARIO_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define SCENARIO_ATMOSPHERE_DUMPLING_BLOCK_ID { 0xD490A4DF, 0x4B7F4238, 0x8EC0F957, 0xE68E2D6 }
	TAG_STRUCT(
		scenario_atmosphere_dumpling_block,
		"scenario_atmosphere_dumpling_block",
		"scenario_atmosphere_dumpling_block",
		"s_scenario_atmosphere_dumpling_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ATMOSPHERE_DUMPLING_BLOCK_ID)
	{
		{ _field_struct, "dumpling", &scenario_dumpling_struct },
		{ _field_short_block_index, "atmosphere", &scenario_atmosphere_palette_block_block },
		FIELD_PAD("pad", 2),
		{ _field_terminator }
	};

	#define SCENARIO_ATMOSPHERE_PALETTE_BLOCK_ID { 0x5E3AA7DD, 0x3DA64CE6, 0xA9642C49, 0xB0358993 }
	TAG_STRUCT(
		scenario_atmosphere_palette_block,
		"scenario_atmosphere_palette_block",
		"scenario_atmosphere_palette_block",
		"s_scenario_atmosphere_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ATMOSPHERE_PALETTE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_word_integer, "Atmosphere Setting Index" },
		FIELD_PAD("XQLJZUE", 2),
		{ _field_tag_reference, "atmosphere", &atmosphere_fog_group_reference },
		{ _field_terminator }
	};

	#define SCENARIO_BIPED_BLOCK_ID { 0xD9AC3CB5, 0x4EB541D4, 0xA631C1B6, 0x364F885E }
	VERSIONED_TAG_STRUCT(
		scenario_biped_block,
		"scenario_biped_block",
		"scenario_biped_block",
		"s_scenario_biped_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_BIPED_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 8 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_biped_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "unit data", &scenario_unit_struct },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		
		{ _struct_version_mode_equal, 1, 8 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_biped_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "unit data", &scenario_unit_struct },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		
		{ _struct_version_mode_equal, 0, 12 },
		{ _field_short_block_index, "type", &scenario_biped_palette_block_block, _field_id_type },
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_word_flags, "not placed", &object_location_placement_flags },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _tag_field_attributed_definition_position },
		{ _field_real_euler_angles_3d, "rotation", _tag_field_attributed_definition_orientation },
		FIELD_PAD("BX", 4),
		{ _field_long_block_index, "environment object reference", &dont_use_me_scenario_environment_object_block_block },
		FIELD_PAD("ATYNW", 16),
		FIELD_PAD("MYPARXQMK", 16),
		{ _field_struct, "unit data", &old_scenario_unit_struct },
		FIELD_PAD("EURXYL", 32),
		
		{ _field_terminator }
	};

	STRINGS(object_location_placement_flags)
	{
		"not automatically",
		"unused0",
		"unused1",
		"unused2",
		"lock type to env. object",
		"lock transform to env. object",
		"never placed",
		"lock name to env. object",
		"create at rest",
		"store orientations",
		"pvs bound",
		"startup",
		"attach physically",
		"attach with scale",
		"no parent lighting"
	};
	STRING_LIST(object_location_placement_flags, object_location_placement_flags_strings, _countof(object_location_placement_flags_strings));

	#define SCENARIO_BIPED_PALETTE_BLOCK_ID { 0x3CCBF08D, 0x94FD4CD9, 0x9D7E48BE, 0x7F3F3102 }
	TAG_STRUCT(
		scenario_biped_palette_block,
		"scenario_biped_palette_block",
		"scenario_biped_palette_block",
		"s_scenario_biped_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_BIPED_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &biped_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(biped_group_reference, BIPED_TAG);

	#define SCENARIO_BUDGET_REFERENCES_BLOCK_ID { 0x236E8B7D, 0x9D0D45DE, 0x9CEAEB74, 0xFEDA3382 }
	TAG_STRUCT(
		scenario_budget_references_block,
		"scenario_budget_references_block",
		"scenario_budget_references_block",
		"s_scenario_budget_references_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_BUDGET_REFERENCES_BLOCK_ID)
	{
		{ _field_tag_reference, "reference", &_reference$10 },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference$10, INVALID_TAG);

	#define SCENARIO_CAMERA_FX_PALETTE_BLOCK_ID { 0x391597B7, 0x927B496B, 0xA8EBEFFE, 0x90972B2F }
	TAG_STRUCT(
		scenario_camera_fx_palette_block,
		"scenario_camera_fx_palette_block",
		"scenario_camera_fx_palette_block",
		"s_scenario_camera_fx_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CAMERA_FX_PALETTE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_tag_reference, "cluster camera_fx tag", "if empty, uses default", "if empty, uses default", &camera_fx_settings_group_reference },
		{ _field_byte_flags, "flags", &camera_fx_palette_flags },
		FIELD_PAD("EKJFER", 3),
		{ _field_real, "forced exposure", "the target exposure (ONLY USED WHEN FORCE EXPOSURE IS CHECKED)", "stops" },
		{ _field_real, "forced auto-exposure screen brightness", "how bright you want the screen to be (ONLY USED WHEN FORCE AUTO EXPOSURE IS CHECKED)", nullptr, "[0.0001-1]" },
		{ _field_real, "exposure min", nullptr, "stops" },
		{ _field_real, "exposure max", nullptr, "stops" },
		{ _field_real, "inherent bloom" },
		{ _field_real, "bloom intensity" },
		{ _field_terminator }
	};

	STRINGS(camera_fx_palette_flags)
	{
		"force exposure",
		"force auto-exposure",
		"override exposure bounds",
		"override inherent bloom",
		"override bloom intensity"
	};
	STRING_LIST(camera_fx_palette_flags, camera_fx_palette_flags_strings, _countof(camera_fx_palette_flags_strings));

	#define SCENARIO_CHEAP_PARTICLE_SYSTEM_PALETTE_BLOCK_ID { 0x826B3BF5, 0xBB024D06, 0x9A9CC14D, 0xDE9EFD73 }
	TAG_STRUCT(
		scenario_cheap_particle_system_palette_block,
		"scenario_cheap_particle_system_palette_block",
		"scenario_cheap_particle_system_palette_block",
		"s_scenario_cheap_particle_system_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CHEAP_PARTICLE_SYSTEM_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "definition", &cheap_particle_emitter_group_reference$3 },
		{ _field_terminator }
	};

	TAG_REFERENCE(cheap_particle_emitter_group_reference$3, CHEAP_PARTICLE_EMITTER_TAG);

	#define SCENARIO_CHEAP_PARTICLE_SYSTEMS_BLOCK_ID { 0x7D7FD824, 0xE8234CD7, 0xAA72C46F, 0x428C991 }
	TAG_STRUCT(
		scenario_cheap_particle_systems_block,
		"scenario_cheap_particle_systems_block",
		"scenario_cheap_particle_systems_block",
		"s_scenario_cheap_particle_systems_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CHEAP_PARTICLE_SYSTEMS_BLOCK_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_cheap_particle_system_palette_block_block },
		FIELD_PAD("VLKSJLER", 2),
		{ _field_real_point_3d, "position" },
		{ _field_real_euler_angles_3d, "rotation" },
		{ _field_terminator }
	};

	#define SCENARIO_CHILD_REFERENCES_BLOCK_ID { 0xA2EFF3E9, 0xFC0242BB, 0xAE4FD2CD, 0x88ACCE9B }
	TAG_STRUCT(
		scenario_child_references_block,
		"scenario_child_references_block",
		"scenario_child_references_block",
		"s_scenario_child_references_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CHILD_REFERENCES_BLOCK_ID)
	{
		{ _field_tag_reference, "tag", &scenario_group_reference$3 },
		{ _field_terminator }
	};

	TAG_REFERENCE(scenario_group_reference$3, SCENARIO_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR);

	#define SCENARIO_CINEMATIC_LIGHTING_PALETTE_BLOCK_ID { 0x43D75F43, 0xE5A54B36, 0xB4332785, 0x75D44A46 }
	TAG_STRUCT(
		scenario_cinematic_lighting_palette_block,
		"scenario_cinematic_lighting_palette_block",
		"scenario_cinematic_lighting_palette_block",
		"s_scenario_cinematic_lighting_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CINEMATIC_LIGHTING_PALETTE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_tag_reference, "cinematic_lighting_tag", &new_cinematic_lighting_group_reference },
		{ _field_terminator }
	};

	#define SCENARIO_CINEMATICS_BLOCK_ID { 0x59336E8E, 0x27A04735, 0xA9545DF3, 0x921A7282 }
	TAG_STRUCT(
		scenario_cinematics_block,
		"scenario_cinematics_block",
		"scenario_cinematics_block",
		"s_scenario_cinematics_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CINEMATICS_BLOCK_ID)
	{
		{ _field_byte_flags, "flags", &scenario_cinematics_flags },
		FIELD_PAD("SDJLKANF", 3),
		{ _field_tag_reference, "name", &cinematic_group_reference },
		{ _field_terminator }
	};

	STRINGS(scenario_cinematics_flags)
	{
		"debug only"
	};
	STRING_LIST(scenario_cinematics_flags, scenario_cinematics_flags_strings, _countof(scenario_cinematics_flags_strings));

	TAG_REFERENCE(cinematic_group_reference, CINEMATIC_TAG);

	#define SCENARIO_CLUSTER_ACOUSTICS_BLOCK_STRUCT_ID { 0xBF96DEDB, 0xC56E4461, 0x8A27F764, 0x81157DE4 }
	TAG_STRUCT(
		scenario_cluster_acoustics_block_struct,
		"scenario_cluster_acoustics_block_struct",
		"scenario_cluster_acoustics_block_struct",
		"s_scenario_cluster_acoustics_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CLUSTER_ACOUSTICS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "type", &scenario_acoustics_palette_block_definition_block },
		FIELD_PAD("XQQ", 2),
		{ _field_terminator }
	};

	#define SCENARIO_CLUSTER_ATMOSPHERE_PROPERTIES_BLOCK_ID { 0x5AA1878B, 0x7AFC441D, 0x92F1DBC3, 0xD6BB0B64 }
	TAG_STRUCT(
		scenario_cluster_atmosphere_properties_block,
		"scenario_cluster_atmosphere_properties_block",
		"scenario_cluster_atmosphere_properties_block",
		"s_scenario_cluster_atmosphere_properties_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CLUSTER_ATMOSPHERE_PROPERTIES_BLOCK_ID)
	{
		{ _field_short_block_index, "type", &scenario_atmosphere_palette_block_block },
		FIELD_PAD("XQQ", 2),
		{ _field_terminator }
	};

	#define SCENARIO_CLUSTER_CAMERA_FX_PROPERTIES_BLOCK_ID { 0x4C3DEFF, 0xE1014E4F, 0x95C9EC20, 0x1B0C0C04 }
	TAG_STRUCT(
		scenario_cluster_camera_fx_properties_block,
		"scenario_cluster_camera_fx_properties_block",
		"scenario_cluster_camera_fx_properties_block",
		"s_scenario_cluster_camera_fx_properties_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CLUSTER_CAMERA_FX_PROPERTIES_BLOCK_ID)
	{
		{ _field_short_block_index, "type", &scenario_camera_fx_palette_block_block },
		FIELD_PAD("XQQ", 2),
		{ _field_terminator }
	};

	#define SCENARIO_CLUSTER_DATA_BLOCK_ID { 0x2C52EDFB, 0xACFE4C9E, 0xAA66C6ED, 0xD4B370C9 }
	TAG_STRUCT(
		scenario_cluster_data_block,
		"scenario_cluster_data_block",
		"scenario_cluster_data_block",
		"s_scenario_cluster_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CLUSTER_DATA_BLOCK_ID)
	{
		{ _field_tag_reference, "bsp", &scenario_structure_bsp_group_reference },
		{ _field_long_integer, "bsp checksum" },
		{ _field_block, "cluster centroids", &scenario_cluster_points_block_block },
		{ _field_long_block_index, "default acoustic palette", &scenario_acoustics_palette_block_definition_block },
		{ _field_block, "acoustics", MAKE_ALT_NAMES("background sounds"), FIELD_FLAG_READ_ONLY, &scenario_cluster_acoustics_block_block },
		{ _field_block, "atmospheric properties", &scenario_cluster_atmosphere_properties_block_block },
		{ _field_block, "camera fx properties", &scenario_cluster_camera_fx_properties_block_block },
		{ _field_block, "weather properties", &scenario_cluster_weather_properties_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(scenario_structure_bsp_group_reference, SCENARIO_STRUCTURE_BSP_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR | TAG_REFERENCE_FLAG_RESOLVED_MANUALLY);

	#define SCENARIO_CLUSTER_POINTS_BLOCK_ID { 0xEB2CB6F0, 0x63FF4765, 0x8D37ED82, 0x6D07B4D1 }
	TAG_STRUCT(
		scenario_cluster_points_block,
		"scenario_cluster_points_block",
		"scenario_cluster_points_block",
		"s_scenario_cluster_points_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CLUSTER_POINTS_BLOCK_ID)
	{
		{ _field_real_point_3d, "centroid" },
		{ _field_terminator }
	};

	#define SCENARIO_CLUSTER_WEATHER_PROPERTIES_BLOCK_ID { 0x5501F721, 0x233D41FC, 0x8CBF9D50, 0x77B6F973 }
	TAG_STRUCT(
		scenario_cluster_weather_properties_block,
		"scenario_cluster_weather_properties_block",
		"scenario_cluster_weather_properties_block",
		"s_scenario_cluster_weather_properties_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CLUSTER_WEATHER_PROPERTIES_BLOCK_ID)
	{
		{ _field_short_block_index, "type", &scenario_weather_palette_block_block },
		FIELD_PAD("XQQ", 2),
		{ _field_terminator }
	};

	#define SCENARIO_CONTROL_BLOCK_ID { 0x92F483D9, 0x5B3C4AB8, 0xA3EBB7C5, 0x346983EF }
	VERSIONED_TAG_STRUCT(
		scenario_control_block,
		"scenario_control_block",
		"scenario_control_block",
		"s_scenario_control_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CONTROL_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 9 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_control_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "device data", &scenario_device_struct },
		{ _field_struct, "control data", &scenario_control_struct },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		
		{ _struct_version_mode_equal, 1, 9 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_control_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "device data", &scenario_device_struct },
		{ _field_struct, "control data", &scenario_control_struct },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		
		{ _struct_version_mode_equal, 0, 14 },
		{ _field_short_block_index, "type", &scenario_control_palette_block_block, _field_id_type },
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_word_flags, "not placed", &object_location_placement_flags },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _tag_field_attributed_definition_position },
		{ _field_real_euler_angles_3d, "rotation", _tag_field_attributed_definition_orientation },
		FIELD_PAD("BX", 4),
		{ _field_long_block_index, "environment object reference", &dont_use_me_scenario_environment_object_block_block },
		{ _field_struct, "device data", &old_scenario_device_struct },
		{ _field_long_flags, "flags", &scenario_control_flags },
		{ _field_short_integer, "*DON'T TOUCH THIS" },
		FIELD_CUSTOM("value", _field_id_unknown_ugh),
		FIELD_PAD("QYCF", 2),
		FIELD_PAD("KHSKDV", 8),
		
		{ _field_terminator }
	};

	STRINGS(scenario_control_flags)
	{
		"usable from both sides"
	};
	STRING_LIST(scenario_control_flags, scenario_control_flags_strings, _countof(scenario_control_flags_strings));

	#define SCENARIO_CONTROL_PALETTE_BLOCK_ID { 0xFFF11901, 0x16EA4B50, 0x9C997778, 0xE1D7C1A7 }
	TAG_STRUCT(
		scenario_control_palette_block,
		"scenario_control_palette_block",
		"scenario_control_palette_block",
		"s_scenario_control_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CONTROL_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &device_control_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(device_control_group_reference, DEVICE_CONTROL_TAG);

	#define SCENARIO_CONTROL_STRUCT_ID { 0x4C0DFF56, 0xAB5E4908, 0xBC8FEA48, 0x712465AA }
	TAG_STRUCT(
		scenario_control_struct,
		"scenario_control_struct",
		"scenario_control_struct",
		"s_scenario_control_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CONTROL_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &scenario_control_flags },
		{ _field_short_integer, "DON'T TOUCH THIS", _field_id_unknown_ugh },
		{ _field_short_integer, "health station charges", "if this control is a health station, this sets the number of charges it contains.\nUse 0 for infinite" },
		{ _field_short_enum, "allowed players", &scenario_control_character_types },
		FIELD_PAD("SCSP1", 2),
		{ _field_terminator }
	};

	STRINGS(scenario_control_character_types)
	{
		"any",
		"spartan",
		"elite"
	};
	STRING_LIST(scenario_control_character_types, scenario_control_character_types_strings, _countof(scenario_control_character_types_strings));

	#define SCENARIO_CRATE_BLOCK_ID { 0x64C39900, 0x24D642E9, 0xAB5396A7, 0x50C5FCDE }
	TAG_STRUCT(
		scenario_crate_block,
		"scenario_crate_block",
		"scenario_crate_block",
		"s_scenario_crate_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CRATE_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_crate_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "crate data", &scenario_crate_datum_struct },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		{ _field_terminator }
	};

	#define SCENARIO_CRATE_DATUM_STRUCT_ID { 0x5B721C93, 0xD3E64C22, 0xAA9B2A15, 0x1614421C }
	TAG_STRUCT(
		scenario_crate_datum_struct,
		"scenario_crate_datum_struct",
		"scenario_crate_datum_struct",
		"s_scenario_crate_datum_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CRATE_DATUM_STRUCT_ID)
	{
		{ _field_short_enum, "Pathfinding policy", &pathfinding_policy_enum },
		FIELD_PAD("post-path-policy", 2),
		{ _field_block, "pathfinding references", &pathfinding_object_index_list_block_block },
		{ _field_terminator }
	};

	STRINGS(pathfinding_policy_enum)
	{
		"Tag Default",
		"Pathfinding DYNAMIC",
		"Pathfinding CUT-OUT",
		"Pathfinding STATIC",
		"Pathfinding NONE"
	};
	STRING_LIST(pathfinding_policy_enum, pathfinding_policy_enum_strings, _countof(pathfinding_policy_enum_strings));

	#define SCENARIO_CRATE_PALETTE_BLOCK_ID { 0x551E40AB, 0xE4A4D8D, 0x90123759, 0xFD13FAFA }
	TAG_STRUCT(
		scenario_crate_palette_block,
		"scenario_crate_palette_block",
		"scenario_crate_palette_block",
		"s_scenario_crate_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CRATE_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &crate_group_reference$7 },
		{ _field_terminator }
	};

	TAG_REFERENCE(crate_group_reference$7, CRATE_TAG);

	#define SCENARIO_CREATURE_BLOCK_ID { 0x9DFDC77, 0xD7B340DD, 0x98945C37, 0x64786346 }
	TAG_STRUCT(
		scenario_creature_block,
		"scenario_creature_block",
		"scenario_creature_block",
		"s_scenario_creature_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CREATURE_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_creature_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_terminator }
	};

	#define SCENARIO_CREATURE_PALETTE_BLOCK_ID { 0x65384A0C, 0x581941A9, 0xB2668441, 0x2732CE0E }
	TAG_STRUCT(
		scenario_creature_palette_block,
		"scenario_creature_palette_block",
		"scenario_creature_palette_block",
		"s_scenario_creature_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CREATURE_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &creature_group_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(creature_group_reference$2, CREATURE_TAG);

	#define SCENARIO_CUBEMAP_BLOCK_ID { 0x5268782, 0x3F8F473B, 0x87B21BB6, 0x67E5D5EF }
	TAG_STRUCT(
		scenario_cubemap_block,
		"scenario_cubemap_block",
		"scenario_cubemap_block",
		"s_scenario_cubemap_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CUBEMAP_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_string_id, "name" },
		{ _field_real_point_3d, "cubemap position" },
		{ _field_short_enum, "cubemap resolution", &cubemap_resolution_enum },
		FIELD_PAD("post-cubemap-resolution-pad", 2),
		FIELD_EXPLANATION("bsps it could belong to", "empty masks mean automatic selection."),
		{ _field_struct, "manual bsp flags", &manualbspflagsreferences },
		{ _field_block, "reference points", &cubemap_reference_points_block_block },
		{ _field_terminator }
	};

	STRINGS(cubemap_resolution_enum)
	{
		"16",
		"32",
		"64",
		"128",
		"256"
	};
	STRING_LIST(cubemap_resolution_enum, cubemap_resolution_enum_strings, _countof(cubemap_resolution_enum_strings));

	#define SCENARIO_CUTSCENE_CAMERA_POINT_BLOCK_ID { 0xC38639D4, 0x24BA4407, 0xB58BCDD4, 0xF728D8DC }
	TAG_STRUCT(
		scenario_cutscene_camera_point_block,
		"scenario_cutscene_camera_point_block",
		"scenario_cutscene_camera_point_block",
		"s_scenario_cutscene_camera_point_block",
		SET_UNKNOWN4 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CUTSCENE_CAMERA_POINT_BLOCK_ID)
	{
		{ _field_word_flags, "flags", &scenario_cutscene_camera_flags },
		{ _field_short_enum, "type", &scenario_cutscene_camera_types },
		{ _field_string, "name" },
		FIELD_CUSTOM("value", _tag_field_custom_type_unknown_camera_matrix_editor),
		FIELD_PAD("pad", 4),
		{ _field_real_point_3d, "position" },
		{ _field_real_euler_angles_3d, "orientation" },
		{ _field_short_block_index, "zone set", &scenario_zone_set_block_block },
		FIELD_PAD("padd", 2),
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 36),
		{ _field_terminator }
	};

	STRINGS(scenario_cutscene_camera_flags)
	{
		"edit as relative"
	};
	STRING_LIST(scenario_cutscene_camera_flags, scenario_cutscene_camera_flags_strings, _countof(scenario_cutscene_camera_flags_strings));

	STRINGS(scenario_cutscene_camera_types)
	{
		"normal",
		"ignore target orientation",
		"dolly",
		"ignore target updates"
	};
	STRING_LIST(scenario_cutscene_camera_types, scenario_cutscene_camera_types_strings, _countof(scenario_cutscene_camera_types_strings));

	#define SCENARIO_CUTSCENE_FLAG_BLOCK_ID { 0xE5E8BB54, 0x69394856, 0xBCAC9DB6, 0x2C324EB0 }
	TAG_STRUCT(
		scenario_cutscene_flag_block,
		"scenario_cutscene_flag_block",
		"scenario_cutscene_flag_block",
		"s_scenario_cutscene_flag_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CUTSCENE_FLAG_BLOCK_ID)
	{
		FIELD_PAD("MMNGQBXC", 4),
		{ _field_string_id, "name" },
		{ _field_real_point_3d, "position" },
		{ _field_real_euler_angles_3d, "facing" },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		{ _field_short_block_index, "source bsp", &scenario_structure_bsp_reference_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_CUTSCENE_TITLE_STRUCT_ID { 0x110603E7, 0x74B8410A, 0x8C263BBC, 0xDC0D2541 }
	TAG_STRUCT(
		scenario_cutscene_title_struct,
		"scenario_cutscene_title_struct",
		"scenario_cutscene_title_struct",
		"s_scenario_cutscene_title_struct",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_CUTSCENE_TITLE_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_real_fraction_bounds, "text bounds X" },
		{ _field_real_fraction_bounds, "text bounds Y" },
		{ _field_short_enum, "justification", &text_justification_enum_definition },
		{ _field_short_enum, "vertical justification", &text_vertical_justification_enum_definition },
		{ _field_short_enum, "font", &global_font_id_enum_definition },
		FIELD_PAD("padding", 2),
		{ _field_rgb_color, "text color" },
		{ _field_rgb_color, "shadow color" },
		{ _field_real, "fade in time [seconds]" },
		{ _field_real, "up time [seconds]" },
		{ _field_real, "fade out time [seconds]" },
		{ _field_real, "letter print time", nullptr, "seconds" },
		{ _field_terminator }
	};

	STRINGS(text_justification_enum_definition)
	{
		"left",
		"right",
		"center"
	};
	STRING_LIST(text_justification_enum_definition, text_justification_enum_definition_strings, _countof(text_justification_enum_definition_strings));

	STRINGS(text_vertical_justification_enum_definition)
	{
		"default",
		"top",
		"center",
		"bottom"
	};
	STRING_LIST(text_vertical_justification_enum_definition, text_vertical_justification_enum_definition_strings, _countof(text_vertical_justification_enum_definition_strings));

	#define SCENARIO_DECAL_PALETTE_BLOCK_ID { 0xC7E94CE6, 0x20F34065, 0xA165ACE3, 0x5C495C0A }
	TAG_STRUCT(
		scenario_decal_palette_block,
		"scenario_decal_palette_block",
		"scenario_decal_palette_block",
		"s_scenario_decal_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_DECAL_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "reference", &decal_system_group_reference },
		{ _field_long_integer, "max static bucket size" },
		{ _field_terminator }
	};

	TAG_REFERENCE(decal_system_group_reference, DECAL_SYSTEM_TAG);

	#define SCENARIO_DECALS_BLOCK_ID { 0x2F188AAB, 0x722045CB, 0xBB8315AD, 0xA352D120 }
	TAG_STRUCT(
		scenario_decals_block,
		"scenario_decals_block",
		"scenario_decals_block",
		"s_scenario_decals_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_DECALS_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "decal palette index", &scenario_decal_palette_block_block },
		{ _field_byte_flags, "flags", &decal_placement_flags },
		FIELD_PAD("post-decal-palette-index-pad", 1),
		{ _field_struct, "manual bsp flags", &manualbspflagsreferences },
		{ _field_real_quaternion, "rotation" },
		{ _field_real_point_3d, "position" },
		{ _field_real, "scale x", MAKE_ALT_NAMES("scale") },
		{ _field_real, "scale y" },
		{ _field_real, "cull angle" },
		{ _field_terminator }
	};

	STRINGS(decal_placement_flags)
	{
		"force planar#force decal to be 2 triangle quad.  does not clip to geometry"
	};
	STRING_LIST(decal_placement_flags, decal_placement_flags_strings, _countof(decal_placement_flags_strings));

	#define SCENARIO_DECORATOR_BLOCK_ID { 0xDCA3DA7E, 0xDA4B412B, 0xBED1DC74, 0xF6507BAC }
	TAG_STRUCT(
		scenario_decorator_block,
		"scenario_decorator_block",
		"scenario_decorator_block",
		"s_scenario_decorator_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_DECORATOR_BLOCK_ID)
	{
		{ _field_struct, "brush", &decorator_brush_struct },
		{ _field_long_integer, "decorator count" },
		{ _field_long_integer, "current bsp count" },
		{ _field_real_vector_3d, "global offset" },
		{ _field_real_vector_3d, "global x" },
		{ _field_real_vector_3d, "global y" },
		{ _field_real_vector_3d, "global z" },
		{ _field_block, "palette", &decorator_palette_block },
		{ _field_block, "sets", &decorator_scenario_set_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_DESCRIPTION_BLOCK_ID { 0x7D8A2617, 0x205147A6, 0x9D349A6A, 0xD9966E2B }
	TAG_STRUCT(
		scenario_description_block,
		"scenario_description_block",
		"scenario_description_block",
		"s_scenario_description_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_DESCRIPTION_BLOCK_ID)
	{
		FIELD_EXPLANATION("net map info", "these provide the info required by the UI to load a net map"),
		{ _field_tag_reference, "descriptive bitmap", &bitmap_group_reference$2 },
		{ _field_tag_reference, "displayed map name", &multilingual_unicode_string_list_group_reference },
		{ _field_string, "scenario tag directory path", "this is the path to the directory containing the scenario tag file of the same name" },
		FIELD_PAD("RMNNQW", 4),
		{ _field_terminator }
	};

	#define SCENARIO_DESIGN_REFERENCE_BLOCK_ID { 0xA6B28C8B, 0x3AB34E10, 0x89AB459E, 0x1AA22862 }
	TAG_STRUCT(
		scenario_design_reference_block,
		"scenario_design_reference_block",
		"scenario_design_reference_block",
		"s_scenario_design_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_DESIGN_REFERENCE_BLOCK_ID)
	{
		{ _field_tag_reference, "structure design", &structure_design_group_reference },
		{ _field_tag_reference, "local structure design", &structure_design_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(structure_design_group_reference, STRUCTURE_DESIGN_TAG);

	#define SCENARIO_DESIGNER_ZONE_BLOCK_ID { 0xB02184D9, 0xCED54A10, 0xA3980886, 0x739063EC }
	TAG_STRUCT(
		scenario_designer_zone_block,
		"scenario_designer_zone_block",
		"scenario_designer_zone_block",
		"s_scenario_designer_zone_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_DESIGNER_ZONE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "references", &scenariodesignerzonetagreferenceblock_block },
		FIELD_CUSTOM("biped", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "biped", &biped_block_index_flags_block_block },
		FIELD_CUSTOM("vehicle", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "vehicle", &vehicle_block_index_flags_block_block },
		FIELD_CUSTOM("weapon", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "weapon", &weapon_block_index_flags_block_block },
		FIELD_CUSTOM("equipment", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "equipment", &equipment_block_index_flags_block_block },
		FIELD_CUSTOM("scenery", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "scenery", &scenery_block_index_flags_block_block },
		FIELD_CUSTOM("machine", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "machine", &machine_block_index_flags_block_block },
		FIELD_CUSTOM("terminal", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "terminal", &terminal_block_index_flags_block_block },
		FIELD_CUSTOM("control", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "control", &control_block_index_flags_block_block },
		FIELD_CUSTOM("dispenser", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "dispenser", &dispenser_block_index_flags_block_block },
		FIELD_CUSTOM("sound_scenery", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "sound_scenery", &sound_scenery_block_index_flags_block_block },
		FIELD_CUSTOM("crate", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "crate", &crate_block_index_flags_block_block },
		FIELD_CUSTOM("creature", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "creature", &creature_block_index_flags_block_block },
		FIELD_CUSTOM("giant", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "giant", &giant_block_index_flags_block_block },
		FIELD_CUSTOM("effect_scenery", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "effect_scenery", &effect_scenery_block_index_flags_block_block },
		FIELD_CUSTOM("character", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "character", &character_block_index_flags_block_block },
		FIELD_CUSTOM("spawner", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "spawner", &spawner_block_index_flags_block_block },
		FIELD_CUSTOM("budget_reference", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "budget_reference", &budget_reference_block_index_flags_block_block },
		FIELD_CUSTOM("bink", _tag_field_custom_type_designer_zone_block_index_flags),
		{ _field_block, "bink", &bink_block_index_flags_block_block },
		{ _field_block, "resource dependencies", &scenariodesignerresourcedependenciesblock_block },
		{ _field_terminator }
	};

	#define SCENARIO_DETAIL_OBJECT_COLLECTION_PALETTE_BLOCK_ID { 0xC7D6DFC3, 0xD05849AE, 0xA3485B28, 0x5E5D947F }
	TAG_STRUCT(
		scenario_detail_object_collection_palette_block,
		"scenario_detail_object_collection_palette_block",
		"scenario_detail_object_collection_palette_block",
		"s_scenario_detail_object_collection_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_DETAIL_OBJECT_COLLECTION_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &detail_object_collection_group_reference },
		FIELD_PAD("XBMYUIKEJ", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(detail_object_collection_group_reference, DETAIL_OBJECT_COLLECTION_TAG);

	#define SCENARIO_DEVICE_STRUCT_ID { 0xF3F2B599, 0x93524F63, 0xBF5BD676, 0x6FD79D9E }
	TAG_STRUCT(
		scenario_device_struct,
		"scenario_device_struct",
		"scenario_device_struct",
		"s_scenario_device_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_DEVICE_STRUCT_ID)
	{
		{ _field_short_block_index, "power group", &device_group_block_block },
		{ _field_short_block_index, "position group", &device_group_block_block },
		{ _field_long_flags, "flags", &scenario_device_flags },
		{ _field_terminator }
	};

	#define SCENARIO_DUMPLING_STRUCT_ID { 0x2FF9A01B, 0xB3764EDA, 0xB70B64FE, 0x1E7F95AD }
	TAG_STRUCT(
		scenario_dumpling_struct,
		"scenario_dumpling_struct",
		"scenario_dumpling_struct",
		"s_scenario_dumpling_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_DUMPLING_STRUCT_ID)
	{
		{ _field_block, "inner points", &dumpling_point_block_block },
		{ _field_block, "outer points", &dumpling_point_block_block },
		{ _field_real, "height" },
		{ _field_real, "sink" },
		{ _field_real, "inner value" },
		{ _field_real, "outer value" },
		{ _field_real_point_3d, "center point" },
		{ _field_real, "trivial cull radius squared" },
		{ _field_terminator }
	};

	#define SCENARIO_EFFECT_SCENERY_BLOCK_ID { 0xAD706F17, 0x252A467B, 0x9484D9A5, 0x64355699 }
	TAG_STRUCT(
		scenario_effect_scenery_block,
		"scenario_effect_scenery_block",
		"scenario_effect_scenery_block",
		"s_scenario_effect_scenery_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_EFFECT_SCENERY_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_effect_scenery_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "effect scenery data", &scenario_effect_scenery_datum_struct },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		{ _field_terminator }
	};

	#define SCENARIO_EFFECT_SCENERY_DATUM_STRUCT_ID { 0xAECBC47E, 0xC5FD4495, 0x9C908F2E, 0x2C4FAD95 }
	TAG_STRUCT(
		scenario_effect_scenery_datum_struct,
		"scenario_effect_scenery_datum_struct",
		"scenario_effect_scenery_datum_struct",
		"s_scenario_effect_scenery_datum_struct",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_EFFECT_SCENERY_DATUM_STRUCT_ID)
	{
		{ _field_real, "effect size scale" },
		{ _field_terminator }
	};

	#define SCENARIO_EFFECT_SCENERY_PALETTE_BLOCK_ID { 0xD571AA7C, 0xB1C5453D, 0xA4C230A8, 0x510B0C22 }
	TAG_STRUCT(
		scenario_effect_scenery_palette_block,
		"scenario_effect_scenery_palette_block",
		"scenario_effect_scenery_palette_block",
		"s_scenario_effect_scenery_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_EFFECT_SCENERY_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &effect_scenery_group_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(effect_scenery_group_reference$2, EFFECT_SCENERY_TAG);

	#define SCENARIO_EQUIPMENT_BLOCK_ID { 0x1B8D7978, 0xA1543A4, 0xAA855C05, 0x9DF77483 }
	VERSIONED_TAG_STRUCT(
		scenario_equipment_block,
		"scenario_equipment_block",
		"scenario_equipment_block",
		"s_scenario_equipment_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_EQUIPMENT_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 7 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_equipment_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "equipment data", &scenario_equipment_datum_struct },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		
		{ _struct_version_mode_equal, 1, 7 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_equipment_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "equipment data", &scenario_equipment_datum_struct },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		
		{ _struct_version_mode_equal, 0, 8 },
		{ _field_short_block_index, "type", &scenario_equipment_palette_block_block, _field_id_type },
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_word_flags, "not placed", &object_location_placement_flags },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _tag_field_attributed_definition_position },
		{ _field_real_euler_angles_3d, "rotation", _tag_field_attributed_definition_orientation },
		FIELD_PAD("BX", 4),
		{ _field_long_block_index, "environment object reference", &dont_use_me_scenario_environment_object_block_block },
		
		{ _field_terminator }
	};

	#define SCENARIO_EQUIPMENT_DATUM_STRUCT_ID { 0x48D20C56, 0x8B844C52, 0xA0DA0D7B, 0xB10F54A }
	TAG_STRUCT(
		scenario_equipment_datum_struct,
		"scenario_equipment_datum_struct",
		"scenario_equipment_datum_struct",
		"s_scenario_equipment_datum_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_EQUIPMENT_DATUM_STRUCT_ID)
	{
		{ _field_long_flags, "equipment flags", &scenario_equipment_flags_definition },
		{ _field_terminator }
	};

	STRINGS(scenario_equipment_flags_definition)
	{
		"OBSOLETE0",
		"OBSOLETE1",
		"does accelerate (moves due to explosions)"
	};
	STRING_LIST(scenario_equipment_flags_definition, scenario_equipment_flags_definition_strings, _countof(scenario_equipment_flags_definition_strings));

	#define SCENARIO_EQUIPMENT_PALETTE_BLOCK_ID { 0xA91733C4, 0x27394ADD, 0xBDF68C43, 0x9CDCAD72 }
	TAG_STRUCT(
		scenario_equipment_palette_block,
		"scenario_equipment_palette_block",
		"scenario_equipment_palette_block",
		"s_scenario_equipment_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_EQUIPMENT_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &equipment_group_reference$5 },
		{ _field_terminator }
	};

	TAG_REFERENCE(equipment_group_reference$5, EQUIPMENT_TAG);

	#define SCENARIO_FUNCTION_BLOCK_ID { 0x9B8F92BF, 0xE23F4122, 0xA8821B49, 0xAD8F29FB }
	TAG_STRUCT(
		scenario_function_block,
		"scenario_function_block",
		"scenario_function_block",
		"s_scenario_function_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_FUNCTION_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &scenario_function_flags },
		{ _field_string, "name" },
		{ _field_real, "period", "this is the period for the above function (lower values make the function oscillate quickly, higher values make it oscillate slowly)", "seconds" },
		{ _field_short_block_index, "scale period by", "multiply this function by the above period", &scenario_function_block_block },
		{ _field_short_enum, "function", &global_periodic_functions_enum },
		{ _field_short_block_index, "scale function by", "multiply this function by the result of the above function", &scenario_function_block_block },
		{ _field_short_enum, "wobble function", "the curve used for the wobble", &global_periodic_functions_enum },
		{ _field_real, "wobble period", "the length of time it takes for the magnitude of this function to complete a wobble", "seconds" },
		{ _field_real, "wobble magnitude", "the amount of random wobble in the magnitude", "percent" },
		{ _field_real_fraction, "square wave threshold", "if non-zero, all values above the square wave threshold are snapped to 1.0, and all values below it are snapped to 0.0 to create a square wave." },
		{ _field_short_integer, "step count", "the number of discrete values to snap to (e.g., a step count of 5 would snap the function to 0.00,0.25,0.50,0.75 or 1.00)" },
		{ _field_short_enum, "map to", &global_transition_functions_enum },
		{ _field_short_integer, "sawtooth count", "the number of times this function should repeat (e.g., a sawtooth count of 5 would give the function a value of 1.0 at each of 0.25,0.50,0.75 as well as at 1.0" },
		FIELD_PAD("WBP", 2),
		{ _field_short_block_index, "scale result by", "multiply this function (from a weapon, vehicle, etc.) final result of all of the above math", &scenario_function_block_block },
		{ _field_short_enum, "bounds mode", "controls how the bounds, below, are used", &function_bounds_mode_enum },
		{ _field_real_fraction_bounds, "bounds" },
		{ _field_real, "runtime inverse bounds range" },
		FIELD_PAD("OFLIM", 2),
		{ _field_short_block_index, "turn off with", "if the specified function is off, so is this function", &scenario_function_block_block },
		FIELD_PAD("FX", 16),
		{ _field_real, "runtime reciprocal sawtooth count" },
		{ _field_real, "runtime reciprocal bounds range" },
		{ _field_real, "runtime reciprocal step count" },
		{ _field_real, "runtime one over period" },
		{ _field_terminator }
	};

	STRINGS(scenario_function_flags)
	{
		"scripted#the level script will set this value; the other settings here will be ignored.",
		"invert#result of function is one minus actual result",
		"additive",
		"always active#function does not deactivate when at or below lower bound"
	};
	STRING_LIST(scenario_function_flags, scenario_function_flags_strings, _countof(scenario_function_flags_strings));

	STRINGS(function_bounds_mode_enum)
	{
		"clip",
		"clip and normalize",
		"scale to fit"
	};
	STRING_LIST(function_bounds_mode_enum, function_bounds_mode_enum_strings, _countof(function_bounds_mode_enum_strings));

	#define SCENARIO_GIANT_BLOCK_ID { 0xD4AC3CB5, 0x4E5541D4, 0xA63121B6, 0x364F882E }
	TAG_STRUCT(
		scenario_giant_block,
		"scenario_giant_block",
		"scenario_giant_block",
		"s_scenario_giant_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_GIANT_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_giant_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "unit data", &scenario_unit_struct },
		{ _field_struct, "giant data", &scenario_giant_datum_struct },
		{ _field_terminator }
	};

	#define SCENARIO_GIANT_DATUM_STRUCT_ID { 0x89405329, 0x890C4F04, 0xB9B87A12, 0x6E648B53 }
	TAG_STRUCT(
		scenario_giant_datum_struct,
		"scenario_giant_datum_struct",
		"scenario_giant_datum_struct",
		"s_scenario_giant_datum_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_GIANT_DATUM_STRUCT_ID)
	{
		{ _field_short_enum, "Pathfinding policy", &pathfinding_policy_enum },
		FIELD_PAD("post-pathfinding", 2),
		{ _field_block, "pathfinding references", &pathfinding_object_index_list_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_GIANT_PALETTE_BLOCK_ID { 0xFCCBF08D, 0xF4FD4CD9, 0xFD7E48BE, 0xFF3F3102 }
	TAG_STRUCT(
		scenario_giant_palette_block,
		"scenario_giant_palette_block",
		"scenario_giant_palette_block",
		"s_scenario_giant_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_GIANT_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &giant_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(giant_group_reference, GIANT_TAG);

	#define SCENARIO_INTERPOLATOR_DATA_BLOCK_ID { 0x2FA4AF3D, 0x658E4C1D, 0x8B561159, 0xEE9A1051 }
	TAG_STRUCT(
		scenario_interpolator_data_block,
		"scenario_interpolator_data_block",
		"scenario_interpolator_data_block",
		"s_scenario_interpolator_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_INTERPOLATOR_DATA_BLOCK_ID)
	{
		{ _field_word_flags, "flags", &scenario_interpolator_flags },
		FIELD_PAD("SCBP1", 2),
		{ _field_string_id, "name" },
		{ _field_struct, "function", &scalar_function_named_struct },
		{ _field_real, "duration", nullptr, "seconds" },
		{ _field_long_enum, "map reset type", &scenario_interpolator_reset_value_enum },
		{ _field_real_fraction, "custom map reset value" },
		{ _field_long_enum, "start type", &scenario_interpolator_start_value_enum },
		{ _field_long_enum, "stop type", &scenario_interpolator_stop_value_enum },
		{ _field_real_fraction, "custom stop value" },
		{ _field_terminator }
	};

	STRINGS(scenario_interpolator_flags)
	{
		"loops#will continue to play until stopped.  if checked, no wrap should also be checked",
		"always active#will be started when the map loads.  good for looping interpolators"
	};
	STRING_LIST(scenario_interpolator_flags, scenario_interpolator_flags_strings, _countof(scenario_interpolator_flags_strings));

	STRINGS(scenario_interpolator_reset_value_enum)
	{
		"initial",
		"ending",
		"custom"
	};
	STRING_LIST(scenario_interpolator_reset_value_enum, scenario_interpolator_reset_value_enum_strings, _countof(scenario_interpolator_reset_value_enum_strings));

	STRINGS(scenario_interpolator_start_value_enum)
	{
		"initial",
		"unchanged"
	};
	STRING_LIST(scenario_interpolator_start_value_enum, scenario_interpolator_start_value_enum_strings, _countof(scenario_interpolator_start_value_enum_strings));

	STRINGS(scenario_interpolator_stop_value_enum)
	{
		"initial",
		"hold",
		"ending",
		"custom"
	};
	STRING_LIST(scenario_interpolator_stop_value_enum, scenario_interpolator_stop_value_enum_strings, _countof(scenario_interpolator_stop_value_enum_strings));

	#define SCENARIO_INTERPOLATOR_STRUCT_DEFINITION_ID { 0x8A877FF6, 0xEA794454, 0x853A9148, 0x53A71CCF }
	TAG_STRUCT(
		scenario_interpolator_struct_definition,
		"scenario_interpolator_struct_definition",
		"scenario_interpolator_struct_definition",
		"s_scenario_interpolator_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_INTERPOLATOR_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "interpolators", &scenario_interpolator_data_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_KILL_TRIGGER_VOLUMES_BLOCK_ID { 0xF8016A0D, 0xFB54EB9, 0xAE9F2DBA, 0x9A8BF849 }
	TAG_STRUCT(
		scenario_kill_trigger_volumes_block,
		"scenario_kill_trigger_volumes_block",
		"scenario_kill_trigger_volumes_block",
		"s_scenario_kill_trigger_volumes_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_KILL_TRIGGER_VOLUMES_BLOCK_ID)
	{
		{ _field_short_block_index, "trigger volume", &scenario_trigger_volume_block_block },
		{ _field_byte_flags, "flags", &kill_volume_flags },
		FIELD_PAD("pad", 1),
		{ _field_terminator }
	};

	STRINGS(kill_volume_flags)
	{
		"don\'t kill immediately",
		"only kill players"
	};
	STRING_LIST(kill_volume_flags, kill_volume_flags_strings, _countof(kill_volume_flags_strings));

	#define SCENARIO_LIGHTING_ZONE_SET_BLOCK_ID { 0x79C011B7, 0xF6B34F11, 0xB4F34E8E, 0x389F9F4F }
	TAG_STRUCT(
		scenario_lighting_zone_set_block,
		"scenario_lighting_zone_set_block",
		"scenario_lighting_zone_set_block",
		"s_scenario_lighting_zone_set_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTING_ZONE_SET_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_block_flags, "rendered bsp flags", &scenario_structure_bsp_reference_block_block },
		{ _field_long_block_flags, "extra bsp flags", &scenario_structure_bsp_reference_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_ADJACENT_BOUNCE_INDEX_BLOCK_ID { 0xBA643456, 0x8F0CAAE0, 0xA2091880, 0x220A9066 }
	TAG_STRUCT(
		scenario_lightmap_adjacent_bounce_index_block,
		"scenario_lightmap_adjacent_bounce_index_block",
		"scenario_lightmap_adjacent_bounce_index_block",
		"s_scenario_lightmap_adjacent_bounce_index_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_ADJACENT_BOUNCE_INDEX_BLOCK_ID)
	{
		{ _field_long_integer, "index" },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_ADJACENT_BOUNCE_VERTEX_BLOCK_ID { 0xBA6402C0, 0xA8F0CAE0, 0xAA891800, 0x20902066 }
	TAG_STRUCT(
		scenario_lightmap_adjacent_bounce_vertex_block,
		"scenario_lightmap_adjacent_bounce_vertex_block",
		"scenario_lightmap_adjacent_bounce_vertex_block",
		"s_scenario_lightmap_adjacent_bounce_vertex_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_ADJACENT_BOUNCE_VERTEX_BLOCK_ID)
	{
		{ _field_real_vector_3d, "position" },
		{ _field_short_integer, "color_r" },
		{ _field_short_integer, "color_g" },
		{ _field_short_integer, "color_b" },
		{ _field_short_integer, "color_a" },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_AIRPROBE_VALUE_ID { 0x51851D4A, 0x54A64B69, 0xA6B0BA23, 0xAE40825D }
	TAG_STRUCT(
		scenario_lightmap_airprobe_value,
		"scenario_lightmap_airprobe_value",
		"scenario_lightmap_airprobe_value",
		"s_scenario_lightmap_airprobe_value",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_AIRPROBE_VALUE_ID)
	{
		{ _field_real_point_3d, "airprobe position" },
		{ _field_string_id, "airprobe name" },
		{ _field_long_integer, "BSP index" },
		{ _field_dword_integer, "analytical light index" },
		{ _field_struct, "sh terms", &half_rgb_lightprobe_struct },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_BLOCK_STRUCT_ID { 0xD871C433, 0xD2864E9F, 0xB2E8B245, 0x76BE82ED }
	TAG_STRUCT(
		scenario_lightmap_block_struct,
		"scenario_lightmap_block_struct",
		"scenario_lightmap_block_struct",
		"s_scenario_lightmap_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_BLOCK_STRUCT_ID)
	{
		{ _field_long_integer, "job guid" },
		{ _field_block, "lightmap BSP references", &scenario_lightmap_bsp_data_reference_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_BSP_DATA_BLOCK_STRUCT_ID { 0x750464BE, 0xDF6E4973, 0x8B70B0DD, 0xDB7F6F3D }
	TAG_STRUCT(
		scenario_lightmap_bsp_data_block_struct,
		"scenario_lightmap_bsp_data_block_struct",
		"scenario_lightmap_bsp_data_block_struct",
		"s_scenario_lightmap_bsp_data_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_BSP_DATA_BLOCK_STRUCT_ID)
	{
		{ _field_word_flags, "flags", &scenario_lightmap_bsp_flags },
		{ _field_short_integer, "bsp reference index" },
		{ _field_long_integer, "Checksum from Structure BSP" },
		{ _field_long_integer, "general structure lighting import checksum" },
		{ _field_long_integer, "skydome structure lighting import checksum" },
		{ _field_long_integer, "combined extra structure lighting import checksum" },
		{ _field_real, "perpixel compression scalar direct" },
		{ _field_real, "perpixel compression scalar indirect new" },
		{ _field_real, "pervertex compression scalar direct" },
		{ _field_real, "pervertex compression scalar indirect" },
		{ _field_real_vector_3d, "floating shadow light direction" },
		{ _field_real_vector_3d, "floating shadow light intensity" },
		{ _field_tag_reference, "hybrid probe data per-pixel color", &bitmap_group_reference$4 },
		{ _field_tag_reference, "hybrid probe data per-pixel direction", &bitmap_group_reference$4 },
		{ _field_tag_reference, "hybrid probe data per-pixel analytic", &bitmap_group_reference$4 },
		{ _field_tag_reference, "hybrid probe data per-pixel overlay micro", &bitmap_group_reference$4 },
		{ _field_tag_reference, "hybrid probe data per-pixel overlay macro", &bitmap_group_reference$4 },
		{ _field_tag_reference, "hybrid probe data per-pixel refinement dxt3a", &bitmap_group_reference$4 },
		{ _field_tag_reference, "hybrid vMF probe data per-vertex 565", &bitmap_group_reference$4 },
		{ _field_tag_reference, "hybrid vMF probe data per-vertex lite 565", &bitmap_group_reference$4 },
		{ _field_block, "clusters", &scenario_lightmap_cluster_data_block },
		{ _field_block, "instances", &scenario_lightmap_instance_data_block },
		{ _field_block, "probes", &scenario_lightmap_lightprobe_value_block },
		{ _field_block, "shadow geometry excluded instance indices", &scenario_lightmap_instance_index_block_block },
		{ _field_block, "per-pixel padding", &scenario_lightmap_global_perpixel_padding_data_block },
		{ _field_block, "per-pixel rasterized charts", &scenario_lightmap_rasterized_chart_data_block },
		{ _field_block, "New AO Data", &scenario_lightmap_new_ao_data_block_block },
		{ _field_block, "Adjacent Bounce Vertices", &scenario_lightmap_adjacent_bounce_vertex_block_block },
		{ _field_block, "Adjacent Bounce Indices", &scenario_lightmap_adjacent_bounce_index_block_block },
		{ _field_long_integer, "Parameterization Method Checksum" },
		{ _field_long_integer, "New AO checksum" },
		{ _field_long_integer, "Material Count" },
		{ _field_long_integer, "Mesh Count" },
		{ _field_short_integer, "lightmap parameterization width" },
		{ _field_short_integer, "lightmap parameterization height" },
		{ _field_struct, "imported geometry", &global_render_geometry_struct },
		{ _field_block, "per mesh triangle mapping", &triangle_mapping_per_mesh_block_block },
		{ _field_struct, "shadow geometry", &global_render_geometry_struct },
		{ _field_struct, "Dynamic Light Shadow Geometry", &global_render_geometry_struct },
		{ _field_block, "light instance data", &scenario_lightmap_dynamic_light_instance_block },
		{ _field_block, "structure light instance data", &scenario_lightmap_structure_light_instance_block },
		{ _field_block, "extruded silhouette vertices", &s_scenario_lightmap_silhouette_vertex_block },
		{ _field_block, "extruded silhouette edges", &s_scenario_lightmap_silhouette_edge_block },
		{ _field_block, "extruded silhouette groups", &s_scenario_lightmap_silhouette_group_block },
		{ _field_block, "airprobes", &scenario_lightmap_airprobe_value_block },
		{ _field_block, "errors", &global_error_report_categories_block_block },
		{ _field_block, "self_track", &global_self_track_block_block },
		{ _field_tag_reference, "forge per-pixel color", &bitmap_group_reference$4 },
		{ _field_tag_reference, "forge per-pixel sun", &bitmap_group_reference$4 },
		{ _field_real, "world scale ratio" },
		{ _field_terminator }
	};

	STRINGS(scenario_lightmap_bsp_flags)
	{
		"compressed",
		"xsynced geometry*!",
		"relightmapped",
		"generate fake small lightmaps",
		"generated from match data",
		"only a checker board",
		"surface to triangle mapping pruned{surface to tirnalge mapping pruned}",
		"faked lightmap tag for cache build",
		"Optimized for less dp all",
		"Floating shadows enabled",
		"Atlas unrefined packing",
		"Atlas repacked",
		"Using simplified irradiance lighting",
		"Disable Shadow Geometry",
		"Disable Hybrid Refinement"
	};
	STRING_LIST(scenario_lightmap_bsp_flags, scenario_lightmap_bsp_flags_strings, _countof(scenario_lightmap_bsp_flags_strings));

	TAG_REFERENCE(bitmap_group_reference$4, BITMAP_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR);

	#define SCENARIO_LIGHTMAP_BSP_DATA_REFERENCE_BLOCK_ID { 0xFFDC5A33, 0x248B4BA2, 0xBC16903E, 0xABBC58E9 }
	TAG_STRUCT(
		scenario_lightmap_bsp_data_reference_block,
		"scenario_lightmap_bsp_data_reference_block",
		"scenario_lightmap_bsp_data_reference_block",
		"s_scenario_lightmap_bsp_data_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_BSP_DATA_REFERENCE_BLOCK_ID)
	{
		{ _field_tag_reference, "lightmap bsp data reference", &scenario_lightmap_bsp_data_group_reference },
		{ _field_tag_reference, "wetness bsp reference", &scenario_wetness_bsp_data_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(scenario_wetness_bsp_data_group_reference, SCENARIO_WETNESS_BSP_DATA_TAG);

	#define SCENARIO_LIGHTMAP_CLUSTER_DATA_ID { 0x103A0755, 0xE4ED4051, 0x96CE9FBE, 0xA61E8F }
	TAG_STRUCT(
		scenario_lightmap_cluster_data,
		"scenario_lightmap_cluster_data",
		"scenario_lightmap_cluster_data",
		"s_scenario_lightmap_cluster_data",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_CLUSTER_DATA_ID)
	{
		{ _field_short_integer, "lightprobe texture array index" },
		{ _field_short_integer, "pervertex block index" },
		{ _field_long_integer, "pervertex block offset" },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_DYNAMIC_LIGHT_INSTANCE_ID { 0x87D6DA6F, 0xDA944097, 0x80689C17, 0xEB382949 }
	TAG_STRUCT(
		scenario_lightmap_dynamic_light_instance,
		"scenario_lightmap_dynamic_light_instance",
		"scenario_lightmap_dynamic_light_instance",
		"s_scenario_lightmap_dynamic_light_instance",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_DYNAMIC_LIGHT_INSTANCE_ID)
	{
		{ _field_real, "Min Depth" },
		{ _field_long_integer, "Light Instance Checksum" },
		{ _field_block, "instance indices", &scenario_lightmap_dynamic_light_instance_data_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_DYNAMIC_LIGHT_INSTANCE_DATA_BLOCK_ID { 0xDDB34898, 0x22CF0048, 0x90FF005E, 0x9B24CB29 }
	TAG_STRUCT(
		scenario_lightmap_dynamic_light_instance_data_block,
		"scenario_lightmap_dynamic_light_instance_data_block",
		"scenario_lightmap_dynamic_light_instance_data_block",
		"s_scenario_lightmap_dynamic_light_instance_data_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_DYNAMIC_LIGHT_INSTANCE_DATA_BLOCK_ID)
	{
		{ _field_long_integer, "Index" },
		{ _field_long_integer, "Shadow Geometry Mesh Index" },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_GLOBAL_PERPIXEL_PADDING_DATA_ID { 0x7C5AFB2C, 0xDFCC46D2, 0x8154B1BB, 0xB65DA7A1 }
	TAG_STRUCT(
		scenario_lightmap_global_perpixel_padding_data,
		"scenario_lightmap_global_perpixel_padding_data",
		"scenario_lightmap_global_perpixel_padding_data",
		"s_scenario_lightmap_global_perpixel_padding_data",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_GLOBAL_PERPIXEL_PADDING_DATA_ID)
	{
		{ _field_long_integer, "x" },
		{ _field_long_integer, "y" },
		{ _field_long_integer, "source_x" },
		{ _field_long_integer, "source_y" },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_INSTANCE_DATA_ID { 0x2B9848C, 0x68E0495A, 0x8BAAD777, 0x64AF9F2F }
	TAG_STRUCT(
		scenario_lightmap_instance_data,
		"scenario_lightmap_instance_data",
		"scenario_lightmap_instance_data",
		"s_scenario_lightmap_instance_data",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_INSTANCE_DATA_ID)
	{
		{ _field_short_integer, "lightprobe texture array index" },
		{ _field_short_integer, "pervertex block index" },
		{ _field_short_integer, "probe block index" },
		{ _field_char_integer, "analytical light collision warning" },
		{ _field_char_enum, "lightmap debug uv policy", &lightmapdebuguvpolicydefinition },
		{ _field_long_integer, "analytical light index" },
		{ _field_long_integer, "per-vertex lightprobe texture offset" },
		{ _field_dword_integer, "matching flags" },
		{ _field_dword_integer, "mesh index" },
		{ _field_real_point_3d, "instance world-space position" },
		{ _field_terminator }
	};

	STRINGS(lightmapdebuguvpolicydefinition)
	{
		"None",
		"Probe",
		"Vertex",
		"Vertex AO",
		"Supplied UV",
		"Auto UV",
		"Diffuse UV",
		"Auto/Diffuse"
	};
	STRING_LIST(lightmapdebuguvpolicydefinition, lightmapdebuguvpolicydefinition_strings, _countof(lightmapdebuguvpolicydefinition_strings));

	#define SCENARIO_LIGHTMAP_INSTANCE_INDEX_BLOCK_ID { 0xDDF00598, 0x22CF4CB8, 0x9B3480FE, 0x9B200429 }
	TAG_STRUCT(
		scenario_lightmap_instance_index_block,
		"scenario_lightmap_instance_index_block",
		"scenario_lightmap_instance_index_block",
		"s_scenario_lightmap_instance_index_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_INSTANCE_INDEX_BLOCK_ID)
	{
		{ _field_long_integer, "Indices" },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_LIGHTPROBE_VALUE_ID { 0x8A43FCFC, 0x348747AA, 0xBBFC7C0A, 0xC425DD0C }
	TAG_STRUCT(
		scenario_lightmap_lightprobe_value,
		"scenario_lightmap_lightprobe_value",
		"scenario_lightmap_lightprobe_value",
		"s_scenario_lightmap_lightprobe_value",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_LIGHTPROBE_VALUE_ID)
	{
		{ _field_array, "vmf terms", &dual_vmf_terms$2 },
		{ _field_dword_integer, "analytical light index" },
		{ _field_struct, "sh terms", &half_rgb_lightprobe_struct },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_NEW_AO_DATA_BLOCK_ID { 0xEA09AAC0, 0xA28F11E0, 0x82640800, 0x200C9A66 }
	TAG_STRUCT(
		scenario_lightmap_new_ao_data_block,
		"scenario_lightmap_new_ao_data_block",
		"scenario_lightmap_new_ao_data_block",
		"s_scenario_lightmap_new_ao_data_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_NEW_AO_DATA_BLOCK_ID)
	{
		{ _field_char_integer, "value" },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_RASTERIZED_CHART_DATA_ID { 0x1E27169B, 0xDA19459D, 0xA70E48BC, 0x6FC9E7B2 }
	TAG_STRUCT(
		scenario_lightmap_rasterized_chart_data,
		"scenario_lightmap_rasterized_chart_data",
		"scenario_lightmap_rasterized_chart_data",
		"s_scenario_lightmap_rasterized_chart_data",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_RASTERIZED_CHART_DATA_ID)
	{
		{ _field_long_integer, "width" },
		{ _field_long_integer, "height" },
		{ _field_long_integer, "flipX" },
		{ _field_long_integer, "chartRotation" },
		{ _field_long_integer, "atlasX" },
		{ _field_long_integer, "atlasY" },
		{ _field_real_vector_2d, "roundedSize" },
		{ _field_block, "sourceVertices", &scenario_lightmap_rasterized_chart_source_block },
		{ _field_block, "chartBitmap", &scenario_lightmap_rasterized_chart_element_block },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_RASTERIZED_CHART_ELEMENT_ID { 0x67BEAC2F, 0xF8234C79, 0xA076F4AE, 0x387C111B }
	TAG_STRUCT(
		scenario_lightmap_rasterized_chart_element,
		"scenario_lightmap_rasterized_chart_element",
		"scenario_lightmap_rasterized_chart_element",
		"s_scenario_lightmap_rasterized_chart_element",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_RASTERIZED_CHART_ELEMENT_ID)
	{
		{ _field_byte_integer, "composite" },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_RASTERIZED_CHART_SOURCE_ID { 0xE4891E2B, 0xA707B19D, 0x71DAE6BC, 0x4596FC92 }
	TAG_STRUCT(
		scenario_lightmap_rasterized_chart_source,
		"scenario_lightmap_rasterized_chart_source",
		"scenario_lightmap_rasterized_chart_source",
		"s_scenario_lightmap_rasterized_chart_source",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_RASTERIZED_CHART_SOURCE_ID)
	{
		{ _field_long_integer, "streamIndex" },
		{ _field_long_integer, "vertexIndex" },
		{ _field_terminator }
	};

	#define SCENARIO_LIGHTMAP_SETTING_STRUCT_ID { 0x125A33B6, 0x658D4812, 0x8893A3A8, 0x7953003D }
	TAG_STRUCT(
		scenario_lightmap_setting_struct,
		"scenario_lightmap_setting_struct",
		"scenario_lightmap_setting_struct",
		"s_scenario_lightmap_setting_struct",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_SETTING_STRUCT_ID)
	{
		FIELD_EXPLANATION("Lightmap resolution for each buckets", "relative to world unit per texel. default:\n1-> 1\n2-> 4\n2-> 16\n3-> 64\n5-> 128\n6-> 256\n7-> 512"),
		{ _field_real, "lightmap res lowest" },
		{ _field_real, "lightmap res 2nd low" },
		{ _field_real, "lightmap res 3rd low" },
		{ _field_real, "lightmap res medium" },
		{ _field_real, "lightmap res 3rd high" },
		{ _field_real, "lightmap res 2nd high" },
		{ _field_real, "lightmap res highest" },
		{ _field_byte_flags, "lightmap flags", &scenario_lightmap_per_bsp_flags },
		FIELD_PAD("pad the byte flag", 3),
		{ _field_real, "analytical light bounce modifier (when per bsp flag is on)" },
		{ _field_real, "non analytical light bounce modifier (when per bsp flag is on)" },
		{ _field_long_block_flags, "extra lighting bsp flags", "neighbor bsp that occlude or contribute light (including bounce light)", &scenario_structure_bsp_reference_block_block },
		{ _field_terminator }
	};

	STRINGS(scenario_lightmap_per_bsp_flags)
	{
		"analytical bounce uses per bsp setting"
	};
	STRING_LIST(scenario_lightmap_per_bsp_flags, scenario_lightmap_per_bsp_flags_strings, _countof(scenario_lightmap_per_bsp_flags_strings));

	#define SCENARIO_LIGHTMAP_STRUCTURE_LIGHT_INSTANCE_ID { 0xDA68A94F, 0x4EB8D6D7, 0x99C80617, 0x9782349 }
	TAG_STRUCT(
		scenario_lightmap_structure_light_instance,
		"scenario_lightmap_structure_light_instance",
		"scenario_lightmap_structure_light_instance",
		"s_scenario_lightmap_structure_light_instance",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LIGHTMAP_STRUCTURE_LIGHT_INSTANCE_ID)
	{
		{ _field_long_integer, "Shadow Geometry Mesh Index" },
		{ _field_terminator }
	};

	#define SCENARIO_LOCATION_NAME_TRIGGER_VOLUMES_BLOCK_ID { 0x327D2673, 0x4CDC49DD, 0x93D5F5BC, 0x2A051223 }
	TAG_STRUCT(
		scenario_location_name_trigger_volumes_block,
		"scenario_location_name_trigger_volumes_block",
		"scenario_location_name_trigger_volumes_block",
		"s_scenario_location_name_trigger_volumes_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_LOCATION_NAME_TRIGGER_VOLUMES_BLOCK_ID)
	{
		{ _field_short_block_index, "trigger volume", &scenario_trigger_volume_block_block },
		{ _field_string, "name" },
		{ _field_terminator }
	};

	#define SCENARIO_MACHINE_BLOCK_ID { 0xC7CF0D75, 0x5D864949, 0x8F05E50B, 0x8F928F88 }
	VERSIONED_TAG_STRUCT(
		scenario_machine_block,
		"scenario_machine_block",
		"scenario_machine_block",
		"s_scenario_machine_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_MACHINE_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 3, 9 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_machine_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "device data", &scenario_device_struct },
		{ _field_struct, "machine data", &scenario_machine_struct_v3 },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		
		{ _struct_version_mode_equal, 2, 7 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_machine_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "device data", &scenario_device_struct },
		{ _field_struct, "machine data", &scenario_machine_struct_v2 },
		
		{ _struct_version_mode_equal, 1, 7 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_machine_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "device data", &scenario_device_struct },
		{ _field_struct, "machine data", &scenario_machine_struct_v2 },
		
		{ _struct_version_mode_equal, 0, 11 },
		{ _field_short_block_index, "type", &scenario_machine_palette_block_block, _field_id_type },
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_word_flags, "not placed", &object_location_placement_flags },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _tag_field_attributed_definition_position },
		{ _field_real_euler_angles_3d, "rotation", _tag_field_attributed_definition_orientation },
		FIELD_PAD("BX", 4),
		{ _field_long_block_index, "environment object reference", &dont_use_me_scenario_environment_object_block_block },
		{ _field_struct, "device data", &old_scenario_device_struct },
		{ _field_long_flags, "flags", &scenario_machine_flags },
		FIELD_PAD("OHNQZHB", 12),
		
		{ _field_terminator }
	};

	STRINGS(scenario_machine_flags)
	{
		"does not operate automatically",
		"one-sided",
		"never appears locked",
		"opened by melee attack",
		"one-sided for player",
		"does not close automatically",
		"ignores player",
		"ignores ai"
	};
	STRING_LIST(scenario_machine_flags, scenario_machine_flags_strings, _countof(scenario_machine_flags_strings));

	#define SCENARIO_MACHINE_PALETTE_BLOCK_ID { 0x3DD4739B, 0xA07F4861, 0x8F13C5F7, 0xE350E9BA }
	TAG_STRUCT(
		scenario_machine_palette_block,
		"scenario_machine_palette_block",
		"scenario_machine_palette_block",
		"s_scenario_machine_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_MACHINE_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &device_machine_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(device_machine_group_reference, DEVICE_MACHINE_TAG);

	#define SCENARIO_MACHINE_STRUCT_V2_ID { 0xC0242DFD, 0x43FF4928, 0x8E369FAA, 0x32C280F3 }
	TAG_STRUCT(
		scenario_machine_struct_v2,
		"scenario_machine_struct_v2",
		"scenario_machine_struct_v2",
		"s_scenario_machine_struct_v2",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_MACHINE_STRUCT_V2_ID)
	{
		{ _field_long_flags, "flags", &scenario_machine_flags },
		FIELD_PAD("SLRANOYSF", 12),
		{ _field_short_integer, "pathfinding object reference" },
		FIELD_PAD("MCJFTJMJI", 2),
		{ _field_terminator }
	};

	#define SCENARIO_MACHINE_STRUCT_V3_ID { 0x43A76E9A, 0xA1E24E63, 0xA60DD607, 0x83C2C762 }
	TAG_STRUCT(
		scenario_machine_struct_v3,
		"scenario_machine_struct_v3",
		"scenario_machine_struct_v3",
		"s_scenario_machine_struct_v3",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_MACHINE_STRUCT_V3_ID)
	{
		{ _field_long_flags, "flags", &scenario_machine_flags },
		{ _field_block, "pathfinding references", &pathfinding_object_index_list_block_block },
		{ _field_short_enum, "pathfinding policy", &scenario_machine_pathfinding_policy_enum },
		FIELD_PAD("post-pathfinding-policy", 2),
		{ _field_terminator }
	};

	STRINGS(scenario_machine_pathfinding_policy_enum)
	{
		"default",
		"discs",
		"sectors",
		"cut-out",
		"none"
	};
	STRING_LIST(scenario_machine_pathfinding_policy_enum, scenario_machine_pathfinding_policy_enum_strings, _countof(scenario_machine_pathfinding_policy_enum_strings));

	#define SCENARIO_MULTIPLAYER_OBJECT_STRUCT_ID { 0xD7949B53, 0x207B47B5, 0x99E1EB91, 0x29AF1E16 }
	TAG_STRUCT(
		scenario_multiplayer_object_struct,
		"scenario_multiplayer_object_struct",
		"scenario_multiplayer_object_struct",
		"s_scenario_multiplayer_object_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_MULTIPLAYER_OBJECT_STRUCT_ID)
	{
		FIELD_EXPLANATION("Multiplayer Data", "object data for multiplayer game use"),
		{ _field_string, "megalo label" },
		{ _field_string, "megalo label 2" },
		{ _field_string, "megalo label 3" },
		{ _field_string, "megalo label 4" },
		{ _field_char_enum, "game engine symmetric placement", &game_engine_symmetry_placement_flags },
		{ _field_byte_flags, "game engine flags", &global_game_engine_type_flags },
		{ _field_char_enum, "owner team", &global_multiplayer_team_designator_enum_definition },
		{ _field_byte_flags, "spawn flags", &multiplayer_object_placement_spawn_flags },
		{ _field_char_integer, "quota minimum" },
		{ _field_char_integer, "quota maximum", nullptr, "<=0 for unlimited" },
		{ _field_char_enum, "remapping policy", &multiplayer_object_remapping_policy },
		{ _field_char_enum, "teleporter channel", &multiplayer_teleporter_channel },
		{ _field_byte_flags, "teleporter passability", &teleporter_passability_flags },
		{ _field_char_integer, "spawn order", nullptr, "-1 for random" },
		{ _field_char_integer, "user data 2" },
		{ _field_char_enum, "trait zone channel", &multiplayer_teleporter_channel },
		{ _field_real, "boundary width or radius" },
		{ _field_real, "boundary box length" },
		{ _field_real, "boundary positive height" },
		{ _field_real, "boundary negative height" },
		{ _field_char_enum, "boundary shape", &multiplayer_goal_area_boundary_shape_enum },
		FIELD_PAD("boundary_pad", 3),
		{ _field_short_integer, "spawn time", nullptr, "seconds" },
		{ _field_short_integer, "abandonment time", nullptr, "seconds" },
		{ _field_string_id, "location name" },
		{ _field_struct, "map variant parent", &scenario_object_parent_struct },
		{ _field_terminator }
	};

	STRINGS(game_engine_symmetry_placement_flags)
	{
		"ignore",
		"symmetric",
		"asymmetric"
	};
	STRING_LIST(game_engine_symmetry_placement_flags, game_engine_symmetry_placement_flags_strings, _countof(game_engine_symmetry_placement_flags_strings));

	STRINGS(multiplayer_object_placement_spawn_flags)
	{
		"unique spawn",
		"not initially placed",
		"hide unless megalo required",
		"is shortcut object",
		"can spawn on bipeds",
		"spawner starts inactive"
	};
	STRING_LIST(multiplayer_object_placement_spawn_flags, multiplayer_object_placement_spawn_flags_strings, _countof(multiplayer_object_placement_spawn_flags_strings));

	STRINGS(multiplayer_object_remapping_policy)
	{
		"normal-default",
		"do not replace",
		"only replace"
	};
	STRING_LIST(multiplayer_object_remapping_policy, multiplayer_object_remapping_policy_strings, _countof(multiplayer_object_remapping_policy_strings));

	STRINGS(multiplayer_teleporter_channel)
	{
		"alpha",
		"bravo",
		"charlie",
		"delta",
		"echo",
		"foxtrot",
		"golf",
		"hotel",
		"india",
		"juliet",
		"kilo",
		"lima",
		"mike",
		"november",
		"oscar",
		"papa",
		"quebec",
		"romeo",
		"sierra",
		"tango",
		"uniform",
		"victor",
		"whiskey",
		"xray",
		"yankee",
		"zulu"
	};
	STRING_LIST(multiplayer_teleporter_channel, multiplayer_teleporter_channel_strings, _countof(multiplayer_teleporter_channel_strings));

	STRINGS(multiplayer_goal_area_boundary_shape_enum)
	{
		"unused",
		"sphere",
		"cylinder",
		"box"
	};
	STRING_LIST(multiplayer_goal_area_boundary_shape_enum, multiplayer_goal_area_boundary_shape_enum_strings, _countof(multiplayer_goal_area_boundary_shape_enum_strings));

	#define SCENARIO_NAMED_LOCATION_VOLUME_BLOCK_STRUCT_ID { 0x788095DE, 0x7C514271, 0xBB149679, 0x682095DA }
	TAG_STRUCT(
		scenario_named_location_volume_block_struct,
		"scenario_named_location_volume_block_struct",
		"scenario_named_location_volume_block_struct",
		"s_scenario_named_location_volume_block_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_NAMED_LOCATION_VOLUME_BLOCK_STRUCT_ID)
	{
		{ _field_block, "points", &named_location_volume_point_block_block },
		{ _field_real, "height" },
		{ _field_real, "sink" },
		{ _field_string_id, "location name" },
		{ _field_terminator }
	};

	#define SCENARIO_OBJECT_DATUM_STRUCT_ID { 0xB2D98DC9, 0xF27A4A22, 0xB6CD6942, 0x27B43F20 }
	VERSIONED_TAG_STRUCT(
		scenario_object_datum_struct,
		"scenario_object_datum_struct",
		"scenario_object_datum_struct",
		"s_scenario_object_datum_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_OBJECT_DATUM_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 29 },
		FIELD_CUSTOM("value", _tag_field_custom_type_unknown_object_editor),
		{ _field_long_flags, "placement flags", &object_location_placement_flags },
		{ _field_real_point_3d, "position", _tag_field_attributed_definition_position },
		{ _field_real_euler_angles_3d, "rotation", _tag_field_attributed_definition_orientation },
		{ _field_real, "scale", _tag_field_attributed_definition_scale },
		{ _field_block, "node orientations", &scenario_object_node_orientations_block_block },
		{ _field_real, "gravity override" },
		{ _field_byte_flags, "gravity flags", &object_gravity_flags },
		FIELD_PAD("ZEE", 1),
		{ _field_char_enum, "bsp policy", &scenario_object_bsp_placement_policy_definition, _tag_field_attributed_definition_update_layout_field },
		{ _field_byte_flags, "script flags", &scenarioobjectscriptflagsdefinition },
		{ _field_block, "force enabled scripts", &scriptlistblock_block },
		{ _field_block, "disabled scripts", &scriptlistblock_block },
		{ _field_struct, "manual bsp flags", &manualbspflagsreferences },
		{ _field_word_flags, "transform flags", &object_transform_flags },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_byte_flags, "Nav Mesh Flags", &object_navmesh_flags },
		FIELD_PAD("ZEE2", 3),
		{ _field_string_id, "light airprobe name" },
		{ _field_struct, "object id", &scenario_object_id_struct },
		{ _field_long_flags, "Light Channels", &channeldefinitionflags },
		{ _field_non_cache_runtime_value, "runtimeObjectHandle" },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		FIELD_PAD("NCIUNE", 2),
		{ _field_struct, "parent id", &scenario_object_parent_struct },
		{ _field_long_block_flags, "can attach to bsp flags", &scenario_structure_bsp_reference_block_block },
		{ _field_real, "Directional Acceleration Mult. ", "Multiplier applied to all phantoms' direction acceleration factors.  Used to scale man-cannon strength." },
		{ _field_block, "Command Links", &commandlinkblock_block },
		
		{ _struct_version_mode_equal, 0, 17 },
		FIELD_CUSTOM("value", _tag_field_custom_type_unknown_object_editor),
		{ _field_long_flags, "placement flags", &object_location_placement_flags },
		{ _field_real_point_3d, "position", _tag_field_attributed_definition_position },
		{ _field_real_euler_angles_3d, "rotation", _tag_field_attributed_definition_orientation },
		{ _field_real, "scale", _tag_field_attributed_definition_scale },
		{ _field_block, "node orientations", &scenario_object_node_orientations_block_block },
		{ _field_long_block_flags, "manual bsp flags", &scenario_structure_bsp_reference_block_block, _tag_field_attributed_definition_scenario_object_manual_bsp_flags },
		{ _field_word_flags, "transform flags", &object_transform_flags },
		FIELD_PAD("after-transform-flags-pad", 2),
		{ _field_string_id, "light airprobe name" },
		{ _field_struct, "object id", &scenario_object_id_struct },
		{ _field_long_flags, "Light Channels", &channeldefinitionflags },
		{ _field_char_enum, "bsp policy", &scenario_object_bsp_placement_policy_definition, _tag_field_attributed_definition_update_layout_field },
		FIELD_PAD("ZEE", 1),
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		{ _field_struct, "parent id", &scenario_object_parent_struct },
		{ _field_long_block_flags, "can attach to bsp flags", &scenario_structure_bsp_reference_block_block },
		
		{ _field_terminator }
	};

	STRINGS(object_gravity_flags)
	{
		"apply override",
		"apply to children also"
	};
	STRING_LIST(object_gravity_flags, object_gravity_flags_strings, _countof(object_gravity_flags_strings));

	STRINGS(scenario_object_bsp_placement_policy_definition)
	{
		"default",
		"always placed",
		"manual bsp placement"
	};
	STRING_LIST(scenario_object_bsp_placement_policy_definition, scenario_object_bsp_placement_policy_definition_strings, _countof(scenario_object_bsp_placement_policy_definition_strings));

	STRINGS(scenarioobjectscriptflagsdefinition)
	{
		"scripts disabled",
		"use override lists",
		"scripts always run"
	};
	STRING_LIST(scenarioobjectscriptflagsdefinition, scenarioobjectscriptflagsdefinition_strings, _countof(scenarioobjectscriptflagsdefinition_strings));

	STRINGS(object_transform_flags)
	{
		"mirrored"
	};
	STRING_LIST(object_transform_flags, object_transform_flags_strings, _countof(object_transform_flags_strings));

	STRINGS(object_navmesh_flags)
	{
		"children inherit navmesh interaction",
		"navmesh always loaded"
	};
	STRING_LIST(object_navmesh_flags, object_navmesh_flags_strings, _countof(object_navmesh_flags_strings));

	#define SCENARIO_OBJECT_ID_STRUCT_ID { 0xA40A1401, 0xDE4B45AE, 0xB47F4714, 0x99C39E7B }
	TAG_STRUCT(
		scenario_object_id_struct,
		"scenario_object_id_struct",
		"scenario_object_id_struct",
		"s_scenario_object_id_struct",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_OBJECT_ID_STRUCT_ID)
	{
		{ _field_long_integer, "unique id", _field_id_object_id },
		{ _field_short_block_index, "origin bsp index", &scenario_structure_bsp_reference_block_block, _field_id_object_id },
		{ _field_char_enum, "type", &object_type_enum_definition, _field_id_object_id },
		{ _field_char_enum, "source", &object_source_enum_definition, _field_id_object_id },
		{ _field_terminator }
	};

	STRINGS(object_source_enum_definition)
	{
		"structure",
		"editor",
		"dynamic",
		"legacy",
		"sky",
		"parent"
	};
	STRING_LIST(object_source_enum_definition, object_source_enum_definition_strings, _countof(object_source_enum_definition_strings));

	#define SCENARIO_OBJECT_NAMES_BLOCK_ID { 0x6B05A7F7, 0x3584428C, 0x92762448, 0xA29197DB }
	TAG_STRUCT(
		scenario_object_names_block,
		"scenario_object_names_block",
		"scenario_object_names_block",
		"s_scenario_object_names_block",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_OBJECT_NAMES_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index_custom_search, "object_type", &_void },
		{ _field_short_block_index_custom_search, "scenario_datum_index", &scenario_object_name_search },
		{ _field_terminator }
	};

	#define SCENARIO_OBJECT_NODE_ORIENTATIONS_BIT_VECTOR_BLOCK_ID { 0xEDBAEA00, 0x1CBB4AEF, 0xCC2D582C, 0xD39C28A }
	TAG_STRUCT(
		scenario_object_node_orientations_bit_vector_block,
		"scenario_object_node_orientations_bit_vector_block",
		"scenario_object_node_orientations_bit_vector_block",
		"s_scenario_object_node_orientations_bit_vector_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_OBJECT_NODE_ORIENTATIONS_BIT_VECTOR_BLOCK_ID)
	{
		{ _field_byte_integer, "data" },
		{ _field_terminator }
	};

	#define SCENARIO_OBJECT_NODE_ORIENTATIONS_BLOCK_ID { 0xEDA8EC00, 0x4C774AEF, 0xB12F582C, 0x1E39C08A }
	TAG_STRUCT(
		scenario_object_node_orientations_block,
		"scenario_object_node_orientations_block",
		"scenario_object_node_orientations_block",
		"s_scenario_object_node_orientations_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_OBJECT_NODE_ORIENTATIONS_BLOCK_ID)
	{
		{ _field_short_integer, "node count" },
		FIELD_PAD("paddington", 2),
		{ _field_block, "bit vector", &scenario_object_node_orientations_bit_vector_block_block },
		{ _field_block, "orientations", &scenario_object_node_orientations_orientations_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_OBJECT_NODE_ORIENTATIONS_ORIENTATIONS_BLOCK_ID { 0xEDAAEC00, 0x4CB74AEF, 0xBC2F582C, 0x1D39C08A }
	TAG_STRUCT(
		scenario_object_node_orientations_orientations_block,
		"scenario_object_node_orientations_orientations_block",
		"scenario_object_node_orientations_orientations_block",
		"s_scenario_object_node_orientations_orientations_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_OBJECT_NODE_ORIENTATIONS_ORIENTATIONS_BLOCK_ID)
	{
		{ _field_short_integer, "number" },
		{ _field_terminator }
	};

	#define SCENARIO_OBJECT_PARENT_STRUCT_ID { 0xC16E1FE3, 0xC0AA4656, 0x95075B5F, 0x41BB4DF4 }
	TAG_STRUCT(
		scenario_object_parent_struct,
		"scenario_object_parent_struct",
		"scenario_object_parent_struct",
		"s_scenario_object_parent_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_OBJECT_PARENT_STRUCT_ID)
	{
		FIELD_PAD("der", 2),
		{ _field_short_block_index, "parent object", "if an object with this name exists, we attach to it as a child", &scenario_object_names_block_block },
		{ _field_string_id, "parent marker" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "connection marker" },
		{ _field_terminator }
	};

	#define SCENARIO_OBJECT_PERMUTATION_STRUCT_ID { 0x3BD8F07, 0x22A74669, 0xA02A4C64, 0x96D3305 }
	TAG_STRUCT(
		scenario_object_permutation_struct,
		"scenario_object_permutation_struct",
		"scenario_object_permutation_struct",
		"s_scenario_object_permutation_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_OBJECT_PERMUTATION_STRUCT_ID)
	{
		{ _field_string_id, "variant name", _field_id_object_variant },
		{ _field_byte_flags, "active change colors", &scenario_object_active_change_color_flags },
		FIELD_PAD("SLCJNEROH", 3),
		{ _field_rgb_color, "primary color" },
		{ _field_rgb_color, "secondary color" },
		{ _field_rgb_color, "tertiary color" },
		{ _field_rgb_color, "quaternary color" },
		{ _field_terminator }
	};

	STRINGS(scenario_object_active_change_color_flags)
	{
		"primary",
		"secondary",
		"tertiary",
		"quaternary"
	};
	STRING_LIST(scenario_object_active_change_color_flags, scenario_object_active_change_color_flags_strings, _countof(scenario_object_active_change_color_flags_strings));

	#define SCENARIO_OBJECT_REFERENCE_STRUCT_ID { 0xA40BCD01, 0xDE0AB5AE, 0xB12F4714, 0xAAC39E7B }
	TAG_STRUCT(
		scenario_object_reference_struct,
		"scenario_object_reference_struct",
		"scenario_object_reference_struct",
		"s_scenario_object_reference_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_OBJECT_REFERENCE_STRUCT_ID)
	{
		{ _field_short_integer, "object index" },
		{ _field_short_integer, "scenario object index" },
		{ _field_terminator }
	};

	#define SCENARIO_ORDNANCE_LIST_STRUCT_DEFINITION_ID { 0x23500DD2, 0x50D74522, 0xBBC8C5FD, 0x21E2B58C }
	TAG_STRUCT(
		scenario_ordnance_list_struct_definition,
		"scenario_ordnance_list_struct_definition",
		"scenario_ordnance_list_struct_definition",
		"s_scenario_ordnance_list_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ORDNANCE_LIST_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "Random ordnance drop list", &randomordnanceitemblock_block },
		{ _field_block, "Player ordnance drop groups", &playerordnancegroupblock_block },
		{ _field_terminator }
	};

	#define SCENARIO_PERFORMANCE_ACTOR_BLOCK_STRUCT_ID { 0xCC4F984F, 0xE5DF44CB, 0xBA6183C7, 0x77AD7E3B }
	TAG_STRUCT(
		scenario_performance_actor_block_struct,
		"scenario_performance_actor_block_struct",
		"scenario_performance_actor_block_struct",
		"s_scenario_performance_actor_block_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_PERFORMANCE_ACTOR_BLOCK_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &scenario_performance_actor_flags_definition },
		{ _field_string_id, "Actor name" },
		{ _field_short_block_index, "Actor type", &character_palette_block_block },
		{ _field_short_block_index, "Weapon type", &scenario_weapon_palette_block_block },
		{ _field_short_block_index, "Vehicle type", &scenario_vehicle_palette_block_block },
		{ _field_short_block_index_custom_search, "debug spawn point", &custom_performance_point_block_index_definition },
		{ _field_string_id, "Vehicle seat label" },
		{ _field_terminator }
	};

	#define SCENARIO_PERFORMANCE_LINE_ANIMATION_BLOCK_STRUCT_ID { 0x7F3FD52E, 0x957543C2, 0xA41B8BBD, 0x3C94DACE }
	TAG_STRUCT(
		scenario_performance_line_animation_block_struct,
		"scenario_performance_line_animation_block_struct",
		"scenario_performance_line_animation_block_struct",
		"s_scenario_performance_line_animation_block_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_PERFORMANCE_LINE_ANIMATION_BLOCK_STRUCT_ID)
	{
		{ _field_word_flags, "flags", &scenario_performance_line_animation_flags_definition },
		FIELD_PAD("pad0", 2),
		{ _field_string_id, "stance" },
		{ _field_string_id, "animation" },
		{ _field_real, "duration" },
		{ _field_real, "probability" },
		{ _field_real, "throttle transition time", nullptr, "seconds" },
		{ _field_long_integer, "transition frame count", "The number of frames from the end of the animation to start transitioning out" },
		{ _field_terminator }
	};

	STRINGS(scenario_performance_line_animation_flags_definition)
	{
		"Loop",
		"Loop until task transition",
		"Die on animation completion"
	};
	STRING_LIST(scenario_performance_line_animation_flags_definition, scenario_performance_line_animation_flags_definition_strings, _countof(scenario_performance_line_animation_flags_definition_strings));

	#define SCENARIO_PERFORMANCE_LINE_BLOCK_STRUCT_ID { 0xA6CCBC29, 0x9C694FAB, 0x813635E3, 0x1CEBC1FF }
	TAG_STRUCT(
		scenario_performance_line_block_struct,
		"scenario_performance_line_block_struct",
		"scenario_performance_line_block_struct",
		"s_scenario_performance_line_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_PERFORMANCE_LINE_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index_custom_search, "Actor", &custom_performance_actor_block_index_definition },
		{ _field_word_flags, "flags", &scenario_performance_line_flags },
		{ _field_short_integer, "sleep minimum", nullptr, "ticks" },
		{ _field_short_integer, "sleep maximum", nullptr, "ticks" },
		{ _field_long_enum, "Line progress type", &scenario_performance_line_progress_definition },
		{ _field_block, "Script fragments", &scenario_performance_line_script_fragment_block_block },
		{ _field_block, "Point interaction", &scenario_performance_line_point_interaction_block_block },
		{ _field_block, "Animations", &scenario_performance_line_animation_block_block },
		{ _field_block, "Sync Actions", &scenario_performance_line_sync_action_block_block },
		{ _field_block, "Scenery Sync Actions", &scenario_performance_line_scenery_sync_action_block_block },
		{ _field_block, "Dialog lines", &scenario_performance_line_dialog_block_block },
		{ _field_block, "Sounds", &scenario_performance_line_sound_block_block },
		{ _field_terminator }
	};

	STRINGS(scenario_performance_line_flags)
	{
		"Disable"
	};
	STRING_LIST(scenario_performance_line_flags, scenario_performance_line_flags_strings, _countof(scenario_performance_line_flags_strings));

	STRINGS(scenario_performance_line_progress_definition)
	{
		"Immediate (play)",
		"Block until all done",
		"Block until line done",
		"Queue blocking",
		"Queue immediate"
	};
	STRING_LIST(scenario_performance_line_progress_definition, scenario_performance_line_progress_definition_strings, _countof(scenario_performance_line_progress_definition_strings));

	#define SCENARIO_PERFORMANCE_LINE_DIALOG_BLOCK_STRUCT_ID { 0xDA03E62A, 0xCBB84C28, 0xAFF51214, 0x5F621322 }
	TAG_STRUCT(
		scenario_performance_line_dialog_block_struct,
		"scenario_performance_line_dialog_block_struct",
		"scenario_performance_line_dialog_block_struct",
		"s_scenario_performance_line_dialog_block_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_PERFORMANCE_LINE_DIALOG_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "dialog" },
		{ _field_real, "probability" },
		{ _field_terminator }
	};

	#define SCENARIO_PERFORMANCE_LINE_POINT_INTERACTION_BLOCK_STRUCT_ID { 0x42C82873, 0xA3CB4127, 0xA02B8B05, 0xABD54C59 }
	TAG_STRUCT(
		scenario_performance_line_point_interaction_block_struct,
		"scenario_performance_line_point_interaction_block_struct",
		"scenario_performance_line_point_interaction_block_struct",
		"s_scenario_performance_line_point_interaction_block_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_PERFORMANCE_LINE_POINT_INTERACTION_BLOCK_STRUCT_ID)
	{
		{ _field_long_flags, "interaction type", &scenario_performance_line_point_interaction_type_definition },
		{ _field_short_block_index_custom_search, "point", &custom_performance_point_block_index_definition },
		{ _field_short_block_index_custom_search, "actor", &custom_performance_actor_block_index_definition },
		{ _field_string_id, "object name" },
		{ _field_string_id, "throttle style" },
		{ _field_terminator }
	};

	STRINGS(scenario_performance_line_point_interaction_type_definition)
	{
		"Face point",
		"Aim at point",
		"Look at point",
		"Shoot at point",
		"Go by point",
		"Go to point",
		"Go to and align",
		"Go to thespian center",
		"Teleport to point"
	};
	STRING_LIST(scenario_performance_line_point_interaction_type_definition, scenario_performance_line_point_interaction_type_definition_strings, _countof(scenario_performance_line_point_interaction_type_definition_strings));

	#define SCENARIO_PERFORMANCE_LINE_SCENERY_SYNC_ACTION_BLOCK_STRUCT_ID { 0xF9F4EDE2, 0x1D8747B8, 0xBFDB568C, 0xEA43CA92 }
	TAG_STRUCT(
		scenario_performance_line_scenery_sync_action_block_struct,
		"scenario_performance_line_scenery_sync_action_block_struct",
		"scenario_performance_line_scenery_sync_action_block_struct",
		"s_scenario_performance_line_scenery_sync_action_block_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_PERFORMANCE_LINE_SCENERY_SYNC_ACTION_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "scenery object name" },
		{ _field_string_id, "sync action name" },
		{ _field_string_id, "stance name" },
		{ _field_real, "probability" },
		{ _field_word_flags, "flags", &scenario_performance_line_scenery_sync_action_flag_type_definition },
		FIELD_PAD("pad", 2),
		{ _field_block, "Actors", &scenario_performance_line_sync_action_actor_block_block },
		{ _field_terminator }
	};

	STRINGS(scenario_performance_line_scenery_sync_action_flag_type_definition)
	{
		"Share initiator stance"
	};
	STRING_LIST(scenario_performance_line_scenery_sync_action_flag_type_definition, scenario_performance_line_scenery_sync_action_flag_type_definition_strings, _countof(scenario_performance_line_scenery_sync_action_flag_type_definition_strings));

	#define SCENARIO_PERFORMANCE_LINE_SCRIPT_FRAGMENT_BLOCK_ID { 0x46F762CB, 0x405D4C8A, 0xA0333371, 0xB410E28A }
	TAG_STRUCT(
		scenario_performance_line_script_fragment_block,
		"scenario_performance_line_script_fragment_block",
		"scenario_performance_line_script_fragment_block",
		"s_scenario_performance_line_script_fragment_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_PERFORMANCE_LINE_SCRIPT_FRAGMENT_BLOCK_ID)
	{
		{ _field_short_enum, "fragment placement", &scenario_performance_fragment_placement_definition },
		{ _field_short_enum, "fragment type", &scenario_performance_fragment_type_definition },
		{ _field_long_string, "fragment", "maximum 256 characters, type just branch condition (with brackets) in case of branches" },
		{ _field_long_string, "branch target", "the script to branch to (with any arguments to it). Used only if type is branch" },
		{ _field_terminator }
	};

	STRINGS(scenario_performance_fragment_placement_definition)
	{
		"Pre-Line",
		"Post-Line"
	};
	STRING_LIST(scenario_performance_fragment_placement_definition, scenario_performance_fragment_placement_definition_strings, _countof(scenario_performance_fragment_placement_definition_strings));

	STRINGS(scenario_performance_fragment_type_definition)
	{
		"Default",
		"Conditional Sleep",
		"Branch"
	};
	STRING_LIST(scenario_performance_fragment_type_definition, scenario_performance_fragment_type_definition_strings, _countof(scenario_performance_fragment_type_definition_strings));

	#define SCENARIO_PERFORMANCE_LINE_SOUND_BLOCK_STRUCT_ID { 0x952C6A2F, 0x77B4EA9, 0xB110F08B, 0xA8122D4E }
	TAG_STRUCT(
		scenario_performance_line_sound_block_struct,
		"scenario_performance_line_sound_block_struct",
		"scenario_performance_line_sound_block_struct",
		"s_scenario_performance_line_sound_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_PERFORMANCE_LINE_SOUND_BLOCK_STRUCT_ID)
	{
		{ _field_tag_reference, "sound effect", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_short_block_index_custom_search, "attach to point", &custom_performance_point_block_index_definition },
		FIELD_PAD("pad", 2),
		{ _field_string_id, "attach to object named" },
		{ _field_terminator }
	};

	#define SCENARIO_PERFORMANCE_LINE_SYNC_ACTION_ACTOR_BLOCK_ID { 0x3B846F9F, 0x155E4332, 0x9334A3E3, 0xB50AE87B }
	TAG_STRUCT(
		scenario_performance_line_sync_action_actor_block,
		"scenario_performance_line_sync_action_actor_block",
		"scenario_performance_line_sync_action_actor_block",
		"s_scenario_performance_line_sync_action_actor_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_PERFORMANCE_LINE_SYNC_ACTION_ACTOR_BLOCK_ID)
	{
		{ _field_short_block_index_custom_search, "Actor type", &custom_performance_character_search_definition },
		FIELD_PAD("pad", 2),
		{ _field_terminator }
	};

	#define SCENARIO_PERFORMANCE_LINE_SYNC_ACTION_BLOCK_STRUCT_ID { 0x3CD14898, 0x114147AE, 0x8303309F, 0x8F172B69 }
	TAG_STRUCT(
		scenario_performance_line_sync_action_block_struct,
		"scenario_performance_line_sync_action_block_struct",
		"scenario_performance_line_sync_action_block_struct",
		"s_scenario_performance_line_sync_action_block_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_PERFORMANCE_LINE_SYNC_ACTION_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "sync action name" },
		{ _field_real, "probability" },
		{ _field_short_block_index_custom_search, "attach to point", &custom_performance_point_block_index_definition },
		{ _field_word_flags, "flags", &scenario_performance_line_sync_action_flag_type_definition },
		{ _field_block, "Actors", &scenario_performance_line_sync_action_actor_block_block },
		{ _field_terminator }
	};

	STRINGS(scenario_performance_line_sync_action_flag_type_definition)
	{
		"Share initiator stance",
		"Initiator is origin"
	};
	STRING_LIST(scenario_performance_line_sync_action_flag_type_definition, scenario_performance_line_sync_action_flag_type_definition_strings, _countof(scenario_performance_line_sync_action_flag_type_definition_strings));

	#define SCENARIO_PERFORMANCE_TASK_BLOCK_STRUCT_ID { 0x75C14F83, 0xB7224AB4, 0xB092DFD0, 0x65E02EDE }
	TAG_STRUCT(
		scenario_performance_task_block_struct,
		"scenario_performance_task_block_struct",
		"scenario_performance_task_block_struct",
		"s_scenario_performance_task_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_PERFORMANCE_TASK_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "objective", &objectives_block_block },
		{ _field_short_block_index_custom_search, "task", &custom_performance_task_block_index_definition },
		{ _field_terminator }
	};

	#define SCENARIO_PERFORMANCES_BLOCK_STRUCT_ID { 0xC0C1943, 0xAB2C410E, 0xB5058F24, 0xE7E5BA05 }
	TAG_STRUCT(
		scenario_performances_block_struct,
		"scenario_performances_block_struct",
		"scenario_performances_block_struct",
		"s_scenario_performances_block_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_PERFORMANCES_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "script name", "The name of a custom script used to drive the performance. If none is given, a default script is uses that goes through the lines in sequence" },
		{ _field_string_id, "global name", "The name of a script global that will be declared for this performance." },
		{ _field_word_flags, "flags", &performance_flags },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		{ _field_short_block_index_custom_search, "Point set", &custom_performance_pointset_block_index_definition },
		FIELD_PAD("padding", 2),
		{ _field_block, "Actors", &scenario_performance_actor_block_block },
		{ _field_block, "Lines", &scenario_performance_line_block_block },
		{ _field_real_point_3d, "position" },
		{ _field_real_euler_angles_2d, "template facing" },
		{ _field_real, "thespian radius", "The radius inside which actors have to be in order to start.", MAKE_ALT_NAMES("performance radius") },
		{ _field_real, "attraction radius", "The radius inside which actors become attracted to the thespian origin." },
		{ _field_real_fraction, "attraction probability per second", "The probability that an actor be attracted once inside the thespian radius, every second.", nullptr, "[0,1]" },
		{ _field_string_id, "template" },
		{ _field_long_integer, "template index" },
		{ _field_block, "tasks", &scenario_performance_task_block_block },
		FIELD_CUSTOM("value", _field_id_default),
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_terminator }
	};

	STRINGS(performance_flags)
	{
		"not initially placed",
		"allow replay",
		"infinite radius",
		"actors in search"
	};
	STRING_LIST(performance_flags, performance_flags_strings, _countof(performance_flags_strings));

	#define SCENARIO_PLAYERS_BLOCK_ID { 0x2C1FF0F5, 0x45734A11, 0x891B161E, 0xC24170EF }
	TAG_STRUCT(
		scenario_players_block,
		"scenario_players_block",
		"scenario_players_block",
		"s_scenario_players_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_PLAYERS_BLOCK_ID)
	{
		{ _field_real_point_3d, "position" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_angle, "facing", nullptr, "degrees" },
		{ _field_angle, "pitch", nullptr, "degrees" },
		{ _field_short_integer, "insertion point index" },
		{ _field_word_flags, "flags", &scenario_player_flags },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		FIELD_PAD("ANDYNDGE", 2),
		{ _field_terminator }
	};

	STRINGS(scenario_player_flags)
	{
		"survival mode",
		"survival mode elite"
	};
	STRING_LIST(scenario_player_flags, scenario_player_flags_strings, _countof(scenario_player_flags_strings));

	#define SCENARIO_PROFILES_BLOCK_ID { 0x5AFB6481, 0x6ED940DC, 0x855CB02A, 0xB73D1AC4 }
	TAG_STRUCT(
		scenario_profiles_block,
		"scenario_profiles_block",
		"scenario_profiles_block",
		"s_scenario_profiles_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_PROFILES_BLOCK_ID)
	{
		{ _field_string, "name" },
		{ _field_real_fraction, "starting health damage", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "starting shield damage", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "primary weapon", &weapon_group_reference$6 },
		{ _field_short_integer, "primaryrounds loaded", "-1 = weapon default" },
		{ _field_short_integer, "primaryrounds total", "-1 = weapon default" },
		{ _field_real, "primaryage remaining", "0.0 = default, 1.0 = full" },
		{ _field_tag_reference, "secondary weapon", &weapon_group_reference$6 },
		{ _field_short_integer, "secondaryrounds loaded", "-1 = weapon default" },
		{ _field_short_integer, "secondaryrounds total", "-1 = weapon default" },
		{ _field_real, "secondaryage remaining", "0.0 = default, 1.0 = full" },
		{ _field_char_integer, "starting fragmentation grenade count" },
		{ _field_char_integer, "starting plasma grenade count" },
		{ _field_char_integer, "starting grenade 3 count" },
		{ _field_char_integer, "starting grenade 4 count" },
		{ _field_char_integer, "starting grenade 5 count" },
		{ _field_char_integer, "starting grenade 6 count" },
		{ _field_char_integer, "starting grenade 7 count" },
		{ _field_char_integer, "starting grenade 8 count" },
		{ _field_tag_reference, "starting equipment", &equipment_group_reference$4 },
		{ _field_string_id, "starting tactical package" },
		{ _field_string_id, "starting support upgrade" },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		FIELD_PAD("AHDVHJE", 2),
		{ _field_terminator }
	};

	TAG_REFERENCE(weapon_group_reference$6, WEAPON_TAG);

	TAG_REFERENCE(equipment_group_reference$4, EQUIPMENT_TAG);

	#define SCENARIO_REQUIRED_RESOURCE_STRUCT_DEFINITION_ID { 0xA9B90BB8, 0xC5684B2B, 0xA9CD6FDD, 0x9B7C6602 }
	TAG_STRUCT(
		scenario_required_resource_struct_definition,
		"scenario_required_resource_struct_definition",
		"scenario_required_resource_struct_definition",
		"s_scenario_required_resource_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_REQUIRED_RESOURCE_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "resources", &scenario_budget_references_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_REQUISITION_PALETTE_BLOCK_ID { 0xED8D9979, 0xEF7A4B0A, 0x9F1000C9, 0x368F5409 }
	TAG_STRUCT(
		scenario_requisition_palette_block,
		"scenario_requisition_palette_block",
		"scenario_requisition_palette_block",
		"s_scenario_requisition_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_REQUISITION_PALETTE_BLOCK_ID)
	{
		FIELD_EXPLANATION("CUSTOM APPS", "If you want the award to be a custom app, point at globals/custom_app_globals, and match one of the names from that tag for \"display_name\""),
		{ _field_tag_reference, "name", &object_group_vehicle_group_scenery_group_device_machine_group_custom_app_globals_group_reference },
		{ _field_tag_reference, "second name", &object_group_vehicle_group_scenery_group_device_machine_group_custom_app_globals_group_reference },
		{ _field_tag_reference, "third name", &object_group_vehicle_group_scenery_group_device_machine_group_custom_app_globals_group_reference },
		{ _field_string_id, "display_name" },
		{ _field_long_enum, "Submenu", "controls which requisition submenu this object should appear in", &requisition_submenu_global_enum },
		{ _field_long_integer, "maximum allowed", "cant buy more if there are too many in play" },
		{ _field_real, "price per instance" },
		{ _field_string_id, "model variant name" },
		{ _field_real, "bounty for destruction" },
		{ _field_short_integer, "min fireteam tier", "0=Bronze, 1=Silver, or 2=Gold" },
		{ _field_byte_integer, "additional frag grenades" },
		{ _field_byte_integer, "additional plasma grenades" },
		{ _field_long_flags, "built-in palettes for which item is enabled by default", &scenario_requisition_palette_presence },
		{ _field_long_enum, "special buy", &requisition_special_buy_enum },
		{ _field_long_integer, "starting ammo", "1..100 for ammoless weapons, 0 = default for all weapons" },
		{ _field_real, "warm-up time", "item will be unavailable until x seconds into the scenario", "seconds" },
		{ _field_real, "player purchase frequency", nullptr, "seconds" },
		{ _field_real, "team purchase frequency", nullptr, "seconds" },
		{ _field_real, "price increase factor", "price = original-price x increase-factor to-the n_times_bought" },
		{ _field_byte_integer, "maximum buy count", nullptr, "per player" },
		{ _field_byte_integer, "total maximum buy count", nullptr, "per team" },
		FIELD_PAD("SMYE", 2),
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(object_group_vehicle_group_scenery_group_device_machine_group_custom_app_globals_group_reference)
	{
		OBJECT_TAG,
		VEHICLE_TAG,
		SCENERY_TAG,
		DEVICE_MACHINE_TAG,
		CUSTOM_APP_GLOBALS_TAG,
		INVALID_TAG
	};

	STRINGS(requisition_submenu_global_enum)
	{
		"Support"
	};
	STRING_LIST(requisition_submenu_global_enum, requisition_submenu_global_enum_strings, _countof(requisition_submenu_global_enum_strings));

	STRINGS(scenario_requisition_palette_presence)
	{
		"empty palette",
		"full palette",
		"spartan palette",
		"elite palette"
	};
	STRING_LIST(scenario_requisition_palette_presence, scenario_requisition_palette_presence_strings, _countof(scenario_requisition_palette_presence_strings));

	#define SCENARIO_REQUISITION_TRIGGER_VOLUMES_BLOCK_ID { 0x124EB6B7, 0xA2D644B4, 0xB0A21EF6, 0xF4611612 }
	TAG_STRUCT(
		scenario_requisition_trigger_volumes_block,
		"scenario_requisition_trigger_volumes_block",
		"scenario_requisition_trigger_volumes_block",
		"s_scenario_requisition_trigger_volumes_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_REQUISITION_TRIGGER_VOLUMES_BLOCK_ID)
	{
		{ _field_short_block_index, "trigger volume", &scenario_trigger_volume_block_block },
		{ _field_word_flags, "flags", &scenario_requisition_trigger_volume_flags_definition },
		{ _field_terminator }
	};

	STRINGS(scenario_requisition_trigger_volume_flags_definition)
	{
		"defender can buy",
		"attacker can buy",
		"can buy weapons",
		"can buy equipment",
		"can buy vehicles",
		"can buy custom apps"
	};
	STRING_LIST(scenario_requisition_trigger_volume_flags_definition, scenario_requisition_trigger_volume_flags_definition_strings, _countof(scenario_requisition_trigger_volume_flags_definition_strings));

	#define SCENARIO_SAFE_ZONE_TRIGGER_VOLUMES_BLOCK_ID { 0x3B6FF7F7, 0xD6F1480D, 0x9AC3621D, 0xA0ED3BA2 }
	TAG_STRUCT(
		scenario_safe_zone_trigger_volumes_block,
		"scenario_safe_zone_trigger_volumes_block",
		"scenario_safe_zone_trigger_volumes_block",
		"s_scenario_safe_zone_trigger_volumes_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_SAFE_ZONE_TRIGGER_VOLUMES_BLOCK_ID)
	{
		{ _field_short_block_index, "trigger volume", &scenario_trigger_volume_block_block },
		{ _field_byte_flags, "flags", &kill_volume_flags },
		FIELD_PAD("pad", 1),
		{ _field_terminator }
	};

	#define SCENARIO_SCENERY_BLOCK_ID { 0x283E4BAF, 0xA4B4423, 0xAFFCC242, 0xC3BDCB2D }
	VERSIONED_TAG_STRUCT(
		scenario_scenery_block,
		"scenario_scenery_block",
		"scenario_scenery_block",
		"s_scenario_scenery_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_SCENERY_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 4, 8 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_scenery_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "scenery data", &scenario_scenery_datum_struct_v4 },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		
		{ _struct_version_mode_equal, 3, 7 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_scenery_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "scenery data", &scenario_scenery_datum_struct_v3 },
		
		{ _struct_version_mode_equal, 2, 7 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_scenery_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "scenery data", &scenario_scenery_datum_struct_v3 },
		
		{ _struct_version_mode_equal, 1, 7 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_scenery_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "scenery data", &scenario_scenery_datum_struct_v2 },
		
		{ _struct_version_mode_equal, 0, 15 },
		{ _field_short_block_index, "type", &scenario_scenery_palette_block_block, _field_id_type },
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_word_flags, "not placed", &object_location_placement_flags },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _tag_field_attributed_definition_position },
		{ _field_real_euler_angles_3d, "rotation", _tag_field_attributed_definition_orientation },
		FIELD_PAD("BX", 4),
		{ _field_long_block_index, "environment object reference", &dont_use_me_scenario_environment_object_block_block },
		FIELD_PAD("ATYNW", 16),
		FIELD_PAD("MYPARXQMK", 16),
		{ _field_word_flags, "Pathfinding flags", &scenery_pathfinding_flags_definition },
		{ _field_short_integer, "Pathfinding object index" },
		{ _field_long_integer, "Runtime scenery object" },
		{ _field_short_enum, "Pathfinding policy", &pathfinding_policy_enum },
		{ _field_short_enum, "Lightmapping policy", &old_scenery_lightmap_policy_enum },
		
		{ _field_terminator }
	};

	STRINGS(scenery_pathfinding_flags_definition)
	{
		"DEPRECATED0",
		"DEPRECATED1"
	};
	STRING_LIST(scenery_pathfinding_flags_definition, scenery_pathfinding_flags_definition_strings, _countof(scenery_pathfinding_flags_definition_strings));

	STRINGS(old_scenery_lightmap_policy_enum)
	{
		"dynamic",
		"per-object (not implemented)",
		"per-vertex",
		"per-pixel"
	};
	STRING_LIST(old_scenery_lightmap_policy_enum, old_scenery_lightmap_policy_enum_strings, _countof(old_scenery_lightmap_policy_enum_strings));

	#define SCENARIO_SCENERY_DATUM_STRUCT_V2_ID { 0xAB4FC18E, 0x1AD44FC3, 0xBDEB1E33, 0x68820F9E }
	TAG_STRUCT(
		scenario_scenery_datum_struct_v2,
		"scenario_scenery_datum_struct_v2",
		"scenario_scenery_datum_struct_v2",
		"s_scenario_scenery_datum_struct_v2",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_SCENERY_DATUM_STRUCT_V2_ID)
	{
		{ _field_word_flags, "Pathfinding flags", &scenery_pathfinding_flags_definition },
		{ _field_short_integer, "Pathfinding object index" },
		{ _field_long_block_index_custom_search, "Runtime scenery object", &_void },
		{ _field_short_enum, "Pathfinding policy", &pathfinding_policy_enum },
		{ _field_short_enum, "Lightmapping policy", &old_scenery_lightmap_policy_enum },
		{ _field_terminator }
	};

	#define SCENARIO_SCENERY_DATUM_STRUCT_V3_ID { 0xDA5A2636, 0xDC6748AF, 0xA2ED8B9E, 0x7B08F9C3 }
	TAG_STRUCT(
		scenario_scenery_datum_struct_v3,
		"scenario_scenery_datum_struct_v3",
		"scenario_scenery_datum_struct_v3",
		"s_scenario_scenery_datum_struct_v3",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_SCENERY_DATUM_STRUCT_V3_ID)
	{
		{ _field_word_flags, "Pathfinding flags", &scenery_pathfinding_flags_definition },
		{ _field_short_integer, "Pathfinding object index" },
		FIELD_PAD("RFJLON", 4),
		FIELD_CUSTOM("value", _tag_field_custom_type_unknown_pathfinding),
		{ _field_short_enum, "Pathfinding policy", &pathfinding_policy_enum },
		{ _field_short_enum, "Lightmapping policy", &scenery_lightmap_policy_enum },
		{ _field_terminator }
	};

	STRINGS(scenery_lightmap_policy_enum)
	{
		"Tag Default",
		"Dynamic",
		"Per-Vertex"
	};
	STRING_LIST(scenery_lightmap_policy_enum, scenery_lightmap_policy_enum_strings, _countof(scenery_lightmap_policy_enum_strings));

	#define SCENARIO_SCENERY_DATUM_STRUCT_V4_ID { 0xECD107BB, 0x32A143B7, 0x934D8DC0, 0xB606F2D }
	TAG_STRUCT(
		scenario_scenery_datum_struct_v4,
		"scenario_scenery_datum_struct_v4",
		"scenario_scenery_datum_struct_v4",
		"s_scenario_scenery_datum_struct_v4",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_SCENERY_DATUM_STRUCT_V4_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_unknown_pathfinding),
		{ _field_short_enum, "Pathfinding policy", &pathfinding_policy_enum },
		{ _field_short_enum, "Lightmapping policy", &scenery_lightmap_policy_enum },
		{ _field_block, "pathfinding references", &pathfinding_object_index_list_block_block },
		{ _field_short_integer, "havok mopp index" },
		{ _field_short_block_index, "ai spawning squad", &squads_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_SCENERY_PALETTE_BLOCK_ID { 0x1A68BAA7, 0xC1684595, 0xAE27EC8D, 0x238EFE5D }
	TAG_STRUCT(
		scenario_scenery_palette_block,
		"scenario_scenery_palette_block",
		"scenario_scenery_palette_block",
		"s_scenario_scenery_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_SCENERY_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &scenery_group_reference$4 },
		{ _field_terminator }
	};

	TAG_REFERENCE(scenery_group_reference$4, SCENERY_TAG);

	#define SCENARIO_SKY_REFERENCE_BLOCK_ID { 0x4C469778, 0xC1694C79, 0x977EC9A8, 0xBC46911A }
	TAG_STRUCT(
		scenario_sky_reference_block,
		"scenario_sky_reference_block",
		"scenario_sky_reference_block",
		"s_scenario_sky_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_SKY_REFERENCE_BLOCK_ID)
	{
		{ _field_tag_reference, "sky", &scenery_group_reference$2 },
		{ _field_real, "cloud scale", "mapping to the world unit" },
		{ _field_real, "cloud speed", "cloud movement speed" },
		{ _field_real, "cloud direction", "cloud movement direction, 0-360 degree" },
		{ _field_tag_reference, "cloud texture", "red channel is used", &bitmap_group_reference$2 },
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		FIELD_PAD("post-name-pad", 2),
		{ _field_long_block_flags, "active on bsps", &scenario_structure_bsp_reference_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(scenery_group_reference$2, SCENERY_TAG);

	#define SCENARIO_SOFT_CEILINGS_BLOCK_ID { 0xB256A9B1, 0x7994E39, 0x90B64DA5, 0x84259A58 }
	TAG_STRUCT(
		scenario_soft_ceilings_block,
		"scenario_soft_ceilings_block",
		"scenario_soft_ceilings_block",
		"s_scenario_soft_ceilings_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_SOFT_CEILINGS_BLOCK_ID)
	{
		{ _field_word_flags, "flags", &scenario_soft_ceiling_flags_definition },
		{ _field_word_flags, "runtime flags", &scenario_soft_ceiling_flags_definition },
		{ _field_string_id, "name" },
		{ _field_short_enum, "type", &soft_ceiling_type_enum },
		FIELD_PAD("my name is", 2),
		{ _field_terminator }
	};

	STRINGS(scenario_soft_ceiling_flags_definition)
	{
		"ignore bipeds",
		"ignore vehicles",
		"ignore camera",
		"ignore huge vehicles"
	};
	STRING_LIST(scenario_soft_ceiling_flags_definition, scenario_soft_ceiling_flags_definition_strings, _countof(scenario_soft_ceiling_flags_definition_strings));

	STRINGS(soft_ceiling_type_enum)
	{
		"acceleration",
		"soft kill",
		"slip surface"
	};
	STRING_LIST(soft_ceiling_type_enum, soft_ceiling_type_enum_strings, _countof(soft_ceiling_type_enum_strings));

	#define SCENARIO_SOUND_SCENERY_BLOCK_ID { 0x3AF565D6, 0x4364ABA, 0xABC4F95D, 0xACF0FE38 }
	VERSIONED_TAG_STRUCT(
		scenario_sound_scenery_block,
		"scenario_sound_scenery_block",
		"scenario_sound_scenery_block",
		"s_scenario_sound_scenery_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_SOUND_SCENERY_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 6 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_sound_scenery_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "sound_scenery", &sound_scenery_datum_struct },
		
		{ _struct_version_mode_equal, 1, 6 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_sound_scenery_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "sound_scenery", &sound_scenery_datum_struct },
		
		{ _struct_version_mode_equal, 0, 8 },
		{ _field_short_block_index, "type", &scenario_sound_scenery_palette_block_block, _field_id_type },
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_word_flags, "not placed", &object_location_placement_flags },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _tag_field_attributed_definition_position },
		{ _field_real_euler_angles_3d, "rotation", _tag_field_attributed_definition_orientation },
		FIELD_PAD("BX", 4),
		{ _field_long_block_index, "environment object reference", &dont_use_me_scenario_environment_object_block_block },
		
		{ _field_terminator }
	};

	#define SCENARIO_SOUND_SCENERY_PALETTE_BLOCK_ID { 0x26AD173B, 0xA3964E5A, 0x8CB3FCC2, 0x50965380 }
	TAG_STRUCT(
		scenario_sound_scenery_palette_block,
		"scenario_sound_scenery_palette_block",
		"scenario_sound_scenery_palette_block",
		"s_scenario_sound_scenery_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_SOUND_SCENERY_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &sound_scenery_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(sound_scenery_group_reference, SOUND_SCENERY_TAG);

	#define SCENARIO_SPAWN_DATA_BLOCK_ID { 0x802F5382, 0x9FDA439F, 0x845A38FB, 0xA6060A27 }
	TAG_STRUCT(
		scenario_spawn_data_block,
		"scenario_spawn_data_block",
		"scenario_spawn_data_block",
		"s_scenario_spawn_data_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_SPAWN_DATA_BLOCK_ID)
	{
		{ _field_real, "game object reset height" },
		{ _field_terminator }
	};

	#define SCENARIO_SPAWNER_BLOCK_ID { 0x5B9D1DC1, 0x4ABA461A, 0xB9DDBE7B, 0xC3B1C86A }
	TAG_STRUCT(
		scenario_spawner_block,
		"scenario_spawner_block",
		"scenario_spawner_block",
		"s_scenario_spawner_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_SPAWNER_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_spawner_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "Entity Data", &scenarioentitystruct },
		{ _field_struct, "Spawner Data", &scenariospawnerstruct },
		{ _field_terminator }
	};

	#define SCENARIO_SPAWNER_PALETTE_BLOCK_ID { 0xA5729622, 0xFDA148E8, 0xAF77D8D2, 0x33E63AFB }
	TAG_STRUCT(
		scenario_spawner_palette_block,
		"scenario_spawner_palette_block",
		"scenario_spawner_palette_block",
		"s_scenario_spawner_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_SPAWNER_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &spawner_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(spawner_group_reference, SPAWNER_TAG);

	#define SCENARIO_STRUCT_DEFINITION_ID { 0xEFAE882E, 0xDC94D1D, 0xA358CB6A, 0x34875D40 }
	TAG_STRUCT(
		scenario_struct_definition,
		"scenario_struct_definition",
		"scenario_struct_definition",
		"s_scenario_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "child scenarios", &scenario_child_references_block_block },
		FIELD_CUSTOM("link to scenario lightmap", _tag_field_custom_type_tool_command),
		{ _field_short_enum, "type", &scenario_type_enum },
		{ _field_word_flags, "flags", &scenario_flags },
		{ _field_long_flags, "runtime trigger volume flags", &scenario_runtime_trigger_volume_flags },
		{ _field_long_integer, "campaign id" },
		{ _field_long_integer, "map id" },
		{ _field_string_id, "map name", "Used to associate external resources with this map - e.g. PDA camera setting block names." },
		{ _field_tag_reference, "Scenario sound bank", "Scenario-specific sound bank.", &soundbank_group_reference },
		{ _field_tag_reference, "Scenario sound bank Number 2", "Another scenario-specific sound bank. All will be loaded.", &soundbank_group_reference },
		{ _field_tag_reference, "Scenario sound bank Number 3", "Another scenario-specific sound bank. All will be loaded.", &soundbank_group_reference },
		{ _field_tag_reference, "Scenario sound bank Number 4", "Another scenario-specific sound bank. All will be loaded.", &soundbank_group_reference },
		{ _field_string_id, "Inside reverb name", "This reverb will be used for inside areas when the listener is outside." },
		{ _field_long_integer, "Inside reverb hash ID" },
		{ _field_short_integer, "sound permutation mission id" },
		FIELD_PAD("pad", 2),
		{ _field_long_integer, "minimum structure bsp importer version" },
		{ _field_angle, "local north" },
		{ _field_real, "local sea level", "used to calculate aircraft altitude", "wu" },
		{ _field_real, "altitude cap", nullptr, "wu" },
		{ _field_real_point_3d, "sandbox origin point", "forge coordinates are relative to this point" },
		{ _field_real, "sandbox budget" },
		{ _field_string_id, "default vehicle set", "when vehicle set is \"map default,\" this vehicle set is used" },
		{ _field_tag_reference, "game performance throttles", MAKE_ALT_NAMES("performance thorttles"), &game_performance_throttle_group_reference$2 },
		{ _field_block, "structure bsps", &scenario_structure_bsp_reference_block_block },
		{ _field_block, "structure designs", &scenario_design_reference_block_block },
		{ _field_tag_reference, "structure seams", &structure_seams_group_reference },
		{ _field_tag_reference, "local structure seams", &structure_seams_group_reference },
		{ _field_block, "skies", &scenario_sky_reference_block_block },
		{ _field_block, "zone set pvs", &scenario_zone_set_pvs_block_block },
		{ _field_block, "zone set audibility", &game_audibility_block_block },
		{ _field_block, "zone sets", &scenario_zone_set_block_block },
		{ _field_block, "lighting zone sets", &scenario_lighting_zone_set_block_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "functions", &scenario_function_block_block },
		{ _field_data, "editor scenario data", &editor_scenario_data_definition },
		{ _field_block, "comments", &editor_comment_block_block },
		{ _field_block, "unused scenario environment objects", &dont_use_me_scenario_environment_object_block_block },
		{ _field_block, "object names", &scenario_object_names_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "scenery", &scenario_scenery_block_block },
		{ _field_block, "scenery palette", &scenario_scenery_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "bipeds", &scenario_biped_block_block },
		{ _field_block, "biped palette", &scenario_biped_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "vehicles", &scenario_vehicle_block_block },
		{ _field_block, "vehicle palette", &scenario_vehicle_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "equipment", &scenario_equipment_block_block },
		{ _field_block, "equipment palette", &scenario_equipment_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "weapons", &scenario_weapon_block_block },
		{ _field_block, "weapon palette", &scenario_weapon_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "device groups", &device_group_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "machines", &scenario_machine_block_block },
		{ _field_block, "machine palette", &scenario_machine_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "terminals", &scenario_terminal_block_block },
		{ _field_block, "terminal palette", &scenario_terminal_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "controls", &scenario_control_block_block },
		{ _field_block, "control palette", &scenario_control_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "dispensers", &scenariodispenserblock_block },
		{ _field_block, "dispenser palette", &scenariodispenserpaletteblock_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "sound scenery", &scenario_sound_scenery_block_block },
		{ _field_block, "sound scenery palette", &scenario_sound_scenery_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "giants", &scenario_giant_block_block },
		{ _field_block, "giant palette", &scenario_giant_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "effect scenery", &scenario_effect_scenery_block_block },
		{ _field_block, "effect scenery palette", &scenario_effect_scenery_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "spawners", &scenario_spawner_block_block },
		{ _field_block, "spawner palette", &scenario_spawner_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "bink palette", &binkpaletteblock_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "scenario attached effects", &scenarioattachedeffectsblock_block },
		{ _field_block, "scenario attached lens flares", &scenarioattachedlensflaresblock_block },
		{ _field_block, "scenario attached light cones", &scenarioattachedlightconesblock_block },
		{ _field_block, "map variant palettes", &map_variant_palette_block_block },
		{ _field_tag_reference, "multiplayer object types", &multiplayer_object_type_list_group_reference },
		{ _field_char_enum, "multiplayer map size", &multiplayer_map_size_enum },
		FIELD_PAD("mulmapsizepad", 3),
		{ _field_block, "Playtest req palette", "requisition for SvE, activated via an init.txt option for playtest balance", &scenario_requisition_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_real, "player requisition frequency", nullptr, "seconds" },
		{ _field_long_integer, "initial game currency", nullptr, "SpaceBucks" },
		{ _field_block, "soft ceilings", &scenario_soft_ceilings_block_block },
		{ _field_block, "player starting profile", &scenario_profiles_block_block },
		{ _field_block, "player starting locations", &scenario_players_block_block },
		{ _field_block, "trigger volumes", &scenario_trigger_volume_block_block },
		{ _field_block, "acoustic sectors", &scenario_acoustic_sector_block_block },
		{ _field_block, "acoustic transitions", &scenario_acoustic_transition_block_block },
		{ _field_block, "atmosphere dumplings", &scenario_atmosphere_dumpling_block_block },
		{ _field_block, "weather dumplings", &scenario_weather_dumpling_block_block },
		{ _field_block, "recorded animations", &recorded_animation_block_block },
		{ _field_block, "zone set switch trigger volumes", &scenario_zone_set_switch_trigger_volume_block_block },
		{ _field_block, "named location volumes", &scenario_named_location_volume_block_block },
		FIELD_EXPLANATION("SPAWN INFLUENCE OVERRIDES", "You can use the following to override multiplayer global spawn influencers for the scenario.  Default settings are defined in multiplayer/multiplayer_globals.multiplayer_globals."),
		{ _field_tag_reference, "Spawn Settings", &spawnsettings_group_reference },
		FIELD_EXPLANATION("RENDER FLUFF", "Pretty"),
		{ _field_block, "decals", &scenario_decals_block_block },
		{ _field_block, "decal palette", &scenario_decal_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_long_integer, "largest zoneset static decal memory size", "this is memory for the largest possible zoneset - default (0) is 2048", "kilobytes" },
		{ _field_data, "static decal memory data", &staticdecaldatadefinition },
		{ _field_real, "decal depth bias override (USE WITH CAUTION)", "you should not need to do this -- this is for a mission with strange collision geo" },
		{ _field_block, "detail object collection palette", &scenario_detail_object_collection_palette_block_block },
		{ _field_block, "style pallette", &style_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "squad groups", &squad_groups_block_block },
		{ _field_block, "squads", &squads_block_block },
		{ _field_block, "zones", &zone_block_block },
		{ _field_block, "squad patrols", &squad_patrol_block_block },
		{ _field_block, "actual cues", &ai_cue_block_block },
		{ _field_block, "full cues", MAKE_ALT_NAMES("cues"), &ai_full_cue_block_block },
		{ _field_block, "quick cues", &ai_quick_cue_block_block },
		{ _field_block, "mission scenes", &ai_scene_block_block },
		{ _field_block, "character palette", &character_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_tag_reference, "ai pathfinding data", &pathfinding_group_reference },
		{ _field_block, "ai user hint data", &user_hint_block_block },
		{ _field_block, "ai recording references", &ai_recording_reference_block_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "manual script file references", &hs_source_reference_block_block },
		{ _field_tag_reference, "compiled global scripts", &script_container_group_reference },
		{ _field_block, "scripting data", &cs_script_data_block_block },
		{ _field_block, "cutscene flags", &scenario_cutscene_flag_block_block },
		{ _field_block, "cutscene camera points", &scenario_cutscene_camera_point_block_block },
		{ _field_block, "cutscene titles", &scenario_cutscene_title_block_block },
		{ _field_tag_reference, "custom object names", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "chapter title text", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "scenario kill triggers", &scenario_kill_trigger_volumes_block_block },
		{ _field_block, "scenario safe zone triggers", &scenario_safe_zone_trigger_volumes_block_block },
		{ _field_block, "scenario trigger volumes mopp code", &trigger_volume_mopp_code_block_block },
		{ _field_block, "scenario requisition triggers", &scenario_requisition_trigger_volumes_block_block },
		{ _field_block, "scenario location name triggers", &scenario_location_name_trigger_volumes_block_block },
		{ _field_block, "scenario unsafe spawn trigger volumes", &scenariounsafespawnzonetriggervolumesblock_block },
		{ _field_short_block_index, "scenario ordnance bounds trigger volume", &scenario_trigger_volume_block_block },
		FIELD_PAD("ordnandy", 2),
		{ _field_block, "Orders", &orders_block_block },
		{ _field_block, "Triggers", &triggers_block_block },
		{ _field_block, "acoustics palette", MAKE_ALT_NAMES("background sound palette"), &scenario_acoustics_palette_block_definition_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "atmosphere", &scenario_atmosphere_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "camera fx palette", &scenario_camera_fx_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "weather palette", &scenario_weather_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "scenario cluster data", &scenario_cluster_data_block_block },
		{ _field_array, "object_salts", &object_salt_storage_array$2 },
		{ _field_block, "spawn data", &scenario_spawn_data_block_block },
		{ _field_tag_reference, "sound effect collection", &sound_effect_collection_group_reference },
		{ _field_block, "crates", &scenario_crate_block_block },
		{ _field_block, "crate palette", &scenario_crate_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "flock palette", &flock_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "flocks", &flock_instance_block_block },
		{ _field_tag_reference, "subtitles", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "soundSubtitles", &soundsubtitleblock_block },
		{ _field_block, "creatures", &scenario_creature_block_block },
		{ _field_block, "creature palette", &scenario_creature_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "big battle creature palette", &big_battle_creature_palette_block_block, _tag_field_attributed_definition_block_name_sorted },
		{ _field_block, "editor folders", &g_scenario_editor_folder_block_block },
		{ _field_tag_reference, "game engine strings", &multilingual_unicode_string_list_group_reference },
		FIELD_PAD("QVUC", 4),
		{ _field_block, "mission dialogue", &ai_scenario_mission_dialogue_block_block },
		{ _field_tag_reference, "voiceover", &main_menu_voiceover_group_reference },
		{ _field_tag_reference, "objectives", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "interpolators", &scenario_interpolator_group_reference },
		{ _field_block, "shared references", &hs_references_block_block },
		{ _field_tag_reference, "camera effects", &camera_fx_settings_group_reference },
		{ _field_tag_reference, "global screen effect", "ignores the falloff curves", &area_screen_effect_group_reference },
		{ _field_tag_reference, "global ssao", &ssao_definition_group_reference },
		{ _field_tag_reference, "atmosphere globals", "settings that apply to the entire scenario", &atmosphere_globals_group_reference },
		{ _field_tag_reference, "new lightmaps", &scenario_lightmap_group_reference },
		{ _field_tag_reference, "performance throttles", &performance_throttles_group_reference },
		{ _field_block, "ai objectives", &objectives_block_block },
		{ _field_block, "designer zones", &scenario_designer_zone_block_block },
		{ _field_block, "zone debugger", &scenario_zone_debugger_block_definition_block },
		{ _field_block, "decorators", &scenario_decorator_block_block },
		{ _field_block, "neuticle palette", &scenario_cheap_particle_system_palette_block_block },
		{ _field_block, "neuticles", &scenario_cheap_particle_systems_block_block },
		FIELD_EXPLANATION("Scriptable Light Rigs", nullptr),
		{ _field_block, "scriptable light rigs", &scriptablelightrigblock_block },
		{ _field_block, "cinematics", &scenario_cinematics_block_block },
		{ _field_block, "cinematic lighting palette", &scenario_cinematic_lighting_palette_block_block },
		{ _field_block, "override player representations", &player_representation_block_block },
		{ _field_block, "campaign metagame", &campaign_metagame_scenario_block_block },
		{ _field_block, "soft surfaces", &soft_surfaces_definition_block_block },
		{ _field_block, "cubemaps", &scenario_cubemap_block_block },
		{ _field_block, "airprobes", &scenario_airprobes_block_block },
		{ _field_block, "budget references", &scenario_budget_references_block_block },
		{ _field_block, "model references", &model_references_block_block },
		{ _field_block, "thespian", MAKE_ALT_NAMES("performances"), &scenario_performances_block_block },
		{ _field_block, "puppetShows", &puppetshowsblock_block },
		{ _field_tag_reference, "location name globals", &location_name_globals_definition_group_reference },
		FIELD_EXPLANATION("garbage collection", "specify zero for values that should use the data in the globals tag."),
		{ _field_block, "garbage collection", &garbage_collection_block_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_tag_reference, "hud screen reference", "appears for the player through the scenario", &cui_screen_group_reference },
		{ _field_tag_reference, "required resources", &scenario_required_resource_group_reference },
		{ _field_tag_reference, "variant globals", &variant_globals_group_reference },
		{ _field_tag_reference, "ordnance map bitmap", &bitmap_group_reference$2 },
		{ _field_real_fraction_bounds, "ordnance map depth bounds" },
		FIELD_EXPLANATION("Random ordnance", "Drops randomly selected set of ordnance at positions marked by drop_point objects."),
		{ _field_word_flags, "ordnance flags", &ordnance_flags },
		FIELD_PAD("SRO", 2),
		{ _field_tag_reference, "drop pod (scenery)", "if set, overrides that in progression globals", &scenery_group_reference$5 },
		{ _field_long_integer, "Ordnance drop count" },
		{ _field_long_integer, "Ordnance max active count", "zero means unlimited" },
		{ _field_real_bounds, "Time between random drops", nullptr, "seconds" },
		{ _field_string, "Initial drop name" },
		{ _field_real, "Initial drop delay", "from start of play til fanfare begins", "seconds" },
		{ _field_real, "Initial drop fanfare duration", nullptr, "seconds" },
		{ _field_string, "Normal drop name", nullptr, "blank string will match all sets" },
		{ _field_string, "Player drop name" },
		{ _field_real, "Nav marker visibility proximity", nullptr, "wu" },
		{ _field_real, "Nav marker premium visibility proximity", nullptr, "wu" },
		{ _field_block, "Drop sets", &scenariorandomordnancedropsetblock_block, _tag_field_attributed_definition_block_collapsed_field_default },
		FIELD_EXPLANATION("Ordnance personal", "Ordnance personal"),
		{ _field_tag_reference, "Scenario Ordnance List", &scenario_ordnance_list_group_reference },
		{ _field_block, "Unit Recordings", &scenariounitrecordingblock_block },
		{ _field_block, "Exit load screen", "for non-mainmenu, we always use the first one", &loadscreenreferenceblock_block },
		{ _field_terminator }
	};

	STRINGS(scenario_runtime_trigger_volume_flags)
	{
		"has hard safe volume!*",
		"has soft safe volume!*"
	};
	STRING_LIST(scenario_runtime_trigger_volume_flags, scenario_runtime_trigger_volume_flags_strings, _countof(scenario_runtime_trigger_volume_flags_strings));

	TAG_REFERENCE(game_performance_throttle_group_reference$2, GAME_PERFORMANCE_THROTTLE_TAG);

	TAG_REFERENCE(structure_seams_group_reference, STRUCTURE_SEAMS_TAG);

	STRINGS(multiplayer_map_size_enum)
	{
		"small",
		"medium",
		"large"
	};
	STRING_LIST(multiplayer_map_size_enum, multiplayer_map_size_enum_strings, _countof(multiplayer_map_size_enum_strings));

	TAG_REFERENCE(pathfinding_group_reference, PATHFINDING_TAG);

	TAG_REFERENCE(script_container_group_reference, SCRIPT_CONTAINER_TAG);

	TAG_REFERENCE(sound_effect_collection_group_reference, SOUND_EFFECT_COLLECTION_TAG);

	TAG_REFERENCE(main_menu_voiceover_group_reference, MAIN_MENU_VOICEOVER_TAG);

	TAG_REFERENCE(scenario_interpolator_group_reference, SCENARIO_INTERPOLATOR_TAG);

	TAG_REFERENCE(ssao_definition_group_reference, SSAO_DEFINITION_TAG);

	TAG_REFERENCE(atmosphere_globals_group_reference, ATMOSPHERE_GLOBALS_TAG);

	TAG_REFERENCE(scenario_lightmap_group_reference, SCENARIO_LIGHTMAP_TAG);

	TAG_REFERENCE(location_name_globals_definition_group_reference, LOCATION_NAME_GLOBALS_DEFINITION_TAG);

	TAG_REFERENCE(scenario_required_resource_group_reference, SCENARIO_REQUIRED_RESOURCE_TAG);

	TAG_REFERENCE(variant_globals_group_reference, VARIANT_GLOBALS_TAG);

	STRINGS(ordnance_flags)
	{
		"suppress incident fanfare ui"
	};
	STRING_LIST(ordnance_flags, ordnance_flags_strings, _countof(ordnance_flags_strings));

	TAG_REFERENCE(scenery_group_reference$5, SCENERY_TAG);

	#define SCENARIO_STRUCTURE_BSP_BLOCK_STRUCT_ID { 0x5043D2DD, 0xE3624E5A, 0xBB518106, 0x4E2109D4 }
	TAG_STRUCT(
		scenario_structure_bsp_block_struct,
		"scenario_structure_bsp_block_struct",
		"scenario_structure_bsp_block_struct",
		"s_scenario_structure_bsp_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_STRUCTURE_BSP_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "build identifier", &structure_manifest_build_identifier_struct },
		{ _field_struct, "parent build identifier", &structure_manifest_build_identifier_struct },
		{ _field_long_integer, "import info checksum" },
		{ _field_tag_reference, "structure lighting_info", &scenario_structure_lighting_info_group_reference },
		{ _field_long_integer, "import version" },
		{ _field_tag_reference, "structure meta data", &structure_meta_group_reference },
		{ _field_word_flags, "flags", &structure_bsp_flags_definition },
		{ _field_word_flags, "content policy flags", &structure_bsp_content_policy_flag },
		{ _field_word_flags, "failed content policy flags", &structure_bsp_content_policy_flag },
		FIELD_PAD("faild policy pad", 2),
		{ _field_block, "seam identifiers", &structure_seam_mapping_block_block },
		{ _field_block, "edge to seam edge", &structure_edge_to_seam_edge_mapping_block_block },
		{ _field_block, "collision materials", &structure_collision_materials_block_block },
		{ _field_block, "leaves", &structure_bsp_leaf_block_block },
		{ _field_block, "super aabbs", &structure_super_node_aabbs_block_block },
		{ _field_block, "super node parent mappings", &super_node_mappings_block_block },
		{ _field_block, "super node recursable_masks", &super_node_recursable_masks_block_block },
		{ _field_block, "structure_super_node_traversal_geometry_block", &structure_super_node_traversal_geometry_block_block },
		{ _field_struct, "instance kd hierarchy", &collision_kd_hierarchy_static_struct },
		{ _field_real_bounds, "world bounds x" },
		{ _field_real_bounds, "world bounds y" },
		{ _field_real_bounds, "world bounds z" },
		{ _field_block, "large structure surfaces", &structure_surface_block_block },
		{ _field_block, "structure surface to triangle mapping", &structure_surface_to_triangle_mapping_block_block },
		{ _field_block, "cluster portals", &structure_bsp_cluster_portal_block_block },
		{ _field_block, "detail objects", &structure_bsp_detail_object_data_block_block },
		{ _field_block, "clusters", &structure_bsp_cluster_block_block },
		{ _field_block, "materials", &global_geometry_material_block_block },
		{ _field_block, "emissive materials", &structure_material_lighting_info_block_block },
		{ _field_block, "sky owner cluster", &structure_bsp_sky_owner_cluster_block_block },
		{ _field_block, "conveyor surfaces", &structure_bsp_conveyor_surface_block_block },
		{ _field_block, "breakable surface sets", &breakable_surface_set_block_block },
		{ _field_block, "pathfinding data", &pathfinding_data_block_block },
		{ _field_block, "cookie cutters", &structure_cookie_cutter_definition_block },
		{ _field_block, "acoustics palette", &scenario_acoustics_palette_block_definition_block },
		{ _field_data, "sound PAS data", &structure_bsp_cluster_encoded_sound_data },
		{ _field_block, "markers", &structure_bsp_marker_block_block },
		{ _field_block, "marker light palette", &structure_bsp_marker_light_palette_block },
		{ _field_block, "marker light palette index", &structure_bsp_marker_light_index_block },
		{ _field_block, "runtime decals", &structure_bsp_runtime_decal_block_block },
		{ _field_block, "(DEPRECATED) environment object palette", &structure_bsp_environment_object_palette_block_block },
		{ _field_block, "(DEPRECATED) environment objects", &structure_bsp_environment_object_block_block },
		FIELD_PAD("IMISWXUG", 4),
		{ _field_block, "leaf map leaves", &global_map_leaf_block_block },
		{ _field_block, "leaf map connections", &global_leaf_connection_block_block },
		{ _field_block, "errors", &global_error_report_categories_block_block },
		{ _field_block, "cluster to instance group mopps", &mopp_code_definition_block_block },
		{ _field_block, "instance group to instance mopps", &mopp_code_definition_block_block },
		{ _field_block, "cluster to instance group spheres", &structure_instance_cluster_definition_block },
		{ _field_block, "instance group to instance spheres", &structure_instance_group_definition_block },
		{ _field_block, "instanced geometry instances", &structure_bsp_instanced_geometry_instances_block_block },
		{ _field_block, "instanced geometry instance names", &structure_bsp_instanced_geometry_instances_names_block_block },
		{ _field_tag_reference, "instance imposters", &instance_imposter_definition_group_reference },
		{ _field_block, "instance imposter infos", &structure_instance_imposter_info_block_block },
		{ _field_long_integer, "Instance Geometry Tag Instance Count" },
		FIELD_GROUP_BEGIN("decorator info"),
		{ _field_block, "decorator sets", &runtime_decorator_set_block_block },
		{ _field_struct, "decorator instance buffer", &global_render_geometry_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("decals info"),
		{ _field_block, "preplaced decal sets", &bsp_preplaced_decal_set_reference_block_block },
		{ _field_block, "preplaced decals", &bsp_preplaced_decal_reference_block_block },
		{ _field_struct, "preplaced decal geometry", &global_render_geometry_struct },
		FIELD_GROUP_END(),
		{ _field_block, "acoustics sound clusters", &structure_bsp_sound_cluster_block_block },
		{ _field_block, "transparent planes", &transparent_planes_block_block },
		{ _field_block, "debug info", &structure_bsp_debug_info_block_block },
		{ _field_struct, "structure_physics", &global_structure_physics_struct }, // structure_version:1
		{ _field_struct, "render geometry", &global_render_geometry_struct },
		{ _field_block, "widget references", &widget_reference_block_block },
		{ _field_block, "cheap light references", &cheap_light_reference_block_block },
		{ _field_struct, "resource interface", &structure_bsp_resource_interface },
		FIELD_GROUP_BEGIN("Any Platform Temporary Storage"),
		{ _field_block, "Any Platform Temp Havok Data", &structureiohavokdatablock_block },
		FIELD_GROUP_END(),
		{ _field_block, "external references", &structure_external_instanced_geometry_references_block_block },
		{ _field_tag_reference, "dependencies", &dependency_group_reference },
		{ _field_long_integer, "base material count" },
		{ _field_block, "obb volume list", &structure_bsp_obb_volume_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		{ _field_block, "pupAnimations", &animgraphdependencyblock_block },
		{ _field_terminator }
	};

	STRINGS(structure_bsp_flags_definition)
	{
		"has instance groups",
		"surface to triangle mapping remapped*",
		"external references converted to io",
		"structure mopp needs rebuilt",
		"structure prefab materials need postprocessing",
		"serialized havok data converted to target platform"
	};
	STRING_LIST(structure_bsp_flags_definition, structure_bsp_flags_definition_strings, _countof(structure_bsp_flags_definition_strings));

	STRINGS(structure_bsp_content_policy_flag)
	{
		"has working pathfinding",
		"convex decomposition enabled"
	};
	STRING_LIST(structure_bsp_content_policy_flag, structure_bsp_content_policy_flag_strings, _countof(structure_bsp_content_policy_flag_strings));

	TAG_REFERENCE(instance_imposter_definition_group_reference, INSTANCE_IMPOSTER_DEFINITION_TAG);

	TAG_REFERENCE(dependency_group_reference, DEPENDENCY_TAG);

	#define SCENARIO_STRUCTURE_BSP_REFERENCE_BLOCK_STRUCT_ID { 0xE6CC8C8B, 0x3B6B4E10, 0x897CB89E, 0x1FA22862 }
	TAG_STRUCT(
		scenario_structure_bsp_reference_block_struct,
		"scenario_structure_bsp_reference_block_struct",
		"scenario_structure_bsp_reference_block_struct",
		"s_scenario_structure_bsp_reference_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_STRUCTURE_BSP_REFERENCE_BLOCK_STRUCT_ID)
	{
		{ _field_tag_reference, "structure bsp", &scenario_structure_bsp_group_reference },
		{ _field_tag_reference, "local structure bsp", &scenario_structure_bsp_group_reference },
		{ _field_tag_reference, "structure metadata", &structure_meta_group_reference },
		FIELD_EXPLANATION("Size Class", "Tells lightmapper desired res for structure bitmaps.\nNumbers in parens are final sizes after compression"),
		{ _field_long_enum, "size class", &scenario_structure_size_enum },
		{ _field_long_enum, "refinement size class", &scenario_structure_refinement_size_enum },
		{ _field_real, "hacky ambient min luminance" },
		{ _field_real, "direct/draft ambient min luminance" },
		{ _field_real, "structure vertex sink", "this is the most that we can sink a soft surface link snow in the structure_bsp via vertex painting." },
		{ _field_word_flags, "flags", &scenario_structure_bsp_reference_flags_definition },
		{ _field_short_block_index, "default sky", &scenario_sky_reference_block_block },
		{ _field_tag_reference, "bsp specific cubemap", &bitmap_group_reference$13 },
		{ _field_tag_reference, "wind", &wind_group_reference },
		{ _field_tag_reference, "authored light probe", &authored_light_probe_group_reference },
		{ _field_tag_reference, "vehicle authored light probe", &authored_light_probe_group_reference },
		{ _field_real, "max shadow count scale", "scale up or down the max number of shadows as set in the throttle tag per bsp" },
		{ _field_real, "decorator sunlight minimum", "0.0 means allow fully dark in the shadows, higher values will brighten up the shadowed decorators", nullptr, "[0.0 to 1.0]" },
		FIELD_GROUP_BEGIN("volumetric light shafts"),
		{ _field_struct, "volumetric light shaft settings", &scenariovolumetriclightshaftsettingsstruct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("floating shadows"),
		{ _field_struct, "floating shadow settings", &scenariofloatingshadowsettingsstruct },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Clones", "Describes which other bsps are physical \'clones\' of this bsp\nThis is used to determine how to attach \'position-only\' elements, like decorators, to the bsps:\nEach clone gets a separate copy of decorators that are in both.\nNon-cloned bsps cannot split decorators this way - the decorator will be given to the lowest numbered bsp\n"),
		{ _field_long_block_flags, "cloned bsp flags", &scenario_structure_bsp_reference_block_block },
		{ _field_struct, "lightmap setting", MAKE_ALT_NAMES("lightmap resolution buckets"), &scenario_lightmap_setting_struct },
		{ _field_real, "custom gravity scale", "0==nogravity, 1==full, set the custom gravity scale flag to make this parameter active" },
		{ _field_terminator }
	};

	STRINGS(scenario_structure_refinement_size_enum)
	{
		" 4.0 Meg (Default)",
		" 1.0 Meg",
		" 2.0 Meg",
		" 6.0 Meg"
	};
	STRING_LIST(scenario_structure_refinement_size_enum, scenario_structure_refinement_size_enum_strings, _countof(scenario_structure_refinement_size_enum_strings));

	STRINGS(scenario_structure_bsp_reference_flags_definition)
	{
		"default sky enabled!",
		"per vertex only lightmap",
		"never lightmap",
		"generate fake small lightmaps",
		"ray trace adjacent bsps on sky hits",
		"lightmaps use conservative subcharts",
		"lightmaps reduce stretch hack",
		"lightmaps use extended gathering (very slow)",
		"lightmaps final gather ignores backfacing hits",
		"not a normally playable space in an MP map (check this on shared BSPs)",
		"shared bsp",
		"dont use extra lighting bsps for cubemaps",
		"custom gravity scale",
		"disable streaming subregions",
		"do not desaturate decorators",
		"make all shadows blob"
	};
	STRING_LIST(scenario_structure_bsp_reference_flags_definition, scenario_structure_bsp_reference_flags_definition_strings, _countof(scenario_structure_bsp_reference_flags_definition_strings));

	TAG_REFERENCE(bitmap_group_reference$13, BITMAP_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR | TAG_REFERENCE_FLAG_NOT_A_RESOURCE_DEPENDENCY);

	TAG_REFERENCE(authored_light_probe_group_reference, AUTHORED_LIGHT_PROBE_TAG);

	#define SCENARIO_STRUCTURE_LIGHTING_INFO_STRUCT_DEFINITION_ID { 0xF6DF366B, 0xD04D4A01, 0xA4C203FB, 0xA459CB2F }
	TAG_STRUCT(
		scenario_structure_lighting_info_struct_definition,
		"scenario_structure_lighting_info_struct_definition",
		"scenario_structure_lighting_info_struct_definition",
		"s_scenario_structure_lighting_info_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_STRUCTURE_LIGHTING_INFO_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "import info checksum" },
		{ _field_block, "generic light definitions", &structure_lighting_generic_light_definition_block_block },
		{ _field_block, "generic light instances", &structure_lighting_generic_light_instance_block_block },
		{ _field_block, "screen space light shader override", &screen_space_light_shader_override_block_block },
		{ _field_block, "cinematic light instances", &structurelightingcinematiclightinstanceblock_block, _tag_field_attributed_definition_block_collapsed_field_default },
		{ _field_struct, "Sun Intensity Multiplier", &light_scalar_function_struct },
		{ _field_terminator }
	};

	#define SCENARIO_TERMINAL_BLOCK_ID { 0x9BE62BD0, 0xCD8E4FD7, 0xABCBDF23, 0x3BE7133D }
	TAG_STRUCT(
		scenario_terminal_block,
		"scenario_terminal_block",
		"scenario_terminal_block",
		"s_scenario_terminal_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_TERMINAL_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_terminal_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "device data", &scenario_device_struct },
		{ _field_struct, "terminal data", &scenario_terminal_struct },
		{ _field_terminator }
	};

	#define SCENARIO_TERMINAL_PALETTE_BLOCK_ID { 0x1001DE4F, 0xE9CB4A21, 0x95F9A6C4, 0x1FD3B4DF }
	TAG_STRUCT(
		scenario_terminal_palette_block,
		"scenario_terminal_palette_block",
		"scenario_terminal_palette_block",
		"s_scenario_terminal_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_TERMINAL_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &device_terminal_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(device_terminal_group_reference, DEVICE_TERMINAL_TAG);

	#define SCENARIO_TERMINAL_STRUCT_ID { 0x167BF1D1, 0x8FF44C03, 0xB1C1085B, 0xF16DB71F }
	TAG_STRUCT(
		scenario_terminal_struct,
		"scenario_terminal_struct",
		"scenario_terminal_struct",
		"s_scenario_terminal_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_TERMINAL_STRUCT_ID)
	{
		{ _field_long_integer, "pah pah" },
		{ _field_terminator }
	};

	#define SCENARIO_TRIGGER_VOLUME_PARAMETER_STORAGE_ARRAY_STRUCT_DEFINITION_ID { 0x55E975C1, 0x95424C90, 0x98F28CEB, 0x8A8FB472 }
	TAG_STRUCT(
		scenario_trigger_volume_parameter_storage_array_struct_definition,
		"scenario_trigger_volume_parameter_storage_array",
		"scenario_trigger_volume_parameter_storage_array",
		"s_scenario_trigger_volume_parameter_storage_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_TRIGGER_VOLUME_PARAMETER_STORAGE_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "parameter" },
		{ _field_terminator }
	};

	#define SCENARIO_TRIGGER_VOLUME_STRUCT_ID { 0xBF59DB68, 0x5A9439E, 0x811C3B2F, 0xADE31F09 }
	VERSIONED_TAG_STRUCT(
		scenario_trigger_volume_struct,
		"scenario_trigger_volume_struct",
		"scenario_trigger_volume_struct",
		"s_scenario_trigger_volume_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_TRIGGER_VOLUME_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 25 },
		FIELD_EXPLANATION("naming", "the name of the trigger volume specifies what kind of volume it is:\n\'zone_set:\'\n\'begin_zone_set:\'\n\'kill\' (plus \'_soft\' for soft kill volume)\n\'playerkill\' (plus \'_soft\' for soft kill volume) for player only kill volume \n\'safe_zone\' (plus \'_soft\' for soft kill volume)\n\'location_\'\n\'ordnance_bounds\'\n\'unsafe_spawn\'\nappend \':*\' to zone set names to allow vehicles to teleport along with their players."),
		{ _field_string_id, "name" },
		{ _field_short_block_index, "object name", &scenario_object_names_block_block },
		{ _field_short_integer, "runtime node index" },
		{ _field_string_id, "node name" },
		{ _field_short_enum, "type", &trigger_volume_type_enum },
		FIELD_PAD("padding", 2),
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "up" },
		{ _field_real_point_3d, "position" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_real_point_3d, "extents" },
		{ _field_real, "z sink", "this is only valid for sector type trigger volumes" },
		{ _field_block, "sector points", &trigger_volume_point_block_block },
		{ _field_block, "runtime triangles", &trigger_volume_runtime_triangles_block_block },
		{ _field_real, "runtime sector bounds x0" },
		{ _field_real, "runtime sector bounds x1" },
		{ _field_real, "runtime sector bounds y0" },
		{ _field_real, "runtime sector bounds y1" },
		{ _field_real, "runtime sector bounds z0" },
		{ _field_real, "runtime sector bounds z1" },
		{ _field_real, "C" },
		{ _field_short_block_index, "kill trigger volume", &scenario_kill_trigger_volumes_block_block },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		
		{ _struct_version_mode_equal, 1, 11 },
		{ _field_string_id, "name" },
		{ _field_short_block_index, "object name", &scenario_object_names_block_block },
		{ _field_short_integer, "runtime node index" },
		{ _field_string_id, "node name" },
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "up" },
		{ _field_real_point_3d, "position" },
		{ _field_real_point_3d, "extents" },
		{ _field_real, "C" },
		{ _field_short_block_index, "kill trigger volume", &scenario_kill_trigger_volumes_block_block },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_short_integer, "value" },
		FIELD_PAD("GUK", 2),
		{ _field_string, "name" },
		{ _field_array, "parameters", &scenario_trigger_volume_parameter_storage_array$2 },
		FIELD_PAD("HNQSQI", 4),
		
		{ _field_terminator }
	};

	STRINGS(trigger_volume_type_enum)
	{
		"bounding box",
		"sector"
	};
	STRING_LIST(trigger_volume_type_enum, trigger_volume_type_enum_strings, _countof(trigger_volume_type_enum_strings));

	#define SCENARIO_UNIT_STRUCT_ID { 0xF7C25813, 0x7E524E9D, 0x89F06521, 0x97EDBB16 }
	TAG_STRUCT(
		scenario_unit_struct,
		"scenario_unit_struct",
		"scenario_unit_struct",
		"s_scenario_unit_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_UNIT_STRUCT_ID)
	{
		{ _field_real, "body vitality", nullptr, nullptr, "[0,1]" },
		{ _field_long_flags, "flags", &scenario_unit_datum_flags },
		{ _field_terminator }
	};

	#define SCENARIO_VEHICLE_BLOCK_ID { 0x756D14F1, 0xDEF4497E, 0xA140AC68, 0xC9C52931 }
	VERSIONED_TAG_STRUCT(
		scenario_vehicle_block,
		"scenario_vehicle_block",
		"scenario_vehicle_block",
		"s_scenario_vehicle_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_VEHICLE_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 9 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_vehicle_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "unit data", &scenario_unit_struct },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		{ _field_struct, "vehicle data", &scenario_vehicle_datum_struct },
		
		{ _struct_version_mode_equal, 1, 9 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_vehicle_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "unit data", &scenario_unit_struct },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		{ _field_struct, "vehicle data", &scenario_vehicle_datum_struct },
		
		{ _struct_version_mode_equal, 0, 12 },
		{ _field_short_block_index, "type", &scenario_vehicle_palette_block_block, _field_id_type },
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_word_flags, "not placed", &object_location_placement_flags },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _tag_field_attributed_definition_position },
		{ _field_real_euler_angles_3d, "rotation", _tag_field_attributed_definition_orientation },
		FIELD_PAD("BX", 4),
		{ _field_long_block_index, "environment object reference", &dont_use_me_scenario_environment_object_block_block },
		FIELD_PAD("ATYNW", 16),
		FIELD_PAD("MYPARXQMK", 16),
		{ _field_struct, "unit data", &old_scenario_unit_struct },
		FIELD_PAD("SMYD", 32),
		
		{ _field_terminator }
	};

	#define SCENARIO_VEHICLE_DATUM_STRUCT_ID { 0x252FB584, 0x7A834CE5, 0xA99C3145, 0x49D3CD60 }
	TAG_STRUCT(
		scenario_vehicle_datum_struct,
		"scenario_vehicle_datum_struct",
		"scenario_vehicle_datum_struct",
		"s_scenario_vehicle_datum_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_VEHICLE_DATUM_STRUCT_ID)
	{
		{ _field_short_enum, "Pathfinding policy", &pathfinding_policy_enum },
		FIELD_PAD("post-pathfinding", 2),
		{ _field_block, "pathfinding references", &pathfinding_object_index_list_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_VEHICLE_PALETTE_BLOCK_ID { 0x666689FB, 0x9FE8484B, 0xAAAC920E, 0x44ED0845 }
	TAG_STRUCT(
		scenario_vehicle_palette_block,
		"scenario_vehicle_palette_block",
		"scenario_vehicle_palette_block",
		"s_scenario_vehicle_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_VEHICLE_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &vehicle_group_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(vehicle_group_reference$2, VEHICLE_TAG);

	#define SCENARIO_WEAPON_BLOCK_ID { 0x687A60CA, 0x9BB94DE2, 0xB92F066B, 0x24108BC6 }
	VERSIONED_TAG_STRUCT(
		scenario_weapon_block,
		"scenario_weapon_block",
		"scenario_weapon_block",
		"s_scenario_weapon_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_WEAPON_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 8 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_weapon_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "weapon data", &scenario_weapon_datum_struct },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		
		{ _struct_version_mode_equal, 1, 8 },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "type", &scenario_weapon_palette_block_block, _field_id_type },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_struct, "object data", &scenario_object_datum_struct }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct },
		{ _field_struct, "weapon data", &scenario_weapon_datum_struct },
		{ _field_struct, "multiplayer data", &scenario_multiplayer_object_struct },
		
		{ _struct_version_mode_equal, 0, 15 },
		{ _field_short_block_index, "type", &scenario_weapon_palette_block_block, _field_id_type },
		{ _field_short_block_index, "name", &scenario_object_names_block_block, _field_id_name },
		{ _field_word_flags, "not placed", &object_location_placement_flags },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _tag_field_attributed_definition_position },
		{ _field_real_euler_angles_3d, "rotation", _tag_field_attributed_definition_orientation },
		FIELD_PAD("BX", 4),
		{ _field_long_block_index, "environment object reference", &dont_use_me_scenario_environment_object_block_block },
		FIELD_PAD("ATYNW", 16),
		FIELD_PAD("MYPARXQMK", 16),
		{ _field_short_integer, "rounds left" },
		{ _field_short_integer, "rounds loaded" },
		{ _field_word_flags, "flags", &scenario_weapon_datum_flags },
		FIELD_PAD("VKVCBOLK", 2),
		FIELD_PAD("QEKXV", 12),
		
		{ _field_terminator }
	};

	STRINGS(scenario_weapon_datum_flags)
	{
		"initially at rest (doesn\'t fall)",
		"obsolete",
		"does accelerate (moves due to explosions)"
	};
	STRING_LIST(scenario_weapon_datum_flags, scenario_weapon_datum_flags_strings, _countof(scenario_weapon_datum_flags_strings));

	#define SCENARIO_WEAPON_DATUM_STRUCT_ID { 0x95BC43BA, 0xC6EF42C5, 0x95BA7855, 0x50A05B6F }
	TAG_STRUCT(
		scenario_weapon_datum_struct,
		"scenario_weapon_datum_struct",
		"scenario_weapon_datum_struct",
		"s_scenario_weapon_datum_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_WEAPON_DATUM_STRUCT_ID)
	{
		{ _field_short_integer, "rounds left" },
		{ _field_short_integer, "rounds loaded" },
		{ _field_long_flags, "flags", &scenario_weapon_datum_flags },
		{ _field_terminator }
	};

	#define SCENARIO_WEAPON_PALETTE_BLOCK_ID { 0xB129233A, 0xC7914741, 0x9513A80A, 0x3B9C12D1 }
	TAG_STRUCT(
		scenario_weapon_palette_block,
		"scenario_weapon_palette_block",
		"scenario_weapon_palette_block",
		"s_scenario_weapon_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_WEAPON_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "name", &weapon_group_reference$8 },
		{ _field_terminator }
	};

	TAG_REFERENCE(weapon_group_reference$8, WEAPON_TAG);

	#define SCENARIO_WEATHER_DUMPLING_BLOCK_ID { 0x349A4BED, 0x672F4C73, 0xBF2F2635, 0x93364AFB }
	TAG_STRUCT(
		scenario_weather_dumpling_block,
		"scenario_weather_dumpling_block",
		"scenario_weather_dumpling_block",
		"s_scenario_weather_dumpling_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_WEATHER_DUMPLING_BLOCK_ID)
	{
		{ _field_struct, "dumpling", &scenario_dumpling_struct },
		{ _field_short_block_index, "weather", &scenario_weather_palette_block_block },
		FIELD_PAD("pad", 2),
		{ _field_terminator }
	};

	#define SCENARIO_WEATHER_PALETTE_BLOCK_ID { 0x9D9FC817, 0x83D54FF3, 0xA4331AEF, 0xD988677F }
	TAG_STRUCT(
		scenario_weather_palette_block,
		"scenario_weather_palette_block",
		"scenario_weather_palette_block",
		"s_scenario_weather_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_WEATHER_PALETTE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_tag_reference, "rain", &rain_definition_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(rain_definition_group_reference, RAIN_DEFINITION_TAG);

	#define SCENARIO_WETNESS_BSP_DATA_STRUCT_DEFINITION_ID { 0xC4FBE9A5, 0x725F4AAB, 0xADC5FCB1, 0x1319CF80 }
	TAG_STRUCT(
		scenario_wetness_bsp_data_struct_definition,
		"scenario_wetness_bsp_data_struct_definition",
		"scenario_wetness_bsp_data_struct_definition",
		"s_scenario_wetness_bsp_data_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_WETNESS_BSP_DATA_STRUCT_DEFINITION_ID)
	{
		{ _field_short_integer, "bsp reference index" },
		FIELD_PAD("LHWCHFX", 2),
		{ _field_long_integer, "structure BSP import checksum" },
		{ _field_long_integer, "lightmap BSP import checksum" },
		{ _field_long_integer, "design BSP checksum" },
		{ _field_long_integer, "air_probe offset" },
		{ _field_long_integer, "senary_probe offset" },
		{ _field_long_integer, "machinery_offset" },
		{ _field_tag_reference, "wetness pervertrex texture reference", &bitmap_group_reference$4 },
		{ _field_block, "wetness", &wentness_bit_vector_block },
		{ _field_block, "wetness in bytes", &wentness_byte_vector_block },
		{ _field_block, "cluster_offset", &cluster_wetness_offset_block_block },
		{ _field_block, "instance_offset", &instance_wetness_instance_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_ZONE_DEBUGGER_BLOCK_DEFINITION_STRUCT_ID { 0x3736B0FB, 0x4E6A462A, 0xA642E58A, 0x35673446 }
	TAG_STRUCT(
		scenario_zone_debugger_block_definition_struct,
		"scenario_zone_debugger_block_definition_struct",
		"scenario_zone_debugger_block_definition_struct",
		"s_scenario_zone_debugger_block_definition_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ZONE_DEBUGGER_BLOCK_DEFINITION_STRUCT_ID)
	{
		{ _field_long_block_flags, "active designer zones", &scenario_designer_zone_block_block, _field_id_block_flags_32bit },
		{ _field_terminator }
	};

	#define SCENARIO_ZONE_SET_BLOCK_ID { 0x49565D10, 0xEFBE4EE6, 0xB18E7C6D, 0x68053DDB }
	TAG_STRUCT(
		scenario_zone_set_block,
		"scenario_zone_set_block",
		"scenario_zone_set_block",
		"s_scenario_zone_set_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ZONE_SET_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_string, "name string" },
		{ _field_long_block_index, "pvs index", &scenario_zone_set_pvs_block_block },
		{ _field_long_flags, "flags", &scenario_zone_set_flags_definition },
		{ _field_long_block_flags, "bsp zone flags", &scenario_structure_bsp_reference_block_block },
		{ _field_long_block_flags, "structure design zone flags", &scenario_design_reference_block_block },
		{ _field_long_block_flags, "runtime bsp zone flags", &scenario_structure_bsp_reference_block_block },
		{ _field_long_block_flags, "sruntime tructure design zone flags", &scenario_design_reference_block_block },
		{ _field_long_block_flags, "required designer zones", MAKE_ALT_NAMES("designer zone flags"), &scenario_designer_zone_block_block, _field_id_block_flags_32bit },
		{ _field_qword_integer, "runtime designer zone flags" },
		{ _field_long_block_flags, "cinematic zones", &scenario_cinematics_block_block },
		{ _field_long_block_index, "hint previous zone set", &scenario_zone_set_block_block },
		{ _field_long_block_index, "audibility index", &game_audibility_block_block },
		{ _field_block, "planar fog visibility", &planar_fog_zone_set_visibility_definition_block_block },
		{ _field_block, "budget overrides", &scenario_zone_set_budget_override_block_block },
		{ _field_tag_reference, "streaming_reference_tag", &streamingzoneset_group_reference },
		{ _field_real_point_3d, "world bounds min", "Physics world will include this min point" },
		{ _field_real_point_3d, "world bounds max", "Physics world will include this max point" },
		{ _field_block, "lipsync sounds", &scenario_zone_set_lipsync_block_block },
		{ _field_tag_reference, "cinematic soundbank", "only for cinematics. If you try to use this for anything else without talking to me, i will stab you in the face", &soundbank_group_reference },
		{ _field_real_rgb_color, "sky clear color", "linear color, must check override flag above to use" },
		FIELD_PAD("pad4", 4),
		{ _field_terminator }
	};

	TAG_REFERENCE(streamingzoneset_group_reference, STREAMINGZONESET_TAG);

	#define SCENARIO_ZONE_SET_BSP_BITS_BLOCK_ID { 0x10A94FBA, 0xA71E43CE, 0x8AC7E6E6, 0x78196CDB }
	TAG_STRUCT(
		scenario_zone_set_bsp_bits_block,
		"scenario_zone_set_bsp_bits_block",
		"scenario_zone_set_bsp_bits_block",
		"s_scenario_zone_set_bsp_bits_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ZONE_SET_BSP_BITS_BLOCK_ID)
	{
		{ _field_block, "bits", &scenario_zone_set_cluster_pvs_bit_vector_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_ZONE_SET_BSP_CHECKSUM_BLOCK_ID { 0xA095C3A1, 0x36A34F37, 0xBC4C3E01, 0x17E4A7C7 }
	TAG_STRUCT(
		scenario_zone_set_bsp_checksum_block,
		"scenario_zone_set_bsp_checksum_block",
		"scenario_zone_set_bsp_checksum_block",
		"s_scenario_zone_set_bsp_checksum_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ZONE_SET_BSP_CHECKSUM_BLOCK_ID)
	{
		{ _field_dword_integer, "bsp checksum" },
		{ _field_terminator }
	};

	#define SCENARIO_ZONE_SET_BSP_PVS_BLOCK_ID { 0xFF83875C, 0xA9F04229, 0xA769E3B0, 0xE36AB1A8 }
	TAG_STRUCT(
		scenario_zone_set_bsp_pvs_block,
		"scenario_zone_set_bsp_pvs_block",
		"scenario_zone_set_bsp_pvs_block",
		"s_scenario_zone_set_bsp_pvs_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ZONE_SET_BSP_PVS_BLOCK_ID)
	{
		{ _field_block, "cluster pvs", &scenario_zone_set_cluster_pvs_block_block },
		{ _field_block, "cluster pvs doors closed", &scenario_zone_set_cluster_pvs_block_block },
		{ _field_block, "bsp cluster mapings", &scenario_zone_set_bsp_seam_cluster_mappings_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_ZONE_SET_BSP_SEAM_CLUSTER_MAPPINGS_BLOCK_ID { 0xABA3875C, 0xA9F0C2A9, 0xA7A453B0, 0xA31AB1A8 }
	TAG_STRUCT(
		scenario_zone_set_bsp_seam_cluster_mappings_block,
		"scenario_zone_set_bsp_seam_cluster_mappings_block",
		"scenario_zone_set_bsp_seam_cluster_mappings_block",
		"s_scenario_zone_set_bsp_seam_cluster_mappings_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ZONE_SET_BSP_SEAM_CLUSTER_MAPPINGS_BLOCK_ID)
	{
		{ _field_block, "root clusters", &scenario_zone_set_cluster_reference_block_block },
		{ _field_block, "attached clusters", &scenario_zone_set_cluster_reference_block_block },
		{ _field_block, "connected clusters", &scenario_zone_set_cluster_reference_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_ZONE_SET_BUDGET_OVERRIDE_BLOCK_ID { 0x38751F2, 0xE0C846D1, 0x8F567F0E, 0x966DF8D }
	TAG_STRUCT(
		scenario_zone_set_budget_override_block,
		"scenario_zone_set_budget_override_block",
		"scenario_zone_set_budget_override_block",
		"s_scenario_zone_set_budget_override_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ZONE_SET_BUDGET_OVERRIDE_BLOCK_ID)
	{
		{ _field_long_integer, "env bitmap", nullptr, "megs" },
		{ _field_long_integer, "env object bitmap", nullptr, "megs" },
		{ _field_long_integer, "env geometry", nullptr, "megs" },
		{ _field_long_integer, "env object geometry", nullptr, "megs" },
		{ _field_terminator }
	};

	#define SCENARIO_ZONE_SET_CLUSTER_PVS_BIT_VECTOR_BLOCK_ID { 0x91455EA9, 0x29C14710, 0x9953A70B, 0x26677B16 }
	TAG_STRUCT(
		scenario_zone_set_cluster_pvs_bit_vector_block,
		"scenario_zone_set_cluster_pvs_bit_vector_block",
		"scenario_zone_set_cluster_pvs_bit_vector_block",
		"s_scenario_zone_set_cluster_pvs_bit_vector_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ZONE_SET_CLUSTER_PVS_BIT_VECTOR_BLOCK_ID)
	{
		{ _field_dword_integer, "dword" },
		{ _field_terminator }
	};

	#define SCENARIO_ZONE_SET_CLUSTER_PVS_BLOCK_ID { 0x6ACD70D4, 0x2B484AE0, 0xA1A1A7CB, 0x597648C4 }
	TAG_STRUCT(
		scenario_zone_set_cluster_pvs_block,
		"scenario_zone_set_cluster_pvs_block",
		"scenario_zone_set_cluster_pvs_block",
		"s_scenario_zone_set_cluster_pvs_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ZONE_SET_CLUSTER_PVS_BLOCK_ID)
	{
		{ _field_block, "cluster pvs bit vectors", &scenario_zone_set_bsp_bits_block_block },
		{ _field_terminator }
	};

	#define SCENARIO_ZONE_SET_CLUSTER_REFERENCE_BLOCK_ID { 0xABBC875C, 0xA9F0CA19, 0xA7A434B0, 0xA31AB176 }
	TAG_STRUCT(
		scenario_zone_set_cluster_reference_block,
		"scenario_zone_set_cluster_reference_block",
		"scenario_zone_set_cluster_reference_block",
		"s_scenario_zone_set_cluster_reference_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ZONE_SET_CLUSTER_REFERENCE_BLOCK_ID)
	{
		{ _field_char_integer, "bsp index" },
		{ _field_byte_integer, "cluster index" },
		{ _field_terminator }
	};

	#define SCENARIO_ZONE_SET_LIPSYNC_BLOCK_ID { 0xF76E710, 0xFD754360, 0x98E09719, 0x8CBE3BE7 }
	TAG_STRUCT(
		scenario_zone_set_lipsync_block,
		"scenario_zone_set_lipsync_block",
		"scenario_zone_set_lipsync_block",
		"s_scenario_zone_set_lipsync_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ZONE_SET_LIPSYNC_BLOCK_ID)
	{
		{ _field_tag_reference, "dummy", &sound_group_reference$3 },
		{ _field_terminator }
	};

	TAG_REFERENCE(sound_group_reference$3, SOUND_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define SCENARIO_ZONE_SET_PVS_BLOCK_ID { 0x1B4A2C99, 0x8ECA4B38, 0x8A4A2436, 0x5888158E }
	TAG_STRUCT(
		scenario_zone_set_pvs_block,
		"scenario_zone_set_pvs_block",
		"scenario_zone_set_pvs_block",
		"s_scenario_zone_set_pvs_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ZONE_SET_PVS_BLOCK_ID)
	{
		{ _field_dword_integer, "structure bsp mask" },
		{ _field_short_integer, "version" },
		{ _field_word_flags, "flags", &scenario_zone_set_pvs_flags },
		{ _field_block, "bsp checksums", &scenario_zone_set_bsp_checksum_block_block },
		{ _field_block, "structure bsp pvs", &scenario_zone_set_bsp_pvs_block_block },
		{ _field_block, "portal=>device mapping", &structure_portal_device_mapping_block_block },
		{ _field_terminator }
	};

	STRINGS(scenario_zone_set_pvs_flags)
	{
		"empty debug pvs*!"
	};
	STRING_LIST(scenario_zone_set_pvs_flags, scenario_zone_set_pvs_flags_strings, _countof(scenario_zone_set_pvs_flags_strings));

	#define SCENARIO_ZONE_SET_SWITCH_TRIGGER_VOLUME_BLOCK_ID { 0xDBC2A01B, 0xC1BC44B3, 0xAF8E24E1, 0xBC8618F1 }
	TAG_STRUCT(
		scenario_zone_set_switch_trigger_volume_block,
		"scenario_zone_set_switch_trigger_volume_block",
		"scenario_zone_set_switch_trigger_volume_block",
		"s_scenario_zone_set_switch_trigger_volume_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENARIO_ZONE_SET_SWITCH_TRIGGER_VOLUME_BLOCK_ID)
	{
		{ _field_word_flags, "flags", &scenario_zone_set_switch_trigger_volume_flags_definition },
		{ _field_short_block_index, "begin zone set", &scenario_zone_set_block_block },
		{ _field_short_block_index, "trigger volume", &scenario_trigger_volume_block_block },
		{ _field_short_block_index, "commit zone set", &scenario_zone_set_block_block },
		{ _field_terminator }
	};

	STRINGS(scenario_zone_set_switch_trigger_volume_flags_definition)
	{
		"teleport vehicles"
	};
	STRING_LIST(scenario_zone_set_switch_trigger_volume_flags_definition, scenario_zone_set_switch_trigger_volume_flags_definition_strings, _countof(scenario_zone_set_switch_trigger_volume_flags_definition_strings));

	#define SCENE_OBJECT_ATTACHMENT_BLOCK_ID { 0x713DCA38, 0xF48F4FA1, 0x87E89BFB, 0x1A6D2BC3 }
	TAG_STRUCT(
		scene_object_attachment_block,
		"scene_object_attachment_block",
		"scene_object_attachment_block",
		"s_scene_object_attachment_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENE_OBJECT_ATTACHMENT_BLOCK_ID)
	{
		{ _field_byte_flags, "flags", &scene_object_attachment_flags },
		FIELD_PAD("VKJSLKHF", 3),
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "object marker name" },
		{ _field_string_id, "attachment object name" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "attachment marker name" },
		{ _field_tag_reference, "attachment type", &object_group_scenery_group_effect_scenery_group_reference },
		{ _field_terminator }
	};

	STRINGS(scene_object_attachment_flags)
	{
		"invisible"
	};
	STRING_LIST(scene_object_attachment_flags, scene_object_attachment_flags_strings, _countof(scene_object_attachment_flags_strings));

	#define SCENERY_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0x50BDCE4A, 0x841D42F3, 0xB6BD3790, 0xCD47CDBA }
	TAG_STRUCT(
		scenery_block_index_flags_block_struct,
		"scenery_block_index_flags_block_struct",
		"scenery_block_index_flags_block_struct",
		"s_scenery_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENERY_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_scenery_palette_block_block },
		{ _field_terminator }
	};

	#define SCENERY_GROUP$2_ID { 0x8EF5AC73, 0xE1C843B9, 0xA15CC8AA, 0xC9F15E5C }
	VERSIONED_TAG_STRUCT(
		scenery_group$2,
		"scenery",
		"scenery_group",
		"s_scenery_group$2",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCENERY_GROUP$2_ID)
	{
		{ _struct_version_mode_greater_or_equal, 3, 9 },
		{ _field_struct, "object", &object_struct_definition },
		FIELD_EXPLANATION("Pathfinding", "Indicate whether, by default, we should create pathfinding data for this type of scenery"),
		{ _field_short_enum, "pathfinding policy", &pathfinding_policy_enum$2 },
		{ _field_word_flags, "flags", &scenery_flags },
		FIELD_EXPLANATION("Lightmapping", "Indicate whether, by default, how we should lightmap this type of scenery"),
		{ _field_short_enum, "lightmapping policy", &lightmapping_policy_enum },
		FIELD_PAD("WGW", 2),
		{ _field_tag_reference, "Structure Lighting Tag", &scenario_structure_lighting_info_group_reference$2 },
		FIELD_USELESS_PAD("value", 120),
		
		{ _struct_version_mode_equal, 2, 63 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Pathfinding", "Indicate whether, by default, we should create pathfinding data for this type of scenery"),
		{ _field_short_enum, "pathfinding policy", &pathfinding_policy_enum$2 },
		{ _field_word_flags, "flags", &scenery_flags },
		FIELD_EXPLANATION("Lightmapping", "Indicate whether, by default, how we should lightmap this type of scenery"),
		{ _field_short_enum, "lightmapping policy", &lightmapping_policy_enum },
		FIELD_PAD("WGW", 2),
		{ _field_tag_reference, "Structure Lighting Tag", &scenario_structure_lighting_info_group_reference$2 },
		FIELD_USELESS_PAD("value", 120),
		
		{ _struct_version_mode_equal, 1, 63 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Pathfinding", "Indicate whether, by default, we should create pathfinding data for this type of scenery"),
		{ _field_short_enum, "pathfinding policy", &old_pathfinding_policy_enum },
		{ _field_word_flags, "flags", &scenery_flags },
		FIELD_EXPLANATION("Lightmapping", "Indicate whether, by default, how we should lightmap this type of scenery"),
		{ _field_short_enum, "lightmapping policy", &lightmapping_policy_enum },
		FIELD_PAD("QLVY", 2),
		{ _field_tag_reference, "Structure Lighting Tag", &scenario_structure_lighting_info_group_reference$2 },
		FIELD_USELESS_PAD("value", 120),
		
		{ _struct_version_mode_equal, 0, 6 },
		{ _field_short_enum, "pathfinding policy", &old_pathfinding_policy_enum },
		{ _field_word_flags, "flags", &scenery_flags },
		{ _field_short_enum, "lightmapping policy", &lightmapping_policy_enum_old },
		FIELD_PAD("COV", 2),
		{ _field_tag_reference, "Structure Lighting Tag", &scenario_structure_lighting_info_group_reference$2 },
		FIELD_USELESS_PAD("value", 120),
		
		{ _field_terminator }
	};

	STRINGS(pathfinding_policy_enum$2)
	{
		"Pathfinding CUT-OUT",
		"Pathfinding STATIC",
		"Pathfinding DYNAMIC",
		"Pathfinding NONE"
	};
	STRING_LIST(pathfinding_policy_enum$2, pathfinding_policy_enum$2_strings, _countof(pathfinding_policy_enum$2_strings));

	STRINGS(scenery_flags)
	{
		"not physical#has no havok representation; will not build physics from collision",
		"use complex activation#tests all clusters for activation instead of just the origin"
	};
	STRING_LIST(scenery_flags, scenery_flags_strings, _countof(scenery_flags_strings));

	STRINGS(lightmapping_policy_enum)
	{
		"Per-Vertex",
		"Per-Pixel (not implemented)",
		"Dynamic"
	};
	STRING_LIST(lightmapping_policy_enum, lightmapping_policy_enum_strings, _countof(lightmapping_policy_enum_strings));

	TAG_REFERENCE(scenario_structure_lighting_info_group_reference$2, SCENARIO_STRUCTURE_LIGHTING_INFO_TAG);

	STRINGS(old_pathfinding_policy_enum)
	{
		"Pathfinding DYNAMIC",
		"Pathfinding CUT-OUT",
		"Pathfinding STATIC",
		"Pathfinding NONE"
	};
	STRING_LIST(old_pathfinding_policy_enum, old_pathfinding_policy_enum_strings, _countof(old_pathfinding_policy_enum_strings));

	STRINGS(lightmapping_policy_enum_old)
	{
		"Dynamic",
		"Per-Vertex"
	};
	STRING_LIST(lightmapping_policy_enum_old, lightmapping_policy_enum_old_strings, _countof(lightmapping_policy_enum_old_strings));

	#define SCREEN_EFFECT_SCALAR_FUNCTION_STRUCT_ID { 0xD2D2C2B8, 0xA3D24359, 0x8D127DD8, 0x7EB7F3D8 }
	TAG_STRUCT(
		screen_effect_scalar_function_struct,
		"screen_effect_scalar_function_struct",
		"screen_effect_scalar_function_struct",
		"s_screen_effect_scalar_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCREEN_EFFECT_SCALAR_FUNCTION_STRUCT_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define SCREEN_EFFECT_SCALAR_OBJECT_FUNCTION_STRUCT_ID { 0x92C128E6, 0x4B424665, 0x80E1707B, 0xCE6CDB1D }
	TAG_STRUCT(
		screen_effect_scalar_object_function_struct,
		"screen_effect_scalar_object_function_struct",
		"screen_effect_scalar_object_function_struct",
		"s_screen_effect_scalar_object_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCREEN_EFFECT_SCALAR_OBJECT_FUNCTION_STRUCT_ID)
	{
		{ _field_string_id, "Input Variable", _field_id_function_input_scalar },
		{ _field_string_id, "Range Variable", _field_id_function_input_range },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define SCREEN_SPACE_LIGHT_SHADER_OVERRIDE_BLOCK_ID { 0xC1084686, 0x18CA4C2E, 0x9EA0ADF9, 0xC22C29DF }
	TAG_STRUCT(
		screen_space_light_shader_override_block,
		"screen_space_light_shader_override_block",
		"screen_space_light_shader_override_block",
		"s_screen_space_light_shader_override_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCREEN_SPACE_LIGHT_SHADER_OVERRIDE_BLOCK_ID)
	{
		{ _field_real_rgb_color, "specular color normal" },
		{ _field_real, "specular steepness" },
		{ _field_real_rgb_color, "specular color gazing" },
		{ _field_real, "specular coeff" },
		{ _field_real, "diffuse coeff" },
		{ _field_real, "roughness offset" },
		{ _field_real, "albedo blend" },
		{ _field_terminator }
	};

	#define SCREEN_TRANSFORM_BASIS_ARRAY_DEFINITION_STRUCT_DEFINITION_ID { 0xEE6C4CCF, 0x5BE94948, 0xA2F9EA40, 0x71F433BE }
	TAG_STRUCT(
		screen_transform_basis_array_definition_struct_definition,
		"screen_transform_basis_array_definition",
		"screen_transform_basis_array_definition",
		"s_screen_transform_basis_array_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCREEN_TRANSFORM_BASIS_ARRAY_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_real_point_2d, "screen transform basis element" },
		{ _field_terminator }
	};

	#define SCRIPTLISTBLOCK_ID { 0xF24154DC, 0x70B744D7, 0x9379D8B3, 0x43C9D8E1 }
	TAG_STRUCT(
		scriptlistblock,
		"scriptListBlock",
		"scriptListBlock",
		"s_scriptlistblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCRIPTLISTBLOCK_ID)
	{
		{ _field_string_id, "script name" },
		{ _field_terminator }
	};

	#define SCRIPT_CONTAINER_STRUCT_DEFINITION_ID { 0xC9FA273E, 0x5AA14DD5, 0xBDA32DB0, 0xBD8F8D00 }
	TAG_STRUCT(
		script_container_struct_definition,
		"script_container_struct_definition",
		"script_container_struct_definition",
		"s_script_container_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCRIPT_CONTAINER_STRUCT_DEFINITION_ID)
	{
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_terminator }
	};

	#define SCRIPT_FRAGMENT_BLOCK_ID { 0xBE3330E4, 0x1D254941, 0x949273FC, 0x61A61F94 }
	TAG_STRUCT(
		script_fragment_block,
		"script_fragment_block",
		"script_fragment_block",
		"s_script_fragment_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCRIPT_FRAGMENT_BLOCK_ID)
	{
		{ _field_string_id, "script name" },
		{ _field_long_string, "script source", _field_id_unknown_maeo },
		{ _field_short_enum, "compile state", &fragment_state_enum },
		FIELD_PAD("xcvh", 2),
		{ _field_terminator }
	};

	STRINGS(fragment_state_enum)
	{
		"edited",
		"success",
		"error"
	};
	STRING_LIST(fragment_state_enum, fragment_state_enum_strings, _countof(fragment_state_enum_strings));

	#define SCRIPT_PAYLOAD_BLOCK_STRUCT_ID { 0x38C721BD, 0x8C89406B, 0x84E71F56, 0xB2A70A24 }
	TAG_STRUCT(
		script_payload_block_struct,
		"script_payload_block_struct",
		"script_payload_block_struct",
		"s_script_payload_block_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCRIPT_PAYLOAD_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "script function name" },
		{ _field_terminator }
	};

	#define SCRIPT_STRUCT_DEFINITION_ID { 0xBD6B3E2, 0x9B5B4F76, 0xA69CBE21, 0xC8820C61 }
	TAG_STRUCT(
		script_struct_definition,
		"script_struct_definition",
		"script_struct_definition",
		"s_script_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCRIPT_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "source files", &hs_source_files_block_group_block },
		{ _field_block, "scripts", &hs_scripts_block_block },
		{ _field_block, "globals", &hs_globals_block_block },
		{ _field_block, "instanced variables", &hsinstancedvariablesblock_block },
		{ _field_block, "references", &hs_references_block_block },
		{ _field_block, "hs unit seats", &hs_unit_seat_block_block },
		{ _field_block, "hs syntax datums", &hs_syntax_datum_block_block },
		{ _field_data, "script string data", &hs_string_data_definition },
		{ _field_block, "import manifest", &hsimportmanifestblock_block },
		{ _field_terminator }
	};

	#define SCRIPTABLELIGHTRIGBLOCK_ID { 0x789C5227, 0xB8FC47A1, 0xB56613BE, 0xDDD920CA }
	TAG_STRUCT(
		scriptablelightrigblock,
		"scriptableLightRigBlock",
		"scriptableLightRigBlock",
		"s_scriptablelightrigblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SCRIPTABLELIGHTRIGBLOCK_ID)
	{
		FIELD_EXPLANATION("Scriptable Light Rig", nullptr),
		{ _field_string_id, "string" },
		{ _field_tag_reference, "light rig", &light_rig_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(light_rig_group_reference, LIGHT_RIG_TAG);

	#define SEAM_INDICES_BLOCK_DEFINITION_ID { 0x4DD47B87, 0x293440E9, 0x95732E53, 0xECAD8B62 }
	TAG_STRUCT(
		seam_indices_block_definition,
		"seam_indices_block_definition",
		"seam_indices_block_definition",
		"s_seam_indices_block_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SEAM_INDICES_BLOCK_DEFINITION_ID)
	{
		{ _field_char_integer, "seam index" },
		{ _field_terminator }
	};

	#define SEAT_EJECTION_BLOCK_ID { 0x6CB868BB, 0x2CBA40A2, 0xAEB08A95, 0xCA96880D }
	TAG_STRUCT(
		seat_ejection_block,
		"seat_ejection_block",
		"seat_ejection_block",
		"s_seat_ejection_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SEAT_EJECTION_BLOCK_ID)
	{
		{ _field_string_id, "seat label" },
		{ _field_terminator }
	};

	#define SECONDARY_SET_TRIGGER_BLOCK_ID { 0xFE527898, 0x39E047EE, 0x8093F855, 0x7FC3092 }
	TAG_STRUCT(
		secondary_set_trigger_block,
		"secondary_set_trigger_block",
		"secondary_set_trigger_block",
		"s_secondary_set_trigger_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SECONDARY_SET_TRIGGER_BLOCK_ID)
	{
		{ _field_short_enum, "combination rule", &combination_rules_enum },
		{ _field_short_enum, "dialogue type", "when this ending is triggered, launch a dialogue event of the given type", &order_ending_dialogue_enum },
		{ _field_block, "triggers", &trigger_references_block },
		{ _field_terminator }
	};

	#define SELF_ILLUMINATION_STATE_ID { 0xA95F3671, 0x6ECA4A14, 0x8732394F, 0xC5A9F4FA }
	TAG_STRUCT(
		self_illumination_state,
		"self_illumination_state",
		"self_illumination_state",
		"s_self_illumination_state",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SELF_ILLUMINATION_STATE_ID)
	{
		FIELD_EXPLANATION("Self-Illumination State", "An animated self-illumination controller state."),
		{ _field_string_id, "Name" },
		{ _field_long_flags, "Flags", &self_illumination_flags },
		{ _field_real, "Length ", "Length of illumination animation in seconds." },
		{ _field_string_id, "Next State ", "Used to automatically transition to another state when finished." },
		{ _field_struct, "Intensity ", "Animates intensity over time. 0 - Min Intensity.  1 - Max Intensity", &scalar_function_named_struct },
		{ _field_struct, "Color ", "Animates color over time.  0 - White.  1 - Full Color", &scalar_function_named_struct },
		{ _field_struct, "Activation ", "Animates On/Off state over time. 0 - Off. 1 - On", &scalar_function_named_struct },
		{ _field_terminator }
	};

	STRINGS(self_illumination_flags)
	{
		"Looping",
		"Triggered By AI State",
		"Triggered By Anim State",
		"Triggered By Dialog"
	};
	STRING_LIST(self_illumination_flags, self_illumination_flags_strings, _countof(self_illumination_flags_strings));

	#define SELF_ILLUMINATION_STRUCT_DEFINITION_ID { 0x52AD50EF, 0xED7A4429, 0x89800F3D, 0xF2771A34 }
	TAG_STRUCT(
		self_illumination_struct_definition,
		"self_illumination_struct_definition",
		"self_illumination_struct_definition",
		"s_self_illumination_struct_definition",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SELF_ILLUMINATION_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "States", &self_illumination_state_block },
		{ _field_terminator }
	};

	#define SHADER_CORTANA_STRUCT_DEFINITION_ID { 0xC85B5D4E, 0xE9A04958, 0xB56578B1, 0xFD846D3B }
	VERSIONED_TAG_STRUCT(
		shader_cortana_struct_definition,
		"shader_cortana_struct_definition",
		"shader_cortana_struct_definition",
		"s_shader_cortana_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_CORTANA_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_string_id, "material name" },
		
		{ _struct_version_mode_equal, 0, 15 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_string_id, "material name" },
		
		{ _field_terminator }
	};

	#define SHADER_CUSTOM_STRUCT_DEFINITION_ID { 0xFF50E364, 0xEB3245FF, 0xA2D4B69B, 0x8BE29BB4 }
	VERSIONED_TAG_STRUCT(
		shader_custom_struct_definition,
		"shader_custom_struct_definition",
		"shader_custom_struct_definition",
		"s_shader_custom_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_CUSTOM_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_string_id, "material name" },
		
		{ _struct_version_mode_equal, 0, 15 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_string_id, "material name" },
		
		{ _field_terminator }
	};

	#define SHADER_DECAL_STRUCT_DEFINITION_ID { 0xEA087CA7, 0x6D4B455B, 0xA5D40D3C, 0xC2BD313A }
	VERSIONED_TAG_STRUCT(
		shader_decal_struct_definition,
		"shader_decal_struct_definition",
		"shader_decal_struct_definition",
		"s_shader_decal_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_DECAL_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_long_integer, "specular_modulate" },
		
		{ _struct_version_mode_equal, 0, 15 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_long_integer, "specular_modulate" },
		
		{ _field_terminator }
	};

	#define SHADER_FOLIAGE_STRUCT_DEFINITION_ID { 0xD74BE733, 0x121C43AD, 0xBA9BDBAB, 0x5CFF186F }
	VERSIONED_TAG_STRUCT(
		shader_foliage_struct_definition,
		"shader_foliage_struct_definition",
		"shader_foliage_struct_definition",
		"s_shader_foliage_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_FOLIAGE_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_string_id, "material name" },
		
		{ _struct_version_mode_equal, 0, 15 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_string_id, "material name" },
		
		{ _field_terminator }
	};

	#define SHADER_FUR_STENCIL_STRUCT_DEFINITION_ID { 0xF47BD72B, 0x75D24F56, 0x9CC91E04, 0xFBC6BACB }
	VERSIONED_TAG_STRUCT(
		shader_fur_stencil_struct_definition,
		"shader_fur_stencil_struct_definition",
		"shader_fur_stencil_struct_definition",
		"s_shader_fur_stencil_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_FUR_STENCIL_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_string_id, "material name" },
		
		{ _struct_version_mode_equal, 0, 15 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_string_id, "material name" },
		
		{ _field_terminator }
	};

	#define SHADER_FUR_STRUCT_DEFINITION_ID { 0xC56A78C9, 0xFF3043E4, 0xB4C1B2F6, 0xEF328DC5 }
	VERSIONED_TAG_STRUCT(
		shader_fur_struct_definition,
		"shader_fur_struct_definition",
		"shader_fur_struct_definition",
		"s_shader_fur_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_FUR_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_string_id, "material name" },
		
		{ _struct_version_mode_equal, 0, 15 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_string_id, "material name" },
		
		{ _field_terminator }
	};

	#define SHADER_GLASS_STRUCT_DEFINITION_ID { 0xE9C581E2, 0xDBD14B5C, 0x882C68D3, 0x3C8585F9 }
	VERSIONED_TAG_STRUCT(
		shader_glass_struct_definition,
		"shader_glass_struct_definition",
		"shader_glass_struct_definition",
		"s_shader_glass_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_GLASS_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_string_id, "material name" },
		
		{ _struct_version_mode_equal, 0, 15 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_string_id, "material name" },
		
		{ _field_terminator }
	};

	#define SHADER_HALOGRAM_STRUCT_DEFINITION_ID { 0xC9823BF8, 0x33A44F28, 0x8307126E, 0xD5E0FA05 }
	VERSIONED_TAG_STRUCT(
		shader_halogram_struct_definition,
		"shader_halogram_struct_definition",
		"shader_halogram_struct_definition",
		"s_shader_halogram_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_HALOGRAM_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_string_id, "material name" },
		
		{ _struct_version_mode_equal, 0, 15 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_string_id, "material name" },
		
		{ _field_terminator }
	};

	#define SHADER_LIGHT_VOLUME_STRUCT_DEFINITION_ID { 0xEBF63AF, 0x426B4679, 0x93E4F59B, 0x93BC0FF2 }
	VERSIONED_TAG_STRUCT(
		shader_light_volume_struct_definition,
		"shader_light_volume_struct_definition",
		"shader_light_volume_struct_definition",
		"s_shader_light_volume_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_LIGHT_VOLUME_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		
		{ _struct_version_mode_equal, 0, 14 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		
		{ _field_terminator }
	};

	#define SHADER_MUX_MATERIAL_STRUCT_DEFINITION_ID { 0x4DCB92A7, 0xE2D240D7, 0xA32E660E, 0x3C65D06D }
	VERSIONED_TAG_STRUCT(
		shader_mux_material_struct_definition,
		"shader_mux_material_struct_definition",
		"shader_mux_material_struct_definition",
		"s_shader_mux_material_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_MUX_MATERIAL_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_string_id, "material name" },
		
		{ _struct_version_mode_equal, 0, 15 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_string_id, "material name" },
		
		{ _field_terminator }
	};

	#define SHADER_MUX_STRUCT_DEFINITION_ID { 0x6A37ED2F, 0xA0984874, 0x9E320D9F, 0x88A14069 }
	VERSIONED_TAG_STRUCT(
		shader_mux_struct_definition,
		"shader_mux_struct_definition",
		"shader_mux_struct_definition",
		"s_shader_mux_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_MUX_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 10 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_string_id, "material name 0", "defines global material type for channel 0 of the mux shader" },
		{ _field_string_id, "material name 1", "defines global material type for channel 1 of the mux shader" },
		{ _field_string_id, "material name 2", "defines global material type for channel 2 of the mux shader" },
		{ _field_string_id, "material name 3", "defines global material type for channel 3 of the mux shader" },
		{ _field_struct, "material type 0", &material_type_struct },
		{ _field_struct, "material type 1", &material_type_struct },
		{ _field_struct, "material type 2", &material_type_struct },
		{ _field_struct, "material type 3", &material_type_struct },
		{ _field_long_integer, "single material" },
		
		{ _struct_version_mode_equal, 0, 23 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_string_id, "material name 0", "defines global material type for channel 0 of the mux shader" },
		{ _field_string_id, "material name 1", "defines global material type for channel 1 of the mux shader" },
		{ _field_string_id, "material name 2", "defines global material type for channel 2 of the mux shader" },
		{ _field_string_id, "material name 3", "defines global material type for channel 3 of the mux shader" },
		{ _field_struct, "material type 0", &material_type_struct },
		{ _field_struct, "material type 1", &material_type_struct },
		{ _field_struct, "material type 2", &material_type_struct },
		{ _field_struct, "material type 3", &material_type_struct },
		{ _field_long_integer, "single material" },
		
		{ _field_terminator }
	};

	#define SHADER_PARTICLE_STRUCT_DEFINITION_ID { 0x769BE1B8, 0x531C4049, 0x99594583, 0x24A08389 }
	VERSIONED_TAG_STRUCT(
		shader_particle_struct_definition,
		"shader_particle_struct_definition",
		"shader_particle_struct_definition",
		"s_shader_particle_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_PARTICLE_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 7 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_real_rgb_color, "bright tint" },
		{ _field_real_rgb_color, "ambient tint" },
		{ _field_real, "contrast" },
		{ _field_real, "blur weight" },
		{ _field_real, "intensity scale" },
		{ _field_tag_reference, "palette", &bitmap_group_reference$2 },
		
		{ _struct_version_mode_equal, 0, 20 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_real_rgb_color, "bright tint" },
		{ _field_real_rgb_color, "ambient tint" },
		{ _field_real, "contrast" },
		{ _field_real, "blur weight" },
		{ _field_real, "intensity scale" },
		{ _field_tag_reference, "palette", &bitmap_group_reference$2 },
		
		{ _field_terminator }
	};

	#define SHADER_SCREEN_STRUCT_DEFINITION_ID { 0x1BCC3B9D, 0xE4A94D01, 0x86E2B7F9, 0x483A58FA }
	VERSIONED_TAG_STRUCT(
		shader_screen_struct_definition,
		"shader_screen_struct_definition",
		"shader_screen_struct_definition",
		"s_shader_screen_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_SCREEN_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 6 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_string_id, "material name" },
		{ _field_char_enum, "render layer", &global_screen_shader_render_layer_enum },
		{ _field_char_integer, "sort order" },
		{ _field_byte_flags, "render flags", &global_screen_shader_flags_definition },
		FIELD_PAD("fefjjjfrjg", 1),
		
		{ _struct_version_mode_equal, 0, 19 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_string_id, "material name" },
		{ _field_char_enum, "render layer", &global_screen_shader_render_layer_enum },
		{ _field_char_integer, "sort order" },
		{ _field_byte_flags, "render flags", &global_screen_shader_flags_definition },
		FIELD_PAD("fefjjjfrjg", 1),
		
		{ _field_terminator }
	};

	STRINGS(global_screen_shader_render_layer_enum)
	{
		"pre-UI",
		"post-UI",
		"pre-transparents"
	};
	STRING_LIST(global_screen_shader_render_layer_enum, global_screen_shader_render_layer_enum_strings, _countof(global_screen_shader_render_layer_enum_strings));

	STRINGS(global_screen_shader_flags_definition)
	{
		"resolve screen"
	};
	STRING_LIST(global_screen_shader_flags_definition, global_screen_shader_flags_definition_strings, _countof(global_screen_shader_flags_definition_strings));

	#define SHADER_SKIN_STRUCT_DEFINITION_ID { 0xC5B8AAB4, 0x932348D9, 0x8333AD6E, 0x6B1DE570 }
	VERSIONED_TAG_STRUCT(
		shader_skin_struct_definition,
		"shader_skin_struct_definition",
		"shader_skin_struct_definition",
		"s_shader_skin_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_SKIN_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_string_id, "material name" },
		
		{ _struct_version_mode_equal, 0, 15 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_string_id, "material name" },
		
		{ _field_terminator }
	};

	#define SHADER_STRUCT_DEFINITION_ID { 0x3AC664D, 0xEFE440D5, 0x90BB753B, 0xDD1C8632 }
	VERSIONED_TAG_STRUCT(
		shader_struct_definition,
		"shader_struct_definition",
		"shader_struct_definition",
		"s_shader_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_string_id, "material name" },
		
		{ _struct_version_mode_equal, 0, 15 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_string_id, "material name" },
		
		{ _field_terminator }
	};

	#define SHADER_TERRAIN_STRUCT_DEFINITION_ID { 0xA5E23FFC, 0x86CF4F04, 0x8F9BB910, 0xEC559C56 }
	VERSIONED_TAG_STRUCT(
		shader_terrain_struct_definition,
		"shader_terrain_struct_definition",
		"shader_terrain_struct_definition",
		"s_shader_terrain_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_TERRAIN_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 10 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_string_id, "material name 0", "defines global material type for channel 0 of the terrain shader" },
		{ _field_string_id, "material name 1", "defines global material type for channel 1 of the terrain shader" },
		{ _field_string_id, "material name 2", "defines global material type for channel 2 of the terrain shader" },
		{ _field_string_id, "material name 3", "defines global material type for channel 3 of the terrain shader" },
		{ _field_struct, "material type 0", &material_type_struct },
		{ _field_struct, "material type 1", &material_type_struct },
		{ _field_struct, "material type 2", &material_type_struct },
		{ _field_struct, "material type 3", &material_type_struct },
		{ _field_long_integer, "single material" },
		
		{ _struct_version_mode_equal, 0, 23 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_string_id, "material name 0", "defines global material type for channel 0 of the terrain shader" },
		{ _field_string_id, "material name 1", "defines global material type for channel 1 of the terrain shader" },
		{ _field_string_id, "material name 2", "defines global material type for channel 2 of the terrain shader" },
		{ _field_string_id, "material name 3", "defines global material type for channel 3 of the terrain shader" },
		{ _field_struct, "material type 0", &material_type_struct },
		{ _field_struct, "material type 1", &material_type_struct },
		{ _field_struct, "material type 2", &material_type_struct },
		{ _field_struct, "material type 3", &material_type_struct },
		{ _field_long_integer, "single material" },
		
		{ _field_terminator }
	};

	#define SHADER_WATER_STRUCT_DEFINITION_ID { 0x690CD756, 0x20E34F49, 0xA35E9CD9, 0x594C0FA2 }
	VERSIONED_TAG_STRUCT(
		shader_water_struct_definition,
		"shader_water_struct_definition",
		"shader_water_struct_definition",
		"s_shader_water_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_WATER_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		
		{ _struct_version_mode_equal, 0, 14 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		
		{ _field_terminator }
	};

	#define SHADER_WATERFALL_STRUCT_DEFINITION_ID { 0x45F99AEF, 0x8E60424D, 0xB086F8EF, 0xFD087593 }
	VERSIONED_TAG_STRUCT(
		shader_waterfall_struct_definition,
		"shader_waterfall_struct_definition",
		"shader_waterfall_struct_definition",
		"s_shader_waterfall_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHADER_WATERFALL_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_struct, "render_method", &render_method_struct_definition },
		{ _field_string_id, "material name" },
		
		{ _struct_version_mode_equal, 0, 15 },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_tag_reference, "definition", &render_method_definition_group_reference },
		{ _field_tag_reference, "reference", &render_method_group_reference },
		{ _field_block, "options", &short_block_block },
		{ _field_block, "parameters", &render_method_parameter_block_block },
		{ _field_block, "postprocess", &render_method_postprocess_block_block },
		{ _field_long_integer, "is template" },
		{ _field_long_flags, "locked options", &global_render_method_lock_option_flags_defintion },
		{ _field_block, "locked parameters", &render_method_locked_parameter_block_block },
		{ _field_word_flags, "shader flags", &global_render_method_flags_defintion },
		{ _field_char_enum, "sort layer", &global_sort_layer_enum_defintion },
		{ _field_char_integer, "version" },
		{ _field_long_integer, "Custom fog setting index" },
		{ _field_long_block_index, "prediction atom index", &g_null_block_block },
		{ _field_string_id, "material name" },
		
		{ _field_terminator }
	};

	#define SHAPENAMEBLOCK_ID { 0x398CE67C, 0x3A7E4F70, 0xB41443F0, 0x73D6FB49 }
	TAG_STRUCT(
		shapenameblock,
		"shapeNameBlock",
		"shapeNameBlock",
		"s_shapenameblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHAPENAMEBLOCK_ID)
	{
		{ _field_long_integer, "key" },
		{ _field_long_string, "name" },
		{ _field_terminator }
	};

	#define SHARED_ANIMATION_REFERENCE_BLOCK_ID { 0xC0DEFD48, 0x6BB54221, 0xA917E117, 0x8DF0BDAB }
	TAG_STRUCT(
		shared_animation_reference_block,
		"shared_animation_reference_block",
		"shared_animation_reference_block",
		"s_shared_animation_reference_block",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHARED_ANIMATION_REFERENCE_BLOCK_ID)
	{
		{ _field_tag_reference, "graph reference", &model_animation_graph_group_reference$2 },
		{ _field_short_block_index, "shared animation index", &shared_model_animation_block_block },
		FIELD_PAD("sarbp", 2),
		{ _field_terminator }
	};

	#define SHARED_MODEL_ANIMATION_BLOCK_ID { 0x2D18070E, 0x74B14322, 0xA7045C6F, 0x2D55B8F6 }
	TAG_STRUCT(
		shared_model_animation_block,
		"shared_model_animation_block",
		"shared_model_animation_block",
		"s_shared_model_animation_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHARED_MODEL_ANIMATION_BLOCK_ID)
	{
		{ _field_short_integer, "frame count" },
		{ _field_byte_integer, "node count" },
		{ _field_char_enum, "animation type", &animation_type_enum },
		{ _field_char_enum, "frame info type", &frame_info_type_enum },
		{ _field_char_enum, "desired frame info type", &frame_info_type_enum },
		{ _field_char_enum, "desired compression", &compression_settings },
		{ _field_char_enum, "current compression", &compression_settings },
		{ _field_word_flags, "internal flags", &internal_animation_flags },
		{ _field_short_integer, "compressor_version" },
		{ _field_long_integer, "uid" },
		{ _field_string_id, "shared id" },
		{ _field_long_integer, "node list checksum" },
		{ _field_short_integer, "resource_group" },
		{ _field_short_integer, "resource_group_member" },
		{ _field_real_vector_3d, "heading" },
		{ _field_real, "heading angle" },
		{ _field_real, "average translation magnitude" },
		{ _field_real, "average pivot yaw" },
		FIELD_EXPLANATION("a", "IMPORTANT NOTES ABOUT FRAME EVENTS\n1) The following four fields (hidden except in expert mode) are legacy Halo3-style tag blocks.\n2) New frame events (attached to animations in Maya) will automagically be exported to\n   the frame_event_list any time a model sidecar is imported with the tool import command.\n3) Do not add new frame events, fx events, audio events, or dialog events here.  Instead,\n   please use the frame_event_list tag referenced in \'imported events\' (it\'s right above the\n   \'animations\' tag block).\n4) The only time you should be editing the following hidden fields is to remove legacy\n   frame events that have been replaced by events generated in Maya.\n"),
		{ _field_block, "frame events", "Legacy field - please edit in new frame event tag below", &animation_frame_event_block_block },
		{ _field_block, "sound events", "Legacy field - please edit in new frame event tag below", &animation_sound_event_block_block },
		{ _field_block, "effect events", "Legacy field - please edit in new frame event tag below", &animation_effect_event_block_block },
		{ _field_block, "dialogue events", "Legacy field - please edit in new frame event tag below", &animation_dialogue_event_block_block },
		{ _field_block, "script events", "Legacy field - please edit in new frame event tag below", &animation_script_event_block_block },
		FIELD_EXPLANATION("b", nullptr),
		{ _field_block, "object-space parent nodes", &object_space_node_data_block_block },
		{ _field_block, "foot tracking", &foot_tracking_block_block },
		{ _field_block, "object space offset nodes", &object_space_offset_node_block_block },
		{ _field_block, "forward-invert kinetic anchor nodes", &fik_anchor_node_block_block },
		{ _field_block, "ik chain events", &animation_ik_chain_events_block },
		{ _field_block, "ik chain proxies", &animation_ik_chain_proxies_block },
		{ _field_block, "facial wrinkle events", &animation_facial_wrinkle_events_block },
		{ _field_block, "extended data events", &animation_extended_events_block },
		{ _field_block, "animation object functions", &animation_object_functions_block },
		{ _field_terminator }
	};

	STRINGS(animation_type_enum)
	{
		"none",
		"base",
		"overlay",
		"replacement"
	};
	STRING_LIST(animation_type_enum, animation_type_enum_strings, _countof(animation_type_enum_strings));

	STRINGS(compression_settings)
	{
		"best score&medium compression",
		"best compression&rough compression",
		"best accuracy&uncompressed",
		"old codec",
		"reach medium compression",
		"reach rough compression"
	};
	STRING_LIST(compression_settings, compression_settings_strings, _countof(compression_settings_strings));

	STRINGS(internal_animation_flags)
	{
		"<unused0>!",
		"world relative",
		"<unused1>!",
		"<unused3>!",
		"<unused2>!",
		"resource_group",
		"compression disabled",
		"old production checksum",
		"valid production checksum",
		"override force compression",
		"contains pca data"
	};
	STRING_LIST(internal_animation_flags, internal_animation_flags_strings, _countof(internal_animation_flags_strings));

	#define SHARED_STATIC_DATA_CODEC_GRAPH_DATA_STRUCT_ID { 0x76EB40D7, 0x2ADD4D4D, 0xB535E99D, 0x62F2704A }
	TAG_STRUCT(
		shared_static_data_codec_graph_data_struct,
		"shared_static_data_codec_graph_data_struct",
		"shared_static_data_codec_graph_data_struct",
		"s_shared_static_data_codec_graph_data_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHARED_STATIC_DATA_CODEC_GRAPH_DATA_STRUCT_ID)
	{
		FIELD_EXPLANATION("Shared Static Codec", nullptr),
		{ _field_block, "rotations", &shared_static_data_codec_rotation_block_block },
		{ _field_block, "translations", &shared_static_data_codec_translation_block_block },
		{ _field_block, "scale", &shared_static_data_codec_scale_block_block },
		{ _field_terminator }
	};

	#define SHARED_STATIC_DATA_CODEC_ROTATION_BLOCK_ID { 0xBE3BF367, 0x8E12471C, 0x8AC19374, 0x920CDCF0 }
	TAG_STRUCT(
		shared_static_data_codec_rotation_block,
		"shared_static_data_codec_rotation_block",
		"shared_static_data_codec_rotation_block",
		"s_shared_static_data_codec_rotation_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHARED_STATIC_DATA_CODEC_ROTATION_BLOCK_ID)
	{
		{ _field_short_integer, "i" },
		{ _field_short_integer, "j" },
		{ _field_short_integer, "k" },
		{ _field_short_integer, "w" },
		{ _field_terminator }
	};

	#define SHARED_STATIC_DATA_CODEC_SCALE_BLOCK_ID { 0x4269C493, 0x52274440, 0xA14084B5, 0x31AA1D26 }
	TAG_STRUCT(
		shared_static_data_codec_scale_block,
		"shared_static_data_codec_scale_block",
		"shared_static_data_codec_scale_block",
		"s_shared_static_data_codec_scale_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHARED_STATIC_DATA_CODEC_SCALE_BLOCK_ID)
	{
		{ _field_real, "scale" },
		{ _field_terminator }
	};

	#define SHARED_STATIC_DATA_CODEC_TRANSLATION_BLOCK_ID { 0x85720F55, 0x59DD4D8E, 0x90AC3678, 0x298BB472 }
	TAG_STRUCT(
		shared_static_data_codec_translation_block,
		"shared_static_data_codec_translation_block",
		"shared_static_data_codec_translation_block",
		"s_shared_static_data_codec_translation_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHARED_STATIC_DATA_CODEC_TRANSLATION_BLOCK_ID)
	{
		{ _field_real, "x" },
		{ _field_real, "y" },
		{ _field_real, "z" },
		{ _field_terminator }
	};

	#define SHIELD_BOOST_BLOCK_ID { 0xC8A4D40E, 0x830F49E4, 0x90962271, 0x1FDC8F7C }
	TAG_STRUCT(
		shield_boost_block,
		"shield_boost_block",
		"shield_boost_block",
		"s_shield_boost_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHIELD_BOOST_BLOCK_ID)
	{
		FIELD_EXPLANATION("shield boosting", "This feature was implemented for the engineer character in atlas. Shield dynamics overrides for when shields are being \'boosted\' by an external source"),
		{ _field_real, "shield boost decay", "amount of shield-boost to decay per second" },
		{ _field_real, "shield boost recharge time", "time to recharge full shields when getting boosted" },
		{ _field_real, "shield boost stun time", "stun time when getting boosted" },
		{ _field_terminator }
	};

	#define SHIELD_COLOR_FUNCTION_STRUCT_ID { 0xBDAC1B15, 0x794F4ADF, 0xA4DE2E70, 0x63BBFA9F }
	TAG_STRUCT(
		shield_color_function_struct,
		"shield_color_function_struct",
		"shield_color_function_struct",
		"s_shield_color_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHIELD_COLOR_FUNCTION_STRUCT_ID)
	{
		{ _field_string_id, "Input Variable", _field_id_function_input_scalar },
		{ _field_string_id, "Range Variable", _field_id_function_input_range },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define SHIELD_IMPACT_STRUCT_DEFINITION_ID { 0xC627936, 0x3C6642FA, 0xAD2D41FD, 0x3F729B2F }
	TAG_STRUCT(
		shield_impact_struct_definition,
		"shield_impact_struct_definition",
		"shield_impact_struct_definition",
		"s_shield_impact_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHIELD_IMPACT_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Shield Controls", "You can use the following variables as inputs to the functions here, in addition to any object variables\n    shield_vitality        percentage of shield remaining\n    shield_intensity       mixture of recent and current damage (see below)\n    current_shield_damage\n    recent_shield_damage\n"),
		{ _field_word_flags, "flags", &shield_flags },
		{ _field_short_integer, "version" },
		FIELD_GROUP_BEGIN("Shield Intensity"),
		FIELD_EXPLANATION("Shield Intensity", "Shield intensity is a combination of recent damage and current damage.\nThese controls let you adjust the relative intensity contribution from each.\n\'shield_intensity\' can be used as an input to any of the animation function curves below."),
		{ _field_real, "Recent Damage Intensity" },
		{ _field_real, "Current Damage Intensity" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Shield Edge"),
		FIELD_EXPLANATION("Shield Edge", "These controls allow you to define the location and width of the shield edges.\nThe edge is faded as a function of the surface normal with respect to the camera.\nRadius 1.0 corresponds to the glancing edges of the surface (the silhouette edges).\nRadius 0.0 corresponds to the area of the surface directly facing the camera (the center).\nYou can control separately the inner and outer fades."),
		{ _field_real, "Depth Fade Range", nullptr, "world units" },
		{ _field_real, "Outer Fade Radius", nullptr, nullptr, "[0-1]" },
		{ _field_real, "Center Radius", nullptr, nullptr, "[0-1]" },
		{ _field_real, "Inner Fade Radius", nullptr, nullptr, "[0-1]" },
		{ _field_struct, "Edge Glow Color", &shield_color_function_struct },
		{ _field_struct, "Edge Glow Intensity", &shield_scalar_function_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Plasma"),
		FIELD_EXPLANATION("Plasma", "These controls allow you to define the appearance of the plasma effect.\nThe plasma is calculated using the standard formula (1-abs(tex0-tex1))^(sharpness).\nTiling scale controls the spatial tiling of the plasma textures.\nScroll speed controls how fast the textures scroll on the surface.\nYou can specify separate sharpness values for the edge and the center.\n"),
		{ _field_real, "Plasma Depth Fade Range", nullptr, "world units" },
		{ _field_tag_reference, "Plasma Noise Texture 0", &bitmap_group_reference$2 },
		{ _field_tag_reference, "Plasma Noise Texture 1", &bitmap_group_reference$2 },
		{ _field_real, "Tiling Scale" },
		{ _field_real, "Scroll Speed" },
		{ _field_real, "Edge Sharpness" },
		{ _field_real, "Center Sharpness" },
		{ _field_real, "Plasma Outer Fade Radius", nullptr, nullptr, "[0-1]" },
		{ _field_real, "Plasma Center Radius", nullptr, nullptr, "[0-1]" },
		{ _field_real, "Plasma Inner Fade Radius", nullptr, nullptr, "[0-1]" },
		{ _field_struct, "Plasma Center Color", &shield_color_function_struct },
		{ _field_struct, "Plasma Center Intensity", &shield_scalar_function_struct },
		{ _field_struct, "Plasma Edge Color", &shield_color_function_struct },
		{ _field_struct, "Plasma Edge Intensity", &shield_scalar_function_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Extrusion Oscillation"),
		FIELD_EXPLANATION("Extrusion Oscillation", "These controls allow you to define the oscillation in the extrusion.\nThese textures are tiled and scrolled in the xy and yz planes, and their red channel is applied as an offset to the extrusion\nTiling scale controls the spatial tiling of the plasma textures.\nScroll speed controls how fast the textures scroll on the surface.\nYou can specify separate sharpness values for the edge and the center.\n"),
		{ _field_tag_reference, "Oscillation Texture 0", &bitmap_group_reference$2 },
		{ _field_tag_reference, "Oscillation Texture 1", &bitmap_group_reference$2 },
		{ _field_real, "Oscillation Tiling Scale" },
		{ _field_real, "Oscillation Scroll Speed" },
		{ _field_struct, "Extrusion Amount", &shield_scalar_function_struct },
		{ _field_struct, "Oscillation Amplitude", &shield_scalar_function_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Hit Response"),
		FIELD_EXPLANATION("Hit Response", "These controls allow you to define the color variation in the area surrounding projectile impacts.\nYou can control the color, and the size of the colored area.\nThe default input is time since impact.\n"),
		{ _field_real, "Hit Time", nullptr, "seconds" },
		{ _field_struct, "Hit Color", &shield_color_function_struct },
		{ _field_struct, "Hit Intensity", &shield_scalar_function_struct },
		{ _field_struct, "Hit Radius", &shield_scalar_function_struct },
		{ _field_tag_reference, "hit blob texture (adds significant cost)", &bitmap_group_reference$3 },
		FIELD_GROUP_END(),
		{ _field_real_quaternion, "edge_scales" },
		{ _field_real_quaternion, "edge_offsets" },
		{ _field_real_quaternion, "plasma_scales" },
		{ _field_real_quaternion, "depth_fade_params" },
		{ _field_terminator }
	};

	STRINGS(shield_flags)
	{
		"render always",
		"render first person",
		"dont render third person"
	};
	STRING_LIST(shield_flags, shield_flags_strings, _countof(shield_flags_strings));

	#define SHIELD_SCALAR_FUNCTION_STRUCT_ID { 0xEFDDC631, 0xEAB14736, 0x9C10734E, 0x609E19A3 }
	TAG_STRUCT(
		shield_scalar_function_struct,
		"shield_scalar_function_struct",
		"shield_scalar_function_struct",
		"s_shield_scalar_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHIELD_SCALAR_FUNCTION_STRUCT_ID)
	{
		{ _field_string_id, "Input Variable", _field_id_function_input_scalar },
		{ _field_string_id, "Range Variable", _field_id_function_input_range },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define SHORT_BLOCK_ID { 0x66A4C53E, 0x850348A6, 0xA9769EA5, 0xA0DFBC08 }
	TAG_STRUCT(
		short_block,
		"short_block",
		"short_block",
		"s_short_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SHORT_BLOCK_ID)
	{
		{ _field_short_integer, "short" },
		{ _field_terminator }
	};

	#define SIDECARBLOCK_ID { 0xDD2E8F64, 0xF5F42F1, 0x8D1ADF7F, 0x29BD247D }
	TAG_STRUCT(
		sidecarblock,
		"sidecarBlock",
		"sidecarBlock",
		"s_sidecarblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SIDECARBLOCK_ID)
	{
		{ _field_long_string, "sidecar path" },
		{ _field_terminator }
	};

	#define SILENTASSISTLEVELBLOCK_ID { 0x619E7799, 0x7B464079, 0x8BAFB0F0, 0xBC3CA08D }
	TAG_STRUCT(
		silentassistlevelblock,
		"silentAssistLevelBlock",
		"silentAssistLevelBlock",
		"s_silentassistlevelblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SILENTASSISTLEVELBLOCK_ID)
	{
		{ _field_real, "grenade damage" },
		{ _field_real, "grenade radius" },
		{ _field_real, "assist award bias", "multiplier for attributed-damage during assist calculation" },
		{ _field_real, "weapon spread" },
		{ _field_real, "headshot aim assist", "increases autoaim for headshot weapons", MAKE_ALT_NAMES("headshot magnetism") },
		{ _field_real, "melee cone" },
		{ _field_real, "aim assist", "unimplemented" },
		FIELD_EXPLANATION("Level Change", "These fields show how many kills/deaths it takes to move between levels"),
		{ _field_byte_flags, "flags", &g_silentassistflags },
		FIELD_PAD("SXIX", 3),
		{ _field_long_integer, "kills to decrease level" },
		{ _field_long_integer, "deaths to increase level" },
		{ _field_terminator }
	};

	STRINGS(g_silentassistflags)
	{
		"kills must be consecutive",
		"deaths must be consecutive"
	};
	STRING_LIST(g_silentassistflags, g_silentassistflags_strings, _countof(g_silentassistflags_strings));

	#define SILENT_ASSIST_GLOBALS_STRUCT_DEFINITION_ID { 0xEE88DBE0, 0xD8AA47B3, 0x84A4C71C, 0x8844778E }
	TAG_STRUCT(
		silent_assist_globals_struct_definition,
		"silent_assist_globals_struct_definition",
		"silent_assist_globals_struct_definition",
		"s_silent_assist_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SILENT_ASSIST_GLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "levels", &silentassistlevelblock_block },
		{ _field_terminator }
	};

	#define SIMULATED_INPUT_STICK_STRUCT_ID { 0x259EAC93, 0xD744048, 0x9B737CB9, 0x55515831 }
	TAG_STRUCT(
		simulated_input_stick_struct,
		"simulated_input_stick_struct",
		"simulated_input_stick_struct",
		"s_simulated_input_stick_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SIMULATED_INPUT_STICK_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &simulated_input_flags },
		{ _field_short_enum, "response type", &direction_type_enum_definition },
		{ _field_short_enum, "mapping type", &mapping_type_enum_definition },
		{ _field_real_bounds, "angle", nullptr, "degrees" },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_real, "duration", nullptr, "seconds" },
		{ _field_real, "inverse duration", "if >0.f, accumulated inpulse will be 'undone' over the give time span", "seconds" },
		{ _field_real, "inverse random length", "15.0 would randomly adjust length of accumulated impulse +/-15%", "percent" },
		{ _field_real_bounds, "inverse random angle", "apply random adjustment to direction of accumulated impulse", "degrees" },
		{ _field_real, "linear zoom penalty", "linear multiplier of zoom that increases effect; computed for no change at zoom 1" },
		{ _field_real, "square root zoom penalty", "multiplier to increase effect proportional to square root of zoom; computed for no change at zoom 1" },
		{ _field_terminator }
	};

	STRINGS(simulated_input_flags)
	{
		"ignore base scaler#Always start with 1.0 instead of any value from damage multiplier value",
		"ignore area control falloff#Skip this scaler",
		"ignore elapsed time function scaler#Skip this scaler",
		"ignore zoom scaler#Skip this scaler",
		"ignore tick_delta_secs scaler#Skip this scaler"
	};
	STRING_LIST(simulated_input_flags, simulated_input_flags_strings, _countof(simulated_input_flags_strings));

	STRINGS(direction_type_enum_definition)
	{
		"aim vector",
		"hit vector",
		"inverse hit vector",
		"attacker origin to victim origin",
		"victim origin to attacker origin"
	};
	STRING_LIST(direction_type_enum_definition, direction_type_enum_definition_strings, _countof(direction_type_enum_definition_strings));

	STRINGS(mapping_type_enum_definition)
	{
		"top down",
		"screen space"
	};
	STRING_LIST(mapping_type_enum_definition, mapping_type_enum_definition_strings, _countof(mapping_type_enum_definition_strings));

	#define SIMULATED_INPUT_STRUCT_DEFINITION_ID { 0x92B9F13E, 0x845845C7, 0x98EE12D2, 0xEF28014D }
	TAG_STRUCT(
		simulated_input_struct_definition,
		"simulated_input_struct_definition",
		"simulated_input_struct_definition",
		"s_simulated_input_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SIMULATED_INPUT_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Simulated Input (SI)", "Adds accelerations into unit\'s movement (by simulating movement stick change) and/or view angle (by simulating camera stick change)"),
		FIELD_EXPLANATION("Impulse", "At SI spawn time the SI\'s angle is determined by adding the result of \'response type\' & \'mapping type\' to a random angle in given angle range.\nEach tick, this acceleration angle is multiplied by the final scaler resulting from logic below. That scaled impulse is then applied as stick input."),
		FIELD_EXPLANATION("Scalers", "Starting scaler value comes from damage multiplier or is set to 1.0 if SI not directly related to damage.\nThat is then scaled by the following:\n * area control falloff\n * function output y: func(SI_elapsed_time/duration) --> y)\n * 1 / zoom magnification\n * tick_delta_secs / tick_length\nresult of this is final scaler value"),
		FIELD_EXPLANATION("Screen Space angles", "0 - pitch up, +/-180 - pitch down\n-90 - yaw left, +90 - yaw right"),
		FIELD_EXPLANATION("Move", nullptr),
		{ _field_struct, "move", &simulated_input_stick_struct },
		FIELD_EXPLANATION("Look", nullptr),
		{ _field_struct, "look", &simulated_input_stick_struct },
		{ _field_terminator }
	};

	#define SIMULATION_INTERPOLATION_STRUCT_DEFINITION_ID { 0x2FACCEF0, 0x5C3B4A32, 0x8DF1C551, 0x349A3F4A }
	TAG_STRUCT(
		simulation_interpolation_struct_definition,
		"simulation_interpolation_struct_definition",
		"simulation_interpolation_struct_definition",
		"s_simulation_interpolation_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SIMULATION_INTERPOLATION_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("SIMULATION INTERPOLATION", "This tag defines interpolation that will be used to smooth the motion of objects in distributed multiplayer games.  In bandwidth-constrained multiplayer games (i.e. most games), we will receive only one or two updates per second for faraway objects.  Even near objects may frequently be dropped to <5 updates per second, especially crates, garbage bits, and similar less important elements of the simulation.  Between updates, each peer predicts the motion of each object.  These predictions are often wrong (by anything from an inch to dozens of feet).  The simulation interpolation system is responsible for correcting these mispredictions in as aesthetically pleasing a way as possible, without harming the integrity of the game.  The details of the technical implementation are beyond the scope of this explanation, but various configuration parameters are exposed here.  \n\nThe tooltips for each configuration parameter should be helpful.  Please see daldridge w/ questions or bugs."),
		FIELD_GROUP_BEGIN("High level settings"),
		{ _field_real, "position_client_ignore_tolerance", "How much rope clients have WRT their controlled object of this type. They are free to ignore host updates within this tolerance.", "WU" },
		{ _field_real, "angular_speed_threshold_for_temporarily_ignoring_rotation_updates", "If angular speed exceeds this threshold, we will ignore rotational updates (because it's spinning so fast that we can't possibly do a good job w/ any kind of interpolation - instead, just wait for it to settle down a bit).  Note that if a warp threshold is exceeded, rotation will be warped regardless of the value of this parameter.", "degrees per second" },
		FIELD_GROUP_BEGIN("Warp Thresholds"),
		FIELD_EXPLANATION("WARP THRESHOLDS", "If any of the warp thresholds (position or rotation, global or xy) are exceeded, a warp in all domains (position and rotation) is executed."),
		{ _field_real, "position_warp_threshold", "Threshold of position error beyond which we will warp instead of interpolating.", "WU" },
		{ _field_real, "position_warp_threshold_xy", "Separated for bipeds, for whom z discrepancies are more permissible because of jumping. If you don't want a special lower XY threshold, just set this to a very high number.", "WU" },
		{ _field_real, "rotation_warp_threshold", "Threshold of rotation error beyond which we will warp instead of interpolating.  Set this to 180.0 if you don't want to warp based on rotational deviation (may be important for objects that often spin very fast, e.g. grenades or garbage bits).", "degrees" },
		FIELD_GROUP_END(),
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Position while controlled"),
		{ _field_struct, "position_while_controlled", "All speeds in here are WU/s", &single_domain_configuration_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Rotation while controlled"),
		{ _field_struct, "rotation_while_controlled", "All speeds in here are degrees/s", &single_domain_configuration_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Position while not controlled"),
		{ _field_struct, "position_while_uncontrolled", "All speeds in here are WU/s", &single_domain_configuration_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Rotation while not controlled"),
		{ _field_struct, "rotation_while_uncontrolled", "All speeds in here are degrees/s", &single_domain_configuration_struct },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define SINGLE_ACHIEVEMENT_DEFINITION_BLOCK_ID { 0x7549688B, 0xD7D74EDF, 0x92AC71EF, 0x573D94F5 }
	TAG_STRUCT(
		single_achievement_definition_block,
		"single_achievement_definition_block",
		"single_achievement_definition_block",
		"s_single_achievement_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SINGLE_ACHIEVEMENT_DEFINITION_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_char_enum, "type", &global_achievement_enum },
		{ _field_byte_flags, "difficulty", &global_campaign_difficulty_flags },
		FIELD_PAD("VJNOSNJER", 2),
		{ _field_block, "restricted levels", &single_achievement_restricted_level_block_block },
		{ _field_terminator }
	};

	STRINGS(global_achievement_enum)
	{
		"m10_complete",
		"m20_complete",
		"m30_complete",
		"m60_complete",
		"m40_complete",
		"m70_complete",
		"m80_complete",
		"m90_complete",
		"camp_normal_complete",
		"camp_heroic_complete",
		"camp_legendary_complete",
		"camp_legendary_solo_complete",
		"camp_heroic_3skulls_complete",
		"camp_coop_mission_complete",
		"camp_coop_complete",
		"terminal_1",
		"terminal_all",
		"m10_special",
		"m20_special",
		"m30_special",
		"m60_special",
		"m40_special",
		"m70_special",
		"m80_special",
		"m90_special",
		"earn_rank_005",
		"earn_rank_020",
		"wargames_win_5",
		"wargames_win_20",
		"spartan_ops_mission_complete",
		"spartan_ops_episode1_complete",
		"spartan_ops_5episodes_complete",
		"spartan_ops_legendary_solo_mission_complete",
		"spops_1_special",
		"spops_2_special",
		"spops_3_special",
		"spops_4_special",
		"spops_5_special",
		"challenge_complete",
		"25_challenges_complete",
		"change_armor",
		"change_emblem",
		"change_tag",
		"change_pose",
		"save_custom_map",
		"save_custom_gametype",
		"save_screenshot",
		"save_filmclip",
		"upload_to_fileshare"
	};
	STRING_LIST(global_achievement_enum, global_achievement_enum_strings, _countof(global_achievement_enum_strings));

	#define SINGLE_ACHIEVEMENT_RESTRICTED_LEVEL_BLOCK_ID { 0x55CEF750, 0x51414598, 0x966B2F43, 0x4A6C23E5 }
	TAG_STRUCT(
		single_achievement_restricted_level_block,
		"single_achievement_restricted_level_block",
		"single_achievement_restricted_level_block",
		"s_single_achievement_restricted_level_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SINGLE_ACHIEVEMENT_RESTRICTED_LEVEL_BLOCK_ID)
	{
		{ _field_string_id, "level name", "Compared to map name in scenario" },
		{ _field_terminator }
	};

	#define SINGLE_AVATAR_AWARD_DEFINITION_BLOCK_ID { 0x69CB40EF, 0xB1574B0C, 0x90BD2634, 0x87F8862D }
	TAG_STRUCT(
		single_avatar_award_definition_block,
		"single_avatar_award_definition_block",
		"single_avatar_award_definition_block",
		"s_single_avatar_award_definition_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SINGLE_AVATAR_AWARD_DEFINITION_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_enum, "type", &global_avatar_award_enum },
		{ _field_terminator }
	};

	STRINGS(global_avatar_award_enum)
	{
		"award_0",
		"award_1",
		"award_2"
	};
	STRING_LIST(global_avatar_award_enum, global_avatar_award_enum_strings, _countof(global_avatar_award_enum_strings));

	#define SINGLE_DOMAIN_BLENDING_CONFIGURATION_STRUCT_ID { 0x47E921D4, 0x65AB4EBE, 0x8A71EF41, 0x224410B1 }
	TAG_STRUCT(
		single_domain_blending_configuration_struct,
		"single_domain_blending_configuration_struct",
		"single_domain_blending_configuration_struct",
		"s_single_domain_blending_configuration_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SINGLE_DOMAIN_BLENDING_CONFIGURATION_STRUCT_ID)
	{
		FIELD_EXPLANATION("SINGLE DOMAIN BLENDING CONFIGURATION", "Whether these speeds are linear or angular depends on the context - check context before modifying."),
		{ _field_real, "min_object_speed", "Approximate minimum speed for this object (either controlled or uncontrolled).", "WU or degrees per second" },
		{ _field_real, "max_object_speed", "Approximate maximum speed for this object (either controlled or uncontrolled).", "WU or degrees per second" },
		{ _field_real, "fraction_at_min_object_speed", "Fraction of misprediction error consumed each tick if object is traveling at or below min_object_speed.  Linterp is executed at intermediate object speeds." },
		{ _field_real, "fraction_at_max_object_speed", "Fraction of misprediction error consumed each tick if object is traveling at or above max_object_speed.  Linterp is executed at intermediate object speeds." },
		{ _field_real, "min_speed_at_min_object_speed", "Minimum misprediction error consumption speed if object is at or below min_object_speed.  Linterp is executed at intermediate object speeds.", "WU or degrees per second" },
		{ _field_real, "min_speed_at_max_object_speed", "Minimum misprediction error consumption speed if object is at or above max_object_speed. Linterp is executed at intermediate object speeds.", "WU or degrees per second" },
		{ _field_terminator }
	};

	#define SINGLE_DOMAIN_CONFIGURATION_STRUCT_ID { 0xE844485C, 0x782542A7, 0xB852650A, 0x3EC8A1C7 }
	TAG_STRUCT(
		single_domain_configuration_struct,
		"single_domain_configuration_struct",
		"single_domain_configuration_struct",
		"s_single_domain_configuration_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SINGLE_DOMAIN_CONFIGURATION_STRUCT_ID)
	{
		FIELD_EXPLANATION("SINGLE DOMAIN INTERPOLATION", "Note that if either the position or rotation discrepancy thresholds above which we use blending are exceeded, we will blend in both domains (because blending is more accurate and once we blend in either domain, we are forced to warp the physics representation of the object, which is the main downside of blending.  Therefore, the second domain is essentially \"free\" after we pay for the first w/ a physics warp.\n\nNote also that this discrepancy threshold is either WU or degrees, depending on context.  Check your context!"),
		{ _field_real, "discrepancy_threshold_above_which_we_use_blending", "Below this threshold we use velocity bumps.", "WU or degrees" },
		{ _field_real, "coming_to_rest_speed", "When our velocity is below this threshold, we will consider using a blend to minimize at-rest error.", "WU/s or degrees/s" },
		{ _field_real, "coming_to_rest_maximum_ignorable_error", "We will use a blend when our speed is below the coming_to_rest_speed and our error is greater than this.", "WU or degrees" },
		FIELD_GROUP_BEGIN("Velocity bumps"),
		{ _field_struct, "velocity bumps", &single_domain_velocity_bumps_configuration_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Blending"),
		{ _field_struct, "blending", &single_domain_blending_configuration_struct },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define SINGLE_DOMAIN_VELOCITY_BUMPS_CONFIGURATION_STRUCT_ID { 0xE01ED32B, 0x4AC44923, 0xA38213D0, 0x8598722B }
	TAG_STRUCT(
		single_domain_velocity_bumps_configuration_struct,
		"single_domain_velocity_bumps_configuration_struct",
		"single_domain_velocity_bumps_configuration_struct",
		"s_single_domain_velocity_bumps_configuration_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SINGLE_DOMAIN_VELOCITY_BUMPS_CONFIGURATION_STRUCT_ID)
	{
		FIELD_EXPLANATION("SINGLE DOMAIN VELOCITY BUMPS", "Velocity bumps are used for small mis-predictions because they are more visually pleasing than straight blending. However, they are less accurate, less consistent, and harder to tune."),
		{ _field_real, "velocity_scale", "Fraction of delta that becomes the velocity bump" },
		{ _field_real, "velocity_min", "Minimum size of any given velocity bump", "WU or degrees per second" },
		{ _field_real, "velocity_max", "Maximum size of any given velocity bump", "WU or degrees per second" },
		FIELD_EXPLANATION("Velocity Bump Suppression", "We suppress velocity bumps when the object is \"close enough\" to encourage objects to come to rest. Both of the below conditions must be satisfied to suppress velocity bumps."),
		{ _field_real, "velocity_difference_ignore_threshold", "The new velocity must differ from the old velocity by less than this to allow suppression.", "WU or degrees per second" },
		{ _field_real, "velocity_difference_absolute_ignore_threshold", "The new position/rotation must differ from the old position/rotation by less than this to allow suppression.", "WU or degrees" },
		{ _field_terminator }
	};

	#define SINGLE_SCREEN_EFFECT_ID { 0x2E559B36, 0x4E3546A7, 0xA1AE1E29, 0x90AA239F }
	TAG_STRUCT(
		single_screen_effect,
		"single_screen_effect",
		"single_screen_effect",
		"s_single_screen_effect",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SINGLE_SCREEN_EFFECT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_word_flags, "flags", &area_screen_effect_flags_definition },
		{ _field_word_flags, "hidden flags", &area_screen_effect_hidden_flags_definition },
		FIELD_EXPLANATION("DISTANCE FALLOFF", "controls the maximum distance and the distance falloff of this effect\nNOTE: not used for scenario global effects"),
		{ _field_real, "maximum distance", "the maximum distance this screen effect will affect", "world units" },
		{ _field_struct, "distance falloff", &screen_effect_scalar_function_struct },
		FIELD_EXPLANATION("TIME EVOLUTION", "controls the lifetime and time falloff of this effect\nNOTE: not used for scenario global effects"),
		{ _field_real, "delay", "the effect will start after this many seconds (ignored if the play sequentially flag is set)", "seconds" },
		{ _field_real, "lifetime", "the effect is destroyed after this many seconds (0 = never dies)", "seconds" },
		{ _field_struct, "time falloff", &screen_effect_scalar_function_struct },
		FIELD_EXPLANATION("ANGLE FALLOFF", "controls the falloff of this effect based on how close you are to looking directly at it\nNOTE: not used for scenario global effects"),
		{ _field_struct, "angle falloff", &screen_effect_scalar_function_struct },
		FIELD_EXPLANATION("OBJECT FALLOFF", "applies a falloff based on an object function - ignored if the effect is not attached to an object"),
		{ _field_struct, "object falloff", &screen_effect_scalar_object_function_struct },
		FIELD_EXPLANATION("EFFECTS", "a selection of effects to choose from\nin the case of overlapping effects, the maximum will be taken"),
		{ _field_tag_reference, "color grading look-up-texture", &bitmap_group_reference$3 },
		{ _field_real, "runtime color grading strength", "do not edit", nullptr, "[do not edit]" },
		{ _field_real, "exposure boost", "increase in exposure", "stops" },
		{ _field_real, "exposure deboost", "decrease in exposure", "stops" },
		{ _field_real, "hue left", "shifts hue R->G->B", "degrees ", "[0-360]" },
		{ _field_real, "hue right", "shifts hue B->G->R", "degrees ", "[0-360]" },
		{ _field_real, "saturation", "increases saturation", nullptr, "[0-1]" },
		{ _field_real, "desaturation", "decreases saturation", nullptr, "[0-1]" },
		{ _field_real, "contrast enhance", "contrast increase", nullptr, "[0-1]" },
		{ _field_real, "gamma enhance", "gamma increase", nullptr, "[0-10]" },
		{ _field_real, "gamma reduce", "gamma increase", nullptr, "[0-10]" },
		{ _field_real, "bright noise", "add bright noise contribution, 0 turns it off, 1: full on", nullptr, "[0-1]" },
		{ _field_real, "dark noise", "add dark noise contribution, 0 turns it off, 1: full on", nullptr, "[0-1]" },
		{ _field_real_rgb_color, "color filter", "this color is multiplied on top" },
		{ _field_real_rgb_color, "color floor", "this color is subtracted" },
		{ _field_real_fraction, "color replace strength", "used to blend in the color replace below", nullptr, "[0-1]" },
		{ _field_real_rgb_color, "color replace", "this color is blended in place of the screen's color" },
		{ _field_real, "tron", "adds a full-screen tron effect", nullptr, "[0-1]" },
		{ _field_real, "motion suck", "adds motion-blur towards or away from this screen effect", nullptr, "[-2, 2]" },
		{ _field_real, "bloom buffer motion suck", "adds cheap bloom buffer motion-blur towards or away from this screen effect", nullptr, "[-2, 2]" },
		{ _field_real_vector_3d, "motion suck direction", "do not edit", nullptr, "[do not edit]" },
		{ _field_real, "horizontal blur", "blurs the entire screen", nullptr, "[0-10] expensive" },
		{ _field_real, "vertical blur", "blurs the entire screen", nullptr, "[0-10] expensive" },
		{ _field_real, "vision mode", "turns on the global vision mode", nullptr, "[0-1]" },
		{ _field_real, "hud fade", "fades the chud", nullptr, "[0-1]" },
		{ _field_real, "fov in", "zooms in the field of view", nullptr, "[0-1]" },
		{ _field_real, "fov out", "zooms out the field of view", nullptr, "[0-1]" },
		{ _field_real, "screen shake", "shakes the entire screen", nullptr, "[0-1]" },
		{ _field_tag_reference, "shader effect", "applies this shader to the entire screen", &material_group_reference$2 },
		{ _field_terminator }
	};

	STRINGS(area_screen_effect_flags_definition)
	{
		"debug disable",
		"allow effect outside radius",
		"unattached",
		"first person{first person only}",
		"third person{third person only}",
		"disable camera falloffs{cinematic}#disables distance and angle falloffs",
		"only affects attached object",
		"draw precisely one (ask Bill before you check this)"
	};
	STRING_LIST(area_screen_effect_flags_definition, area_screen_effect_flags_definition_strings, _countof(area_screen_effect_flags_definition_strings));

	STRINGS(area_screen_effect_hidden_flags_definition)
	{
		"update thread",
		"render thread"
	};
	STRING_LIST(area_screen_effect_hidden_flags_definition, area_screen_effect_hidden_flags_definition_strings, _countof(area_screen_effect_hidden_flags_definition_strings));

	TAG_REFERENCE(material_group_reference$2, MATERIAL_TAG);

	#define SINGLE_VARIANT_BLOCK_ID { 0xEA0AB182, 0xD7854E89, 0x8E15775D, 0xC9B4205D }
	TAG_STRUCT(
		single_variant_block,
		"single_variant_block",
		"single_variant_block",
		"s_single_variant_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SINGLE_VARIANT_BLOCK_ID)
	{
		{ _field_data, "metadata", &variant_resource_data },
		{ _field_data, "full_data", &variant_resource_data },
		{ _field_long_string, "filename" },
		{ _field_terminator }
	};

	#define SOFT_CEILING_GLOBALS_BLOCK_ID { 0x64E57956, 0x36734BA7, 0x83B6CF77, 0xDA4FEAED }
	TAG_STRUCT(
		soft_ceiling_globals_block,
		"soft_ceiling_globals_block",
		"soft_ceiling_globals_block",
		"s_soft_ceiling_globals_block",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOFT_CEILING_GLOBALS_BLOCK_ID)
	{
		{ _field_real, "biped spring constant" },
		{ _field_real, "biped normal damping" },
		{ _field_real, "biped tangent damping" },
		{ _field_real, "biped min tangent damp velocity" },
		{ _field_real, "vehicle spring constant" },
		{ _field_real, "vehicle normal damping" },
		{ _field_real, "vehicle tangent damping" },
		{ _field_terminator }
	};

	#define SOFT_SURFACES_DEFINITION_BLOCK_ID { 0xBD13C0EA, 0x830B4239, 0xA55BF0F4, 0xCEC129A9 }
	TAG_STRUCT(
		soft_surfaces_definition_block,
		"soft_surfaces_definition_block",
		"soft_surfaces_definition_block",
		"s_soft_surfaces_definition_block",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOFT_SURFACES_DEFINITION_BLOCK_ID)
	{
		FIELD_PAD("CLASS_NONE", 4),
		{ _field_real, "class biped", "max - .2f" },
		{ _field_real, "class dead biped", "max - .09f" },
		{ _field_real, "class crates + vehicles", "max - .2f" },
		{ _field_real, "class debris", "max - .04f" },
		FIELD_PAD("CLASS_ALL", 4),
		{ _field_terminator }
	};

	#define SOLOFOGFUNCTIONBLOCK_ID { 0xD1F9D529, 0x9B06D3E1, 0xD509793C, 0x3631AF50 }
	TAG_STRUCT(
		solofogfunctionblock,
		"soloFogFunctionBlock",
		"soloFogFunctionBlock",
		"s_solofogfunctionblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOLOFOGFUNCTIONBLOCK_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define SOLO_FOG_PARAMETERS_STRUCT_DEFINITION_ID { 0xD82AB114, 0x9244998, 0x857CA148, 0x24F24947 }
	TAG_STRUCT(
		solo_fog_parameters_struct_definition,
		"solo_fog_parameters_struct_definition",
		"solo_fog_parameters_struct_definition",
		"s_solo_fog_parameters_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOLO_FOG_PARAMETERS_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "base height", nullptr, "world units" },
		{ _field_real, "fog height", nullptr, "world units" },
		{ _field_real, "fog thickness" },
		{ _field_real, "fog falloff end", MAKE_ALT_NAMES("max fog distance") },
		{ _field_real_rgb_color, "fog color" },
		{ _field_real, "fog color intensity", "scales color up or down to allow for HDR values" },
		{ _field_block, "Function", &solofogfunctionblock_block },
		{ _field_terminator }
	};

	#define SORTING_POSITION_BLOCK_ID { 0x684EF46D, 0xB52E4111, 0x8E20FEFB, 0xEEFB1C9E }
	TAG_STRUCT(
		sorting_position_block,
		"sorting_position_block",
		"sorting_position_block",
		"s_sorting_position_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SORTING_POSITION_BLOCK_ID)
	{
		{ _field_real_plane_3d, "plane" },
		{ _field_real_point_3d, "position" },
		{ _field_real, "radius" },
		{ _field_array, "node indices", &node_indices_array$2 },
		{ _field_array, "node weights", &node_weights_implicit_array$2 },
		{ _field_terminator }
	};

	#define SOUND2_BLOCK_STRUCT_ID { 0xFD4F3EEC, 0xA74F4557, 0x95B7892C, 0xFCCB91A0 }
	TAG_STRUCT(
		sound2_block_struct,
		"sound2_block_struct",
		"sound2_block_struct",
		"s_sound2_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND2_BLOCK_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &sound_definition_flags },
		{ _field_long_flags, "import flags", &sound_import_flags },
		{ _field_long_flags, "xsync flags", &sound_xsync_flags },
		{ _field_char_enum, "class", &sound_class_enum },
		{ _field_char_enum, "sample rate", &sound_sample_rate_enum },
		{ _field_char_integer, "override xma compression", nullptr, nullptr, "[1-100]" },
		{ _field_char_enum, "import type", &sound_import_type_enum },
		{ _field_struct, "playback", &sound_playback_parameters_struct },
		{ _field_struct, "scale", &sound_scale_modifiers_struct },
		FIELD_EXPLANATION("sub priority", "Used to compare individual sounds in the same class. Higher means more important. (Negative means do not use.)"),
		{ _field_real, "sub priority" },
		FIELD_EXPLANATION("import properties", nullptr),
		{ _field_char_enum, "encoding", &sound_encoding_enum },
		{ _field_char_enum, "compression", &sound_compression_enum },
		FIELD_PAD("pad", 2),
		{ _field_struct, "promotion", &sound_promotion_parameters_struct }, // structure_version:1
		FIELD_PAD("runtime pad", 4),
		{ _field_block, "pitch ranges", "pitch ranges allow multiple samples to represent the same sound at different pitches", &sound_pitch_range_block_block },
		{ _field_block, "platform parameters", &sound_platform_sound_playback_block_block },
		{ _field_pageable_resource, "sound data resource", &sound_resource_definition },
		{ _field_block, "extra info", &sound_extra_info_block_block },
		{ _field_block, "language info", &sound_language_info_block_block },
		{ _field_terminator }
	};

	STRINGS(sound_import_flags)
	{
		"duplicate directory name",
		"cut to block size",
		"use markers",
		"use layer markers"
	};
	STRING_LIST(sound_import_flags, sound_import_flags_strings, _countof(sound_import_flags_strings));

	STRINGS(sound_xsync_flags)
	{
		"processed language times",
		"optimized facial animation"
	};
	STRING_LIST(sound_xsync_flags, sound_xsync_flags_strings, _countof(sound_xsync_flags_strings));

	STRINGS(sound_sample_rate_enum)
	{
		"22kHz",
		"44kHz",
		"32kHz"
	};
	STRING_LIST(sound_sample_rate_enum, sound_sample_rate_enum_strings, _countof(sound_sample_rate_enum_strings));

	STRINGS(sound_import_type_enum)
	{
		"unknown",
		"single-shot",
		"single-layer",
		"multi-layer"
	};
	STRING_LIST(sound_import_type_enum, sound_import_type_enum_strings, _countof(sound_import_type_enum_strings));

	STRINGS(sound_encoding_enum)
	{
		"mono",
		"stereo",
		"quad",
		"5.1",
		"codec"
	};
	STRING_LIST(sound_encoding_enum, sound_encoding_enum_strings, _countof(sound_encoding_enum_strings));

	STRINGS(sound_compression_enum)
	{
		"none (big endian)",
		"xbox adpcm",
		"ima adpcm",
		"none (little endian)",
		"wma",
		"none (endian agnostic)",
		"xma",
		"xma v2.0"
	};
	STRING_LIST(sound_compression_enum, sound_compression_enum_strings, _countof(sound_compression_enum_strings));

	#define SOUNDLIPSYNCINFOBLOCK_STRUCT_ID { 0xCE98746, 0xD3DA483B, 0xAED26267, 0xCD83DD37 }
	TAG_STRUCT(
		soundlipsyncinfoblock_struct,
		"soundLipSyncInfoBlock_struct",
		"soundLipSyncInfoBlock_struct",
		"s_soundlipsyncinfoblock_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUNDLIPSYNCINFOBLOCK_STRUCT_ID)
	{
		{ _field_long_integer, "number of usable facial animations" },
		{ _field_block, "deterministic event info", &deterministicspeecheventblock_block },
		{ _field_block, "facial animation resource languages", &facial_animation_language_block_block },
		{ _field_terminator }
	};

	#define SOUND_BLOCK_ID { 0xBAB7A89B, 0xDFC743D6, 0xB8895623, 0xEBA18D33 }
	TAG_STRUCT(
		sound_block,
		"sound_block",
		"sound_block",
		"s_sound_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_BLOCK_ID)
	{
		{ _field_tag_reference, "sound (OBSOLETE)", &_reference$5 },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference$5, INVALID_TAG);

	#define SOUND_BLOCK_STRUCT_ID { 0xF318793A, 0xA02C4636, 0x99A0A79B, 0x2BB64CD }
	TAG_STRUCT(
		sound_block_struct,
		"sound_block_struct",
		"sound_block_struct",
		"s_sound_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_BLOCK_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &soundeventdefinitionflags },
		{ _field_long_flags, "import flags", &sound_import_flags },
		{ _field_long_flags, "xsync flags", &sound_xsync_flags },
		{ _field_string_id, "Event Name", "Sound event name." },
		{ _field_string_id, "Player Event Name", "Optional sound event name for player only." },
		{ _field_string_id, "Fallback Event Name", "Fallback sound event if the others don't play - should be an a guaranteed bank." },
		{ _field_real, "Max Radius" },
		{ _field_real, "Max Duration", "Max duration of this event. Enter manually for now - will auto-fill later." },
		{ _field_real, "Don't play time.", "Time the event will not retrigger for (global)" },
		{ _field_long_integer, "Hidden runtime info index" },
		{ _field_tag_reference, "Sound bank", "Reference to the sound bank tag this event is in. Can be empty.", &soundbank_group_reference },
		{ _field_block, "lipsync info", &soundlipsyncinfoblock_block },
		{ _field_long_integer, "deterministic flag index" },
		{ _field_terminator }
	};

	STRINGS(soundeventdefinitionflags)
	{
		"never obstruct#disable occlusion/obstruction for this sound",
		"use huge sound transmission",
		"link count to owner unit",
		"don\'t use lipsync data",
		"instant sound propagation",
		"optional player sound event!*",
		"fallback sound event!*",
		"has lipsync data",
		"is deterministic",
		"is external source",
		"override external source event",
		"use don\'t play time!",
		"delay start if sound bank not loaded",
		"use fallback only for DVD",
		"has subtitle!*",
		"ignore node transform#use this if you\'re getting wacky spatialization (such as scorpion cannon)",
		"radio combo voice",
		"cinematic allow tails to play out"
	};
	STRING_LIST(soundeventdefinitionflags, soundeventdefinitionflags_strings, _countof(soundeventdefinitionflags_strings));

	#define SOUND_CACHE_FILE_GESTALT_STRUCT_DEFINITION_ID { 0xCF6AEC54, 0x95E846F2, 0x9B3F6246, 0xAA2223 }
	TAG_STRUCT(
		sound_cache_file_gestalt_struct_definition,
		"sound_cache_file_gestalt_struct_definition",
		"sound_cache_file_gestalt_struct_definition",
		"s_sound_cache_file_gestalt_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_CACHE_FILE_GESTALT_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "codecs", &sound_gestalt_codec_block_block },
		{ _field_block, "playbacks", &sound_gestalt_playback_block_block },
		{ _field_block, "scales", &sound_gestalt_scale_block_block },
		{ _field_block, "import names", &sound_gestalt_import_names_block_block },
		{ _field_block, "pitch range distances", &sound_pitch_range_distances_block_block },
		{ _field_block, "pitch range parameters", &sound_gestalt_pitch_range_parameters_block_block },
		{ _field_block, "pitch ranges", &sound_gestalt_pitch_ranges_block_block },
		{ _field_block, "permutations", &sound_gestalt_permutations_block_block },
		{ _field_block, "permutation languages", &sound_gestalt_permutation_languages_block_block },
		{ _field_block, "custom playbacks", &sound_gestalt_custom_playback_block_block },
		{ _field_block, "language durations", &sound_language_info_block_block },
		{ _field_block, "runtime permutation flags", &sound_gestalt_runtime_permutation_bit_vector_block_block },
		{ _field_data, "naive sample data", &naive_sample_data },
		{ _field_long_integer, "no one listens to me" },
		{ _field_long_integer, "but now I'm used to it" },
		{ _field_block, "chunks", &sound_permutation_chunk_block_block },
		{ _field_block, "promotions", &sound_gestalt_promotions_block_block },
		{ _field_block, "facial animations", &sound_gestalt_facial_animation_block_block },
		{ _field_block, "layer markers", &sound_gestalt_layer_markers_block_block },
		{ _field_terminator }
	};

	#define SOUND_CENTER_MIX_STRUCT_ID { 0x5F672B73, 0xEC7142BA, 0xB9066F9F, 0x56A974D9 }
	TAG_STRUCT(
		sound_center_mix_struct,
		"sound_center_mix_struct",
		"sound_center_mix_struct",
		"s_sound_center_mix_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_CENTER_MIX_STRUCT_ID)
	{
		{ _field_real, "front speaker gain", nullptr, "dB" },
		{ _field_real, "center speaker gain", nullptr, "dB" },
		{ _field_terminator }
	};

	#define SOUND_CLASS_BLOCK_STRUCT_ID { 0xDECE1540, 0x806F499C, 0x88FCD3BC, 0x96250604 }
	TAG_STRUCT(
		sound_class_block_struct,
		"sound_class_block_struct",
		"sound_class_block_struct",
		"s_sound_class_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_CLASS_BLOCK_STRUCT_ID)
	{
		{ _field_short_integer, "max sounds per tag", "maximum number of sounds playing per individual sound tag" },
		{ _field_short_integer, "max sounds per object per tag", "maximum number of sounds per individual sound tag playing on an object", MAKE_ALT_NAMES("max sounds per object [1,16]") },
		{ _field_short_integer, "max sounds per class", "maximum number of sounds playing of this class. zero means ignore." },
		{ _field_short_integer, "max sounds per object per class", "maximum number of sounds of this class playing on an object. zero means ignore." },
		{ _field_long_integer, "preemption time", "replaces other instances after this many milliseconds", "ms" },
		{ _field_word_flags, "internal flags", &sound_class_internal_flags_definition },
		{ _field_word_flags, "flags", &sound_class_external_flags_definition },
		{ _field_short_integer, "priority", "higher means more important" },
		{ _field_char_enum, "cache miss mode", &sound_class_cache_miss_mode_definition },
		{ _field_byte_flags, "bind to acoustics", &sound_class_acoustics_string_definition },
		{ _field_byte_flags, "suppress spatialization", &sound_class_suppress_spatialization_string_defintion },
		FIELD_PAD("sadf", 3),
		FIELD_EXPLANATION("air propagation", nullptr),
		{ _field_real, "air reverb gain", "how much reverb applies to this sound class", "dB", MAKE_ALT_NAMES("reverb gain"), _field_id_decibels },
		{ _field_real, "air direct path gain", "how much goes to direct path (dry)", "dB", _field_id_decibels },
		{ _field_real, "air base obstruction" },
		{ _field_real, "air base occlusion" },
		FIELD_EXPLANATION("underwater propagation", nullptr),
		{ _field_real, "underwater reverb gain", "how much reverb applies to this sound class", "dB", _field_id_decibels },
		{ _field_real, "underwater direct path gain", "how much goes to direct path (dry)", "dB", _field_id_decibels },
		{ _field_real, "underwater base obstruction" },
		{ _field_real, "underwater base occlusion" },
		{ _field_real, "override speaker gain", nullptr, "dB", _field_id_decibels },
		{ _field_struct, "distance parameters", &sound_distance_parameters_struct },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_real_bounds, "gain bounds", nullptr, "dB", FIELD_FLAG_UNKNOWN3, _field_id_decibels },
		FIELD_EXPLANATION("lowpass wetmixes", nullptr),
		FIELD_CUSTOM("equipment lowpass", _tag_field_custom_type_slider),
		{ _field_real, "equipment lowpass", "sets the lowpass wet mix when an equiment is active", "wetmix", MAKE_ALT_NAMES("equipment channel occlusion factor"), _tag_field_custom_type_slider },
		FIELD_CUSTOM("environment forced lowpass", _tag_field_custom_type_slider),
		{ _field_real, "environment forced lowpass", "sets the lowpass wet mix when an environment forced lowpass is active", "wetmix", MAKE_ALT_NAMES("forced lowpass wet mix"), _tag_field_custom_type_slider },
		FIELD_CUSTOM("effect lowpass", _tag_field_custom_type_slider),
		{ _field_real, "effect lowpass", "sets the lowpass wet mix when a lowpass effect is active", "wetmix", _tag_field_custom_type_slider },
		FIELD_EXPLANATION("ducking", nullptr),
		{ _field_real, "cutscene ducking", nullptr, "dB", _field_id_decibels },
		{ _field_real, "cutscene ducking fade in time", nullptr, "seconds" },
		{ _field_real, "cutscene ducking sustain time", "how long this lasts after the cutscene ends", "seconds" },
		{ _field_real, "cutscene ducking fade out time", nullptr, "seconds" },
		{ _field_real, "scripted dialog ducking", nullptr, "dB", _field_id_decibels },
		{ _field_real, "scripted dialog ducking fade in time", nullptr, "seconds" },
		{ _field_real, "scripted dialog ducking sustain time", "how long this lasts after the scripted dialog ends", "seconds" },
		{ _field_real, "scripted dialog ducking fade out time", nullptr, "seconds" },
		{ _field_real, "equipment channel ducking", nullptr, "dB", _field_id_decibels },
		{ _field_real, "equipment channel ducking fade in time", nullptr, "seconds" },
		{ _field_real, "equipment channel ducking sustain time", "how long this lasts after the equipment is turned off", "seconds" },
		{ _field_real, "equipment channel ducking fade out time", nullptr, "seconds" },
		{ _field_real, "between rounds ducking", nullptr, "dB", _field_id_decibels },
		{ _field_real, "between rounds ducking fade in time", nullptr, "seconds" },
		{ _field_real, "between rounds ducking sustain time", "how long this lasts after we get back in the game", "seconds" },
		{ _field_real, "between rounds ducking fade out time", nullptr, "seconds" },
		FIELD_EXPLANATION("misc", nullptr),
		{ _field_real, "doppler factor" },
		{ _field_char_enum, "stereo playback type", &sound_class_stereo_playback_definition },
		FIELD_PAD("B", 3),
		{ _field_real, "transmission multiplier" },
		{ _field_real, "transmission interpolation time", "default is 0.5 seconds", "seconds" },
		{ _field_long_integer, "xma compression level" },
		{ _field_real, "send to lfe gain", "When send (mono) to lfe is set, this is how much additional gain to apply", "dB", _field_id_decibels },
		{ _field_long_integer, "minimum facial animation delay", "setting this forces sounds of this class to be delayed while the facial animation resource loads.", "msecs" },
		{ _field_long_integer, "maximum facial animation delay", "setting this allows sounds of this class to be delayed while the facial animation resource loads.", "msecs" },
		{ _field_long_integer, "maximum facial animation blend", "setting this makes sounds blends in facial animation (will cut off at maximum facial animation delay).", "msecs" },
		{ _field_terminator }
	};

	STRINGS(sound_class_internal_flags_definition)
	{
		"valid",
		"is speech",
		"scripted",
		"stops with object",
		"valid xma compression level",
		"valid doppler factor",
		"valid obstruction factor",
		"multilingual",
		"don\'t strip languages",
		"valid underwater propagation",
		"valid suppress spatialization"
	};
	STRING_LIST(sound_class_internal_flags_definition, sound_class_internal_flags_definition_strings, _countof(sound_class_internal_flags_definition_strings));

	STRINGS(sound_class_external_flags_definition)
	{
		"plays during pause",
		"bypass default dsp effects{dry stereo mix}",
		"no object obstruction!",
		"use center speaker unspatialized",
		"send (mono) to lfe",
		"deterministic",
		"use huge transmission",
		"always use speakers",
		"don\'t strip from main menu",
		"ignore stereo headroom",
		"loop fade out is linear",
		"stop when object dies",
		"don\'t fade on game over",
		"don\'t promote priority by proximity"
	};
	STRING_LIST(sound_class_external_flags_definition, sound_class_external_flags_definition_strings, _countof(sound_class_external_flags_definition_strings));

	STRINGS(sound_class_cache_miss_mode_definition)
	{
		"discard",
		"postpone"
	};
	STRING_LIST(sound_class_cache_miss_mode_definition, sound_class_cache_miss_mode_definition_strings, _countof(sound_class_cache_miss_mode_definition_strings));

	STRINGS(sound_class_suppress_spatialization_string_defintion)
	{
		"first person",
		"third person"
	};
	STRING_LIST(sound_class_suppress_spatialization_string_defintion, sound_class_suppress_spatialization_string_defintion_strings, _countof(sound_class_suppress_spatialization_string_defintion_strings));

	STRINGS(sound_class_stereo_playback_definition)
	{
		"first person",
		"ambient"
	};
	STRING_LIST(sound_class_stereo_playback_definition, sound_class_stereo_playback_definition_strings, _countof(sound_class_stereo_playback_definition_strings));

	#define SOUND_CLASSES_BLOCK_STRUCT_ID { 0x75FD0DA6, 0x9ED40AC, 0x89E9FCF7, 0x523A0B97 }
	TAG_STRUCT(
		sound_classes_block_struct,
		"sound_classes_block_struct",
		"sound_classes_block_struct",
		"s_sound_classes_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_CLASSES_BLOCK_STRUCT_ID)
	{
		{ _field_block, "sound classes", &sound_class_block_block },
		{ _field_terminator }
	};

	#define SOUND_COMBINE_RESPONSE_BLOCK_ID { 0x79470448, 0xE27470F, 0x974CFBF3, 0x8EC2CA95 }
	TAG_STRUCT(
		sound_combine_response_block,
		"sound_combine_response_block",
		"sound_combine_response_block",
		"s_sound_combine_response_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_COMBINE_RESPONSE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_byte_flags, "response behavior", &sound_combine_response_flags },
		FIELD_PAD("SRBQXEK", 3),
		{ _field_tag_reference, "response", &sound_response_group_reference },
		{ _field_terminator }
	};

	STRINGS(sound_combine_response_flags)
	{
		"cancel queued",
		"cancel active",
		"cancel new"
	};
	STRING_LIST(sound_combine_response_flags, sound_combine_response_flags_strings, _countof(sound_combine_response_flags_strings));

	TAG_REFERENCE(sound_response_group_reference, SOUND_RESPONSE_TAG);

	#define SOUND_COMBINER_BLOCK_STRUCT_ID { 0x736BECD5, 0x8A73405C, 0x9918CE8F, 0x8972CB83 }
	TAG_STRUCT(
		sound_combiner_block_struct,
		"sound_combiner_block_struct",
		"sound_combiner_block_struct",
		"s_sound_combiner_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_COMBINER_BLOCK_STRUCT_ID)
	{
		{ _field_block, "entries", &sound_combiner_definition_entry_block_block },
		{ _field_real, "maximum play seconds", "this is determined at post process time" },
		{ _field_real, "minimum distance default", "this is determined at post process time" },
		{ _field_real, "maximum distance default", "this is determined at post process time" },
		{ _field_terminator }
	};

	#define SOUND_COMBINER_DEFINITION_ENTRY_BLOCK_ID { 0x32D8ADA1, 0xDFEF403A, 0x8826F6BC, 0x9605D1D2 }
	TAG_STRUCT(
		sound_combiner_definition_entry_block,
		"sound_combiner_definition_entry_block",
		"sound_combiner_definition_entry_block",
		"s_sound_combiner_definition_entry_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_COMBINER_DEFINITION_ENTRY_BLOCK_ID)
	{
		{ _field_tag_reference, "sound", &sound_old_group_sound_group_reference },
		{ _field_real_bounds, "delay bounds", "delay before this sound is played", "seconds" },
		{ _field_terminator }
	};

	#define SOUND_DEFINITION_LANGUAGE_PERMUTATION_INFO_BLOCK_ID { 0x87CF4394, 0xE57F4B18, 0xAA4D2FB5, 0x6C5606CB }
	TAG_STRUCT(
		sound_definition_language_permutation_info_block,
		"sound_definition_language_permutation_info_block",
		"sound_definition_language_permutation_info_block",
		"s_sound_definition_language_permutation_info_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_DEFINITION_LANGUAGE_PERMUTATION_INFO_BLOCK_ID)
	{
		{ _field_block, "raw info block", &sound_permutation_raw_info_block_block },
		{ _field_terminator }
	};

	#define SOUND_DIALOGUE_CONSTANTS_STRUCT_DEFINITION_ID { 0x81DF7335, 0x8D55482D, 0xBCD40D38, 0xA8F5D740 }
	TAG_STRUCT(
		sound_dialogue_constants_struct_definition,
		"sound_dialogue_constants_struct_definition",
		"sound_dialogue_constants_struct_definition",
		"s_sound_dialogue_constants_struct_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_DIALOGUE_CONSTANTS_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("named playing fractions", "these values correspond to the named play fractions in the dialogue editor (It\'s really skip fractions, but who cares?)"),
		{ _field_real, "almost never" },
		{ _field_real, "rarely" },
		{ _field_real, "somewhat" },
		{ _field_real, "often" },
		FIELD_PAD("VBEZIIDOF", 24),
		{ _field_terminator }
	};

	#define SOUND_DISTANCE_PARAMETERS_STRUCT_ID { 0x5E198FB1, 0xA69A46FA, 0x8FC2D774, 0xF76DCAAA }
	TAG_STRUCT(
		sound_distance_parameters_struct,
		"sound_distance_parameters_struct",
		"sound_distance_parameters_struct",
		"s_sound_distance_parameters_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_DISTANCE_PARAMETERS_STRUCT_ID)
	{
		FIELD_EXPLANATION("attenuation distances", "these settings vary how the sound fades as you move closer or further away from it."),
		{ _field_real, "don't obstruct distance", "don't obstruct below this distance", "world units" },
		{ _field_real, "don't play distance", "don't play below this distance", "world units" },
		{ _field_real, "attack distance", "start playing at full volume at this distance", "world units" },
		{ _field_real, "minimum distance", "start attenuating at this distance", "world units" },
		{ _field_real, "sustain begin distance", "set attenuation to sustain db at this distance", "world units" },
		{ _field_real, "sustain end distance", "continue attenuating to silence at this distance", "world units" },
		{ _field_real, "maximum distance", "the distance beyond which this sound is no longer audible", "world units" },
		{ _field_real, "sustain db", "the amount of attenuation between sustain begin and end", "dB" },
		{ _field_terminator }
	};

	#define SOUND_EFFECT_COLLECTION_BLOCK_STRUCT_ID { 0xA24760BC, 0xCAB4458A, 0x9782A026, 0xDBEF5B53 }
	TAG_STRUCT(
		sound_effect_collection_block_struct,
		"sound_effect_collection_block_struct",
		"sound_effect_collection_block_struct",
		"s_sound_effect_collection_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_EFFECT_COLLECTION_BLOCK_STRUCT_ID)
	{
		{ _field_block, "sound effects", &platform_sound_playback_block_block },
		{ _field_terminator }
	};

	#define SOUND_EFFECT_TEMPLATE_ADDITIONAL_SOUND_INPUT_BLOCK_ID { 0xC146FB4E, 0x44454229, 0xB830C667, 0x1A9F31F0 }
	TAG_STRUCT(
		sound_effect_template_additional_sound_input_block,
		"sound_effect_template_additional_sound_input_block",
		"sound_effect_template_additional_sound_input_block",
		"s_sound_effect_template_additional_sound_input_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_EFFECT_TEMPLATE_ADDITIONAL_SOUND_INPUT_BLOCK_ID)
	{
		{ _field_string_id, "dsp effect" },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "low frequency sound", &mapping_function }, // structure_version:2
		{ _field_real, "time period", nullptr, "seconds", _field_id_function_unknown },
		{ _field_terminator }
	};

	#define SOUND_EFFECT_TEMPLATE_PARAMETER_BLOCK_ID { 0xC097B16, 0x12DF427A, 0xA170402E, 0xBFD48E4F }
	TAG_STRUCT(
		sound_effect_template_parameter_block,
		"sound_effect_template_parameter_block",
		"sound_effect_template_parameter_block",
		"s_sound_effect_template_parameter_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_EFFECT_TEMPLATE_PARAMETER_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_enum, "type", &sound_effect_template_type_enum_definition },
		{ _field_word_flags, "flags", &sound_effect_template_parameter_flags_definition },
		{ _field_long_integer, "hardware offset" },
		{ _field_long_integer, "default enum integer value" },
		{ _field_real, "default scalar value" },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "default function", &mapping_function }, // structure_version:2
		{ _field_real, "minimum scalar value" },
		{ _field_real, "maximum scalar value" },
		{ _field_terminator }
	};

	STRINGS(sound_effect_template_type_enum_definition)
	{
		"integer",
		"real",
		"filter type"
	};
	STRING_LIST(sound_effect_template_type_enum_definition, sound_effect_template_type_enum_definition_strings, _countof(sound_effect_template_type_enum_definition_strings));

	STRINGS(sound_effect_template_parameter_flags_definition)
	{
		"expose as function"
	};
	STRING_LIST(sound_effect_template_parameter_flags_definition, sound_effect_template_parameter_flags_definition_strings, _countof(sound_effect_template_parameter_flags_definition_strings));

	#define SOUND_EFFECT_TEMPLATE_STRUCT_DEFINITION_ID { 0xAB4E33F8, 0x77314AE8, 0x9EC2A912, 0x98B0CCCD }
	TAG_STRUCT(
		sound_effect_template_struct_definition,
		"sound_effect_template_struct_definition",
		"sound_effect_template_struct_definition",
		"s_sound_effect_template_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_EFFECT_TEMPLATE_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "template collection", &sound_effect_templates_block_block },
		{ _field_string_id, "internal dsp effect name", MAKE_ALT_NAMES("input effect name") },
		{ _field_block, "additional sound inputs", &sound_effect_template_additional_sound_input_block_block },
		{ _field_terminator }
	};

	#define SOUND_EFFECT_TEMPLATES_BLOCK_ID { 0x5C8458F8, 0x94B84560, 0x93EBB56F, 0xA67E6E02 }
	TAG_STRUCT(
		sound_effect_templates_block,
		"sound_effect_templates_block",
		"sound_effect_templates_block",
		"s_sound_effect_templates_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_EFFECT_TEMPLATES_BLOCK_ID)
	{
		{ _field_string_id, "dsp effect" },
		FIELD_EXPLANATION("WARNING", "DON\'T MODIFY THIS TAG UNLESS YOU KNOW WHAT YOU ARE DOING"),
		{ _field_data, "explanation", &sound_effect_template_explanation },
		{ _field_long_flags, "flags", &sound_effect_template_flags_definition },
		{ _field_short_integer, "dsp state offset" },
		{ _field_short_integer, "dsp state size" },
		{ _field_block, "parameters", &sound_effect_template_parameter_block_block },
		{ _field_terminator }
	};

	STRINGS(sound_effect_template_flags_definition)
	{
		"use high level parameters",
		"custom parameters"
	};
	STRING_LIST(sound_effect_template_flags_definition, sound_effect_template_flags_definition_strings, _countof(sound_effect_template_flags_definition_strings));

	#define SOUND_ENVIRONMENT_BLOCK_STRUCT_ID { 0x9AB4B8F2, 0x64524BEC, 0x9D4F14BA, 0x2A6D23A4 }
	TAG_STRUCT(
		sound_environment_block_struct,
		"sound_environment_block_struct",
		"sound_environment_block_struct",
		"s_sound_environment_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_ENVIRONMENT_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("Reverb Settings", nullptr),
		{ _field_struct, "reverb settings", &global_sound_reverb_block },
		FIELD_EXPLANATION("Forced Lowpass", "This will override obstruction and occlusion if you set the cutoff frequency to a non-zero value. Use the individual classes\' \"forced lowpass wet mix\" value to alter the mix."),
		{ _field_struct, "lowpass settings", &global_sound_lowpass_block },
		{ _field_terminator }
	};

	#define SOUND_EQUALIZER_BAND_SETTINGS_BLOCK_STRUCT_ID { 0xF89C600C, 0x62DA422A, 0xAF5B1D5D, 0xD1DD0DB }
	TAG_STRUCT(
		sound_equalizer_band_settings_block_struct,
		"sound_equalizer_band_settings_block_struct",
		"sound_equalizer_band_settings_block_struct",
		"s_sound_equalizer_band_settings_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_EQUALIZER_BAND_SETTINGS_BLOCK_STRUCT_ID)
	{
		{ _field_long_enum, "type", &equalizer_band_type_definition },
		FIELD_CUSTOM("frequency", _tag_field_custom_type_slider),
		{ _field_real, "frequency", nullptr, "Hz", _tag_field_custom_type_slider },
		FIELD_CUSTOM("gain", _tag_field_custom_type_slider),
		{ _field_real, "gain", nullptr, "dB", _tag_field_custom_type_slider },
		FIELD_CUSTOM("q", _tag_field_custom_type_slider),
		{ _field_real, "q", _tag_field_custom_type_slider },
		{ _field_terminator }
	};

	STRINGS(equalizer_band_type_definition)
	{
		"band pass",
		"low shelf",
		"high shelf",
		"low pass",
		"high pass"
	};
	STRING_LIST(equalizer_band_type_definition, equalizer_band_type_definition_strings, _countof(equalizer_band_type_definition_strings));

	#define SOUND_EXTRA_INFO_BLOCK_STRUCT_ID { 0xA88172BA, 0x8BEC4641, 0x8E2A9EDB, 0x3B346B18 }
	TAG_STRUCT(
		sound_extra_info_block_struct,
		"sound_extra_info_block_struct",
		"sound_extra_info_block_struct",
		"s_sound_extra_info_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_EXTRA_INFO_BLOCK_STRUCT_ID)
	{
		{ _field_block, "language permutation info", &sound_definition_language_permutation_info_block_block },
		{ _field_block, "facial animation resource languages", &facial_animation_language_block_block },
		{ _field_terminator }
	};

	#define SOUND_GESTALT_CODEC_BLOCK_ID { 0xEA72FE1B, 0xD8C74A73, 0xB3E54E1C, 0xCF7E2316 }
	TAG_STRUCT(
		sound_gestalt_codec_block,
		"sound_gestalt_codec_block",
		"sound_gestalt_codec_block",
		"s_sound_gestalt_codec_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GESTALT_CODEC_BLOCK_ID)
	{
		{ _field_char_enum, "sample rate", &sound_sample_rate_enum },
		{ _field_char_enum, "encoding", &sound_encoding_enum },
		{ _field_char_enum, "compression", &sound_compression_enum },
		{ _field_terminator }
	};

	#define SOUND_GESTALT_CUSTOM_PLAYBACK_BLOCK_ID { 0x85AB06BE, 0x4C484E51, 0xB1632921, 0x407A7122 }
	TAG_STRUCT(
		sound_gestalt_custom_playback_block,
		"sound_gestalt_custom_playback_block",
		"sound_gestalt_custom_playback_block",
		"s_sound_gestalt_custom_playback_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GESTALT_CUSTOM_PLAYBACK_BLOCK_ID)
	{
		{ _field_struct, "playback definition", &platform_sound_playback_struct },
		{ _field_terminator }
	};

	#define SOUND_GESTALT_FACIAL_ANIMATION_BLOCK_ID { 0x855E8E14, 0xC58C4761, 0x89AB85D2, 0x1F8A629F }
	TAG_STRUCT(
		sound_gestalt_facial_animation_block,
		"sound_gestalt_facial_animation_block",
		"sound_gestalt_facial_animation_block",
		"s_sound_gestalt_facial_animation_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GESTALT_FACIAL_ANIMATION_BLOCK_ID)
	{
		{ _field_pageable_resource, "facial animation resource", &facial_animation_resource_definition },
		{ _field_terminator }
	};

	#define SOUND_GESTALT_IMPORT_NAMES_BLOCK_ID { 0xDEDBEFA5, 0xCF91450E, 0xB92C4760, 0x1487AD06 }
	TAG_STRUCT(
		sound_gestalt_import_names_block,
		"sound_gestalt_import_names_block",
		"sound_gestalt_import_names_block",
		"s_sound_gestalt_import_names_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GESTALT_IMPORT_NAMES_BLOCK_ID)
	{
		{ _field_string_id, "import name" },
		{ _field_terminator }
	};

	#define SOUND_GESTALT_LAYER_MARKERS_BLOCK_ID { 0x6565F2C0, 0x50FF40A9, 0x8CA6AFDA, 0xD068C4BC }
	TAG_STRUCT(
		sound_gestalt_layer_markers_block,
		"sound_gestalt_layer_markers_block",
		"sound_gestalt_layer_markers_block",
		"s_sound_gestalt_layer_markers_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GESTALT_LAYER_MARKERS_BLOCK_ID)
	{
		{ _field_long_integer, "sample offset" },
		{ _field_terminator }
	};

	#define SOUND_GESTALT_PERMUTATION_LANGUAGES_BLOCK_STRUCT_ID { 0xC2E50233, 0xA6814C87, 0x8DAE2CAC, 0xAE66E3A1 }
	TAG_STRUCT(
		sound_gestalt_permutation_languages_block_struct,
		"sound_gestalt_permutation_languages_block_struct",
		"sound_gestalt_permutation_languages_block_struct",
		"s_sound_gestalt_permutation_languages_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GESTALT_PERMUTATION_LANGUAGES_BLOCK_STRUCT_ID)
	{
		{ _field_long_integer, "permutation index" },
		{ _field_long_integer, "english uncompressed sample count" },
		{ _field_long_integer, "english first chunk index" },
		{ _field_long_integer, "english chunk count" },
		{ _field_long_integer, "japanese uncompressed sample count" },
		{ _field_long_integer, "japanese first chunk index" },
		{ _field_long_integer, "japanese chunk count" },
		{ _field_long_integer, "german uncompressed sample count" },
		{ _field_long_integer, "german first chunk index" },
		{ _field_long_integer, "german chunk count" },
		{ _field_long_integer, "french uncompressed sample count" },
		{ _field_long_integer, "french first chunk index" },
		{ _field_long_integer, "french chunk count" },
		{ _field_long_integer, "spanish uncompressed sample count" },
		{ _field_long_integer, "spanish first chunk index" },
		{ _field_long_integer, "spanish chunk count" },
		{ _field_long_integer, "mexican_spanish uncompressed sample count" },
		{ _field_long_integer, "mexican_spanish first chunk index" },
		{ _field_long_integer, "mexican_spanish chunk count" },
		{ _field_long_integer, "italian uncompressed sample count" },
		{ _field_long_integer, "italian first chunk index" },
		{ _field_long_integer, "italian chunk count" },
		{ _field_long_integer, "korean uncompressed sample count" },
		{ _field_long_integer, "korean first chunk index" },
		{ _field_long_integer, "korean chunk count" },
		{ _field_long_integer, "traditional_chinese uncompressed sample count" },
		{ _field_long_integer, "traditional_chinese first chunk index" },
		{ _field_long_integer, "traditional_chinese chunk count" },
		{ _field_long_integer, "simplified_chinese uncompressed sample count" },
		{ _field_long_integer, "simplified_chinese first chunk index" },
		{ _field_long_integer, "simplified_chinese chunk count" },
		{ _field_long_integer, "portuguese uncompressed sample count" },
		{ _field_long_integer, "portuguese first chunk index" },
		{ _field_long_integer, "portuguese chunk count" },
		{ _field_long_integer, "polish uncompressed sample count" },
		{ _field_long_integer, "polish first chunk index" },
		{ _field_long_integer, "polish chunk count" },
		{ _field_long_integer, "russian uncompressed sample count" },
		{ _field_long_integer, "russian first chunk index" },
		{ _field_long_integer, "russian chunk count" },
		{ _field_long_integer, "danish uncompressed sample count" },
		{ _field_long_integer, "danish first chunk index" },
		{ _field_long_integer, "danish chunk count" },
		{ _field_long_integer, "finnish uncompressed sample count" },
		{ _field_long_integer, "finnish first chunk index" },
		{ _field_long_integer, "finnish chunk count" },
		{ _field_long_integer, "dutch uncompressed sample count" },
		{ _field_long_integer, "dutch first chunk index" },
		{ _field_long_integer, "dutch chunk count" },
		{ _field_long_integer, "norwegian uncompressed sample count" },
		{ _field_long_integer, "norwegian first chunk index" },
		{ _field_long_integer, "norwegian chunk count" },
		{ _field_terminator }
	};

	#define SOUND_GESTALT_PERMUTATIONS_BLOCK_ID { 0x66E48B0, 0x55A34789, 0x8605F561, 0x771453C4 }
	TAG_STRUCT(
		sound_gestalt_permutations_block,
		"sound_gestalt_permutations_block",
		"sound_gestalt_permutations_block",
		"s_sound_gestalt_permutations_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GESTALT_PERMUTATIONS_BLOCK_ID)
	{
		{ _field_short_block_index, "name", &sound_gestalt_import_names_block_block },
		{ _field_short_integer, "encoded skip fraction" },
		{ _field_long_integer, "uncompressed sample count" },
		{ _field_long_integer, "first chunk index" },
		{ _field_short_integer, "chunk count" },
		{ _field_char_integer, "encoded gain", nullptr, "dB" },
		{ _field_char_integer, "permutation info index" },
		{ _field_word_integer, "first layer marker index" },
		{ _field_word_integer, "layer marker count" },
		{ _field_terminator }
	};

	#define SOUND_GESTALT_PITCH_RANGE_PARAMETERS_BLOCK_ID { 0xD2578760, 0xAD2B4BD4, 0xBF890920, 0x60A1D630 }
	TAG_STRUCT(
		sound_gestalt_pitch_range_parameters_block,
		"sound_gestalt_pitch_range_parameters_block",
		"sound_gestalt_pitch_range_parameters_block",
		"s_sound_gestalt_pitch_range_parameters_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GESTALT_PITCH_RANGE_PARAMETERS_BLOCK_ID)
	{
		{ _field_short_integer, "natural pitch", nullptr, "cents" },
		{ _field_short_integer, "PAD" },
		{ _field_short_integer_bounds, "bend bounds", "the range of pitches that will be represented using this sample.", "cents" },
		{ _field_short_integer_bounds, "max gain pitch bounds", nullptr, "cents" },
		{ _field_short_integer_bounds, "playback pitch bounds", nullptr, "cents" },
		{ _field_terminator }
	};

	#define SOUND_GESTALT_PITCH_RANGES_BLOCK_ID { 0x5C7B7E97, 0x95FD457B, 0x991EDD3F, 0x533CD08C }
	TAG_STRUCT(
		sound_gestalt_pitch_ranges_block,
		"sound_gestalt_pitch_ranges_block",
		"sound_gestalt_pitch_ranges_block",
		"s_sound_gestalt_pitch_ranges_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GESTALT_PITCH_RANGES_BLOCK_ID)
	{
		{ _field_short_block_index, "name", &sound_gestalt_import_names_block_block },
		{ _field_short_block_index, "parameters", &sound_gestalt_pitch_range_parameters_block_block },
		{ _field_short_integer, "encoded permutation data" },
		{ _field_short_integer, "first runtime permutation flag index" },
		{ _field_long_integer, "encoded first permutation and counts" },
		{ _field_terminator }
	};

	#define SOUND_GESTALT_PLAYBACK_BLOCK_ID { 0x97618ABE, 0x6C854431, 0x9D80FAB7, 0xF199F2EC }
	TAG_STRUCT(
		sound_gestalt_playback_block,
		"sound_gestalt_playback_block",
		"sound_gestalt_playback_block",
		"s_sound_gestalt_playback_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GESTALT_PLAYBACK_BLOCK_ID)
	{
		{ _field_struct, "playback", &sound_playback_parameters_struct },
		{ _field_terminator }
	};

	#define SOUND_GESTALT_PROMOTIONS_BLOCK_ID { 0xCC80F520, 0xE19E47AB, 0x9568534D, 0x2010E31B }
	TAG_STRUCT(
		sound_gestalt_promotions_block,
		"sound_gestalt_promotions_block",
		"sound_gestalt_promotions_block",
		"s_sound_gestalt_promotions_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GESTALT_PROMOTIONS_BLOCK_ID)
	{
		{ _field_struct, "runtime promotion storage", &sound_promotion_parameters_struct }, // structure_version:1
		{ _field_terminator }
	};

	#define SOUND_GESTALT_RUNTIME_PERMUTATION_BIT_VECTOR_BLOCK_ID { 0xBCDA51CD, 0xDBB444BD, 0xB166F6B5, 0x6A59110C }
	TAG_STRUCT(
		sound_gestalt_runtime_permutation_bit_vector_block,
		"sound_gestalt_runtime_permutation_bit_vector_block",
		"sound_gestalt_runtime_permutation_bit_vector_block",
		"s_sound_gestalt_runtime_permutation_bit_vector_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GESTALT_RUNTIME_PERMUTATION_BIT_VECTOR_BLOCK_ID)
	{
		{ _field_char_integer, "runtime permutation bit vector" },
		{ _field_terminator }
	};

	#define SOUND_GESTALT_SCALE_BLOCK_ID { 0x293C6CE9, 0x552C4FF1, 0x9FEBA09B, 0x46CD5D15 }
	TAG_STRUCT(
		sound_gestalt_scale_block,
		"sound_gestalt_scale_block",
		"sound_gestalt_scale_block",
		"s_sound_gestalt_scale_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GESTALT_SCALE_BLOCK_ID)
	{
		{ _field_struct, "scale", &sound_scale_modifiers_struct },
		{ _field_terminator }
	};

	#define SOUND_GLOBAL_MIX_STRUCT_ID { 0xA2C05D8F, 0xA92D4D82, 0x9534A331, 0x4BD3EF82 }
	TAG_STRUCT(
		sound_global_mix_struct,
		"sound_global_mix_struct",
		"sound_global_mix_struct",
		"s_sound_global_mix_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GLOBAL_MIX_STRUCT_ID)
	{
		{ _field_real, "mono unspatialized gain", nullptr, "dB" },
		{ _field_real, "stereo to 3d gain", nullptr, "dB" },
		{ _field_real, "rear surround to front stereo gain", nullptr, "dB" },
		FIELD_EXPLANATION("surround center mix", "for sounds that have \"use center speaker unspatialized\" checked when outputting in surround"),
		{ _field_struct, "surround center mix", &sound_center_mix_struct },
		FIELD_EXPLANATION("stereo center mix", "for sounds that have \"use center speaker unspatialized\" checked when outputting in stereo"),
		{ _field_struct, "stereo center mix", &sound_center_mix_struct },
		FIELD_EXPLANATION("radio surround center mix", "for the radio effect when outputting in surround"),
		{ _field_struct, "radio surround center mix", &sound_center_mix_struct },
		FIELD_EXPLANATION("radio stereo center mix", "for the radio effect when outputting in stereo"),
		{ _field_struct, "radio stereo center mix", &sound_center_mix_struct },
		FIELD_EXPLANATION("more sound lovin'", nullptr),
		{ _field_real, "stereo unspatialized gain", nullptr, "dB" },
		{ _field_real, "quad route to lfe gain", nullptr, "dB" },
		FIELD_EXPLANATION("last minute values", nullptr),
		{ _field_real, "solo player fade out delay", nullptr, "seconds" },
		{ _field_real, "solo player fade out time", nullptr, "seconds" },
		{ _field_real, "solo player fade in time", nullptr, "seconds" },
		{ _field_real, "game music fade out time", nullptr, "seconds" },
		FIELD_EXPLANATION("debugging stuff", nullptr),
		{ _field_tag_reference, "play on unplayable sound", &sound_old_group_sound_group_reference },
		{ _field_real, "left/right bleed", nullptr, nullptr, "[0 = no bleed, 1 = swap left/right, 0.5 = mono" },
		{ _field_real, "remote voice boost", nullptr, "output= (1 + boost)*input" },
		{ _field_terminator }
	};

	#define SOUND_GLOBAL_PROPAGATION_BLOCK_STRUCT_ID { 0xC5AF7C88, 0xA7864D2E, 0xA2207469, 0xA4EDB0BE }
	TAG_STRUCT(
		sound_global_propagation_block_struct,
		"sound_global_propagation_block_struct",
		"sound_global_propagation_block_struct",
		"s_sound_global_propagation_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GLOBAL_PROPAGATION_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("underwater propagation globals", nullptr),
		{ _field_struct, "underwater propagation", &sound_propagation_definition_struct },
		{ _field_terminator }
	};

	#define SOUND_GLOBALS_BLOCK_ID { 0x49B78628, 0xC8024A1F, 0x9F59E6A4, 0x7AB7B1C5 }
	TAG_STRUCT(
		sound_globals_block,
		"sound_globals_block",
		"sound_globals_block",
		"s_sound_globals_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_GLOBALS_BLOCK_ID)
	{
		{ _field_tag_reference, "sound classes", &sound_classes_group_reference },
		{ _field_tag_reference, "sound effects", &sound_effect_collection_group_reference },
		{ _field_tag_reference, "sound mix", &sound_mix_group_reference },
		{ _field_tag_reference, "sound combat dialogue constants", &sound_dialogue_constants_group_reference },
		{ _field_tag_reference, "sound propagation", &sound_global_propagation_group_reference },
		{ _field_tag_reference, "Init sound bank", "Init sound bank for WWise.", &soundbank_group_reference },
		{ _field_tag_reference, "Global sound bank", "Global sound bank for WWise.", &soundbank_group_reference },
		{ _field_tag_reference, "Extra sound bank", "The other sound bank for WWise.", &soundbank_group_reference },
		{ _field_tag_reference, "Campaign sound bank", "Extra sound bank for WWise - only loaded for Campaign.", &soundbank_group_reference },
		{ _field_tag_reference, "Multiplayer sound bank", "Extra sound bank for WWise - only loaded for MP - PVP.", &soundbank_group_reference },
		{ _field_block, "Streaming pack files", &streamingpackblock_block },
		{ _field_block, "un-spatialized campaign sounds", &campaign_unspatialized_sounds_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(sound_classes_group_reference, SOUND_CLASSES_TAG);

	TAG_REFERENCE(sound_mix_group_reference, SOUND_MIX_TAG);

	TAG_REFERENCE(sound_dialogue_constants_group_reference, SOUND_DIALOGUE_CONSTANTS_TAG);

	TAG_REFERENCE(sound_global_propagation_group_reference, SOUND_GLOBAL_PROPAGATION_TAG);

	#define SOUND_INCIDENT_RESPONSE_DATA_BLOCK_ID { 0x73567E85, 0xA1DD41EE, 0xB91F166A, 0x5D246C98 }
	TAG_STRUCT(
		sound_incident_response_data_block,
		"sound_incident_response_data_block",
		"sound_incident_response_data_block",
		"s_sound_incident_response_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_INCIDENT_RESPONSE_DATA_BLOCK_ID)
	{
		{ _field_byte_flags, "audience", &sound_audience_flags },
		{ _field_byte_flags, "excluded audience", &sound_audience_flags },
		{ _field_byte_flags, "split screen flags", &sound_splitscreen_flags },
		FIELD_PAD("RMPES", 1),
		{ _field_tag_reference, "response", &sound_response_group_reference },
		{ _field_terminator }
	};

	STRINGS(sound_audience_flags)
	{
		"cause player",
		"cause team",
		"effect player",
		"effect team",
		"everyone"
	};
	STRING_LIST(sound_audience_flags, sound_audience_flags_strings, _countof(sound_audience_flags_strings));

	STRINGS(sound_splitscreen_flags)
	{
		"disable if split screen",
		"disable if not split screen",
		"disable if split screen on different teams",
		"disable if split screen all on same team"
	};
	STRING_LIST(sound_splitscreen_flags, sound_splitscreen_flags_strings, _countof(sound_splitscreen_flags_strings));

	#define SOUND_INCIDENT_RESPONSE_STRUCT_DEFINITION_ID { 0x96ADAD4E, 0xA6074EC6, 0xA626867A, 0x6DE314EF }
	TAG_STRUCT(
		sound_incident_response_struct_definition,
		"sound_incident_response_struct_definition",
		"sound_incident_response_struct_definition",
		"s_sound_incident_response_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_INCIDENT_RESPONSE_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "responses", &sound_incident_response_data_block_block },
		{ _field_terminator }
	};

	#define SOUND_LANGUAGE_INFO_BLOCK_ID { 0xD69CF235, 0x9A8943DB, 0xBFE85363, 0x9C6857EC }
	TAG_STRUCT(
		sound_language_info_block,
		"sound_language_info_block",
		"sound_language_info_block",
		"s_sound_language_info_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_LANGUAGE_INFO_BLOCK_ID)
	{
		{ _field_long_enum, "language", &sound_language_enum_definition },
		{ _field_block, "permutation durations", &sound_permutation_language_info_block },
		{ _field_block, "pitch range durations", &sound_pitch_range_language_info_block },
		{ _field_terminator }
	};

	#define SOUND_LOOPING_STRUCT_DEFINITION_ID { 0xD492E38E, 0x64EC43C3, 0x8F8AC4EC, 0xE04E0DB9 }
	TAG_STRUCT(
		sound_looping_struct_definition,
		"sound_looping_struct_definition",
		"sound_looping_struct_definition",
		"s_sound_looping_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_LOOPING_STRUCT_DEFINITION_ID)
	{
		{ _field_long_flags, "flags", &looping_sound_flags },
		{ _field_real_bounds, "marty's music time", nullptr, "seconds" },
		{ _field_real_bounds, "runtime distance bounds" },
		{ _field_real, "maximum flyby range distance" },
		{ _field_short_enum, "runtime sound class", &sound_class_enum },
		FIELD_PAD("asdf", 2),
		{ _field_string_id, "master marker track", "This track's markers, flags, gain and fade settings are copied to the other tracks. Its gain and fadeout settings are also copied to the details. If you want to change the master track use the sound-looping tool command" },
		{ _field_real, "maximum radius" },
		{ _field_block, "tracks", "tracks play in parallel and loop continuously for the duration of the looping sound.", &looping_sound_track_block_block },
		{ _field_block, "detail sounds", "detail sounds play at random throughout the duration of the looping sound.", &looping_sound_detail_block_block },
		{ _field_terminator }
	};

	STRINGS(looping_sound_flags)
	{
		"deafening to AIs#when used as a background stereo track, causes nearby AIs to be unable to hear",
		"not a loop#this is a collection of permutations strung together that should play once then stop.",
		"stops music#all other music loops will stop when this one starts.",
		"always spatialize#always play as 3d sound, even in first person",
		"synchronize with owner{synchronize playback}#synchronizes playback with other looping sounds attached to the owner of this sound",
		"synchronize tracks",
		"fake spatialization with distance",
		"combine all 3d playback",
		"persistent flyby#like a laser blast",
		"don\'t apply random spatialization to details",
		"allow marker stitching#you need to reimport the sound_looping for this to take effect",
		"don\'t delay retries!#don\'t delay retrying the looping sound, in case the bank is loaded now",
		"Use vehicle parent for playerness#Look to the parent of the vehicle. Only works on vehicles. Duh",
		"Implicit speed RPTC#looping_sound_speed"
	};
	STRING_LIST(looping_sound_flags, looping_sound_flags_strings, _countof(looping_sound_flags_strings));

	#define SOUND_MIX_BLOCK_STRUCT_ID { 0xE80CFFF1, 0xA42648F0, 0xB072961C, 0x74F379DE }
	TAG_STRUCT(
		sound_mix_block_struct,
		"sound_mix_block_struct",
		"sound_mix_block_struct",
		"s_sound_mix_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_MIX_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "default transmission settings", &sound_transmission_definition_struct },
		FIELD_EXPLANATION("first person left side mix", "for first person sounds to the left of you"),
		{ _field_struct, "first person left side mix", &sound_stereo_mix_struct },
		FIELD_EXPLANATION("first person middle mix", "for first person sounds between your ears"),
		{ _field_struct, "first person middle mix", &sound_stereo_mix_struct },
		FIELD_EXPLANATION("first person right side mix", "for first person sounds to the right of you"),
		{ _field_struct, "first person right side mix", &sound_stereo_mix_struct },
		FIELD_EXPLANATION("first person surround mix", nullptr),
		{ _field_struct, "first person surround mix", &sound_surround_mix_struct },
		FIELD_EXPLANATION("ambient surround mix", nullptr),
		{ _field_struct, "ambient surround mix", &sound_surround_mix_struct },
		FIELD_EXPLANATION("global mix", nullptr),
		{ _field_struct, "global mix", &sound_global_mix_struct },
		{ _field_terminator }
	};

	#define SOUND_OLD_BLOCK_STRUCT_ID { 0xBF8174A7, 0x7DF64FD4, 0x9E177D93, 0xC7401C9C }
	TAG_STRUCT(
		sound_old_block_struct,
		"sound_old_block_struct",
		"sound_old_block_struct",
		"s_sound_old_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_OLD_BLOCK_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &sound_definition_flags },
		{ _field_long_flags, "import flags", &sound_import_flags },
		{ _field_long_flags, "xsync flags", &sound_xsync_flags },
		{ _field_char_enum, "class", &sound_class_enum },
		{ _field_char_enum, "sample rate", &sound_sample_rate_enum },
		{ _field_char_integer, "override xma compression", nullptr, nullptr, "[1-100]" },
		{ _field_char_enum, "import type", &sound_import_type_enum },
		{ _field_struct, "playback", &sound_playback_parameters_struct },
		{ _field_struct, "scale", &sound_scale_modifiers_struct },
		FIELD_EXPLANATION("sub priority", "Used to compare individual sounds in the same class. Higher means more important. (Negative means do not use.)"),
		{ _field_real, "sub priority" },
		FIELD_EXPLANATION("import properties", nullptr),
		{ _field_char_enum, "encoding", &sound_encoding_enum },
		{ _field_char_enum, "compression", &sound_compression_enum },
		FIELD_PAD("pad", 2),
		{ _field_struct, "promotion", &sound_promotion_parameters_struct }, // structure_version:1
		FIELD_PAD("runtime pad", 4),
		{ _field_block, "pitch ranges", "pitch ranges allow multiple samples to represent the same sound at different pitches", &sound_pitch_range_block_block },
		{ _field_block, "platform parameters", &sound_platform_sound_playback_block_block },
		{ _field_pageable_resource, "sound data resource", &sound_resource_definition },
		{ _field_block, "extra info", &sound_extra_info_block_block },
		{ _field_block, "language info", &sound_language_info_block_block },
		{ _field_terminator }
	};

	#define SOUND_PERMUTATION_CHUNK_BLOCK_ID { 0xBDB277FD, 0x4314F54, 0x95098A19, 0x71D29FE5 }
	VERSIONED_TAG_STRUCT(
		sound_permutation_chunk_block,
		"sound_permutation_chunk_block",
		"sound_permutation_chunk_block",
		"s_sound_permutation_chunk_block",
		SET_DELETE_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_PERMUTATION_CHUNK_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 5 },
		{ _field_long_integer, "file offset" },
		{ _field_long_integer, "encoded size and flags" },
		{ _field_long_block_index, "cache index", &g_null_block_block },
		{ _field_long_integer, "xma2_source_buffer_sample_start" },
		{ _field_long_integer, "xma2_source_buffer_sample_end" },
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_long_integer, "file offset" },
		{ _field_short_integer, "value" },
		{ _field_short_integer, "value" },
		{ _field_long_integer, "value" },
		{ _field_long_integer, "value" },
		
		{ _field_terminator }
	};

	#define SOUND_PERMUTATION_LANGUAGE_INFO_ID { 0xAA0C06AC, 0x53514559, 0x98CCC8D0, 0x410A29CA }
	TAG_STRUCT(
		sound_permutation_language_info,
		"sound_permutation_language_info",
		"sound_permutation_language_info",
		"s_sound_permutation_language_info",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_PERMUTATION_LANGUAGE_INFO_ID)
	{
		{ _field_short_integer, "duration in hs ticks" },
		{ _field_terminator }
	};

	#define SOUND_PERMUTATION_LANGUAGES_BLOCK_STRUCT_ID { 0xAC83695F, 0xAB6349CB, 0x8B5CAF87, 0x9F79EC46 }
	TAG_STRUCT(
		sound_permutation_languages_block_struct,
		"sound_permutation_languages_block_struct",
		"sound_permutation_languages_block_struct",
		"s_sound_permutation_languages_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_PERMUTATION_LANGUAGES_BLOCK_STRUCT_ID)
	{
		{ _field_long_integer, "uncompressed sample count" },
		{ _field_block, "chunks", &sound_permutation_chunk_block_block },
		{ _field_terminator }
	};

	#define SOUND_PERMUTATION_MARKER_BLOCK_ID { 0x4679E356, 0x4CB34837, 0xA34808AC, 0x6DCA28A0 }
	TAG_STRUCT(
		sound_permutation_marker_block,
		"sound_permutation_marker_block",
		"sound_permutation_marker_block",
		"s_sound_permutation_marker_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_PERMUTATION_MARKER_BLOCK_ID)
	{
		{ _field_long_integer, "marker id" },
		{ _field_string_id, "name" },
		{ _field_long_integer, "sample offset" },
		FIELD_CUSTOM("value", _tag_field_custom_type_sound_marker_playback),
		{ _field_terminator }
	};

	#define SOUND_PERMUTATION_RAW_INFO_BLOCK_ID { 0xDC6BFACE, 0x54E5414E, 0xB0B03C61, 0x2ED507A1 }
	TAG_STRUCT(
		sound_permutation_raw_info_block,
		"sound_permutation_raw_info_block",
		"sound_permutation_raw_info_block",
		"s_sound_permutation_raw_info_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_PERMUTATION_RAW_INFO_BLOCK_ID)
	{
		{ _field_string_id, "skip fraction name" },
		{ _field_data, "samples", "sampled sound data", &sound_samples },
		{ _field_block, "markers", &sound_permutation_marker_block_block },
		{ _field_block, "layer markers", &sound_permutation_marker_block_block },
		{ _field_block, "xma2 seek table", &sound_xma2_seek_table_block_block },
		{ _field_short_enum, "compression", &sound_compression_enum },
		{ _field_char_enum, "language", &sound_language_enum_definition },
		FIELD_PAD("ZHDGBHWS", 1),
		{ _field_long_integer, "sample count" },
		{ _field_long_integer, "resource sample offset" },
		{ _field_long_integer, "resource sample size" },
		{ _field_terminator }
	};

	#define SOUND_PERMUTATIONS_BLOCK_ID { 0x1426CFA4, 0xDA4206, 0xAD7C0A62, 0xDA270964 }
	TAG_STRUCT(
		sound_permutations_block,
		"sound_permutations_block",
		"sound_permutations_block",
		"s_sound_permutations_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_PERMUTATIONS_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_sound_playback),
		{ _field_string_id, "name", "name of the file from which this sample was imported" },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_real_fraction, "skip fraction", "fraction of requests to play this permutation that are ignored (a different permutation is selected.)" },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_real, "gain", "additional attenuation when played", "dB", _field_id_decibels },
		{ _field_short_block_index_custom_search, "raw info", &permutation_info_search_definition },
		{ _field_short_block_index, "play fraction type", &g_null_block_block },
		{ _field_short_integer_bounds, "mission range", "first and last mission ids this permutation can play in (zero values are ignored)" },
		{ _field_word_flags, "permutation flags", &sound_permutation_external_flags },
		{ _field_word_flags, "flags", &sound_permutation_flags },
		{ _field_block, "languages", &sound_permutation_languages_block_block },
		{ _field_terminator }
	};

	STRINGS(sound_permutation_external_flags)
	{
		"don\'t play in dvd build"
	};
	STRING_LIST(sound_permutation_external_flags, sound_permutation_external_flags_strings, _countof(sound_permutation_external_flags_strings));

	STRING_LIST(sound_permutation_flags, empty_string_list, 0);

	#define SOUND_PITCH_RANGE_BLOCK_ID { 0x77F72A4F, 0x42D64D55, 0xB4072E44, 0xE750C29 }
	TAG_STRUCT(
		sound_pitch_range_block,
		"sound_pitch_range_block",
		"sound_pitch_range_block",
		"s_sound_pitch_range_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_PITCH_RANGE_BLOCK_ID)
	{
		{ _field_string_id, "name", "the name of the imported pitch range directory" },
		FIELD_EXPLANATION("pitch control", "these settings control what pitches this set of samples represents. if there is only one pitch range, all three values are ignored."),
		{ _field_short_integer, "natural pitch", "the apparent pitch when these samples are played at their recorded pitch.", "cents" },
		FIELD_PAD("KCTSDWPP", 2),
		{ _field_short_integer_bounds, "bend bounds", "the range of pitches that will be represented using this sample.", "cents" },
		{ _field_short_integer_bounds, "full volume bounds", "the range of pitches that map to full gain.", "cents" },
		{ _field_short_integer_bounds, "playback bend bounds", "the actual pitch will be clamped to this", "cents", _field_id_function_unknown },
		{ _field_struct, "distance parameters", &sound_distance_parameters_struct },
		FIELD_PAD("YAMTVB", 4),
		{ _field_char_integer, "runtime usable permutation count" },
		{ _field_byte_flags, "xsync flags", &sound_pitch_range_internal_xsync_flags },
		FIELD_PAD("asdf", 2),
		{ _field_block, "permutations", "permutations represent equivalent variations of this sound.", &sound_permutations_block_block },
		{ _field_terminator }
	};

	STRINGS(sound_pitch_range_internal_xsync_flags)
	{
		"processed language permutations"
	};
	STRING_LIST(sound_pitch_range_internal_xsync_flags, sound_pitch_range_internal_xsync_flags_strings, _countof(sound_pitch_range_internal_xsync_flags_strings));

	#define SOUND_PITCH_RANGE_LANGUAGE_INFO_ID { 0x55CF2587, 0xC2A84F0D, 0xA21BD9D4, 0xF3411CAA }
	TAG_STRUCT(
		sound_pitch_range_language_info,
		"sound_pitch_range_language_info",
		"sound_pitch_range_language_info",
		"s_sound_pitch_range_language_info",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_PITCH_RANGE_LANGUAGE_INFO_ID)
	{
		{ _field_short_block_index, "first permutation language index", &sound_permutation_language_info_block },
		{ _field_short_integer, "permutation count" },
		{ _field_terminator }
	};

	#define SOUND_PLATFORM_SOUND_PLAYBACK_BLOCK_ID { 0x4A3DA0A2, 0xCB0F41E1, 0xAAB6650E, 0xBCA33F94 }
	TAG_STRUCT(
		sound_platform_sound_playback_block,
		"sound_platform_sound_playback_block",
		"sound_platform_sound_playback_block",
		"s_sound_platform_sound_playback_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_PLATFORM_SOUND_PLAYBACK_BLOCK_ID)
	{
		{ _field_struct, "playback definition", &platform_sound_playback_struct },
		{ _field_terminator }
	};

	#define SOUND_PLAYBACK_PARAMETERS_STRUCT_ID { 0x4851E6C, 0x1277447B, 0xB15A0C03, 0x9B5C40CA }
	TAG_STRUCT(
		sound_playback_parameters_struct,
		"sound_playback_parameters_struct",
		"sound_playback_parameters_struct",
		"s_sound_playback_parameters_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_PLAYBACK_PARAMETERS_STRUCT_ID)
	{
		{ _field_long_integer, "internal flags" },
		{ _field_real_fraction, "skip fraction", "fraction of requests to play this sound that will be ignored (0 means always play.)" },
		{ _field_real, "maximum bend per second", nullptr, "cents", _field_id_cents },
		{ _field_struct, "distance parameters", MAKE_ALT_NAMES("."), &sound_distance_parameters_struct },
		FIELD_CUSTOM("value", _field_id_default),
		FIELD_CUSTOM("value", _field_id_default),
		FIELD_EXPLANATION("randomization", "these settings control random variation of volume and pitch.\n the second parameter gets clipped to the first."),
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_real, "gain base", "sound's random gain will start here", "dB", _field_id_decibels },
		{ _field_real, "gain variance", "sound's gain will be randomly modulated within this range", "dB", _field_id_decibels },
		{ _field_short_integer_bounds, "random pitch bounds", "the sound's pitch will be modulated randomly within this range.", "cents" },
		FIELD_EXPLANATION("directional sounds", "these settings allow sounds to be directional, fading as they turn away from the listener"),
		{ _field_angle, "inner cone angle", "within the cone defined by this angle and the sound's direction, the sound plays with a gain of 1.0.", "degrees" },
		{ _field_angle, "outer cone angle", "outside the cone defined by this angle and the sound's direction, the sound plays with a gain of OUTER CONE GAIN. (0 means the sound does not attenuate with direction.)", "degrees" },
		{ _field_real, "outer cone gain", "the gain to use when the sound is directed away from the listener", "dB", _field_id_decibels },
		FIELD_EXPLANATION("scripted location override", "NOTE: this will only apply when the sound is started via script\nazimuth:\n    0 => front\n    90 => left\n    180 => back\n    270 => right\n"),
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_long_flags, "flags", &sound_override_location_flags_definition },
		{ _field_angle, "azimuth" },
		{ _field_real, "positional gain", nullptr, "dB" },
		{ _field_real, "first person gain", nullptr, "dB" },
		{ _field_terminator }
	};

	STRINGS(sound_override_location_flags_definition)
	{
		"override azimuth",
		"override 3d gain",
		"override speaker gain"
	};
	STRING_LIST(sound_override_location_flags_definition, sound_override_location_flags_definition_strings, _countof(sound_override_location_flags_definition_strings));

	#define SOUND_PROMOTION_PARAMETERS_STRUCT_ID { 0x2CF97DF2, 0xC0014BDB, 0xAE39ECEA, 0xBA189908 }
	VERSIONED_TAG_STRUCT(
		sound_promotion_parameters_struct,
		"sound_promotion_parameters_struct",
		"sound_promotion_parameters_struct",
		"s_sound_promotion_parameters_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_PROMOTION_PARAMETERS_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 5 },
		{ _field_block, "promotion rules", &sound_promotion_rule_block_block },
		{ _field_block, "runtime timers", &sound_promotion_runtime_timer_block_block },
		{ _field_long_integer, "runtime active promotion index" },
		{ _field_long_integer, "runtime last promotion time" },
		{ _field_long_integer, "runtime suppression timeout" },
		
		{ _struct_version_mode_equal, 0, 4 },
		{ _field_tag_reference, "promotion sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_short_integer, "promotion count", "when there are this many instances of the sound, promote to the new sound." },
		FIELD_PAD("LH", 2),
		FIELD_PAD("TVIEMU", 8),
		
		{ _field_terminator }
	};

	#define SOUND_PROMOTION_RULE_BLOCK_ID { 0xC69943B0, 0x10BC44C8, 0xBC4D84CB, 0xADCE8178 }
	TAG_STRUCT(
		sound_promotion_rule_block,
		"sound_promotion_rule_block",
		"sound_promotion_rule_block",
		"s_sound_promotion_rule_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_PROMOTION_RULE_BLOCK_ID)
	{
		{ _field_short_block_index, "pitch range", &sound_pitch_range_block_block },
		{ _field_short_integer, "maximum playing count" },
		{ _field_real, "suppression time", "time from when first permutation plays to when another sound from an equal or lower promotion can play", "seconds" },
		{ _field_long_integer, "runtime rollover time" },
		{ _field_long_integer, "impulse promotion time" },
		{ _field_terminator }
	};

	#define SOUND_PROMOTION_RUNTIME_TIMER_BLOCK_ID { 0x7738DDE0, 0xD754110, 0xB20B95F0, 0x43509AAA }
	TAG_STRUCT(
		sound_promotion_runtime_timer_block,
		"sound_promotion_runtime_timer_block",
		"sound_promotion_runtime_timer_block",
		"s_sound_promotion_runtime_timer_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_PROMOTION_RUNTIME_TIMER_BLOCK_ID)
	{
		{ _field_long_integer, "timer storage" },
		{ _field_terminator }
	};

	#define SOUND_PROPAGATION_DEFINITION_STRUCT_ID { 0xDE42E807, 0x9F174952, 0xA2622269, 0x55663071 }
	TAG_STRUCT(
		sound_propagation_definition_struct,
		"sound_propagation_definition_struct",
		"sound_propagation_definition_struct",
		"s_sound_propagation_definition_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_PROPAGATION_DEFINITION_STRUCT_ID)
	{
		{ _field_tag_reference, "sound environment", &sound_environment_group_reference },
		{ _field_tag_reference, "background sound", &sound_looping_group_reference$2 },
		{ _field_real, "background sound gain", "scale for fog background sound:dB" },
		{ _field_real, "environment ducking", "scales the surrounding background sound by this much:dB" },
		{ _field_tag_reference, "entry sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "exit sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_terminator }
	};

	#define SOUND_RADIO_SETTINGS_BLOCK_STRUCT_ID { 0x6177BF04, 0xF09F4A0C, 0xB670E9D3, 0x530193CE }
	TAG_STRUCT(
		sound_radio_settings_block_struct,
		"sound_radio_settings_block_struct",
		"sound_radio_settings_block_struct",
		"s_sound_radio_settings_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_RADIO_SETTINGS_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("mix settings", nullptr),
		{ _field_long_enum, "mix", &radio_mix_setting_definition },
		FIELD_EXPLANATION("distortion settings", nullptr),
		{ _field_struct, "distortion settings", &global_sound_look_up_table_distortion_block },
		FIELD_EXPLANATION("equalizer settings", nullptr),
		{ _field_struct, "equalizer settings", &global_sound_equalizer_block },
		{ _field_terminator }
	};

	STRINGS(radio_mix_setting_definition)
	{
		"full#full unspatialized radio effect",
		"3d#mixes in the unspatialized radio effect with distance",
		"none#essentially turns off the radio effect!"
	};
	STRING_LIST(radio_mix_setting_definition, radio_mix_setting_definition_strings, _countof(radio_mix_setting_definition_strings));

	#define SOUND_REFERENCES_BLOCK_ID { 0x6751BC80, 0xAF514348, 0x886AF0F0, 0x68DB8F16 }
	VERSIONED_TAG_STRUCT(
		sound_references_block,
		"sound_references_block",
		"sound_references_block",
		"s_sound_references_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_REFERENCES_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_string_id, "vocalization" },
		{ _field_block, "stimuli", &vocalization_stimuli_block_definition_block, _tag_field_attributed_definition_block_grid_view_by_default },
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_word_flags, "flags", &sound_reference_flags_v1 },
		FIELD_PAD("DARFA", 2),
		FIELD_PAD("JNBMIW", 20),
		{ _field_string_id, "vocalization" },
		{ _field_tag_reference, "sound", &sound_group_reference$4 },
		
		{ _field_terminator }
	};

	STRINGS(sound_reference_flags_v1)
	{
		"new vocalization"
	};
	STRING_LIST(sound_reference_flags_v1, sound_reference_flags_v1_strings, _countof(sound_reference_flags_v1_strings));

	TAG_REFERENCE(sound_group_reference$4, SOUND_TAG, TAG_REFERENCE_FLAG_RESOLVED_BY_GAME);

	#define SOUND_RESOURCE_DEFINITION_STRUCT_ID { 0xC0BA15AA, 0xB9CB4B7B, 0x9D98A769, 0xD335C8BB }
	TAG_STRUCT(
		sound_resource_definition_struct,
		"sound_resource_definition_struct",
		"sound_resource_definition_struct",
		"s_sound_resource_definition_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_RESOURCE_DEFINITION_STRUCT_ID)
	{
		{ _field_data, "sample data", &sound_resource_samples },
		{ _field_terminator }
	};

	#define SOUND_RESPONSE_DATA_BLOCK_STRUCT_ID { 0xFE59D7D1, 0x8B344910, 0x91A59CF1, 0x932B62A0 }
	TAG_STRUCT(
		sound_response_data_block_struct,
		"sound_response_data_block_struct",
		"sound_response_data_block_struct",
		"s_sound_response_data_block_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_RESPONSE_DATA_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "channel" },
		{ _field_string_id, "category" },
		{ _field_long_integer, "category priority" },
		{ _field_real, "queue timeout" },
		{ _field_real, "consideration time" },
		{ _field_real, "gap after sound" },
		{ _field_byte_flags, "queue behavior", &sound_response_queue_flags },
		FIELD_PAD("SRBQXEK", 3),
		{ _field_block, "potential responses", &sound_response_permutation_block_block },
		{ _field_block, "combiners", &sound_combine_response_block_block },
		{ _field_terminator }
	};

	STRINGS(sound_response_queue_flags)
	{
		"bypass queue",
		"clear queue",
		"stop active sound",
		"do not track"
	};
	STRING_LIST(sound_response_queue_flags, sound_response_queue_flags_strings, _countof(sound_response_queue_flags_strings));

	#define SOUND_RESPONSE_DEFINITION_BLOCK_ID { 0xDFB84E8C, 0x19834057, 0x80B714A7, 0xEE445191 }
	TAG_STRUCT(
		sound_response_definition_block,
		"sound_response_definition_block",
		"sound_response_definition_block",
		"s_sound_response_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_RESPONSE_DEFINITION_BLOCK_ID)
	{
		{ _field_struct, "sound_response_definition_struct", &sound_response_definition_struct },
		{ _field_terminator }
	};

	#define SOUND_RESPONSE_DEFINITION_STRUCT_ID { 0xA50C3138, 0x66E4CA0, 0x91825778, 0xDCAFD913 }
	TAG_STRUCT(
		sound_response_definition_struct,
		"sound_response_definition_struct",
		"sound_response_definition_struct",
		"s_sound_response_definition_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_RESPONSE_DEFINITION_STRUCT_ID)
	{
		{ _field_byte_flags, "sound flags", &game_engine_sound_response_flags_definition },
		FIELD_PAD("AGQD", 3),
		{ _field_tag_reference, "sound", MAKE_ALT_NAMES("english sound"), FIELD_FLAG_INDEX, &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "probability", "Ignored for the default sound - used for sound permutation block entries only." },
		{ _field_terminator }
	};

	STRINGS(game_engine_sound_response_flags_definition)
	{
		"announcer sound"
	};
	STRING_LIST(game_engine_sound_response_flags_definition, game_engine_sound_response_flags_definition_strings, _countof(game_engine_sound_response_flags_definition_strings));

	#define SOUND_RESPONSE_PERMUTATION_BLOCK_ID { 0x4EFF1491, 0x3FFD46FB, 0xBCB2BA66, 0x32D82AD5 }
	TAG_STRUCT(
		sound_response_permutation_block,
		"sound_response_permutation_block",
		"sound_response_permutation_block",
		"s_sound_response_permutation_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_RESPONSE_PERMUTATION_BLOCK_ID)
	{
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_terminator }
	};

	#define SOUND_RESPONSE_STRUCT_DEFINITION_ID { 0x48F8E35, 0x6C774DA7, 0xA440224B, 0x2E123BAB }
	TAG_STRUCT(
		sound_response_struct_definition,
		"sound_response_struct_definition",
		"sound_response_struct_definition",
		"s_sound_response_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_RESPONSE_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "responses", &sound_response_data_block_block },
		{ _field_terminator }
	};

	#define SOUND_SCALE_MODIFIERS_STRUCT_ID { 0x3ABE3277, 0x90774F0E, 0xA794C831, 0x58D6DACF }
	TAG_STRUCT(
		sound_scale_modifiers_struct,
		"sound_scale_modifiers_struct",
		"sound_scale_modifiers_struct",
		"s_sound_scale_modifiers_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_SCALE_MODIFIERS_STRUCT_ID)
	{
		FIELD_EXPLANATION("scale modifiers", "as the sound\'s input scale changes from zero to one, these modifiers move between the two values specified here. the sound will play using the current scale modifier multiplied by the values specified above. (0 values are ignored.)"),
		{ _field_real_bounds, "gain modifier", nullptr, "dB", _field_id_decibels },
		{ _field_short_integer_bounds, "pitch modifier", nullptr, "cents" },
		{ _field_real_fraction_bounds, "skip fraction modifier" },
		{ _field_terminator }
	};

	#define SOUND_SCENERY_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0x1D75B752, 0x30794C1E, 0x92F7FE0B, 0x9A73B1F6 }
	TAG_STRUCT(
		sound_scenery_block_index_flags_block_struct,
		"sound_scenery_block_index_flags_block_struct",
		"sound_scenery_block_index_flags_block_struct",
		"s_sound_scenery_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_SCENERY_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_sound_scenery_palette_block_block },
		{ _field_terminator }
	};

	#define SOUND_SCENERY_DATUM_STRUCT_ID { 0xF092A3CD, 0x392B463A, 0xAA23EE22, 0x2BC855E2 }
	TAG_STRUCT(
		sound_scenery_datum_struct,
		"sound_scenery_datum_struct",
		"sound_scenery_datum_struct",
		"s_sound_scenery_datum_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_SCENERY_DATUM_STRUCT_ID)
	{
		{ _field_long_enum, "volume type", &sound_volume_type_enumeration },
		{ _field_real, "height" },
		{ _field_angle_bounds, "override cone angle bounds" },
		{ _field_real, "override outer cone gain", nullptr, "dB" },
		{ _field_struct, "override distance parameters", &sound_distance_parameters_struct },
		{ _field_terminator }
	};

	STRINGS(sound_volume_type_enumeration)
	{
		"sphere",
		"vertical cylinder",
		"pill{volume pill}"
	};
	STRING_LIST(sound_volume_type_enumeration, sound_volume_type_enumeration_strings, _countof(sound_volume_type_enumeration_strings));

	#define SOUND_SCENERY_STRUCT_DEFINITION_ID { 0xD4C4A75B, 0x96954D6A, 0xBB77085F, 0xD4396EF5 }
	VERSIONED_TAG_STRUCT(
		sound_scenery_struct_definition,
		"sound_scenery_struct_definition",
		"sound_scenery_struct_definition",
		"s_sound_scenery_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_SCENERY_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 6 },
		{ _field_struct, "object", &object_struct_definition },
		{ _field_long_integer, "YJNXHAWAO1" },
		{ _field_long_integer, "YJNXHAWAO2" },
		{ _field_long_integer, "YJNXHAWAO3" },
		{ _field_long_integer, "YJNXHAWAO4" },
		FIELD_USELESS_PAD("value", 112),
		
		{ _struct_version_mode_equal, 0, 60 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		{ _field_long_integer, "YJNXHAWAO1" },
		{ _field_long_integer, "YJNXHAWAO2" },
		{ _field_long_integer, "YJNXHAWAO3" },
		{ _field_long_integer, "YJNXHAWAO4" },
		FIELD_USELESS_PAD("value", 112),
		
		{ _field_terminator }
	};

	#define SOUND_STEREO_MIX_STRUCT_ID { 0xF0FFEE52, 0xB30949B6, 0x86208462, 0x42D0E5DB }
	TAG_STRUCT(
		sound_stereo_mix_struct,
		"sound_stereo_mix_struct",
		"sound_stereo_mix_struct",
		"s_sound_stereo_mix_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_STEREO_MIX_STRUCT_ID)
	{
		{ _field_real, "left stereo gain", nullptr, "dB" },
		{ _field_real, "right stereo gain", nullptr, "dB" },
		{ _field_terminator }
	};

	#define SOUND_SURROUND_MIX_STRUCT_ID { 0xEA4CD876, 0x62334CC1, 0xABC12101, 0x9DCEA290 }
	TAG_STRUCT(
		sound_surround_mix_struct,
		"sound_surround_mix_struct",
		"sound_surround_mix_struct",
		"s_sound_surround_mix_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_SURROUND_MIX_STRUCT_ID)
	{
		{ _field_real, "front speaker gain", nullptr, "dB" },
		{ _field_real, "rear speaker gain", nullptr, "dB" },
		{ _field_terminator }
	};

	#define SOUND_TRANSMISSION_DEFINITION_STRUCT_ID { 0x7D2210B1, 0x1E4E416A, 0xA69625D0, 0xDF052335 }
	TAG_STRUCT(
		sound_transmission_definition_struct,
		"sound_transmission_definition_struct",
		"sound_transmission_definition_struct",
		"s_sound_transmission_definition_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_TRANSMISSION_DEFINITION_STRUCT_ID)
	{
		FIELD_EXPLANATION("default obstruction settings", nullptr),
		{ _field_struct, "obstruction settings", &global_sound_lowpass_block },
		FIELD_EXPLANATION("default occlusion settings", nullptr),
		{ _field_struct, "occlusion settings", &global_sound_lowpass_block },
		{ _field_terminator }
	};

	#define SOUND_XMA2_SEEK_TABLE_BLOCK_ID { 0x6927A11A, 0x10E24EDD, 0x9E681A4E, 0xB2AD185F }
	TAG_STRUCT(
		sound_xma2_seek_table_block,
		"sound_xma2_seek_table_block",
		"sound_xma2_seek_table_block",
		"s_sound_xma2_seek_table_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUND_XMA2_SEEK_TABLE_BLOCK_ID)
	{
		{ _field_long_integer, "block relative sample start" },
		{ _field_long_integer, "block relative sample end" },
		{ _field_long_integer, "starting sample index" },
		{ _field_long_integer, "ending sample index" },
		{ _field_long_integer, "starting xma2 offset" },
		{ _field_long_integer, "ending xma2 offset" },
		{ _field_terminator }
	};

	#define SOUNDBANK_BLOCK_STRUCT_ID { 0xFE440A1B, 0x7A464815, 0xB3D5F22E, 0x382E3380 }
	TAG_STRUCT(
		soundbank_block_struct,
		"soundbank_block_struct",
		"soundbank_block_struct",
		"s_soundbank_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUNDBANK_BLOCK_STRUCT_ID)
	{
		{ _field_long_flags, "flags", &soundbankdefinitionflags },
		{ _field_long_flags, "import flags", &sound_import_flags },
		{ _field_long_flags, "xsync flags", &sound_xsync_flags },
		{ _field_block, "Sound bank list", "List of names of soundbanks. If more than one, one will be randomly chosen at load", &soundbankblock_block },
		{ _field_long_integer, "Bank priority", "the importance of this bank over others. 1 is highest priority (ie will bump all others)" },
		{ _field_long_integer, "Bank unique ID" },
		{ _field_terminator }
	};

	STRINGS(soundbankdefinitionflags)
	{
		"Don\'t use FP bank in split-screen#don\'t use the high quality first person bank in split-screen",
		"Deterministic#Bank contains deterministic sounds (voices)",
		"Stream off DVD only#Files will not be played off HD, only DVD (for music, etc)",
		"Can delay start#Can delay start time for a short period waiting for bank to load",
		"Don\'t load for player#Use this if there\'s a special player bank that\'s loaded by other means (ie weapon, vehicle).",
		"Ground forces sound bank#Don\'t load this bank if player is in a vehicle (ie bipeds, footsteps)"
	};
	STRING_LIST(soundbankdefinitionflags, soundbankdefinitionflags_strings, _countof(soundbankdefinitionflags_strings));

	#define SOUNDS_BLOCK_ID { 0x8FD2D002, 0xD5E44F17, 0x90660349, 0xA707D3BB }
	TAG_STRUCT(
		sounds_block,
		"sounds_block",
		"sounds_block",
		"s_sounds_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SOUNDS_BLOCK_ID)
	{
		{ _field_tag_reference, "sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_terminator }
	};

	#define SPACE_FIGHTER_BLOCK_ID { 0xCE661634, 0x27B499C, 0xBFBD2CC1, 0xEFAAA320 }
	TAG_STRUCT(
		space_fighter_block,
		"space_fighter_block",
		"space_fighter_block",
		"s_space_fighter_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPACE_FIGHTER_BLOCK_ID)
	{
		{ _field_struct, "steering control", &vehicle_steering_control_struct },
		{ _field_struct, "turning control", &vehicle_turning_control_struct },
		FIELD_EXPLANATION("velocity control variables", nullptr),
		{ _field_real, "full throttle speed", "maximum speed when throttle = 1.0", "wu/s" },
		{ _field_real, "neutral throttle speed", "speed when throttle = 0.0", "wu/s" },
		{ _field_real, "reverse throttle speed", "speed when throttle = -1.0", "wu/s" },
		{ _field_real, "speed acceleration", nullptr, "wu/s/s" },
		{ _field_real, "speed deceleration", nullptr, "wu/s/s" },
		{ _field_real, "maximum left slide" },
		{ _field_real, "maximum right slide" },
		{ _field_real, "slide acceleration" },
		{ _field_real, "slide deceleration" },
		{ _field_real, "slide accel against direction", "acceleration when trying to throttle against current slide direction" },
		FIELD_EXPLANATION("torque scale", "how hard the vehicle trys to rotate to it\'s desired rotation"),
		{ _field_real, "flying torque scale", "big vehicles need to scale this down.  0 defaults to 1, which is generally a good value." },
		FIELD_EXPLANATION("fixed gun offset", "this offset will be aligned to the units aiming vector instead of the vehicle forward vector"),
		{ _field_angle, "fixed gun yaw" },
		{ _field_angle, "fixed gun pitch" },
		FIELD_EXPLANATION("alien fighter trick variables", nullptr),
		{ _field_real, "maximum trick frequency" },
		{ _field_real, "loop trick duration" },
		{ _field_real, "roll trick duration" },
		FIELD_EXPLANATION("alien fighter fake flight control", nullptr),
		{ _field_real, "strafe boost scale" },
		{ _field_real, "off stick deceleration scale" },
		{ _field_real, "dive speed scale" },
		{ _field_angle, "roll max velocity", "max angular velocity for user-input roll", "deg/sec" },
		{ _field_angle, "roll acceleration", "acceleration for user-input roll", "deg/sec/sec" },
		{ _field_angle, "roll deceleration", "deceleration for user-input roll (when the user releases the stick)", "deg/sec/sec" },
		{ _field_real_fraction, "roll smoothing fraction", "if non-zero, when the desired velocity change is less than this fraction of the acceleration, starts interpolating the maximum acceleration towards zero.\nYou can think of this as a time in seconds where if the velocity would reach its target in this amount of time or less, it will start taking longer." },
		FIELD_EXPLANATION("autolevel", nullptr),
		{ _field_real, "autolevel time", "how long you must not rotate (roll, pitch, yaw) before autoleveling kicks in", "s" },
		{ _field_angle, "autolevel pitch cutoff", "if the ship is pitched outside of this range, autoleveling will not happen.  The effect is also scaled as the pitch approaches this angle", "degrees" },
		{ _field_angle, "autolevel max velocity", "maximum angular velocity for autoleveling", "degrees/sec" },
		{ _field_angle, "autolevel max acceleration", "maximum acceleration for autoleveling", "deg/sec/sec" },
		{ _field_angle, "autolevel max user ang. vel.", "autolevel can continue to happen if the user is desiring an angular velocity lower than this", "deg/sec" },
		{ _field_real, "autolevel spring k", "controls relationship between displacement and acceleration - higher values mean faster acceleration when the desired position is far from current position" },
		{ _field_real, "autolevel spring c", "controls relationship between velocity and friction - higher values will slow the system down, lower values may let the system oscillate" },
		FIELD_EXPLANATION("cosmetic roll", nullptr),
		{ _field_real, "cosmetic roll scale", "desired roll = delta yaw X scale" },
		{ _field_angle, "cosmetic roll max bank", "maximum cosmetic roll angle", "degrees" },
		{ _field_angle, "cosmetic roll max velocity", "maximum angular velocity that cosmetic roll can achieve", "deg/sec" },
		{ _field_angle, "cosmetic roll acceleration", "maximum angular acceleration for cosmetic roll", "deg/sec/sec" },
		{ _field_real, "cosmetic roll spring k", "controls relationship between displacement and acceleration - higher values mean faster acceleration when the desired position is far from current position" },
		{ _field_real, "cosmetic roll spring c", "controls relationship between velocity and friction - higher values will slow the system down, lower values may let the system oscillate" },
		FIELD_EXPLANATION("new roll", nullptr),
		{ _field_long_flags, "roll flags", &space_fighter_roll_flags },
		{ _field_angle, "maximum left stick roll angle" },
		{ _field_real, "left stick rate smoothing" },
		{ _field_real, "left stick trend smoothing" },
		{ _field_angle, "maximum right stick roll angle" },
		{ _field_real, "right stick rate smoothing" },
		{ _field_real, "right stick trend smoothing" },
		FIELD_EXPLANATION("turn deceleration", nullptr),
		{ _field_angle, "turn deceleration threshold", "turn deceleration kicks in when turning faster than this", "deg/sec" },
		{ _field_real_fraction, "turn deceleration fraction", "when turning at the maximum rate, throttle is limited to this value" },
		FIELD_EXPLANATION("soft ceiling turn back", "parameters for controlling turing back from soft ceilings"),
		{ _field_long_flags, "turn back flags", &space_fighter_turn_back_flags },
		{ _field_real, "turn back latched period" },
		{ _field_struct, "turn back distance to turn rate", &scalar_function_named_struct },
		FIELD_EXPLANATION("thrust params", "change thrust lag"),
		{ _field_real, "ideal thrust decay" },
		{ _field_real, "ideal thrust increase" },
		{ _field_real, "minimum thrust decay" },
		{ _field_real, "minimum thrust increase" },
		{ _field_real, "maximum thrust increase" },
		FIELD_EXPLANATION("dive params", "controls angles under which we change speed during dive"),
		{ _field_real, "minimum dive angle" },
		{ _field_real, "maximum dive angle" },
		FIELD_EXPLANATION("strafe params", "scale speed params while strafing"),
		{ _field_real, "strafe boost power" },
		FIELD_EXPLANATION("wingtip params", "wingtip"),
		{ _field_real, "wingtip contrail turn" },
		{ _field_real, "wingtip min turn" },
		FIELD_EXPLANATION("Safety", nullptr),
		{ _field_real, "dangerous trajectory prediction time", "How much the position is predicted by the velocity to check against potential collisions", "seconds" },
		{ _field_terminator }
	};

	STRINGS(space_fighter_roll_flags)
	{
		"use new roll"
	};
	STRING_LIST(space_fighter_roll_flags, space_fighter_roll_flags_strings, _countof(space_fighter_roll_flags_strings));

	STRINGS(space_fighter_turn_back_flags)
	{
		"turn back to tangent"
	};
	STRING_LIST(space_fighter_turn_back_flags, space_fighter_turn_back_flags_strings, _countof(space_fighter_turn_back_flags_strings));

	#define SPAWN_FORMATION_BLOCK_STRUCT_ID { 0xE19AC3AA, 0x829343BD, 0x88085421, 0x54DAD4A3 }
	TAG_STRUCT(
		spawn_formation_block_struct,
		"spawn_formation_block_struct",
		"spawn_formation_block_struct",
		"s_spawn_formation_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPAWN_FORMATION_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "place on", &ai_spawn_conditions_struct },
		{ _field_string_id, "name" },
		{ _field_real_point_3d, "position" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_real_euler_angles_2d, "facing (yaw, pitch)", nullptr, "degrees" },
		{ _field_real, "roll" },
		{ _field_string_id, "formation" },
		{ _field_real, "initial movement distance", "before doing anything else, the actor will travel the given distance in its forward direction" },
		{ _field_short_enum, "initial movement mode", &actor_movement_modes },
		{ _field_short_integer, "placement script index" },
		{ _field_string_id, "placement script", MAKE_ALT_NAMES("Placement script"), _field_id_halo_script_block },
		{ _field_string_id, "activity name" },
		{ _field_string_id, "movement set" },
		{ _field_short_block_index_custom_search, "point set", &custom_point_set_block_index_definition },
		{ _field_short_enum, "patrol mode", &patrol_mode_enum },
		{ _field_block, "points", &patrol_point_block_block },
		{ _field_byte_flags, "flags", &spawn_formation_flags },
		FIELD_PAD("post-flags-pad", 3),
		{ _field_terminator }
	};

	STRINGS(actor_movement_modes)
	{
		"default",
		"climbing",
		"flying"
	};
	STRING_LIST(actor_movement_modes, actor_movement_modes_strings, _countof(actor_movement_modes_strings));

	STRINGS(spawn_formation_flags)
	{
		"no vertical offset for flying"
	};
	STRING_LIST(spawn_formation_flags, spawn_formation_flags_strings, _countof(spawn_formation_flags_strings));

	#define SPAWN_INFLUENCE_WEIGHT_FALLOFF_FUNCTION_BLOCK_ID { 0x506E405F, 0x3D0340DE, 0x989E403D, 0x8F7516C3 }
	TAG_STRUCT(
		spawn_influence_weight_falloff_function_block,
		"spawn_influence_weight_falloff_function_block",
		"spawn_influence_weight_falloff_function_block",
		"s_spawn_influence_weight_falloff_function_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPAWN_INFLUENCE_WEIGHT_FALLOFF_FUNCTION_BLOCK_ID)
	{
		{ _field_struct, "function", &scalar_function_named_struct },
		{ _field_terminator }
	};

	#define SPAWN_POINTS_BLOCK_STRUCT_ID { 0x2288B874, 0x915E47FC, 0xA59792AF, 0x15D83BA8 }
	TAG_STRUCT(
		spawn_points_block_struct,
		"spawn_points_block_struct",
		"spawn_points_block_struct",
		"s_spawn_points_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPAWN_POINTS_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "place on", &ai_spawn_conditions_struct },
		{ _field_string_id, "name" },
		{ _field_short_block_index_custom_search, "cell", &custom_cell_block_index_definition },
		FIELD_PAD("post-cell-index-pad", 2),
		{ _field_real_point_3d, "position" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_real_euler_angles_2d, "facing (yaw, pitch)", nullptr, "degrees" },
		{ _field_real, "roll" },
		{ _field_word_flags, "flags", &starting_location_flags },
		{ _field_short_block_index, "character type", &character_palette_block_block },
		{ _field_short_block_index, "initial weapon", &scenario_weapon_palette_block_block },
		{ _field_short_block_index, "initial secondary weapon", &scenario_weapon_palette_block_block },
		{ _field_short_block_index, "initial equipment", &scenario_equipment_palette_block_block },
		{ _field_short_block_index, "vehicle type", &scenario_vehicle_palette_block_block },
		{ _field_short_enum, "seat type", &ai_placement_seat_preference_enum },
		{ _field_short_enum, "grenade type", &global_ai_grenade_type_enum },
		{ _field_short_integer, "swarm count", "number of cretures in swarm if a swarm is spawned at this location" },
		FIELD_PAD("post-swarm-count-pad", 2),
		{ _field_string_id, "actor variant name" },
		{ _field_string_id, "vehicle variant name" },
		{ _field_string_id, "voice designator" },
		{ _field_real, "initial movement distance", "before doing anything else, the actor will travel the given distance in its forward direction" },
		{ _field_short_enum, "initial movement mode", &actor_movement_modes },
		{ _field_short_block_index, "emitter vehicle", &scenario_vehicle_block_block },
		{ _field_short_block_index, "giant body", &scenario_giant_block_block },
		{ _field_short_block_index, "biped body", &scenario_biped_block_block },
		{ _field_string_id, "placement script", MAKE_ALT_NAMES("Placement script"), _field_id_halo_script_block },
		{ _field_short_integer, "placement script index" },
		FIELD_PAD("post-placement-script-pad", 2),
		{ _field_string_id, "activity name" },
		{ _field_string_id, "movement set" },
		{ _field_short_block_index_custom_search, "point set", &custom_point_set_block_index_definition },
		{ _field_short_enum, "patrol mode", &patrol_mode_enum },
		{ _field_block, "points", &patrol_point_block_block },
		{ _field_short_block_index, "vehicle body", &scenario_vehicle_block_block },
		FIELD_PAD("post-vehicle_index-pad", 2),
		{ _field_terminator }
	};

	STRINGS(starting_location_flags)
	{
		"infection form explode",
		"n/a",
		"always place",
		"initially hidden",
		"vehicle destroyed when no driver",
		"vehicle open",
		"actor surface emerge",
		"actor surface emerge auto",
		"actor surface emerge upwards"
	};
	STRING_LIST(starting_location_flags, starting_location_flags_strings, _countof(starting_location_flags_strings));

	STRINGS(ai_placement_seat_preference_enum)
	{
		"DEFAULT",
		"passenger",
		"gunner",
		"driver",
		"small cargo",
		"large cargo",
		"NO driver",
		"NO vehicle"
	};
	STRING_LIST(ai_placement_seat_preference_enum, ai_placement_seat_preference_enum_strings, _countof(ai_placement_seat_preference_enum_strings));

	#define SPAWNER_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0xADC48FA4, 0x19AF414B, 0x97D43F6D, 0x531B4F37 }
	TAG_STRUCT(
		spawner_block_index_flags_block_struct,
		"spawner_block_index_flags_block_struct",
		"spawner_block_index_flags_block_struct",
		"s_spawner_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPAWNER_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_spawner_palette_block_block },
		{ _field_terminator }
	};

	#define SPAWNER_STRUCT_DEFINITION_ID { 0x46E8CDF0, 0x61314324, 0x991AD00C, 0xB3F53689 }
	VERSIONED_TAG_STRUCT(
		spawner_struct_definition,
		"spawner_struct_definition",
		"spawner_struct_definition",
		"s_spawner_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPAWNER_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 7 },
		{ _field_struct, "entity", &entity_struct_definition }, // structure_version:1
		FIELD_GROUP_BEGIN("$$$ SPAWNER $$$"),
		{ _field_byte_flags, "Spawner Flags", &spawnerflags },
		FIELD_PAD("FlagPad1", 3),
		{ _field_long_integer, "Post Spawn Cooldown (ticks)" },
		{ _field_real, "Activation Task Priority ", "Priority of task to activate this spawner." },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 64 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ ENTITY $$$"),
		{ _field_real, "Entity Placeholder" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ SPAWNER $$$"),
		{ _field_byte_flags, "Spawner Flags", &spawnerflags },
		FIELD_PAD("FlagPad1", 3),
		{ _field_long_integer, "Post Spawn Cooldown (ticks)" },
		{ _field_real, "Activation Task Priority ", "Priority of task to activate this spawner." },
		FIELD_GROUP_END(),
		
		{ _field_terminator }
	};

	STRINGS(spawnerflags)
	{
		"Cooldown Waits for Object Death"
	};
	STRING_LIST(spawnerflags, spawnerflags_strings, _countof(spawnerflags_strings));

	#define SPECIAL_MOVEMENT_BLOCK_ID { 0x5AF31295, 0xE49D42AB, 0xA49A9DBC, 0x8B6B49C3 }
	TAG_STRUCT(
		special_movement_block,
		"special_movement_block",
		"special_movement_block",
		"s_special_movement_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPECIAL_MOVEMENT_BLOCK_ID)
	{
		{ _field_long_flags, "Special movement 1", &special_movement_flags },
		{ _field_terminator }
	};

	STRINGS(special_movement_flags)
	{
		"jump",
		"climb",
		"vault",
		"mount",
		"hoist",
		"wall jump",
		"takeoff",
		"jump mandatory approach"
	};
	STRING_LIST(special_movement_flags, special_movement_flags_strings, _countof(special_movement_flags_strings));

	#define SPECIALIZEDINCIDENTCUSTOMDATAFILTERBLOCK_ID { 0xFEA8C235, 0x959D4A7B, 0xA399E592, 0x8CFE5FFC }
	TAG_STRUCT(
		specializedincidentcustomdatafilterblock,
		"specializedIncidentCustomDataFilterBlock",
		"specializedIncidentCustomDataFilterBlock",
		"s_specializedincidentcustomdatafilterblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPECIALIZEDINCIDENTCUSTOMDATAFILTERBLOCK_ID)
	{
		{ _field_byte_flags, "flags", &numeric_comparison_flags },
		FIELD_PAD("PAD1", 3),
		{ _field_long_integer, "value" },
		{ _field_terminator }
	};

	#define SPECIALIZEDINCIDENTDISTANCEFILTERBLOCK_ID { 0xAE5C724E, 0x45294261, 0x9B787400, 0x52BDE73A }
	TAG_STRUCT(
		specializedincidentdistancefilterblock,
		"specializedIncidentDistanceFilterBlock",
		"specializedIncidentDistanceFilterBlock",
		"s_specializedincidentdistancefilterblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPECIALIZEDINCIDENTDISTANCEFILTERBLOCK_ID)
	{
		{ _field_byte_flags, "flags", &numeric_comparison_flags },
		FIELD_PAD("PAD1", 3),
		{ _field_long_integer, "distance between effect and cause player", nullptr, "wu" },
		{ _field_terminator }
	};

	#define SPECIALIZEDINCIDENTGAMEOVERBLOCK_ID { 0x897B0508, 0xAACF426F, 0x862BB053, 0x70A8D420 }
	TAG_STRUCT(
		specializedincidentgameoverblock,
		"specializedIncidentGameOverBlock",
		"specializedIncidentGameOverBlock",
		"s_specializedincidentgameoverblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPECIALIZEDINCIDENTGAMEOVERBLOCK_ID)
	{
		{ _field_word_flags, "flags", &specializedincidentgameoverflags },
		{ _field_short_integer, "minimum game length", nullptr, "seconds" },
		{ _field_char_integer, "megalo category index", "only used if the \"check megalo category\" flag is set" },
		FIELD_PAD("PAD1", 3),
		{ _field_terminator }
	};

	STRINGS(specializedincidentgameoverflags)
	{
		"killed all enemies#only looks at the enemies in-game at the end",
		"highest score#had the highest score",
		"top 3 score#one of the top three scorers",
		"winner#individual winner or on the winning team",
		"hosted#was the host of the game at the end",
		"check megalo category#if set, compare the Megalo category index against the tag value",
		"loser",
		"tied",
		"not tied"
	};
	STRING_LIST(specializedincidentgameoverflags, specializedincidentgameoverflags_strings, _countof(specializedincidentgameoverflags_strings));

	#define SPECIALIZEDINCIDENTRANDOMORDNANCEBLOCK_ID { 0xF6A98D0C, 0xC3F742AC, 0xAEABE06B, 0x901CE612 }
	TAG_STRUCT(
		specializedincidentrandomordnanceblock,
		"specializedIncidentRandomOrdnanceBlock",
		"specializedIncidentRandomOrdnanceBlock",
		"s_specializedincidentrandomordnanceblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPECIALIZEDINCIDENTRANDOMORDNANCEBLOCK_ID)
	{
		{ _field_string_id, "ordnance_name", "This must match one of the global ordnance objects." },
		{ _field_terminator }
	};

	#define SPECIALIZED_INCIDENT_BLOCK_ID { 0xC1F3C060, 0xBF5B4A72, 0x9CE8BC8B, 0xF98CE86B }
	TAG_STRUCT(
		specialized_incident_block,
		"specialized_incident_block",
		"specialized_incident_block",
		"s_specialized_incident_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPECIALIZED_INCIDENT_BLOCK_ID)
	{
		{ _field_string_id, "base incident" },
		{ _field_block, "kill implements", &specialized_incident_kill_implement_block_block },
		{ _field_block, "cause object", &specialized_incident_object_properties_block_block },
		{ _field_block, "effect object", MAKE_ALT_NAMES("kill bucket"), &specialized_incident_object_properties_block_block },
		{ _field_block, "special kill type", &specialized_incident_special_kill_type_block_block },
		{ _field_block, "game over filter", &specializedincidentgameoverblock_block },
		{ _field_block, "ordnance filter", &specializedincidentrandomordnanceblock_block },
		{ _field_block, "custom data filter", &specializedincidentcustomdatafilterblock_block },
		{ _field_block, "distance filter", &specializedincidentdistancefilterblock_block },
		{ _field_terminator }
	};

	#define SPECIALIZED_INCIDENT_FANFARE_BLOCK_ID { 0xBDADBDB5, 0x3A934FFE, 0x9ACFD385, 0xB197D612 }
	TAG_STRUCT(
		specialized_incident_fanfare_block,
		"specialized_incident_fanfare_block",
		"specialized_incident_fanfare_block",
		"s_specialized_incident_fanfare_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPECIALIZED_INCIDENT_FANFARE_BLOCK_ID)
	{
		{ _field_long_integer, "priority", "0 is highest prioroty" },
		{ _field_char_enum, "queue type", &incident_fanfare_queue_type },
		{ _field_byte_flags, "excluded audience", &incident_fanfare_event_input_enum_definition },
		{ _field_byte_flags, "broad cast message", &incident_fanfare_event_flags_definition },
		FIELD_PAD("PADME", 1),
		{ _field_string_id, "fanfare string" },
		{ _field_short_integer, "fanfare sprite index" },
		{ _field_short_integer, "display time in seconds" },
		{ _field_tag_reference, "hud screen reference", &cui_screen_group_reference },
		{ _field_tag_reference, "sound response", &sound_response_group_reference },
		{ _field_string_id, "carried object type" },
		{ _field_terminator }
	};

	STRINGS(incident_fanfare_queue_type)
	{
		"center",
		"game mode",
		"territory",
		"game mode secondary",
		"ordnance"
	};
	STRING_LIST(incident_fanfare_queue_type, incident_fanfare_queue_type_strings, _countof(incident_fanfare_queue_type_strings));

	STRINGS(incident_fanfare_event_input_enum_definition)
	{
		"NONE",
		"cause player",
		"cause team",
		"effect player",
		"effect team"
	};
	STRING_LIST(incident_fanfare_event_input_enum_definition, incident_fanfare_event_input_enum_definition_strings, _countof(incident_fanfare_event_input_enum_definition_strings));

	STRINGS(incident_fanfare_event_flags_definition)
	{
		"broad cast message"
	};
	STRING_LIST(incident_fanfare_event_flags_definition, incident_fanfare_event_flags_definition_strings, _countof(incident_fanfare_event_flags_definition_strings));

	#define SPECIALIZED_INCIDENT_KILL_IMPLEMENT_BLOCK_ID { 0x5969BC5F, 0x11694C45, 0x80E8714E, 0xEFB5D98C }
	TAG_STRUCT(
		specialized_incident_kill_implement_block,
		"specialized_incident_kill_implement_block",
		"specialized_incident_kill_implement_block",
		"s_specialized_incident_kill_implement_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPECIALIZED_INCIDENT_KILL_IMPLEMENT_BLOCK_ID)
	{
		{ _field_char_enum, "damage reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("ACNUIEHF", 3),
		{ _field_terminator }
	};

	#define SPECIALIZED_INCIDENT_OBJECT_PROPERTIES_BLOCK_ID { 0x4D1FDE04, 0x89074B60, 0x944875B0, 0x8DACCC3E }
	TAG_STRUCT(
		specialized_incident_object_properties_block,
		"specialized_incident_object_properties_block",
		"specialized_incident_object_properties_block",
		"s_specialized_incident_object_properties_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPECIALIZED_INCIDENT_OBJECT_PROPERTIES_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &specialized_incident_kill_bucket_flags },
		{ _field_char_enum, "bucket type", &campaign_metagame_bucket_type_with_none_enum },
		{ _field_char_enum, "bucket class", &campaign_metagame_bucket_class_with_none_enum },
		FIELD_PAD("PAD0", 2),
		{ _field_string, "gamertag" },
		{ _field_block, "riding in vehicles", &specialized_incident_object_riding_in_vehicle_properties_block_block },
		{ _field_terminator }
	};

	STRINGS(specialized_incident_kill_bucket_flags)
	{
		"player",
		"ai",
		"343i employee{bungie employee}",
		"hologram",
		"airborne",
		"sprinting",
		"crouched",
		"reloading",
		"not fancy assassinating",
		"fancy assassinating",
		"being fancy assassinated",
		"low health",
		"unshielded",
		"in stasis field",
		"active camouflage active",
		"hologram active",
		"jetpack active{jetpacking}",
		"portable automated turret active",
		"reflective shield active",
		"thruster pack active",
		"x-ray vision active",
		"active camouflage active and effective",
		"hologram recently activated",
		"thruster pack recently activated",
		"hologram took damage from other player",
		"hologram did not take damage from other player",
		"active shield recently activated",
		"in a full vehicle",
		"scoped in",
		"not scoped in",
		"jacking vehicle",
		"airsassination"
	};
	STRING_LIST(specialized_incident_kill_bucket_flags, specialized_incident_kill_bucket_flags_strings, _countof(specialized_incident_kill_bucket_flags_strings));

	#define SPECIALIZED_INCIDENT_OBJECT_RIDING_IN_VEHICLE_PROPERTIES_BLOCK_ID { 0xF5BB51F, 0xA1E14A01, 0x835ED18E, 0x9B9729FE }
	TAG_STRUCT(
		specialized_incident_object_riding_in_vehicle_properties_block,
		"specialized_incident_object_riding_in_vehicle_properties_block",
		"specialized_incident_object_riding_in_vehicle_properties_block",
		"s_specialized_incident_object_riding_in_vehicle_properties_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPECIALIZED_INCIDENT_OBJECT_RIDING_IN_VEHICLE_PROPERTIES_BLOCK_ID)
	{
		{ _field_long_enum, "vehicle type", &vehicle_type_enum },
		{ _field_terminator }
	};

	#define SPECIALIZED_INCIDENT_SPECIAL_KILL_TYPE_BLOCK_ID { 0x98E84EDD, 0x6C444EFF, 0xAD29087E, 0xB316BB19 }
	TAG_STRUCT(
		specialized_incident_special_kill_type_block,
		"specialized_incident_special_kill_type_block",
		"specialized_incident_special_kill_type_block",
		"s_specialized_incident_special_kill_type_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPECIALIZED_INCIDENT_SPECIAL_KILL_TYPE_BLOCK_ID)
	{
		{ _field_char_enum, "special kill type", &specialized_incident_special_kill_type_enum },
		FIELD_PAD("CVUIHEN", 3),
		{ _field_terminator }
	};

	STRINGS(specialized_incident_special_kill_type_enum)
	{
		"headshot",
		"grenade stick",
		"stealth kill",
		"fancy assassination",
		"superdetonation",
		"emp kill",
		"melee",
		"collision#vehicular splatter",
		"leader killed#killed the player in 1st place",
		"team elimination kill#killed the last surviving player on a team in team game",
		"ffa elimination kill#killed the last surviving player in a ffa game"
	};
	STRING_LIST(specialized_incident_special_kill_type_enum, specialized_incident_special_kill_type_enum_strings, _countof(specialized_incident_special_kill_type_enum_strings));

	#define SPHERES_BLOCK_STRUCT_ID { 0xCDB1A7ED, 0x43BC4585, 0x97CCF77D, 0x18678C4 }
	TAG_STRUCT(
		spheres_block_struct,
		"spheres_block_struct",
		"spheres_block_struct",
		"s_spheres_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPHERES_BLOCK_STRUCT_ID,
		4)
	{
		{ _field_struct, "base", &havok_primitive_struct },
		{ _field_struct, "sphere shape", &havok_convex_shape_struct },
		FIELD_PAD("algn344", 12),
		{ _field_struct, "translate shape", &havok_convex_translate_shape_struct },
		{ _field_terminator }
	};

	#define SPRING_ACCELERATION_STRUCT_DEFINITION_ID { 0x1073ABE0, 0xAD9447BB, 0x8910B4FF, 0x30CD63B1 }
	TAG_STRUCT(
		spring_acceleration_struct_definition,
		"spring_acceleration_struct_definition",
		"spring_acceleration_struct_definition",
		"s_spring_acceleration_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPRING_ACCELERATION_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "linear acceleartions", &spring_linear_acceleration_block_block },
		{ _field_short_block_index, "x-axis", &spring_linear_acceleration_block_block },
		{ _field_short_block_index, "y-axis", &spring_linear_acceleration_block_block },
		{ _field_short_block_index, "z-axis", &spring_linear_acceleration_block_block },
		FIELD_PAD("pad", 2),
		{ _field_terminator }
	};

	#define SPRING_LINEAR_ACCELERATION_BLOCK_ID { 0x1C23AAAC, 0x13234449, 0xAEAB1083, 0xD9170D8A }
	TAG_STRUCT(
		spring_linear_acceleration_block,
		"spring_linear_acceleration_block",
		"spring_linear_acceleration_block",
		"s_spring_linear_acceleration_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SPRING_LINEAR_ACCELERATION_BLOCK_ID)
	{
		{ _field_real, "acceleration range", nullptr, "world units" },
		{ _field_real, "inverse acceleration range", nullptr, "world units", FIELD_FLAG_UNKNOWN0 | FIELD_FLAG_READ_ONLY },
		{ _field_real, "world acceleration scale", "0 defaults to 1, scale the acceleration the object itself applies on this system." },
		FIELD_EXPLANATION("damping", "feed velocity into this function and damp by the value that comes out"),
		{ _field_struct, "spring damping", &scalar_function_named_struct },
		{ _field_real, "velocity domain" },
		{ _field_struct, "spring acceleration", &scalar_function_named_struct },
		{ _field_terminator }
	};

	#define SQUAD_DEFINITION_INTERNAL_STRUCT_ID { 0x5DA7C809, 0xB8B849EE, 0x9CE778C1, 0x99C9CDD3 }
	TAG_STRUCT(
		squad_definition_internal_struct,
		"squad_definition_internal_struct",
		"squad_definition_internal_struct",
		"s_squad_definition_internal_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SQUAD_DEFINITION_INTERNAL_STRUCT_ID)
	{
		{ _field_block, "cells", &cell_block_block },
		{ _field_terminator }
	};

	#define SQUAD_GROUPS_BLOCK_ID { 0x924C4B16, 0x87A04E62, 0x9A767F70, 0x3116A14F }
	TAG_STRUCT(
		squad_groups_block,
		"squad_groups_block",
		"squad_groups_block",
		"s_squad_groups_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SQUAD_GROUPS_BLOCK_ID)
	{
		{ _field_string, "name" },
		{ _field_short_block_index, "parent", &squad_groups_block_block, _field_id_squad_template },
		{ _field_short_block_index, "initial objective", &objectives_block_block },
		FIELD_PAD("soon to be an initial task", 2),
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		{ _field_terminator }
	};

	#define SQUAD_PATROL_BLOCK_ID { 0xBA52B4CA, 0xAF324B33, 0x9B6A0F6F, 0xAD1274B9 }
	TAG_STRUCT(
		squad_patrol_block,
		"squad_patrol_block",
		"squad_patrol_block",
		"s_squad_patrol_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SQUAD_PATROL_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_string_id, "name" },
		{ _field_block, "squads", &squad_patrol_member_block_block },
		{ _field_block, "points", &squad_patrol_point_block_block },
		{ _field_block, "transitions", &squad_patrol_transition_block_block },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		FIELD_PAD("pad", 2),
		{ _field_terminator }
	};

	#define SQUAD_PATROL_MEMBER_BLOCK_ID { 0x8092823C, 0xCE64669, 0xA842F833, 0xC9ACEABD }
	TAG_STRUCT(
		squad_patrol_member_block,
		"squad_patrol_member_block",
		"squad_patrol_member_block",
		"s_squad_patrol_member_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SQUAD_PATROL_MEMBER_BLOCK_ID)
	{
		{ _field_short_block_index, "squad", &squads_block_block },
		FIELD_PAD("post-squad-pad", 2),
		{ _field_terminator }
	};

	#define SQUAD_PATROL_POINT_BLOCK_ID { 0x19925340, 0x2CD7411C, 0x84AED8BA, 0x22F75B6D }
	TAG_STRUCT(
		squad_patrol_point_block,
		"squad_patrol_point_block",
		"squad_patrol_point_block",
		"s_squad_patrol_point_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SQUAD_PATROL_POINT_BLOCK_ID)
	{
		{ _field_short_block_index, "objective", &objectives_block_block },
		FIELD_PAD("post-objective-pad", 2),
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_real, "hold time", "How long the AI should pause at this point before searching", "seconds", MAKE_ALT_NAMES("occupy time") },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_real, "search time", "How long the AI should search at this point before returning", "seconds" },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_real, "pause time", "How long the AI should pause at this point after searching before moving on", "seconds" },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_real, "cooldown time", "How long after being abandoned should this point be available again", "seconds" },
		{ _field_terminator }
	};

	#define SQUAD_PATROL_TRANSITION_BLOCK_ID { 0x70647FDE, 0x5A0449E6, 0x8491538C, 0xAFE36794 }
	TAG_STRUCT(
		squad_patrol_transition_block,
		"squad_patrol_transition_block",
		"squad_patrol_transition_block",
		"s_squad_patrol_transition_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SQUAD_PATROL_TRANSITION_BLOCK_ID)
	{
		{ _field_short_block_index, "point1", &squad_patrol_point_block_block },
		{ _field_short_block_index, "point2", &squad_patrol_point_block_block },
		{ _field_block, "waypoints", &squad_patrol_waypoint_block_block },
		{ _field_terminator }
	};

	#define SQUAD_PATROL_WAYPOINT_BLOCK_ID { 0xE428A1E3, 0x735A4EF2, 0xB58F05F6, 0x703A8167 }
	TAG_STRUCT(
		squad_patrol_waypoint_block,
		"squad_patrol_waypoint_block",
		"squad_patrol_waypoint_block",
		"s_squad_patrol_waypoint_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SQUAD_PATROL_WAYPOINT_BLOCK_ID)
	{
		{ _field_real_point_3d, "position" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_terminator }
	};

	#define SQUAD_TEMPLATE_BLOCK_STRUCT_ID { 0x1CFEC4FF, 0xE85F4CB8, 0x814D3264, 0x784E278 }
	TAG_STRUCT(
		squad_template_block_struct,
		"squad_template_block_struct",
		"squad_template_block_struct",
		"s_squad_template_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SQUAD_TEMPLATE_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_block, "cell templates", &cell_template_block_block },
		{ _field_terminator }
	};

	#define SQUADS_BLOCK_STRUCT_ID { 0x650EB872, 0x6CC847B7, 0xB11BDACA, 0xAC519202 }
	TAG_STRUCT(
		squads_block_struct,
		"squads_block_struct",
		"squads_block_struct",
		"s_squads_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SQUADS_BLOCK_STRUCT_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_string, "name" },
		{ _field_long_flags, "flags", &squad_flags },
		{ _field_short_enum, "team", &ai_team_enum },
		{ _field_short_block_index, "parent", &squad_groups_block_block, _field_id_squad_template },
		{ _field_short_block_index, "initial zone", &zone_block_block },
		{ _field_short_block_index, "initial objective", &objectives_block_block },
		{ _field_short_block_index_custom_search, "initial task", &custom_task_block_index_definition },
		{ _field_short_block_index, "editor folder", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		{ _field_block, "spawn formations", &spawn_formation_block_block },
		{ _field_block, "spawn points", &spawn_points_block_block },
		{ _field_long_enum, "wave placement filter", "Filter which squads in Firefight waves can be spawned into this squad", &wave_placement_filter_enum },
		{ _field_string_id, "template" },
		{ _field_long_integer, "squad template index" },
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_struct, "designer", &squad_definition_internal_struct },
		{ _field_struct, "templated", &squad_definition_internal_struct },
		{ _field_terminator }
	};

	STRINGS(squad_flags)
	{
		"unused",
		"blind",
		"deaf",
		"braindead",
		"initially placed",
		"units not enterable by player",
		"fireteam absorber",
		"squad is runtime(DO NOT USE)!",
		"no wave spawn"
	};
	STRING_LIST(squad_flags, squad_flags_strings, _countof(squad_flags_strings));

	STRINGS(ai_team_enum)
	{
		"default",
		"player",
		"human",
		"covenant",
		"brute",
		"mule",
		"spare",
		"covenant_player",
		"forerunner"
	};
	STRING_LIST(ai_team_enum, ai_team_enum_strings, _countof(ai_team_enum_strings));

	STRINGS(wave_placement_filter_enum)
	{
		"None",
		"Heavy Infantry",
		"Boss Infantry",
		"Light Vehicle",
		"Heavy Vehicle",
		"Flying Infantry",
		"Flying Vehicle",
		"Bonus"
	};
	STRING_LIST(wave_placement_filter_enum, wave_placement_filter_enum_strings, _countof(wave_placement_filter_enum_strings));

	#define SSAO_DEFINITION_STRUCT_DEFINITION_ID { 0x677644E3, 0xF3A54E06, 0x84199B42, 0xBA8F8DAF }
	TAG_STRUCT(
		ssao_definition_struct_definition,
		"ssao_definition_struct_definition",
		"ssao_definition_struct_definition",
		"s_ssao_definition_struct_definition",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SSAO_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_char_enum, "downsample", &ssao_downsample_enum_definition },
		{ _field_char_enum, "ssao type", &ssao_type_enum_definition },
		{ _field_byte_integer, "version" },
		FIELD_PAD("BKGKKELQIF", 1),
		{ _field_real, "hdao ambient shadow", "how much ssao shadowing darkens the ambient lighting" },
		{ _field_real, "hdao point shadow", "how much ssao shadowing darkens the point lighting ie the sun" },
		{ _field_real, "sharp ambient shadow", "how much the sharp dynamic shadows darken ambient lighting" },
		{ _field_real, "sharp point shadow", "how much the sharp dynamic shadows darken the point lighting ie the sun" },
		{ _field_real, "max intensity", "unshadowed areas will have this relative intensity", nullptr, "[0-1]" },
		{ _field_real, "min intensity", "fully shadowed areas will have this relative intensity", nullptr, "[0-1]" },
		{ _field_real, "falloff width", "controls the shape of the shadow falloff curve" },
		{ _field_real, "corner scale", "controls shadow sensitivity to corners" },
		{ _field_real, "corner bias", "offsets corner sensitivity, generally to ignore shallow corners" },
		{ _field_real, "bounds scale", "controls the maximum shadow distance, as a ratio of the distance to the object" },
		{ _field_real, "bounds offset", "offsets the maximum shadow distance, generally to make a region of full darkness before fading" },
		{ _field_real, "near clip", "completely removes ssao on anything closer than this", "world units" },
		{ _field_real, "near fade width", "distance over which the ssao fades in", "world units" },
		{ _field_real, "far clip", "completely removes ssao on anything farther than this", "world units" },
		{ _field_real, "far fade width", "distance over which the ssao fades in", "world units" },
		{ _field_real_argb_color, "runtime_data_0" },
		{ _field_real_argb_color, "runtime_data_1" },
		{ _field_real_argb_color, "runtime_data_2" },
		{ _field_real_argb_color, "runtime_data_3" },
		{ _field_real_argb_color, "runtime_data_4" },
		{ _field_real_argb_color, "runtime_data_5" },
		{ _field_real_argb_color, "runtime_data_7" },
		{ _field_terminator }
	};

	STRINGS(ssao_downsample_enum_definition)
	{
		"block downsample",
		"clover downsample"
	};
	STRING_LIST(ssao_downsample_enum_definition, ssao_downsample_enum_definition_strings, _countof(ssao_downsample_enum_definition_strings));

	STRINGS(ssao_type_enum_definition)
	{
		"off",
		"hdao large 32 sample",
		"hdao large 64 predicated",
		"hdao small 24 sample",
		"hdao screenshot",
		"debug mask",
		"ssao midnight 16 sample"
	};
	STRING_LIST(ssao_type_enum_definition, ssao_type_enum_definition_strings, _countof(ssao_type_enum_definition_strings));

	#define STATES_BLOCK_ID { 0x3BD7BDBB, 0xD2EE413B, 0x822971B4, 0x516A8D30 }
	TAG_STRUCT(
		states_block,
		"states_block",
		"states_block",
		"s_states_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STATES_BLOCK_ID)
	{
		{ _field_string, "name" },
		{ _field_real_rgb_color, "color" },
		{ _field_short_integer, "counts as", nullptr, "neighbors" },
		FIELD_PAD("IZ", 2),
		{ _field_real, "initial placement weight" },
		FIELD_PAD("B", 24),
		{ _field_short_block_index, "zero", &states_block_block },
		{ _field_short_block_index, "one", &states_block_block },
		{ _field_short_block_index, "two", &states_block_block },
		{ _field_short_block_index, "three", &states_block_block },
		{ _field_short_block_index, "four", &states_block_block },
		{ _field_short_block_index, "five", &states_block_block },
		{ _field_short_block_index, "six", &states_block_block },
		{ _field_short_block_index, "seven", &states_block_block },
		{ _field_short_block_index, "eight", &states_block_block },
		FIELD_PAD("BJVWP", 2),
		{ _field_terminator }
	};

	#define STATIC_DATA_COLUMN_ID { 0x1FC0B041, 0xCFB94409, 0xBEB29306, 0x5894CD1 }
	TAG_STRUCT(
		static_data_column,
		"static_data_column",
		"static_data_column",
		"s_static_data_column",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STATIC_DATA_COLUMN_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_enum, "type", &property_type },
		FIELD_PAD("pad0", 2),
		{ _field_terminator }
	};

	STRINGS(property_type)
	{
		"boolean",
		"long",
		"real",
		"string",
		"component",
		"tag reference",
		"string id",
		"argb color",
		"emblem info"
	};
	STRING_LIST(property_type, property_type_strings, _countof(property_type_strings));

	#define STATIC_DATA_STRUCT_ID { 0x2618E512, 0x8FF9442B, 0x9F93FFB2, 0x90B8121F }
	TAG_STRUCT(
		static_data_struct,
		"static_data_struct",
		"static_data_struct",
		"s_static_data_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STATIC_DATA_STRUCT_ID)
	{
		{ _field_block, "columns", &static_data_column_block },
		{ _field_block, "rows", &static_data_row_block },
		{ _field_terminator }
	};

	#define STATIC_DATA_TABLE_ID { 0x5F2AD34A, 0x125E4C65, 0x9E9134E6, 0xD3E61871 }
	TAG_STRUCT(
		static_data_table,
		"static_data_table",
		"static_data_table",
		"s_static_data_table",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STATIC_DATA_TABLE_ID)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "mock data for component", "a component on this screen that gets replaced in simulation with this data table" },
		{ _field_struct, "static data", &static_data_struct },
		{ _field_terminator }
	};

	#define STEERING_ANIMATION_STRUCT_ID { 0xA551DA10, 0x1D3F4100, 0x9C4C60D2, 0x46D74662 }
	TAG_STRUCT(
		steering_animation_struct,
		"steering_animation_struct",
		"steering_animation_struct",
		"s_steering_animation_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STEERING_ANIMATION_STRUCT_ID)
	{
		FIELD_EXPLANATION("steering animation and interpolation\n", "This data controls the depiction of steering \nthrough animation - not the vehicles ability to turn\ninterpolation scale= how much we interpolate between steering poses.\nmax angle= max animated steering angle change allowed per tick.\n"),
		{ _field_real, "interpolation scale", "1= heavy interp. of steering animations" },
		{ _field_angle, "max angle", "non-zero= max angle delta per frame" },
		{ _field_terminator }
	};

	#define STEREO_SYSTEM_STRUCT_DEFINITION_ID { 0x4B58B990, 0x4F154F6F, 0xA32235AE, 0xCFE62423 }
	TAG_STRUCT(
		stereo_system_struct_definition,
		"stereo_system_struct_definition",
		"stereo_system_struct_definition",
		"s_stereo_system_struct_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STEREO_SYSTEM_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "unused" },
		{ _field_terminator }
	};

	#define STIFF_SPRING_CONSTRAINTS_BLOCK_ID { 0xB171A408, 0xC3E44FA9, 0x9B290904, 0xF448E781 }
	TAG_STRUCT(
		stiff_spring_constraints_block,
		"stiff_spring_constraints_block",
		"stiff_spring_constraints_block",
		"s_stiff_spring_constraints_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STIFF_SPRING_CONSTRAINTS_BLOCK_ID)
	{
		{ _field_struct, "constraint bodies", &constraint_bodies_struct },
		FIELD_PAD("KGB", 4),
		{ _field_real, "spring_length" },
		{ _field_terminator }
	};

	#define STIMULUS_PAYLOAD_BLOCK_STRUCT_ID { 0x627E7586, 0x1A29436A, 0xB5E81C06, 0xB6A3FD65 }
	TAG_STRUCT(
		stimulus_payload_block_struct,
		"stimulus_payload_block_struct",
		"stimulus_payload_block_struct",
		"s_stimulus_payload_block_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STIMULUS_PAYLOAD_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "stimulus type" },
		{ _field_terminator }
	};

	#define STITCHABLE_BITMAP_TEXTURE_INTEROP_BLOCK_STRUCT_ID { 0x97F572A8, 0xD51445FA, 0xB478B1C9, 0xB54BB920 }
	TAG_STRUCT(
		stitchable_bitmap_texture_interop_block_struct,
		"stitchable_bitmap_texture_interop_block_struct",
		"stitchable_bitmap_texture_interop_block_struct",
		"s_stitchable_bitmap_texture_interop_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STITCHABLE_BITMAP_TEXTURE_INTEROP_BLOCK_STRUCT_ID)
	{
		{ _field_pageable_resource, "texture resource", &stitchable_bitmap_texture_interop_resource },
		{ _field_terminator }
	};

	#define STITCHABLE_BITMAP_TEXTURE_INTEROP_RESOURCE_STRUCT_ID { 0xACE3533D, 0x8E614A91, 0xB4B123CC, 0xA5065D75 }
	TAG_STRUCT(
		stitchable_bitmap_texture_interop_resource_struct,
		"stitchable_bitmap_texture_interop_resource_struct",
		"stitchable_bitmap_texture_interop_resource_struct",
		"s_stitchable_bitmap_texture_interop_resource_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STITCHABLE_BITMAP_TEXTURE_INTEROP_RESOURCE_STRUCT_ID)
	{
		{ _field_api_interop, "texture interop", &render_texture_interop_definition },
		{ _field_terminator }
	};

	#define STREAMINGZONESET_STRUCT_DEFINITION_ID { 0x19F43470, 0xE59943F7, 0xBC349E62, 0x10A61807 }
	TAG_STRUCT(
		streamingzoneset_struct_definition,
		"streamingzoneset_struct_definition",
		"streamingzoneset_struct_definition",
		"s_streamingzoneset_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STREAMINGZONESET_STRUCT_DEFINITION_ID)
	{
		{ _field_real_point_2d, "resource subregion AABB min" },
		{ _field_real_vector_2d, "resource subregion block size" },
		{ _field_block, "streaming resource ids", &streamingzonesetresourceidblock_block },
		{ _field_block, "streaming resource subregions", &streamingzonesetresourcesubregiondatablock_block },
		{ _field_terminator }
	};

	#define STRING_FILE_REFERENCES_ID { 0xF35BA8A6, 0x4CA54CEC, 0x94707022, 0x2117E522 }
	TAG_STRUCT(
		string_file_references,
		"string_file_references",
		"string_file_references",
		"s_string_file_references",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRING_FILE_REFERENCES_ID)
	{
		{ _field_tag_reference, "string list", &multilingual_unicode_string_list_group_reference },
		{ _field_terminator }
	};

	#define STRING_SUBSTITUTION_PAIR_BLOCK_ID { 0x57436AF6, 0x37054DE1, 0xBB030AB6, 0x685EDB0B }
	TAG_STRUCT(
		string_substitution_pair_block,
		"string_substitution_pair_block",
		"string_substitution_pair_block",
		"s_string_substitution_pair_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRING_SUBSTITUTION_PAIR_BLOCK_ID)
	{
		{ _field_string_id, "first string id" },
		{ _field_string_id, "second string id" },
		{ _field_long_integer, "associated value" },
		{ _field_terminator }
	};

	#define STRUCTUREBSPFXMARKERBLOCK_ID { 0x25D71C3, 0x50534BF1, 0xB1331C99, 0x25EAA551 }
	TAG_STRUCT(
		structurebspfxmarkerblock,
		"structureBspFxMarkerBlock",
		"structureBspFxMarkerBlock",
		"s_structurebspfxmarkerblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTUREBSPFXMARKERBLOCK_ID)
	{
		{ _field_string, "marker name" },
		{ _field_real_quaternion, "rotation" },
		{ _field_real_point_3d, "position" },
		{ _field_tag_reference, "optional attached effect", &effect_group_lens_flare_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(effect_group_lens_flare_group_reference)
	{
		EFFECT_TAG,
		LENS_FLARE_TAG,
		INVALID_TAG
	};

	#define STRUCTUREIOHAVOKDATABLOCK_STRUCT_ID { 0x7320729, 0x546A468D, 0xBDB63F21, 0xF4C58C41 }
	TAG_STRUCT(
		structureiohavokdatablock_struct,
		"structureIOHavokDataBlock_struct",
		"structureIOHavokDataBlock_struct",
		"s_structureiohavokdatablock_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTUREIOHAVOKDATABLOCK_STRUCT_ID)
	{
		{ _field_long_integer, "version" },
		{ _field_long_integer, "RuntimeDeserializedBody Pointer" },
		{ _field_long_integer, "RuntimeDeserializedData Pointer" },
		{ _field_long_integer, "Prefab Index" },
		{ _field_data, "Serialized Havok Data", &hkserializedcompressedmoppshapedata },
		{ _field_block, "Serialized Per Collision Type Havok Geometry", &serializedhavokgeometrydatablock_block },
		{ _field_real_point_3d, "Shapes bounds min" },
		{ _field_real_point_3d, "Shapes bounds max" },
		{ _field_terminator }
	};

	#define STRUCTURELIGHTINGCINEMATICLIGHTINSTANCEBLOCK_STRUCT_ID { 0x601943D7, 0xAA2240B1, 0xB21A7725, 0x3A7D78D }
	TAG_STRUCT(
		structurelightingcinematiclightinstanceblock_struct,
		"structureLightingCinematicLightInstanceBlock_struct",
		"structureLightingCinematicLightInstanceBlock_struct",
		"s_structurelightingcinematiclightinstanceblock_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURELIGHTINGCINEMATICLIGHTINSTANCEBLOCK_STRUCT_ID)
	{
		{ _field_int64_integer, "Light Instance ID" },
		{ _field_long_block_index, "Light Definition Index", &structure_lighting_generic_light_definition_block_block },
		{ _field_long_block_index, "Light Instance Index", &structure_lighting_generic_light_instance_block_block },
		{ _field_array, "Active Shots", &g_cinematicshotflagarray$2 },
		{ _field_block, "Linked Objects", &structurelightingcinematicobjectblock_block },
		FIELD_PAD("padding", 4),
		{ _field_terminator }
	};

	#define STRUCTURELIGHTINGCINEMATICOBJECTBLOCK_ID { 0x7369B6E6, 0x2808420D, 0x8F97AAAF, 0x27C9838D }
	TAG_STRUCT(
		structurelightingcinematicobjectblock,
		"structureLightingCinematicObjectBlock",
		"structureLightingCinematicObjectBlock",
		"s_structurelightingcinematicobjectblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURELIGHTINGCINEMATICOBJECTBLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	#define STRUCTUREMETADATALIGHTCONEMARKERBLOCK_ID { 0x54973095, 0x6F2344DD, 0xA012514D, 0x3DC2A5F7 }
	TAG_STRUCT(
		structuremetadatalightconemarkerblock,
		"structureMetadataLightConeMarkerBlock",
		"structureMetadataLightConeMarkerBlock",
		"s_structuremetadatalightconemarkerblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTUREMETADATALIGHTCONEMARKERBLOCK_ID)
	{
		{ _field_string, "marker name" },
		{ _field_real_quaternion, "rotation" },
		{ _field_real_point_3d, "position" },
		{ _field_real, "length" },
		{ _field_real, "width" },
		{ _field_real, "intensity" },
		{ _field_real_argb_color, "light color" },
		{ _field_tag_reference, "light cone tag", &light_cone_group_reference },
		{ _field_tag_reference, "intensity curve", &curve_scalar_group_reference },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_CACHE_FILE_TAG_RESOURCES_STRUCT_ID { 0xF94BEACC, 0xEDAB423F, 0x82675E23, 0xFA14A1AD }
	TAG_STRUCT(
		structure_bsp_cache_file_tag_resources_struct,
		"structure_bsp_cache_file_tag_resources_struct",
		"structure_bsp_cache_file_tag_resources_struct",
		"s_structure_bsp_cache_file_tag_resources_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_CACHE_FILE_TAG_RESOURCES_STRUCT_ID)
	{
		{ _field_block, "large structure surfaces", &structure_surface_block_block },
		{ _field_block, "structure surface to triangle mapping", &structure_surface_to_triangle_mapping_block_block },
		{ _field_block, "edge to seam edge", &structure_edge_to_seam_edge_mapping_block_block },
		{ _field_block, "pathfinding data", &pathfinding_data_block_block },
		{ _field_block, "instanced geometry instances without names", &structure_bsp_instanced_geometry_instances_without_names_block_block },
		{ _field_block, "super node parent mappings", &super_node_mappings_block_block },
		{ _field_block, "super node recursable_masks", &super_node_recursable_masks_block_block },
		{ _field_block, "structure_super_node_traversal_geometry_block", &structure_super_node_traversal_geometry_block_block },
		{ _field_struct, "instance kd hierarchy", &collision_kd_hierarchy_static_struct },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_CLUSTER_BLOCK_STRUCT_ID { 0x443EB808, 0xF3A4493E, 0xAAB7DADD, 0x79F9A8DE }
	TAG_STRUCT(
		structure_bsp_cluster_block_struct,
		"structure_bsp_cluster_block_struct",
		"structure_bsp_cluster_block_struct",
		"s_structure_bsp_cluster_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_CLUSTER_BLOCK_STRUCT_ID)
	{
		FIELD_EXPLANATION("CLUSTER INFO", nullptr),
		{ _field_real_bounds, "bounds x" },
		{ _field_real_bounds, "bounds y" },
		{ _field_real_bounds, "bounds z" },
		FIELD_PAD("DING", 1),
		{ _field_char_integer, "atmosphere index" },
		{ _field_char_integer, "camera fx index" },
		{ _field_char_integer, "weather index" },
		{ _field_short_block_index, "acoustics", &scenario_acoustics_palette_block_definition_block },
		{ _field_short_integer, "acoustics sound cluster index" },
		{ _field_short_integer, "runtime first decal index" },
		{ _field_short_integer, "runtime decal cound" },
		{ _field_word_flags, "flags", &structure_cluster_flags },
		FIELD_PAD("ERERRFQ", 2),
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "portals", &structure_bsp_cluster_portal_index_block_block },
		{ _field_short_integer, "mesh index" },
		{ _field_short_integer, "instance imposter cluster mopp index" },
		{ _field_block, "seam indices", &seam_indices_block_definition_block },
		{ _field_block, "decorator groups", &decorator_runtime_cluster_block_block },
		{ _field_block, "cheap light marker refs", &cheap_light_marker_ref_block_block },
		{ _field_block, "pvs bound object identifiers", &pvs_bound_object_identifiers_block_block },
		{ _field_block, "pvs bound object references", &pvs_bound_object_references_block_block },
		{ _field_block, "cluster cubemaps", &structure_cluster_cubemap_block },
		{ _field_terminator }
	};

	STRINGS(structure_cluster_flags)
	{
		"one way portal",
		"door portal",
		"postprocessed geometry",
		"is the sky",
		"decorators are lit"
	};
	STRING_LIST(structure_cluster_flags, structure_cluster_flags_strings, _countof(structure_cluster_flags_strings));

	#define STRUCTURE_BSP_CLUSTER_DEBUG_INFO_BLOCK_ID { 0xB5A0AC69, 0x26934359, 0x9CA55C27, 0x431EC06E }
	TAG_STRUCT(
		structure_bsp_cluster_debug_info_block,
		"structure_bsp_cluster_debug_info_block",
		"structure_bsp_cluster_debug_info_block",
		"s_structure_bsp_cluster_debug_info_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_CLUSTER_DEBUG_INFO_BLOCK_ID)
	{
		{ _field_word_flags, "errors", &structure_bsp_debug_info_cluster_error_flags },
		{ _field_word_flags, "warnings", &structure_bsp_debug_info_cluster_warning_flags },
		FIELD_PAD("KHWRB", 28),
		{ _field_block, "lines", &structure_bsp_debug_info_render_line_block_block },
		{ _field_block, "fog plane indices", &structure_bsp_debug_info_indices_block_block },
		{ _field_block, "visible fog plane indices", &structure_bsp_debug_info_indices_block_block },
		{ _field_block, "vis-fog omission cluster indices", &structure_bsp_debug_info_indices_block_block },
		{ _field_block, "containing fog zone indices", &structure_bsp_debug_info_indices_block_block },
		{ _field_terminator }
	};

	STRINGS(structure_bsp_debug_info_cluster_error_flags)
	{
		"multiple fog planes",
		"fog zone collision",
		"fog zone immersion"
	};
	STRING_LIST(structure_bsp_debug_info_cluster_error_flags, structure_bsp_debug_info_cluster_error_flags_strings, _countof(structure_bsp_debug_info_cluster_error_flags_strings));

	STRINGS(structure_bsp_debug_info_cluster_warning_flags)
	{
		"multiple visible fog planes",
		"visible fog cluster omission",
		"fog plane missed render-bsp"
	};
	STRING_LIST(structure_bsp_debug_info_cluster_warning_flags, structure_bsp_debug_info_cluster_warning_flags_strings, _countof(structure_bsp_debug_info_cluster_warning_flags_strings));

	#define STRUCTURE_BSP_CLUSTER_PORTAL_BLOCK_ID { 0x515C51A4, 0x87494090, 0x95104547, 0x3C6C550F }
	TAG_STRUCT(
		structure_bsp_cluster_portal_block,
		"structure_bsp_cluster_portal_block",
		"structure_bsp_cluster_portal_block",
		"s_structure_bsp_cluster_portal_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_CLUSTER_PORTAL_BLOCK_ID)
	{
		{ _field_struct, "oriented bounds", &structure_bsp_cluster_portal_oriented_bounds_block },
		{ _field_short_integer, "back cluster" },
		{ _field_short_integer, "front cluster" },
		{ _field_long_integer, "plane index" },
		{ _field_real_point_3d, "centroid" },
		{ _field_real, "bounding radius" },
		{ _field_long_flags, "flags", &structure_bsp_cluster_portal_flags_definition },
		{ _field_block, "vertices", &structure_bsp_cluster_portal_vertex_block_block },
		{ _field_terminator }
	};

	STRINGS(structure_bsp_cluster_portal_flags_definition)
	{
		"ai can\'t hear through this shit",
		"one-way",
		"door",
		"no-way",
		"one-way-reversed",
		"no one can hear through this"
	};
	STRING_LIST(structure_bsp_cluster_portal_flags_definition, structure_bsp_cluster_portal_flags_definition_strings, _countof(structure_bsp_cluster_portal_flags_definition_strings));

	#define STRUCTURE_BSP_CLUSTER_PORTAL_INDEX_BLOCK_ID { 0x8C1C3A41, 0x400B4519, 0x95B2C6B8, 0x710AC715 }
	TAG_STRUCT(
		structure_bsp_cluster_portal_index_block,
		"structure_bsp_cluster_portal_index_block",
		"structure_bsp_cluster_portal_index_block",
		"s_structure_bsp_cluster_portal_index_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_CLUSTER_PORTAL_INDEX_BLOCK_ID)
	{
		{ _field_short_integer, "portal index" },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_CLUSTER_PORTAL_ORIENTED_BOUNDS_BLOCK_ID { 0x224A23F3, 0x3B5842F1, 0x421067FE, 0x3C5CE7F2 }
	TAG_STRUCT(
		structure_bsp_cluster_portal_oriented_bounds_block,
		"structure_bsp_cluster_portal_oriented_bounds_block",
		"structure_bsp_cluster_portal_oriented_bounds_block",
		"s_structure_bsp_cluster_portal_oriented_bounds_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_CLUSTER_PORTAL_ORIENTED_BOUNDS_BLOCK_ID)
	{
		{ _field_real_point_3d, "center" },
		{ _field_real_vector_3d, "extents" },
		{ _field_real_quaternion, "orientation" },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_CLUSTER_PORTAL_VERTEX_BLOCK_ID { 0xCE56A99F, 0x1DD34CA8, 0xAA366F5F, 0xF8F748EC }
	TAG_STRUCT(
		structure_bsp_cluster_portal_vertex_block,
		"structure_bsp_cluster_portal_vertex_block",
		"structure_bsp_cluster_portal_vertex_block",
		"s_structure_bsp_cluster_portal_vertex_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_CLUSTER_PORTAL_VERTEX_BLOCK_ID)
	{
		{ _field_real_point_3d, "point" },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_CONVEYOR_SURFACE_BLOCK_ID { 0xCD0C6613, 0x20BF49D0, 0x9379FD49, 0xA1729B48 }
	TAG_STRUCT(
		structure_bsp_conveyor_surface_block,
		"structure_bsp_conveyor_surface_block",
		"structure_bsp_conveyor_surface_block",
		"s_structure_bsp_conveyor_surface_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_CONVEYOR_SURFACE_BLOCK_ID)
	{
		{ _field_real_vector_3d, "u" },
		{ _field_real_vector_3d, "v" },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_DEBUG_INFO_BLOCK_ID { 0x8FF53A43, 0xE3814420, 0x81140052, 0xAB9DFEA6 }
	TAG_STRUCT(
		structure_bsp_debug_info_block,
		"structure_bsp_debug_info_block",
		"structure_bsp_debug_info_block",
		"s_structure_bsp_debug_info_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_DEBUG_INFO_BLOCK_ID)
	{
		FIELD_PAD("BRQYEF", 64),
		{ _field_block, "clusters", &structure_bsp_cluster_debug_info_block_block },
		{ _field_block, "fog planes", &structure_bsp_fog_plane_debug_info_block_block },
		{ _field_block, "fog zones", &structure_bsp_fog_zone_debug_info_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_DEBUG_INFO_INDICES_BLOCK_ID { 0x5E7D4A5C, 0x49B34181, 0xB5652E00, 0x9BA99982 }
	TAG_STRUCT(
		structure_bsp_debug_info_indices_block,
		"structure_bsp_debug_info_indices_block",
		"structure_bsp_debug_info_indices_block",
		"s_structure_bsp_debug_info_indices_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_DEBUG_INFO_INDICES_BLOCK_ID)
	{
		{ _field_long_integer, "index" },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_DEBUG_INFO_RENDER_LINE_BLOCK_ID { 0x288FF283, 0x1AB747CD, 0x84A91A1A, 0x49EB05F1 }
	TAG_STRUCT(
		structure_bsp_debug_info_render_line_block,
		"structure_bsp_debug_info_render_line_block",
		"structure_bsp_debug_info_render_line_block",
		"s_structure_bsp_debug_info_render_line_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_DEBUG_INFO_RENDER_LINE_BLOCK_ID)
	{
		{ _field_short_enum, "type", &structure_bsp_debug_info_render_line_type_enum },
		{ _field_short_integer, "code" },
		{ _field_short_integer, "pad thai" },
		FIELD_PAD("BNQS", 2),
		{ _field_real_point_3d, "point 0" },
		{ _field_real_point_3d, "point 1" },
		{ _field_terminator }
	};

	STRINGS(structure_bsp_debug_info_render_line_type_enum)
	{
		"fog plane boundary edge",
		"fog plane internal edge",
		"fog zone floodfill",
		"fog zone cluster centroid",
		"fog zone cluster geometry",
		"fog zone portal centroid",
		"fog zone portal geometry"
	};
	STRING_LIST(structure_bsp_debug_info_render_line_type_enum, structure_bsp_debug_info_render_line_type_enum_strings, _countof(structure_bsp_debug_info_render_line_type_enum_strings));

	#define STRUCTURE_BSP_DETAIL_OBJECT_DATA_BLOCK_ID { 0x20D0C285, 0xB61244F7, 0x996ED157, 0x181CA371 }
	TAG_STRUCT(
		structure_bsp_detail_object_data_block,
		"structure_bsp_detail_object_data_block",
		"structure_bsp_detail_object_data_block",
		"s_structure_bsp_detail_object_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_DETAIL_OBJECT_DATA_BLOCK_ID)
	{
		{ _field_block, "cells", &global_detail_object_cells_block_block },
		{ _field_block, "instances", &global_detail_object_block_block },
		{ _field_block, "counts", &global_detail_object_counts_block_block },
		{ _field_block, "z reference vectors", &global_z_reference_vector_block_block },
		FIELD_PAD("KXILLD", 1),
		FIELD_PAD("EDFPN", 3),
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_ENVIRONMENT_OBJECT_BLOCK_ID { 0x1CDF634D, 0xFD90476F, 0x9133F1DA, 0xCC1B247F }
	TAG_STRUCT(
		structure_bsp_environment_object_block,
		"structure_bsp_environment_object_block",
		"structure_bsp_environment_object_block",
		"s_structure_bsp_environment_object_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_ENVIRONMENT_OBJECT_BLOCK_ID)
	{
		{ _field_string, "name" },
		{ _field_real_quaternion, "rotation" },
		{ _field_real_point_3d, "translation" },
		{ _field_real, "scale" },
		{ _field_short_block_index, "palette_index", &structure_bsp_environment_object_palette_block_block },
		{ _field_byte_flags, "flags", &environmentobjectflagsdefinition },
		FIELD_PAD("QHUGQ", 1),
		{ _field_long_integer, "unique id" },
		{ _field_tag, "exported object type" },
		{ _field_string_id, "scenario object name" },
		{ _field_string_id, "variant name" },
		{ _field_terminator }
	};

	STRINGS(environmentobjectflagsdefinition)
	{
		"scripts always run"
	};
	STRING_LIST(environmentobjectflagsdefinition, environmentobjectflagsdefinition_strings, _countof(environmentobjectflagsdefinition_strings));

	#define STRUCTURE_BSP_ENVIRONMENT_OBJECT_PALETTE_BLOCK_ID { 0x37D2FC4A, 0x2E6243F8, 0xB235BEDE, 0x7776BE11 }
	TAG_STRUCT(
		structure_bsp_environment_object_palette_block,
		"structure_bsp_environment_object_palette_block",
		"structure_bsp_environment_object_palette_block",
		"s_structure_bsp_environment_object_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_ENVIRONMENT_OBJECT_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "definition", &object_group_reference$9 },
		{ _field_tag_reference, "model", &render_model_group_reference$9 },
		{ _field_long_integer, "GVEYN" },
		{ _field_terminator }
	};

	TAG_REFERENCE(object_group_reference$9, OBJECT_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR | TAG_REFERENCE_FLAG_NOT_A_RESOURCE_DEPENDENCY);

	TAG_REFERENCE(render_model_group_reference$9, RENDER_MODEL_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR | TAG_REFERENCE_FLAG_NOT_A_RESOURCE_DEPENDENCY);

	#define STRUCTURE_BSP_FOG_PLANE_DEBUG_INFO_BLOCK_ID { 0xF78A15DF, 0xDCC84AD0, 0xA18E7B16, 0x621BC70B }
	TAG_STRUCT(
		structure_bsp_fog_plane_debug_info_block,
		"structure_bsp_fog_plane_debug_info_block",
		"structure_bsp_fog_plane_debug_info_block",
		"s_structure_bsp_fog_plane_debug_info_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_FOG_PLANE_DEBUG_INFO_BLOCK_ID)
	{
		{ _field_long_integer, "fog zone index" },
		FIELD_PAD("WZGH", 24),
		{ _field_long_integer, "connected plane designator" },
		{ _field_block, "lines", &structure_bsp_debug_info_render_line_block_block },
		{ _field_block, "intersected cluster indices", &structure_bsp_debug_info_indices_block_block },
		{ _field_block, "inf. extent cluster indices", &structure_bsp_debug_info_indices_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_FOG_ZONE_DEBUG_INFO_BLOCK_ID { 0x54513BD1, 0x61374DCB, 0x950FF95C, 0x72B662D5 }
	TAG_STRUCT(
		structure_bsp_fog_zone_debug_info_block,
		"structure_bsp_fog_zone_debug_info_block",
		"structure_bsp_fog_zone_debug_info_block",
		"s_structure_bsp_fog_zone_debug_info_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_FOG_ZONE_DEBUG_INFO_BLOCK_ID)
	{
		{ _field_long_integer, "media index", nullptr, "scenario fog plane", FIELD_FLAG_READ_ONLY },
		{ _field_long_integer, "base fog plane index" },
		FIELD_PAD("RB", 24),
		{ _field_block, "lines", &structure_bsp_debug_info_render_line_block_block },
		{ _field_block, "immersed cluster indices", &structure_bsp_debug_info_indices_block_block },
		{ _field_block, "bounding fog plane indices", &structure_bsp_debug_info_indices_block_block },
		{ _field_block, "collision fog plane indices", &structure_bsp_debug_info_indices_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_INSTANCED_GEOMETRY_DEFINITION_BLOCK_ID { 0xF51D0B5F, 0x91954EB1, 0x8B0C7E1F, 0x85168F82 }
	TAG_STRUCT(
		structure_bsp_instanced_geometry_definition_block,
		"structure_bsp_instanced_geometry_definition_block",
		"structure_bsp_instanced_geometry_definition_block",
		"s_structure_bsp_instanced_geometry_definition_block",
		SET_DELETE_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_INSTANCED_GEOMETRY_DEFINITION_BLOCK_ID)
	{
		{ _field_long_integer, "checksum" },
		{ _field_long_flags, "flags", &instanced_geometry_definition_flags },
		{ _field_short_integer, "mesh index" },
		{ _field_short_integer, "compression index" },
		{ _field_real, "global lightmap resolution scale" },
		{ _field_short_integer, "external_index" },
		FIELD_PAD("useme", 2),
		{ _field_terminator }
	};

	STRINGS(instanced_geometry_definition_flags)
	{
		"miscolored bsp",
		"error free",
		"surface to triangle remapped",
		"external reference mesh",
		"no physics",
		"stitched physics"
	};
	STRING_LIST(instanced_geometry_definition_flags, instanced_geometry_definition_flags_strings, _countof(instanced_geometry_definition_flags_strings));

	#define STRUCTURE_BSP_INSTANCED_GEOMETRY_INSTANCES_BLOCK_ID { 0x1AED06E6, 0xF1AC46B4, 0x8A2AF2D2, 0xDA51B54A }
	VERSIONED_TAG_STRUCT(
		structure_bsp_instanced_geometry_instances_block,
		"structure_bsp_instanced_geometry_instances_block",
		"structure_bsp_instanced_geometry_instances_block",
		"s_structure_bsp_instanced_geometry_instances_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_INSTANCED_GEOMETRY_INSTANCES_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 37 },
		{ _field_real, "scale" },
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "left" },
		{ _field_real_vector_3d, "up" },
		{ _field_real_point_3d, "position" },
		{ _field_short_block_index, "instance definition", &structure_bsp_instanced_geometry_definition_block_block },
		{ _field_word_flags, "flags", &instanced_geometry_flags },
		{ _field_long_flags, "Light Channels", &channeldefinitionflags },
		{ _field_short_integer, "mesh_index" },
		{ _field_short_integer, "compression_index" },
		{ _field_long_integer, "seam bit vector 0" },
		{ _field_long_integer, "seam bit vector 1" },
		{ _field_long_integer, "seam bit vector 2" },
		{ _field_long_integer, "seam bit vector 3" },
		{ _field_real, "bounds x0" },
		{ _field_real, "bounds x1" },
		{ _field_real, "bounds y0" },
		{ _field_real, "bounds y1" },
		{ _field_real, "bounds z0" },
		{ _field_real, "bounds z1" },
		{ _field_real_point_3d, "world bounding sphere center" },
		{ _field_real, "world bounding sphere radius" },
		{ _field_real, "imposter transition complete distance" },
		{ _field_real, "imposter brightness" },
		{ _field_long_integer, "checksum" },
		{ _field_char_enum, "pathfinding policy", &instanced_geometry_pathfinding_policy_enum },
		{ _field_char_enum, "lightmapping policy", &instanced_geometry_lightmapping_policy_enum },
		{ _field_char_enum, "imposter policy", &instanced_geometry_imposter_policy_enum },
		FIELD_PAD("SDFSDFE", 1),
		{ _field_char_enum, "streaming priority", &instanced_geometry_streamingpriority_enum },
		FIELD_PAD("strpad", 1),
		{ _field_short_integer, "cubemap 0 bitmap index" },
		{ _field_real, "lightmap resolution scale" },
		{ _field_short_integer, "group_index" },
		{ _field_short_integer, "group_list_index" },
		{ _field_string_id, "name" },
		{ _field_long_string, "source file name" },
		
		{ _struct_version_mode_equal, 1, 14 },
		{ _field_real, "scale" },
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "left" },
		{ _field_real_vector_3d, "up" },
		{ _field_real_point_3d, "position" },
		{ _field_short_block_index, "instance definition", &structure_bsp_instanced_geometry_definition_block_block },
		{ _field_short_integer, "render first bitvector index" },
		{ _field_long_flags, "Light Channels", &channeldefinitionflags },
		FIELD_PAD("JRRQTIJWJ", 4),
		{ _field_tag_reference, "lightmap bitmap", &bitmap_group_reference$2 },
		{ _field_long_integer, "checksum" },
		{ _field_string_id, "name" },
		{ _field_short_integer, "pathfinding object index" },
		FIELD_SKIP("VJJYUXOBB", 2),
		
		{ _struct_version_mode_equal, 0, 14 },
		{ _field_real, "scale" },
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "left" },
		{ _field_real_vector_3d, "up" },
		{ _field_real_point_3d, "position" },
		{ _field_short_block_index, "instance definition", &structure_bsp_instanced_geometry_definition_block_block },
		{ _field_short_integer, "render first bitvector index" },
		{ _field_long_flags, "Light Channels", &channeldefinitionflags },
		FIELD_PAD("JRRQTIJWJ", 4),
		{ _field_tag_reference, "lightmap bitmap", &bitmap_group_reference$2 },
		{ _field_long_integer, "checksum" },
		{ _field_string_id, "name" },
		{ _field_short_integer, "pathfinding object index" },
		FIELD_SKIP("VJJYUXOBB", 2),
		
		{ _field_terminator }
	};

	STRINGS(instanced_geometry_flags)
	{
		"not in lightprobes",
		"render only",
		"does not block aoe damage",
		"collidable",
		"decal spacing",
		"rain blocker",
		"vertical rain sheet",
		"outside map",
		"seam colliding",
		"(mostly) planar",
		"remove from shadow geometry",
		"cinema only",
		"exclude from cinema",
		"disallow object lighting samples"
	};
	STRING_LIST(instanced_geometry_flags, instanced_geometry_flags_strings, _countof(instanced_geometry_flags_strings));

	STRINGS(instanced_geometry_pathfinding_policy_enum)
	{
		"cut-out",
		"static",
		"none"
	};
	STRING_LIST(instanced_geometry_pathfinding_policy_enum, instanced_geometry_pathfinding_policy_enum_strings, _countof(instanced_geometry_pathfinding_policy_enum_strings));

	STRINGS(instanced_geometry_lightmapping_policy_enum)
	{
		"per-pixel shared",
		"per-vertex",
		"single-probe",
		"exclude",
		"per-pixel ao",
		"per-vertex ao"
	};
	STRING_LIST(instanced_geometry_lightmapping_policy_enum, instanced_geometry_lightmapping_policy_enum_strings, _countof(instanced_geometry_lightmapping_policy_enum_strings));

	STRINGS(instanced_geometry_imposter_policy_enum)
	{
		"polygon default",
		"polygon high",
		"cards medium",
		"cards high",
		"none",
		"rainbow box (runtime only)"
	};
	STRING_LIST(instanced_geometry_imposter_policy_enum, instanced_geometry_imposter_policy_enum_strings, _countof(instanced_geometry_imposter_policy_enum_strings));

	STRINGS(instanced_geometry_streamingpriority_enum)
	{
		"default",
		"higher",
		"highest"
	};
	STRING_LIST(instanced_geometry_streamingpriority_enum, instanced_geometry_streamingpriority_enum_strings, _countof(instanced_geometry_streamingpriority_enum_strings));

	#define STRUCTURE_BSP_INSTANCED_GEOMETRY_INSTANCES_NAMES_BLOCK_ID { 0xA3DF7A2E, 0xC2DC41E9, 0xDBA27244, 0x1AD617D1 }
	TAG_STRUCT(
		structure_bsp_instanced_geometry_instances_names_block,
		"structure_bsp_instanced_geometry_instances_names_block",
		"structure_bsp_instanced_geometry_instances_names_block",
		"s_structure_bsp_instanced_geometry_instances_names_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_INSTANCED_GEOMETRY_INSTANCES_NAMES_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_INSTANCED_GEOMETRY_INSTANCES_WITHOUT_NAMES_BLOCK_ID { 0xA3DF7F2E, 0x72DC41E9, 0xDFA27244, 0x1AD627D1 }
	TAG_STRUCT(
		structure_bsp_instanced_geometry_instances_without_names_block,
		"structure_bsp_instanced_geometry_instances_without_names_block",
		"structure_bsp_instanced_geometry_instances_without_names_block",
		"s_structure_bsp_instanced_geometry_instances_without_names_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_INSTANCED_GEOMETRY_INSTANCES_WITHOUT_NAMES_BLOCK_ID)
	{
		{ _field_real, "scale" },
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "left" },
		{ _field_real_vector_3d, "up" },
		{ _field_real_point_3d, "position" },
		{ _field_short_block_index, "instance definition", &structure_bsp_instanced_geometry_definition_block_block },
		{ _field_word_flags, "flags", &instanced_geometry_flags },
		{ _field_long_flags, "Light Channels", &channeldefinitionflags },
		{ _field_short_integer, "mesh_index" },
		{ _field_short_integer, "compression_index" },
		{ _field_long_integer, "seam bit vector 0" },
		{ _field_long_integer, "seam bit vector 1" },
		{ _field_long_integer, "seam bit vector 2" },
		{ _field_long_integer, "seam bit vector 3" },
		{ _field_real, "bounds x0" },
		{ _field_real, "bounds x1" },
		{ _field_real, "bounds y0" },
		{ _field_real, "bounds y1" },
		{ _field_real, "bounds z0" },
		{ _field_real, "bounds z1" },
		{ _field_real_point_3d, "world bounding sphere center" },
		{ _field_real, "world bounding sphere radius" },
		{ _field_real, "imposter transition complete distance" },
		{ _field_real, "imposter brightness" },
		{ _field_long_integer, "checksum" },
		{ _field_char_enum, "pathfinding policy", &instanced_geometry_pathfinding_policy_enum },
		{ _field_char_enum, "lightmapping policy", &instanced_geometry_lightmapping_policy_enum },
		{ _field_char_enum, "imposter policy", &instanced_geometry_imposter_policy_enum },
		FIELD_PAD("SDFSDFE", 1),
		{ _field_char_enum, "streaming priority", &instanced_geometry_streamingpriority_enum },
		FIELD_PAD("strpad", 1),
		{ _field_short_integer, "cubemap 0 bitmap index" },
		{ _field_real, "lightmap resolution scale" },
		{ _field_short_integer, "group_index" },
		{ _field_short_integer, "group_list_index" },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_LEAF_BLOCK_ID { 0xB611DF65, 0xC92C4779, 0x8227AAFA, 0x52126166 }
	TAG_STRUCT(
		structure_bsp_leaf_block,
		"structure_bsp_leaf_block",
		"structure_bsp_leaf_block",
		"s_structure_bsp_leaf_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_LEAF_BLOCK_ID)
	{
		{ _field_byte_integer, "cluster" },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_MARKER_BLOCK_ID { 0xE4B2C51D, 0xF2C84524, 0x8F67A353, 0x3E9F7017 }
	TAG_STRUCT(
		structure_bsp_marker_block,
		"structure_bsp_marker_block",
		"structure_bsp_marker_block",
		"s_structure_bsp_marker_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_MARKER_BLOCK_ID)
	{
		{ _field_char_enum, "marker type", &structure_marker_type_enum },
		FIELD_PAD("pad", 3),
		{ _field_string, "marker parameter" },
		{ _field_real_quaternion, "rotation" },
		{ _field_real_point_3d, "position" },
		{ _field_terminator }
	};

	STRINGS(structure_marker_type_enum)
	{
		"none",
		"cheap light",
		"falling leaf generator",
		"light",
		"sky (unused)",
		"model"
	};
	STRING_LIST(structure_marker_type_enum, structure_marker_type_enum_strings, _countof(structure_marker_type_enum_strings));

	#define STRUCTURE_BSP_MARKER_LIGHT_INDEX_ID { 0xCBAC4327, 0xB7F94CF8, 0x9E42DAEC, 0xFA79FFA7 }
	TAG_STRUCT(
		structure_bsp_marker_light_index,
		"structure_bsp_marker_light_index",
		"structure_bsp_marker_light_index",
		"s_structure_bsp_marker_light_index",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_MARKER_LIGHT_INDEX_ID)
	{
		{ _field_short_integer, "palette index" },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_MARKER_LIGHT_PALETTE_ID { 0xA008D181, 0x9612449F, 0x96D5E611, 0xE4355D97 }
	TAG_STRUCT(
		structure_bsp_marker_light_palette,
		"structure_bsp_marker_light_palette",
		"structure_bsp_marker_light_palette",
		"s_structure_bsp_marker_light_palette",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_MARKER_LIGHT_PALETTE_ID)
	{
		{ _field_tag_reference, "light tag", &light_group_reference$3 },
		{ _field_terminator }
	};

	TAG_REFERENCE(light_group_reference$3, LIGHT_TAG, TAG_REFERENCE_FLAG_RESOLVED_BY_GAME);

	#define STRUCTURE_BSP_OBB_VOLUME_BLOCK_ID { 0x7B8CD005, 0x85E1496D, 0xAE545C18, 0x4F842706 }
	TAG_STRUCT(
		structure_bsp_obb_volume_block,
		"structure_bsp_obb_volume_block",
		"structure_bsp_obb_volume_block",
		"s_structure_bsp_obb_volume_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_OBB_VOLUME_BLOCK_ID)
	{
		{ _field_real_point_3d, "origin" },
		{ _field_real_vector_3d, "axis 1" },
		{ _field_real_vector_3d, "axis 2" },
		{ _field_real_vector_3d, "axis 3" },
		{ _field_dword_integer, "type" },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_RAW_RESOURCES_ID { 0x3A39EBF4, 0xA1FA4120, 0x8CA7C0AC, 0x54DCAE26 }
	TAG_STRUCT(
		structure_bsp_raw_resources,
		"structure_bsp_raw_resources",
		"structure_bsp_raw_resources",
		"s_structure_bsp_raw_resources",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_RAW_RESOURCES_ID)
	{
		{ _field_struct, "raw_items", &structure_bsp_resource_struct },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_RESOURCE_INTERFACE_ID { 0xB024FA19, 0x92E24683, 0xB26BDF83, 0x52E5E222 }
	TAG_STRUCT(
		structure_bsp_resource_interface,
		"structure_bsp_resource_interface",
		"structure_bsp_resource_interface",
		"s_structure_bsp_resource_interface",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_RESOURCE_INTERFACE_ID)
	{
		{ _field_block, "raw_resources", &structure_bsp_raw_resources_block },
		{ _field_pageable_resource, "tag_resources", &structure_bsp_tag_resources },
		{ _field_pageable_resource, "cache_file_resources", &structure_bsp_cache_file_tag_resources },
		{ _field_long_integer, "use resource items" },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_RESOURCE_STRUCT_ID { 0x3A9EF85, 0x2F7A473A, 0x8A86F093, 0x2DE335AF }
	TAG_STRUCT(
		structure_bsp_resource_struct,
		"structure_bsp_resource_struct",
		"structure_bsp_resource_struct",
		"s_structure_bsp_resource_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_RESOURCE_STRUCT_ID)
	{
		{ _field_block, "collision bsp", &global_collision_bsp_block_block },
		{ _field_block, "large collision bsp", &global_large_collision_bsp_block_block },
		{ _field_block, "instanced geometries definitions", &structure_bsp_instanced_geometry_definition_block_block },
		{ _field_block, "Havok Data", &structureiohavokdatablock_block },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_RUNTIME_DECAL_BLOCK_ID { 0x617C468A, 0x8AC44161, 0xB167C76F, 0x152716BF }
	TAG_STRUCT(
		structure_bsp_runtime_decal_block,
		"structure_bsp_runtime_decal_block",
		"structure_bsp_runtime_decal_block",
		"s_structure_bsp_runtime_decal_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_RUNTIME_DECAL_BLOCK_ID)
	{
		{ _field_short_integer, "decal palette index" },
		FIELD_PAD("post-decal-palette-index-pad", 2),
		{ _field_struct, "manual bsp flags", &manualbspflagsreferences },
		{ _field_real_quaternion, "rotation" },
		{ _field_real_point_3d, "position" },
		{ _field_real, "scale_x", MAKE_ALT_NAMES("scale"), FIELD_FLAG_READ_ONLY },
		{ _field_real, "scale_y" },
		{ _field_real, "cull angle" },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_SKY_OWNER_CLUSTER_BLOCK_ID { 0x5CDBBAA5, 0x15CB4A6C, 0xA0F28010, 0xC976FB69 }
	TAG_STRUCT(
		structure_bsp_sky_owner_cluster_block,
		"structure_bsp_sky_owner_cluster_block",
		"structure_bsp_sky_owner_cluster_block",
		"s_structure_bsp_sky_owner_cluster_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_SKY_OWNER_CLUSTER_BLOCK_ID)
	{
		{ _field_short_integer, "cluster owner" },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_SOUND_CLUSTER_BLOCK_ID { 0x1B60A32F, 0x573342BF, 0x861F64D3, 0xADC5FA35 }
	TAG_STRUCT(
		structure_bsp_sound_cluster_block,
		"structure_bsp_sound_cluster_block",
		"structure_bsp_sound_cluster_block",
		"s_structure_bsp_sound_cluster_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_SOUND_CLUSTER_BLOCK_ID)
	{
		{ _field_short_integer, "palette index" },
		FIELD_PAD("HRSFKJT", 2),
		{ _field_block, "enclosing portal designators", &structure_sound_cluster_portal_designators_block },
		{ _field_block, "interior cluster indices", &structure_sound_cluster_interior_cluster_indices_block },
		{ _field_terminator }
	};

	#define STRUCTURE_BSP_TAG_RESOURCES_STRUCT_ID { 0x72D3359D, 0x5BCF4E28, 0xA26904A5, 0xD923E60C }
	TAG_STRUCT(
		structure_bsp_tag_resources_struct,
		"structure_bsp_tag_resources_struct",
		"structure_bsp_tag_resources_struct",
		"s_structure_bsp_tag_resources_struct",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_BSP_TAG_RESOURCES_STRUCT_ID)
	{
		{ _field_struct, "resource_items", &structure_bsp_resource_struct },
		{ _field_terminator }
	};

	#define STRUCTURE_CLUSTER_CUBEMAP_ID { 0xCAE96BC4, 0xD7A14711, 0xBA17DE83, 0x3A3B5BAB }
	TAG_STRUCT(
		structure_cluster_cubemap,
		"structure_cluster_cubemap",
		"structure_cluster_cubemap",
		"s_structure_cluster_cubemap",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_CLUSTER_CUBEMAP_ID)
	{
		{ _field_short_integer, "scenario cubemap index" },
		{ _field_short_integer, "cubemap bitmap index" },
		{ _field_block, "reference points", &cubemap_reference_points_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_COLLISION_MATERIALS_BLOCK_ID { 0x9B46AC25, 0x4F274C73, 0xA712E380, 0x4CCC324B }
	TAG_STRUCT(
		structure_collision_materials_block,
		"structure_collision_materials_block",
		"structure_collision_materials_block",
		"s_structure_collision_materials_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_COLLISION_MATERIALS_BLOCK_ID)
	{
		{ _field_tag_reference, "render method", MAKE_ALT_NAMES("old shader"), FIELD_FLAG_READ_ONLY | FIELD_FLAG_INDEX, &material_group_render_method_group_reference$3 },
		{ _field_string_id, "override material name" },
		{ _field_short_integer, "runtime global material index" },
		{ _field_short_block_index, "conveyor surface index", &structure_bsp_conveyor_surface_block_block },
		{ _field_short_block_index, "seam mapping index", &structure_seam_mapping_block_block },
		{ _field_word_flags, "flags", &structure_collision_materialg_flags },
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(material_group_render_method_group_reference$3, TAG_REFERENCE_FLAG_NOT_A_RESOURCE_DEPENDENCY)
	{
		MATERIAL_TAG,
		RENDER_METHOD_TAG,
		INVALID_TAG
	};

	STRINGS(structure_collision_materialg_flags)
	{
		"is seam"
	};
	STRING_LIST(structure_collision_materialg_flags, structure_collision_materialg_flags_strings, _countof(structure_collision_materialg_flags_strings));

	#define STRUCTURE_COOKIE_CUTTER_DEFINITION_ID { 0x24E4D315, 0xF5FA4BA3, 0x96C80371, 0x7A6F48AC }
	TAG_STRUCT(
		structure_cookie_cutter_definition,
		"structure_cookie_cutter_definition",
		"structure_cookie_cutter_definition",
		"s_structure_cookie_cutter_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_COOKIE_CUTTER_DEFINITION_ID)
	{
		FIELD_GROUP_BEGIN("Cookie Cutter"),
		{ _field_struct, "collision model", &global_collision_bsp_struct },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define STRUCTURE_DESIGN_BLOCK_STRUCT_ID { 0xA073D9E0, 0x3D9447CB, 0x1BE0B4FF, 0x3ABDC3B1 }
	TAG_STRUCT(
		structure_design_block_struct,
		"structure_design_block_struct",
		"structure_design_block_struct",
		"s_structure_design_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_RESOURCES | SET_UNKNOWN14 | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_DESIGN_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "build identifier", &structure_manifest_build_identifier_struct },
		{ _field_struct, "parent build identifier", &structure_manifest_build_identifier_struct },
		{ _field_struct, "physics", &global_structure_physics_design_struct },
		{ _field_struct, "planar fog set", &planar_fog_set_definition_struct },
		FIELD_GROUP_BEGIN("rain"),
		{ _field_struct, "render geometry", &global_render_geometry_struct },
		{ _field_block, "instanced geometries definitions", &structure_bsp_instanced_geometry_definition_block_block },
		{ _field_block, "instanced geometry instances", &structure_bsp_instanced_geometry_instances_block_block },
		{ _field_block, "materials", &global_geometry_material_block_block },
		{ _field_block, "rain_blocker mopp code block", &mopp_code_definition_block_block },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define STRUCTURE_DEVICE_PORTAL_ASSOCIATION_BLOCK_ID { 0xB39054AF, 0x2CB3457E, 0x844CFA19, 0x64B70FB3 }
	TAG_STRUCT(
		structure_device_portal_association_block,
		"structure_device_portal_association_block",
		"structure_device_portal_association_block",
		"s_structure_device_portal_association_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_DEVICE_PORTAL_ASSOCIATION_BLOCK_ID)
	{
		{ _field_struct, "device id", &scenario_object_id_struct },
		{ _field_short_integer, "first game portal index" },
		{ _field_word_integer, "game portal count" },
		{ _field_terminator }
	};

	#define STRUCTURE_EDGE_TO_SEAM_EDGE_MAPPING_BLOCK_ID { 0x5E7D4A2C, 0x49134181, 0xB2652E00, 0xABA99982 }
	TAG_STRUCT(
		structure_edge_to_seam_edge_mapping_block,
		"structure_edge_to_seam_edge_mapping_block",
		"structure_edge_to_seam_edge_mapping_block",
		"s_structure_edge_to_seam_edge_mapping_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_EDGE_TO_SEAM_EDGE_MAPPING_BLOCK_ID)
	{
		{ _field_short_integer, "seam_index" },
		{ _field_short_integer, "seam_edge_index" },
		{ _field_terminator }
	};

	#define STRUCTURE_EXTERNAL_INSTANCED_GEOMETRY_REFERENCES_BLOCK_ID { 0x87C8EF26, 0xE9354157, 0x85B70AF5, 0x447B03B8 }
	TAG_STRUCT(
		structure_external_instanced_geometry_references_block,
		"structure_external_instanced_geometry_references_block",
		"structure_external_instanced_geometry_references_block",
		"s_structure_external_instanced_geometry_references_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_EXTERNAL_INSTANCED_GEOMETRY_REFERENCES_BLOCK_ID)
	{
		{ _field_tag_reference, "prefab reference", &prefab_group_reference },
		{ _field_string_id, "name" },
		{ _field_real, "scale" },
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "left" },
		{ _field_real_vector_3d, "up" },
		{ _field_real_point_3d, "position" },
		{ _field_short_integer, "mesh count" },
		{ _field_short_integer, "mesh block index" },
		{ _field_short_integer, "light count" },
		{ _field_short_integer, "light instance block index" },
		{ _field_short_integer, "dynamic object count" },
		{ _field_short_integer, "dynamic object block index" },
		{ _field_word_flags, "override flags", &instanced_geometry_flags$2 },
		FIELD_PAD("SDFSDEE", 2),
		{ _field_char_enum, "override pathfinding policy", &instanced_geometry_pathfinding_policy_enum$2 },
		{ _field_char_enum, "override lightmapping policy", &instanced_geometry_lightmapping_policy_enum$2 },
		{ _field_char_enum, "override imposter policy", &instanced_geometry_imposter_policy_enum$2 },
		{ _field_char_enum, "override streaming priority", &instanced_geometry_streamingpriority_enum$2 },
		{ _field_real, "override lightmap resolution scale" },
		{ _field_real, "override imposter transition distance" },
		{ _field_real, "override imposter brightness" },
		{ _field_real, "override light channel flags" },
		{ _field_word_flags, "instance flags Mask", &instanced_geometry_flags$2 },
		{ _field_word_flags, "instance policy mask", &prefaboverrideflags },
		{ _field_terminator }
	};

	TAG_REFERENCE(prefab_group_reference, PREFAB_TAG);

	STRINGS(instanced_geometry_flags$2)
	{
		"not in lightprobes",
		"render only",
		"does not block aoe damage",
		"collidable",
		"decal spacing",
		"rain blocker",
		"vertical rain sheet",
		"outside map",
		"seam colliding",
		"(mostly) planar",
		"remove from shadow geometry",
		"cinema only",
		"exclude from cinema",
		"disallow object lighting samples"
	};
	STRING_LIST(instanced_geometry_flags$2, instanced_geometry_flags$2_strings, _countof(instanced_geometry_flags$2_strings));

	STRINGS(instanced_geometry_pathfinding_policy_enum$2)
	{
		"cut-out",
		"static",
		"none"
	};
	STRING_LIST(instanced_geometry_pathfinding_policy_enum$2, instanced_geometry_pathfinding_policy_enum$2_strings, _countof(instanced_geometry_pathfinding_policy_enum$2_strings));

	STRINGS(instanced_geometry_lightmapping_policy_enum$2)
	{
		"per-pixel shared",
		"per-vertex",
		"single-probe",
		"exclude",
		"per-pixel ao",
		"per-vertex ao"
	};
	STRING_LIST(instanced_geometry_lightmapping_policy_enum$2, instanced_geometry_lightmapping_policy_enum$2_strings, _countof(instanced_geometry_lightmapping_policy_enum$2_strings));

	STRINGS(instanced_geometry_imposter_policy_enum$2)
	{
		"polygon default",
		"polygon high",
		"cards medium",
		"cards high",
		"none",
		"rainbow box (runtime only)"
	};
	STRING_LIST(instanced_geometry_imposter_policy_enum$2, instanced_geometry_imposter_policy_enum$2_strings, _countof(instanced_geometry_imposter_policy_enum$2_strings));

	STRINGS(instanced_geometry_streamingpriority_enum$2)
	{
		"default",
		"higher",
		"highest"
	};
	STRING_LIST(instanced_geometry_streamingpriority_enum$2, instanced_geometry_streamingpriority_enum$2_strings, _countof(instanced_geometry_streamingpriority_enum$2_strings));

	STRINGS(prefaboverrideflags)
	{
		"override pathfinding policy",
		"override lightmapping policy",
		"override lmposter policy",
		"override lightmap resolution policy",
		"override imposter transition distance policy",
		"override light channel flags policy",
		"override imposter brightness"
	};
	STRING_LIST(prefaboverrideflags, prefaboverrideflags_strings, _countof(prefaboverrideflags_strings));

	#define STRUCTURE_INSTANCE_CLUSTER_DEFINITION_ID { 0xB125B7FC, 0xF9B846A3, 0x91E9DFCF, 0x3E1978AB }
	TAG_STRUCT(
		structure_instance_cluster_definition,
		"structure_instance_cluster_definition",
		"structure_instance_cluster_definition",
		"s_structure_instance_cluster_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_INSTANCE_CLUSTER_DEFINITION_ID)
	{
		{ _field_long_flags, "flags", &structure_instance_cluster_flags },
		{ _field_block, "instance group indices", &index_list_block_block },
		{ _field_terminator }
	};

	STRINGS(structure_instance_cluster_flags)
	{
		"optimized mopp"
	};
	STRING_LIST(structure_instance_cluster_flags, structure_instance_cluster_flags_strings, _countof(structure_instance_cluster_flags_strings));

	#define STRUCTURE_INSTANCE_GROUP_DEFINITION_ID { 0x690AAB9C, 0x68A24457, 0xB5BCABD7, 0x3411A2B6 }
	TAG_STRUCT(
		structure_instance_group_definition,
		"structure_instance_group_definition",
		"structure_instance_group_definition",
		"s_structure_instance_group_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_INSTANCE_GROUP_DEFINITION_ID)
	{
		{ _field_real_point_3d, "center" },
		{ _field_real, "radius" },
		{ _field_short_integer, "cluster count" },
		{ _field_word_flags, "flags", &structure_instance_group_flags },
		{ _field_real, "maximum imposter distance" },
		{ _field_real, "minimum centrifugal distance from group center" },
		{ _field_real, "minimum imposter distance squared" },
		{ _field_block, "instance indices", &index_list_block_block },
		{ _field_terminator }
	};

	STRINGS(structure_instance_group_flags)
	{
		"contains card imposters",
		"contains poly imposters",
		"is decorator type",
		"optimized mopp"
	};
	STRING_LIST(structure_instance_group_flags, structure_instance_group_flags_strings, _countof(structure_instance_group_flags_strings));

	#define STRUCTURE_INSTANCE_IMPOSTER_INFO_BLOCK_ID { 0x4B11C756, 0x848E464C, 0x8723247D, 0x98DBB91E }
	TAG_STRUCT(
		structure_instance_imposter_info_block,
		"structure_instance_imposter_info_block",
		"structure_instance_imposter_info_block",
		"s_structure_instance_imposter_info_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_INSTANCE_IMPOSTER_INFO_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_char_integer, "imposter policy" },
		FIELD_PAD("parasdd", 3),
		{ _field_real, "transition distance" },
		{ _field_terminator }
	};

	#define STRUCTURE_LIGHTING_GENERIC_LIGHT_DEFINITION_BLOCK_ID { 0x5CAD7A73, 0x815E4084, 0xBEC019F8, 0xB6D14D02 }
	TAG_STRUCT(
		structure_lighting_generic_light_definition_block,
		"structure_lighting_generic_light_definition_block",
		"structure_lighting_generic_light_definition_block",
		"s_structure_lighting_generic_light_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_LIGHTING_GENERIC_LIGHT_DEFINITION_BLOCK_ID)
	{
		{ _field_int64_integer, "Definition Identifier" },
		{ _field_struct, "Midnight_Light_Parameters", &midnight_light_struct },
		{ _field_long_integer, "Source File Identifier" },
		FIELD_EXPLANATION("Static Only Parameters", nullptr),
		{ _field_real, "indirect amplification factor" },
		{ _field_real, "jitter sphere radius" },
		{ _field_real, "jitter angle" },
		{ _field_short_enum, "jitter quality", &structure_lighting_generic_light_jitter_quality_enum },
		{ _field_char_enum, "sun", &midnight_boolean_enum_definition },
		{ _field_char_enum, "indirect only", &midnight_boolean_enum_definition },
		{ _field_long_flags, "flags", &structure_lighting_generic_light_flags },
		{ _field_char_enum, "static analytic", &midnight_boolean_enum_definition },
		FIELD_PAD("pdd", 3),
		{ _field_terminator }
	};

	STRINGS(structure_lighting_generic_light_jitter_quality_enum)
	{
		"low",
		"medium",
		"high"
	};
	STRING_LIST(structure_lighting_generic_light_jitter_quality_enum, structure_lighting_generic_light_jitter_quality_enum_strings, _countof(structure_lighting_generic_light_jitter_quality_enum_strings));

	STRINGS(structure_lighting_generic_light_flags)
	{
		"use near attenuation",
		"use far attenuation",
		"invere squared falloff",
		"light version 1"
	};
	STRING_LIST(structure_lighting_generic_light_flags, structure_lighting_generic_light_flags_strings, _countof(structure_lighting_generic_light_flags_strings));

	#define STRUCTURE_LIGHTING_GENERIC_LIGHT_INSTANCE_BLOCK_ID { 0x9005BBF, 0x4E134B68, 0x9B53BFCC, 0x6CC50117 }
	TAG_STRUCT(
		structure_lighting_generic_light_instance_block,
		"structure_lighting_generic_light_instance_block",
		"structure_lighting_generic_light_instance_block",
		"s_structure_lighting_generic_light_instance_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_LIGHTING_GENERIC_LIGHT_INSTANCE_BLOCK_ID)
	{
		{ _field_int64_integer, "Light Definition ID" },
		{ _field_int64_integer, "Light Instance ID" },
		{ _field_long_integer, "Light Definition Index" },
		{ _field_long_integer, "Maya Source Hash" },
		{ _field_tag_reference, "runtime definition", &light_group_reference$4 },
		{ _field_long_enum, "light mode", &structure_lighting_light_mode_enum },
		{ _field_real_point_3d, "origin" },
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "up" },
		{ _field_real, "fade out distance" },
		{ _field_real, "fade start distance" },
		{ _field_long_integer, "Shadow Geometry Checksum" },
		FIELD_PAD("pdd", 4),
		{ _field_terminator }
	};

	TAG_REFERENCE(light_group_reference$4, LIGHT_TAG);

	STRINGS(structure_lighting_light_mode_enum)
	{
		"Dynamic",
		"Static",
		"Analytic"
	};
	STRING_LIST(structure_lighting_light_mode_enum, structure_lighting_light_mode_enum_strings, _countof(structure_lighting_light_mode_enum_strings));

	#define STRUCTURE_MANIFEST_BSP_BLOCK_ID { 0xBAB8CC0A, 0x480145EF, 0x92A35821, 0x3E3CD08A }
	TAG_STRUCT(
		structure_manifest_bsp_block,
		"structure_manifest_bsp_block",
		"structure_manifest_bsp_block",
		"s_structure_manifest_bsp_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_MANIFEST_BSP_BLOCK_ID)
	{
		{ _field_struct, "build identifer", &structure_manifest_build_identifier_struct },
		{ _field_struct, "parent build identifer", &structure_manifest_build_identifier_struct },
		{ _field_long_string, "bsp name" },
		{ _field_terminator }
	};

	#define STRUCTURE_MANIFEST_BUILD_IDENTIFIER_STRUCT_ID { 0xDDFB3371, 0xDA4642BF, 0xCD893004, 0xBCB969EC }
	TAG_STRUCT(
		structure_manifest_build_identifier_struct,
		"structure_manifest_build_identifier_struct",
		"structure_manifest_build_identifier_struct",
		"s_structure_manifest_build_identifier_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_MANIFEST_BUILD_IDENTIFIER_STRUCT_ID)
	{
		{ _field_long_integer, "manifest_id0" },
		{ _field_long_integer, "manifest_id1" },
		{ _field_long_integer, "manifest_id2" },
		{ _field_long_integer, "manifest_id3" },
		{ _field_long_integer, "build_index" },
		{ _field_long_integer, "structure importer version" },
		{ _field_terminator }
	};

	#define STRUCTURE_MANIFEST_STRUCT_ID { 0xDA667371, 0xDF8B82BF, 0xAC8C4004, 0xBC6D99EC }
	TAG_STRUCT(
		structure_manifest_struct,
		"structure_manifest_struct",
		"structure_manifest_struct",
		"s_structure_manifest_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_MANIFEST_STRUCT_ID)
	{
		FIELD_EXPLANATION("build identifer", nullptr),
		{ _field_struct, "build identifer", &structure_manifest_build_identifier_struct },
		FIELD_EXPLANATION("parent build identifier", nullptr),
		{ _field_struct, "parent build identifer", "for local builds, this is the content build identifier you are based on", &structure_manifest_build_identifier_struct },
		{ _field_block, "bsp manifest", &structure_manifest_bsp_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_MATERIAL_LIGHTING_INFO_BLOCK_ID { 0x9DD3CC89, 0xB8374B30, 0xBD6F5C2D, 0xDA247EA0 }
	TAG_STRUCT(
		structure_material_lighting_info_block,
		"structure_material_lighting_info_block",
		"structure_material_lighting_info_block",
		"s_structure_material_lighting_info_block",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_MATERIAL_LIGHTING_INFO_BLOCK_ID)
	{
		{ _field_real, "emissive power" },
		{ _field_real_rgb_color, "emissive color" },
		{ _field_real, "emissive quality" },
		{ _field_real, "emissive focus" },
		{ _field_long_flags, "flags", &structure_material_lighting_info_flags },
		{ _field_real, "attenuation falloff" },
		{ _field_real, "attenuation cutoff" },
		{ _field_real, "bounce ratio" },
		{ _field_terminator }
	};

	STRINGS(structure_material_lighting_info_flags)
	{
		"reserved{use attenuation}",
		"power per unit area",
		"use shader gel"
	};
	STRING_LIST(structure_material_lighting_info_flags, structure_material_lighting_info_flags_strings, _countof(structure_material_lighting_info_flags_strings));

	#define STRUCTURE_META_STRUCT_DEFINITION_ID { 0xAAF021B9, 0xE656432A, 0x971E39DE, 0xBA1DF54 }
	TAG_STRUCT(
		structure_meta_struct_definition,
		"structure_meta_struct_definition",
		"structure_meta_struct_definition",
		"s_structure_meta_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_META_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "Effects markers", &structurebspfxmarkerblock_block },
		{ _field_block, "Airprobes", &scenario_airprobes_block_block },
		{ _field_block, "Light Cones", &structuremetadatalightconemarkerblock_block },
		{ _field_block, "Object Palette", &structure_bsp_environment_object_palette_block_block },
		{ _field_block, "Objects", &structure_bsp_environment_object_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_PORTAL_DEVICE_MAPPING_BLOCK_ID { 0xF9BA6A28, 0xBF964539, 0xBB2BA621, 0x11162D6C }
	TAG_STRUCT(
		structure_portal_device_mapping_block,
		"structure_portal_device_mapping_block",
		"structure_portal_device_mapping_block",
		"s_structure_portal_device_mapping_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_PORTAL_DEVICE_MAPPING_BLOCK_ID)
	{
		{ _field_block, "device portal associations", &structure_device_portal_association_block_block },
		{ _field_block, "game portal to portal map", &game_portal_to_portal_mapping_block_block },
		{ _field_block, "occluding portal to portal map", &occluding_portal_to_portal_mapping_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_SEAM_BLOCK_ID { 0x71952903, 0x695E49A5, 0x85CD305E, 0x57868F0C }
	TAG_STRUCT(
		structure_seam_block,
		"structure_seam_block",
		"structure_seam_block",
		"s_structure_seam_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SEAM_BLOCK_ID)
	{
		{ _field_struct, "identifier", &structure_seam_identifier_struct },
		{ _field_struct, "original", &structure_seam_original_geometry_struct },
		{ _field_struct, "final", &structure_seam_final_geometry_struct },
		{ _field_terminator }
	};

	#define STRUCTURE_SEAM_CLUSTER_MAPPING_BLOCK_ID { 0xE1A86C0A, 0x487745EF, 0x922F5821, 0x3E39C08A }
	TAG_STRUCT(
		structure_seam_cluster_mapping_block,
		"structure_seam_cluster_mapping_block",
		"structure_seam_cluster_mapping_block",
		"s_structure_seam_cluster_mapping_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SEAM_CLUSTER_MAPPING_BLOCK_ID)
	{
		{ _field_long_integer, "cluster_index" },
		{ _field_real_point_3d, "cluster center" },
		{ _field_terminator }
	};

	#define STRUCTURE_SEAM_EDGE_MAPPING_BLOCK_ID { 0x758F902F, 0x67CC4351, 0x9A174FC4, 0x590C91F }
	TAG_STRUCT(
		structure_seam_edge_mapping_block,
		"structure_seam_edge_mapping_block",
		"structure_seam_edge_mapping_block",
		"s_structure_seam_edge_mapping_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SEAM_EDGE_MAPPING_BLOCK_ID)
	{
		{ _field_long_integer, "structure edge index" },
		{ _field_terminator }
	};

	#define STRUCTURE_SEAM_FINAL_EDGES_BLOCK_ID { 0x5CE6FC51, 0x55D54CD5, 0x8B04C24C, 0x116945CA }
	TAG_STRUCT(
		structure_seam_final_edges_block,
		"structure_seam_final_edges_block",
		"structure_seam_final_edges_block",
		"s_structure_seam_final_edges_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SEAM_FINAL_EDGES_BLOCK_ID)
	{
		{ _field_short_block_index, "final point0", &structure_seam_final_points_block_block },
		{ _field_short_block_index, "final point1", &structure_seam_final_points_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_SEAM_FINAL_GEOMETRY_STRUCT_ID { 0x89A4CF05, 0x884A4959, 0xB0830D92, 0x161B070E }
	TAG_STRUCT(
		structure_seam_final_geometry_struct,
		"structure_seam_final_geometry_struct",
		"structure_seam_final_geometry_struct",
		"s_structure_seam_final_geometry_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SEAM_FINAL_GEOMETRY_STRUCT_ID)
	{
		{ _field_block, "planes", &structure_seam_final_planes_block_block },
		{ _field_block, "points", &structure_seam_final_points_block_block },
		{ _field_block, "triangles", &structure_seam_final_triangles_block_block },
		{ _field_block, "edges", &structure_seam_final_edges_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_SEAM_FINAL_PLANES_BLOCK_ID { 0x9D8D76FA, 0xC55D4D57, 0xBE1E8C92, 0x39DC68A8 }
	TAG_STRUCT(
		structure_seam_final_planes_block,
		"structure_seam_final_planes_block",
		"structure_seam_final_planes_block",
		"s_structure_seam_final_planes_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SEAM_FINAL_PLANES_BLOCK_ID)
	{
		{ _field_real_plane_3d, "plane" },
		{ _field_terminator }
	};

	#define STRUCTURE_SEAM_FINAL_POINTS_BLOCK_ID { 0xD88A3DB6, 0x83704955, 0xB4012152, 0x3E69CCA7 }
	TAG_STRUCT(
		structure_seam_final_points_block,
		"structure_seam_final_points_block",
		"structure_seam_final_points_block",
		"s_structure_seam_final_points_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SEAM_FINAL_POINTS_BLOCK_ID)
	{
		{ _field_real_point_3d, "final point" },
		{ _field_terminator }
	};

	#define STRUCTURE_SEAM_FINAL_TRIANGLES_BLOCK_ID { 0xFA685DE8, 0xA9BF4914, 0xB6C3D98E, 0xC4B0CED }
	TAG_STRUCT(
		structure_seam_final_triangles_block,
		"structure_seam_final_triangles_block",
		"structure_seam_final_triangles_block",
		"s_structure_seam_final_triangles_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SEAM_FINAL_TRIANGLES_BLOCK_ID)
	{
		{ _field_long_integer, "final plane" },
		{ _field_short_block_index, "final point0", &structure_seam_final_points_block_block },
		{ _field_short_block_index, "final point1", &structure_seam_final_points_block_block },
		{ _field_short_block_index, "final point2", &structure_seam_final_points_block_block },
		FIELD_PAD("pad0", 2),
		{ _field_terminator }
	};

	#define STRUCTURE_SEAM_IDENTIFIER_STRUCT_ID { 0xDDF67371, 0xDF8642BF, 0xAC893004, 0xBC6869EC }
	TAG_STRUCT(
		structure_seam_identifier_struct,
		"structure_seam_identifier_struct",
		"structure_seam_identifier_struct",
		"s_structure_seam_identifier_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SEAM_IDENTIFIER_STRUCT_ID)
	{
		{ _field_long_integer, "seam_id0" },
		{ _field_long_integer, "seam_id1" },
		{ _field_long_integer, "seam_id2" },
		{ _field_long_integer, "seam_id3" },
		{ _field_terminator }
	};

	#define STRUCTURE_SEAM_MAPPING_BLOCK_ID { 0xB9EF902E, 0xE89545BC, 0xABE91A74, 0x40C7C1A5 }
	TAG_STRUCT(
		structure_seam_mapping_block,
		"structure_seam_mapping_block",
		"structure_seam_mapping_block",
		"s_structure_seam_mapping_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SEAM_MAPPING_BLOCK_ID)
	{
		{ _field_struct, "seams identifier", &structure_seam_identifier_struct },
		{ _field_block, "edge mapping", &structure_seam_edge_mapping_block_block },
		{ _field_block, "cluster mapping", &structure_seam_cluster_mapping_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_SEAM_ORIGINAL_GEOMETRY_STRUCT_ID { 0x94C5DB45, 0x5F934BF3, 0xA02C2890, 0x4C76F360 }
	TAG_STRUCT(
		structure_seam_original_geometry_struct,
		"structure_seam_original_geometry_struct",
		"structure_seam_original_geometry_struct",
		"s_structure_seam_original_geometry_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SEAM_ORIGINAL_GEOMETRY_STRUCT_ID)
	{
		{ _field_block, "original vertices", &structure_seam_original_vertex_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_SEAM_ORIGINAL_VERTEX_BLOCK_ID { 0x1C23A365, 0x182E4449, 0x9EB71083, 0x6091788A }
	TAG_STRUCT(
		structure_seam_original_vertex_block,
		"structure_seam_original_vertex_block",
		"structure_seam_original_vertex_block",
		"s_structure_seam_original_vertex_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SEAM_ORIGINAL_VERTEX_BLOCK_ID)
	{
		{ _field_real_point_3d, "original vertex" },
		{ _field_long_integer, "final point index" },
		{ _field_block, "plane normals", &structure_seam_original_vertex_plane_normals_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_SEAM_ORIGINAL_VERTEX_PLANE_NORMALS_BLOCK_ID { 0x1C23AABC, 0x11234449, 0x9EAB1083, 0x9170D8A }
	TAG_STRUCT(
		structure_seam_original_vertex_plane_normals_block,
		"structure_seam_original_vertex_plane_normals_block",
		"structure_seam_original_vertex_plane_normals_block",
		"s_structure_seam_original_vertex_plane_normals_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SEAM_ORIGINAL_VERTEX_PLANE_NORMALS_BLOCK_ID)
	{
		{ _field_real_vector_3d, "triangle normal" },
		{ _field_terminator }
	};

	#define STRUCTURE_SEAMS_STRUCT_DEFINITION_ID { 0x1073D9E0, 0x3D9447BB, 0x89E0B4FF, 0x30BD63B1 }
	TAG_STRUCT(
		structure_seams_struct_definition,
		"structure_seams_struct_definition",
		"structure_seams_struct_definition",
		"s_structure_seams_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SEAMS_STRUCT_DEFINITION_ID)
	{
		{ _field_struct, "structure manifest", &structure_manifest_struct },
		FIELD_EXPLANATION("This tag defines the geometry between seam connected structures bsp.", nullptr),
		{ _field_long_integer, "version" },
		{ _field_block, "errors", &global_error_report_categories_block_block },
		{ _field_block, "seams", &structure_seam_block_block },
		{ _field_block, "seam triangle mopp code block", &mopp_code_definition_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_SOFT_CEILING_BLOCK_ID { 0x51FDFC81, 0xC7EF4920, 0x8C353CCA, 0x2A23FF5D }
	TAG_STRUCT(
		structure_soft_ceiling_block,
		"structure_soft_ceiling_block",
		"structure_soft_ceiling_block",
		"s_structure_soft_ceiling_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SOFT_CEILING_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_short_enum, "type", &soft_ceiling_type_enum },
		FIELD_PAD("fresh", 2),
		{ _field_block, "soft ceiling triangles", &structure_soft_ceiling_triangle_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_SOFT_CEILING_TRIANGLE_BLOCK_ID { 0xF75BE784, 0x41744702, 0xA1F258E9, 0x2CD5B9E4 }
	TAG_STRUCT(
		structure_soft_ceiling_triangle_block,
		"structure_soft_ceiling_triangle_block",
		"structure_soft_ceiling_triangle_block",
		"s_structure_soft_ceiling_triangle_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SOFT_CEILING_TRIANGLE_BLOCK_ID)
	{
		{ _field_real_plane_3d, "plane" },
		{ _field_real_point_3d, "bounding sphere center" },
		{ _field_real, "bounding sphere radius" },
		{ _field_real_point_3d, "vertex0" },
		{ _field_real_point_3d, "vertex1" },
		{ _field_real_point_3d, "vertex2" },
		{ _field_terminator }
	};

	#define STRUCTURE_SOUND_CLUSTER_INTERIOR_CLUSTER_INDICES_ID { 0xC93822AC, 0x9F9E404B, 0x9440C3DA, 0x462F28E7 }
	TAG_STRUCT(
		structure_sound_cluster_interior_cluster_indices,
		"structure_sound_cluster_interior_cluster_indices",
		"structure_sound_cluster_interior_cluster_indices",
		"s_structure_sound_cluster_interior_cluster_indices",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SOUND_CLUSTER_INTERIOR_CLUSTER_INDICES_ID)
	{
		{ _field_short_integer, "interior cluster index" },
		{ _field_terminator }
	};

	#define STRUCTURE_SOUND_CLUSTER_PORTAL_DESIGNATORS_ID { 0x1EC24E9, 0xFD0D4390, 0xB834EDB2, 0x81935210 }
	TAG_STRUCT(
		structure_sound_cluster_portal_designators,
		"structure_sound_cluster_portal_designators",
		"structure_sound_cluster_portal_designators",
		"s_structure_sound_cluster_portal_designators",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SOUND_CLUSTER_PORTAL_DESIGNATORS_ID)
	{
		{ _field_short_integer, "portal designator" },
		{ _field_terminator }
	};

	#define STRUCTURE_SUPER_NODE_AABBS_BLOCK_ID { 0xABAAAA8A, 0x32044161, 0x3467CA2F, 0xAD4716BF }
	TAG_STRUCT(
		structure_super_node_aabbs_block,
		"structure_super_node_aabbs_block",
		"structure_super_node_aabbs_block",
		"s_structure_super_node_aabbs_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SUPER_NODE_AABBS_BLOCK_ID)
	{
		{ _field_real, "x0" },
		{ _field_real, "x1" },
		{ _field_real, "y0" },
		{ _field_real, "y1" },
		{ _field_real, "z0" },
		{ _field_real, "z1" },
		{ _field_terminator }
	};

	#define STRUCTURE_SUPER_NODE_TRAVERSAL_GEOMETRY_BLOCK_ID { 0x61AAAB8A, 0x10044161, 0xC167CA2F, 0xCB4716BF }
	TAG_STRUCT(
		structure_super_node_traversal_geometry_block,
		"structure_super_node_traversal_geometry_block",
		"structure_super_node_traversal_geometry_block",
		"s_structure_super_node_traversal_geometry_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SUPER_NODE_TRAVERSAL_GEOMETRY_BLOCK_ID)
	{
		{ _field_block, "portal_indices", &structure_super_node_traversal_geometry_indices_block_block },
		{ _field_block, "seam_indices", &structure_super_node_traversal_geometry_indices_block_block },
		{ _field_terminator }
	};

	#define STRUCTURE_SUPER_NODE_TRAVERSAL_GEOMETRY_INDICES_BLOCK_ID { 0x61AAAA8A, 0x80044161, 0x3167CA2F, 0xCD4716BF }
	TAG_STRUCT(
		structure_super_node_traversal_geometry_indices_block,
		"structure_super_node_traversal_geometry_indices_block",
		"structure_super_node_traversal_geometry_indices_block",
		"s_structure_super_node_traversal_geometry_indices_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SUPER_NODE_TRAVERSAL_GEOMETRY_INDICES_BLOCK_ID)
	{
		{ _field_short_integer, "index" },
		{ _field_terminator }
	};

	#define STRUCTURE_SURFACE_BLOCK_ID { 0xE0159FC4, 0xC9AB45E9, 0xB1B58400, 0x24345098 }
	TAG_STRUCT(
		structure_surface_block,
		"structure_surface_block",
		"structure_surface_block",
		"s_structure_surface_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SURFACE_BLOCK_ID)
	{
		{ _field_long_integer, "first_structure_surface_to_triangle_mapping_index" },
		{ _field_long_integer, "structure_surface_to_triangle_mapping_count" },
		{ _field_terminator }
	};

	#define STRUCTURE_SURFACE_TO_TRIANGLE_MAPPING_BLOCK_STRUCT_ID { 0x8E1D81A7, 0xAC1146C3, 0x126EDAC7, 0xB65E2B07 }
	TAG_STRUCT(
		structure_surface_to_triangle_mapping_block_struct,
		"structure_surface_to_triangle_mapping_block_struct",
		"structure_surface_to_triangle_mapping_block_struct",
		"s_structure_surface_to_triangle_mapping_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_SURFACE_TO_TRIANGLE_MAPPING_BLOCK_STRUCT_ID)
	{
		{ _field_dword_integer, "manual byteswarp1" },
		{ _field_terminator }
	};

	#define STRUCTURE_WATER_GROUPS_BLOCK_ID { 0xA1FDFC81, 0x7EF4920, 0xBC353CCA, 0x1A23FF5D }
	TAG_STRUCT(
		structure_water_groups_block,
		"structure_water_groups_block",
		"structure_water_groups_block",
		"s_structure_water_groups_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_WATER_GROUPS_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	#define STRUCTURE_WATER_INSTANCE_DEBUG_TRIANGLES_BLOCK_ID { 0xAAFDFA81, 0xBEF4B20, 0xBC3530CA, 0x1D23FD5D }
	TAG_STRUCT(
		structure_water_instance_debug_triangles_block,
		"structure_water_instance_debug_triangles_block",
		"structure_water_instance_debug_triangles_block",
		"s_structure_water_instance_debug_triangles_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_WATER_INSTANCE_DEBUG_TRIANGLES_BLOCK_ID)
	{
		{ _field_real_point_3d, "point0" },
		{ _field_real_point_3d, "point1" },
		{ _field_real_point_3d, "point2" },
		{ _field_terminator }
	};

	#define STRUCTURE_WATER_INSTANCE_PLANES_BLOCK_ID { 0xAAFDFC81, 0xBEF4920, 0xBC353CCA, 0x1D23FF5D }
	TAG_STRUCT(
		structure_water_instance_planes_block,
		"structure_water_instance_planes_block",
		"structure_water_instance_planes_block",
		"s_structure_water_instance_planes_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_WATER_INSTANCE_PLANES_BLOCK_ID)
	{
		{ _field_real_plane_3d, "plane" },
		{ _field_terminator }
	};

	#define STRUCTURE_WATER_INSTANCES_BLOCK_ID { 0xA1FDFC80, 0x7EF4921, 0xBC353CC2, 0x1A23FF53 }
	TAG_STRUCT(
		structure_water_instances_block,
		"structure_water_instances_block",
		"structure_water_instances_block",
		"s_structure_water_instances_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STRUCTURE_WATER_INSTANCES_BLOCK_ID)
	{
		{ _field_short_block_index, "group", &structure_water_groups_block_block },
		FIELD_PAD("PAD0", 2),
		{ _field_real_vector_3d, "flow velocity" },
		{ _field_real_argb_color, "fog color" },
		{ _field_real, "fog murkiness" },
		{ _field_block, "water planes block", &structure_water_instance_planes_block_block },
		{ _field_block, "water debug triangles block", &structure_water_instance_debug_triangles_block_block },
		{ _field_real_bounds, "bounds x" },
		{ _field_real_bounds, "bounds y" },
		{ _field_real_bounds, "bounds z" },
		{ _field_terminator }
	};

	#define STYLE_PALETTE_BLOCK_ID { 0x3D8C9FE3, 0x23D40AE, 0x968E5BAF, 0x3C164F2B }
	TAG_STRUCT(
		style_palette_block,
		"style_palette_block",
		"style_palette_block",
		"s_style_palette_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STYLE_PALETTE_BLOCK_ID)
	{
		{ _field_tag_reference, "reference", &style_group_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(style_group_reference$2, STYLE_TAG);

	#define STYLE_SHEET_LIST_STRUCT_DEFINITION_ID { 0xC59ED09C, 0xE2CC4A35, 0xA7C67CF6, 0xBD5B6B99 }
	TAG_STRUCT(
		style_sheet_list_struct_definition,
		"style_sheet_list_struct_definition",
		"style_sheet_list_struct_definition",
		"s_style_sheet_list_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STYLE_SHEET_LIST_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "style sheet languages", &userinterfacestylesheetlanguagesblock_block },
		{ _field_block, "gradients", &userinterfacestylesheetgradientblock_block },
		{ _field_block, "dropshadows", &userinterfacestylesheetdropshadowblock_block },
		{ _field_block, "outer glows", &userinterfacestylesheetouterglowblock_block },
		{ _field_terminator }
	};

	#define STYLE_STRUCT_DEFINITION_ID { 0xAC59B7DE, 0x455644C8, 0x9268F008, 0x8B74CD54 }
	TAG_STRUCT(
		style_struct_definition,
		"style_struct_definition",
		"style_struct_definition",
		"s_style_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		STYLE_STRUCT_DEFINITION_ID)
	{
		{ _field_string, "name" },
		FIELD_EXPLANATION("Combat status decay options", "Controls how combat status is allowed to be automatically reduced in the absence of combat stimuli. \'Latch at X\' means that once the level of x is attained (and/or surpassed) the combat status never falls below it. Not applicable when style is applied to a character tag."),
		{ _field_short_enum, "Combat status decay options", &combat_status_enum$2 },
		FIELD_PAD("hghq", 2),
		FIELD_EXPLANATION("Style Behavior Control", "Check the appropriate box to turn on/off the given behavior"),
		{ _field_long_flags, "Style control", &style_control_flags },
		{ _field_long_flags, "Behaviors1", &behavior_set1, _field_id_dumb },
		{ _field_long_flags, "Behaviors2", &behavior_set2, _field_id_dumb },
		{ _field_long_flags, "Behaviors3", &behavior_set3, _field_id_dumb },
		{ _field_long_flags, "Behaviors4", &behavior_set4, _field_id_dumb },
		{ _field_long_flags, "Behaviors5", &behavior_set5, _field_id_dumb },
		{ _field_long_flags, "Behaviors6", &behavior_set6, _field_id_dumb },
		{ _field_long_flags, "Behaviors7", &behavior_set7, _field_id_dumb },
		{ _field_long_flags, "Behaviors8", &behavior_set8, _field_id_dumb },
		{ _field_block, "Special movement", &special_movement_block_block },
		{ _field_block, "Behavior list", &behavior_names_block_block },
		{ _field_terminator }
	};

	STRINGS(combat_status_enum$2)
	{
		"Latch at Idle",
		"Latch at Alert",
		"Latch at Combat"
	};
	STRING_LIST(combat_status_enum$2, combat_status_enum$2_strings, _countof(combat_status_enum$2_strings));

	STRINGS(style_control_flags)
	{
		"New behaviors default to ON"
	};
	STRING_LIST(style_control_flags, style_control_flags_strings, _countof(style_control_flags_strings));

	STRINGS(behavior_set1)
	{
		"------GENERAL------",
		"root",
		"null",
		"null_discrete",
		"interruptable_control",
		"obey",
		"guard",
		"ready",
		"smash_obstacle",
		"destroy_obstacle",
		"perch",
		"blind_panic",
		"combat",
		"interact object behavior",
		"interact object impulse",
		"squad_patrol_behavior",
		"movement_plan_cover_impulse",
		"------BROKEN------",
		"broken behavior",
		"huddle impulse",
		"huddle behavior",
		"kamikaze behavior",
		"broken kamikaze impulse",
		"broken berserk impulse",
		"broken flee impulse",
		"broken scatter impulse",
		"------ENGAGE------",
		"equipment",
		"equipment active camo",
		"engage",
		"fight",
		"fight_circle"
	};
	STRING_LIST(behavior_set1, behavior_set1_strings, _countof(behavior_set1_strings));

	STRINGS(behavior_set2)
	{
		"hamstring_charge",
		"gravity_jump",
		"fight_positioning",
		"melee_charge",
		"unreachable leap charge",
		"melee_leaping_charge",
		"melee sync attack",
		"grenade_impulse",
		"object throw impulse",
		"anti_vehicle_grenade",
		"stalk",
		"berserk_wander_impulse",
		"stalker_camo_control",
		"leader_abandoned_berserk",
		"unassailable grenade impulse",
		"suppressing_fire_vehicle",
		"demand_charge_impulse",
		"------BERSERK------",
		"shield_depleted_berserk",
		"last_man_berserk",
		"stuck_with_grenade_berserk",
		"surprise_berserk",
		"proximity_berserk",
		"stuck_with_grenade_balling",
		"------PRESEARCH------",
		"presearch",
		"uncover",
		"destroy_cover",
		"suppressing fire",
		"grenade_uncover",
		"leap_on_cover",
		"------LEADER------"
	};
	STRING_LIST(behavior_set2, behavior_set2_strings, _countof(behavior_set2_strings));

	STRINGS(behavior_set3)
	{
		"engage_sync",
		"------SEARCH------",
		"search",
		"find_pursuit",
		"investigate",
		"------SELF-DEFENSE------",
		"self_preservation",
		"cover",
		"avoid",
		"evasion_impulse",
		"dive_impulse",
		"juke_impulse",
		"danger cover impulse",
		"danger crouch impulse",
		"proximity_melee",
		"proximity_self_preservation",
		"unreachable_enemy_cover",
		"unassailable_enemy_cover",
		"scary_target_cover",
		"group_emerge",
		"kungfu_cover",
		"------RETREAT------",
		"retreat",
		"retreat_grenade",
		"flee",
		"flee_target",
		"cower",
		"low_shield_retreat",
		"scary_target_retreat",
		"leader_dead_retreat",
		"peer_dead_retreat",
		"danger_retreat"
	};
	STRING_LIST(behavior_set3, behavior_set3_strings, _countof(behavior_set3_strings));

	STRINGS(behavior_set4)
	{
		"proximity_retreat",
		"charge when cornered",
		"surprise_retreat",
		"overheated_weapon_retreat",
		"------AMBUSH------",
		"ambush",
		"coordinated_ambush",
		"proximity_ambush",
		"vulnerable_enemy_ambush",
		"nowhere_to_run_ambush",
		"------VEHICLE------",
		"enter_vehicle",
		"enter_friendly_vehicle",
		"switch_to_friendly_vehicle",
		"vehicle_enter_impulse",
		"vehicle_entry_engage_impulse",
		"vehicle_board",
		"vehicle_fight",
		"vehicle_fight@boost",
		"vehicle_charge",
		"vehicle_ram_behavior",
		"vehicle_cover",
		"damage_vehicle_cover",
		"exposed_rear_cover_impulse",
		"player_endagered_cover_impulse",
		"vehicle_avoid",
		"vehicle_pickup",
		"vehicle_exit_impulse",
		"danger_vehicle_exit_impulse",
		"vehicle_flip_impulse",
		"vehicle_flip",
		"vehicle_turtle"
	};
	STRING_LIST(behavior_set4, behavior_set4_strings, _countof(behavior_set4_strings));

	STRINGS(behavior_set5)
	{
		"vehicle_engage_patrol_impulse",
		"vehicle_engage_wander_impulse",
		"vehicle keep station",
		"------POSTCOMBAT------",
		"postcombat",
		"post_postcombat",
		"check_friend",
		"shoot_corpse",
		"postcombat_approach",
		"------ALERT------",
		"alert",
		"------IDLE------",
		"idle",
		"wander behavior",
		"flight_wander",
		"patrol",
		"fall_sleep",
		"------BUGGERS------",
		"bugger_ground_uncover",
		"------ENGINEER------",
		"engineer_control",
		"engineer_control@slave",
		"engineer_control@free",
		"engineer_control@equipment",
		"engineer_explode",
		"engineer_broken_detonation",
		"boost_allies",
		"------SCARAB------",
		"scarab_root",
		"scarab_cure_isolation",
		"scarab_combat",
		"scarab_fight"
	};
	STRING_LIST(behavior_set5, behavior_set5_strings, _countof(behavior_set5_strings));

	STRINGS(behavior_set6)
	{
		"scarab_target_lock",
		"scarab_search",
		"scarab_search_pause",
		"------FLYING------",
		"flying_root",
		"flying_idle",
		"flying_combat",
		"flying_approach",
		"flying_cover",
		"flying_evade",
		"flying_retreat",
		"flying_tail",
		"flying_strafe",
		"flying_dodge_impulse",
		"------LOD------",
		"lod_root",
		"lod_idle",
		"lod_combat",
		"------ATOMS------",
		"go_to",
		"------ACTIVITIES------",
		"activity",
		"posture",
		"activity_default",
		"------SPECIAL------",
		"formation",
		"grunt scared by elite",
		"cure_isolation",
		"deploy_turret",
		"control",
		"arrange sync action",
		"------MOSH------"
	};
	STRING_LIST(behavior_set6, behavior_set6_strings, _countof(behavior_set6_strings));

	STRINGS(behavior_set7)
	{
		"ctf",
		"koth",
		"assault",
		"balling_attack",
		"balling_leap_attack",
		"protect allies",
		"activate item",
		"collect projectiles",
		"resurrect ally",
		"give birth",
		"advance",
		"teleport advance",
		"leap advance",
		"follow impulse (pack)",
		"follow (pack)",
		"stalk (pack)",
		"fight (pack)",
		"command charge impulse",
		"puppet",
		"shard spawn"
	};
	STRING_LIST(behavior_set7, behavior_set7_strings, _countof(behavior_set7_strings));

	STRING_LIST(behavior_set8, empty_string_list, 0);

	#define SUBLOCATION_TABLE_INDEXES_ARRAY_DEFINITION_STRUCT_DEFINITION_ID { 0xB3E03FAA, 0x4D94FCF, 0xA6602684, 0xA733B0FA }
	TAG_STRUCT(
		sublocation_table_indexes_array_definition_struct_definition,
		"sublocation_table_indexes_array_definition",
		"sublocation_table_indexes_array_definition",
		"s_sublocation_table_indexes_array_definition",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SUBLOCATION_TABLE_INDEXES_ARRAY_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_short_block_index, "subpage table index", &cache_file_resource_file_page_block_block },
		{ _field_terminator }
	};

	#define SUBPART_BLOCK_ID { 0x9109A33, 0x9C27436F, 0xB438BFBA, 0xB6971BAE }
	TAG_STRUCT(
		subpart_block,
		"subpart_block",
		"subpart_block",
		"s_subpart_block",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SUBPART_BLOCK_ID)
	{
		{ _field_long_integer, "index start" },
		{ _field_long_integer, "index count" },
		{ _field_short_block_index, "part index", &part_block_block },
		{ _field_word_integer, "budget vertex count" },
		{ _field_dword_integer, "analytical light index" },
		{ _field_terminator }
	};

	#define SUPER_DETONATION_DAMAGE_STRUCT_ID { 0xA018816E, 0x4F4F48B3, 0x9A4AEA76, 0x5C479F3A }
	VERSIONED_TAG_STRUCT(
		super_detonation_damage_struct,
		"super_detonation_damage_struct",
		"super_detonation_damage_struct",
		"s_super_detonation_damage_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SUPER_DETONATION_DAMAGE_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_tag_reference, "super detonation damage", &damage_effect_group_reference },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	#define SUPER_NODE_MAPPING_INDEX_ARRAY_STRUCT_DEFINITION_ID { 0xD98D671C, 0xB7E64985, 0x3D63EF05, 0xFAEAE84E }
	TAG_STRUCT(
		super_node_mapping_index_array_struct_definition,
		"super_node_mapping_index_array",
		"super_node_mapping_index_array",
		"s_super_node_mapping_index_array",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SUPER_NODE_MAPPING_INDEX_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_short_block_index, "index", &collision_kd_hierarchy_static_nodes_block_block },
		{ _field_terminator }
	};

	#define SUPER_NODE_MAPPINGS_BLOCK$2_ID { 0xACC3DABC, 0xBA2F4449, 0xCEAB10B3, 0x49A70C8A }
	TAG_STRUCT(
		super_node_mappings_block$2,
		"super_node_mappings_block",
		"super_node_mappings_block",
		"s_super_node_mappings_block$2",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SUPER_NODE_MAPPINGS_BLOCK$2_ID)
	{
		{ _field_array, "indices", &super_node_mapping_index_array$2 },
		FIELD_PAD("pad", 2),
		{ _field_terminator }
	};

	#define SUPER_NODE_MAPPINGS_BLOCK_ID { 0x61AA468A, 0xA044161, 0xB167CA2F, 0xCB2716BF }
	TAG_STRUCT(
		super_node_mappings_block,
		"super_node_mappings_block",
		"super_node_mappings_block",
		"s_super_node_mappings_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SUPER_NODE_MAPPINGS_BLOCK_ID)
	{
		{ _field_short_integer, "parent_super_node_index" },
		{ _field_char_integer, "parent_internal_node_index" },
		{ _field_byte_flags, "flags", &structure_super_node_mapping_flags },
		{ _field_long_integer, "has_traversal_geometry_mask" },
		{ _field_short_block_index, "first_traversal_geometry_index", &structure_super_node_traversal_geometry_indices_block_block },
		{ _field_short_block_index, "first_aabb_index", &structure_super_node_aabbs_block_block },
		{ _field_long_integer, "aabb_mask" },
		{ _field_short_block_index, "non_terminal_traversal_geometry_index", &structure_super_node_traversal_geometry_indices_block_block },
		FIELD_PAD("pad", 2),
		{ _field_terminator }
	};

	STRINGS(structure_super_node_mapping_flags)
	{
		"above"
	};
	STRING_LIST(structure_super_node_mapping_flags, structure_super_node_mapping_flags_strings, _countof(structure_super_node_mapping_flags_strings));

	#define SUPER_NODE_RECURSABLE_MASKS_BLOCK_ID { 0x61AB468A, 0xCA044161, 0xB167CAAF, 0x1B2716BF }
	TAG_STRUCT(
		super_node_recursable_masks_block,
		"super_node_recursable_masks_block",
		"super_node_recursable_masks_block",
		"s_super_node_recursable_masks_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SUPER_NODE_RECURSABLE_MASKS_BLOCK_ID)
	{
		{ _field_short_integer, "mask" },
		{ _field_terminator }
	};

	#define SUPPORTED_BITFIELD_STRUCT_DEFINITION_ID { 0x5BA3F924, 0xD9104D57, 0x9D743495, 0x3F6636C6 }
	TAG_STRUCT(
		supported_bitfield_struct_definition,
		"supported_bitfield",
		"supported_bitfield",
		"s_supported_bitfield",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SUPPORTED_BITFIELD_STRUCT_DEFINITION_ID)
	{
		{ _field_long_integer, "bitvector data" },
		{ _field_terminator }
	};

	#define SUPPRESSED_INCIDENT_BLOCK_ID { 0xCB9D3072, 0xC3A1469E, 0x95FAAE71, 0x33A3E3E1 }
	TAG_STRUCT(
		suppressed_incident_block,
		"suppressed_incident_block",
		"suppressed_incident_block",
		"s_suppressed_incident_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SUPPRESSED_INCIDENT_BLOCK_ID)
	{
		{ _field_string_id, "incident name" },
		{ _field_byte_flags, "suppression type", &suppressed_incident_flags },
		FIELD_PAD("VNJESHFHV", 3),
		{ _field_terminator }
	};

	STRINGS(suppressed_incident_flags)
	{
		"suppress cause player game engine event{suppress game engine event}",
		"suppress effect player game engine event",
		"suppress cause team game engine event",
		"suppress effect team game engine event",
		"suppress medal display{suppress display}",
		"suppress medal stats{suppress stats}",
		"suppress fanfare",
		"suppress audio"
	};
	STRING_LIST(suppressed_incident_flags, suppressed_incident_flags_strings, _countof(suppressed_incident_flags_strings));

	#define SURFACES_BLOCK_STRUCT_ID { 0x7AB81935, 0x10A4B88, 0xAB12DE80, 0x85CD9139 }
	TAG_STRUCT(
		surfaces_block_struct,
		"surfaces_block_struct",
		"surfaces_block_struct",
		"s_surfaces_block_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SURFACES_BLOCK_STRUCT_ID)
	{
		{ _field_word_integer, "plane index" },
		{ _field_word_integer, "first edge" },
		{ _field_short_integer, "material" },
		{ _field_short_integer, "breakable surface set" },
		{ _field_short_integer, "breakable surface" },
		{ _field_byte_flags, "flags", &surface_flags },
		{ _field_byte_integer, "best plane calculation vertex index " },
		{ _field_terminator }
	};

	#define SURVIVAL_MODE_GLOBALS_STRUCT_DEFINITION_ID { 0x85E14A0F, 0xF0534FEA, 0x91B24C4D, 0x74E59924 }
	TAG_STRUCT(
		survival_mode_globals_struct_definition,
		"survival_mode_globals_struct_definition",
		"survival_mode_globals_struct_definition",
		"s_survival_mode_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SURVIVAL_MODE_GLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_real, "respawn time", "NO: Use game_engine_settings for this" },
		{ _field_tag_reference, "survival mode text", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "countdown sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "respawn sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "co-op spawning globals", &coop_spawning_globals_definition_group_reference },
		{ _field_block, "wave templates", &survival_mode_wave_templates_block },
		{ _field_block, "state responses", &game_engine_status_response_block_block },
		{ _field_block, "team colors", &multiplayer_color_block_block$2 },
		{ _field_terminator }
	};

	#define SURVIVAL_MODE_WAVE_TEMPLATES_STRUCT_ID { 0x844D5A8D, 0x3EF44ADE, 0xAB297183, 0x11A7ACC1 }
	TAG_STRUCT(
		survival_mode_wave_templates_struct,
		"survival_mode_wave_templates_struct",
		"survival_mode_wave_templates_struct",
		"s_survival_mode_wave_templates_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SURVIVAL_MODE_WAVE_TEMPLATES_STRUCT_ID)
	{
		{ _field_string_id, "name" },
		{ _field_tag_reference, "wave template", &wave_template_group_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(wave_template_group_reference$2, WAVE_TEMPLATE_TAG);

	#define SURVIVAL_WAVE_SQUAD_BLOCK_ID { 0x38B8902F, 0x4F0D477A, 0xBBDE2065, 0x8BD20DC0 }
	TAG_STRUCT(
		survival_wave_squad_block,
		"survival_wave_squad_block",
		"survival_wave_squad_block",
		"s_survival_wave_squad_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		SURVIVAL_WAVE_SQUAD_BLOCK_ID)
	{
		{ _field_string_id, "squad type", "survival_mode_get_wave_squad" },
		{ _field_terminator }
	};

	#define TAG_BLOCK_INDEX_BLOCK_ID { 0x4CD511CB, 0xE05742A6, 0x9B31EFB8, 0x74D7BEE6 }
	TAG_STRUCT(
		tag_block_index_block,
		"tag_block_index_block",
		"tag_block_index_block",
		"s_tag_block_index_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TAG_BLOCK_INDEX_BLOCK_ID)
	{
		{ _field_struct, "block index", &tag_block_index_struct },
		{ _field_terminator }
	};

	#define TAG_BLOCK_INDEX_STRUCT_ID { 0xA7D748C4, 0x6A624229, 0xB70B7DC6, 0x27861D70 }
	TAG_STRUCT(
		tag_block_index_struct,
		"tag_block_index_struct",
		"tag_block_index_struct",
		"s_tag_block_index_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TAG_BLOCK_INDEX_STRUCT_ID)
	{
		{ _field_word_integer, "block index data", "divide by 1024 for count, remainder is start index" },
		{ _field_terminator }
	};

	#define TAG_PACKAGE_MANIFEST_BLOCK_STRUCT_ID { 0x71C748DE, 0x49F7414C, 0xAAA41710, 0x99C055EA }
	TAG_STRUCT(
		tag_package_manifest_block_struct,
		"tag_package_manifest_block_struct",
		"tag_package_manifest_block_struct",
		"s_tag_package_manifest_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TAG_PACKAGE_MANIFEST_BLOCK_STRUCT_ID)
	{
		{ _field_block, "patches", &tag_patch_block_block },
		{ _field_terminator }
	};

	#define TAG_PATCH_BLOCK_STRUCT_ID { 0x50CF42AF, 0x6F5141A4, 0x8B34C505, 0xD092F652 }
	TAG_STRUCT(
		tag_patch_block_struct,
		"tag_patch_block_struct",
		"tag_patch_block_struct",
		"s_tag_patch_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TAG_PATCH_BLOCK_STRUCT_ID)
	{
		{ _field_tag_reference, "new tag", &_reference$7 },
		{ _field_tag_reference, "tag to override", &_reference$8 },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference$7, INVALID_TAG);

	TAG_REFERENCE(_reference$8, INVALID_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define TAG_RESOURCE_ALIGNMENT_BITS_ARRAY_DEFINITION_STRUCT_DEFINITION_ID { 0x105858F0, 0xA65043AA, 0x8F0EE066, 0x4222491A }
	TAG_STRUCT(
		tag_resource_alignment_bits_array_definition_struct_definition,
		"tag_resource_alignment_bits_array_definition",
		"tag_resource_alignment_bits_array_definition",
		"s_tag_resource_alignment_bits_array_definition",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TAG_RESOURCE_ALIGNMENT_BITS_ARRAY_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_short_integer, "page alignment bits" },
		{ _field_terminator }
	};

	#define TASK_DIRECTION_BLOCK_V2_STRUCT_ID { 0xFD7F6876, 0x58824DDC, 0x9EE64C67, 0xC4D351E4 }
	TAG_STRUCT(
		task_direction_block_v2_struct,
		"task_direction_block_v2_struct",
		"task_direction_block_v2_struct",
		"s_task_direction_block_v2_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TASK_DIRECTION_BLOCK_V2_STRUCT_ID)
	{
		{ _field_block, "points", &task_direction_point_block_block },
		{ _field_terminator }
	};

	#define TASK_DIRECTION_POINT_BLOCK_ID { 0xE85253E6, 0x72574833, 0xAFA188B9, 0xBFF2A0ED }
	TAG_STRUCT(
		task_direction_point_block,
		"task_direction_point_block",
		"task_direction_point_block",
		"s_task_direction_point_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TASK_DIRECTION_POINT_BLOCK_ID)
	{
		{ _field_real_point_3d, "point0" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_terminator }
	};

	#define TASK_DISTRIBUTION_BLOCK_STRUCT_ID { 0x4A35DA4C, 0x7C8349B7, 0x857A1EE7, 0x216200D6 }
	TAG_STRUCT(
		task_distribution_block_struct,
		"task_distribution_block_struct",
		"task_distribution_block_struct",
		"s_task_distribution_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TASK_DISTRIBUTION_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "objective", &objectives_block_block },
		{ _field_short_block_index_custom_search, "task", &custom_task_block_index_definition$2 },
		{ _field_terminator }
	};

	#define TASKS_BLOCK_STRUCT_ID { 0xC243A66, 0xABF24442, 0x826D572E, 0xF1C57BB0 }
	TAG_STRUCT(
		tasks_block_struct,
		"tasks_block_struct",
		"tasks_block_struct",
		"s_tasks_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TASKS_BLOCK_STRUCT_ID)
	{
		{ _field_word_flags, "flags", &task_flags_definition },
		{ _field_word_flags, "inhibit groups", &inhibit_behavior_flags },
		{ _field_word_flags, "inhibit on difficulty", &global_campaign_difficulty_enum },
		{ _field_short_enum, "movement", &task_movement_enum },
		{ _field_short_enum, "follow", &task_follow_enum },
		{ _field_short_block_index, "follow squad", &squads_block_block },
		{ _field_real, "follow radius" },
		{ _field_real, "follow Z clamp", "Don't follow at areas outside of this vertical margin", "wus" },
		{ _field_word_flags, "follow players", &task_follow_player_flags },
		FIELD_PAD("post-follow-players", 2),
		{ _field_real, "player front radius" },
		{ _field_real, "maximum duration", "Exhaust this task after it has been active for this long", "seconds" },
		{ _field_real, "exhaustion delay", "When a task exhausts, hold actors in the task for this long before releasing them", "seconds" },
		{ _field_string_id, "Entry Script", _field_id_halo_script_block },
		{ _field_string_id, "Command Script", _field_id_halo_script_block },
		{ _field_string_id, "Exhaustion Script", "static script that is run when the task is exhausted", _field_id_halo_script_block },
		{ _field_short_integer, "Script index" },
		{ _field_short_integer, "Command script index" },
		{ _field_short_integer, "Exhaustion script index" },
		{ _field_short_block_index, "Squad group filter", &squad_groups_block_block },
		{ _field_short_enum, "dialogue type", "when someone enters this task for the first time, they play this type of dialogue", &task_dialogue_enum },
		{ _field_word_flags, "runtime flags", &task_runtime_flags },
		{ _field_short_integer, "Kungfu count", "The number of guys under this task that should be allowed to fight the player at a time" },
		FIELD_PAD("post-kungfu-count", 2),
		FIELD_EXPLANATION("UI-Controlled", "You don\'t need to modify these here. They are managed by the objectives ui"),
		{ _field_string_id, "name" },
		{ _field_short_integer, "priority", _field_id_unknown_ohoc },
		{ _field_short_block_index, "first_child", &tasks_block_block },
		{ _field_short_block_index, "next_sibling", &tasks_block_block },
		{ _field_short_block_index, "parent", &tasks_block_block, _field_id_unknown_ohoc },
		{ _field_block, "activation script", &script_fragment_block_block },
		{ _field_short_block_index, "script index ", &hs_scripts_block_block },
		{ _field_short_integer, "lifetime count", "task will never want to suck in more then n guys over lifetime (soft ceiling only applied when limit exceeded" },
		{ _field_word_flags, "filter flags", &filter_flags },
		{ _field_short_enum, "filter", &filter_enum },
		{ _field_short_integer_bounds, "capacity" },
		{ _field_short_integer, "max body count", "task becomes inactive after the given number of casualties" },
		{ _field_short_enum, "attitude", &task_attitude_enum },
		{ _field_real, "min strength", "task becomes inactive after the strength of the participants falls below the given level", nullptr, "[0,1]" },
		{ _field_block, "areas", &area_reference_block_block },
		{ _field_block, "direction", &task_direction_block_v2_block },
		{ _field_terminator }
	};

	STRINGS(task_flags_definition)
	{
		"latch ON",
		"latch OFF",
		"gate",
		"single use",
		"suppress combat",
		"suppress active camo",
		"blind",
		"deaf",
		"braindead",
		"magic player sight",
		"DISABLE",
		"ignore fronts",
		"don\'t generate front",
		"reverse direction",
		"invert filter logic"
	};
	STRING_LIST(task_flags_definition, task_flags_definition_strings, _countof(task_flags_definition_strings));

	STRINGS(inhibit_behavior_flags)
	{
		"Cover",
		"Retreat",
		"Vehicles",
		"Grenades",
		"Berserk",
		"Equipment",
		"Object Interaction"
	};
	STRING_LIST(inhibit_behavior_flags, inhibit_behavior_flags_strings, _countof(inhibit_behavior_flags_strings));

	STRINGS(task_movement_enum)
	{
		"run (alert)",
		"walk (idle)",
		"crouch (alert)"
	};
	STRING_LIST(task_movement_enum, task_movement_enum_strings, _countof(task_movement_enum_strings));

	STRINGS(task_follow_enum)
	{
		"NONE",
		"player",
		"squad",
		"lead player",
		"player front"
	};
	STRING_LIST(task_follow_enum, task_follow_enum_strings, _countof(task_follow_enum_strings));

	STRINGS(task_follow_player_flags)
	{
		"player 0",
		"player 1",
		"player 2",
		"player 3"
	};
	STRING_LIST(task_follow_player_flags, task_follow_player_flags_strings, _countof(task_follow_player_flags_strings));

	STRINGS(task_dialogue_enum)
	{
		"none",
		"enemy is advancing",
		"enemy is charging",
		"enemy is falling back",
		"advance",
		"charge",
		"fall_back",
		"move on{moveone}",
		"follow_player",
		"arriving into combat",
		"end combat",
		"investigate",
		"spread out",
		"hold position{hold}",
		"find cover",
		"covering fire"
	};
	STRING_LIST(task_dialogue_enum, task_dialogue_enum_strings, _countof(task_dialogue_enum_strings));

	STRINGS(task_runtime_flags)
	{
		"area connectivity valid"
	};
	STRING_LIST(task_runtime_flags, task_runtime_flags_strings, _countof(task_runtime_flags_strings));

	STRINGS(filter_flags)
	{
		"exclusive"
	};
	STRING_LIST(filter_flags, filter_flags_strings, _countof(filter_flags_strings));

	STRINGS(filter_enum)
	{
		"none",
		"fireteam",
		"leader",
		"no leader",
		"arbiter",
		"player in my vehicle",
		"in combat",
		"sighted player",
		"sighted enemy",
		"target disengaged",
		"infantry",
		"has an engineer",
		"strength > 0.25",
		"strength > 0.5",
		"strength > 0.75",
		"strength < 0.25",
		"strength < 0.5",
		"strength < 0.75",
		"human team",
		"covenant team",
		"mule team",
		"elite",
		"jackal",
		"grunt",
		"hunter",
		"marine",
		"brute",
		"bugger",
		"bishop",
		"knight",
		"pawn",
		"rook",
		"engineer",
		"skirmisher",
		"mule",
		"spartan",
		"sniper",
		"rifle",
		"vehicle",
		"scorpion",
		"ghost",
		"warthog",
		"wraith",
		"phantom",
		"tuning fork",
		"falcon",
		"seraph",
		"sabre",
		"pelican",
		"banshee",
		"mongoose",
		"revenant",
		"shade turret"
	};
	STRING_LIST(filter_enum, filter_enum_strings, _countof(filter_enum_strings));

	STRINGS(task_attitude_enum)
	{
		"normal",
		"defensive",
		"aggressive",
		"playfighting",
		"patrol"
	};
	STRING_LIST(task_attitude_enum, task_attitude_enum_strings, _countof(task_attitude_enum_strings));

	#define TEAMDEFINITIONBLOCK_ID { 0xC4756744, 0x3B5D4AE4, 0x943588C8, 0x1A348142 }
	TAG_STRUCT(
		teamdefinitionblock,
		"teamDefinitionBlock",
		"teamDefinitionBlock",
		"s_teamdefinitionblock",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TEAMDEFINITIONBLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_real_rgb_color, "primary color" },
		{ _field_real_rgb_color, "secondary color" },
		FIELD_GROUP_BEGIN("- Emblem Data"),
		{ _field_byte_integer, "foreground emblem index" },
		{ _field_byte_integer, "background emblem index" },
		{ _field_byte_flags, "info flags", &embleminfoflags },
		{ _field_char_enum, "primary color index", &playercolorenum },
		{ _field_char_enum, "secondary color index", &playercolorenum },
		{ _field_char_enum, "background color index", &playercolorenum },
		FIELD_PAD("pad", 2),
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(embleminfoflags)
	{
		"alternate foreground channel off",
		"flip foreground",
		"flip background"
	};
	STRING_LIST(embleminfoflags, embleminfoflags_strings, _countof(embleminfoflags_strings));

	STRINGS(playercolorenum)
	{
		"player color 0",
		"player color 1",
		"player color 2",
		"player color 3",
		"player color 4",
		"player color 5",
		"player color 6",
		"player color 7",
		"player color 8",
		"player color 9",
		"player color 10",
		"player color 11",
		"player color 12",
		"player color 13",
		"player color 14",
		"player color 15",
		"player color 16",
		"player color 17",
		"player color 18",
		"player color 19",
		"player color 20",
		"player color 21",
		"player color 22",
		"player color 23",
		"player color 24",
		"player color 25",
		"player color 26",
		"player color 27",
		"player color 28",
		"player color 29",
		"player color 30",
		"player color 31"
	};
	STRING_LIST(playercolorenum, playercolorenum_strings, _countof(playercolorenum_strings));

	#define TEMPLATE_INSTANTIATION_BLOCK_DEFINITION_ID { 0x147959FC, 0xBEE943BB, 0xBBE561E4, 0x8E81088F }
	TAG_STRUCT(
		template_instantiation_block_definition,
		"template_instantiation_block_definition",
		"template_instantiation_block_definition",
		"s_template_instantiation_block_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TEMPLATE_INSTANTIATION_BLOCK_DEFINITION_ID)
	{
		{ _field_tag_reference, "screen reference", &cui_screen_group_reference },
		{ _field_terminator }
	};

	#define TERMINAL_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0xC2BEE19D, 0xB5F0423F, 0xBA356503, 0x62B96151 }
	TAG_STRUCT(
		terminal_block_index_flags_block_struct,
		"terminal_block_index_flags_block_struct",
		"terminal_block_index_flags_block_struct",
		"s_terminal_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TERMINAL_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_terminal_palette_block_block },
		{ _field_terminator }
	};

	#define TERMINAL_PAGE_BLOCK_DEFINITION_ID { 0x6C0F30C8, 0x13E643C2, 0x8CE33CDA, 0x514728F0 }
	TAG_STRUCT(
		terminal_page_block_definition,
		"terminal_page_block_definition",
		"terminal_page_block_definition",
		"s_terminal_page_block_definition",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TERMINAL_PAGE_BLOCK_DEFINITION_ID)
	{
		{ _field_short_integer, "bitmap sequence index" },
		{ _field_short_integer, "bitmap sprite index" },
		{ _field_string_id, "text" },
		{ _field_terminator }
	};

	#define TEXT_VALUE_PAIR_DEFINITION_STRUCT_DEFINITION_ID { 0xDFA0A227, 0xB83A4610, 0x8DF352D1, 0x391AB478 }
	TAG_STRUCT(
		text_value_pair_definition_struct_definition,
		"text_value_pair_definition_struct_definition",
		"text_value_pair_definition_struct_definition",
		"s_text_value_pair_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TEXT_VALUE_PAIR_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_long_enum, "parameter", &game_variant_parameters },
		{ _field_string_id, "name" },
		{ _field_string_id, "description text" },
		{ _field_char_enum, "parameter_type", &text_value_pair_parameter_type },
		FIELD_PAD("shrug", 3),
		{ _field_block, "text value pairs", &text_value_pair_reference_block_block },
		{ _field_terminator }
	};

	STRINGS(game_variant_parameters)
	{
		"game misc score to win round",
		"game misc teams",
		"game misc mosh",
		"game misc mosh difficulty",
		"game misc drop weapons on death",
		"game misc round reset map",
		"game misc round time limit",
		"game misc perfection enabled",
		"game misc round limit",
		"game misc early win count",
		"game misc killcam enabled",
		"game misc medal scoring enabled",
		"game misc defenders use last round score",
		"game misc overshield deplete time",
		"game prototype mode",
		"game prototype promethean kill mult.",
		"game prototype promethean time mult.",
		"game prototype promethean medal mult.",
		"game prototype promethean duration",
		"game prototype class color override",
		"game respawn inherit timer",
		"game respawn with teammate",
		"game respawn at location",
		"game respawn on kill",
		"game respawn early spawn allowed",
		"game respawn lives per round",
		"game respawn team lives per round",
		"game respawn min respawn time",
		"game respawn respawn time",
		"game respawn suicide penalty",
		"game respawn betrayal penalty",
		"game respawn growth",
		"game respawn initial loadout selection time",
		"game respawn traits duration",
		"game social observers",
		"game social team changing",
		"game social friendly fire",
		"game social betrayal booting",
		"game social enemy voice",
		"game social open channel voice",
		"game social dead player voice",
		"game map grenades",
		"game map equipment",
		"game map turrets",
		"game map shortcuts",
		"game map powerups",
		"game map indestructible vehicles",
		"game map weapon set",
		"game map vehicle set",
		"game map equipment set",
		"game map red powerup primary duration",
		"game map blue powerup primary duration",
		"game map yellow powerup primary duration",
		"game map custom powerup primary duration",
		"game map red powerup secondary duration",
		"game map blue powerup secondary duration",
		"game map yellow powerup secondary duration",
		"game map custom powerup secondary duration",
		"sandbox open voice channel",
		"sandbox enter editor mode",
		"sandbox respawn time",
		"template vision",
		"template hearing",
		"template luck",
		"template weapon",
		"template grenades",
		"template equipment drop",
		"template ai assassination immunity",
		"template ai headshot immunity",
		"template ai damage resistance",
		"template ai damage modifier",
		"survival enable scenario hazards",
		"survival enable weapon drops",
		"survival enable ammo crates",
		"survival generator defend all",
		"survival generator random spawn",
		"survival game difficulty",
		"survival set count",
		"survival bonus lives awarded",
		"survival bonus target",
		"survival spartan lives on elite death",
		"survival extra life score target",
		"survival shared team life count",
		"survival elite life count",
		"survival maximum lives",
		"survival generator count",
		"game elite_respawn inherit timer",
		"game elite_respawn with teammate",
		"game elite_respawn at location",
		"game elite_respawn on kill",
		"game elite_respawn early spawn allowed",
		"game elite_respawn lives per round",
		"game elite_respawn team lives per round",
		"game elite_respawn min respawn time",
		"game elite_respawn respawn time",
		"game elite_respawn suicide penalty",
		"game elite_respawn betrayal penalty",
		"game elite_respawn growth",
		"game elite_respawn initial loadout selection time",
		"game elite_respawn traits duration",
		"survival_ai_traits vision",
		"survival_ai_traits hearing",
		"survival_ai_traits luck",
		"survival_ai_traits weapon",
		"survival_ai_traits grenades",
		"survival_ai_traits equipment drop",
		"survival_ai_traits ai assassination immunity",
		"survival_ai_traits ai headshot immunity",
		"survival_ai_traits ai damage resistance",
		"survival_ai_traits ai damage modifier",
		"survival_round_0 skull0",
		"survival_round_0 skull1",
		"survival_round_0 skull2",
		"survival_round_0 skull3",
		"survival_round_0 skull4",
		"survival_round_0 skull5",
		"survival_round_0 skull6",
		"survival_round_0 skull7",
		"survival_round_0 skull8",
		"survival_round_0 skull9",
		"survival_round_0 skull10",
		"survival_round_0 skull11",
		"survival_round_0 skull12",
		"survival_round_0 skull13",
		"survival_round_0 skull14",
		"survival_round_0 skull15",
		"survival_round_0 skull16",
		"survival_round_0 skull17",
		"survival round_0_initial_wave delivered via dropship",
		"survival round_0_initial_wave wave squad advance type",
		"survival_round_0_initial_wave squad type0",
		"survival_round_0_initial_wave squad type1",
		"survival_round_0_initial_wave squad type2",
		"survival_round_0_initial_wave squad type3",
		"survival_round_0_initial_wave squad type4",
		"survival_round_0_initial_wave squad type5",
		"survival_round_0_initial_wave squad type6",
		"survival_round_0_initial_wave squad type7",
		"survival_round_0_initial_wave squad type8",
		"survival_round_0_initial_wave squad type9",
		"survival_round_0_initial_wave squad type10",
		"survival_round_0_initial_wave squad type11",
		"survival round_0_primary_wave delivered via dropship",
		"survival round_0_primary_wave wave squad advance type",
		"survival_round_0_primary_wave squad type0",
		"survival_round_0_primary_wave squad type1",
		"survival_round_0_primary_wave squad type2",
		"survival_round_0_primary_wave squad type3",
		"survival_round_0_primary_wave squad type4",
		"survival_round_0_primary_wave squad type5",
		"survival_round_0_primary_wave squad type6",
		"survival_round_0_primary_wave squad type7",
		"survival_round_0_primary_wave squad type8",
		"survival_round_0_primary_wave squad type9",
		"survival_round_0_primary_wave squad type10",
		"survival_round_0_primary_wave squad type11",
		"survival round_0_boss_wave delivered via dropship",
		"survival round_0_boss_wave wave squad advance type",
		"survival_round_0_boss_wave squad type0",
		"survival_round_0_boss_wave squad type1",
		"survival_round_0_boss_wave squad type2",
		"survival_round_0_boss_wave squad type3",
		"survival_round_0_boss_wave squad type4",
		"survival_round_0_boss_wave squad type5",
		"survival_round_0_boss_wave squad type6",
		"survival_round_0_boss_wave squad type7",
		"survival_round_0_boss_wave squad type8",
		"survival_round_0_boss_wave squad type9",
		"survival_round_0_boss_wave squad type10",
		"survival_round_0_boss_wave squad type11",
		"survival_round_1 skull0",
		"survival_round_1 skull1",
		"survival_round_1 skull2",
		"survival_round_1 skull3",
		"survival_round_1 skull4",
		"survival_round_1 skull5",
		"survival_round_1 skull6",
		"survival_round_1 skull7",
		"survival_round_1 skull8",
		"survival_round_1 skull9",
		"survival_round_1 skull10",
		"survival_round_1 skull11",
		"survival_round_1 skull12",
		"survival_round_1 skull13",
		"survival_round_1 skull14",
		"survival_round_1 skull15",
		"survival_round_1 skull16",
		"survival_round_1 skull17",
		"survival round_1_initial_wave delivered via dropship",
		"survival round_1_initial_wave wave squad advance type",
		"survival_round_1_initial_wave squad type0",
		"survival_round_1_initial_wave squad type1",
		"survival_round_1_initial_wave squad type2",
		"survival_round_1_initial_wave squad type3",
		"survival_round_1_initial_wave squad type4",
		"survival_round_1_initial_wave squad type5",
		"survival_round_1_initial_wave squad type6",
		"survival_round_1_initial_wave squad type7",
		"survival_round_1_initial_wave squad type8",
		"survival_round_1_initial_wave squad type9",
		"survival_round_1_initial_wave squad type10",
		"survival_round_1_initial_wave squad type11",
		"survival round_1_primary_wave delivered via dropship",
		"survival round_1_primary_wave wave squad advance type",
		"survival_round_1_primary_wave squad type0",
		"survival_round_1_primary_wave squad type1",
		"survival_round_1_primary_wave squad type2",
		"survival_round_1_primary_wave squad type3",
		"survival_round_1_primary_wave squad type4",
		"survival_round_1_primary_wave squad type5",
		"survival_round_1_primary_wave squad type6",
		"survival_round_1_primary_wave squad type7",
		"survival_round_1_primary_wave squad type8",
		"survival_round_1_primary_wave squad type9",
		"survival_round_1_primary_wave squad type10",
		"survival_round_1_primary_wave squad type11",
		"survival round_1_boss_wave delivered via dropship",
		"survival round_1_boss_wave wave squad advance type",
		"survival_round_1_boss_wave squad type0",
		"survival_round_1_boss_wave squad type1",
		"survival_round_1_boss_wave squad type2",
		"survival_round_1_boss_wave squad type3",
		"survival_round_1_boss_wave squad type4",
		"survival_round_1_boss_wave squad type5",
		"survival_round_1_boss_wave squad type6",
		"survival_round_1_boss_wave squad type7",
		"survival_round_1_boss_wave squad type8",
		"survival_round_1_boss_wave squad type9",
		"survival_round_1_boss_wave squad type10",
		"survival_round_1_boss_wave squad type11",
		"survival_round_2 skull0",
		"survival_round_2 skull1",
		"survival_round_2 skull2",
		"survival_round_2 skull3",
		"survival_round_2 skull4",
		"survival_round_2 skull5",
		"survival_round_2 skull6",
		"survival_round_2 skull7",
		"survival_round_2 skull8",
		"survival_round_2 skull9",
		"survival_round_2 skull10",
		"survival_round_2 skull11",
		"survival_round_2 skull12",
		"survival_round_2 skull13",
		"survival_round_2 skull14",
		"survival_round_2 skull15",
		"survival_round_2 skull16",
		"survival_round_2 skull17",
		"survival round_2_initial_wave delivered via dropship",
		"survival round_2_initial_wave wave squad advance type",
		"survival_round_2_initial_wave squad type0",
		"survival_round_2_initial_wave squad type1",
		"survival_round_2_initial_wave squad type2",
		"survival_round_2_initial_wave squad type3",
		"survival_round_2_initial_wave squad type4",
		"survival_round_2_initial_wave squad type5",
		"survival_round_2_initial_wave squad type6",
		"survival_round_2_initial_wave squad type7",
		"survival_round_2_initial_wave squad type8",
		"survival_round_2_initial_wave squad type9",
		"survival_round_2_initial_wave squad type10",
		"survival_round_2_initial_wave squad type11",
		"survival round_2_primary_wave delivered via dropship",
		"survival round_2_primary_wave wave squad advance type",
		"survival_round_2_primary_wave squad type0",
		"survival_round_2_primary_wave squad type1",
		"survival_round_2_primary_wave squad type2",
		"survival_round_2_primary_wave squad type3",
		"survival_round_2_primary_wave squad type4",
		"survival_round_2_primary_wave squad type5",
		"survival_round_2_primary_wave squad type6",
		"survival_round_2_primary_wave squad type7",
		"survival_round_2_primary_wave squad type8",
		"survival_round_2_primary_wave squad type9",
		"survival_round_2_primary_wave squad type10",
		"survival_round_2_primary_wave squad type11",
		"survival round_2_boss_wave delivered via dropship",
		"survival round_2_boss_wave wave squad advance type",
		"survival_round_2_boss_wave squad type0",
		"survival_round_2_boss_wave squad type1",
		"survival_round_2_boss_wave squad type2",
		"survival_round_2_boss_wave squad type3",
		"survival_round_2_boss_wave squad type4",
		"survival_round_2_boss_wave squad type5",
		"survival_round_2_boss_wave squad type6",
		"survival_round_2_boss_wave squad type7",
		"survival_round_2_boss_wave squad type8",
		"survival_round_2_boss_wave squad type9",
		"survival_round_2_boss_wave squad type10",
		"survival_round_2_boss_wave squad type11",
		"survival bonus_wave duration",
		"survival_bonus_wave skull0",
		"survival_bonus_wave skull1",
		"survival_bonus_wave skull2",
		"survival_bonus_wave skull3",
		"survival_bonus_wave skull4",
		"survival_bonus_wave skull5",
		"survival_bonus_wave skull6",
		"survival_bonus_wave skull7",
		"survival_bonus_wave skull8",
		"survival_bonus_wave skull9",
		"survival_bonus_wave skull10",
		"survival_bonus_wave skull11",
		"survival_bonus_wave skull12",
		"survival_bonus_wave skull13",
		"survival_bonus_wave skull14",
		"survival_bonus_wave skull15",
		"survival_bonus_wave skull16",
		"survival_bonus_wave skull17",
		"survival bonus_wave delivered via dropship",
		"survival bonus_wave wave squad advance type",
		"survival_bonus_wave squad type0",
		"survival_bonus_wave squad type1",
		"survival_bonus_wave squad type2",
		"survival_bonus_wave squad type3",
		"survival_bonus_wave squad type4",
		"survival_bonus_wave squad type5",
		"survival_bonus_wave squad type6",
		"survival_bonus_wave squad type7",
		"survival_bonus_wave squad type8",
		"survival_bonus_wave squad type9",
		"survival_bonus_wave squad type10",
		"survival_bonus_wave squad type11",
		"red_skull_ai_traits vision",
		"red_skull_ai_traits hearing",
		"red_skull_ai_traits luck",
		"red_skull_ai_traits weapon",
		"red_skull_ai_traits grenades",
		"red_skull_ai_traits equipment drop",
		"red_skull_ai_traits ai assassination immunity",
		"red_skull_ai_traits ai headshot immunity",
		"red_skull_ai_traits ai damage resistance",
		"red_skull_ai_traits ai damage modifier",
		"yellow_skull_ai_traits vision",
		"yellow_skull_ai_traits hearing",
		"yellow_skull_ai_traits luck",
		"yellow_skull_ai_traits weapon",
		"yellow_skull_ai_traits grenades",
		"yellow_skull_ai_traits equipment drop",
		"yellow_skull_ai_traits ai assassination immunity",
		"yellow_skull_ai_traits ai headshot immunity",
		"yellow_skull_ai_traits ai damage resistance",
		"yellow_skull_ai_traits ai damage modifier",
		"blue_skull_ai_traits vision",
		"blue_skull_ai_traits hearing",
		"blue_skull_ai_traits luck",
		"blue_skull_ai_traits weapon",
		"blue_skull_ai_traits grenades",
		"blue_skull_ai_traits equipment drop",
		"blue_skull_ai_traits ai assassination immunity",
		"blue_skull_ai_traits ai headshot immunity",
		"blue_skull_ai_traits ai damage resistance",
		"blue_skull_ai_traits ai damage modifier",
		"survival_round_template skull0",
		"survival_round_template skull1",
		"survival_round_template skull2",
		"survival_round_template skull3",
		"survival_round_template skull4",
		"survival_round_template skull5",
		"survival_round_template skull6",
		"survival_round_template skull7",
		"survival_round_template skull8",
		"survival_round_template skull9",
		"survival_round_template skull10",
		"survival_round_template skull11",
		"survival_round_template skull12",
		"survival_round_template skull13",
		"survival_round_template skull14",
		"survival_round_template skull15",
		"survival_round_template skull16",
		"survival_round_template skull17",
		"survival round_template_initial_wave delivered via dropship",
		"survival round_template_initial_wave wave squad advance type",
		"survival_round_template_initial_wave squad type0",
		"survival_round_template_initial_wave squad type1",
		"survival_round_template_initial_wave squad type2",
		"survival_round_template_initial_wave squad type3",
		"survival_round_template_initial_wave squad type4",
		"survival_round_template_initial_wave squad type5",
		"survival_round_template_initial_wave squad type6",
		"survival_round_template_initial_wave squad type7",
		"survival_round_template_initial_wave squad type8",
		"survival_round_template_initial_wave squad type9",
		"survival_round_template_initial_wave squad type10",
		"survival_round_template_initial_wave squad type11",
		"survival round_template_primary_wave delivered via dropship",
		"survival round_template_primary_wave wave squad advance type",
		"survival_round_template_primary_wave squad type0",
		"survival_round_template_primary_wave squad type1",
		"survival_round_template_primary_wave squad type2",
		"survival_round_template_primary_wave squad type3",
		"survival_round_template_primary_wave squad type4",
		"survival_round_template_primary_wave squad type5",
		"survival_round_template_primary_wave squad type6",
		"survival_round_template_primary_wave squad type7",
		"survival_round_template_primary_wave squad type8",
		"survival_round_template_primary_wave squad type9",
		"survival_round_template_primary_wave squad type10",
		"survival_round_template_primary_wave squad type11",
		"survival round_template_boss_wave delivered via dropship",
		"survival round_template_boss_wave wave squad advance type",
		"survival_round_template_boss_wave squad type0",
		"survival_round_template_boss_wave squad type1",
		"survival_round_template_boss_wave squad type2",
		"survival_round_template_boss_wave squad type3",
		"survival_round_template_boss_wave squad type4",
		"survival_round_template_boss_wave squad type5",
		"survival_round_template_boss_wave squad type6",
		"survival_round_template_boss_wave squad type7",
		"survival_round_template_boss_wave squad type8",
		"survival_round_template_boss_wave squad type9",
		"survival_round_template_boss_wave squad type10",
		"survival_round_template_boss_wave squad type11",
		"custom loadouts enabled",
		"spartan loadouts enabled",
		"spartan_loadouts_tier1_loadout0 enabled",
		"spartan_loadouts_tier1_loadout0 name",
		"spartan_loadouts_tier1_loadout0 primary",
		"spartan_loadouts_tier1_loadout0 secondary",
		"spartan_loadouts_tier1_loadout0 equipment",
		"spartan_loadouts_tier1_loadout0 tactical package",
		"spartan_loadouts_tier1_loadout0 support upgrade",
		"spartan_loadouts_tier1_loadout0 grenades",
		"spartan_loadouts_tier1_loadout1 enabled",
		"spartan_loadouts_tier1_loadout1 name",
		"spartan_loadouts_tier1_loadout1 primary",
		"spartan_loadouts_tier1_loadout1 secondary",
		"spartan_loadouts_tier1_loadout1 equipment",
		"spartan_loadouts_tier1_loadout1 tactical package",
		"spartan_loadouts_tier1_loadout1 support upgrade",
		"spartan_loadouts_tier1_loadout1 grenades",
		"spartan_loadouts_tier1_loadout2 enabled",
		"spartan_loadouts_tier1_loadout2 name",
		"spartan_loadouts_tier1_loadout2 primary",
		"spartan_loadouts_tier1_loadout2 secondary",
		"spartan_loadouts_tier1_loadout2 equipment",
		"spartan_loadouts_tier1_loadout2 tactical package",
		"spartan_loadouts_tier1_loadout2 support upgrade",
		"spartan_loadouts_tier1_loadout2 grenades",
		"spartan_loadouts_tier1_loadout3 enabled",
		"spartan_loadouts_tier1_loadout3 name",
		"spartan_loadouts_tier1_loadout3 primary",
		"spartan_loadouts_tier1_loadout3 secondary",
		"spartan_loadouts_tier1_loadout3 equipment",
		"spartan_loadouts_tier1_loadout3 tactical package",
		"spartan_loadouts_tier1_loadout3 support upgrade",
		"spartan_loadouts_tier1_loadout3 grenades",
		"spartan_loadouts_tier1_loadout4 enabled",
		"spartan_loadouts_tier1_loadout4 name",
		"spartan_loadouts_tier1_loadout4 primary",
		"spartan_loadouts_tier1_loadout4 secondary",
		"spartan_loadouts_tier1_loadout4 equipment",
		"spartan_loadouts_tier1_loadout4 tactical package",
		"spartan_loadouts_tier1_loadout4 support upgrade",
		"spartan_loadouts_tier1_loadout4 grenades",
		"spartan_loadouts_tier2_loadout0 enabled",
		"spartan_loadouts_tier2_loadout0 name",
		"spartan_loadouts_tier2_loadout0 primary",
		"spartan_loadouts_tier2_loadout0 secondary",
		"spartan_loadouts_tier2_loadout0 equipment",
		"spartan_loadouts_tier2_loadout0 tactical package",
		"spartan_loadouts_tier2_loadout0 support upgrade",
		"spartan_loadouts_tier2_loadout0 grenades",
		"spartan_loadouts_tier2_loadout1 enabled",
		"spartan_loadouts_tier2_loadout1 name",
		"spartan_loadouts_tier2_loadout1 primary",
		"spartan_loadouts_tier2_loadout1 secondary",
		"spartan_loadouts_tier2_loadout1 equipment",
		"spartan_loadouts_tier2_loadout1 tactical package",
		"spartan_loadouts_tier2_loadout1 support upgrade",
		"spartan_loadouts_tier2_loadout1 grenades",
		"spartan_loadouts_tier2_loadout2 enabled",
		"spartan_loadouts_tier2_loadout2 name",
		"spartan_loadouts_tier2_loadout2 primary",
		"spartan_loadouts_tier2_loadout2 secondary",
		"spartan_loadouts_tier2_loadout2 equipment",
		"spartan_loadouts_tier2_loadout2 tactical package",
		"spartan_loadouts_tier2_loadout2 support upgrade",
		"spartan_loadouts_tier2_loadout2 grenades",
		"spartan_loadouts_tier2_loadout3 enabled",
		"spartan_loadouts_tier2_loadout3 name",
		"spartan_loadouts_tier2_loadout3 primary",
		"spartan_loadouts_tier2_loadout3 secondary",
		"spartan_loadouts_tier2_loadout3 equipment",
		"spartan_loadouts_tier2_loadout3 tactical package",
		"spartan_loadouts_tier2_loadout3 support upgrade",
		"spartan_loadouts_tier2_loadout3 grenades",
		"spartan_loadouts_tier2_loadout4 enabled",
		"spartan_loadouts_tier2_loadout4 name",
		"spartan_loadouts_tier2_loadout4 primary",
		"spartan_loadouts_tier2_loadout4 secondary",
		"spartan_loadouts_tier2_loadout4 equipment",
		"spartan_loadouts_tier2_loadout4 tactical package",
		"spartan_loadouts_tier2_loadout4 support upgrade",
		"spartan_loadouts_tier2_loadout4 grenades",
		"spartan_loadouts_tier3_loadout0 enabled",
		"spartan_loadouts_tier3_loadout0 name",
		"spartan_loadouts_tier3_loadout0 primary",
		"spartan_loadouts_tier3_loadout0 secondary",
		"spartan_loadouts_tier3_loadout0 equipment",
		"spartan_loadouts_tier3_loadout0 tactical package",
		"spartan_loadouts_tier3_loadout0 support upgrade",
		"spartan_loadouts_tier3_loadout0 grenades",
		"spartan_loadouts_tier3_loadout1 enabled",
		"spartan_loadouts_tier3_loadout1 name",
		"spartan_loadouts_tier3_loadout1 primary",
		"spartan_loadouts_tier3_loadout1 secondary",
		"spartan_loadouts_tier3_loadout1 equipment",
		"spartan_loadouts_tier3_loadout1 tactical package",
		"spartan_loadouts_tier3_loadout1 support upgrade",
		"spartan_loadouts_tier3_loadout1 grenades",
		"spartan_loadouts_tier3_loadout2 enabled",
		"spartan_loadouts_tier3_loadout2 name",
		"spartan_loadouts_tier3_loadout2 primary",
		"spartan_loadouts_tier3_loadout2 secondary",
		"spartan_loadouts_tier3_loadout2 equipment",
		"spartan_loadouts_tier3_loadout2 tactical package",
		"spartan_loadouts_tier3_loadout2 support upgrade",
		"spartan_loadouts_tier3_loadout2 grenades",
		"spartan_loadouts_tier3_loadout3 enabled",
		"spartan_loadouts_tier3_loadout3 name",
		"spartan_loadouts_tier3_loadout3 primary",
		"spartan_loadouts_tier3_loadout3 secondary",
		"spartan_loadouts_tier3_loadout3 equipment",
		"spartan_loadouts_tier3_loadout3 tactical package",
		"spartan_loadouts_tier3_loadout3 support upgrade",
		"spartan_loadouts_tier3_loadout3 grenades",
		"spartan_loadouts_tier3_loadout4 enabled",
		"spartan_loadouts_tier3_loadout4 name",
		"spartan_loadouts_tier3_loadout4 primary",
		"spartan_loadouts_tier3_loadout4 secondary",
		"spartan_loadouts_tier3_loadout4 equipment",
		"spartan_loadouts_tier3_loadout4 tactical package",
		"spartan_loadouts_tier3_loadout4 support upgrade",
		"spartan_loadouts_tier3_loadout4 grenades",
		"elite loadouts enabled",
		"elite_loadouts_tier1_loadout0 enabled",
		"elite_loadouts_tier1_loadout0 name",
		"elite_loadouts_tier1_loadout0 primary",
		"elite_loadouts_tier1_loadout0 secondary",
		"elite_loadouts_tier1_loadout0 equipment",
		"elite_loadouts_tier1_loadout0 tactical package",
		"elite_loadouts_tier1_loadout0 support upgrade",
		"elite_loadouts_tier1_loadout0 grenades",
		"elite_loadouts_tier1_loadout1 enabled",
		"elite_loadouts_tier1_loadout1 name",
		"elite_loadouts_tier1_loadout1 primary",
		"elite_loadouts_tier1_loadout1 secondary",
		"elite_loadouts_tier1_loadout1 equipment",
		"elite_loadouts_tier1_loadout1 tactical package",
		"elite_loadouts_tier1_loadout1 support upgrade",
		"elite_loadouts_tier1_loadout1 grenades",
		"elite_loadouts_tier1_loadout2 enabled",
		"elite_loadouts_tier1_loadout2 name",
		"elite_loadouts_tier1_loadout2 primary",
		"elite_loadouts_tier1_loadout2 secondary",
		"elite_loadouts_tier1_loadout2 equipment",
		"elite_loadouts_tier1_loadout2 tactical package",
		"elite_loadouts_tier1_loadout2 support upgrade",
		"elite_loadouts_tier1_loadout2 grenades",
		"elite_loadouts_tier1_loadout3 enabled",
		"elite_loadouts_tier1_loadout3 name",
		"elite_loadouts_tier1_loadout3 primary",
		"elite_loadouts_tier1_loadout3 secondary",
		"elite_loadouts_tier1_loadout3 equipment",
		"elite_loadouts_tier1_loadout3 tactical package",
		"elite_loadouts_tier1_loadout3 support upgrade",
		"elite_loadouts_tier1_loadout3 grenades",
		"elite_loadouts_tier1_loadout4 enabled",
		"elite_loadouts_tier1_loadout4 name",
		"elite_loadouts_tier1_loadout4 primary",
		"elite_loadouts_tier1_loadout4 secondary",
		"elite_loadouts_tier1_loadout4 equipment",
		"elite_loadouts_tier1_loadout4 tactical package",
		"elite_loadouts_tier1_loadout4 support upgrade",
		"elite_loadouts_tier1_loadout4 grenades",
		"elite_loadouts_tier2_loadout0 enabled",
		"elite_loadouts_tier2_loadout0 name",
		"elite_loadouts_tier2_loadout0 primary",
		"elite_loadouts_tier2_loadout0 secondary",
		"elite_loadouts_tier2_loadout0 equipment",
		"elite_loadouts_tier2_loadout0 tactical package",
		"elite_loadouts_tier2_loadout0 support upgrade",
		"elite_loadouts_tier2_loadout0 grenades",
		"elite_loadouts_tier2_loadout1 enabled",
		"elite_loadouts_tier2_loadout1 name",
		"elite_loadouts_tier2_loadout1 primary",
		"elite_loadouts_tier2_loadout1 secondary",
		"elite_loadouts_tier2_loadout1 equipment",
		"elite_loadouts_tier2_loadout1 tactical package",
		"elite_loadouts_tier2_loadout1 support upgrade",
		"elite_loadouts_tier2_loadout1 grenades",
		"elite_loadouts_tier2_loadout2 enabled",
		"elite_loadouts_tier2_loadout2 name",
		"elite_loadouts_tier2_loadout2 primary",
		"elite_loadouts_tier2_loadout2 secondary",
		"elite_loadouts_tier2_loadout2 equipment",
		"elite_loadouts_tier2_loadout2 tactical package",
		"elite_loadouts_tier2_loadout2 support upgrade",
		"elite_loadouts_tier2_loadout2 grenades",
		"elite_loadouts_tier2_loadout3 enabled",
		"elite_loadouts_tier2_loadout3 name",
		"elite_loadouts_tier2_loadout3 primary",
		"elite_loadouts_tier2_loadout3 secondary",
		"elite_loadouts_tier2_loadout3 equipment",
		"elite_loadouts_tier2_loadout3 tactical package",
		"elite_loadouts_tier2_loadout3 support upgrade",
		"elite_loadouts_tier2_loadout3 grenades",
		"elite_loadouts_tier2_loadout4 enabled",
		"elite_loadouts_tier2_loadout4 name",
		"elite_loadouts_tier2_loadout4 primary",
		"elite_loadouts_tier2_loadout4 secondary",
		"elite_loadouts_tier2_loadout4 equipment",
		"elite_loadouts_tier2_loadout4 tactical package",
		"elite_loadouts_tier2_loadout4 support upgrade",
		"elite_loadouts_tier2_loadout4 grenades",
		"elite_loadouts_tier3_loadout0 enabled",
		"elite_loadouts_tier3_loadout0 name",
		"elite_loadouts_tier3_loadout0 primary",
		"elite_loadouts_tier3_loadout0 secondary",
		"elite_loadouts_tier3_loadout0 equipment",
		"elite_loadouts_tier3_loadout0 tactical package",
		"elite_loadouts_tier3_loadout0 support upgrade",
		"elite_loadouts_tier3_loadout0 grenades",
		"elite_loadouts_tier3_loadout1 enabled",
		"elite_loadouts_tier3_loadout1 name",
		"elite_loadouts_tier3_loadout1 primary",
		"elite_loadouts_tier3_loadout1 secondary",
		"elite_loadouts_tier3_loadout1 equipment",
		"elite_loadouts_tier3_loadout1 tactical package",
		"elite_loadouts_tier3_loadout1 support upgrade",
		"elite_loadouts_tier3_loadout1 grenades",
		"elite_loadouts_tier3_loadout2 enabled",
		"elite_loadouts_tier3_loadout2 name",
		"elite_loadouts_tier3_loadout2 primary",
		"elite_loadouts_tier3_loadout2 secondary",
		"elite_loadouts_tier3_loadout2 equipment",
		"elite_loadouts_tier3_loadout2 tactical package",
		"elite_loadouts_tier3_loadout2 support upgrade",
		"elite_loadouts_tier3_loadout2 grenades",
		"elite_loadouts_tier3_loadout3 enabled",
		"elite_loadouts_tier3_loadout3 name",
		"elite_loadouts_tier3_loadout3 primary",
		"elite_loadouts_tier3_loadout3 secondary",
		"elite_loadouts_tier3_loadout3 equipment",
		"elite_loadouts_tier3_loadout3 tactical package",
		"elite_loadouts_tier3_loadout3 support upgrade",
		"elite_loadouts_tier3_loadout3 grenades",
		"elite_loadouts_tier3_loadout4 enabled",
		"elite_loadouts_tier3_loadout4 name",
		"elite_loadouts_tier3_loadout4 primary",
		"elite_loadouts_tier3_loadout4 secondary",
		"elite_loadouts_tier3_loadout4 equipment",
		"elite_loadouts_tier3_loadout4 tactical package",
		"elite_loadouts_tier3_loadout4 support upgrade",
		"elite_loadouts_tier3_loadout4 grenades",
		"ordnance initial drops enabled",
		"ordnance random drops enabled",
		"ordnance objective drops enabled",
		"ordnance player drops enabled",
		"ordnance non-player drops enabled",
		"map loadouts enabled",
		"ordnance random drop minimum delay",
		"ordnance random drop maximum delay",
		"ordnance cost",
		"ordnance cost multiplier",
		"custom player ordnance",
		"right_slot1 type_name",
		"right_slot1 weight",
		"right_slot2 type_name",
		"right_slot2 weight",
		"right_slot3 type_name",
		"right_slot3 weight",
		"right_slot4 type_name",
		"right_slot4 weight",
		"right_slot5 type_name",
		"right_slot5 weight",
		"right_slot6 type_name",
		"right_slot6 weight",
		"right_slot7 type_name",
		"right_slot7 weight",
		"right_slot8 type_name",
		"right_slot8 weight",
		"left_slot1 type_name",
		"left_slot1 weight",
		"left_slot2 type_name",
		"left_slot2 weight",
		"left_slot3 type_name",
		"left_slot3 weight",
		"left_slot4 type_name",
		"left_slot4 weight",
		"left_slot5 type_name",
		"left_slot5 weight",
		"left_slot6 type_name",
		"left_slot6 weight",
		"left_slot7 type_name",
		"left_slot7 weight",
		"left_slot8 type_name",
		"left_slot8 weight",
		"down_slot1 type_name",
		"down_slot1 weight",
		"down_slot2 type_name",
		"down_slot2 weight",
		"down_slot3 type_name",
		"down_slot3 weight",
		"down_slot4 type_name",
		"down_slot4 weight",
		"down_slot5 type_name",
		"down_slot5 weight",
		"down_slot6 type_name",
		"down_slot6 weight",
		"down_slot7 type_name",
		"down_slot7 weight",
		"down_slot8 type_name",
		"down_slot8 weight",
		"ordnance remapping table",
		"template player trait damage resistance",
		"template player trait shield multiplier",
		"template player trait body multiplier",
		"template player trait shield stun duration",
		"template player trait shield recharge rate",
		"template player trait body recharge rate",
		"template player trait overshield recharge rate",
		"template player trait vampirism percent",
		"template player trait explosive damage resistance",
		"template player trait wheelman armor vehicle stun time modifier",
		"template player trait wheelman armor vehicle recharge time modifier",
		"template player trait wheelman armor vehicle emp disabled time modifier",
		"template player trait fall damage multiplier",
		"template player trait headshot immunity",
		"template player trait assassination immunity",
		"template player trait deathless",
		"template player trait fast track armor",
		"template player trait powerup cancellation",
		"template player trait damage multiplier",
		"template player trait melee damage multiplier",
		"template player trait grenade recharge seconds frag",
		"template player trait grenade recharge seconds plasma",
		"template player trait grenade recharge seconds spike",
		"template player trait hero equipment energy use rate modifier",
		"template player trait hero equipment energy recharge delay modifier",
		"template player trait hero equipment energy recharge rate modifier",
		"template player trait hero equipment initial energy modifier",
		"template player trait equipment energy use rate modifier",
		"template player trait equipment energy recharge delay modifier",
		"template player trait equipment energy use recharge rate modifier",
		"template player trait equipment energy initial energy modifier",
		"template player trait switch speed modifier",
		"template player trait reload speed modifier",
		"template player trait ordnance points modifier",
		"template player trait explosive area of effect radius modifier",
		"template player trait gunner armor modifier",
		"template player trait stability armor modifier",
		"template player trait drop recon warning seconds",
		"template player trait drop recon distance modifier",
		"template player trait assassination speed modifier",
		"template player trait weapon pickup allowed",
		"template player trait initial grenade count",
		"template player trait infinite ammo",
		"template player trait equipment usage",
		"template player trait equipment usage excepting auto turret",
		"template player trait equipment drop",
		"template player trait infinite equipment",
		"template player trait initial primary weapon",
		"template player trait initial secondary weapon",
		"template player trait initial equipment",
		"template player trait initial tactical package",
		"template player trait initial support upgrade",
		"template player trait weapons ammopack",
		"template player trait weapons grenadier",
		"template player trait weapons explode on death armormod",
		"template player trait ordnance markers visible",
		"template player trait weapons ordnance reroll available",
		"template player trait weapons resourceful",
		"template player trait weapons well equipped",
		"template player trait ordnance disabled",
		"template player trait speed",
		"template player trait gravity multiplier",
		"template player trait jump multiplier",
		"template player trait turn speed multiplier",
		"template player trait vehicle usage",
		"template player trait double jump",
		"template player trait sprint usage",
		"template player trait automatic momentum usage",
		"template player trait vaulting enabled",
		"template player trait stealthy",
		"template player trait player scale",
		"template player trait active camo",
		"template player trait waypoint",
		"template player trait gamertag visible",
		"template player trait aura",
		"template player trait primary color",
		"template player trait secondary color",
		"template player trait model variant",
		"template player trait death effect",
		"template player trait looping effect",
		"template player trait shield hud",
		"motion tracker range",
		"nemesis duration",
		"template player trait motion tracker",
		"template player trait motion tracker while zoomed",
		"template player trait directional damage indicator",
		"template player trait vision mode",
		"template player trait battle awareness",
		"template player trait threat view",
		"template player trait aural enhancement",
		"template player trait nemesis"
	};
	STRING_LIST(game_variant_parameters, game_variant_parameters_strings, _countof(game_variant_parameters_strings));

	#define TEXT_VALUE_PAIR_REFERENCE_BLOCK_ID { 0xF7AE82B9, 0xCEA54D49, 0xABC02F9F, 0x5AB01E19 }
	TAG_STRUCT(
		text_value_pair_reference_block,
		"text_value_pair_reference_block",
		"text_value_pair_reference_block",
		"s_text_value_pair_reference_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TEXT_VALUE_PAIR_REFERENCE_BLOCK_ID)
	{
		{ _field_byte_flags, "flags", &text_value_pair_flags },
		FIELD_PAD("grug", 3),
		{ _field_long_integer, "enumerated value" },
		{ _field_real, "real value" },
		{ _field_string_id, "string_id value" },
		{ _field_string_id, "label string id" },
		{ _field_string_id, "description string id" },
		{ _field_terminator }
	};

	STRINGS(text_value_pair_flags)
	{
		"default setting",
		"real value \"unchanged\""
	};
	STRING_LIST(text_value_pair_flags, text_value_pair_flags_strings, _countof(text_value_pair_flags_strings));

	#define TINT_COLORS_BLOCK_ID { 0x60C481EE, 0x800046A2, 0x8304DA08, 0xAC51C372 }
	TAG_STRUCT(
		tint_colors_block,
		"tint_colors_block",
		"tint_colors_block",
		"s_tint_colors_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TINT_COLORS_BLOCK_ID)
	{
		{ _field_block, "text player", &color_list_block_block },
		{ _field_block, "text team", &color_list_block_block },
		{ _field_block, "bitmap player", &color_list_block_block },
		{ _field_block, "bitmap team", &color_list_block_block },
		FIELD_GROUP_BEGIN("Affiliation"),
		{ _field_real_argb_color, "bitmap friend" },
		{ _field_real_argb_color, "bitmap enemy" },
		{ _field_real_argb_color, "bitmap neutral" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Flood Team Colors"),
		{ _field_real_argb_color, "bitmap flood" },
		{ _field_real_argb_color, "bitmap spartans" },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define TORQUE_CURVE_STRUCT_ID { 0xA1B86A30, 0x21864A2C, 0xB26E5CA6, 0xF2DB9FC3 }
	TAG_STRUCT(
		torque_curve_struct,
		"torque_curve_struct",
		"torque_curve_struct",
		"s_torque_curve_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TORQUE_CURVE_STRUCT_ID)
	{
		{ _field_struct, "function", &scalar_function_named_struct },
		{ _field_terminator }
	};

	#define TORQUE_CURVE_STRUCT$2_ID { 0x1AFF241A, 0xC474D3C, 0xA9BBEF06, 0xE9734D22 }
	TAG_STRUCT(
		torque_curve_struct$2,
		"torque_curve_struct",
		"torque_curve_struct",
		"s_torque_curve_struct$2",
		SET_UNKNOWN4 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TORQUE_CURVE_STRUCT$2_ID)
	{
		{ _field_real, "min torque" },
		{ _field_real, "max torque" },
		{ _field_real, "peak torque scale" },
		{ _field_real, "past peak torque exponent" },
		{ _field_real, "torque at max angular velocity", "generally 0 for loading torque and something less than max torque for cruising torque" },
		{ _field_real, "torque at 2x max angular velocity" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_terminator }
	};

	#define TRACERDEFINITIONBLOCK_ID { 0x81823DCD, 0xDFAE42E3, 0xA663A919, 0xB715B497 }
	TAG_STRUCT(
		tracerdefinitionblock,
		"tracerDefinitionBlock",
		"tracerDefinitionBlock",
		"s_tracerdefinitionblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRACERDEFINITIONBLOCK_ID)
	{
		FIELD_IFP_BEGIN(),
		{ _field_string_id, "tracer name" },
		{ _field_byte_flags, "flags", &tracerflags },
		FIELD_GROUP_BEGIN("Tracer Shape"),
		{ _field_char_enum, "profile shape", &tracerprofileshapeenum },
		{ _field_byte_integer, "number of n-gon sides" },
		FIELD_PAD("tracpad", 1),
		{ _field_real, "origin fade range", "distance beyond cutoff over which tracers fade", "world units", MAKE_ALT_NAMES("origin fade distance") },
		{ _field_real, "origin fade cutoff", "distance from tracer origin where fade begins", "world units" },
		{ _field_real, "edge fade range", "degrees beyond cutoff over which tracers fade", "degrees" },
		{ _field_real, "edge fade cutoff", "degrees away from edge-on where fade is total", "degrees" },
		{ _field_struct, "profile lifespan", "seconds", &tracerproperty_real_struct },
		{ _field_struct, "profile self acceleration", "world units per second-squared", &tracerproperty_real_vector3d_struct },
		{ _field_struct, "length", "world units", &tracerproperty_real_struct },
		{ _field_struct, "offset", "world units", &tracerproperty_real_struct },
		{ _field_struct, "profile size", "world units", &tracerproperty_real_struct },
		{ _field_struct, "profile density", "profiles per world unit", &tracerproperty_real_struct },
		{ _field_struct, "profile offset", "world units", &tracerproperty_real_point2d_struct },
		{ _field_struct, "profile rotation", "degrees", &tracerproperty_real_struct },
		{ _field_struct, "profile rotation rate", "degrees per second", &tracerproperty_real_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Tracer Appearance"),
		{ _field_word_flags, "appearance flags", &tracerappearanceflags },
		{ _field_short_integer, "sort bias", "use values between -10 and 10 to move closer and farther from camera (positive is closer)" },
		FIELD_CUSTOM("material", _tag_field_custom_type_tag_group_template),
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "actual material?", &material_struct },
		FIELD_HIDE_END(),
		{ _field_real_vector_2d, "uv tiling", "u is tiles/world unit, v is absolute tiles", "u lengthwise, v crosswise" },
		{ _field_real_vector_2d, "uv scrolling", nullptr, "tiles per second" },
		{ _field_real, "angle fade range", "radial (from tracer axis) degrees beyond beginning angle over which tracer fades", "degrees" },
		{ _field_real, "angle fade begin", "radial (from tracer axis) degrees away from face-on where fade begins", "degrees" },
		{ _field_struct, "profile color", &tracerproperty_real_rgb_color_struct },
		{ _field_struct, "profile alpha", &tracerproperty_real_struct },
		{ _field_struct, "profile alpha2", &tracerproperty_real_struct },
		{ _field_struct, "profile black point", &tracerproperty_real_struct },
		{ _field_struct, "profile palette", &tracerproperty_real_struct },
		{ _field_struct, "profile intensity", &tracerproperty_real_struct },
		FIELD_GROUP_END(),
		FIELD_IFP_END(),
		{ _field_dword_integer, "runtime m_constantPerProfileProperties" },
		{ _field_dword_integer, "runtime m_usedStates" },
		{ _field_dword_integer, "runtime m_maxProfileCount" },
		{ _field_struct, "runtime m_gpuData", &gpu_property_function_color_struct },
		{ _field_terminator }
	};

	STRINGS(tracerflags)
	{
		"disabled for debugging"
	};
	STRING_LIST(tracerflags, tracerflags_strings, _countof(tracerflags_strings));

	STRINGS(tracerprofileshapeenum)
	{
		"aligned ribbon",
		"cross",
		"n-gon",
		"horizontal",
		"vertical"
	};
	STRING_LIST(tracerprofileshapeenum, tracerprofileshapeenum_strings, _countof(tracerprofileshapeenum_strings));

	STRINGS(tracerappearanceflags)
	{
		"tint from lightmap",
		"double-sided",
		"profile opacity from scale a",
		"random u offset",
		"random v offset",
		"can render low res"
	};
	STRING_LIST(tracerappearanceflags, tracerappearanceflags_strings, _countof(tracerappearanceflags_strings));

	#define TRACERPROPERTY_REAL_STRUCT_ID { 0x91513A4E, 0x20A34CBB, 0x9722BA95, 0x3B66FE62 }
	TAG_STRUCT(
		tracerproperty_real_struct,
		"tracerProperty_real_Struct",
		"tracerProperty_real_Struct",
		"s_tracerproperty_real_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRACERPROPERTY_REAL_STRUCT_ID)
	{
		{ _field_char_enum, "Input Variable", &tracerstateinputenum, _field_id_function_input_scalar },
		{ _field_char_enum, "Range Variable", &tracerstateinputenum, _field_id_function_input_range },
		{ _field_char_enum, "Output Modifier", &tracerstateoutputmodenum, _field_id_function_output_modifier },
		{ _field_char_enum, "Output Modifier Input", &tracerstateinputenum, _field_id_function_output_modifier_input },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_real, "runtime m_constant_value" },
		{ _field_word_integer, "runtime m_flags" },
		FIELD_PAD("DSFDSGLKJ", 2),
		{ _field_terminator }
	};

	STRINGS(tracerstateinputenum)
	{
		"profile age",
		"profile position",
		"unused",
		"profile random",
		"profile correlation 1",
		"profile correlation 2",
		"profile correlation 3",
		"profile correlation 4",
		"game time",
		"tracer random",
		"tracer correlation 1",
		"tracer correlation 2",
		"tracer speed",
		"tracer length",
		"system age",
		"system lod",
		"effect a scale",
		"effect b scale",
		"invalid state --- please set again"
	};
	STRING_LIST(tracerstateinputenum, tracerstateinputenum_strings, _countof(tracerstateinputenum_strings));

	STRINGS(tracerstateoutputmodenum)
	{
		" ",
		"Plus",
		"Times"
	};
	STRING_LIST(tracerstateoutputmodenum, tracerstateoutputmodenum_strings, _countof(tracerstateoutputmodenum_strings));

	#define TRACERPROPERTY_REAL_POINT2D_STRUCT_ID { 0x837F421, 0x9742425D, 0xB30CA589, 0xDC66361 }
	TAG_STRUCT(
		tracerproperty_real_point2d_struct,
		"tracerProperty_real_point2d_Struct",
		"tracerProperty_real_point2d_Struct",
		"s_tracerproperty_real_point2d_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRACERPROPERTY_REAL_POINT2D_STRUCT_ID)
	{
		{ _field_char_enum, "Input Variable", &tracerstateinputenum, _field_id_function_input_scalar },
		{ _field_char_enum, "Range Variable", &tracerstateinputenum, _field_id_function_input_range },
		{ _field_char_enum, "Output Modifier", &tracerstateoutputmodenum, _field_id_function_output_modifier },
		{ _field_char_enum, "Output Modifier Input", &tracerstateinputenum, _field_id_function_output_modifier_input },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_real, "runtime m_constant_value" },
		{ _field_word_integer, "runtime m_flags" },
		FIELD_PAD("DSFDSGLKJ", 2),
		{ _field_real_vector_2d, "Starting interpolant" },
		{ _field_real_vector_2d, "Ending interpolant" },
		{ _field_terminator }
	};

	#define TRACERPROPERTY_REAL_RGB_COLOR_STRUCT_ID { 0xFD7B022D, 0xC01E4F52, 0x9D862B19, 0xC6CBF906 }
	TAG_STRUCT(
		tracerproperty_real_rgb_color_struct,
		"tracerProperty_real_rgb_color_Struct",
		"tracerProperty_real_rgb_color_Struct",
		"s_tracerproperty_real_rgb_color_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRACERPROPERTY_REAL_RGB_COLOR_STRUCT_ID)
	{
		{ _field_char_enum, "Input Variable", &tracerstateinputenum, _field_id_function_input_scalar },
		{ _field_char_enum, "Range Variable", &tracerstateinputenum, _field_id_function_input_range },
		{ _field_char_enum, "Output Modifier", &tracerstateoutputmodenum, _field_id_function_output_modifier },
		{ _field_char_enum, "Output Modifier Input", &tracerstateinputenum, _field_id_function_output_modifier_input },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_real, "runtime m_constant_value" },
		{ _field_word_integer, "runtime m_flags" },
		FIELD_PAD("DSFDSGLKJ", 2),
		{ _field_terminator }
	};

	#define TRACERPROPERTY_REAL_VECTOR3D_STRUCT_ID { 0xBE4687B3, 0xC8B74B16, 0x86F2D1AC, 0x27137B34 }
	TAG_STRUCT(
		tracerproperty_real_vector3d_struct,
		"tracerProperty_real_vector3d_Struct",
		"tracerProperty_real_vector3d_Struct",
		"s_tracerproperty_real_vector3d_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRACERPROPERTY_REAL_VECTOR3D_STRUCT_ID)
	{
		{ _field_char_enum, "Input Variable", &tracerstateinputenum, _field_id_function_input_scalar },
		{ _field_char_enum, "Range Variable", &tracerstateinputenum, _field_id_function_input_range },
		{ _field_char_enum, "Output Modifier", &tracerstateoutputmodenum, _field_id_function_output_modifier },
		{ _field_char_enum, "Output Modifier Input", &tracerstateinputenum, _field_id_function_output_modifier_input },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_real, "runtime m_constant_value" },
		{ _field_word_integer, "runtime m_flags" },
		FIELD_PAD("DSFDSGLKJ", 2),
		{ _field_real_vector_3d, "Starting interpolant" },
		{ _field_real_vector_3d, "Ending interpolant" },
		{ _field_terminator }
	};

	#define TRACER_SYSTEM_STRUCT_DEFINITION_ID { 0xD599167D, 0x903449CE, 0x94785CCF, 0x2DF03016 }
	TAG_STRUCT(
		tracer_system_struct_definition,
		"tracer_system_struct_definition",
		"tracer_system_struct_definition",
		"s_tracer_system_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRACER_SYSTEM_STRUCT_DEFINITION_ID)
	{
		{ _field_long_flags, "tracer system flags", &tracersystemflags },
		FIELD_EXPLANATION("far lod", "These don\'t actually do anything unless you use \"tracer lod\" in one of your curves."),
		{ _field_real, "far lod start" },
		{ _field_real, "far lod end" },
		{ _field_real, "far lod start value" },
		{ _field_real, "far lod end value" },
		{ _field_block, "tracers", &tracerdefinitionblock_block },
		{ _field_terminator }
	};

	STRINGS(tracersystemflags)
	{
		"point-to-point#skips the update step, and ignores lifespan, for point-to-point effects",
		"draw in first person pass (dangerous)#use this only if the entire tracer is in \"first person space\"; can lead to depth artifacts if misused",
		"disable when zoomed"
	};
	STRING_LIST(tracersystemflags, tracersystemflags_strings, _countof(tracersystemflags_strings));

	#define TRACKING_TYPE_BLOCK_ID { 0x1E369AD6, 0x88C043A0, 0xAA0A675A, 0xE3762650 }
	TAG_STRUCT(
		tracking_type_block,
		"tracking_type_block",
		"tracking_type_block",
		"s_tracking_type_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRACKING_TYPE_BLOCK_ID)
	{
		{ _field_string_id, "tracking type" },
		{ _field_terminator }
	};

	#define TRANSPARENT_PLANES_BLOCK_ID { 0xB66CE451, 0x57AE4DC8, 0xB204270D, 0x7A9412F }
	TAG_STRUCT(
		transparent_planes_block,
		"transparent_planes_block",
		"transparent_planes_block",
		"s_transparent_planes_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRANSPARENT_PLANES_BLOCK_ID)
	{
		{ _field_short_integer, "section index" },
		{ _field_short_integer, "part index" },
		{ _field_real_plane_3d, "plane" },
		{ _field_terminator }
	};

	#define TRIANGLE_MAPPING_BLOCK_ID { 0xE555CA90, 0xD7984A4D, 0xA70E7F34, 0xD97143EE }
	TAG_STRUCT(
		triangle_mapping_block,
		"triangle_mapping_block",
		"triangle_mapping_block",
		"s_triangle_mapping_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRIANGLE_MAPPING_BLOCK_ID)
	{
		{ _field_long_integer, "word" },
		{ _field_terminator }
	};

	#define TRIANGLE_MAPPING_PER_MESH_BLOCK_ID { 0x662F1A28, 0xCF484602, 0x8BA6B022, 0x563BAA22 }
	TAG_STRUCT(
		triangle_mapping_per_mesh_block,
		"triangle_mapping_per_mesh_block",
		"triangle_mapping_per_mesh_block",
		"s_triangle_mapping_per_mesh_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRIANGLE_MAPPING_PER_MESH_BLOCK_ID)
	{
		{ _field_block, "mesh", &triangle_mapping_block_block },
		{ _field_terminator }
	};

	#define TRIANGLES_BLOCK_STRUCT_ID { 0x28B29A3B, 0x475246DE, 0xA5371B35, 0x9316A629 }
	TAG_STRUCT(
		triangles_block_struct,
		"triangles_block_struct",
		"triangles_block_struct",
		"s_triangles_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRIANGLES_BLOCK_STRUCT_ID,
		4)
	{
		{ _field_struct, "base", &havok_primitive_struct },
		{ _field_struct, "triangle shape", &havok_convex_shape_struct_2010_2 },
		{ _field_short_integer, "welding info" },
		{ _field_char_integer, "welding type" },
		{ _field_char_integer, "is extruded" },
		FIELD_PAD("algn92", 8),
		{ _field_real_vector_3d, "point a" },
		{ _field_real, "havok w point a" },
		{ _field_real_vector_3d, "point b" },
		{ _field_real, "havok w point b" },
		{ _field_real_vector_3d, "point c" },
		{ _field_real, "havok w point c" },
		{ _field_real_vector_3d, "extrusion" },
		{ _field_real, "havok w extrusion" },
		{ _field_terminator }
	};

	#define TRIANGULATION_ENTRY_BLOCK_ID { 0x8234CC8B, 0x381A41C5, 0x89E7A030, 0xE1048287 }
	TAG_STRUCT(
		triangulation_entry_block,
		"triangulation_entry_block",
		"triangulation_entry_block",
		"s_triangulation_entry_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRIANGULATION_ENTRY_BLOCK_ID)
	{
		{ _field_block, "points", &triangulation_point_block_block },
		{ _field_block, "triangles", &triangulation_triangle_block_block },
		{ _field_terminator }
	};

	#define TRIANGULATION_POINT_BLOCK_ID { 0x71BE4C3B, 0x3051498A, 0xAF9A5CC0, 0xB1712567 }
	TAG_STRUCT(
		triangulation_point_block,
		"triangulation_point_block",
		"triangulation_point_block",
		"s_triangulation_point_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRIANGULATION_POINT_BLOCK_ID)
	{
		{ _field_real_vector_2d, "point" },
		{ _field_terminator }
	};

	#define TRIANGULATION_TRIANGLE_BLOCK_ID { 0x833E138E, 0x59ED4E6B, 0x8327B280, 0x9FAEC685 }
	TAG_STRUCT(
		triangulation_triangle_block,
		"triangulation_triangle_block",
		"triangulation_triangle_block",
		"s_triangulation_triangle_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRIANGULATION_TRIANGLE_BLOCK_ID)
	{
		{ _field_byte_integer, "vertex1" },
		{ _field_byte_integer, "vertex2" },
		{ _field_byte_integer, "vertex3" },
		{ _field_byte_integer, "link12" },
		{ _field_byte_integer, "link23" },
		{ _field_byte_integer, "link31" },
		FIELD_PAD("aaah", 2),
		{ _field_terminator }
	};

	#define TRIGGER_REFERENCES_ID { 0xE6CF862C, 0xBF56407F, 0x9FB84441, 0x14EE598E }
	TAG_STRUCT(
		trigger_references,
		"trigger_references",
		"trigger_references",
		"s_trigger_references",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRIGGER_REFERENCES_ID)
	{
		{ _field_long_flags, "Trigger flags", &trigger_ref_flags },
		{ _field_short_block_index, "trigger", &triggers_block_block },
		FIELD_PAD("LPQYXEA", 2),
		{ _field_terminator }
	};

	STRINGS(trigger_ref_flags)
	{
		"not"
	};
	STRING_LIST(trigger_ref_flags, trigger_ref_flags_strings, _countof(trigger_ref_flags_strings));

	#define TRIGGER_VOLUME_MOPP_CODE_BLOCK_ID { 0x69A0250B, 0x5B194147, 0xCD8BA5D6, 0xA1ED8CA3 }
	TAG_STRUCT(
		trigger_volume_mopp_code_block,
		"trigger_volume_mopp_code_block",
		"trigger_volume_mopp_code_block",
		"s_trigger_volume_mopp_code_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRIGGER_VOLUME_MOPP_CODE_BLOCK_ID)
	{
		{ _field_long_integer, "trigger volume checksum" },
		{ _field_block, "mopp code", &mopp_code_definition_block_block },
		{ _field_terminator }
	};

	#define TRIGGER_VOLUME_POINT_BLOCK_ID { 0xC82D658B, 0x69F41B2, 0x9F32D7A8, 0x13062FAB }
	TAG_STRUCT(
		trigger_volume_point_block,
		"trigger_volume_point_block",
		"trigger_volume_point_block",
		"s_trigger_volume_point_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRIGGER_VOLUME_POINT_BLOCK_ID)
	{
		{ _field_real_point_3d, "position" },
		{ _field_real_euler_angles_2d, "normal" },
		{ _field_terminator }
	};

	#define TRIGGER_VOLUME_RUNTIME_TRIANGLES_BLOCK_ID { 0xCAB2658B, 0x69F4165, 0x9AC2D7A8, 0x1306123B }
	TAG_STRUCT(
		trigger_volume_runtime_triangles_block,
		"trigger_volume_runtime_triangles_block",
		"trigger_volume_runtime_triangles_block",
		"s_trigger_volume_runtime_triangles_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRIGGER_VOLUME_RUNTIME_TRIANGLES_BLOCK_ID,
		4)
	{
		{ _field_real_plane_3d, "plane 0" },
		{ _field_real_plane_3d, "plane 1" },
		{ _field_real_plane_3d, "plane 2" },
		{ _field_real_plane_3d, "plane 3" },
		{ _field_real_plane_3d, "plane 4" },
		{ _field_real_point_2d, "vertex 0" },
		{ _field_real_point_2d, "vertex 1" },
		{ _field_real_point_2d, "vertex 2" },
		FIELD_PAD("pad0", 8),
		{ _field_terminator }
	};

	#define TRIGGERS_BLOCK_ID { 0xBDCE0188, 0x8F4F4836, 0xB6CB517B, 0x781A6B59 }
	TAG_STRUCT(
		triggers_block,
		"triggers_block",
		"triggers_block",
		"s_triggers_block",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TRIGGERS_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_string, "name" },
		{ _field_long_flags, "trigger flags", &trigger_flags },
		{ _field_short_enum, "combination rule", &combination_rules_enum },
		FIELD_PAD("XXCMMRUP", 2),
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "conditions", &order_completion_condition_block },
		{ _field_terminator }
	};

	STRINGS(trigger_flags)
	{
		"Latch ON when triggered"
	};
	STRING_LIST(trigger_flags, trigger_flags_strings, _countof(trigger_flags_strings));

	#define TURRET_BLOCK_ID { 0xA788CE59, 0xB2AC4121, 0xA7387B57, 0xA01A73CD }
	TAG_STRUCT(
		turret_block,
		"turret_block",
		"turret_block",
		"s_turret_block",
		SET_UNKNOWN0 | SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		TURRET_BLOCK_ID)
	{
		{ _field_word_flags, "flags", &turret_flags },
		FIELD_PAD("pad", 2),
		{ _field_string_id, "physical yaw node" },
		{ _field_string_id, "physical pitch node" },
		{ _field_string_id, "physical elevate node", "this is specificly for the wolverine which has a turret which pops up when you use it." },
		{ _field_angle, "operating elevation angle", "angle which elevate node is set to in order to operate" },
		{ _field_terminator }
	};

	STRINGS(turret_flags)
	{
		"powered by parent#this is basicly a flag for the wolverine.  This turret pops up when the wolverine activates",
		"idles in default position#this turret holds its default position instead of swinging freely when not controlled",
		"reverse yaw motor direction",
		"reverse pitch motor direction",
		"reverse elevate motor direction",
		"targetable when open"
	};
	STRING_LIST(turret_flags, turret_flags_strings, _countof(turret_flags_strings));

	#define UNDERWATER_PROXIES_BLOCK_ID { 0xAD5F9353, 0xA0B9C7A3, 0xBAA0406F, 0xC16F2653 }
	TAG_STRUCT(
		underwater_proxies_block,
		"underwater_proxies_block",
		"underwater_proxies_block",
		"s_underwater_proxies_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNDERWATER_PROXIES_BLOCK_ID)
	{
		FIELD_EXPLANATION("when this material is encounted under a material of this type ...", nullptr),
		{ _field_string_id, "underwater material" },
		FIELD_EXPLANATION("... we report it as this material", nullptr),
		{ _field_string_id, "proxy material" },
		{ _field_short_integer, "underwater material type" },
		{ _field_short_integer, "proxy material type" },
		{ _field_terminator }
	};

	#define UNDERWATER_SETTING_BLOCK_ID { 0x48C345A4, 0xB5F0449A, 0xAA54D20B, 0x1295444A }
	TAG_STRUCT(
		underwater_setting_block,
		"underwater_setting_block",
		"underwater_setting_block",
		"s_underwater_setting_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNDERWATER_SETTING_BLOCK_ID)
	{
		{ _field_string_id, "Name" },
		{ _field_real, "Murkiness" },
		{ _field_real_rgb_color, "Fog Color" },
		{ _field_terminator }
	};

	#define UNIT_ADDITIONAL_NODE_NAMES_STRUCT_ID { 0x35A19301, 0xDCF54C9C, 0x8671ED37, 0x1EF33AE5 }
	VERSIONED_TAG_STRUCT(
		unit_additional_node_names_struct,
		"unit_additional_node_names_struct",
		"unit_additional_node_names_struct",
		"s_unit_additional_node_names_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_ADDITIONAL_NODE_NAMES_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 5 },
		{ _field_string_id, "preferred_gun_node", "if found, use this gun marker" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "preferred_grenade_marker", "if found, use this marker to attach live grenades to" },
		FIELD_EXPLANATION("Weapon Specific Markers", "These will override the righthand/lefthand nodes when the weapon matches the one used by the unit"),
		{ _field_block, "weapon specific markers", &weaponspecificmarkersblock_block },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	#define UNIT_BIRTH_STRUCT_ID { 0x3810C67E, 0xD2B344FD, 0x97ED0AC4, 0x965DA861 }
	TAG_STRUCT(
		unit_birth_struct,
		"unit_birth_struct",
		"unit_birth_struct",
		"s_unit_birth_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_BIRTH_STRUCT_ID)
	{
		{ _field_short_block_index, "seat", &unit_seat_block_block },
		FIELD_PAD("PAD", 2),
		{ _field_string_id, "birthing region", "if found, this region will be set to destroyed during birth" },
		{ _field_terminator }
	};

	#define UNIT_BOARDING_MELEE_STRUCT_ID { 0xA96C7D6D, 0xD8B54A51, 0xBF99FA0C, 0x13071BCE }
	VERSIONED_TAG_STRUCT(
		unit_boarding_melee_struct,
		"unit_boarding_melee_struct",
		"unit_boarding_melee_struct",
		"s_unit_boarding_melee_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_BOARDING_MELEE_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 9 },
		{ _field_tag_reference, "boarding melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "boarding melee response", &damage_effect_group_reference },
		{ _field_tag_reference, "eviction melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "eviction melee response", &damage_effect_group_reference },
		{ _field_tag_reference, "landing melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "flurry melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "obstacle smash damage", &damage_effect_group_reference },
		{ _field_tag_reference, "assassination primary damage", &damage_effect_group_reference },
		{ _field_tag_reference, "assassination ragdoll damage", MAKE_ALT_NAMES("assassination damage"), &damage_effect_group_reference },
		
		{ _struct_version_mode_equal, 1, 5 },
		{ _field_tag_reference, "boarding melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "boarding melee response", &damage_effect_group_reference },
		{ _field_tag_reference, "landing melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "flurry melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "obstacle smash damage", &damage_effect_group_reference },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	#define UNIT_BOOST_STRUCT_ID { 0x4506D858, 0x370B402D, 0x83F08481, 0xCB943803 }
	TAG_STRUCT(
		unit_boost_struct,
		"unit_boost_struct",
		"unit_boost_struct",
		"s_unit_boost_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_BOOST_STRUCT_ID)
	{
		{ _field_tag_reference, "boost collision damage", &collision_damage_group_reference$2 },
		{ _field_long_flags, "flags", &boost_flags },
		{ _field_real, "boost peak power" },
		{ _field_real, "boost rise time", "if the trigger is fully down, takes this long to reach peak power", "s" },
		{ _field_real, "boost fall time", "if the trigger is let go (or peak time expires), takes this long to reach 0 power", "s" },
		{ _field_real, "boost power per second", "1, means you burn all your power in one sec.  .1 means you can boost for 10 seconds." },
		{ _field_real, "boost low warning threshold" },
		{ _field_real, "recharge rate", "1 means you recharge fully in 1 second.  .1 means you rechage fully in 10 seconds" },
		{ _field_real, "recharge delay", "how long do you have to be off the tirgger for before boost starts recharging", "s" },
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "trigger to boost", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	TAG_REFERENCE(collision_damage_group_reference$2, COLLISION_DAMAGE_TAG);

	STRINGS(boost_flags)
	{
		"pegs throttle"
	};
	STRING_LIST(boost_flags, boost_flags_strings, _countof(boost_flags_strings));

	#define UNIT_CAMERA_ACCELERATION_DISPLACEMENT_BLOCK_ID { 0x23D5C530, 0x5A548F3, 0x80168453, 0x80F5F3F1 }
	TAG_STRUCT(
		unit_camera_acceleration_displacement_block,
		"unit_camera_acceleration_displacement_block",
		"unit_camera_acceleration_displacement_block",
		"s_unit_camera_acceleration_displacement_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_CAMERA_ACCELERATION_DISPLACEMENT_BLOCK_ID)
	{
		{ _field_real, "maximum camera velocity", "how quickly the camera can move to a new displacement (if the velocity suddenly changes).\nDuring this time the aim vector for the unit will be inaccurate, so don't set this too low.\n0 defaults to infinite.", "wu/s" },
		FIELD_EXPLANATION("value", "For each of the following functions, if 1 instance of the block is specified, the offsets are symmetric.\nIf 2 instances are specified, then the first instance is used for positive displacement and the second is used for negative displacement."),
		{ _field_struct, "forward/back", &unit_camera_acceleration_displacement_function_struct },
		{ _field_struct, "left/right", &unit_camera_acceleration_displacement_function_struct },
		{ _field_struct, "up/down", &unit_camera_acceleration_displacement_function_struct },
		{ _field_terminator }
	};

	#define UNIT_CAMERA_ACCELERATION_DISPLACEMENT_FUNCTION_STRUCT_ID { 0x22A7A324, 0xB17C4B45, 0xBBF37B84, 0xD2BD1E36 }
	TAG_STRUCT(
		unit_camera_acceleration_displacement_function_struct,
		"unit_camera_acceleration_displacement_function_struct",
		"unit_camera_acceleration_displacement_function_struct",
		"s_unit_camera_acceleration_displacement_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_CAMERA_ACCELERATION_DISPLACEMENT_FUNCTION_STRUCT_ID)
	{
		{ _field_char_enum, "Input Variable", &unit_camera_acceleration_displacement_input, _field_id_function_input_scalar },
		FIELD_PAD("blah", 3),
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "mapping", &mapping_function }, // structure_version:2
		{ _field_real, "maximum value", "for linear velocity; this is wu/s\nfor linear acceleration; this is the fraction of the seat acceleration\nfor angular velocity; this is deg/s", _field_id_function_unknown },
		{ _field_real, "camera scale (axial)", "scale factor used when this acceleration component is along the axis of the forward vector of the camera", _field_id_function_unknown },
		{ _field_real, "camera scale (perpendicular)", "scale factor used when this acceleration component is perpendicular to the camera", _field_id_function_unknown },
		{ _field_terminator }
	};

	STRINGS(unit_camera_acceleration_displacement_input)
	{
		"linear velocity",
		"linear acceleration",
		"yaw",
		"pitch",
		"roll"
	};
	STRING_LIST(unit_camera_acceleration_displacement_input, unit_camera_acceleration_displacement_input_strings, _countof(unit_camera_acceleration_displacement_input_strings));

	#define UNIT_CAMERA_STRUCT_ID { 0x382328B4, 0x49B04550, 0x9B1635F2, 0x1B616A06 }
	TAG_STRUCT(
		unit_camera_struct,
		"unit_camera_struct",
		"unit_camera_struct",
		"s_unit_camera_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN3 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_CAMERA_STRUCT_ID)
	{
		FIELD_GROUP_BEGIN("Unit Camera"),
		{ _field_word_flags, "flags", &unit_camera_flags_definition },
		FIELD_PAD("doh", 2),
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_old_string_id, "camera marker name" },
		{ _field_angle, "pitch auto-level" },
		{ _field_angle_bounds, "pitch range" },
		{ _field_block, "camera tracks", &unit_camera_track_block_block },
		{ _field_angle, "pitch minimum spring" },
		{ _field_angle, "pitch mmaximum spring" },
		{ _field_angle, "spring velocity" },
		{ _field_angle, "look acceleration", "if non-zero, limits the change in look velocity per second while the user is pushing the look stick in the current direction of looking", "deg/s/s" },
		{ _field_angle, "look deceleration", "if non-zero, limits the change in look velocity per second while the user is not pushing the look stick or changing directions", "deg/s/s" },
		{ _field_real_fraction, "look acc smoothing fraction", "if non-zero, when the desired velocity change is less than this fraction of the acceleration, starts interpolating the maximum acceleration towards zero.\nYou can think of this as a time in seconds where if the velocity would reach its target in this amount of time or less, it will start taking longer." },
		{ _field_angle, "override fov", "if non-zero, overrides the FOV set in the unit or globals" },
		{ _field_struct, "camera obstruction", &camera_obstruction_struct },
		{ _field_block, "camera acceleration", &unit_camera_acceleration_displacement_block_block },
		{ _field_block, "move stick overrides", &gamepad_stick_info_block_block },
		{ _field_block, "look stick overrides", &gamepad_stick_info_block_block },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	STRINGS(unit_camera_flags_definition)
	{
		"pitch bounds absolute space",
		"only collides with environment",
		"hides player-unit from camera#the player controlling this camera will not see their unit.  All other cameras will see this unit",
		"use aiming vector instead of marker forward#for cameras without tracks that use a marker position, specifies that we use the unit\'s aiming vector instead of the marker\'s forward vector.\nThis results in more accurate aiming and smoother movement when frames are dropped"
	};
	STRING_LIST(unit_camera_flags_definition, unit_camera_flags_definition_strings, _countof(unit_camera_flags_definition_strings));

	#define UNIT_CAMERA_TRACK_BLOCK_ID { 0x7C803867, 0x535E45B7, 0x81C122B6, 0xD6F2CAFC }
	TAG_STRUCT(
		unit_camera_track_block,
		"unit_camera_track_block",
		"unit_camera_track_block",
		"s_unit_camera_track_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_CAMERA_TRACK_BLOCK_ID)
	{
		{ _field_tag_reference, "track", &camera_track_group_reference },
		{ _field_tag_reference, "screen effect", &area_screen_effect_group_reference },
		{ _field_terminator }
	};

	#define UNIT_LIPSYNC_SCALES_STRUCT_ID { 0x2E5A89D9, 0xAF1E466B, 0x9F62F58C, 0x8B1BFE32 }
	VERSIONED_TAG_STRUCT(
		unit_lipsync_scales_struct,
		"unit_lipsync_scales_struct",
		"unit_lipsync_scales_struct",
		"s_unit_lipsync_scales_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_LIPSYNC_SCALES_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_real_fraction, "attack weight" },
		{ _field_real_fraction, "decay weight" },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	#define UNIT_POSTURES_BLOCK_ID { 0xAE9EA3B9, 0x5AAA4959, 0xAA7D53AA, 0x8A60FB7 }
	TAG_STRUCT(
		unit_postures_block,
		"unit_postures_block",
		"unit_postures_block",
		"s_unit_postures_block",
		SET_UNKNOWN0 | SET_UNKNOWN4 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_POSTURES_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		FIELD_USELESS_PAD("value", 24),
		{ _field_real_vector_3d, "pill offset" },
		{ _field_terminator }
	};

	#define UNIT_SCREEN_EFFECT_BLOCK_ID { 0xCF227E5C, 0xEA87405B, 0x8FC0CED4, 0x4AA6446C }
	TAG_STRUCT(
		unit_screen_effect_block,
		"unit_screen_effect_block",
		"unit_screen_effect_block",
		"s_unit_screen_effect_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_SCREEN_EFFECT_BLOCK_ID)
	{
		{ _field_tag_reference, "screen effect", &area_screen_effect_group_reference },
		{ _field_terminator }
	};

	#define UNIT_SEAT_BLOCK_ID { 0x503B218, 0xDE414AF3, 0xAED6B5FD, 0xC83836D9 }
	VERSIONED_TAG_STRUCT(
		unit_seat_block,
		"unit_seat_block",
		"unit_seat_block",
		"s_unit_seat_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN3 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_SEAT_BLOCK_ID)
	{
		{ _struct_version_mode_greater_or_equal, 3, 61 },
		{ _field_long_flags, "flags", &unit_seat_flags },
		{ _field_long_flags, "secondary flags", &unit_seat_secondary_flags },
		{ _field_old_string_id, "label" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_old_string_id, "marker name" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "entry marker(s) name" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "ui marker name" },
		{ _field_string_id, "ui navpoint name" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "boarding grenade marker" },
		{ _field_string_id, "boarding grenade string" },
		{ _field_string_id, "boarding melee string" },
		{ _field_string_id, "in-seat string" },
		{ _field_real_fraction, "ping scale", "nathan is too lazy to make pings for each seat." },
		FIELD_USELESS_PAD("value", 8),
		{ _field_real, "turnover time", "how much time it takes to evict a rider from a flipped vehicle", "seconds" },
		FIELD_EXPLANATION("seat acceleration spring", nullptr),
		{ _field_tag_reference, "seat acceleration", &spring_acceleration_group_reference },
		{ _field_real, "AI scariness" },
		{ _field_short_enum, "ai seat type", &global_ai_seat_type_enum },
		{ _field_short_block_index, "boarding seat", &unit_seat_block_block },
		{ _field_block, "additional boarding seats", "additional seats to eject", &boarding_seat_block_block },
		{ _field_real_fraction, "listener interpolation factor", "how far to interpolate listener position from camera to occupant's head" },
		FIELD_EXPLANATION("speed dependant turn rates", "when the unit velocity is 0, the yaw/pitch rates are the left values\nat [max speed reference], the yaw/pitch rates are the right values.\nthe max speed reference is what the code uses to generate a clamped speed from 0..1\nthe exponent controls how midrange speeds are interpreted.\nIOW: As velocity exceeds \'min speed\' and approaches \'max speed\', turn rates are scaled from low --> high"),
		{ _field_real_bounds, "yaw rate bounds", nullptr, "degrees per second" },
		{ _field_real_bounds, "pitch rate bounds", nullptr, "degrees per second" },
		{ _field_real, "pitch interpolation time", "0 means use default 17", "seconds to interpolate" },
		{ _field_real, "min speed reference", "Initial t is computed from velocity/(max speed - min speed)", "world units/sec" },
		{ _field_real, "max speed reference" },
		{ _field_real, "speed exponent", "if >0, t is then modified by raising to this exponent and result is used to linearly interpolate yaw/pitch rates" },
		FIELD_USELESS_PAD("value", 12),
		FIELD_EXPLANATION("camera fields", nullptr),
		{ _field_struct, "unit camera", &unit_camera_struct },
		{ _field_tag_reference, "hud screen reference", &cui_screen_group_reference },
		{ _field_string_id, "enter seat string" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_angle, "yaw minimum" },
		{ _field_angle, "yaw maximum" },
		{ _field_angle, "yaw minimum for AI operator", "only applies when an NPC is considering using this seat" },
		{ _field_angle, "yaw maximum for AI operator", "only applies when an NPC is considering using this seat" },
		{ _field_tag_reference, "built-in gunner", &character_group_reference },
		FIELD_USELESS_PAD("value", 12),
		FIELD_EXPLANATION("entry fields", "note: the entry radius shouldn\'t exceed 3 world units, \nas that is as far as the player will search for a vehicle\nto enter."),
		{ _field_real, "entry radius", "how close to the entry marker a unit must be" },
		{ _field_angle, "entry marker cone angle", "angle from marker forward the unit must be" },
		{ _field_angle, "entry marker facing angle", "angle from unit facing the marker must be" },
		{ _field_real, "maximum relative velocity" },
		FIELD_USELESS_PAD("value", 20),
		{ _field_real, "open time", nullptr, "seconds" },
		{ _field_real, "close time", nullptr, "seconds" },
		{ _field_string_id, "open function name", "creates an object function with this name that you can use to query the open state of this seat" },
		{ _field_string_id, "opening function name", "goes from 0 to 1 over the course of opening and stays at 1 while open.  Drops to 0 immediately when closing starts" },
		{ _field_string_id, "closing function name", "goes from 0 to 1 over the course of closing and stays at 1 while closed.  Drops to 0 immediately when opening starts" },
		{ _field_string_id, "invisible seat region" },
		{ _field_long_integer, "runtime invisible seat region index" },
		FIELD_EXPLANATION("seat death grab crate", "If this unit dies while this seat is occupied, the occupant will be handed an instance of this crate for throwing purposes."),
		{ _field_tag_reference, "seat death grab crate", &crate_group_reference$2 },
		{ _field_string_id, "Seat Selection String" },
		{ _field_real, "bailout velocity", "if exiting in bailout fashion, how much velocity to add in the entry_marker's forward direction", "wu/s" },
		
		{ _struct_version_mode_equal, 2, 37 },
		{ _field_long_flags, "flags", &unit_seat_flags },
		{ _field_old_string_id, "label" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_old_string_id, "marker name" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "entry marker(s) name" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "boarding grenade marker" },
		FIELD_PAD("ASCUPULCR", 20),
		{ _field_real, "turnover time", "how much time it takes to evict a rider from a flipped vehicle", "seconds" },
		{ _field_real_vector_3d, "acceleration scale" },
		{ _field_real, "AI scariness" },
		{ _field_short_enum, "ai seat type", &global_ai_seat_type_enum },
		{ _field_short_block_index, "boarding seat", &unit_seat_block_block },
		{ _field_real_fraction, "listener interpolation factor", "how far to interpolate listener position from camera to occupant's head" },
		FIELD_EXPLANATION("speed dependant turn rates", "when the unit velocity is 0, the yaw/pitch rates are the left values\nat [max speed reference], the yaw/pitch rates are the right values.\nthe max speed reference is what the code uses to generate a clamped speed from 0..1\nthe exponent controls how midrange speeds are interpreted."),
		{ _field_real_bounds, "yaw rate bounds", nullptr, "degrees per second" },
		{ _field_real_bounds, "pitch rate bounds", nullptr, "degrees per second" },
		{ _field_real, "min speed reference" },
		{ _field_real, "max speed reference" },
		{ _field_real, "speed exponent" },
		FIELD_PAD("PWJ", 12),
		FIELD_EXPLANATION("camera fields", nullptr),
		{ _field_struct, "unit camera", &unit_camera_struct },
		FIELD_PAD("CJRYE", 4),
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("SETOVNRXO", 2),
		{ _field_angle, "yaw minimum" },
		{ _field_angle, "yaw maximum" },
		{ _field_tag_reference, "built-in gunner", &character_group_reference },
		FIELD_PAD("FYZZEW", 20),
		FIELD_EXPLANATION("entry fields", "note: the entry radius shouldn\'t exceed 3 world units, \nas that is as far as the player will search for a vehicle\nto enter."),
		{ _field_real, "entry radius", "how close to the entry marker a unit must be" },
		{ _field_angle, "entry marker cone angle", "angle from marker forward the unit must be" },
		{ _field_angle, "entry marker facing angle", "angle from unit facing the marker must be" },
		{ _field_real, "maximum relative velocity" },
		FIELD_PAD("RCCDS", 20),
		
		{ _struct_version_mode_equal, 1, 22 },
		{ _field_long_flags, "flags", &unit_seat_flags },
		{ _field_old_string_id, "label" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_old_string_id, "marker name" },
		FIELD_PAD("ZNXS", 32),
		{ _field_real_vector_3d, "acceleration scale" },
		{ _field_real, "AI scariness" },
		{ _field_short_enum, "ai seat type", &global_ai_seat_type_enum },
		{ _field_short_block_index, "boarding seat", &unit_seat_block_block },
		{ _field_real_fraction, "listener interpolation factor", "how far to interpolate listener position from camera to occupant's head" },
		{ _field_real_bounds, "yaw rate bounds", nullptr, "degrees per second" },
		{ _field_real_bounds, "pitch rate bounds", nullptr, "degrees per second" },
		{ _field_real, "max speed reference" },
		{ _field_real, "speed exponent" },
		{ _field_struct, "unit camera", &unit_camera_struct },
		FIELD_PAD("YSVFX", 4),
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("UTI", 2),
		{ _field_angle, "yaw minimum" },
		{ _field_angle, "yaw maximum" },
		{ _field_tag_reference, "built-in gunner", &character_group_reference },
		FIELD_PAD("OCB", 20),
		
		{ _struct_version_mode_equal, 0, 20 },
		{ _field_long_flags, "flags", &unit_seat_flags },
		{ _field_old_string_id, "label" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_old_string_id, "marker name" },
		FIELD_PAD("BDIQ", 32),
		{ _field_real_vector_3d, "acceleration scale" },
		{ _field_real, "AI scariness" },
		{ _field_short_enum, "ai seat type", &global_ai_seat_type_enum },
		{ _field_short_block_index, "boarding seat", &unit_seat_block_block },
		{ _field_real_fraction, "listener interpolation factor", "how far to interpolate listener position from camera to occupant's head" },
		{ _field_real, "yaw rate", nullptr, "degrees per second" },
		{ _field_real, "pitch rate", nullptr, "degrees per second" },
		{ _field_struct, "unit camera", &unit_camera_struct },
		FIELD_PAD("RHDI", 4),
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("NULVUA", 2),
		{ _field_angle, "yaw minimum" },
		{ _field_angle, "yaw maximum" },
		{ _field_tag_reference, "built-in gunner", &character_group_reference },
		FIELD_PAD("DIXHWHVMM", 20),
		
		{ _field_terminator }
	};

	STRINGS(unit_seat_flags)
	{
		"invisible#completely enclosed by vehicle",
		"locked#when occupied, prevents enemies from entering locked seats",
		"driver",
		"gunner",
		"third person camera",
		"allows weapons",
		"third person on enter",
		"first person camera slaved to gun.",
		"not valid without driver",
		"allow AI noncombatants",
		"boarding seat",
		"ai firing disabled by max acceleration",
		"boarding enters seat",
		"boarding need any passenger",
		"invalid for player",
		"invalid for non-player",
		"invalid for hero",
		"gunner (player only)",
		"invisible under major damage",
		"melee instant killable",
		"leader preference",
		"allows exit and detach",
		"blocks headshots",
		"exits to ground",
		"forward from attachment",
		"disallow AI shooting",
		"prevents weapon stowing",
		"takes top level aoe damage",
		"disallow exit#Prevents the unit currently in the seat from exiting regardless of circumstances",
		"local aiming",
		"pelvis relative attachment",
		"apply velocity on death exit"
	};
	STRING_LIST(unit_seat_flags, unit_seat_flags_strings, _countof(unit_seat_flags_strings));

	STRINGS(unit_seat_secondary_flags)
	{
		"biped grab seat",
		"low hanging cargo",
		"ninja hot seat",
		"skip obstacle check",
		"search parent for entry marker",
		"gunner release aim on exit#The unit\'s aim will no longer be controlled by gunner when it exits",
		"fully open before allowing exit",
		"finish melee before allowing exit",
		"kill parent if unit in seat dies",
		"co-pilot#opens and closes the cockpit to allow copilot in (if already closed)"
	};
	STRING_LIST(unit_seat_secondary_flags, unit_seat_secondary_flags_strings, _countof(unit_seat_secondary_flags_strings));

	STRINGS(global_ai_seat_type_enum)
	{
		"NONE",
		"passenger",
		"gunner",
		"small cargo",
		"large cargo",
		"driver"
	};
	STRING_LIST(global_ai_seat_type_enum, global_ai_seat_type_enum_strings, _countof(global_ai_seat_type_enum_strings));

	TAG_REFERENCE(crate_group_reference$2, CRATE_TAG);

	#define UNIT_STRUCT_DEFINITION_ID { 0xC8958077, 0x466A4028, 0x94ACA1E3, 0xDB3BF1B8 }
	VERSIONED_TAG_STRUCT(
		unit_struct_definition,
		"unit_struct_definition",
		"unit_struct_definition",
		"s_unit_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_STRUCT_DEFINITION_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 130 },
		{ _field_struct, "object", &object_struct_definition },
		FIELD_GROUP_BEGIN("$$$ UNIT $$$"),
		{ _field_long_flags, "flags", &unit_flags_part1, _field_id_dumb },
		{ _field_long_flags, "flags2", &unit_flags_part2, _field_id_dumb },
		{ _field_short_enum, "default team", &unit_default_teams$2 },
		{ _field_short_enum, "constant sound volume", &ai_sound_volume_enum },
		{ _field_tag_reference, "hologram unit reference", &biped_group_vehicle_group_reference },
		{ _field_block, "campaign metagame bucket", &campaign_metagame_bucket_block_block },
		{ _field_block, "screen effects", &unit_screen_effect_block_block },
		{ _field_real, "camera stiffness" },
		{ _field_struct, "unit camera", &unit_camera_struct },
		FIELD_EXPLANATION("sync action camera fields", nullptr),
		{ _field_struct, "sync action camera", &unit_camera_struct },
		{ _field_tag_reference, "assasination start damage response", &damage_response_definition_group_reference },
		{ _field_tag_reference, "assassination weapon", &weapon_group_reference },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon stow marker", "the anchor we attach the knife to when we stow it" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon out marker", "the anchor we attach the knife to when we pull it out" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon anchor marker", "the marker on the knife that we anchor to the biped" },
		{ _field_tag_reference, "seat acceleration", &spring_acceleration_group_reference },
		FIELD_GROUP_BEGIN("pings"),
		{ _field_real, "soft ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "soft ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "hard ping interrupt time", nullptr, "seconds" },
		{ _field_real, "soft death direction speed threshold", "moving faster than this means you will soft death in the movement direction. zero defaults to damage direction.", "wu/s" },
		{ _field_real, "hard death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death time", nullptr, "seconds" },
		{ _field_real, "pain screen duration", "The duration of the pain function\n0 defaults to 0.5", "seconds" },
		{ _field_real, "pain screen region fade out duration", "The time it takes to fade out a damage region that is no longer the most recent damage region to be hit", "seconds" },
		{ _field_real_fraction, "pain screen region fade out weight threshold", "The threshold weight below which the focus channel must fall before we can cross fade to another region.", nullptr, "[0,1]" },
		{ _field_angle, "pain screen angle tolerance", "The tolerance angle between next and previous damage directions, below which we randomly vary the ping direction.", "degrees" },
		{ _field_angle, "pain screen angle randomness", "The maximum random angle to vary the incoming ping direction by if it's too close to the previous ping.", "degrees" },
		{ _field_real, "defensive screen duration", "The duration of the defensive function\n0 defaults to 2.0", "seconds" },
		{ _field_real_fraction, "defensive screen scrub fallback fraction", "When receiving multiple pings, this is the min percentage of the defensive screen scrub value will fallback to.", nullptr, "[0,1]" },
		FIELD_GROUP_END(),
		{ _field_real, "distance of dive anim", "this must be set to tell the AI how far it should expect our dive animation to move us", "world units" },
		{ _field_real_fraction, "terminal velocity fall ratio", "ratio of airborne_arc animation to switch off falling overlay" },
		FIELD_GROUP_BEGIN("stun"),
		{ _field_real, "stun movement penalty", "1.0 prevents moving while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun turning penalty", "1.0 prevents turning while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun jumping penalty", "1.0 prevents jumping while stunned", nullptr, "[0,1]" },
		{ _field_real, "minimum stun time", "all stunning damage will last for at least this long", "seconds" },
		{ _field_real, "maximum stun time", "no stunning damage will last for longer than this", "seconds" },
		FIELD_GROUP_END(),
		{ _field_real, "feign death chance", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign repeat chance", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "spawned turret character", "automatically created character when this unit is driven", &character_group_reference },
		{ _field_short_integer_bounds, "spawned actor count", "number of actors which we spawn" },
		{ _field_real, "spawned velocity", "velocity at which we throw spawned actors" },
		FIELD_GROUP_BEGIN("aiming/looking"),
		{ _field_string_id, "target aiming pivot marker name", "set this to have your weapon barrel point at its calcualed target instead of matching the aiming of the unit controlling it.  This marker should be along the barrel at point that doesn't move when the barrel pitches up and down." },
		{ _field_angle, "aiming velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "aiming acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual aiming modifier", nullptr, nullptr, "[0,1]" },
		{ _field_angle, "looking velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "looking acceleration maximum", nullptr, "degrees per second squared" },
		FIELD_GROUP_END(),
		{ _field_real, "object velocity maximum", "Debug value for object velocity that corresponds to a blend screen weight of 1, 0 defaults to 5.0", "world units per second" },
		{ _field_string_id, "right_hand_node", "where the primary weapon is attached" },
		{ _field_string_id, "left_hand_node", "where the seconday weapon is attached (for dual-pistol modes)" },
		{ _field_struct, "more damn nodes", &unit_additional_node_names_struct }, // structure_version:1
		{ _field_short_enum, "melee damage class", &global_melee_class_enum_definition },
		FIELD_PAD("PAD", 2),
		FIELD_GROUP_BEGIN("melee damage"),
		{ _field_tag_reference, "melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "native melee override", "when set, characters will melee with these settings rather than their actual held weapon. (for characters that melee with an off hand)", &weapon_group_reference },
		{ _field_struct, "your momma", &unit_boarding_melee_struct }, // structure_version:2
		FIELD_GROUP_END(),
		{ _field_short_enum, "motion sensor blip size", &global_chud_blip_type_definition },
		{ _field_short_enum, "item owner size", &unit_item_owner_size_enum },
		{ _field_string_id, "equipment variant name" },
		{ _field_string_id, "grounded equipment variant name" },
		{ _field_block, "postures", &unit_postures_block_block },
		{ _field_block, "Hud audio cues", &hud_unit_sound_block_block },
		{ _field_block, "dialogue variants", &dialogue_variant_block_block },
		FIELD_GROUP_BEGIN("standard grenade throw"),
		{ _field_real, "grenade angle", nullptr, "degrees" },
		{ _field_real, "grenade angle max elevation", nullptr, "degrees" },
		{ _field_real, "grenade angle min elevation", nullptr, "degrees" },
		{ _field_real, "grenade velocity", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("sprinting grenade throw"),
		{ _field_real, "grenade angle (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade angle max elevation (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade angle min elevation (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade velocity (sprinting)", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("primary weapon toss"),
		{ _field_real, "weapon angle", nullptr, "degrees" },
		{ _field_real, "weapon angle max elevation", nullptr, "degrees" },
		{ _field_real, "weapon angle min elevation", nullptr, "degrees" },
		{ _field_real, "weapon velocity", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		{ _field_short_enum, "grenade type", &global_grenade_type_enum },
		{ _field_short_integer, "grenade count" },
		{ _field_block, "powered seats", &powered_seat_block_block },
		{ _field_block, "weapons", &unit_weapon_block_block },
		{ _field_block, "target tracking", &global_target_tracking_parameters_block_block },
		{ _field_block, "seats", &unit_seat_block_block },
		FIELD_GROUP_BEGIN("open/close"),
		{ _field_real, "opening time", "how long the unit takes to open when the hs_function unit_open is called\nThe current open state can be retrieved from the object function unit_open", "s" },
		{ _field_real, "closing time", "you don't have to go home, but you can't stay here", "s" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("EMP Disabling"),
		{ _field_real, "emp disabled time", nullptr, "seconds" },
		{ _field_real, "emp disabled time (PVP)", "Set to -1 for not disabled in MP but disabled in SP", "seconds " },
		{ _field_tag_reference, "emp disabled effect", &effect_group_reference },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Boost"),
		{ _field_struct, "boost", &unit_boost_struct },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Lipsync", nullptr),
		{ _field_struct, "lipsync", &unit_lipsync_scales_struct }, // structure_version:1
		FIELD_EXPLANATION("Exit and Detach", nullptr),
		{ _field_tag_reference, "exit and detach damage", &damage_effect_group_reference },
		{ _field_tag_reference, "exit and detach weapon", &weapon_group_reference$2 },
		FIELD_EXPLANATION("Experience", nullptr),
		{ _field_short_integer, "experience for kill" },
		{ _field_short_integer, "experience for assist" },
		{ _field_tag_reference, "hero assist equipment", "this is where you stick an equipment that the biped will always have, to implement the bizarrely named hero assist", &equipment_group_reference },
		{ _field_real, "bailout threshold", "the speed above which units will bail out of a vehicle instead of just exiting", "wu/s" },
		FIELD_GROUP_END(),
		{ _field_real_fraction, "iron sight weapon dampening", "when using iron sights, how much to scale the weapon overlays to steady the gun (0 = rock steady, 1= no dampening)", "(0-1)" },
		FIELD_GROUP_BEGIN("Birthing"),
		{ _field_struct, "birth", &unit_birth_struct },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 129 },
		FIELD_GROUP_BEGIN("$$$ UNIT $$$"),
		{ _field_long_flags, "flags", &unit_flags_part1, _field_id_dumb },
		{ _field_long_flags, "flags2", &unit_flags_part2, _field_id_dumb },
		{ _field_short_enum, "default team", &unit_default_teams$2 },
		{ _field_short_enum, "constant sound volume", &ai_sound_volume_enum },
		{ _field_tag_reference, "hologram unit reference", &biped_group_vehicle_group_reference },
		{ _field_block, "campaign metagame bucket", &campaign_metagame_bucket_block_block },
		{ _field_block, "screen effects", &unit_screen_effect_block_block },
		{ _field_real, "camera stiffness" },
		{ _field_struct, "unit camera", &unit_camera_struct },
		FIELD_EXPLANATION("sync action camera fields", nullptr),
		{ _field_struct, "sync action camera", &unit_camera_struct },
		{ _field_tag_reference, "assasination start damage response", &damage_response_definition_group_reference },
		{ _field_tag_reference, "assassination weapon", &weapon_group_reference },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon stow marker", "the anchor we attach the knife to when we stow it" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon out marker", "the anchor we attach the knife to when we pull it out" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon anchor marker", "the marker on the knife that we anchor to the biped" },
		{ _field_tag_reference, "seat acceleration", &spring_acceleration_group_reference },
		FIELD_GROUP_BEGIN("pings"),
		{ _field_real, "soft ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "soft ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "hard ping interrupt time", nullptr, "seconds" },
		{ _field_real, "soft death direction speed threshold", "moving faster than this means you will soft death in the movement direction. zero defaults to damage direction.", "wu/s" },
		{ _field_real, "hard death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death time", nullptr, "seconds" },
		{ _field_real, "pain screen duration", "The duration of the pain function\n0 defaults to 0.5", "seconds" },
		{ _field_real, "pain screen region fade out duration", "The time it takes to fade out a damage region that is no longer the most recent damage region to be hit", "seconds" },
		{ _field_real_fraction, "pain screen region fade out weight threshold", "The threshold weight below which the focus channel must fall before we can cross fade to another region.", nullptr, "[0,1]" },
		{ _field_angle, "pain screen angle tolerance", "The tolerance angle between next and previous damage directions, below which we randomly vary the ping direction.", "degrees" },
		{ _field_angle, "pain screen angle randomness", "The maximum random angle to vary the incoming ping direction by if it's too close to the previous ping.", "degrees" },
		{ _field_real, "defensive screen duration", "The duration of the defensive function\n0 defaults to 2.0", "seconds" },
		{ _field_real_fraction, "defensive screen scrub fallback fraction", "When receiving multiple pings, this is the min percentage of the defensive screen scrub value will fallback to.", nullptr, "[0,1]" },
		FIELD_GROUP_END(),
		{ _field_real, "distance of dive anim", "this must be set to tell the AI how far it should expect our dive animation to move us", "world units" },
		{ _field_real_fraction, "terminal velocity fall ratio", "ratio of airborne_arc animation to switch off falling overlay" },
		FIELD_GROUP_BEGIN("stun"),
		{ _field_real, "stun movement penalty", "1.0 prevents moving while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun turning penalty", "1.0 prevents turning while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun jumping penalty", "1.0 prevents jumping while stunned", nullptr, "[0,1]" },
		{ _field_real, "minimum stun time", "all stunning damage will last for at least this long", "seconds" },
		{ _field_real, "maximum stun time", "no stunning damage will last for longer than this", "seconds" },
		FIELD_GROUP_END(),
		{ _field_real, "feign death chance", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign repeat chance", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "spawned turret character", "automatically created character when this unit is driven", &character_group_reference },
		{ _field_short_integer_bounds, "spawned actor count", "number of actors which we spawn" },
		{ _field_real, "spawned velocity", "velocity at which we throw spawned actors" },
		FIELD_GROUP_BEGIN("aiming/looking"),
		{ _field_string_id, "target aiming pivot marker name", "set this to have your weapon barrel point at its calcualed target instead of matching the aiming of the unit controlling it.  This marker should be along the barrel at point that doesn't move when the barrel pitches up and down." },
		{ _field_angle, "aiming velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "aiming acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual aiming modifier", nullptr, nullptr, "[0,1]" },
		{ _field_angle, "looking velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "looking acceleration maximum", nullptr, "degrees per second squared" },
		FIELD_GROUP_END(),
		{ _field_real, "object velocity maximum", "Debug value for object velocity that corresponds to a blend screen weight of 1, 0 defaults to 5.0", "world units per second" },
		{ _field_string_id, "right_hand_node", "where the primary weapon is attached" },
		{ _field_string_id, "left_hand_node", "where the seconday weapon is attached (for dual-pistol modes)" },
		{ _field_struct, "more damn nodes", &unit_additional_node_names_struct }, // structure_version:1
		{ _field_short_enum, "melee damage class", &global_melee_class_enum_definition },
		FIELD_PAD("PAD", 2),
		FIELD_GROUP_BEGIN("melee damage"),
		{ _field_tag_reference, "melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "native melee override", "when set, characters will melee with these settings rather than their actual held weapon. (for characters that melee with an off hand)", &weapon_group_reference },
		{ _field_struct, "your momma", &unit_boarding_melee_struct }, // structure_version:2
		FIELD_GROUP_END(),
		{ _field_short_enum, "motion sensor blip size", &global_chud_blip_type_definition },
		{ _field_short_enum, "item owner size", &unit_item_owner_size_enum },
		{ _field_string_id, "equipment variant name" },
		{ _field_string_id, "grounded equipment variant name" },
		{ _field_block, "postures", &unit_postures_block_block },
		{ _field_block, "Hud audio cues", &hud_unit_sound_block_block },
		{ _field_block, "dialogue variants", &dialogue_variant_block_block },
		FIELD_GROUP_BEGIN("standard grenade throw"),
		{ _field_real, "grenade angle", nullptr, "degrees" },
		{ _field_real, "grenade angle max elevation", nullptr, "degrees" },
		{ _field_real, "grenade angle min elevation", nullptr, "degrees" },
		{ _field_real, "grenade velocity", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("sprinting grenade throw"),
		{ _field_real, "grenade angle (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade angle max elevation (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade angle min elevation (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade velocity (sprinting)", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("primary weapon toss"),
		{ _field_real, "weapon angle", nullptr, "degrees" },
		{ _field_real, "weapon angle max elevation", nullptr, "degrees" },
		{ _field_real, "weapon angle min elevation", nullptr, "degrees" },
		{ _field_real, "weapon velocity", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		{ _field_short_enum, "grenade type", &global_grenade_type_enum },
		{ _field_short_integer, "grenade count" },
		{ _field_block, "powered seats", &powered_seat_block_block },
		{ _field_block, "weapons", &unit_weapon_block_block },
		{ _field_block, "target tracking", &global_target_tracking_parameters_block_block },
		{ _field_block, "seats", &unit_seat_block_block },
		FIELD_GROUP_BEGIN("open/close"),
		{ _field_real, "opening time", "how long the unit takes to open when the hs_function unit_open is called\nThe current open state can be retrieved from the object function unit_open", "s" },
		{ _field_real, "closing time", "you don't have to go home, but you can't stay here", "s" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("EMP Disabling"),
		{ _field_real, "emp disabled time", nullptr, "seconds" },
		{ _field_real, "emp disabled time (PVP)", "Set to -1 for not disabled in MP but disabled in SP", "seconds " },
		{ _field_tag_reference, "emp disabled effect", &effect_group_reference },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Boost"),
		{ _field_struct, "boost", &unit_boost_struct },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Lipsync", nullptr),
		{ _field_struct, "lipsync", &unit_lipsync_scales_struct }, // structure_version:1
		FIELD_EXPLANATION("Exit and Detach", nullptr),
		{ _field_tag_reference, "exit and detach damage", &damage_effect_group_reference },
		{ _field_tag_reference, "exit and detach weapon", &weapon_group_reference$2 },
		FIELD_EXPLANATION("Experience", nullptr),
		{ _field_short_integer, "experience for kill" },
		{ _field_short_integer, "experience for assist" },
		{ _field_tag_reference, "hero assist equipment", "this is where you stick an equipment that the biped will always have, to implement the bizarrely named hero assist", &equipment_group_reference },
		{ _field_real, "bailout threshold", "the speed above which units will bail out of a vehicle instead of just exiting", "wu/s" },
		FIELD_GROUP_END(),
		{ _field_real_fraction, "iron sight weapon dampening", "when using iron sights, how much to scale the weapon overlays to steady the gun (0 = rock steady, 1= no dampening)", "(0-1)" },
		FIELD_GROUP_BEGIN("Birthing"),
		{ _field_struct, "birth", &unit_birth_struct },
		FIELD_GROUP_END(),
		
		{ _field_terminator }
	};

	#define UNIT_TRICK_DEFINITION_BLOCK_ID { 0xFD118400, 0xCFBA4748, 0xBD2876FC, 0x502DC1EC }
	TAG_STRUCT(
		unit_trick_definition_block,
		"unit_trick_definition_block",
		"unit_trick_definition_block",
		"s_unit_trick_definition_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_TRICK_DEFINITION_BLOCK_ID)
	{
		{ _field_string_id, "animation name" },
		{ _field_char_enum, "activation type", &unit_trick_activation_type_enum },
		{ _field_char_enum, "velocity preservation", "specifies how pre-trick velocity is maintained during and after the trick\nonly applies to vehicles", &unit_trick_velocity_preservation_mode_enum },
		{ _field_byte_flags, "flags", &unit_trick_flags },
		FIELD_PAD("XEKMVZ", 1),
		{ _field_real, "camera interpolation time", "sloppiness of the camera\nonly applies to vehicles", "s" },
		{ _field_real, "trick exit time", "how long before the end of the trick we start using the below values", "s" },
		{ _field_real_bounds, "trick exit camera interpolation time", "sloppiness of the camera when exiting the trick\nwe interpolate between these values depending on how far your camera was displaced from the ideal camera", "s" },
		{ _field_real, "trick exit displacement reference", "when your camera is this far from the ideal at the start of the trick, we use the maximum delay time above\nonly for space fighter", "wu" },
		{ _field_real, "cooldown time", "after ending this trick, how long until I can trick again\nonly applies to vehicles", "s" },
		{ _field_terminator }
	};

	STRINGS(unit_trick_activation_type_enum)
	{
		"brake + left",
		"brake + right",
		"brake + up",
		"brake + down",
		"throw movement left",
		"throw movement right",
		"throw movement up",
		"throw movement down",
		"throw look left",
		"throw look right",
		"throw look up",
		"throw look down",
		"peg-flick-jump left",
		"peg-flick-jump right",
		"peg-flick-jump up",
		"peg-flick-jump down",
		"double-jump left",
		"double-jump right",
		"double-jump up",
		"double-jump down"
	};
	STRING_LIST(unit_trick_activation_type_enum, unit_trick_activation_type_enum_strings, _countof(unit_trick_activation_type_enum_strings));

	STRINGS(unit_trick_velocity_preservation_mode_enum)
	{
		"none#velocity is completely removed",
		"trick relative#velocity is relative to the object\'s orientation at the start of the trick (so if you\'re moving forward before the trick, you will be moving forward after the trick, even if that\'s a different direction)",
		"world relative#velocity is maintained in world space"
	};
	STRING_LIST(unit_trick_velocity_preservation_mode_enum, unit_trick_velocity_preservation_mode_enum_strings, _countof(unit_trick_velocity_preservation_mode_enum_strings));

	STRINGS(unit_trick_flags)
	{
		"use following camera#as opposed to the trick camera, which is the default\nvehicles only",
		"do not slam player control#allows the player to continue to move aiming vector while tricking"
	};
	STRING_LIST(unit_trick_flags, unit_trick_flags_strings, _countof(unit_trick_flags_strings));

	#define UNIT_WEAPON_BLOCK_STRUCT_ID { 0x2B5DC512, 0x14364A80, 0x855CD54E, 0xDCE951E0 }
	TAG_STRUCT(
		unit_weapon_block_struct,
		"unit_weapon_block_struct",
		"unit_weapon_block_struct",
		"s_unit_weapon_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		UNIT_WEAPON_BLOCK_STRUCT_ID)
	{
		{ _field_tag_reference, "weapon", &weapon_group_reference },
		{ _field_string_id, "variant name" },
		{ _field_long_enum, "position", &initial_weapon_position },
		{ _field_real, "maximum firing cone angle", "must be greater than zero for turret to fire", "degrees" },
		{ _field_real, "minimum retarget time", "minimum time before autoturret will change targets", "seconds" },
		{ _field_real, "blind fire time", "time after losing a target before turret stops blind firing", "seconds" },
		{ _field_real, "lead fraction", "0.0 = no lead, 1.0 = perfect lead" },
		{ _field_real_bounds, "engagement range", "when non-zero, turret will not prioritize targets above or below this range", "units" },
		{ _field_real, "proximity score multiplier", "0.0 = no importance, 2.0 = things that are close are twice as important" },
		{ _field_real, "direction score multiplier", "0.0 = no importance, 2.0 = things in front of you are twice as important" },
		{ _field_real, "attacker score multiplier", "0.0 = no importance, 2.0 = things that attacked you last are twice as important" },
		{ _field_real, "targeting weight hologram", "multiplier" },
		{ _field_real, "targeting weight auto turret", "multiplier" },
		{ _field_real, "primary fire delay from idle", nullptr, "seconds" },
		{ _field_real, "secondary fire delay from idle", nullptr, "seconds" },
		{ _field_real, "caution duration", "how long the turret stays alert after losing a target", "seconds" },
		{ _field_real, "alert angular speed max", "0 = infinite", "radians per second" },
		{ _field_real, "idle angular speed max", "0 = infinite", "radians per second" },
		{ _field_real, "targeting yaw min", "(-180 to 0) how far it can rotate past its initial rotation", "degrees" },
		{ _field_real, "targeting yaw max", "(0 to 180) how far it can rotate past its initial rotation", "degrees" },
		{ _field_real, "targeting pitch min", "(-180 to 0) how far it can rotate past its initial rotation", "degrees" },
		{ _field_real, "targeting pitch max", "(0 to 180) how far it can rotate past its initial rotation", "degrees" },
		{ _field_real, "idle scanning yaw min", "(-180 to 0) how far it will look around past its initial rotation", "degrees" },
		{ _field_real, "idle scanning yaw max", "(0 to 180) how far it will look around past its initial rotation", "degrees" },
		{ _field_real, "idle scanning pitch min", "(-180 to 0) how far it will look around past its initial rotation", "degrees" },
		{ _field_real, "idle scanning pitch max", "(0 to 180) how far it will look around past its initial rotation", "degrees" },
		{ _field_real, "idle scanning min interest distance", "0 = infinite.  Idle scanning won't look at something that is closer than this distance", "world units" },
		{ _field_tag_reference, "alert mode effect", "effect played on the turret when it goes into alert mode", &effect_group_reference },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "alert mode effect marker" },
		{ _field_string_id, "alert mode effect primary scale" },
		{ _field_string_id, "alert mode effect secondary scale" },
		{ _field_block, "sentry properties", &sentrypropertiesblock_block },
		{ _field_real, "target camouflage threshold", "0 - 1 : target when players camo level falls below this threshold, full camo = 1" },
		{ _field_terminator }
	};

	STRINGS(initial_weapon_position)
	{
		"primary or backpack",
		"secondary"
	};
	STRING_LIST(initial_weapon_position, initial_weapon_position_strings, _countof(initial_weapon_position_strings));

	#define USER_DATA_BLOCK_ID { 0x3BBE7E4E, 0x475949EF, 0xBDD01F25, 0x7C2F2589 }
	TAG_STRUCT(
		user_data_block,
		"user_data_block",
		"user_data_block",
		"s_user_data_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_DATA_BLOCK_ID)
	{
		{ _field_struct, "user data header", &global_render_geometry_user_data_header_struct },
		{ _field_data, "user data", &user_data_definition },
		{ _field_terminator }
	};

	#define USER_EDGE_BLOCK_ID { 0x4DBD3F0D, 0x82D242CD, 0xA695A5CE, 0x2C7C98DB }
	TAG_STRUCT(
		user_edge_block,
		"user_edge_block",
		"user_edge_block",
		"s_user_edge_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_EDGE_BLOCK_ID,
		4)
	{
		{ _field_real_vector_3d, "m_x" },
		{ _field_real, "havok w m_x" },
		{ _field_real_vector_3d, "m_y" },
		{ _field_real, "havok w m_y" },
		{ _field_real_vector_3d, "m_z" },
		{ _field_real, "havok w m_z" },
		{ _field_long_integer, "m_meshUidA" },
		{ _field_long_integer, "m_meshUidB" },
		{ _field_long_integer, "m_faceA" },
		{ _field_long_integer, "m_faceB" },
		{ _field_long_integer, "m_userDataA" },
		{ _field_long_integer, "m_userDataB" },
		{ _field_short_integer, "m_costAtoB" },
		{ _field_short_integer, "m_costBtoA" },
		{ _field_char_integer, "m_direction" },
		FIELD_PAD("padding", 3),
		{ _field_terminator }
	};

	#define USER_HINT_BLOCK_ID { 0x8E857EED, 0xECA14C74, 0xB042E3D8, 0x772B85FB }
	TAG_STRUCT(
		user_hint_block,
		"user_hint_block",
		"user_hint_block",
		"s_user_hint_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_BLOCK_ID)
	{
		{ _field_block, "line segment geometry", &user_hint_line_segment_block_block },
		{ _field_block, "parallelogram geometry", &user_hint_parallelogram_block_block },
		{ _field_block, "jump hints", &user_hint_jump_block_block },
		{ _field_block, "climb hints", &user_hint_climb_block_block },
		{ _field_block, "well hints", &user_hint_well_block_block },
		{ _field_block, "flight hints", &user_hint_flight_block_block },
		{ _field_block, "volume avoidance hints", &user_hint_volume_avoidance_block },
		{ _field_block, "spline hints", &user_hint_spline_block_block },
		{ _field_block, "cookie cutters", &user_hint_cookie_cutter_block_block },
		{ _field_block, "navmesh areas", &user_hint_navmesh_area_block_block },
		{ _field_block, "giant hints", &user_hint_giant_block_block },
		{ _field_block, "flood hints", &user_hint_flood_block_block },
		{ _field_terminator }
	};

	#define USER_HINT_CLIMB_BLOCK_ID { 0x6A67CD6B, 0x706D4B61, 0xA2AC7D7F, 0x935B4514 }
	TAG_STRUCT(
		user_hint_climb_block,
		"user_hint_climb_block",
		"user_hint_climb_block",
		"s_user_hint_climb_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_CLIMB_BLOCK_ID)
	{
		{ _field_short_enum, "hint type", &hint_type_enum },
		{ _field_short_block_index, "Squad group filter", &squad_groups_block_block },
		{ _field_block, "hint vertices", &hint_vertex_block_block },
		{ _field_long_integer, "hint data 0" },
		{ _field_short_integer, "hint data 1" },
		{ _field_byte_integer, "hint data 2" },
		{ _field_byte_integer, "pad1" },
		{ _field_word_flags, "Flags", &user_hint_geometry_flags },
		{ _field_short_block_index, "geometry index", &user_hint_line_segment_block_block },
		{ _field_short_enum, "force hoist height", &forced_hoist_height_enum },
		FIELD_PAD("post-forced-hoist-height", 2),
		{ _field_terminator }
	};

	STRINGS(hint_type_enum)
	{
		"jump link",
		"climb link",
		"vault link",
		"mount link",
		"hoist link",
		"wall jump link",
		"takeoff link",
		"jump mandatory approach"
	};
	STRING_LIST(hint_type_enum, hint_type_enum_strings, _countof(hint_type_enum_strings));

	STRINGS(user_hint_geometry_flags)
	{
		"bidirectional",
		"closed"
	};
	STRING_LIST(user_hint_geometry_flags, user_hint_geometry_flags_strings, _countof(user_hint_geometry_flags_strings));

	STRINGS(forced_hoist_height_enum)
	{
		"none",
		"step",
		"crouch",
		"stand"
	};
	STRING_LIST(forced_hoist_height_enum, forced_hoist_height_enum_strings, _countof(forced_hoist_height_enum_strings));

	#define USER_HINT_COOKIE_CUTTER_BLOCK_STRUCT_ID { 0x51C7F11E, 0xA5064538, 0xAAAFEA9C, 0x8154A396 }
	TAG_STRUCT(
		user_hint_cookie_cutter_block_struct,
		"user_hint_cookie_cutter_block_struct",
		"user_hint_cookie_cutter_block_struct",
		"s_user_hint_cookie_cutter_block_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_COOKIE_CUTTER_BLOCK_STRUCT_ID)
	{
		{ _field_long_integer, "hkaiVolume vtable", _field_id_zero_data },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		{ _field_block, "points", &user_hint_sector_point_block_block },
		{ _field_block, "pointsObjectIds", &hint_object_id_block_block },
		{ _field_real, "z height" },
		{ _field_real, "z sink" },
		{ _field_short_enum, "type", &cookie_cutter_type_enum },
		{ _field_short_integer, "pad" },
		{ _field_long_integer, "runtimeObjectTransformOverrideIndex" },
		{ _field_char_integer, "invalid" },
		{ _field_char_integer, "pad2" },
		{ _field_char_integer, "pad3" },
		{ _field_char_integer, "pad4" },
		{ _field_terminator }
	};

	STRINGS(cookie_cutter_type_enum)
	{
		"carve out",
		"preserve",
		"carve air volume"
	};
	STRING_LIST(cookie_cutter_type_enum, cookie_cutter_type_enum_strings, _countof(cookie_cutter_type_enum_strings));

	#define USER_HINT_FLIGHT_BLOCK_ID { 0xB581E84E, 0x9FF4697, 0xB58594A3, 0xDD4DDF06 }
	TAG_STRUCT(
		user_hint_flight_block,
		"user_hint_flight_block",
		"user_hint_flight_block",
		"s_user_hint_flight_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_FLIGHT_BLOCK_ID)
	{
		{ _field_block, "points", &user_hint_flight_point_block_block },
		{ _field_terminator }
	};

	#define USER_HINT_FLIGHT_POINT_BLOCK_ID { 0x2AA64424, 0xBAF84638, 0x89BFB4AA, 0x35A278B4 }
	TAG_STRUCT(
		user_hint_flight_point_block,
		"user_hint_flight_point_block",
		"user_hint_flight_point_block",
		"s_user_hint_flight_point_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_FLIGHT_POINT_BLOCK_ID)
	{
		{ _field_real_vector_3d, "point" },
		{ _field_terminator }
	};

	#define USER_HINT_FLOOD_BLOCK_ID { 0xFBF96DFB, 0xF74A4483, 0x973BB01D, 0xCCB4FF83 }
	TAG_STRUCT(
		user_hint_flood_block,
		"user_hint_flood_block",
		"user_hint_flood_block",
		"s_user_hint_flood_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_FLOOD_BLOCK_ID)
	{
		{ _field_block, "flood sector hints", &user_hint_flood_sector_block_block },
		{ _field_terminator }
	};

	#define USER_HINT_FLOOD_SECTOR_BLOCK_ID { 0xA81E69FD, 0x8F844CEC, 0x90A753B8, 0x5B664D35 }
	TAG_STRUCT(
		user_hint_flood_sector_block,
		"user_hint_flood_sector_block",
		"user_hint_flood_sector_block",
		"s_user_hint_flood_sector_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_FLOOD_SECTOR_BLOCK_ID)
	{
		{ _field_block, "points", &user_hint_sector_point_block_block },
		{ _field_terminator }
	};

	#define USER_HINT_GIANT_BLOCK_ID { 0xBF7986E, 0x826547BE, 0xA38ED044, 0xDB6C3FF2 }
	TAG_STRUCT(
		user_hint_giant_block,
		"user_hint_giant_block",
		"user_hint_giant_block",
		"s_user_hint_giant_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_GIANT_BLOCK_ID)
	{
		{ _field_block, "giant sector hints", &user_hint_giant_sector_block_block },
		{ _field_block, "giant rail hints", &user_hint_giant_rail_block_block },
		{ _field_terminator }
	};

	#define USER_HINT_GIANT_RAIL_BLOCK_ID { 0xF2320873, 0x2B8B40FF, 0xBC5FF0CD, 0xF5CA7C72 }
	TAG_STRUCT(
		user_hint_giant_rail_block,
		"user_hint_giant_rail_block",
		"user_hint_giant_rail_block",
		"s_user_hint_giant_rail_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_GIANT_RAIL_BLOCK_ID)
	{
		{ _field_short_block_index, "geometry index", &user_hint_line_segment_block_block },
		FIELD_PAD("JLOU", 2),
		{ _field_terminator }
	};

	#define USER_HINT_GIANT_SECTOR_BLOCK_ID { 0x4AD85397, 0xD0D74BDC, 0xB6D37C85, 0x245EB9F3 }
	TAG_STRUCT(
		user_hint_giant_sector_block,
		"user_hint_giant_sector_block",
		"user_hint_giant_sector_block",
		"s_user_hint_giant_sector_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_GIANT_SECTOR_BLOCK_ID)
	{
		{ _field_block, "points", &user_hint_sector_point_block_block },
		{ _field_terminator }
	};

	#define USER_HINT_JUMP_BLOCK_ID { 0x5FAFC377, 0xA4B146AC, 0xA6A374C6, 0xDAFEE5A }
	TAG_STRUCT(
		user_hint_jump_block,
		"user_hint_jump_block",
		"user_hint_jump_block",
		"s_user_hint_jump_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_JUMP_BLOCK_ID)
	{
		{ _field_short_enum, "hint type", &hint_type_enum },
		{ _field_short_block_index, "Squad group filter", &squad_groups_block_block },
		{ _field_block, "hint vertices", &hint_vertex_block_block },
		{ _field_long_integer, "hint data 0" },
		{ _field_short_integer, "hint data 1" },
		{ _field_byte_integer, "hint data 2" },
		{ _field_byte_integer, "pad1" },
		{ _field_word_flags, "Flags", &user_hint_geometry_flags },
		{ _field_short_block_index, "geometry index", &user_hint_parallelogram_block_block },
		{ _field_short_enum, "force jump height", &global_ai_jump_height_enum },
		{ _field_word_flags, "control flags", &jump_flags },
		{ _field_terminator }
	};

	STRINGS(jump_flags)
	{
		"magic lift",
		"vehicle only",
		"railing",
		"vault",
		"down",
		"phase",
		"stop autodown"
	};
	STRING_LIST(jump_flags, jump_flags_strings, _countof(jump_flags_strings));

	#define USER_HINT_LINE_SEGMENT_BLOCK_ID { 0xA392E29A, 0xEE1145F9, 0x93FDF552, 0x799BE4B }
	TAG_STRUCT(
		user_hint_line_segment_block,
		"user_hint_line_segment_block",
		"user_hint_line_segment_block",
		"s_user_hint_line_segment_block",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_LINE_SEGMENT_BLOCK_ID)
	{
		{ _field_long_flags, "Flags", &user_hint_geometry_flags },
		{ _field_real_point_3d, "Point 0" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref0", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref0", &_void },
		{ _field_real_point_3d, "Point 1" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref1", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref1", &_void },
		{ _field_terminator }
	};

	#define USER_HINT_NAVMESH_AREA_BLOCK_STRUCT_ID { 0x60C6E6A6, 0xEC9C446B, 0xAC02F347, 0xACFE022E }
	TAG_STRUCT(
		user_hint_navmesh_area_block_struct,
		"user_hint_navmesh_area_block_struct",
		"user_hint_navmesh_area_block_struct",
		"s_user_hint_navmesh_area_block_struct",
		SET_UNKNOWN0 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_NAVMESH_AREA_BLOCK_STRUCT_ID)
	{
		{ _field_long_integer, "hkaiVolume vtable", _field_id_zero_data },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		{ _field_block, "points", &user_hint_sector_point_block_block },
		{ _field_real, "z height" },
		{ _field_real, "z sink" },
		{ _field_real, "step height" },
		{ _field_long_enum, "type", &navmesh_area_type_enum },
		{ _field_real, "isValid" },
		FIELD_EXPLANATION("Max CONVEX Border Simplify Area", "This controls the amount of simplification applied to internal segments and convex boundary segments"),
		{ _field_real, "Max CONVEX Border Simplify Area" },
		FIELD_EXPLANATION("Max Border Distance Error", "When simplifying internal segments and convex boundary segments, this controls the maximum projected distance by which the simplified segment can deviate from the unsimplified segment"),
		{ _field_real, "Max Border Distance Error" },
		FIELD_EXPLANATION("Max CONCAVE Border Simplify Area", "This controls the amount of simplification applied to concave boundary segments"),
		{ _field_real, "Max CONCAVE Border Simplify Area" },
		FIELD_EXPLANATION("Max Walkable Slope", "Maximum slope AI will traverse (degrees). Don\'t touch unless necessary."),
		{ _field_real, "Max Walkable Slope" },
		FIELD_EXPLANATION("Cosine angle merge control", "Faces will only be merged if the cosine of the angle between their normals is greater than this."),
		{ _field_real, "Cosine angle merge control" },
		FIELD_EXPLANATION("Hole replacement area", "Holes with area less than this are candidates for conversion to quads"),
		{ _field_real, "Hole replacement area" },
		FIELD_EXPLANATION("Partition size", "The maximum number of faces that can be included in a partition. Basically, don\'t change this."),
		{ _field_long_integer, "Partition size" },
		FIELD_EXPLANATION("Loop shrink factor", "The area of any partition loop will not be reduced by more than this fraction"),
		{ _field_real, "Loop shrink factor" },
		{ _field_terminator }
	};

	STRINGS(navmesh_area_type_enum)
	{
		"Navmesh Low Res",
		"Navmesh 2",
		"Navmesh 3",
		"Navmesh 4",
		"Navmesh 5",
		"Navmesh 6",
		"Navmesh 7",
		"Navmesh 8",
		"Navmesh High Res",
		"CUSTOM (Recommended)"
	};
	STRING_LIST(navmesh_area_type_enum, navmesh_area_type_enum_strings, _countof(navmesh_area_type_enum_strings));

	#define USER_HINT_PARALLELOGRAM_BLOCK_ID { 0xDE702C7E, 0x6C544FF7, 0x92C31361, 0x31033915 }
	TAG_STRUCT(
		user_hint_parallelogram_block,
		"user_hint_parallelogram_block",
		"user_hint_parallelogram_block",
		"s_user_hint_parallelogram_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_PARALLELOGRAM_BLOCK_ID)
	{
		{ _field_long_flags, "Flags", &user_hint_geometry_flags },
		{ _field_real_point_3d, "Point 0" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref0", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref0", &_void },
		{ _field_real_point_3d, "Point 1" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref1", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref1", &_void },
		{ _field_real_point_3d, "Point 2" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref2", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref2", &_void },
		{ _field_real_point_3d, "Point 3" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref3", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref3", &_void },
		{ _field_word_flags, "invalid_points", &parallelogram_points_invalid_flags },
		FIELD_PAD("KJHIUF", 2),
		{ _field_terminator }
	};

	STRINGS(parallelogram_points_invalid_flags)
	{
		"1",
		"2",
		"3",
		"4"
	};
	STRING_LIST(parallelogram_points_invalid_flags, parallelogram_points_invalid_flags_strings, _countof(parallelogram_points_invalid_flags_strings));

	#define USER_HINT_SECTOR_POINT_BLOCK_ID { 0x33170C5B, 0x126041FF, 0x8EBBD6A4, 0x4C98464E }
	TAG_STRUCT(
		user_hint_sector_point_block,
		"user_hint_sector_point_block",
		"user_hint_sector_point_block",
		"s_user_hint_sector_point_block",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_SECTOR_POINT_BLOCK_ID)
	{
		{ _field_real_point_3d, "point" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_real_euler_angles_2d, "normal" },
		{ _field_terminator }
	};

	#define USER_HINT_SPLINE_BLOCK_ID { 0x4195BB83, 0x5F8E428A, 0x85E900EA, 0x15FC8C7E }
	TAG_STRUCT(
		user_hint_spline_block,
		"user_hint_spline_block",
		"user_hint_spline_block",
		"s_user_hint_spline_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_SPLINE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_real, "radius", nullptr, "wus" },
		{ _field_real, "time between points", nullptr, "sec" },
		{ _field_block, "control points", &user_hint_spline_control_point_block_block },
		{ _field_short_block_index, "bsp", &scenario_structure_bsp_reference_block_block },
		FIELD_PAD("post-bsp-pad", 2),
		{ _field_block, "volume intersect points", &user_hint_spline_intersect_point_block_block },
		{ _field_terminator }
	};

	#define USER_HINT_SPLINE_CONTROL_POINT_BLOCK_STRUCT_ID { 0xE44C896B, 0x73DD4D16, 0xA510B2D5, 0x73AC4D5D }
	TAG_STRUCT(
		user_hint_spline_control_point_block_struct,
		"user_hint_spline_control_point_block_struct",
		"user_hint_spline_control_point_block_struct",
		"s_user_hint_spline_control_point_block_struct",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_SPLINE_CONTROL_POINT_BLOCK_STRUCT_ID)
	{
		{ _field_word_flags, "flags", &user_hint_spline_segment_flags },
		FIELD_PAD("post-flags-pad", 2),
		{ _field_real_point_3d, "point", _tag_field_attributed_definition_position },
		{ _field_real_vector_3d, "tangent" },
		{ _field_real, "segment arc length" },
		{ _field_terminator }
	};

	STRINGS(user_hint_spline_segment_flags)
	{
		"no attach-detach"
	};
	STRING_LIST(user_hint_spline_segment_flags, user_hint_spline_segment_flags_strings, _countof(user_hint_spline_segment_flags_strings));

	#define USER_HINT_SPLINE_INTERSECT_POINT_BLOCK_STRUCT_ID { 0xE113E95D, 0xBEB24849, 0x9CCCECA4, 0x8EE06828 }
	TAG_STRUCT(
		user_hint_spline_intersect_point_block_struct,
		"user_hint_spline_intersect_point_block_struct",
		"user_hint_spline_intersect_point_block_struct",
		"s_user_hint_spline_intersect_point_block_struct",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_SPLINE_INTERSECT_POINT_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "volume index", &user_hint_volume_avoidance_block },
		FIELD_PAD("post-volume-index-pad", 2),
		{ _field_real_point_3d, "point" },
		{ _field_real_vector_3d, "tangent" },
		{ _field_terminator }
	};

	#define USER_HINT_VOLUME_AVOIDANCE_STRUCT_ID { 0x29245A8E, 0xA494EC9, 0xBD64B83D, 0x2522CB5D }
	TAG_STRUCT(
		user_hint_volume_avoidance_struct,
		"user_hint_volume_avoidance_struct",
		"user_hint_volume_avoidance_struct",
		"s_user_hint_volume_avoidance_struct",
		SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_VOLUME_AVOIDANCE_STRUCT_ID)
	{
		{ _field_long_enum, "type", &user_hint_avoidance_volume_enum },
		{ _field_real_point_3d, "origin", MAKE_ALT_NAMES("center") },
		{ _field_real, "radius" },
		{ _field_real_vector_3d, "facing vector", "for pills" },
		{ _field_real, "height", "for pills" },
		{ _field_short_block_index, "bsp", &scenario_structure_bsp_reference_block_block },
		{ _field_short_integer, "spline_count" },
		{ _field_short_integer, "zone_index" },
		{ _field_short_integer, "area_index" },
		{ _field_terminator }
	};

	STRINGS(user_hint_avoidance_volume_enum)
	{
		"sphere",
		"pill"
	};
	STRING_LIST(user_hint_avoidance_volume_enum, user_hint_avoidance_volume_enum_strings, _countof(user_hint_avoidance_volume_enum_strings));

	#define USER_HINT_WELL_BLOCK_ID { 0xB85E0E09, 0x77864ADD, 0x8518BC91, 0x4109DAC4 }
	TAG_STRUCT(
		user_hint_well_block,
		"user_hint_well_block",
		"user_hint_well_block",
		"s_user_hint_well_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_WELL_BLOCK_ID)
	{
		{ _field_long_flags, "flags", &user_hint_well_geometry_flags },
		{ _field_block, "points", &user_hint_well_point_block_block },
		{ _field_terminator }
	};

	STRINGS(user_hint_well_geometry_flags)
	{
		"bidirectional"
	};
	STRING_LIST(user_hint_well_geometry_flags, user_hint_well_geometry_flags_strings, _countof(user_hint_well_geometry_flags_strings));

	#define USER_HINT_WELL_POINT_BLOCK_ID { 0xEC1F1B2F, 0x3F284D04, 0x8BE174D1, 0x90862606 }
	TAG_STRUCT(
		user_hint_well_point_block,
		"user_hint_well_point_block",
		"user_hint_well_point_block",
		"s_user_hint_well_point_block",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_HINT_WELL_POINT_BLOCK_ID)
	{
		{ _field_short_enum, "type", &user_hint_well_point_type_enum },
		FIELD_PAD("CNXLP", 2),
		{ _field_real_point_3d, "point" },
		{ _field_long_block_index_custom_search, "packedKeyOffaceref", &_void },
		{ _field_long_block_index_custom_search, "navMeshUIDOffaceref", &_void },
		{ _field_real_euler_angles_2d, "normal" },
		{ _field_terminator }
	};

	STRINGS(user_hint_well_point_type_enum)
	{
		"jump",
		"invalid",
		"hoist"
	};
	STRING_LIST(user_hint_well_point_type_enum, user_hint_well_point_type_enum_strings, _countof(user_hint_well_point_type_enum_strings));

	#define USER_INTERFACE_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID { 0xFF5E4703, 0xC3CE4535, 0xBBBF413E, 0x31D62CBE }
	TAG_STRUCT(
		user_interface_globals_definition_struct_definition,
		"user_interface_globals_definition_struct_definition",
		"user_interface_globals_definition_struct_definition",
		"s_user_interface_globals_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_INTERFACE_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_long_flags, "flags", &userinterfacetagglobalsflagsdefinition },
		FIELD_EXPLANATION("Shared Globals", "This is a reference to the ui shared globals tag"),
		{ _field_tag_reference, "shared globals", &user_interface_shared_globals_definition_group_reference },
		FIELD_EXPLANATION("Multiplayer Variant Settings Interface", "This blob defines the ui for setting multiplayer game variant parameters"),
		{ _field_tag_reference, "mp variant settings ui", &multiplayer_variant_settings_interface_definition_group_reference },
		FIELD_EXPLANATION("Game Hopper Localization Strings", "This is for the loc game hopper strings"),
		{ _field_tag_reference, "game hopper descriptions", &multilingual_unicode_string_list_group_reference },
		FIELD_EXPLANATION("Screen Widgets", "These are the HaloX screen widgets"),
		{ _field_block, "cui screen widgets", &cui_component_screen_reference_block_definition_block },
		{ _field_block, "cui overlay cameras", &cui_overlay_camera_block_definition_block },
		{ _field_block, "player model camera settings", &cui_player_model_camera_settings_definition_block },
		{ _field_block, "player model input settings", &cui_player_model_controller_settings_definition_block },
		{ _field_block, "player model camera transition settings", &cui_player_model_transition_settings_definition_block },
		{ _field_tag_reference, "purchase globals", &cookie_purchase_globals_group_reference },
		{ _field_tag_reference, "infinity mission images", MAKE_ALT_NAMES("infinity mission images ref"), &infinityuiimages_group_reference },
		{ _field_block, "active roster settings", &cui_active_roster_settings_block_block },
		FIELD_EXPLANATION("PGCR Categories Definitions", "This is a reference to the tag storing the categories we want to display in the PGCR"),
		{ _field_tag_reference, "pgcr categories definitions", &pgcr_enemy_to_category_mapping_definition_group_reference },
		FIELD_EXPLANATION("PGCR Damage Types Definitions", "This is a reference to the tag storing details about damage types for display in the PGCR"),
		{ _field_tag_reference, "pgcr damage types definitions", &pgcr_damage_type_image_mapping_definition_group_reference },
		FIELD_EXPLANATION("Campaign State Screen Scripts", "Contains a mapping of campaign map IDs and screen scripts used to implement lobby backgrounds that track campaign state. This block should only be non-empty for the main menu."),
		{ _field_block, "campaign state screen scripts", &campaign_state_screen_script_block_definition_block },
		{ _field_real, "spawn-timer countdown rate", nullptr, "counts/sec" },
		{ _field_block, "game intro sequence", &userinterfacegamescreensequencestepdefinition_block },
		{ _field_block, "game round end sequence", &userinterfacegamescreensequencestepdefinition_block },
		{ _field_block, "game next round sequence", &userinterfacegamescreensequencestepdefinition_block },
		{ _field_block, "game end sequence", &userinterfacegamescreensequencestepdefinition_block },
		{ _field_block, "game end with killcam sequence", &userinterfacegamescreensequencestepdefinition_block },
		{ _field_tag_reference, "HUD globals", "global settings for the HUD. Set this for ingame globals.", &user_interface_hud_globals_definition_group_reference },
		{ _field_tag_reference, "portrait poses", &portrait_poses_definition_group_reference },
		{ _field_block, "swap tags", &swaptagreferencedefinition_block },
		{ _field_terminator }
	};

	STRINGS(userinterfacetagglobalsflagsdefinition)
	{
		"show ammo navpoints#show navpoints over ammo-crates and weapon-racks when below a clip-full of ammo"
	};
	STRING_LIST(userinterfacetagglobalsflagsdefinition, userinterfacetagglobalsflagsdefinition_strings, _countof(userinterfacetagglobalsflagsdefinition_strings));

	TAG_REFERENCE(user_interface_shared_globals_definition_group_reference, USER_INTERFACE_SHARED_GLOBALS_DEFINITION_TAG);

	TAG_REFERENCE(multiplayer_variant_settings_interface_definition_group_reference, MULTIPLAYER_VARIANT_SETTINGS_INTERFACE_DEFINITION_TAG);

	TAG_REFERENCE(cookie_purchase_globals_group_reference, COOKIE_PURCHASE_GLOBALS_TAG);

	TAG_REFERENCE(infinityuiimages_group_reference, INFINITYUIIMAGES_TAG);

	TAG_REFERENCE(pgcr_enemy_to_category_mapping_definition_group_reference, PGCR_ENEMY_TO_CATEGORY_MAPPING_DEFINITION_TAG);

	TAG_REFERENCE(pgcr_damage_type_image_mapping_definition_group_reference, PGCR_DAMAGE_TYPE_IMAGE_MAPPING_DEFINITION_TAG);

	TAG_REFERENCE(user_interface_hud_globals_definition_group_reference, USER_INTERFACE_HUD_GLOBALS_DEFINITION_TAG);

	TAG_REFERENCE(portrait_poses_definition_group_reference, PORTRAIT_POSES_DEFINITION_TAG);

	#define USER_INTERFACE_HUD_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID { 0x26873A9C, 0x2C164287, 0xA3863666, 0xDBD13CFC }
	TAG_STRUCT(
		user_interface_hud_globals_definition_struct_definition,
		"user_interface_hud_globals_definition_struct_definition",
		"user_interface_hud_globals_definition_struct_definition",
		"s_user_interface_hud_globals_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_INTERFACE_HUD_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("Motion sensor globals", "Misc settings for the motion sensor"),
		{ _field_byte_flags, "flags", &hudmotionsensorglobalsflags },
		FIELD_PAD("pad0", 3),
		{ _field_real, "active camo appears as enemy when lower than", "active Camo users show up as enemy when active camo is lower than this value (multiplayer)" },
		{ _field_real, "height classified as above", "relative height at which something is above (meters)" },
		{ _field_real, "height classified as below", "relative height at which something is below (meters)" },
		{ _field_real, "threshold speed", "speed at which stuff is visible on the sensor (meters/sec)" },
		{ _field_real, "upwards movement scaling", "multiplier for vertical speed upwards (multiplier)" },
		{ _field_real, "downwards movement scaling", "multiplier for vertical speed downwards (multiplier)" },
		{ _field_real, "crouching movement scaling", "multiplier for speed when crouching (multiplier)" },
		{ _field_real, "normal detection range extension", "how far off the edge of the radar we can detect things (multiplier)" },
		{ _field_real, "vehicle detection range extension", "how far off the edge of the radar we can detect vehicles (multiplier)" },
		{ _field_real, "vehicle radar range", "special range boost used for large flying vehicles (meters)" },
		{ _field_real, "mech radar range", "override for mech/mantis" },
		{ _field_real, "vehicle navigation marker range detection", "range at which hud nav markers will show (meters)" },
		{ _field_real, "vehicle contested flash time", "rate at which a contested vehicle flashes (seconds)" },
		{ _field_real, "activecamo xray animation cooldown ", "duration to wait before showing another animation (seconds)" },
		{ _field_real, "dead people visible time", "time for which we will see dead team mates (seconds)" },
		{ _field_long_integer, "Motion Tracker Fade Frames", "The number of frames that a non moving target will fade out over on the motion tracker." },
		{ _field_long_integer, "Armor Mod Display Counter", "The number of seconds to show the players armor mod in the HUD (seconds)." },
		{ _field_real, "Broadsword Parallax Velocity Override" },
		{ _field_real, "Pelican Parallax Velocity Override" },
		FIELD_EXPLANATION("Fanfare and Messaging globals", "Misc settings for fanfares and messages"),
		{ _field_real, "fanfare display time ", "time to display the fanfares (seconds)" },
		{ _field_real, "fanfare speed up display time ", "time to display when higher priority fanfare queues up (seconds)" },
		{ _field_real, "medal score message lifetime ", "message time of the medal score message (seconds)" },
		{ _field_real, "medal score message restart time ", "time to reset message to when messages collide (seconds)" },
		FIELD_EXPLANATION("Remote motion sensor globals", "Misc settings for the remote motion sensor"),
		{ _field_real, "remote sensor range", "absolute range. (meters)" },
		{ _field_real, "remote sensor weak distance", "distance at which the remote sensor starts to fail (meters)" },
		{ _field_real, "remote sensor failure distance", "distance at which the remote sensor completely fails (meters)" },
		FIELD_EXPLANATION("Damage globals", "HUD damage settings"),
		{ _field_real, "shield bar recent damage duration", "time taken to drain an entire bar of visible damage. less damage drains faster (seconds)" },
		{ _field_real, "damage indicator response duration", "duration which the damage indicator icons will show in the HUD (seconds)" },
		{ _field_real, "damage flash response duration", "used to determine how long to show the fullscreen damage flash (seconds)" },
		{ _field_tag_reference, "tiled mesh seen when hit in 1st person", &bitmap_group_reference$2 },
		{ _field_real, "number of tiles across the screen" },
		{ _field_real, "mesh alpha multiplier" },
		{ _field_real, "mesh alpha gradient" },
		{ _field_real, "mesh alpha at centre (0..1)" },
		{ _field_real, "mesh alpha at screen edge (0..1)" },
		{ _field_array, "screen transform basis", &screen_transform_basis_array_definition$2 },
		FIELD_EXPLANATION("Reticule globals", "Settings for the weapon reticules"),
		{ _field_real, "Reticule maximum spread angle", "Maximum spread for all weapon reticules. This should be set to the largest spread angle of all the weapons.", "degrees" },
		FIELD_EXPLANATION("Sounds", "misc global audio stuff"),
		{ _field_tag_reference, "banned vehicle entrance sound", &sound_combiner_group_sound_old_group_sound_looping_group_sound_group_reference },
		FIELD_EXPLANATION("High Contrast globals", "Settings controlling the high contrast hud rendering"),
		{ _field_byte_flags, "High Contrast Flags", &high_contrast_flags },
		FIELD_PAD("pad1", 3),
		FIELD_EXPLANATION("Dynamic Contrast Settings", "Settings controlling the dynamic contrast"),
		{ _field_real, "Minimum Threshold", "Minimum brightness value at which the dynamic contrast activates." },
		{ _field_real, "Maximum Threshold", "Brightness value at which the dynamic contrast is fully activated." },
		{ _field_real, "Clamp Threshold", "Clamped brightness value. Can be used to limit the intensity of the dynamic contrast, or enable over strength contrast." },
		FIELD_EXPLANATION("Double Draw Settings", "Settings controlling the double draw"),
		{ _field_real, "Darken Factor", "Opacity of the black layer." },
		{ _field_real, "Brighten Factor", "Overbrightness factor to apply to the additive layer." },
		FIELD_EXPLANATION("Text", "Text-related settings"),
		{ _field_block, "string references", &string_file_references_block },
		{ _field_tag_reference, "Interact Message Appear Sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "Interact Message Disappear Sound ", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "medal fanfare animation lifetime ", "animation time of the medal fanfare (seconds)" },
		{ _field_real, "medal fanfare animation in lifetime ", "animation in time of the medal fanfare (seconds)" },
		{ _field_real, "medal fanfare animation out begin time ", "the time to begin the animation out sequence (seconds)" },
		{ _field_real, "event fanfare animation lifetime ", "animation time of the medal fanfare (seconds)" },
		{ _field_real, "event fanfare animation in lifetime ", "animation in time of the medal fanfare (seconds)" },
		{ _field_real, "event fanfare animation out begin time ", "the time to begin the animation out sequence (seconds)" },
		FIELD_EXPLANATION("Player Training", nullptr),
		{ _field_block, "player training data", &player_training_entry_data_block_block },
		{ _field_terminator }
	};

	STRINGS(hudmotionsensorglobalsflags)
	{
		"show scripted pings at any distance"
	};
	STRING_LIST(hudmotionsensorglobalsflags, hudmotionsensorglobalsflags_strings, _countof(hudmotionsensorglobalsflags_strings));

	STRINGS(high_contrast_flags)
	{
		"disable dynamic contrast",
		"disable double draw"
	};
	STRING_LIST(high_contrast_flags, high_contrast_flags_strings, _countof(high_contrast_flags_strings));

	#define USER_INTERFACE_SHARED_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID { 0x520DAD1B, 0x3ABC40F7, 0xA25DED9A, 0xB6D09BC7 }
	TAG_STRUCT(
		user_interface_shared_globals_definition_struct_definition,
		"user_interface_shared_globals_definition_struct_definition",
		"user_interface_shared_globals_definition_struct_definition",
		"s_user_interface_shared_globals_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_INTERFACE_SHARED_GLOBALS_DEFINITION_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("UI Rendering Globals", "miscellaneous rendering globals, more below..."),
		{ _field_short_integer, "inc. text update period", nullptr, "milliseconds" },
		{ _field_short_integer, "inc. text block character", nullptr, "ASCII code" },
		{ _field_real, "near clip plane distance", nullptr, "objects closer than this are not drawn" },
		{ _field_real, "projection plane distance", nullptr, "distance at which objects are rendered when z=0 (normal size)" },
		{ _field_real, "far clip plane distance", nullptr, "objects farther than this are not drawn" },
		FIELD_EXPLANATION("Global Text Strings", "Global UI Text goes here"),
		{ _field_tag_reference, "unicode string list tag", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "unicode damage reporting string list tag", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "unicode fire team member name string list", MAKE_ALT_NAMES("unicode fire team member string list tag"), &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "unicode fire team member service tag string list", &multilingual_unicode_string_list_group_reference },
		FIELD_EXPLANATION("Main menu music", "Looping sound that plays while the main menu is active"),
		{ _field_tag_reference, "main menu music", &sound_looping_group_reference$2 },
		{ _field_tag_reference, "main menu alternate music", &sound_looping_group_reference$2 },
		{ _field_long_integer, "music fade time", nullptr, "milliseconds" },
		FIELD_EXPLANATION("Default Text and Shadow Colors", "These are the default values used for text glyphs and text shadows"),
		{ _field_real_argb_color, "text color" },
		{ _field_real_argb_color, "shadow color" },
		FIELD_EXPLANATION("Color presets", "Colors are defined here and used in text widgets throughout the UI.  Specify a string_id here and the same one in a text widget.  If you don\'t specify one in a text widget, you\'ll use the first entry here."),
		{ _field_block, "color presets", &color_presets_block_block },
		FIELD_EXPLANATION("Tint colors", "These colors are used for tinting widgets by team or player color."),
		{ _field_block, "tint colors", &tint_colors_block_block },
		FIELD_EXPLANATION("Emblem counts", "This lets us define how many images are in the emblem image bitmaps without opening them."),
		{ _field_short_integer, "Primary emblem count" },
		{ _field_short_integer, "Secondary emblem count" },
		FIELD_EXPLANATION("User interface sounds", "Default sound effects for various UI actions"),
		{ _field_tag_reference, "default sounds", &user_interface_sounds_definition_group_reference },
		FIELD_EXPLANATION("HaloX Alerts", "Alerts are triggered by specific events that happen in the game.  The game can require that an error be resolved before the dialog can be dismissed.  Once the error is resolved (or if it doesn\'t require resolution,) the user can dismiss it."),
		{ _field_block, "alert descriptions", &gui_alert_description_block_block },
		FIELD_EXPLANATION("HaloX Dialogs", "Dialogs are brought up by individual screens or UI systems to ask the user a question, typically of the Ok/Cancel sort such as: \'Are you sure you want to leave the game?\'.\nNotes:\n- first item defaults to \'ok\', second item defaults to \'cancel.  third and fourth items don\'t display if they\'re not set\n- if \'b button action\' is set to \'button ignored\' then the b button doesn\'t do anything (such as cancelling)"),
		{ _field_block, "dialog descriptions", &gui_dialog_description_block_block },
		FIELD_EXPLANATION("Content Aspect Ratio Scaling", "These define the scaling that will get applied to UI content and animations when running at the specified display modes"),
		{ _field_real_vector_2d, "16x9" },
		{ _field_real_vector_2d, "4x3" },
		FIELD_EXPLANATION("Blur Constants", "These control the blur kernel used when blurring overlayed UI"),
		{ _field_real, "horizontal blur factor" },
		{ _field_real, "vertical blur factor" },
		FIELD_EXPLANATION("Appearance Model Names", "These specify the name of a scenario-placed biped to be used for the Start Menu Appearance model\nIf you want to use a scenario-placed biped (non-AI), enter the biped name in the \'biped name\' field\nIf you want to use an AI-placed biped, enter the squad name string and starting position string_id"),
		{ _field_string_id, "mc biped name" },
		{ _field_string, "mc ai squad name" },
		{ _field_string_id, "mc ai start pos" },
		{ _field_string_id, "elite biped name" },
		{ _field_string, "elite ai squad name" },
		{ _field_string_id, "elite ai start pos" },
		FIELD_EXPLANATION("Player Portrait Model Names", "These specify the name of a scenario-placed biped to be used for the Player Portrait Appearance model\nEnter the scenario-placed biped (non-AI) name in the \'spartan biped name\' and \'elite biped name\' field"),
		{ _field_string_id, "spartan portrait biped name" },
		{ _field_string_id, "elite portrait biped name" },
		FIELD_EXPLANATION("UI Navigation speed", "This controls tabbing around the UI.  The tab delay is how fast you move around normally. \nTab fast wait is how long the UI waits till using the tab fast delay instead of the tab delay."),
		{ _field_long_integer, "navigation tab delay msec" },
		{ _field_long_integer, "navigation tab fast wait msec" },
		{ _field_long_integer, "navigation tab fast delay msec" },
		FIELD_EXPLANATION("Spinner tab speed", "This is an alternate control for tabbing speed in the spinner.\nThe input (x) is the time the stick has been held down.\nThe output (y) is the time between tab events."),
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "spinner tab speed function", &mapping_function }, // structure_version:2
		{ _field_long_integer, "max input time (x) on the graph (msec)" },
		FIELD_EXPLANATION("Attract Mode Settings", "These control behavior of the attract mode movies"),
		{ _field_long_integer, "delay", nullptr, "seconds" },
		{ _field_block, "PGCR per player tracked incidents", &pgcr_incident_block_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(user_interface_sounds_definition_group_reference, USER_INTERFACE_SOUNDS_DEFINITION_TAG);

	#define USER_INTERFACE_SOUNDS_DEFINITION_STRUCT_DEFINITION_ID { 0x70FFE855, 0x2DE74385, 0x83BAE604, 0x1597E3B6 }
	TAG_STRUCT(
		user_interface_sounds_definition_struct_definition,
		"user_interface_sounds_definition_struct_definition",
		"user_interface_sounds_definition_struct_definition",
		"s_user_interface_sounds_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		USER_INTERFACE_SOUNDS_DEFINITION_STRUCT_DEFINITION_ID)
	{
		FIELD_GROUP_BEGIN("Controller Input Events"),
		{ _field_tag_reference, "tab up", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "tab left", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "tab right", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "tab down", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alt stick up", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alt stick left", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alt stick right", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alt stick down", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alt tab up", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alt tab left", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alt tab right", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alt tab down", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "A button pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "B button pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "X button pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "Y button pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left trigger pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right trigger pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "D-pad up pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "D-pad left pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "D-pad right pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "D-pad down pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "start button pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "back button pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left stick pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right stick pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left bumper pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right bumper pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left thumbstick pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right thumbstick pressed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left stick pressed left", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left stick pressed right", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left stick pressed up", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left stick pressed down", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right stick pressed left", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right stick pressed right", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right stick pressed up", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right stick pressed down", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "A button released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "B button released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "X button released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "Y button released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left trigger released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right trigger released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "D-pad up released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "D-pad left released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "D-pad right released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "D-pad down released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "start button released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "back button released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left stick released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right stick released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left bumper released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right bumper released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left thumbstick released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right thumbstick released", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left stick released left", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left stick released right", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left stick released up", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "left stick released down", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right stick released left", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right stick released right", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right stick released up", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "right stick released down", &sound_combiner_group_sound_old_group_sound_group_reference },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("General"),
		{ _field_tag_reference, "error", &sound_combiner_group_sound_old_group_sound_group_reference },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Screen"),
		{ _field_tag_reference, "screen transition in", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "screen transition out", &sound_combiner_group_sound_old_group_sound_group_reference },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Timers"),
		{ _field_tag_reference, "game start countdown timer first tick", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "game start countdown timer tick", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "game start countdown timer final tick", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alternate countdown timer first tick", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alternate countdown timer tick", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "alternate countdown timer final tick", &sound_combiner_group_sound_old_group_sound_group_reference },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Misc"),
		{ _field_tag_reference, "matchmaking reveal", &sound_combiner_group_sound_old_group_sound_group_reference },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Exit Experience"),
		{ _field_tag_reference, "game completion", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "winning bonus", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "hopper bonus", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "boost bonus", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "fasttrack bonus", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "totals", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "subrank up", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "rank up", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "completed", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "counter loop", &sound_looping_group_reference$2 },
		{ _field_tag_reference, "score bonus", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "rewards", &sound_combiner_group_sound_old_group_sound_group_reference },
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define VARIANT_GLOBALS_STRUCT_DEFINITION_ID { 0xE2391158, 0x992D43DD, 0x997FF513, 0xE90C1932 }
	TAG_STRUCT(
		variant_globals_struct_definition,
		"variant_globals_struct_definition",
		"variant_globals_struct_definition",
		"s_variant_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VARIANT_GLOBALS_STRUCT_DEFINITION_ID)
	{
		{ _field_block, "map_variants", &single_variant_block_block },
		{ _field_block, "game_variants", &single_variant_block_block },
		{ _field_block, "fallback_hoppers", &fallbackhopperfileblock_block },
		{ _field_terminator }
	};

	#define VARIANT_OPTION_BLOCK_ID { 0xE174884E, 0x69AD477F, 0xB879C646, 0x23019A6 }
	TAG_STRUCT(
		variant_option_block,
		"variant_option_block",
		"variant_option_block",
		"s_variant_option_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VARIANT_OPTION_BLOCK_ID)
	{
		FIELD_EXPLANATION("SUB-CATEGORY", "If this entry leads to a sub-category of UI, the tag reference to that chain of UI goes here"),
		{ _field_tag_reference, "sub-category", &multiplayer_variant_settings_interface_definition_group_reference },
		FIELD_EXPLANATION("PLAYER TRAIT", "If this entry leads to player-trait UI, you can use a tag reference to player trait template UI and the player trait category here"),
		{ _field_tag_reference, "player trait ui", &multiplayer_variant_settings_interface_definition_group_reference },
		{ _field_long_enum, "player trait category", &game_engine_settings },
		FIELD_EXPLANATION("CATEGORY NAME", "string_id name used for the category labelling (used for both sub-category and player-trait references)"),
		{ _field_string_id, "category name" },
		FIELD_EXPLANATION("CATEGORY DESCRIPTION", "string_id description used for the category description (used for both sub-category and player-trait references)"),
		{ _field_string_id, "category description" },
		FIELD_EXPLANATION("VALUE-PAIRS", "If this entry leads to parameter value editing UI, the tag reference to those text-value pairs goes here"),
		{ _field_tag_reference, "value pairs", &text_value_pair_definition_group_reference },
		{ _field_terminator }
	};

	STRINGS(game_engine_settings)
	{
		"game base misc",
		"game base respawn",
		"game base social",
		"game base map",
		"game base prototype",
		"powerup duration",
		"ctf top level options",
		"slayer top level options",
		"oddball top level options",
		"king top level options",
		"sandbox top level options",
		"sandbox in-forge options",
		"juggernaut top level options",
		"territories top level options",
		"assault top level options",
		"infection top level options",
		"vip top level options",
		"training top level options",
		"mosh top level options",
		"custom top level options",
		"map override advanced options",
		"respawn advanced options",
		"respawn modifiers",
		"slayer primary options",
		"slayer advanced options",
		"slayer scoring options",
		"oddball primary options",
		"oddball advanced options",
		"assault primary options",
		"assault advanced options",
		"ctf primary options",
		"ctf advanced options",
		"juggernaut primary options",
		"juggernaut advanced options",
		"king primary options",
		"king advanced options",
		"infection primary options",
		"infection advanced options",
		"infection scoring options",
		"target training primary options",
		"training advanced options",
		"target 1 setup",
		"target 2 setup",
		"target 3 setup",
		"target 4 setup",
		"target 5 setup",
		"target 6 setup",
		"target 7 setup",
		"target 8 setup",
		"target 9 setup",
		"target 10 setup",
		"vip primary options",
		"vip advanced options",
		"territories primary options",
		"territories advanced options",
		"ai template traits",
		"campaign top level options",
		"survival top level options",
		"firefight top level options",
		"megalo options submenu trigger",
		"survival primary options",
		"survival scenario settings options",
		"survival set options",
		"survival round options",
		"survival round 0 category options",
		"survival round 0 skulls category options",
		"survival round_0_initial_wave options",
		"survival round_0_primary_wave options",
		"survival round_0_boss_wave options",
		"survival round 1 category options",
		"survival round 1 skulls category options",
		"survival round_1_initial_wave options",
		"survival round_1_primary_wave options",
		"survival round_1_boss_wave options",
		"survival round 2 category options",
		"survival round 2 skulls category options",
		"survival round_2_initial_wave options",
		"survival round_2_primary_wave options",
		"survival round_2_boss_wave options",
		"survival round template category options",
		"survival round template skulls category options",
		"survival round_template_initial_wave options",
		"survival round_template_primary_wave options",
		"survival round_template_boss_wave options",
		"survival bonus_wave skulls category options",
		"survival bonus_wave options",
		"survival spartan options",
		"survival elite options",
		"survival_ai_traits traits",
		"survival_ai_traits templated",
		"survival lives options",
		"survival loadout options",
		"survival objective options",
		"survival custom skull options",
		"custom skull red options",
		"custom skull yellow options",
		"custom skull blue options",
		"red_skull_ai_traits traits",
		"red_skull_ai_traits templated",
		"yellow_skull_ai_traits traits",
		"yellow_skull_ai_traits templated",
		"blue_skull_ai_traits traits",
		"blue_skull_ai_traits templated",
		"spartan loadouts",
		"spartan_loadouts_tier1",
		"spartan_loadouts_tier1_loadout0",
		"spartan_loadouts_tier1_loadout1",
		"spartan_loadouts_tier1_loadout2",
		"spartan_loadouts_tier1_loadout3",
		"spartan_loadouts_tier1_loadout4",
		"spartan_loadouts_tier2",
		"spartan_loadouts_tier2_loadout0",
		"spartan_loadouts_tier2_loadout1",
		"spartan_loadouts_tier2_loadout2",
		"spartan_loadouts_tier2_loadout3",
		"spartan_loadouts_tier2_loadout4",
		"spartan_loadouts_tier3",
		"spartan_loadouts_tier3_loadout0",
		"spartan_loadouts_tier3_loadout1",
		"spartan_loadouts_tier3_loadout2",
		"spartan_loadouts_tier3_loadout3",
		"spartan_loadouts_tier3_loadout4",
		"elite loadouts",
		"elite_loadouts_tier1",
		"elite_loadouts_tier1_loadout0",
		"elite_loadouts_tier1_loadout1",
		"elite_loadouts_tier1_loadout2",
		"elite_loadouts_tier1_loadout3",
		"elite_loadouts_tier1_loadout4",
		"elite_loadouts_tier2",
		"elite_loadouts_tier2_loadout0",
		"elite_loadouts_tier2_loadout1",
		"elite_loadouts_tier2_loadout2",
		"elite_loadouts_tier2_loadout3",
		"elite_loadouts_tier2_loadout4",
		"elite_loadouts_tier3",
		"elite_loadouts_tier3_loadout0",
		"elite_loadouts_tier3_loadout1",
		"elite_loadouts_tier3_loadout2",
		"elite_loadouts_tier3_loadout3",
		"elite_loadouts_tier3_loadout4",
		"infinity settings",
		"ordnance",
		"personal ordnance",
		"personal ordnance - left bank",
		"personal ordnance - middle bank",
		"personal ordnance - right bank",
		"red powerup",
		"yellow powerup",
		"blue powerup",
		"traits",
		"kill rewards",
		"player traits base player",
		"player traits respawn",
		"player traits red powerup primary",
		"player traits blue powerup primary",
		"player traits yellow powerup primary",
		"player traits custom powerup primary",
		"player traits survival spartan player",
		"player traits survival elite player",
		"player traits elite respawn",
		"player traits red skull spartan",
		"player traits red skull elite",
		"player traits yellow skull spartan",
		"player traits yellow skull elite",
		"player traits blue skull spartan",
		"player traits blue skull elite",
		"player traits sandbox editor",
		"player traits megalo custom 1",
		"player traits megalo custom 2",
		"player traits megalo custom 3",
		"player traits megalo custom 4",
		"player traits megalo custom dynamic 1",
		"player traits megalo custom dynamic 2",
		"player traits megalo custom dynamic 3",
		"player traits megalo custom dynamic 4",
		"player traits red powerup secondary",
		"player traits blue powerup secondary",
		"player traits yellow powerup secondary",
		"player traits custom powerup secondary",
		"trait zone alpha player traits",
		"trait zone bravo player traits",
		"trait zone charlie player traits",
		"trait zone delta player traits",
		"player template traits",
		"player template traits shields",
		"player template traits weapons",
		"player template traits movement",
		"player template traits sensors",
		"player template traits appearance",
		"player template traits abilities",
		"editor template traits",
		"editor template traits shields",
		"editor template traits weapons",
		"editor template traits movement",
		"editor template traits sensors",
		"editor template traits appearance",
		"editor template traits abilities",
		"run-time template traits",
		"run-time template traits shields",
		"run-time template traits weapons",
		"run-time template traits movement",
		"run-time template traits sensors",
		"run-time template traits appearance",
		"run-time template traits abilities"
	};
	STRING_LIST(game_engine_settings, game_engine_settings_strings, _countof(game_engine_settings_strings));

	TAG_REFERENCE(text_value_pair_definition_group_reference, TEXT_VALUE_PAIR_DEFINITION_TAG);

	#define VARIANT_SETTING_EDIT_REFERENCE_BLOCK_ID { 0x7364A0E9, 0x967C43F8, 0x8C275EB9, 0xAF488C6F }
	TAG_STRUCT(
		variant_setting_edit_reference_block,
		"variant_setting_edit_reference_block",
		"variant_setting_edit_reference_block",
		"s_variant_setting_edit_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VARIANT_SETTING_EDIT_REFERENCE_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_long_enum, "setting category", &game_engine_settings },
		{ _field_block, "options", &variant_option_block_block },
		{ _field_terminator }
	};

	#define VECTOR_HUD_DEFINITION_STRUCT_DEFINITION_ID { 0xE9E8447E, 0x7C54444A, 0x8C686647, 0xF6B8E4B6 }
	TAG_STRUCT(
		vector_hud_definition_struct_definition,
		"vector_hud_definition_struct_definition",
		"vector_hud_definition_struct_definition",
		"s_vector_hud_definition_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VECTOR_HUD_DEFINITION_STRUCT_DEFINITION_ID)
	{
		{ _field_data, "raw hud data", &vector_hud_raw_data },
		{ _field_terminator }
	};

	#define VECTORARTVERTEXBUFFERDESCRIPTORSTRUCT_ID { 0x9DC8488, 0x852B4195, 0x8B27777E, 0x98E00F6C }
	TAG_STRUCT(
		vectorartvertexbufferdescriptorstruct,
		"vectorartVertexBufferDescriptorStruct",
		"vectorartVertexBufferDescriptorStruct",
		"s_vectorartvertexbufferdescriptorstruct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_UNKNOWN8 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VECTORARTVERTEXBUFFERDESCRIPTORSTRUCT_ID)
	{
		{ _field_data, "vertices", &vectorartvertexbufferdata },
		{ _field_terminator }
	};

	#define VECTORART_ASSET_BLOCK_STRUCT_ID { 0x6AAD9915, 0x5B314294, 0x830B2083, 0x1FE05B82 }
	TAG_STRUCT(
		vectorart_asset_block_struct,
		"vectorart_asset_block_struct",
		"vectorart_asset_block_struct",
		"s_vectorart_asset_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VECTORART_ASSET_BLOCK_STRUCT_ID)
	{
		{ _field_char_enum, "runtime flags", &g_polyartassetstateflags },
		FIELD_PAD("MERP", 3),
		{ _field_real, "antialiasing extent size" },
		{ _field_real, "import fudge factor (suggested 0.5)" },
		{ _field_real_point_2d, "bounds" },
		{ _field_real, "curve smoothness" },
		{ _field_block, "vertices", &polyartvertexblock_block },
		{ _field_block, "indices", &polyartindexblock_block },
		{ _field_block, "pc vertex buffers", &vertexbuffersblock_block },
		{ _field_block, "pc index buffers", &indexbuffersblock_block },
		{ _field_api_interop, "vertex buffer interop", &vectorartvertexbufferinteropdefinition },
		{ _field_api_interop, "index buffer interop", &polyartindexbufferinteropdefinition },
		{ _field_terminator }
	};

	#define VEHICLESPAWNINFLUENCEBLOCK_ID { 0x64AE7B1C, 0x32A64906, 0x892A75B8, 0xEBC0BE95 }
	TAG_STRUCT(
		vehiclespawninfluenceblock,
		"vehicleSpawnInfluenceBlock",
		"vehicleSpawnInfluenceBlock",
		"s_vehiclespawninfluenceblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VEHICLESPAWNINFLUENCEBLOCK_ID)
	{
		{ _field_tag_reference, "vehicle", &vehicle_group_reference$4 },
		{ _field_real, "box width", nullptr, "wu" },
		{ _field_real, "box min height", "How far influencer will extend below unit's origin.  Will usually be negative.  (If min and max are both 0, unit radius is used)", "wu" },
		{ _field_real, "box max height", "How far influencer will extend above unit's origin.  Will usually be positive.  (If min and max are both 0, unit radius is used)", "wu" },
		{ _field_real, "lead time", nullptr, "seconds" },
		{ _field_real, "minimum velocity", nullptr, "wu/sec" },
		{ _field_real, "weight" },
		{ _field_terminator }
	};

	TAG_REFERENCE(vehicle_group_reference$4, VEHICLE_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY | TAG_REFERENCE_FLAG_DEPENDENCY_FOR_CACHE_FILE_SHARING);

	#define VEHICLE_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0xD97D47DE, 0x61A34B62, 0x9D457953, 0x3628F7DE }
	TAG_STRUCT(
		vehicle_block_index_flags_block_struct,
		"vehicle_block_index_flags_block_struct",
		"vehicle_block_index_flags_block_struct",
		"s_vehicle_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VEHICLE_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_vehicle_palette_block_block },
		{ _field_terminator }
	};

	#define VEHICLE_GROUP$2_ID { 0xC6A4B989, 0x9714F2B, 0xBF522976, 0xF69B2344 }
	VERSIONED_TAG_STRUCT(
		vehicle_group$2,
		"vehicle",
		"vehicle_group",
		"s_vehicle_group$2",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VEHICLE_GROUP$2_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 39 },
		{ _field_struct, "unit", &unit_struct_definition }, // structure_version:1
		FIELD_GROUP_BEGIN("$$$ VEHICLE $$$"),
		{ _field_long_flags, "flags", &vehicle_flags$2 },
		FIELD_EXPLANATION("physics type", "define one of the following blocks for the type of physics you wish this vehicle to have."),
		{ _field_struct, "physics types", &vehicle_physics_types_struct },
		FIELD_EXPLANATION("friction and antigravity points", nullptr),
		{ _field_struct, "havok vehicle physics", &havok_vehicle_physics_struct },
		{ _field_block, "tricks", &unit_trick_definition_block_block },
		{ _field_char_enum, "player training vehicle type", &player_training_vehicle_type_enum },
		{ _field_char_enum, "vehicle size", "The size determine what kind of seats in larger vehicles it may occupy (i.e. small or large cargo seats)", &vehicle_size_enum },
		{ _field_char_integer, "complex suspension sample count", "How many additional raycasts to perform per side of a tire." },
		FIELD_PAD("VQWHV", 1),
		{ _field_angle, "complex suspension distribution angle", "0-90 degrees of the wedge portion of the wheel to test suspension", "degrees" },
		{ _field_real, "complex suspension wheel diameter" },
		{ _field_real, "complex suspension wheel width" },
		{ _field_real, "minimum flipping angular velocity" },
		{ _field_real, "maximum flipping angular velocity" },
		{ _field_real, "crouch transition time", nullptr, "seconds" },
		{ _field_real, "HOOJYTSU" },
		{ _field_real, "seat enterance acceleration scale", "how much do we scale the force the vehicle the applies down on the seat when he enters. 0 == no acceleration" },
		{ _field_real, "seat exit accelersation scale", "how much do we scale the force the vehicle the applies down on the seat when he exits. 0 == no acceleration" },
		{ _field_real, "blur speed" },
		{ _field_string_id, "flip message" },
		FIELD_EXPLANATION("sounds and effects", nullptr),
		{ _field_tag_reference, "Player vehicle sound bank", "High quality player sound bank to be prefetched. Can be empty.", &soundbank_group_reference },
		{ _field_tag_reference, "suspension sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "fake audio speed - speed increase amount", "amount to increase per frame while speeding up(.002 is a good number)" },
		{ _field_real, "fake audio speed - boost speed increase amount", "amount to increase per frame while boosting (.006 is a good number)" },
		{ _field_real, "fake audio speed - speed decrease amount", "amount to decrease per frame while slowing down (.002 is a good number)" },
		{ _field_real, "fake audio speed - non-boost limit", "max value while not boosting (maximum is 1)" },
		{ _field_real, "fake audio speed - max speed scale", "scales speed value. Must be > 0 for this to work (ie for banshee, 5 is good)" },
		{ _field_block, "Sound RTPCs", &soundrtpcblock_block },
		{ _field_block, "Sound Sweeteners", &soundsweetenerblock_block },
		{ _field_tag_reference, "special effect", &effect_group_reference },
		{ _field_tag_reference, "driver boost damage effect or response", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "rider boost damage effect or response", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_string_id, "vehicle name" },
		{ _field_block, "physics transitions", &physics_transitions_block_block },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 1, 222 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ UNIT $$$"),
		{ _field_long_flags, "flags", &unit_flags_part1, _field_id_dumb },
		{ _field_long_flags, "flags2", &unit_flags_part2, _field_id_dumb },
		{ _field_short_enum, "default team", &unit_default_teams$2 },
		{ _field_short_enum, "constant sound volume", &ai_sound_volume_enum },
		{ _field_tag_reference, "hologram unit reference", &biped_group_vehicle_group_reference },
		{ _field_block, "campaign metagame bucket", &campaign_metagame_bucket_block_block },
		{ _field_block, "screen effects", &unit_screen_effect_block_block },
		{ _field_real, "camera stiffness" },
		{ _field_struct, "unit camera", &unit_camera_struct },
		FIELD_EXPLANATION("sync action camera fields", nullptr),
		{ _field_struct, "sync action camera", &unit_camera_struct },
		{ _field_tag_reference, "assasination start damage response", &damage_response_definition_group_reference },
		{ _field_tag_reference, "assassination weapon", &weapon_group_reference },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon stow marker", "the anchor we attach the knife to when we stow it" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon out marker", "the anchor we attach the knife to when we pull it out" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon anchor marker", "the marker on the knife that we anchor to the biped" },
		{ _field_tag_reference, "seat acceleration", &spring_acceleration_group_reference },
		FIELD_GROUP_BEGIN("pings"),
		{ _field_real, "soft ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "soft ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "hard ping interrupt time", nullptr, "seconds" },
		{ _field_real, "soft death direction speed threshold", "moving faster than this means you will soft death in the movement direction. zero defaults to damage direction.", "wu/s" },
		{ _field_real, "hard death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death time", nullptr, "seconds" },
		{ _field_real, "pain screen duration", "The duration of the pain function\n0 defaults to 0.5", "seconds" },
		{ _field_real, "pain screen region fade out duration", "The time it takes to fade out a damage region that is no longer the most recent damage region to be hit", "seconds" },
		{ _field_real_fraction, "pain screen region fade out weight threshold", "The threshold weight below which the focus channel must fall before we can cross fade to another region.", nullptr, "[0,1]" },
		{ _field_angle, "pain screen angle tolerance", "The tolerance angle between next and previous damage directions, below which we randomly vary the ping direction.", "degrees" },
		{ _field_angle, "pain screen angle randomness", "The maximum random angle to vary the incoming ping direction by if it's too close to the previous ping.", "degrees" },
		{ _field_real, "defensive screen duration", "The duration of the defensive function\n0 defaults to 2.0", "seconds" },
		{ _field_real_fraction, "defensive screen scrub fallback fraction", "When receiving multiple pings, this is the min percentage of the defensive screen scrub value will fallback to.", nullptr, "[0,1]" },
		FIELD_GROUP_END(),
		{ _field_real, "distance of dive anim", "this must be set to tell the AI how far it should expect our dive animation to move us", "world units" },
		{ _field_real_fraction, "terminal velocity fall ratio", "ratio of airborne_arc animation to switch off falling overlay" },
		FIELD_GROUP_BEGIN("stun"),
		{ _field_real, "stun movement penalty", "1.0 prevents moving while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun turning penalty", "1.0 prevents turning while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun jumping penalty", "1.0 prevents jumping while stunned", nullptr, "[0,1]" },
		{ _field_real, "minimum stun time", "all stunning damage will last for at least this long", "seconds" },
		{ _field_real, "maximum stun time", "no stunning damage will last for longer than this", "seconds" },
		FIELD_GROUP_END(),
		{ _field_real, "feign death chance", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign repeat chance", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "spawned turret character", "automatically created character when this unit is driven", &character_group_reference },
		{ _field_short_integer_bounds, "spawned actor count", "number of actors which we spawn" },
		{ _field_real, "spawned velocity", "velocity at which we throw spawned actors" },
		FIELD_GROUP_BEGIN("aiming/looking"),
		{ _field_string_id, "target aiming pivot marker name", "set this to have your weapon barrel point at its calcualed target instead of matching the aiming of the unit controlling it.  This marker should be along the barrel at point that doesn't move when the barrel pitches up and down." },
		{ _field_angle, "aiming velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "aiming acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual aiming modifier", nullptr, nullptr, "[0,1]" },
		{ _field_angle, "looking velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "looking acceleration maximum", nullptr, "degrees per second squared" },
		FIELD_GROUP_END(),
		{ _field_real, "object velocity maximum", "Debug value for object velocity that corresponds to a blend screen weight of 1, 0 defaults to 5.0", "world units per second" },
		{ _field_string_id, "right_hand_node", "where the primary weapon is attached" },
		{ _field_string_id, "left_hand_node", "where the seconday weapon is attached (for dual-pistol modes)" },
		{ _field_struct, "more damn nodes", &unit_additional_node_names_struct }, // structure_version:1
		{ _field_short_enum, "melee damage class", &global_melee_class_enum_definition },
		FIELD_PAD("PAD", 2),
		FIELD_GROUP_BEGIN("melee damage"),
		{ _field_tag_reference, "melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "native melee override", "when set, characters will melee with these settings rather than their actual held weapon. (for characters that melee with an off hand)", &weapon_group_reference },
		{ _field_struct, "your momma", &unit_boarding_melee_struct }, // structure_version:2
		FIELD_GROUP_END(),
		{ _field_short_enum, "motion sensor blip size", &global_chud_blip_type_definition },
		{ _field_short_enum, "item owner size", &unit_item_owner_size_enum },
		{ _field_string_id, "equipment variant name" },
		{ _field_string_id, "grounded equipment variant name" },
		{ _field_block, "postures", &unit_postures_block_block },
		{ _field_block, "Hud audio cues", &hud_unit_sound_block_block },
		{ _field_block, "dialogue variants", &dialogue_variant_block_block },
		FIELD_GROUP_BEGIN("standard grenade throw"),
		{ _field_real, "grenade angle", nullptr, "degrees" },
		{ _field_real, "grenade angle max elevation", nullptr, "degrees" },
		{ _field_real, "grenade angle min elevation", nullptr, "degrees" },
		{ _field_real, "grenade velocity", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("sprinting grenade throw"),
		{ _field_real, "grenade angle (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade angle max elevation (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade angle min elevation (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade velocity (sprinting)", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("primary weapon toss"),
		{ _field_real, "weapon angle", nullptr, "degrees" },
		{ _field_real, "weapon angle max elevation", nullptr, "degrees" },
		{ _field_real, "weapon angle min elevation", nullptr, "degrees" },
		{ _field_real, "weapon velocity", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		{ _field_short_enum, "grenade type", &global_grenade_type_enum },
		{ _field_short_integer, "grenade count" },
		{ _field_block, "powered seats", &powered_seat_block_block },
		{ _field_block, "weapons", &unit_weapon_block_block },
		{ _field_block, "target tracking", &global_target_tracking_parameters_block_block },
		{ _field_block, "seats", &unit_seat_block_block },
		FIELD_GROUP_BEGIN("open/close"),
		{ _field_real, "opening time", "how long the unit takes to open when the hs_function unit_open is called\nThe current open state can be retrieved from the object function unit_open", "s" },
		{ _field_real, "closing time", "you don't have to go home, but you can't stay here", "s" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("EMP Disabling"),
		{ _field_real, "emp disabled time", nullptr, "seconds" },
		{ _field_real, "emp disabled time (PVP)", "Set to -1 for not disabled in MP but disabled in SP", "seconds " },
		{ _field_tag_reference, "emp disabled effect", &effect_group_reference },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Boost"),
		{ _field_struct, "boost", &unit_boost_struct },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Lipsync", nullptr),
		{ _field_struct, "lipsync", &unit_lipsync_scales_struct }, // structure_version:1
		FIELD_EXPLANATION("Exit and Detach", nullptr),
		{ _field_tag_reference, "exit and detach damage", &damage_effect_group_reference },
		{ _field_tag_reference, "exit and detach weapon", &weapon_group_reference$2 },
		FIELD_EXPLANATION("Experience", nullptr),
		{ _field_short_integer, "experience for kill" },
		{ _field_short_integer, "experience for assist" },
		{ _field_tag_reference, "hero assist equipment", "this is where you stick an equipment that the biped will always have, to implement the bizarrely named hero assist", &equipment_group_reference },
		{ _field_real, "bailout threshold", "the speed above which units will bail out of a vehicle instead of just exiting", "wu/s" },
		FIELD_GROUP_END(),
		{ _field_real_fraction, "iron sight weapon dampening", "when using iron sights, how much to scale the weapon overlays to steady the gun (0 = rock steady, 1= no dampening)", "(0-1)" },
		FIELD_GROUP_BEGIN("Birthing"),
		{ _field_struct, "birth", &unit_birth_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ VEHICLE $$$"),
		{ _field_long_flags, "flags", &vehicle_flags$2 },
		FIELD_EXPLANATION("physics type", "define one of the following blocks for the type of physics you wish this vehicle to have."),
		{ _field_struct, "physics types", &vehicle_physics_types_struct },
		FIELD_EXPLANATION("friction and antigravity points", nullptr),
		{ _field_struct, "havok vehicle physics", &havok_vehicle_physics_struct },
		{ _field_block, "tricks", &unit_trick_definition_block_block },
		{ _field_char_enum, "player training vehicle type", &player_training_vehicle_type_enum },
		{ _field_char_enum, "vehicle size", "The size determine what kind of seats in larger vehicles it may occupy (i.e. small or large cargo seats)", &vehicle_size_enum },
		{ _field_char_integer, "complex suspension sample count", "How many additional raycasts to perform per side of a tire." },
		FIELD_PAD("VQWHV", 1),
		{ _field_angle, "complex suspension distribution angle", "0-90 degrees of the wedge portion of the wheel to test suspension", "degrees" },
		{ _field_real, "complex suspension wheel diameter" },
		{ _field_real, "complex suspension wheel width" },
		{ _field_real, "minimum flipping angular velocity" },
		{ _field_real, "maximum flipping angular velocity" },
		{ _field_real, "crouch transition time", nullptr, "seconds" },
		{ _field_real, "HOOJYTSU" },
		{ _field_real, "seat enterance acceleration scale", "how much do we scale the force the vehicle the applies down on the seat when he enters. 0 == no acceleration" },
		{ _field_real, "seat exit accelersation scale", "how much do we scale the force the vehicle the applies down on the seat when he exits. 0 == no acceleration" },
		{ _field_real, "blur speed" },
		{ _field_string_id, "flip message" },
		FIELD_EXPLANATION("sounds and effects", nullptr),
		{ _field_tag_reference, "Player vehicle sound bank", "High quality player sound bank to be prefetched. Can be empty.", &soundbank_group_reference },
		{ _field_tag_reference, "suspension sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "fake audio speed - speed increase amount", "amount to increase per frame while speeding up(.002 is a good number)" },
		{ _field_real, "fake audio speed - boost speed increase amount", "amount to increase per frame while boosting (.006 is a good number)" },
		{ _field_real, "fake audio speed - speed decrease amount", "amount to decrease per frame while slowing down (.002 is a good number)" },
		{ _field_real, "fake audio speed - non-boost limit", "max value while not boosting (maximum is 1)" },
		{ _field_real, "fake audio speed - max speed scale", "scales speed value. Must be > 0 for this to work (ie for banshee, 5 is good)" },
		{ _field_block, "Sound RTPCs", &soundrtpcblock_block },
		{ _field_block, "Sound Sweeteners", &soundsweetenerblock_block },
		{ _field_tag_reference, "special effect", &effect_group_reference },
		{ _field_tag_reference, "driver boost damage effect or response", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "rider boost damage effect or response", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_string_id, "vehicle name" },
		{ _field_block, "physics transitions", &physics_transitions_block_block },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 237 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ UNIT $$$"),
		{ _field_long_flags, "flags", &unit_flags_part1, _field_id_dumb },
		{ _field_long_flags, "flags2", &unit_flags_part2, _field_id_dumb },
		{ _field_short_enum, "default team", &unit_default_teams$2 },
		{ _field_short_enum, "constant sound volume", &ai_sound_volume_enum },
		{ _field_tag_reference, "hologram unit reference", &biped_group_vehicle_group_reference },
		{ _field_block, "campaign metagame bucket", &campaign_metagame_bucket_block_block },
		{ _field_block, "screen effects", &unit_screen_effect_block_block },
		{ _field_real, "camera stiffness" },
		{ _field_struct, "unit camera", &unit_camera_struct },
		FIELD_EXPLANATION("sync action camera fields", nullptr),
		{ _field_struct, "sync action camera", &unit_camera_struct },
		{ _field_tag_reference, "assasination start damage response", &damage_response_definition_group_reference },
		{ _field_tag_reference, "assassination weapon", &weapon_group_reference },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon stow marker", "the anchor we attach the knife to when we stow it" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon out marker", "the anchor we attach the knife to when we pull it out" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "assassination weapon anchor marker", "the marker on the knife that we anchor to the biped" },
		{ _field_tag_reference, "seat acceleration", &spring_acceleration_group_reference },
		FIELD_GROUP_BEGIN("pings"),
		{ _field_real, "soft ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "soft ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "hard ping interrupt time", nullptr, "seconds" },
		{ _field_real, "soft death direction speed threshold", "moving faster than this means you will soft death in the movement direction. zero defaults to damage direction.", "wu/s" },
		{ _field_real, "hard death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death time", nullptr, "seconds" },
		{ _field_real, "pain screen duration", "The duration of the pain function\n0 defaults to 0.5", "seconds" },
		{ _field_real, "pain screen region fade out duration", "The time it takes to fade out a damage region that is no longer the most recent damage region to be hit", "seconds" },
		{ _field_real_fraction, "pain screen region fade out weight threshold", "The threshold weight below which the focus channel must fall before we can cross fade to another region.", nullptr, "[0,1]" },
		{ _field_angle, "pain screen angle tolerance", "The tolerance angle between next and previous damage directions, below which we randomly vary the ping direction.", "degrees" },
		{ _field_angle, "pain screen angle randomness", "The maximum random angle to vary the incoming ping direction by if it's too close to the previous ping.", "degrees" },
		{ _field_real, "defensive screen duration", "The duration of the defensive function\n0 defaults to 2.0", "seconds" },
		{ _field_real_fraction, "defensive screen scrub fallback fraction", "When receiving multiple pings, this is the min percentage of the defensive screen scrub value will fallback to.", nullptr, "[0,1]" },
		FIELD_GROUP_END(),
		{ _field_real, "distance of dive anim", "this must be set to tell the AI how far it should expect our dive animation to move us", "world units" },
		{ _field_real_fraction, "terminal velocity fall ratio", "ratio of airborne_arc animation to switch off falling overlay" },
		FIELD_GROUP_BEGIN("stun"),
		{ _field_real, "stun movement penalty", "1.0 prevents moving while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun turning penalty", "1.0 prevents turning while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun jumping penalty", "1.0 prevents jumping while stunned", nullptr, "[0,1]" },
		{ _field_real, "minimum stun time", "all stunning damage will last for at least this long", "seconds" },
		{ _field_real, "maximum stun time", "no stunning damage will last for longer than this", "seconds" },
		FIELD_GROUP_END(),
		{ _field_real, "feign death chance", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign repeat chance", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "spawned turret character", "automatically created character when this unit is driven", &character_group_reference },
		{ _field_short_integer_bounds, "spawned actor count", "number of actors which we spawn" },
		{ _field_real, "spawned velocity", "velocity at which we throw spawned actors" },
		FIELD_GROUP_BEGIN("aiming/looking"),
		{ _field_string_id, "target aiming pivot marker name", "set this to have your weapon barrel point at its calcualed target instead of matching the aiming of the unit controlling it.  This marker should be along the barrel at point that doesn't move when the barrel pitches up and down." },
		{ _field_angle, "aiming velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "aiming acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual aiming modifier", nullptr, nullptr, "[0,1]" },
		{ _field_angle, "looking velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "looking acceleration maximum", nullptr, "degrees per second squared" },
		FIELD_GROUP_END(),
		{ _field_real, "object velocity maximum", "Debug value for object velocity that corresponds to a blend screen weight of 1, 0 defaults to 5.0", "world units per second" },
		{ _field_string_id, "right_hand_node", "where the primary weapon is attached" },
		{ _field_string_id, "left_hand_node", "where the seconday weapon is attached (for dual-pistol modes)" },
		{ _field_struct, "more damn nodes", &unit_additional_node_names_struct }, // structure_version:1
		{ _field_short_enum, "melee damage class", &global_melee_class_enum_definition },
		FIELD_PAD("PAD", 2),
		FIELD_GROUP_BEGIN("melee damage"),
		{ _field_tag_reference, "melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "native melee override", "when set, characters will melee with these settings rather than their actual held weapon. (for characters that melee with an off hand)", &weapon_group_reference },
		{ _field_struct, "your momma", &unit_boarding_melee_struct }, // structure_version:2
		FIELD_GROUP_END(),
		{ _field_short_enum, "motion sensor blip size", &global_chud_blip_type_definition },
		{ _field_short_enum, "item owner size", &unit_item_owner_size_enum },
		{ _field_string_id, "equipment variant name" },
		{ _field_string_id, "grounded equipment variant name" },
		{ _field_block, "postures", &unit_postures_block_block },
		{ _field_block, "Hud audio cues", &hud_unit_sound_block_block },
		{ _field_block, "dialogue variants", &dialogue_variant_block_block },
		FIELD_GROUP_BEGIN("standard grenade throw"),
		{ _field_real, "grenade angle", nullptr, "degrees" },
		{ _field_real, "grenade angle max elevation", nullptr, "degrees" },
		{ _field_real, "grenade angle min elevation", nullptr, "degrees" },
		{ _field_real, "grenade velocity", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("sprinting grenade throw"),
		{ _field_real, "grenade angle (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade angle max elevation (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade angle min elevation (sprinting)", nullptr, "degrees" },
		{ _field_real, "grenade velocity (sprinting)", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("primary weapon toss"),
		{ _field_real, "weapon angle", nullptr, "degrees" },
		{ _field_real, "weapon angle max elevation", nullptr, "degrees" },
		{ _field_real, "weapon angle min elevation", nullptr, "degrees" },
		{ _field_real, "weapon velocity", nullptr, "world units per second" },
		FIELD_GROUP_END(),
		{ _field_short_enum, "grenade type", &global_grenade_type_enum },
		{ _field_short_integer, "grenade count" },
		{ _field_block, "powered seats", &powered_seat_block_block },
		{ _field_block, "weapons", &unit_weapon_block_block },
		{ _field_block, "target tracking", &global_target_tracking_parameters_block_block },
		{ _field_block, "seats", &unit_seat_block_block },
		FIELD_GROUP_BEGIN("open/close"),
		{ _field_real, "opening time", "how long the unit takes to open when the hs_function unit_open is called\nThe current open state can be retrieved from the object function unit_open", "s" },
		{ _field_real, "closing time", "you don't have to go home, but you can't stay here", "s" },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("EMP Disabling"),
		{ _field_real, "emp disabled time", nullptr, "seconds" },
		{ _field_real, "emp disabled time (PVP)", "Set to -1 for not disabled in MP but disabled in SP", "seconds " },
		{ _field_tag_reference, "emp disabled effect", &effect_group_reference },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Boost"),
		{ _field_struct, "boost", &unit_boost_struct },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("Lipsync", nullptr),
		{ _field_struct, "lipsync", &unit_lipsync_scales_struct }, // structure_version:1
		FIELD_EXPLANATION("Exit and Detach", nullptr),
		{ _field_tag_reference, "exit and detach damage", &damage_effect_group_reference },
		{ _field_tag_reference, "exit and detach weapon", &weapon_group_reference$2 },
		FIELD_EXPLANATION("Experience", nullptr),
		{ _field_short_integer, "experience for kill" },
		{ _field_short_integer, "experience for assist" },
		{ _field_tag_reference, "hero assist equipment", "this is where you stick an equipment that the biped will always have, to implement the bizarrely named hero assist", &equipment_group_reference },
		{ _field_real, "bailout threshold", "the speed above which units will bail out of a vehicle instead of just exiting", "wu/s" },
		FIELD_GROUP_END(),
		{ _field_real_fraction, "iron sight weapon dampening", "when using iron sights, how much to scale the weapon overlays to steady the gun (0 = rock steady, 1= no dampening)", "(0-1)" },
		FIELD_GROUP_BEGIN("Birthing"),
		{ _field_struct, "birth", &unit_birth_struct },
		FIELD_GROUP_END(),
		FIELD_EXPLANATION("$$$ VEHICLE $$$", nullptr),
		{ _field_long_flags, "flags", &vehicle_flags$3 },
		{ _field_short_enum, "type", &vehicle_types },
		{ _field_short_enum, "control", &vehicle_control_types },
		{ _field_real, "maximum forward speed" },
		{ _field_real, "maximum reverse speed" },
		{ _field_real, "speed acceleration" },
		{ _field_real, "speed deceleration" },
		{ _field_real, "maximum left turn" },
		{ _field_real, "maximum right turn (negative)" },
		{ _field_real, "wheel circumference" },
		{ _field_real, "turn rate" },
		{ _field_real, "blur speed" },
		{ _field_short_enum, "specific type", "if your type corresponds to something in this list choose it", &vehicle_specific_types },
		{ _field_short_enum, "player training vehicle type", &player_training_vehicle_type_enum },
		{ _field_string_id, "flip message" },
		{ _field_real, "turn scale" },
		{ _field_real, "speed turn penalty power (0.5 .. 2)" },
		{ _field_real, "speed turn penalty (0 = none, 1 = can't turn at top speed)" },
		{ _field_real, "maximum left slide" },
		{ _field_real, "maximum right slide" },
		{ _field_real, "slide acceleration" },
		{ _field_real, "slide deceleration" },
		{ _field_real, "minimum flipping angular velocity" },
		{ _field_real, "maximum flipping angular velocity" },
		{ _field_short_enum, "vehicle size", "The size determine what kind of seats in larger vehicles it may occupy (i.e. small or large cargo seats)", &vehicle_size_enum$2 },
		FIELD_PAD("HFGPJ", 2),
		FIELD_USELESS_PAD("value", 20),
		{ _field_real, "fixed_gun_yaw" },
		{ _field_real, "fixed_gun_pitch" },
		FIELD_EXPLANATION("steering overdampening", "when the steering is off by more than the cusp angle\nthe steering will overcompensate more and more.  when it\nis less, it overcompensates less and less.  the exponent\nshould be something in the neighborhood of 2.0\n"),
		{ _field_real, "overdampen cusp angle", nullptr, "degrees" },
		{ _field_real, "overdampen exponent" },
		{ _field_real, "crouch transition time", nullptr, "seconds" },
		FIELD_PAD("XOOIQ", 4),
		FIELD_EXPLANATION("engine", nullptr),
		{ _field_real, "engine moment", "higher moments make engine spin up slower" },
		{ _field_real, "engine max angular velocity", "higher moments make engine spin up slower" },
		{ _field_block, "gears", &gear_block_v1_block },
		{ _field_real, "flying torque scale", "big vehicles need to scale this down.  0 defaults to 1, which is generally a good value.  This is used with alien fighter physics" },
		{ _field_real, "seat enterance acceleration scale", "how much do we scale the force the vehicle the applies down on the seat when he enters. 0 == no acceleration" },
		{ _field_real, "seat exit accelersation scale", "how much do we scale the force the vehicle the applies down on the seat when he exits. 0 == no acceleration" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real, "air friction deceleration", "human plane physics only. 0 is nothing.  1 is like thowing the engine to full reverse" },
		{ _field_real, "thrust scale", "human plane physics only. 0 is default (1)" },
		FIELD_EXPLANATION("sounds and effects", nullptr),
		{ _field_tag_reference, "suspension sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "crash sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "UNUSED", &material_effects_group_reference },
		{ _field_tag_reference, "special effect", &effect_group_reference },
		{ _field_tag_reference, "unused effect", &effect_group_reference },
		FIELD_EXPLANATION("physics", nullptr),
		{ _field_struct, "havok vehicle physics", &havok_vehicle_physics_struct },
		
		{ _field_terminator }
	};

	STRINGS(vehicle_flags$2)
	{
		"no friction w/driver",
		"autoaim when teamless",
		"ai weapon cannot rotate",
		"ai does not require driver",
		"ai driver enable",
		"ai driver flying",
		"ai driver can-sidestep",
		"ai driver hovering",
		"noncombat vehicle",
		"does not cause collision damage",
		"huge vehicle physics group",
		"enable wheelie-popping hack",
		"ai auto turret#will attempt to spawn Unit\'s \'spawned turret character\' to control this turret",
		"ai sentry turret",
		"ignore camera pitch",
		"auto turret#will be ignored if \'ai auto turret\' is set in campaign or survival",
		"ignore kill volumes#Suppress kill volume checks performed by unmanned vehicles (needed by RemoteStrike/power weapon ordnance)",
		"targetable when open#makes this targetable if it is in an open state",
		"vehicle wants to recieve reduced weapon acceleration when on ground#if set, vehicle will use all tag damage_effect->alt instantaneous acceleration fields if it is on the ground",
		"vehicle wants to recieve reduced weapon acceleration when airborne#if set, vehicle will use all tag damage_effect->alt instantaneous acceleration fields if it is airborne",
		"do not force units to exit when upside down",
		"vehicle creates enemy spawn influencers#Used for Dominion Sentry Turrets, which enemies should not spawn in range of",
		"driver cannot take damage",
		"player cannot flip vehicle#the player isn\'t allowed to flip the vehicle under any circumstances"
	};
	STRING_LIST(vehicle_flags$2, vehicle_flags$2_strings, _countof(vehicle_flags$2_strings));

	STRINGS(player_training_vehicle_type_enum)
	{
		"none",
		"warthog",
		"warthog turret",
		"ghost",
		"banshee",
		"tank",
		"wraith"
	};
	STRING_LIST(player_training_vehicle_type_enum, player_training_vehicle_type_enum_strings, _countof(player_training_vehicle_type_enum_strings));

	STRINGS(vehicle_size_enum)
	{
		"small",
		"large"
	};
	STRING_LIST(vehicle_size_enum, vehicle_size_enum_strings, _countof(vehicle_size_enum_strings));

	STRINGS(vehicle_flags$3)
	{
		"speed wakes physics",
		"turn wakes physics",
		"driver power wakes physics",
		"gunner power wakes physics",
		"control opposite speed sets brake",
		"slide wakes physics",
		"kills riders at terminal velocity",
		"causes collision damage",
		"ai weapon cannot rotate",
		"ai does not require driver",
		"ai unused",
		"ai driver enable",
		"ai driver flying",
		"ai driver can-sidestep",
		"ai driver hovering",
		"vehicle steers directly",
		"unused",
		"has e-brake",
		"noncombat vehicle",
		"no friction w/driver",
		"can trigger automatic opening doors",
		"autoaim when teamless"
	};
	STRING_LIST(vehicle_flags$3, vehicle_flags$3_strings, _countof(vehicle_flags$3_strings));

	STRINGS(vehicle_types)
	{
		"human tank",
		"human jeep",
		"human boat",
		"human plane",
		"alien scout",
		"alien fighter",
		"turret"
	};
	STRING_LIST(vehicle_types, vehicle_types_strings, _countof(vehicle_types_strings));

	STRINGS(vehicle_control_types)
	{
		"vehicle control normal",
		"vehicle control unused",
		"vehicle control tank"
	};
	STRING_LIST(vehicle_control_types, vehicle_control_types_strings, _countof(vehicle_control_types_strings));

	STRINGS(vehicle_specific_types)
	{
		"none",
		"ghost",
		"wraith",
		"spectre",
		"sentinel enforcer"
	};
	STRING_LIST(vehicle_specific_types, vehicle_specific_types_strings, _countof(vehicle_specific_types_strings));

	STRINGS(vehicle_size_enum$2)
	{
		"small",
		"large"
	};
	STRING_LIST(vehicle_size_enum$2, vehicle_size_enum$2_strings, _countof(vehicle_size_enum$2_strings));

	#define VEHICLE_PHYSICS_TYPES_STRUCT_ID { 0xC319BCC5, 0x75334227, 0x93E7A6C7, 0xCFF0752A }
	TAG_STRUCT(
		vehicle_physics_types_struct,
		"vehicle_physics_types_struct",
		"vehicle_physics_types_struct",
		"s_vehicle_physics_types_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VEHICLE_PHYSICS_TYPES_STRUCT_ID)
	{
		FIELD_IFP_BEGIN(),
		{ _field_block, "type-human_tank", &human_tank_block_block },
		{ _field_block, "type-human_jeep", &human_jeep_block_block },
		{ _field_block, "type-human_plane", &human_plane_block_block },
		{ _field_block, "type-wolverine", &wolverine_block_block },
		{ _field_block, "type-alien_scout", &alien_scout_block_block },
		{ _field_block, "type-alien_fighter", &alien_fighter_block_block },
		{ _field_block, "type-turret", &turret_block_block },
		{ _field_block, "type-mantis", &mantis_block_block },
		{ _field_block, "type-vtol", &vtol_block_block },
		{ _field_block, "type-chopper", &chopper_block_block },
		{ _field_block, "type-guardian", &guardian_block_block },
		{ _field_block, "type-jackal-glider", &jackal_glider_block_block },
		{ _field_block, "type-boat", &boat_block_block },
		{ _field_block, "type-space-fighter", &space_fighter_block_block },
		{ _field_block, "type-revenant", &revenant_block_block },
		FIELD_IFP_END(),
		{ _field_terminator }
	};

	#define VEHICLE_STEERING_CONTROL_STRUCT_ID { 0x2B36CF56, 0x40E4806, 0xAE2A1F64, 0x89A6F9B2 }
	TAG_STRUCT(
		vehicle_steering_control_struct,
		"vehicle_steering_control_struct",
		"vehicle_steering_control_struct",
		"s_vehicle_steering_control_struct",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VEHICLE_STEERING_CONTROL_STRUCT_ID)
	{
		FIELD_EXPLANATION("steering overdampening", "when the steering is off by more than the cusp angle\nthe steering will overcompensate more and more.  when it\nis less, it overcompensates less and less.  the exponent\nshould be something in the neighborhood of 2.0\n"),
		{ _field_real, "overdampen cusp angle", nullptr, "degrees" },
		{ _field_real, "overdampen exponent" },
		{ _field_terminator }
	};

	#define VEHICLE_SUSPENSION_BLOCK_ID { 0x8896A049, 0xE9614E59, 0x9E0BC659, 0xA399CF0C }
	TAG_STRUCT(
		vehicle_suspension_block,
		"vehicle_suspension_block",
		"vehicle_suspension_block",
		"s_vehicle_suspension_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VEHICLE_SUSPENSION_BLOCK_ID)
	{
		{ _field_string_id, "label" },
		{ _field_struct, "animation", &animation_index_struct },
		{ _field_string_id, "function name" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name", "this marker should be parented to the vehicle root node" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "contact marker name", "this marker should be parented to the wheel node" },
		{ _field_real, "mass point offset", "distance along the vehicle's up direction to move the wheel from the marker location" },
		{ _field_real, "full extension ground_depth" },
		{ _field_real, "full compression ground_depth" },
		FIELD_EXPLANATION("Destroyed Suspension", "Only Necessary for suspensions with a destroyed state"),
		{ _field_string_id, "region name" },
		{ _field_real, "destroyed mass point offset" },
		{ _field_real, "destroyed full extension ground_depth" },
		{ _field_real, "destroyed full compression ground_depth" },
		{ _field_terminator }
	};

	#define VEHICLE_TURNING_CONTROL_STRUCT_ID { 0x36D7646B, 0xE70A47D1, 0x98AF489E, 0x9B5C63F1 }
	TAG_STRUCT(
		vehicle_turning_control_struct,
		"vehicle_turning_control_struct",
		"vehicle_turning_control_struct",
		"s_vehicle_turning_control_struct",
		SET_POSTPROCESS_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VEHICLE_TURNING_CONTROL_STRUCT_ID)
	{
		FIELD_EXPLANATION("turning", nullptr),
		{ _field_real, "maximum left turn" },
		{ _field_real, "maximum right turn (negative)" },
		{ _field_real, "turn rate" },
		{ _field_terminator }
	};

	#define VERTEXBLOCK_ID { 0x78585A41, 0xEDEE4CEF, 0x8FA573A4, 0xB55AEE3D }
	TAG_STRUCT(
		vertexblock,
		"vertexBlock",
		"vertexBlock",
		"s_vertexblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VERTEXBLOCK_ID)
	{
		{ _field_real_point_3d, "point" },
		{ _field_terminator }
	};

	#define VERTEXBUFFERSBLOCK_STRUCT_ID { 0xF38916AB, 0xCA2A435E, 0xBCB353B1, 0x57130D3E }
	TAG_STRUCT(
		vertexbuffersblock_struct,
		"vertexBuffersBlock_struct",
		"vertexBuffersBlock_struct",
		"s_vertexbuffersblock_struct",
		SET_DELETE_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VERTEXBUFFERSBLOCK_STRUCT_ID)
	{
		{ _field_byte_integer, "declaration type" },
		{ _field_byte_integer, "stride" },
		FIELD_PAD("vertex buffer pad", 2),
		{ _field_dword_integer, "count" },
		{ _field_long_integer, "d3d hardware format" },
		{ _field_terminator }
	};

	#define VERTEXKEYBLOCK_ID { 0xDAD1C118, 0x570F4E4E, 0xAF86840B, 0x860BB1E0 }
	TAG_STRUCT(
		vertexkeyblock,
		"vertexKeyBlock",
		"vertexKeyBlock",
		"s_vertexkeyblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VERTEXKEYBLOCK_ID)
	{
		{ _field_long_integer, "key1" },
		{ _field_long_integer, "key2" },
		{ _field_terminator }
	};

	#define VERTEXSHADERUNIQUEBINDINGINFOBLOCK_ID { 0x1A5E3365, 0x8552445A, 0xA543DD7B, 0xB368406F }
	TAG_STRUCT(
		vertexshaderuniquebindinginfoblock,
		"vertexShaderUniqueBindingInfoBlock",
		"vertexShaderUniqueBindingInfoBlock",
		"s_vertexshaderuniquebindinginfoblock",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VERTEXSHADERUNIQUEBINDINGINFOBLOCK_ID)
	{
		{ _field_long_integer, "VertexType" },
		{ _field_long_integer, "EntryPoint" },
		{ _field_long_block_index, "PixelShaderIndex", &compiled_pixel_shader_block_block },
		{ _field_terminator }
	};

	#define VERTEX_BUFFER_INDICES_WORD_ARRAY_STRUCT_DEFINITION_ID { 0x5E95A6C9, 0x37604276, 0xBD4EEEA3, 0x52D11A95 }
	TAG_STRUCT(
		vertex_buffer_indices_word_array_struct_definition,
		"vertex_buffer_indices_word_array",
		"vertex_buffer_indices_word_array",
		"s_vertex_buffer_indices_word_array",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VERTEX_BUFFER_INDICES_WORD_ARRAY_STRUCT_DEFINITION_ID)
	{
		{ _field_word_integer, "vertex buffer index" },
		{ _field_terminator }
	};

	#define VERTEX_BUFFERS_BLOCK_ID { 0x10DD7329, 0xE07F4880, 0xBC8BB79A, 0x253227EE }
	TAG_STRUCT(
		vertex_buffers_block,
		"vertex_buffers_block",
		"vertex_buffers_block",
		"s_vertex_buffers_block",
		SET_DELETE_RECURSIVELY | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VERTEX_BUFFERS_BLOCK_ID)
	{
		{ _field_byte_integer, "declaration type" },
		{ _field_byte_integer, "stride" },
		FIELD_PAD("vertex buffer pad", 2),
		{ _field_dword_integer, "count" },
		{ _field_long_integer, "d3d hardware format" },
		{ _field_terminator }
	};

	#define VERTEX_ENTRY_POINT_BLOCK_ID { 0x7D27C32F, 0x4BFF419F, 0xAE908394, 0xF054F56B }
	TAG_STRUCT(
		vertex_entry_point_block,
		"vertex_entry_point_block",
		"vertex_entry_point_block",
		"s_vertex_entry_point_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VERTEX_ENTRY_POINT_BLOCK_ID)
	{
		{ _field_block, "vertex types", &vertex_types_block_block$2 },
		{ _field_terminator }
	};

	#define VERTEX_SHADER_BLOCK_STRUCT_ID { 0x60FD71E9, 0xC5654B09, 0xBE6F6918, 0x7C935A75 }
	TAG_STRUCT(
		vertex_shader_block_struct,
		"vertex_shader_block_struct",
		"vertex_shader_block_struct",
		"s_vertex_shader_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VERTEX_SHADER_BLOCK_STRUCT_ID)
	{
		{ _field_block, "entry points", &vertex_entry_point_block_block },
		{ _field_dword_integer, "version" },
		{ _field_block, "compiled shaders", &compiled_vertex_shader_block_block },
		{ _field_terminator }
	};

	#define VERTEX_TYPES_BLOCK$2_ID { 0x179BB0D5, 0x3B834BE0, 0x81D71471, 0xB7FD5D61 }
	TAG_STRUCT(
		vertex_types_block$2,
		"vertex_types_block",
		"vertex_types_block",
		"s_vertex_types_block$2",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VERTEX_TYPES_BLOCK$2_ID)
	{
		{ _field_byte_integer, "start index" },
		{ _field_byte_integer, "count" },
		{ _field_terminator }
	};

	#define VERTEX_TYPES_BLOCK_ID { 0x10D75123, 0xB1E940D6, 0x93113433, 0x80D97C43 }
	TAG_STRUCT(
		vertex_types_block,
		"vertex_types_block",
		"vertex_types_block",
		"s_vertex_types_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VERTEX_TYPES_BLOCK_ID)
	{
		{ _field_short_enum, "vertex type", &vertex_types_names_enum },
		FIELD_PAD("blahasdf", 2),
		{ _field_terminator }
	};

	STRINGS(vertex_types_names_enum)
	{
		"world",
		"rigid",
		"skinned",
		"particle_model",
		"flat_world",
		"flat_rigid",
		"flat_skinned",
		"screen",
		"debug",
		"transparent",
		"particle",
		"rigid2uv",
		"light_volume",
		"chud_simple",
		"chud_fancy",
		"decorator",
		"tiny position",
		"patchy fog",
		"water",
		"ripple",
		"implicit geometry",
		"skinned2uv",
		"world_tessellated",
		"rigid_tessellated",
		"skinned_tessellated",
		"shader_cache",
		"structure_instance_imposter",
		"object_imposter",
		"rigid compressed",
		"skinned uncompressed",
		"light_volume_precompiled",
		"blendshape_rigid",
		"blendshape_rigid_blendshaped",
		"rigid_blendshaped",
		"blendshape_skinned",
		"blendshape_skinned_blendshaped",
		"skinned_blendshaped",
		"VirtualGeometryHWtess",
		"VirtualGeometryMemexport",
		"position_only",
		"VirtualGeometryDebug",
		"BlendshapeRigidCompressedPosition",
		"SkinnedUncompressedPositionBlendshaped",
		"BlendshapeSkinnedUncompressedPosition",
		"tracer",
		"polyart",
		"vectorart",
		"rigid_boned",
		"rigid_boned_2uv",
		"blendshape_skinned_2uv",
		"blendshape_skinned_2uv_blendshaped",
		"skinned_2uv_blendshaped",
		"polyartUV",
		"BlendshapeSkinnedUncompressedPositionBlendshaped"
	};
	STRING_LIST(vertex_types_names_enum, vertex_types_names_enum_strings, _countof(vertex_types_names_enum_strings));

	#define VERTICES_BLOCK_ID { 0x6C3F6A60, 0x1FCE4C6A, 0x8F89E265, 0xE56D2F60 }
	TAG_STRUCT(
		vertices_block,
		"vertices_block",
		"vertices_block",
		"s_vertices_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VERTICES_BLOCK_ID,
		4)
	{
		{ _field_real_point_3d, "point" },
		{ _field_word_integer, "first edge" },
		{ _field_short_integer, "sink" },
		{ _field_terminator }
	};

	#define VISIONMODEBIPEDPASSBLOCK_ID { 0xDBABFC3A, 0x23E35D64, 0xAB64E00E, 0xF94F532 }
	TAG_STRUCT(
		visionmodebipedpassblock,
		"visionModeBipedPassBlock",
		"visionModeBipedPassBlock",
		"s_visionmodebipedpassblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VISIONMODEBIPEDPASSBLOCK_ID)
	{
		{ _field_long_flags, "flags", &visionmodebipedpassflags },
		{ _field_long_flags, "render for", &visionmodebipedteamtypes },
		FIELD_CUSTOM("material", _tag_field_custom_type_tag_group_template),
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "actual material?", &material_struct },
		FIELD_HIDE_END(),
		{ _field_terminator }
	};

	STRINGS(visionmodebipedpassflags)
	{
		"depth fail only",
		"bipeds as quads#instead of drawing the whole model, just do a quad"
	};
	STRING_LIST(visionmodebipedpassflags, visionmodebipedpassflags_strings, _countof(visionmodebipedpassflags_strings));

	STRINGS(visionmodebipedteamtypes)
	{
		"friends",
		"enemies",
		"neutrals"
	};
	STRING_LIST(visionmodebipedteamtypes, visionmodebipedteamtypes_strings, _countof(visionmodebipedteamtypes_strings));

	#define VISIONMODEBIPEDPASSESBLOCK_ID { 0xDBABEC3A, 0x24E35564, 0xAB6DE0FE, 0xDF9AF532 }
	TAG_STRUCT(
		visionmodebipedpassesblock,
		"visionModeBipedPassesBlock",
		"visionModeBipedPassesBlock",
		"s_visionmodebipedpassesblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VISIONMODEBIPEDPASSESBLOCK_ID)
	{
		{ _field_long_flags, "flags", &visionmodebipedpassesflags },
		{ _field_real, "max radius" },
		{ _field_real, "falloff begin radius", "between this and max radius, we go smoothly from on to off" },
		{ _field_real, "motion sensor inactive fade time", "if \"linked to motion sensor\" is checked, this is how long it takes to fade after you stop activity" },
		{ _field_real, "active camo visible velocity", "if a unit has active camo and is moving faster than this, it will be shown" },
		{ _field_block, "biped passes", &visionmodebipedpassblock_block },
		{ _field_block, "biped threat values (optional)", &visionmodebipedthreatblock_block },
		{ _field_terminator }
	};

	STRINGS(visionmodebipedpassesflags)
	{
		"shows all bipeds#range values will be ignored",
		"render via back buffer#we draw the bipeds into a back buffer before they are splatted into the front buffer; expensive",
		"draw vehicles too",
		"draw grenades too"
	};
	STRING_LIST(visionmodebipedpassesflags, visionmodebipedpassesflags_strings, _countof(visionmodebipedpassesflags_strings));

	#define VISIONMODEBIPEDTHREATBLOCK_ID { 0xDAF6FC3A, 0x53E33D54, 0x8C65E09E, 0xD23FF32 }
	TAG_STRUCT(
		visionmodebipedthreatblock,
		"visionModeBipedThreatBlock",
		"visionModeBipedThreatBlock",
		"s_visionmodebipedthreatblock",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VISIONMODEBIPEDTHREATBLOCK_ID)
	{
		{ _field_real, "threat per kill" },
		{ _field_real, "threat per death", "can be negative" },
		{ _field_real, "threat per weapon scariness point", "keys off the \"AI scariness\" field of each weapon" },
		{ _field_real_bounds, "min/max threat range", "below/above these values are pinned" },
		{ _field_terminator }
	};

	#define VISIONMODEENVIRONMENTPASSBLOCK_ID { 0xF2A2B65D, 0x20F942FA, 0x8B733470, 0x88639DE7 }
	TAG_STRUCT(
		visionmodeenvironmentpassblock,
		"visionModeEnvironmentPassBlock",
		"visionModeEnvironmentPassBlock",
		"s_visionmodeenvironmentpassblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VISIONMODEENVIRONMENTPASSBLOCK_ID)
	{
		FIELD_CUSTOM("material", _tag_field_custom_type_tag_group_template),
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "actual material?", &material_struct },
		FIELD_HIDE_END(),
		{ _field_terminator }
	};

	#define VISIONMODEORDNANCECROSSHAIRBLOCK_ID { 0x35958DB3, 0x7A3643C2, 0xA948119D, 0xCBEBEE4C }
	TAG_STRUCT(
		visionmodeordnancecrosshairblock,
		"visionModeOrdnanceCrosshairBlock",
		"visionModeOrdnanceCrosshairBlock",
		"s_visionmodeordnancecrosshairblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VISIONMODEORDNANCECROSSHAIRBLOCK_ID)
	{
		FIELD_CUSTOM("material", _tag_field_custom_type_tag_group_template),
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "actual material?", &material_struct },
		FIELD_HIDE_END(),
		{ _field_terminator }
	};

	#define VISIONMODEORDNANCEVEHICLEPASSBLOCK_ID { 0x29638700, 0x39274991, 0xBEF2154D, 0x8D3E10ED }
	TAG_STRUCT(
		visionmodeordnancevehiclepassblock,
		"visionModeOrdnanceVehiclePassBlock",
		"visionModeOrdnanceVehiclePassBlock",
		"s_visionmodeordnancevehiclepassblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VISIONMODEORDNANCEVEHICLEPASSBLOCK_ID)
	{
		{ _field_block, "vehicle types", &visionmodeordnancevehicletypeblock_block },
		FIELD_CUSTOM("material", _tag_field_custom_type_tag_group_template),
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "actual material?", &material_struct },
		FIELD_HIDE_END(),
		{ _field_terminator }
	};

	#define VISIONMODEORDNANCEVEHICLETYPEBLOCK_ID { 0x68D143E5, 0xAD3144A5, 0x8961C068, 0x1465B6C2 }
	TAG_STRUCT(
		visionmodeordnancevehicletypeblock,
		"visionModeOrdnanceVehicleTypeBlock",
		"visionModeOrdnanceVehicleTypeBlock",
		"s_visionmodeordnancevehicletypeblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VISIONMODEORDNANCEVEHICLETYPEBLOCK_ID)
	{
		{ _field_tag_reference, "vehicle type", &vehicle_group_reference$5 },
		{ _field_tag_reference, "icon", &bitmap_group_reference$3 },
		{ _field_real_vector_2d, "icon size" },
		{ _field_terminator }
	};

	TAG_REFERENCE(vehicle_group_reference$5, VEHICLE_TAG);

	#define VISIONMODESCREENPASSBLOCK_ID { 0xDBA6FC3A, 0x53E34D64, 0x8C64E09E, 0xD93FF32 }
	TAG_STRUCT(
		visionmodescreenpassblock,
		"visionModeScreenPassBlock",
		"visionModeScreenPassBlock",
		"s_visionmodescreenpassblock",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VISIONMODESCREENPASSBLOCK_ID)
	{
		FIELD_CUSTOM("material", _tag_field_custom_type_tag_group_template),
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "actual material?", &material_struct },
		FIELD_HIDE_END(),
		{ _field_terminator }
	};

	#define VISION_MODE_STRUCT_DEFINITION_ID { 0xD73807F4, 0x3EA54508, 0x8524E277, 0xEF130B5C }
	TAG_STRUCT(
		vision_mode_struct_definition,
		"vision_mode_struct_definition",
		"vision_mode_struct_definition",
		"s_vision_mode_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VISION_MODE_STRUCT_DEFINITION_ID)
	{
		{ _field_long_flags, "flags", &visionmodeflags },
		{ _field_real, "disabled lighting transparent exposure boost" },
		{ _field_block, "screen pass", &visionmodescreenpassblock_block },
		{ _field_block, "environment pass", &visionmodeenvironmentpassblock_block },
		{ _field_block, "biped passes", &visionmodebipedpassesblock_block },
		{ _field_block, "ordnance vehicle pass", &visionmodeordnancevehiclepassblock_block },
		{ _field_block, "ordnance crosshair", &visionmodeordnancecrosshairblock_block },
		{ _field_terminator }
	};

	STRINGS(visionmodeflags)
	{
		"disables normal rendering",
		"disables lighting",
		"ordnance map#we need to ask the ordnance map system about some stuff",
		"disables active camo"
	};
	STRING_LIST(visionmodeflags, visionmodeflags_strings, _countof(visionmodeflags_strings));

	#define VISOR_COLOR_BLOCK_ID { 0x91C73AC2, 0x84F247BD, 0x933B0BAD, 0x26DB133B }
	TAG_STRUCT(
		visor_color_block,
		"visor_color_block",
		"visor_color_block",
		"s_visor_color_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VISOR_COLOR_BLOCK_ID)
	{
		{ _field_string_id, "name" },
		{ _field_real_rgb_color, "tertiary color" },
		{ _field_real_rgb_color, "quaternary color" },
		{ _field_terminator }
	};

	#define VOCALIZATION_DEFINITIONS_BLOCK_ID { 0xEFA010A4, 0x3EA148E6, 0xA44C41E0, 0x7FA151D5 }
	TAG_STRUCT(
		vocalization_definitions_block,
		"vocalization_definitions_block",
		"vocalization_definitions_block",
		"s_vocalization_definitions_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VOCALIZATION_DEFINITIONS_BLOCK_ID)
	{
		{ _field_string_id, "vocalization" },
		{ _field_short_block_index, "parent index", &vocalization_definitions_block_block },
		{ _field_short_enum, "priority", &priority_enum },
		{ _field_long_flags, "flags", &vocalization_flags_definition },
		{ _field_short_enum, "glance behavior", "how does the speaker of this vocalization direct his gaze?", &glance_type_enum },
		{ _field_short_enum, "glance recipient behavior", "how does someone who hears me behave?", &glance_type_enum },
		{ _field_short_enum, "perception type", &perception_type_enum },
		{ _field_short_enum, "max combat status", &combat_status_enum },
		{ _field_short_enum, "animation impulse", &dialogue_animation_enum },
		{ _field_short_integer, "proxy dialogue index" },
		{ _field_real, "sound repetition delay", "Minimum delay time between playing the same permutation", "minutes" },
		{ _field_real, "allowable queue delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "pre voc. delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "notification delay", "How long into the vocalization the AI should be notified", "seconds" },
		{ _field_real, "post voc. delay", "How long speech is suppressed in the speaking unit after vocalizing", "seconds" },
		{ _field_real, "repeat delay", "How long before the same vocalization can be repeated", "seconds" },
		{ _field_real, "weight", "Inherent weight of this vocalization", nullptr, "[0-1]" },
		{ _field_real, "speaker freeze time", "speaker won't move for the given amount of time" },
		{ _field_real, "listener freeze time", "listener won't move for the given amount of time (from start of vocalization)" },
		{ _field_short_enum, "speaker emotion", &dialogue_emotion_enum },
		{ _field_short_enum, "listener emotion", &dialogue_emotion_enum },
		{ _field_real, "player speaker skip fraction" },
		{ _field_real, "player skip fraction" },
		{ _field_real, "flood skip fraction" },
		{ _field_real, "skip fraction" },
		{ _field_short_integer, "mission min value", "The lowest mission id that we play this line in" },
		{ _field_short_integer, "mission max value", "The highest mission id that we play this line in" },
		{ _field_string_id, "Sample line" },
		{ _field_block, "reponses", &response_block_block },
		{ _field_terminator }
	};

	STRINGS(priority_enum)
	{
		"none",
		"recall",
		"idle",
		"comment",
		"idle_response",
		"postcombat",
		"combat",
		"status",
		"respond",
		"warn",
		"act",
		"react",
		"involuntary",
		"scream",
		"scripted",
		"death"
	};
	STRING_LIST(priority_enum, priority_enum_strings, _countof(priority_enum_strings));

	STRINGS(vocalization_flags_definition)
	{
		"immediate",
		"interrupt",
		"cancel low priority",
		"disable dialogue effect",
		"predict facial animations"
	};
	STRING_LIST(vocalization_flags_definition, vocalization_flags_definition_strings, _countof(vocalization_flags_definition_strings));

	STRINGS(glance_type_enum)
	{
		"NONE",
		"glance subject short",
		"glance subject long",
		"glance cause short",
		"glance cause long",
		"glance friend short",
		"glance friend long"
	};
	STRING_LIST(glance_type_enum, glance_type_enum_strings, _countof(glance_type_enum_strings));

	STRINGS(perception_type_enum)
	{
		"none",
		"speaker",
		"listener"
	};
	STRING_LIST(perception_type_enum, perception_type_enum_strings, _countof(perception_type_enum_strings));

	STRINGS(combat_status_enum)
	{
		"asleep",
		"idle",
		"alert",
		"active",
		"uninspected",
		"definite",
		"certain",
		"visible",
		"clear_los",
		"dangerous"
	};
	STRING_LIST(combat_status_enum, combat_status_enum_strings, _countof(combat_status_enum_strings));

	STRINGS(dialogue_animation_enum)
	{
		"none",
		"shakefist",
		"cheer",
		"surprise-front",
		"surprise-back",
		"taunt",
		"brace",
		"point",
		"hold",
		"wave",
		"advance",
		"fallback"
	};
	STRING_LIST(dialogue_animation_enum, dialogue_animation_enum_strings, _countof(dialogue_animation_enum_strings));

	STRINGS(dialogue_emotion_enum)
	{
		"none",
		"happy",
		"sad",
		"angry",
		"disgusted",
		"scared",
		"surprised",
		"pain",
		"shout"
	};
	STRING_LIST(dialogue_emotion_enum, dialogue_emotion_enum_strings, _countof(dialogue_emotion_enum_strings));

	#define VOCALIZATION_PATTERNS_BLOCK_ID { 0xD957FA41, 0xCD6C43A7, 0x9D2BA7B7, 0xC3ECCB8C }
	TAG_STRUCT(
		vocalization_patterns_block,
		"vocalization_patterns_block",
		"vocalization_patterns_block",
		"s_vocalization_patterns_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VOCALIZATION_PATTERNS_BLOCK_ID)
	{
		{ _field_short_enum, "dialogue type", &dialogue_names_enum },
		{ _field_short_integer, "vocalization index" },
		{ _field_string_id, "vocalization name" },
		{ _field_short_enum, "speaker type", &speaker_type_enum },
		{ _field_short_enum, "listener/target", "who/what am I speaking to/of?", &speaker_type_enum },
		{ _field_short_enum, "hostility", "The relationship between the subject and the cause", &hostility_enum },
		{ _field_word_flags, "flags", &pattern_flags },
		FIELD_EXPLANATION("Cause", nullptr),
		{ _field_short_enum, "cause actor type", &actor_type_enum },
		{ _field_short_enum, "cause type", &dialogue_object_types_enum },
		{ _field_string_id, "cause ai type name" },
		{ _field_string_id, "cause equipment type name" },
		FIELD_EXPLANATION("Speaker", nullptr),
		{ _field_short_enum, "speaker object type", &dialogue_object_types_enum },
		{ _field_short_enum, "speaker behavior", &speaker_behavior_enum },
		{ _field_short_enum, "danger level", "Speaker must have danger level of at least this much", &danger_enum },
		{ _field_char_enum, "speaker/subject position", &spatial_relation_enum },
		{ _field_char_enum, "speaker/cause position", &spatial_relation_enum },
		{ _field_long_flags, "Conditions", &dialogue_condition_flags },
		FIELD_EXPLANATION("Matching", nullptr),
		{ _field_short_enum, "spatial relation", "with respect to the subject, the cause is ...", &spatial_relation_enum },
		{ _field_short_enum, "damage type", &damage_enum },
		{ _field_short_enum, "game type", &game_type_enum },
		FIELD_EXPLANATION("Subject", nullptr),
		{ _field_short_enum, "subject actor type", &actor_type_enum },
		{ _field_short_enum, "subject type", &dialogue_object_types_enum },
		FIELD_PAD("post-subject-type-pad", 2),
		{ _field_string_id, "subject ai type name" },
		{ _field_terminator }
	};

	STRINGS(dialogue_names_enum)
	{
		"NONE",
		"death",
		"death_headshot{damage_headshot}",
		"death_assassination{damage_assassination}",
		"damage",
		"anounce",
		"sighted_interest",
		"sighted_new",
		"sighted_new major",
		"sighted_first",
		"sighted_special",
		"heard_new",
		"heard_old",
		"found_unit",
		"found_unit_pursuit",
		"throwing_grenade",
		"throwing_grenade_all",
		"stuck_grenade",
		"fighting",
		"suppressing_fire",
		"grenade_uncover",
		"jump",
		"reload",
		"reload_low_ammo",
		"ready_spartan_laser",
		"ready_rocket_launcher",
		"ready_flak_cannon",
		"ready_plasma_launcher",
		"surprised",
		"lost_contact",
		"investigate_failed",
		"pursuit_failed",
		"investigate_start",
		"investigate_interest",
		"searching",
		"abandoned_search_space",
		"abandoned_search_time",
		"presearch_failed",
		"abandoned_search_restricted",
		"pursuit_start",
		"postcombat_inspect_body",
		"vehicle_slow_down",
		"vehicle_get_in",
		"idle",
		"combat_idle",
		"taunt",
		"taunt_reply",
		"retreat",
		"retreat_from_scary_target",
		"retreat_from_dead_leader",
		"retreat_from_proximity",
		"retreat_from_low_shield",
		"flee",
		"cowering",
		"melee_charge",
		"melee_attack{melee}",
		"vehicle_falling",
		"vehicle_woohoo",
		"vehicle_scared",
		"vehicle_crazy",
		"leap",
		"postcombat_win",
		"postcombat_lose",
		"postcombat_neutral",
		"shoot_corpse",
		"postcombat start",
		"inspect_body_start",
		"postcombat_status",
		"postcombat_last_standing",
		"vehicle_entry_start_driver",
		"vehicle_enter",
		"vehicle_entry_start_gun",
		"vehicle_entry_start_passenger",
		"vehicle_exit",
		"evict_driver",
		"evict_gunner",
		"evict_passenger",
		"new_order_enemy_advancing",
		"new_order_enemy_charging",
		"new_order_enemy_fallingback",
		"new_order_advance",
		"new_order_charge",
		"new_order_fallback",
		"new_order_moveon",
		"new_order_fllplr",
		"new_order_arrive_combat",
		"new_order_end_combat",
		"new_order_investigate",
		"new_order_spread",
		"new_order_hold",
		"new_order_find_cover",
		"new_order_covering_fire",
		"order_ack_positive",
		"order_ack_negative",
		"order_ack_canceled",
		"order_ack_completed",
		"order_ack_regroup",
		"order_ack_disband",
		"order_ack_weapon_change",
		"order_ack_attack_vehicle",
		"order_ack_attack_infantry",
		"order_ack_interact",
		"order_ack_pinned_down",
		"fireteam_member_join",
		"fireteam_member_danger",
		"fireteam_member_died",
		"emerge",
		"curse",
		"threaten",
		"cover_friend",
		"move_cover",
		"in_cover",
		"pinned_down",
		"strike",
		"open_fire",
		"shoot",
		"shoot_multiple",
		"shoot_gunner",
		"gloat",
		"greet",
		"player_look",
		"player_look_longtime",
		"panic_grenade_attached",
		"panic_vehicle_destroyed",
		"help response",
		"remind",
		"overheated",
		"weapon_trade_better",
		"weapon_trade_worse",
		"weapon_trade_equal",
		"betray",
		"forgive",
		"warn_target",
		"warn_pursuit",
		"use_equipment",
		"ambush",
		"undr_fire",
		"undr_fire_trrt",
		"flood_boom",
		"vehicle_boom",
		"berserk",
		"stealth",
		"infection",
		"reanimate",
		"scold",
		"praise",
		"scorn",
		"plead",
		"thank",
		"ok",
		"cheer",
		"invite_vehicle",
		"invite_vehicle_driver",
		"invite_vehicle_gunner",
		"player_blocking",
		"player_multi_kill",
		"advance_start",
		"hamstring_charge"
	};
	STRING_LIST(dialogue_names_enum, dialogue_names_enum_strings, _countof(dialogue_names_enum_strings));

	STRINGS(speaker_type_enum)
	{
		"subject",
		"cause",
		"friend",
		"target",
		"enemy",
		"vehicle",
		"joint",
		"task",
		"leader",
		"joint_leader",
		"clump",
		"peer",
		"none"
	};
	STRING_LIST(speaker_type_enum, speaker_type_enum_strings, _countof(speaker_type_enum_strings));

	STRINGS(hostility_enum)
	{
		"NONE",
		"self",
		"neutral",
		"friend",
		"enemy",
		"traitor"
	};
	STRING_LIST(hostility_enum, hostility_enum_strings, _countof(hostility_enum_strings));

	STRINGS(pattern_flags)
	{
		"subject visible",
		"cause visible",
		"friends present",
		"subject is speaker\'s target",
		"cause is speaker\'s target",
		"cause is player or speaker is player ally",
		"cause is primary player ally",
		"cause is infantry",
		"subject is infantry",
		"speaker is infantry",
		"speaker in space",
		"speaker has low health",
		"cause is targeting player"
	};
	STRING_LIST(pattern_flags, pattern_flags_strings, _countof(pattern_flags_strings));

	STRINGS(dialogue_object_types_enum)
	{
		"NONE",
		"player",
		"actor",
		"biped",
		"body",
		"vehicle",
		"projectile",
		"actor or player",
		"turret",
		"unit in vehicle",
		"unit in turret",
		"unit carrying turret",
		"driver",
		"gunner",
		"passenger",
		"postcombat",
		"postcombat_won",
		"postcombat_lost",
		"player masterchief",
		"player spartans",
		"player dervish",
		"heretic",
		"majorly scary",
		"last man in vehicle",
		"male",
		"female",
		"grenade",
		"stealth",
		"flood",
		"pureform",
		"player empty vehicle",
		"equipment"
	};
	STRING_LIST(dialogue_object_types_enum, dialogue_object_types_enum_strings, _countof(dialogue_object_types_enum_strings));

	STRINGS(speaker_behavior_enum)
	{
		"any",
		"combat",
		"engage",
		"search",
		"cover",
		"retreat",
		"follow",
		"shoot",
		"clump_idle",
		"clump_combat",
		"fought_brutes",
		"fought_flood"
	};
	STRING_LIST(speaker_behavior_enum, speaker_behavior_enum_strings, _countof(speaker_behavior_enum_strings));

	STRINGS(danger_enum)
	{
		"NONE",
		"broadly facing",
		"shooting near",
		"shooting at",
		"extremely close",
		"shield damage",
		"shield extended damage",
		"body damage",
		"body extended damage"
	};
	STRING_LIST(danger_enum, danger_enum_strings, _countof(danger_enum_strings));

	STRINGS(spatial_relation_enum)
	{
		"none",
		"very near",
		"near",
		"medium range",
		"far",
		"very far",
		"in front of",
		"behind",
		"above",
		"below",
		"few",
		"in range"
	};
	STRING_LIST(spatial_relation_enum, spatial_relation_enum_strings, _countof(spatial_relation_enum_strings));

	STRINGS(dialogue_condition_flags)
	{
		"asleep",
		"idle",
		"alert",
		"active",
		"uninspected orphan",
		"definite orphan",
		"certain orphan",
		"visible enemy",
		"clear los enemy",
		"dangerous enemy",
		"no vehicle",
		"vehicle driver",
		"vehicle passenger"
	};
	STRING_LIST(dialogue_condition_flags, dialogue_condition_flags_strings, _countof(dialogue_condition_flags_strings));

	STRINGS(damage_enum)
	{
		"NONE",
		"falling",
		"bullet",
		"grenade",
		"explosive",
		"sniper",
		"melee",
		"flame",
		"mounted weapon",
		"vehicle",
		"plasma",
		"needle",
		"shotgun",
		"assassination"
	};
	STRING_LIST(damage_enum, damage_enum_strings, _countof(damage_enum_strings));

	STRINGS(game_type_enum)
	{
		"none",
		"sandbox",
		"megalo",
		"campaign",
		"survival",
		"firefight"
	};
	STRING_LIST(game_type_enum, game_type_enum_strings, _countof(game_type_enum_strings));

	#define VOCALIZATION_STIMULI_BLOCK_DEFINITION_ID { 0x8EA8B87C, 0xE73C4EE8, 0x8C95D4FE, 0xB6EF9EC6 }
	TAG_STRUCT(
		vocalization_stimuli_block_definition,
		"vocalization_stimuli_block_definition",
		"vocalization_stimuli_block_definition",
		"s_vocalization_stimuli_block_definition",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VOCALIZATION_STIMULI_BLOCK_DEFINITION_ID)
	{
		{ _field_word_flags, "flags", &vocalization_stimulus_flags },
		FIELD_PAD("AN", 2),
		{ _field_string_id, "stimulus" },
		{ _field_tag_reference, "sound", &sound_group_reference$4 },
		{ _field_terminator }
	};

	STRINGS(vocalization_stimulus_flags)
	{
		"additive#this stimulus should add to the default vocalization instead of replacing it",
		"don\'t suppress#this stimulus cannot be suppressed"
	};
	STRING_LIST(vocalization_stimulus_flags, vocalization_stimulus_flags_strings, _countof(vocalization_stimulus_flags_strings));

	#define VOLUME_SAMPLES_BLOCK_ID { 0x69D0DD6, 0x55E6413E, 0xAABD61B5, 0x3168B3C9 }
	TAG_STRUCT(
		volume_samples_block,
		"volume_samples_block",
		"volume_samples_block",
		"s_volume_samples_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VOLUME_SAMPLES_BLOCK_ID)
	{
		{ _field_real_vector_3d, "position" },
		{ _field_array, "radiance transfer matrix", &radiance_transfer_matrix$2 },
		{ _field_terminator }
	};

	#define VTOL_BLOCK_ID { 0x3FF3D8BD, 0x885445AB, 0xA71E3BEE, 0x6D8D25EE }
	TAG_STRUCT(
		vtol_block,
		"vtol_block",
		"vtol_block",
		"s_vtol_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VTOL_BLOCK_ID)
	{
		{ _field_struct, "turning control", &vehicle_turning_control_struct },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "left lift marker" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "right lift marker" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "thrust marker" },
		{ _field_struct, "trigger to throttle", &scalar_function_named_struct },
		{ _field_struct, "descent to boost", &vtol_descent_function_struct },
		FIELD_EXPLANATION("minimum and maximum up acceleration", nullptr),
		{ _field_real, "maximum up acceleration" },
		{ _field_real, "maximum down acceleration" },
		{ _field_real, "vertical deceleration time", "after accelerating vertically, take this long to bleed off the throttle", "seconds" },
		FIELD_EXPLANATION("lift arm pivot", "this simulates the engines being on a pivot like on an osprey.  This helps better cradle the center of mass."),
		{ _field_real, "lift arm pivot length" },
		FIELD_EXPLANATION("turn, left and forward accelerations", nullptr),
		{ _field_real, "maximum turn acceleration" },
		{ _field_real, "turn acceleration gain" },
		FIELD_EXPLANATION("interpolation parameters", "these parameters control the interpolation between the two elements in the speed interpolation block"),
		{ _field_real, "interpolation speed domain" },
		FIELD_EXPLANATION("funciton explanation", "acc= INTERPOLATION_ACC(ceiling(throttle, SPEED_TROTTLE_CEILING(speed))), speed+= acc, interpolation= A_B_INTERPOLATION(speed)"),
		{ _field_struct, "SPEED_TROTTLE_CEILING()", &scalar_function_named_struct },
		{ _field_struct, "INTERPOLATION_ACC()", &scalar_function_named_struct },
		{ _field_struct, "A_B_INTERPOLATION() interpolation mapping", &scalar_function_named_struct },
		{ _field_block, "speed interpolated parameters", &vtol_speed_interpolated_block_block },
		{ _field_angle, "lift angles acc", "how fast can the engine animations accelerate their turn in degress/SQR(sec)" },
		{ _field_angle, "render lift angles acc", "how fast can the engine animations accelerate their turn in degress/SQR(sec)" },
		{ _field_real, "alt. lock offset coefficient", "scalar for altitude lock based on distance to target - higher numbers reach the target more quickly but may cause bounciness" },
		{ _field_real, "alt. lock velocity coefficient", "scalar for altitude lock based on velocity.  Acts like friction, trying to remove vertical velocity from the system" },
		FIELD_EXPLANATION("prop rotation", "propeller speed data to drive propeller animations"),
		{ _field_real_bounds, "prop rotation speed", "cycles per second idle to full throttle" },
		FIELD_EXPLANATION("landing", nullptr),
		{ _field_real, "landing time", "how long we must maintain the landing state in order to land", "s" },
		{ _field_real, "takeoff time", "how long it takes to leave the landed state", "s" },
		{ _field_real, "landing linear velocity", "must be under this linear velocity to enter/maintain landing state", "wu/s" },
		{ _field_real, "landing angular velocity", "must be under this angular velocity to enter/maintain landing state", "rad/s" },
		{ _field_terminator }
	};

	#define VTOL_DESCENT_FUNCTION_STRUCT_ID { 0x54DB0E84, 0x9D24B82, 0xA95666A4, 0x8EE43895 }
	TAG_STRUCT(
		vtol_descent_function_struct,
		"vtol_descent_function_struct",
		"vtol_descent_function_struct",
		"s_vtol_descent_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VTOL_DESCENT_FUNCTION_STRUCT_ID)
	{
		{ _field_struct, "descent to boost", &scalar_function_named_struct },
		{ _field_real, "max downward speed", nullptr, "wu/s", _field_id_function_unknown },
		{ _field_terminator }
	};

	#define VTOL_SPEED_INTERPOLATED_BLOCK_ID { 0xAFF3D8BD, 0x88B445AB, 0x371E3BEE, 0x2D8D25EE }
	TAG_STRUCT(
		vtol_speed_interpolated_block,
		"vtol_speed_interpolated_block",
		"vtol_speed_interpolated_block",
		"s_vtol_speed_interpolated_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		VTOL_SPEED_INTERPOLATED_BLOCK_ID)
	{
		{ _field_real, "rotor damping", "maxes out around 30" },
		{ _field_real, "maximum left acceleration" },
		{ _field_real, "maximum forward acceleration" },
		{ _field_real, "drag coeficient" },
		{ _field_real, "constant deceleration" },
		{ _field_real, "magic angular acc exp", "magic force that torques vehicle back towards up" },
		{ _field_real, "magic angular acc scale", "magic force that torques vehicle back towards up" },
		{ _field_real, "magic angular acc k", "magic force that torques vehicle back towards up" },
		{ _field_terminator }
	};

	#define WALKER_PHYSICS_LEG_BLOCK_ID { 0x3DED37EB, 0xB2934219, 0x901F0006, 0x75D3AF53 }
	TAG_STRUCT(
		walker_physics_leg_block,
		"walker_physics_leg_block",
		"walker_physics_leg_block",
		"s_walker_physics_leg_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WALKER_PHYSICS_LEG_BLOCK_ID)
	{
		FIELD_EXPLANATION("walker physics", nullptr),
		{ _field_char_enum, "leg group", &walker_physics_leg_group_enum },
		{ _field_char_enum, "leg side", &walker_physics_leg_side_enum },
		{ _field_char_integer, "leg side order", "for each side order the legs from 0-n where 0 is the most forward leg" },
		{ _field_char_integer, "valid" },
		{ _field_string_id, "hip node a name" },
		{ _field_string_id, "hip node b name" },
		{ _field_string_id, "knee node a name" },
		{ _field_string_id, "knee node b name" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "foot marker name" },
		FIELD_PAD("RLTGT", 60),
		{ _field_long_flags, "flags", &walker_physics_leg_flags },
		{ _field_real_vector_3d, "runtime initial origin to hip offset" },
		{ _field_real_vector_3d, "runtime pivot center to hip offset" },
		{ _field_real, "runtime upper leg length" },
		{ _field_real, "runtime lower leg length" },
		{ _field_short_integer, "runtime hip node a index" },
		{ _field_short_integer, "runtime hip node b index" },
		{ _field_short_integer, "runtime knee node a index" },
		{ _field_short_integer, "runtime knee node b index" },
		{ _field_short_integer, "runtime foot marker group index" },
		{ _field_short_integer, "runtime foot node index" },
		{ _field_short_integer, "runtime hip node index" },
		{ _field_short_integer, "runtime knee node index" },
		{ _field_real_vector_3d, "plant constraint position" },
		FIELD_PAD("GKX", 12),
		{ _field_terminator }
	};

	STRINGS(walker_physics_leg_group_enum)
	{
		"primary",
		"secondary"
	};
	STRING_LIST(walker_physics_leg_group_enum, walker_physics_leg_group_enum_strings, _countof(walker_physics_leg_group_enum_strings));

	STRINGS(walker_physics_leg_side_enum)
	{
		"left",
		"right"
	};
	STRING_LIST(walker_physics_leg_side_enum, walker_physics_leg_side_enum_strings, _countof(walker_physics_leg_side_enum_strings));

	STRINGS(walker_physics_leg_flags)
	{
		"constrained plant"
	};
	STRING_LIST(walker_physics_leg_flags, walker_physics_leg_flags_strings, _countof(walker_physics_leg_flags_strings));

	#define WALKER_PHYSICS_STRUCT_ID { 0x769D2C0D, 0xAEF54395, 0x86ECFA87, 0xB067AB04 }
	TAG_STRUCT(
		walker_physics_struct,
		"walker_physics_struct",
		"walker_physics_struct",
		"s_walker_physics_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WALKER_PHYSICS_STRUCT_ID)
	{
		{ _field_real_vector_3d, "maximum leg motion", "in WU, how far can we displace the legs in x,y,z each step" },
		{ _field_real, "maximum turn", "in degrees, how much can this walker turn in one step" },
		{ _field_block, "legs", &walker_physics_leg_block_block },
		{ _field_real, "leg apex fraction", "0-1 fraction.  where the leg tansitions from lift to drop" },
		{ _field_real, "lift exponent", "x(0-1) power exponent" },
		{ _field_real, "drop exponent", "x(0-1) power exponent" },
		{ _field_real_vector_3d, "object space pivot position" },
		{ _field_terminator }
	};

	#define WATER_BOUNDING_BOX_BLOCK_ID { 0xF28EACD0, 0xF1FF41A9, 0x96B930D0, 0xC2A5A259 }
	TAG_STRUCT(
		water_bounding_box_block,
		"water_bounding_box_block",
		"water_bounding_box_block",
		"s_water_bounding_box_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WATER_BOUNDING_BOX_BLOCK_ID)
	{
		{ _field_short_integer, "mesh index" },
		{ _field_short_integer, "part index" },
		{ _field_real_point_3d, "position bounds 0" },
		{ _field_real_point_3d, "position bounds 1" },
		{ _field_terminator }
	};

	#define WATER_PHYSICS_DRAG_PROPERTIES_STRUCT_ID { 0xFCE5EAF2, 0x3E2D4059, 0x8C4C8BC2, 0x4F5683D6 }
	TAG_STRUCT(
		water_physics_drag_properties_struct,
		"water_physics_drag_properties_struct",
		"water_physics_drag_properties_struct",
		"s_water_physics_drag_properties_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WATER_PHYSICS_DRAG_PROPERTIES_STRUCT_ID)
	{
		FIELD_GROUP_BEGIN("Pressure"),
		{ _field_struct, "pressure", &physics_force_function_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("Suction"),
		{ _field_struct, "suction", &physics_force_function_struct },
		FIELD_GROUP_END(),
		{ _field_real, "linear damping" },
		{ _field_real, "angular damping" },
		{ _field_terminator }
	};

	#define WATER_PHYSICS_DRAG_PROPERTIES_STRUCT_DEFINITION_ID { 0xAFDC9397, 0x8FD848DB, 0xB431C572, 0xB7A2BEF8 }
	TAG_STRUCT(
		water_physics_drag_properties_struct_definition,
		"water_physics_drag_properties_struct_definition",
		"water_physics_drag_properties_struct_definition",
		"s_water_physics_drag_properties_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WATER_PHYSICS_DRAG_PROPERTIES_STRUCT_DEFINITION_ID)
	{
		{ _field_struct, "drag", &water_physics_drag_properties_struct },
		{ _field_terminator }
	};

	#define WATER_PHYSICS_HULL_SURFACE_DEFINITION_BLOCK_ID { 0x201415C3, 0x124B45F8, 0xB7118F83, 0xA4AD5B50 }
	TAG_STRUCT(
		water_physics_hull_surface_definition_block,
		"water_physics_hull_surface_definition_block",
		"water_physics_hull_surface_definition_block",
		"s_water_physics_hull_surface_definition_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WATER_PHYSICS_HULL_SURFACE_DEFINITION_BLOCK_ID)
	{
		{ _field_word_flags, "flags", &water_physics_hull_surface_definition_flags },
		FIELD_PAD("pad0", 2),
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "marker name" },
		{ _field_real, "radius" },
		{ _field_block, "drag", &water_physics_material_override_block },
		{ _field_terminator }
	};

	STRINGS(water_physics_hull_surface_definition_flags)
	{
		"works on land#drives on an extruded version of everything physical in your level",
		"effects only"
	};
	STRING_LIST(water_physics_hull_surface_definition_flags, water_physics_hull_surface_definition_flags_strings, _countof(water_physics_hull_surface_definition_flags_strings));

	#define WATER_PHYSICS_MATERIAL_OVERRIDE_ID { 0x520E02BA, 0x236044FA, 0xA55378A7, 0xA40AF1D2 }
	TAG_STRUCT(
		water_physics_material_override,
		"water_physics_material_override",
		"water_physics_material_override",
		"s_water_physics_material_override",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WATER_PHYSICS_MATERIAL_OVERRIDE_ID)
	{
		{ _field_string_id, "material" },
		{ _field_struct, "drag", &water_physics_drag_properties_struct },
		{ _field_terminator }
	};

	#define WAVE_SQUAD_SPECIFICATION_STRUCT_STRUCT_ID { 0x55990120, 0x27804544, 0x9145EB6F, 0xBFA6A0A3 }
	TAG_STRUCT(
		wave_squad_specification_struct_struct,
		"wave_squad_specification_struct_struct",
		"wave_squad_specification_struct_struct",
		"s_wave_squad_specification_struct_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WAVE_SQUAD_SPECIFICATION_STRUCT_STRUCT_ID)
	{
		{ _field_tag_reference, "squad template", &squad_template_group_reference$2 },
		{ _field_struct, "spawn conditions", &ai_spawn_conditions_struct },
		{ _field_short_integer, "weight", "The relative weight given to this squad spawning" },
		FIELD_EXPLANATION("MIN/MAX SPAWN COUNTS", "When spawning a number of squads from this wave template, try and spawn at least the minimum number, and at most the maximum number. Once these min/max bounds have been met, probabilistic distribution will continue."),
		{ _field_char_integer, "min spawn", "Spawn AT LEAST this number of squads. Value of 0 means \"no minimum\"" },
		{ _field_char_integer, "max spawn", "Spawn NO MORE THAN this number of squads. Value of 0 means \"no maximum\"" },
		{ _field_long_enum, "placement filter", "Filter where this squad specification can spawn by matching this value with the values in squad definitions in the scenario", &wave_placement_filter_enum },
		{ _field_terminator }
	};

	TAG_REFERENCE(squad_template_group_reference$2, SQUAD_TEMPLATE_TAG);

	#define WAVE_TEMPLATE_BLOCK_STRUCT_ID { 0xB82E4294, 0x71E441F2, 0x9CE4C7D4, 0x916B76B7 }
	TAG_STRUCT(
		wave_template_block_struct,
		"wave_template_block_struct",
		"wave_template_block_struct",
		"s_wave_template_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WAVE_TEMPLATE_BLOCK_STRUCT_ID)
	{
		{ _field_block, "squad specifications", &wave_squad_specification_struct_block },
		{ _field_terminator }
	};

	#define WEAPONSCALESHOTLEVELSTRUCT_ID { 0xE74FC03E, 0x27224C96, 0xAB423829, 0x624F9BA0 }
	TAG_STRUCT(
		weaponscaleshotlevelstruct,
		"weaponScaleshotLevelStruct",
		"weaponScaleshotLevelStruct",
		"s_weaponscaleshotlevelstruct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPONSCALESHOTLEVELSTRUCT_ID)
	{
		{ _field_long_flags, "flags", &weaponscaleshotlevelflags },
		{ _field_real, "minimum power level", "the minimum power at which this scaleshot level kicks in" },
		{ _field_real, "power change per shot", "the change per shot in power when you're at this level" },
		{ _field_real, "power change per second", "the change per second in power when you're at this level" },
		{ _field_tag_reference, "projectile", "the projectile to fire at this level", &projectile_group_reference$3 },
		{ _field_block, "firing effects", "firing effects when firing at this level", &barrel_firing_effect_block_block },
		{ _field_terminator }
	};

	STRINGS(weaponscaleshotlevelflags)
	{
		"cannot gain power at this level#if true, as long as the weapon is at this level, you cannot gain positive power, only negative values are applied"
	};
	STRING_LIST(weaponscaleshotlevelflags, weaponscaleshotlevelflags_strings, _countof(weaponscaleshotlevelflags_strings));

	#define WEAPONSCALESHOTSTRUCT_ID { 0x176D67AE, 0xE4C5487D, 0x9D62B870, 0x5AD61B72 }
	TAG_STRUCT(
		weaponscaleshotstruct,
		"weaponScaleshotStruct",
		"weaponScaleshotStruct",
		"s_weaponscaleshotstruct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPONSCALESHOTSTRUCT_ID)
	{
		{ _field_long_flags, "flags", &weaponscaleshotflags },
		{ _field_real, "power per shot", "the amount of scaleshot power you get when this weapon is fired" },
		{ _field_real, "power per hit", "the amount of scaleshot power you get when a projectile from this weapon hits an enemy" },
		{ _field_real, "power change per second", "the change per second in power" },
		FIELD_EXPLANATION("power levels", "IMPORTANT: put these in increasing order, by \"minimum power level\".  I claim no responsibility for weird behavior if they\'re out of order."),
		{ _field_block, "power levels", &weaponscaleshotlevelstruct_block },
		{ _field_terminator }
	};

	STRINGS(weaponscaleshotflags)
	{
		"level latches#if true, once you hit a power level, you stay at that level or higher until your power value hits 0; otherwise your power level is recomputed constantly"
	};
	STRING_LIST(weaponscaleshotflags, weaponscaleshotflags_strings, _countof(weaponscaleshotflags_strings));

	#define WEAPONSPAWNINFLUENCEBLOCK_ID { 0x87D4A845, 0x10704864, 0x96A1F457, 0x58B8ED50 }
	TAG_STRUCT(
		weaponspawninfluenceblock,
		"weaponSpawnInfluenceBlock",
		"weaponSpawnInfluenceBlock",
		"s_weaponspawninfluenceblock",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPONSPAWNINFLUENCEBLOCK_ID)
	{
		{ _field_tag_reference, "weapon", &weapon_group_reference$10 },
		{ _field_real, "full weight range", nullptr, "wu" },
		{ _field_real, "fall-off range", nullptr, "wu" },
		{ _field_real, "fall-off cone radius", nullptr, "wu" },
		{ _field_real, "weight" },
		{ _field_terminator }
	};

	TAG_REFERENCE(weapon_group_reference$10, WEAPON_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY | TAG_REFERENCE_FLAG_DEPENDENCY_FOR_CACHE_FILE_SHARING);

	#define WEAPON_BARREL_DAMAGE_EFFECT_STRUCT_ID { 0xCC000C1, 0x6C214FBD, 0x8B1DF64F, 0xC75CB408 }
	VERSIONED_TAG_STRUCT(
		weapon_barrel_damage_effect_struct,
		"weapon_barrel_damage_effect_struct",
		"weapon_barrel_damage_effect_struct",
		"s_weapon_barrel_damage_effect_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_BARREL_DAMAGE_EFFECT_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_tag_reference, "damage effect", &damage_effect_group_reference },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	#define WEAPON_BARREL_FIRING_ERROR_STRUCT_ID { 0xB76772F5, 0x98BB4797, 0xBC2BC6CD, 0x43C3E14E }
	TAG_STRUCT(
		weapon_barrel_firing_error_struct,
		"weapon_barrel_firing_error_struct",
		"weapon_barrel_firing_error_struct",
		"s_weapon_barrel_firing_error_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_BARREL_FIRING_ERROR_STRUCT_ID)
	{
		{ _field_real, "deceleration time", "the continuous idle time it would take for a barrel_error of 1.0 to return to its minimum value.\nMinimum value is usually 0.0 but sprinting can override this. See\n'globals@Player information.momentum and sprinting.min weapon error'", "seconds" },
		{ _field_real_bounds, "damage error", "the range of angles (in degrees) that a damaged weapon will skew fire" },
		{ _field_angle, "min error look pitch rate", "yaw rate is doubled" },
		{ _field_angle, "full error look pitch rate", "yaw rate is doubled" },
		{ _field_real, "look pitch error power", "use to soften or sharpen the rate ding" },
		{ _field_terminator }
	};

	#define WEAPON_BARREL_FIRING_PARAMETERS_STRUCT_ID { 0x85D673EA, 0x92E147FF, 0xB5F3E5BA, 0x101796F3 }
	TAG_STRUCT(
		weapon_barrel_firing_parameters_struct,
		"weapon_barrel_firing_parameters_struct",
		"weapon_barrel_firing_parameters_struct",
		"s_weapon_barrel_firing_parameters_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_BARREL_FIRING_PARAMETERS_STRUCT_ID)
	{
		{ _field_real_bounds, "rounds per second", "the number of firing effects created per second" },
		{ _field_string_id, "rate of fire acceleration", "function value sets the current rate of fire when the barrel is firing" },
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final rounds per second", "seconds" },
		{ _field_string_id, "rate of fire deceleration", "function value sets the current rate of fire when the barrel is not firing" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return from its final rounds per second to its initial", "seconds" },
		{ _field_real, "barrel spin scale", "scale the barrel spin speed by this amount" },
		{ _field_real_fraction, "blurred rate of fire", "a percentage between 0 and 1 which controls how soon in its firing animation the weapon blurs" },
		{ _field_short_integer_bounds, "shots per fire", "allows designer caps to the shots you can fire from one firing action" },
		{ _field_real, "fire recovery time", "how long after a set of shots it takes before the barrel can fire again", "seconds" },
		{ _field_real_fraction, "soft recovery fraction", "how much of the recovery allows shots to be queued" },
		{ _field_real, "melee  fire recovery time", "how long after a set of shots it takes before the weapon can melee", "seconds" },
		{ _field_real_fraction, "melee soft recovery fraction", "how much of the melee recovery allows melee to be queued" },
		{ _field_terminator }
	};

	#define WEAPON_BARREL_FIRST_PERSON_OFFSET_BLOCK_ID { 0xAEB3ED8, 0xCDED4570, 0xA10B29FD, 0xCFA4104A }
	TAG_STRUCT(
		weapon_barrel_first_person_offset_block,
		"weapon_barrel_first_person_offset_block",
		"weapon_barrel_first_person_offset_block",
		"s_weapon_barrel_first_person_offset_block",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_BARREL_FIRST_PERSON_OFFSET_BLOCK_ID)
	{
		{ _field_real_point_3d, "first person offset", "+x is forward, +z is up, +y is left", "world units" },
		{ _field_terminator }
	};

	#define WEAPON_BARREL_FUNCTION_BLOCK_ID { 0x7DB0BB50, 0xDD6D4AB6, 0xB1680928, 0x130AE1C8 }
	TAG_STRUCT(
		weapon_barrel_function_block,
		"weapon_barrel_function_block",
		"weapon_barrel_function_block",
		"s_weapon_barrel_function_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_BARREL_FUNCTION_BLOCK_ID)
	{
		{ _field_struct, "function", &scalar_function_named_struct },
		{ _field_terminator }
	};

	#define WEAPON_BARREL_PROJECTILE_ACCURACY_PENALTY_FUNCTION_STRUCT_ID { 0x7D45A208, 0xAA304F19, 0x847FE6F6, 0x5B453291 }
	TAG_STRUCT(
		weapon_barrel_projectile_accuracy_penalty_function_struct,
		"weapon_barrel_projectile_accuracy_penalty_function_struct",
		"weapon_barrel_projectile_accuracy_penalty_function_struct",
		"s_weapon_barrel_projectile_accuracy_penalty_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_BARREL_PROJECTILE_ACCURACY_PENALTY_FUNCTION_STRUCT_ID)
	{
		{ _field_block, "firing penalty function", "percentage accuracy lost when the barrel has fired", &weapon_barrel_function_block_block },
		{ _field_block, "firing crouched penalty function", "percentage accuracy lost when the barrel has fired from a crouched position", &weapon_barrel_function_block_block },
		{ _field_block, "moving penalty function", "percentage accuracy lost when moving", &weapon_barrel_function_block_block },
		{ _field_block, "turning penalty function", "percentage accuracy lost when turning the camera", &weapon_barrel_function_block_block },
		{ _field_real, "error angle max rotation", "angle which represents the maximum input to the turning penalty function." },
		{ _field_terminator }
	};

	#define WEAPON_BARREL_PROJECTILE_ACCURACY_PENALTY_STRUCT_ID { 0x58C5820, 0x7637243A, 0x2D036E58, 0x11C1972B }
	TAG_STRUCT(
		weapon_barrel_projectile_accuracy_penalty_struct,
		"weapon_barrel_projectile_accuracy_penalty_struct",
		"weapon_barrel_projectile_accuracy_penalty_struct",
		"s_weapon_barrel_projectile_accuracy_penalty_struct",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_BARREL_PROJECTILE_ACCURACY_PENALTY_STRUCT_ID)
	{
		FIELD_GROUP_BEGIN("accuracy penalties"),
		{ _field_real, "reload penalty", "percentage accuracy lost when reloading" },
		{ _field_real, "switch penalty", "percentage accuracy lost when switching weapons" },
		{ _field_real, "zoom penalty", "percentage accuracy lost when zooming in/out" },
		{ _field_real, "jump penalty", "percentage accuracy lost when jumping" },
		FIELD_EXPLANATION("barrel_error penalty functions", "barrel_error = barrel_error + penaltyfunction(barrel_error)\nWhere input value \'X\' produces output value \'Y\'\n"),
		FIELD_GROUP_BEGIN("single wield penalties"),
		{ _field_struct, "single wield penalties", &weapon_barrel_projectile_accuracy_penalty_function_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("dual wield penalties"),
		{ _field_struct, "dual wield penalties", &weapon_barrel_projectile_accuracy_penalty_function_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_END(),
		{ _field_terminator }
	};

	#define WEAPON_BARRELS_ID { 0x52D6B3B0, 0x3234423B, 0x95125B72, 0xFC44714A }
	VERSIONED_TAG_STRUCT(
		weapon_barrels,
		"weapon_barrels",
		"weapon_barrels",
		"s_weapon_barrels",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_BARRELS_ID)
	{
		{ _struct_version_mode_greater_or_equal, 2, 46 },
		{ _field_long_flags, "flags", &weapon_barrel_flags },
		FIELD_EXPLANATION("firing", nullptr),
		{ _field_struct, "firing", &weapon_barrel_firing_parameters_struct },
		{ _field_short_block_index, "magazine", "the magazine from which this trigger draws its ammunition", &magazines_block },
		{ _field_short_integer, "rounds per shot", "the number of rounds expended to create a single firing effect" },
		{ _field_short_integer, "minimum rounds loaded", "the minimum number of rounds necessary to fire the weapon" },
		{ _field_short_integer, "rounds between tracers", "the number of non-tracer rounds fired between tracers" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "optional barrel marker name" },
		{ _field_short_enum, "firing noise", "how loud this weapon appears to the AI", &ai_sound_volume_enum },
		FIELD_EXPLANATION("prediction properties", "what the behavior of this barrel is in a predicted network game"),
		{ _field_short_enum, "prediction type", &barrel_prediction_type_enum },
		{ _field_real, "event_synchronized_projectiles_per_second", "Valid only for barrels set to prediction type \"continuous\". Controls how many projectiles per second can be individually synchronized (use debug_projectiles to diagnose)." },
		{ _field_real, "maximum_barrel_error_for_event_synchronization", "Valid only for barrels set to prediction type \"continuous\". If the barrel's current error level is over this value (zero to one scale), we will not consider synchronizing projectiles with individual events (use debug_projectiles to diagnose)." },
		FIELD_EXPLANATION("firing error", "full error look pitch rate controlls how fast you can turn \nwith full error, yaw is implied from pitch. 0==130.\nfor reference, profile sensitivities are set to:\n1: 40\n3: 60\n9: 130\n"),
		{ _field_struct, "firing error", &weapon_barrel_firing_error_struct },
		FIELD_EXPLANATION("projectile", nullptr),
		{ _field_short_enum, "distribution function", &weapon_barrel_distribution_functions },
		{ _field_short_integer, "projectiles per shot" },
		{ _field_block, "custom vectors", "Custom vectors must be set in distribution function above", &projectiledistributioncustomvector_block },
		{ _field_real, "distribution angle", "used by distribution function 'horizontal fan' above", "degrees" },
		{ _field_angle, "minimum error", "projectile direction is randomly selected between this and max_error_angle below", "degrees" },
		{ _field_angle_bounds, "error angle", "current barrel_error is linearly interpolated between these to generate max_error_angle", "degrees (max_error_angle)" },
		{ _field_struct, "accuracy penalties", &weapon_barrel_projectile_accuracy_penalty_struct },
		{ _field_block, "first person offset", &weapon_barrel_first_person_offset_block_block },
		{ _field_char_enum, "damage effect reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("DGSXQ", 3),
		{ _field_tag_reference, "projectile", &projectile_group_reference$3 },
		{ _field_tag_reference, "optional secondary projectile", &projectile_group_reference$3 },
		{ _field_struct, "eh", &weapon_barrel_damage_effect_struct }, // structure_version:1
		{ _field_tag_reference, "crate projectile", &crate_group_reference$8 },
		{ _field_real, "crate projectile speed" },
		FIELD_EXPLANATION("misc", nullptr),
		{ _field_real, "ejection port recovery time", "the amount of time (in seconds) it takes for the ejection port to transition from 1.0 (open) to 0.0 (closed) after a shot has been fired" },
		{ _field_real, "illumination recovery time", "the amount of time (in seconds) it takes the illumination function to transition from 1.0 (bright) to 0.0 (dark) after a shot has been fired" },
		{ _field_real_fraction, "heat generated per round", "the amount of heat generated each time the barrel fires. Unlike the name suggests, this amount of heat is NOT applied per projectile created.", nullptr, "[0,1]" },
		{ _field_string_id, "heat generated per round function", "function value sets the amount of heat to add to the weapon each tick the barrel is firing" },
		{ _field_real_fraction, "age generated per round", "the amount the weapon ages each time the trigger is fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "CAMPAIGN age generated per round", "the amount the weapon ages each time the trigger is fired", nullptr, "[0,1]" },
		{ _field_real, "overload time", "the next trigger fires this often while holding down this trigger", "seconds" },
		{ _field_real, "runtime illumination recovery rate" },
		{ _field_real, "runtime ejection port recovery rate" },
		{ _field_real, "runtime rate of fire acceleration rate" },
		{ _field_real, "runtime rate of fire deceleration rate" },
		{ _field_real, "runtime error deceleration rate" },
		{ _field_block, "firing effects", "firing effects determine what happens when this trigger is fired", &barrel_firing_effect_block_block },
		
		{ _struct_version_mode_equal, 1, 55 },
		{ _field_long_flags, "flags", &weapon_barrel_flags },
		FIELD_EXPLANATION("firing", nullptr),
		{ _field_real_bounds, "rounds per second", "the number of firing effects created per second" },
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final rounds per second", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return from its final rounds per second to its initial", "seconds" },
		{ _field_real_fraction, "blurred rate of fire", "a percentage between 0 and 1 which controls how soon in its firing animation the weapon blurs" },
		{ _field_short_integer_bounds, "shots per fire", "allows designer caps to the shots you can fire from one firing action" },
		{ _field_real, "fire recovery time", "how long after a set of shots it takes before the barrel can fire again", "seconds" },
		{ _field_real_fraction, "soft recovery fraction", "how much of the recovery allows shots to be queued" },
		{ _field_short_block_index, "magazine", "the magazine from which this trigger draws its ammunition", &magazines_block },
		{ _field_short_integer, "rounds per shot", "the number of rounds expended to create a single firing effect" },
		{ _field_short_integer, "minimum rounds loaded", "the minimum number of rounds necessary to fire the weapon" },
		{ _field_short_integer, "rounds between tracers", "the number of non-tracer rounds fired between tracers" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "optional barrel marker name" },
		FIELD_EXPLANATION("prediction properties", "what the behavior of this barrel is in a predicted network game"),
		{ _field_short_enum, "prediction type", &barrel_prediction_type_enum },
		{ _field_short_enum, "firing noise", "how loud this weapon appears to the AI", &ai_sound_volume_enum },
		FIELD_EXPLANATION("error", nullptr),
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final error", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial error", "seconds" },
		{ _field_real_bounds, "damage error", "the range of angles (in degrees) that a damaged weapon will skew fire" },
		FIELD_EXPLANATION("dual weapon error", nullptr),
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final error", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial error", "seconds" },
		FIELD_PAD("IIJ", 8),
		{ _field_angle, "minimum error", nullptr, "degrees" },
		{ _field_angle_bounds, "error angle", nullptr, "degrees" },
		{ _field_real_fraction, "dual wield damage scale" },
		FIELD_EXPLANATION("projectile", nullptr),
		{ _field_short_enum, "distribution function", &weapon_barrel_distribution_functions },
		{ _field_short_integer, "projectiles per shot" },
		{ _field_real, "distribution angle", nullptr, "degrees" },
		{ _field_angle, "minimum error", nullptr, "degrees" },
		{ _field_angle_bounds, "error angle", nullptr, "degrees" },
		{ _field_real_point_3d, "first person offset", "+x is forward, +z is up, +y is left", "world units" },
		{ _field_char_enum, "damage effect reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("MDVFKBPYK", 3),
		{ _field_tag_reference, "projectile", &projectile_group_reference$3 },
		{ _field_struct, "eh", &weapon_barrel_damage_effect_struct }, // structure_version:1
		FIELD_EXPLANATION("misc", nullptr),
		{ _field_real, "ejection port recovery time", "the amount of time (in seconds) it takes for the ejection port to transition from 1.0 (open) to 0.0 (closed) after a shot has been fired" },
		{ _field_real, "illumination recovery time", "the amount of time (in seconds) it takes the illumination function to transition from 1.0 (bright) to 0.0 (dark) after a shot has been fired" },
		{ _field_real_fraction, "heat generated per round", "the amount of heat generated each time the trigger is fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "age generated per round", "the amount the weapon ages each time the trigger is fired", nullptr, "[0,1]" },
		{ _field_real, "overload time", "the next trigger fires this often while holding down this trigger", "seconds" },
		FIELD_EXPLANATION("angle change (recoil)", nullptr),
		{ _field_angle_bounds, "angle change per shot", "angle change per shot of the weapon during firing" },
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final angle change per shot", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial angle change per shot", "seconds" },
		{ _field_short_enum, "angle change function", "function used to scale between initial and final angle change per shot", &global_transition_functions_enum },
		FIELD_PAD("YZHBVKFFY", 2),
		FIELD_PAD("B", 8),
		FIELD_PAD("FQHIF", 24),
		{ _field_block, "firing effects", "firing effects determine what happens when this trigger is fired", &barrel_firing_effect_block_block },
		
		{ _struct_version_mode_equal, 0, 56 },
		{ _field_long_flags, "flags", &weapon_barrel_flags },
		{ _field_real_bounds, "rounds per second", "the number of firing effects created per second" },
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final rounds per second", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return from its final rounds per second to its initial", "seconds" },
		{ _field_real_fraction, "blurred rate of fire", "a percentage between 0 and 1 which controls how soon in its firing animation the weapon blurs" },
		{ _field_short_integer_bounds, "shots per fire", "allows designer caps to the shots you can fire from one firing action" },
		{ _field_real, "fire recovery time", "how long after a set of shots it takes before the barrel can fire again", "seconds" },
		{ _field_real_fraction, "soft recovery fraction", "how much of the recovery allows shots to be queued" },
		{ _field_short_block_index, "magazine", "the magazine from which this trigger draws its ammunition", &magazines_block },
		{ _field_short_integer, "rounds per shot", "the number of rounds expended to create a single firing effect" },
		{ _field_short_integer, "minimum rounds loaded", "the minimum number of rounds necessary to fire the weapon" },
		{ _field_short_integer, "rounds between tracers", "the number of non-tracer rounds fired between tracers" },
		FIELD_CUSTOM("value", _tag_field_custom_type_marker_name_attribute),
		{ _field_string_id, "optional barrel marker name" },
		FIELD_PAD("HHH", 2),
		{ _field_short_enum, "firing noise", "how loud this weapon appears to the AI", &ai_sound_volume_enum },
		FIELD_PAD("JXHK", 8),
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final error", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial error", "seconds" },
		{ _field_real_bounds, "damage error", "the range of angles (in degrees) that a damaged weapon will skew fire" },
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final error", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial error", "seconds" },
		FIELD_PAD("TQUSQGP", 8),
		{ _field_angle, "minimum error", nullptr, "degrees" },
		{ _field_angle_bounds, "error angle", nullptr, "degrees" },
		{ _field_real_fraction, "dual wield damage scale" },
		FIELD_PAD("JKT", 20),
		{ _field_short_enum, "distribution function", &weapon_barrel_distribution_functions },
		{ _field_short_integer, "projectiles per shot" },
		{ _field_real, "distribution angle", nullptr, "degrees" },
		FIELD_PAD("QHL", 4),
		{ _field_angle, "minimum error", nullptr, "degrees" },
		{ _field_angle_bounds, "error angle", nullptr, "degrees" },
		{ _field_real_point_3d, "first person offset", "+x is forward, +z is up, +y is left", "world units" },
		{ _field_char_enum, "damage effect reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("RYZQIHM", 3),
		{ _field_tag_reference, "projectile", &projectile_group_reference$3 },
		{ _field_struct, "eh", &weapon_barrel_damage_effect_struct }, // structure_version:1
		{ _field_real, "ejection port recovery time", "the amount of time (in seconds) it takes for the ejection port to transition from 1.0 (open) to 0.0 (closed) after a shot has been fired" },
		{ _field_real, "illumination recovery time", "the amount of time (in seconds) it takes the illumination function to transition from 1.0 (bright) to 0.0 (dark) after a shot has been fired" },
		FIELD_PAD("KYNR", 12),
		{ _field_real_fraction, "heat generated per round", "the amount of heat generated each time the trigger is fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "age generated per round", "the amount the weapon ages each time the trigger is fired", nullptr, "[0,1]" },
		FIELD_PAD("EN", 4),
		{ _field_real, "overload time", "the next trigger fires this often while holding down this trigger", "seconds" },
		FIELD_PAD("NBTAQHOM", 8),
		{ _field_angle_bounds, "angle change per shot", "angle change per shot of the weapon during firing" },
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final angle change per shot", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial angle change per shot", "seconds" },
		{ _field_short_enum, "angle change function", "function used to scale between initial and final angle change per shot", &global_transition_functions_enum },
		FIELD_PAD("JNTM", 2),
		FIELD_PAD("PMLCMFI", 8),
		{ _field_short_enum, "prediction type", &barrel_prediction_type_enum },
		FIELD_PAD("P", 2),
		FIELD_PAD("FW", 24),
		{ _field_block, "firing effects", "firing effects determine what happens when this trigger is fired", &barrel_firing_effect_block_block },
		
		{ _field_terminator }
	};

	STRINGS(weapon_barrel_flags)
	{
		"random firing effects#rather than being chosen sequentially, firing effects are picked randomly",
		"can fire with partial ammo#allows a weapon to be fired as long as there is a non-zero amount of ammunition loaded",
		"projectiles use weapon origin#instead of coming out of the magic first person camera origin, the projectiles for this weapon actually come out of the gun",
		"ejects during chamber#this trigger\'s ejection port is started during the key frame of its chamber animation",
		"projectile vector cannot be adjusted#projectiles fired by this weapon cannot have their direction adjusted by the AI to hit the target",
		"projectiles have identical error",
		"projectiles fire parallel#If there are multiple guns for this trigger, the projectiles emerge in parallel beams (rather than independant aiming)",
		"cant fire when others firing",
		"cant fire when others recovering",
		"don\'t clear fire bit after recovering",
		"stagger fire across multiple markers",
		"can fire at maximum age",
		"use 1 firing effect per burst",
		"prevent marker deviation#the barrel will not fire if all markers are pointed further away from the desired aiming vector than the aim assist deviation angle",
		"error ignores zoom#disables of the barrel error inversely with the zoom magnification",
		"projectile fires in marker direction#projectiles shoot out the marker direction instead of the player\'s aim vector",
		"skip test for object being outside BSP#Prevents projectile origin from changing when object is outside of BSP; Useful for units that can be placed inside physics.",
		"only reload if all barrels idle",
		"only switch weapons if barrel idle#the weapon\'s owner cannot switch weapons unless this barrel is in the idle state"
	};
	STRING_LIST(weapon_barrel_flags, weapon_barrel_flags_strings, _countof(weapon_barrel_flags_strings));

	STRINGS(barrel_prediction_type_enum)
	{
		"none",
		"continuous",
		"instant"
	};
	STRING_LIST(barrel_prediction_type_enum, barrel_prediction_type_enum_strings, _countof(barrel_prediction_type_enum_strings));

	STRINGS(weapon_barrel_distribution_functions)
	{
		"point",
		"horizontal fan",
		"custom vectors",
		"custom positions"
	};
	STRING_LIST(weapon_barrel_distribution_functions, weapon_barrel_distribution_functions_strings, _countof(weapon_barrel_distribution_functions_strings));

	TAG_REFERENCE(crate_group_reference$8, CRATE_TAG);

	#define WEAPON_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID { 0xF11CDE07, 0xCED0403C, 0xBF09B2C7, 0x6653FAB9 }
	TAG_STRUCT(
		weapon_block_index_flags_block_struct,
		"weapon_block_index_flags_block_struct",
		"weapon_block_index_flags_block_struct",
		"s_weapon_block_index_flags_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_BLOCK_INDEX_FLAGS_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "palette index", &scenario_weapon_palette_block_block },
		{ _field_terminator }
	};

	#define WEAPON_BLOCK_STRUCT_ID { 0xFFC6FB66, 0x88904EC8, 0xB98D9160, 0xFA0A7CDE }
	VERSIONED_TAG_STRUCT(
		weapon_block_struct,
		"weapon_block_struct",
		"weapon_block_struct",
		"s_weapon_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN3 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_UNKNOWN7 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_UNKNOWN18,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_BLOCK_STRUCT_ID)
	{
		{ _struct_version_mode_greater_or_equal, 1, 137 },
		{ _field_struct, "item", &item_struct_definition }, // structure_version:1
		FIELD_GROUP_BEGIN("$$$ WEAPON $$$"),
		FIELD_EXPLANATION("value", "All weapons should have \'primary trigger\' and \'secondary trigger\' markers as appropriate.\nBlurred permutations are called \'$primary-blur\' and \'$secondary-blur\'."),
		{ _field_long_flags, "flags", &weapon_definition_flags },
		{ _field_long_flags, "secondary flags", &weapon_definition_secondary_flags },
		{ _field_old_string_id, "unused label" },
		{ _field_short_enum, "secondary trigger mode", &secondary_trigger_modes },
		{ _field_short_integer, "maximum alternate shots loaded", "if the second trigger loads alternate ammunition, this is the maximum number of shots that can be loaded at a time" },
		{ _field_real, "turn on time", "how long after being readied it takes this weapon to switch its 'turned_on' attachment to 1.0" },
		FIELD_EXPLANATION("weapon vision mode settings", nullptr),
		{ _field_tag_reference, "vision mode", "activated when this weapon is charging", &vision_mode_group_reference },
		{ _field_real, "vision cooldown time", nullptr, "seconds" },
		FIELD_EXPLANATION("old obsolete export to functions", nullptr),
		{ _field_real, "ready time", nullptr, "seconds" },
		{ _field_tag_reference, "ready effect", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "ready damage effect", &damage_effect_group_damage_response_definition_group_reference },
		FIELD_EXPLANATION("heat", nullptr),
		{ _field_real_fraction, "heat recovery threshold", "the heat value a weapon must return to before leaving the overheated state, once it has become overheated in the first place", nullptr, "[0,1]" },
		{ _field_real_fraction, "overheated threshold", "the heat value over which a weapon first becomes overheated (should be greater than the heat recovery threshold)", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat detonation threshold", "the heat value above which the weapon has a chance of exploding each time it is fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat detonation fraction", "the percent chance (between 0.0 and 1.0) the weapon will explode when fired over the heat detonation threshold", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat loss per second", "the amount of heat lost each second when the weapon is not being fired", nullptr, "[0,1]" },
		{ _field_string_id, "heat loss", "function values sets the current heat loss per second" },
		{ _field_string_id, "heat loss venting", "function value sets the heat loss per second while weapon is being vented" },
		{ _field_real, "heat venting time", nullptr, "seconds" },
		{ _field_real_fraction, "heat venting exit heat", "heat at which to begin the venting exit animations so that the weapon is just about fully cooled when the exit animation completes." },
		{ _field_real_fraction, "heat illumination", "the amount of illumination given off when the weapon is overheated", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat warning threshold", "the amount of heat at which a warning will be displayed on the hud" },
		{ _field_real_fraction, "overheated heat loss per second", "the amount of heat lost each second when the weapon is not being fired", nullptr, "[0,1]" },
		{ _field_string_id, "overheated heat loss", "function values sets the heat loss per second when weapon is overheated" },
		{ _field_tag_reference, "overheated", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "overheated damage effect", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "detonation", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_block, "melee damage parameters", &melee_damage_parameters_block_block },
		{ _field_tag_reference, "clang effect", "effect that is played in the air between two players that clang with this weapon", &sound_old_group_effect_group_reference },
		{ _field_char_enum, "melee damage reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("FEOROBJE", 1),
		FIELD_EXPLANATION("zoom", nullptr),
		{ _field_short_integer, "magnification levels", "the number of magnification levels this weapon allows" },
		{ _field_real_bounds, "magnification range" },
		{ _field_char_integer, "zoom effect ticks", "how often 'zoom effect' will be triggered (while zoomed)" },
		FIELD_PAD("wzt", 3),
		{ _field_tag_reference, "zoom effect", "effect that is played while zoomed", &sound_old_group_effect_group_reference },
		FIELD_EXPLANATION("weapon aim assist", "DEPRECATED -- this will go away in favor of aim assist modes below"),
		{ _field_struct, "weapon aim assist", &aim_assist_struct },
		{ _field_struct, "iron sights modifiers", &weaponbarrelironsightsstruct },
		{ _field_block, "aim assist modes", "First mode is normal, second mode is iron sights/scoped", &globalaimassistblock_block },
		{ _field_block, "target tracking", &global_target_tracking_parameters_block_block },
		FIELD_EXPLANATION("aim swim indexing", "swim index 0 used when unzoomed, index 1 is for first zoom level, index 2 is 2nd zoom, etc."),
		{ _field_block, "aim swim", &globalaimswimblock_block },
		FIELD_EXPLANATION("ballistics", nullptr),
		{ _field_real_bounds, "ballistic arcing firing bounds", "At the min range (or closer), the minimum ballistic arcing is used, at the max (or farther away), the maximum arcing is used", "world units" },
		{ _field_real_bounds, "ballistic arcing fraction bounds", "Controls speed and degree of arc. 0 = low, fast, 1 = high, slow", nullptr, "[0-1]" },
		FIELD_EXPLANATION("movement", nullptr),
		{ _field_short_enum, "movement penalized", &movement_penalty_modes },
		FIELD_PAD("GTIXVRPA", 2),
		{ _field_real_fraction, "forward movement penalty", "percent slowdown to forward movement for units carrying this weapon" },
		{ _field_real_fraction, "sideways movement penalty", "percent slowdown to sideways and backward movement for units carrying this weapon" },
		{ _field_real_fraction, "gunner armor mod forward movement penalty", "percent slowdown to forward movement for units carrying this weapon with the gunner armor mod active" },
		{ _field_real_fraction, "gunner armor mod sideways movement penalty", "percent slowdown to sideways and backward movement for units carrying this weapon with the gunner armor mod active" },
		FIELD_EXPLANATION("Aiming", nullptr),
		{ _field_real, "Maximum pitch rate", "This will cap the speed at which the player can aim when holding this weapon, probably want to set something sensible for turrets etc", "degrees per second" },
		FIELD_EXPLANATION("ArmorMod Parameters", nullptr),
		{ _field_real, "Ammopack power capacity", "Ammopack armormod - 0.2 would give 20% additional capacity to an energy weapon" },
		FIELD_EXPLANATION("AI targeting parameters", nullptr),
		{ _field_real, "AI scariness" },
		FIELD_EXPLANATION("miscellaneous", nullptr),
		{ _field_real, "weapon power-on time", nullptr, "seconds" },
		{ _field_real, "weapon power-off time", nullptr, "seconds" },
		{ _field_tag_reference, "weapon power-on effect", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "weapon power-off effect", &sound_old_group_effect_group_reference },
		{ _field_real, "age heat recovery penalty", "how much the weapon's heat recovery is penalized as it ages" },
		{ _field_real, "age rate of fire penalty", "how much the weapon's rate of fire is penalized as it ages" },
		{ _field_real_fraction, "age misfire start", "the age threshold when the weapon begins to misfire", nullptr, "[0,1]" },
		{ _field_real_fraction, "age misfire chance", "at age 1.0, the misfire chance per shot", nullptr, "[0,1]" },
		{ _field_tag_reference, "pickup sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "zoom-in sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "zoom-out sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "active camo ding", "how much to decrease active camo when a round is fired" },
		{ _field_string_id, "handle node", "the node that get's attached to the unit's hand" },
		FIELD_EXPLANATION("weapon labels", nullptr),
		{ _field_string_id, "weapon class" },
		{ _field_string_id, "weapon name" },
		FIELD_EXPLANATION("more miscellaneous", nullptr),
		{ _field_char_enum, "first time pickup type", &first_time_pickup_types },
		FIELD_PAD("PAD", 3),
		{ _field_short_enum, "weapon type", &weapon_types },
		{ _field_short_integer, "low ammo threshold" },
		{ _field_struct, "player interface", &weapon_interface_struct },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "magazines", &magazines_block },
		{ _field_block, "new triggers", &weapon_triggers_block },
		{ _field_block, "barrels", &weapon_barrels_block },
		FIELD_EXPLANATION("scaleshot", "Allows the weapon to scale up and fire different projectiles based upon how many hits you get etc."),
		{ _field_block, "scaleshot parameters", &weaponscaleshotstruct_block },
		{ _field_real, "runtime weapon power on velocity" },
		{ _field_real, "runtime weapon power off velocity" },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("first-person movement control", nullptr),
		{ _field_real, "max movement acceleration" },
		{ _field_real, "max movement velocity" },
		{ _field_real, "max turning acceleration" },
		{ _field_real, "max turning velocity" },
		{ _field_tag_reference, "deployed vehicle", &vehicle_group_reference$6 },
		{ _field_tag_reference, "tossed weapon", &weapon_group_reference$2 },
		{ _field_tag_reference, "age effect", &effect_group_reference },
		{ _field_tag_reference, "aged weapon", &weapon_group_reference$2 },
		{ _field_tag_reference, "aged material effects", &material_effects_group_reference },
		{ _field_real, "per kill or hit aging amount", "aging applied for 'weapon ages when damage is inflicted' or 'weapon ages with each kill' flags" },
		{ _field_real, "external aging amount" },
		{ _field_real, "campaign external aging amount" },
		{ _field_real, "external heat amount" },
		{ _field_real_fraction, "age recovered per second", "the amount of age the weapon recovers per second", nullptr, "[0,1]" },
		{ _field_tag_reference, "age fully recovered (sound or effect)", "the sound or effect played when the weapon's age reaches fully recovered", &sound_old_group_effect_group_reference },
		{ _field_real_vector_3d, "first person weapon offset" },
		{ _field_real_vector_2d, "first person scope size" },
		{ _field_real_bounds, "support third person camera range", "range in degrees. 0 is straight, -90 is down, 90 is up", "degrees" },
		{ _field_real, "weapon zoom time", "seconds" },
		{ _field_real, "weapon ready-for-use time", "seconds" },
		{ _field_real, "weapon ready 1st person animation playback scale", "e.g. - 2.0 makes playspeed twice as fast" },
		{ _field_real, "tether transition to linked time", "begins when tethered projectile is LNKED", "seconds" },
		{ _field_real, "tether transition from linked time", "begins when tethered projectile becomes non-LNKED", "seconds" },
		{ _field_string_id, "unit stow anchor name" },
		{ _field_block, "screen effects", &weapon_screen_effect_block_block },
		{ _field_tag_reference, "Player sound bank", "High quality player sound bank to be prefetched. Can be empty.", &soundbank_group_reference },
		{ _field_string_id, "Player EQ preset name", "Name of the EQ shareset in WWise to apply when this weapon is active" },
		{ _field_long_integer, "Player EQ preset hash" },
		{ _field_string_id, "Reload cancel event", "Note - this is a direct event string - not a .sound" },
		{ _field_long_integer, "Reload cancel event hash" },
		{ _field_tag_reference, "single shot fire for automatics", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "firing loop for automatics", &sound_looping_group_reference$2 },
		{ _field_block, "Sound RTPCs", &weaponsoundrtpcblock_block },
		{ _field_block, "Sound Sweeteners", &weaponsoundsweetenerblock_block },
		{ _field_string_id, "Locking Reticle Screen Name" },
		{ _field_string_id, "Locked On Reticle Screen Name" },
		FIELD_GROUP_END(),
		
		{ _struct_version_mode_equal, 0, 226 },
		FIELD_GROUP_BEGIN("OBJECT"),
		{ _field_short_integer, "runtime object type" },
		{ _field_char_enum, "Nav Mesh Cutting", &navmeshcuttingoverrideenum },
		{ _field_char_enum, "Nav Mesh Obstacle", &booleanoverrideenum },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Offset" },
		{ _field_real_vector_3d, "Nav Mesh Cutting OBB Scale" },
		{ _field_long_flags, "flags", &object_definition_flags },
		{ _field_real, "bounding radius", "If you edit this field manually, beware that the render model is no longer respected for radius calculation and that you need to set the bounding offset as well." },
		{ _field_real_point_3d, "bounding offset" },
		{ _field_real, "horizontal acceleration scale", nullptr, nullptr, "[0,+inf]", MAKE_ALT_NAMES("acceleration scale") },
		{ _field_real, "vertical acceleration scale" },
		{ _field_real, "angular acceleration scale" },
		{ _field_short_enum, "lightmap shadow mode", &lightmap_shadow_mode_enum },
		{ _field_char_enum, "sweetener size", &sweetener_size_enum },
		{ _field_char_enum, "water density", &water_density_type_enum },
		{ _field_long_integer, "runtime flags" },
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "generic hud text" },
		{ _field_tag_reference, "generic name list", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "generic service tag list", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "source sidecar", &sidecarblock_block },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference$2 },
		{ _field_tag_reference, "crate object", &crate_group_reference },
		FIELD_EXPLANATION("only set this tag if you want to override the default collision damage values in globals.globals", nullptr),
		{ _field_tag_reference, "collision damage", &collision_damage_group_reference },
		{ _field_tag_reference, "brittle collision damage", &collision_damage_group_reference },
		{ _field_block, "early mover OBB", &object_early_mover_obb_block_block },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "melee sound", "this is the sound that is made when I am meleed.  This overrides the sweetener sound of my material.", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "self-destruct time", "if non-zero, any instances of this object will destroy themselves after this many seconds.", "seconds" },
		{ _field_block, "ai properties", &object_ai_properties_block_block },
		{ _field_block, "functions", &object_function_block_block },
		{ _field_block, "runtime interpolator functions", &object_runtime_interpolator_functions_block_block },
		{ _field_block, "function switches", &objectfunctionswitchblock_block },
		{ _field_short_integer, "hud text message index" },
		{ _field_word_flags, "secondary flags", &object_definition_secondary_flags },
		{ _field_block, "attachments", &global_object_attachment_block_block },
		{ _field_block, "hull surfaces", &water_physics_hull_surface_definition_block_block },
		{ _field_block, "jetwash", &jetwash_definition_block_block },
		{ _field_block, "widgets", &object_widget_block_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "multiplayer object", &multiplayer_object_block_block },
		{ _field_tag_reference, "simulation_interpolation", "Set to a specific interpolation definition, or leave blank to inherit the default for the object type (there are defaults for bipeds, vehicles, and crates in multiplayer_globals).  To disable interpolation on a particular object whose type has interpolation by default, set this reference to the special disable_interpolation.simulation_interpolation tag.", &simulation_interpolation_group_reference },
		{ _field_block, "spawn effects", &object_spawn_effects_block_block },
		{ _field_block, "model dissolve data", &modeldissolvedatablock_block },
		{ _field_struct, "script data", &hs_script_data_struct },
		{ _field_block, "script tagalongs", &hs_references_block_block },
		{ _field_block, "scripted dependencies", &hs_references_block_block },
		FIELD_EXPLANATION("Object Abandoment", nullptr),
		{ _field_struct, "object abandonment", &object_abandonment_struct },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ ITEM $$$"),
		{ _field_long_flags, "flags", &item_definition_flags },
		{ _field_short_integer, "OLD message index" },
		{ _field_short_integer, "sort order" },
		{ _field_real, "OLD multiplayer on-ground scale" },
		{ _field_real, "OLD campaign on-ground scale" },
		FIELD_EXPLANATION("NEW hud messages", "everything you need to display shite"),
		{ _field_string_id, "pickup message" },
		{ _field_string_id, "swap message" },
		{ _field_string_id, "pickup message (dual)" },
		{ _field_string_id, "swap message (dual)" },
		{ _field_string_id, "picked up msg" },
		{ _field_string_id, "switch-to msg" },
		{ _field_string_id, "switch-to from ai msg" },
		{ _field_string_id, "notify empty msg" },
		{ _field_string_id, "notify overheated message" },
		{ _field_tag_reference, "collision sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_block, "predicted bitmaps", &predicted_bitmaps_block_block },
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_reference },
		{ _field_real_bounds, "detonation delay", nullptr, "seconds" },
		{ _field_tag_reference, "detonating effect", &effect_group_reference },
		{ _field_tag_reference, "detonation effect", &effect_group_reference },
		FIELD_EXPLANATION("Item scale settings", "because grenades look better as coconuts. 0==1"),
		{ _field_real, "ground scale" },
		{ _field_real, "small unit (armed)" },
		{ _field_real, "small unit (stowed)" },
		{ _field_real, "medium unit (armed)" },
		{ _field_real, "medium unit (stowed)" },
		{ _field_real, "large unit (armed)" },
		{ _field_real, "large unit (stowed)" },
		{ _field_real, "huge unit (armed)" },
		{ _field_real, "huge unit (stowed)" },
		{ _field_tag_reference, "grounded friction settings", "If not present, the default from global.globals is used.", &grounded_friction_group_reference },
		{ _field_tag_reference, "Tossed Override", "Used to override the object tossed when item owner is killed.  Is overridden by tossed weapon override.", &object_group_reference$3 },
		FIELD_GROUP_END(),
		FIELD_GROUP_BEGIN("$$$ WEAPON $$$"),
		FIELD_EXPLANATION("value", "All weapons should have \'primary trigger\' and \'secondary trigger\' markers as appropriate.\nBlurred permutations are called \'$primary-blur\' and \'$secondary-blur\'."),
		{ _field_long_flags, "flags", &weapon_definition_flags },
		{ _field_long_flags, "secondary flags", &weapon_definition_secondary_flags },
		{ _field_old_string_id, "unused label" },
		{ _field_short_enum, "secondary trigger mode", &secondary_trigger_modes },
		{ _field_short_integer, "maximum alternate shots loaded", "if the second trigger loads alternate ammunition, this is the maximum number of shots that can be loaded at a time" },
		{ _field_real, "turn on time", "how long after being readied it takes this weapon to switch its 'turned_on' attachment to 1.0" },
		FIELD_EXPLANATION("weapon vision mode settings", nullptr),
		{ _field_tag_reference, "vision mode", "activated when this weapon is charging", &vision_mode_group_reference },
		{ _field_real, "vision cooldown time", nullptr, "seconds" },
		FIELD_EXPLANATION("old obsolete export to functions", nullptr),
		{ _field_real, "ready time", nullptr, "seconds" },
		{ _field_tag_reference, "ready effect", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "ready damage effect", &damage_effect_group_damage_response_definition_group_reference },
		FIELD_EXPLANATION("heat", nullptr),
		{ _field_real_fraction, "heat recovery threshold", "the heat value a weapon must return to before leaving the overheated state, once it has become overheated in the first place", nullptr, "[0,1]" },
		{ _field_real_fraction, "overheated threshold", "the heat value over which a weapon first becomes overheated (should be greater than the heat recovery threshold)", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat detonation threshold", "the heat value above which the weapon has a chance of exploding each time it is fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat detonation fraction", "the percent chance (between 0.0 and 1.0) the weapon will explode when fired over the heat detonation threshold", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat loss per second", "the amount of heat lost each second when the weapon is not being fired", nullptr, "[0,1]" },
		{ _field_string_id, "heat loss", "function values sets the current heat loss per second" },
		{ _field_string_id, "heat loss venting", "function value sets the heat loss per second while weapon is being vented" },
		{ _field_real, "heat venting time", nullptr, "seconds" },
		{ _field_real_fraction, "heat venting exit heat", "heat at which to begin the venting exit animations so that the weapon is just about fully cooled when the exit animation completes." },
		{ _field_real_fraction, "heat illumination", "the amount of illumination given off when the weapon is overheated", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat warning threshold", "the amount of heat at which a warning will be displayed on the hud" },
		{ _field_real_fraction, "overheated heat loss per second", "the amount of heat lost each second when the weapon is not being fired", nullptr, "[0,1]" },
		{ _field_string_id, "overheated heat loss", "function values sets the heat loss per second when weapon is overheated" },
		{ _field_tag_reference, "overheated", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "overheated damage effect", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "detonation", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_block, "melee damage parameters", &melee_damage_parameters_block_block },
		{ _field_tag_reference, "clang effect", "effect that is played in the air between two players that clang with this weapon", &sound_old_group_effect_group_reference },
		{ _field_char_enum, "melee damage reporting type", &global_damage_reporting_enum_definition },
		FIELD_PAD("FEOROBJE", 1),
		FIELD_EXPLANATION("zoom", nullptr),
		{ _field_short_integer, "magnification levels", "the number of magnification levels this weapon allows" },
		{ _field_real_bounds, "magnification range" },
		{ _field_char_integer, "zoom effect ticks", "how often 'zoom effect' will be triggered (while zoomed)" },
		FIELD_PAD("wzt", 3),
		{ _field_tag_reference, "zoom effect", "effect that is played while zoomed", &sound_old_group_effect_group_reference },
		FIELD_EXPLANATION("weapon aim assist", "DEPRECATED -- this will go away in favor of aim assist modes below"),
		{ _field_struct, "weapon aim assist", &aim_assist_struct },
		{ _field_struct, "iron sights modifiers", &weaponbarrelironsightsstruct },
		{ _field_block, "aim assist modes", "First mode is normal, second mode is iron sights/scoped", &globalaimassistblock_block },
		{ _field_block, "target tracking", &global_target_tracking_parameters_block_block },
		FIELD_EXPLANATION("aim swim indexing", "swim index 0 used when unzoomed, index 1 is for first zoom level, index 2 is 2nd zoom, etc."),
		{ _field_block, "aim swim", &globalaimswimblock_block },
		FIELD_EXPLANATION("ballistics", nullptr),
		{ _field_real_bounds, "ballistic arcing firing bounds", "At the min range (or closer), the minimum ballistic arcing is used, at the max (or farther away), the maximum arcing is used", "world units" },
		{ _field_real_bounds, "ballistic arcing fraction bounds", "Controls speed and degree of arc. 0 = low, fast, 1 = high, slow", nullptr, "[0-1]" },
		FIELD_EXPLANATION("movement", nullptr),
		{ _field_short_enum, "movement penalized", &movement_penalty_modes },
		FIELD_PAD("GTIXVRPA", 2),
		{ _field_real_fraction, "forward movement penalty", "percent slowdown to forward movement for units carrying this weapon" },
		{ _field_real_fraction, "sideways movement penalty", "percent slowdown to sideways and backward movement for units carrying this weapon" },
		{ _field_real_fraction, "gunner armor mod forward movement penalty", "percent slowdown to forward movement for units carrying this weapon with the gunner armor mod active" },
		{ _field_real_fraction, "gunner armor mod sideways movement penalty", "percent slowdown to sideways and backward movement for units carrying this weapon with the gunner armor mod active" },
		FIELD_EXPLANATION("Aiming", nullptr),
		{ _field_real, "Maximum pitch rate", "This will cap the speed at which the player can aim when holding this weapon, probably want to set something sensible for turrets etc", "degrees per second" },
		FIELD_EXPLANATION("ArmorMod Parameters", nullptr),
		{ _field_real, "Ammopack power capacity", "Ammopack armormod - 0.2 would give 20% additional capacity to an energy weapon" },
		FIELD_EXPLANATION("AI targeting parameters", nullptr),
		{ _field_real, "AI scariness" },
		FIELD_EXPLANATION("miscellaneous", nullptr),
		{ _field_real, "weapon power-on time", nullptr, "seconds" },
		{ _field_real, "weapon power-off time", nullptr, "seconds" },
		{ _field_tag_reference, "weapon power-on effect", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "weapon power-off effect", &sound_old_group_effect_group_reference },
		{ _field_real, "age heat recovery penalty", "how much the weapon's heat recovery is penalized as it ages" },
		{ _field_real, "age rate of fire penalty", "how much the weapon's rate of fire is penalized as it ages" },
		{ _field_real_fraction, "age misfire start", "the age threshold when the weapon begins to misfire", nullptr, "[0,1]" },
		{ _field_real_fraction, "age misfire chance", "at age 1.0, the misfire chance per shot", nullptr, "[0,1]" },
		{ _field_tag_reference, "pickup sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "zoom-in sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "zoom-out sound", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_real, "active camo ding", "how much to decrease active camo when a round is fired" },
		{ _field_string_id, "handle node", "the node that get's attached to the unit's hand" },
		FIELD_EXPLANATION("weapon labels", nullptr),
		{ _field_string_id, "weapon class" },
		{ _field_string_id, "weapon name" },
		FIELD_EXPLANATION("more miscellaneous", nullptr),
		{ _field_char_enum, "first time pickup type", &first_time_pickup_types },
		FIELD_PAD("PAD", 3),
		{ _field_short_enum, "weapon type", &weapon_types },
		{ _field_short_integer, "low ammo threshold" },
		{ _field_struct, "player interface", &weapon_interface_struct },
		{ _field_block, "predicted resources", &g_null_block_block },
		{ _field_block, "magazines", &magazines_block },
		{ _field_block, "new triggers", &weapon_triggers_block },
		{ _field_block, "barrels", &weapon_barrels_block },
		FIELD_EXPLANATION("scaleshot", "Allows the weapon to scale up and fire different projectiles based upon how many hits you get etc."),
		{ _field_block, "scaleshot parameters", &weaponscaleshotstruct_block },
		{ _field_real, "runtime weapon power on velocity" },
		{ _field_real, "runtime weapon power off velocity" },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("first-person movement control", nullptr),
		{ _field_real, "max movement acceleration" },
		{ _field_real, "max movement velocity" },
		{ _field_real, "max turning acceleration" },
		{ _field_real, "max turning velocity" },
		{ _field_tag_reference, "deployed vehicle", &vehicle_group_reference$6 },
		{ _field_tag_reference, "tossed weapon", &weapon_group_reference$2 },
		{ _field_tag_reference, "age effect", &effect_group_reference },
		{ _field_tag_reference, "aged weapon", &weapon_group_reference$2 },
		{ _field_tag_reference, "aged material effects", &material_effects_group_reference },
		{ _field_real, "per kill or hit aging amount", "aging applied for 'weapon ages when damage is inflicted' or 'weapon ages with each kill' flags" },
		{ _field_real, "external aging amount" },
		{ _field_real, "campaign external aging amount" },
		{ _field_real, "external heat amount" },
		{ _field_real_fraction, "age recovered per second", "the amount of age the weapon recovers per second", nullptr, "[0,1]" },
		{ _field_tag_reference, "age fully recovered (sound or effect)", "the sound or effect played when the weapon's age reaches fully recovered", &sound_old_group_effect_group_reference },
		{ _field_real_vector_3d, "first person weapon offset" },
		{ _field_real_vector_2d, "first person scope size" },
		{ _field_real_bounds, "support third person camera range", "range in degrees. 0 is straight, -90 is down, 90 is up", "degrees" },
		{ _field_real, "weapon zoom time", "seconds" },
		{ _field_real, "weapon ready-for-use time", "seconds" },
		{ _field_real, "weapon ready 1st person animation playback scale", "e.g. - 2.0 makes playspeed twice as fast" },
		{ _field_real, "tether transition to linked time", "begins when tethered projectile is LNKED", "seconds" },
		{ _field_real, "tether transition from linked time", "begins when tethered projectile becomes non-LNKED", "seconds" },
		{ _field_string_id, "unit stow anchor name" },
		{ _field_block, "screen effects", &weapon_screen_effect_block_block },
		{ _field_tag_reference, "Player sound bank", "High quality player sound bank to be prefetched. Can be empty.", &soundbank_group_reference },
		{ _field_string_id, "Player EQ preset name", "Name of the EQ shareset in WWise to apply when this weapon is active" },
		{ _field_long_integer, "Player EQ preset hash" },
		{ _field_string_id, "Reload cancel event", "Note - this is a direct event string - not a .sound" },
		{ _field_long_integer, "Reload cancel event hash" },
		{ _field_tag_reference, "single shot fire for automatics", &sound_combiner_group_sound_old_group_sound_group_reference },
		{ _field_tag_reference, "firing loop for automatics", &sound_looping_group_reference$2 },
		{ _field_block, "Sound RTPCs", &weaponsoundrtpcblock_block },
		{ _field_block, "Sound Sweeteners", &weaponsoundsweetenerblock_block },
		{ _field_string_id, "Locking Reticle Screen Name" },
		{ _field_string_id, "Locked On Reticle Screen Name" },
		FIELD_GROUP_END(),
		
		{ _field_terminator }
	};

	STRINGS(weapon_definition_flags)
	{
		"vertical heat display",
		"mutually exclusive triggers",
		"attacks automatically on bump",
		"must be readied",
		"doesn\'t count toward maximum",
		"aim assists only when zoomed",
		"prevents grenade throwing",
		"must be picked up",
		"holds triggers when dropped",
		"prevents melee attack",
		"detonates when dropped",
		"cannot fire at maximum age",
		"secondary trigger overrides grenades",
		"support weapon",
		"hide FP weapon when in iron sights#for scoped weapons",
		"AIs use weapon melee damage",
		"allows binoculars",
		"loop fp firing animation",
		"prevents crouching",
		"cannot fire while boosting",
		"use empty melee on empty",
		"uses 3rd person camera",
		"can be dual wielded",
		"can only be dual wielded",
		"melee only",
		"cant fire if parent dead",
		"weapon ages with each kill#see \'weapon ages when damage is inflicted\', \'per kill or hit aging amount\'",
		"allows unaimed lunge",
		"cannot be used by player",
		"hold fp firing animation",
		"strict deviation angle#deviation angle is allowed to be less than primary autoaim angle - for the rocket launcher",
		"notifies target units#aiming this weapon at another player can be important to them - for lock-on weapons"
	};
	STRING_LIST(weapon_definition_flags, weapon_definition_flags_strings, _countof(weapon_definition_flags_strings));

	STRINGS(weapon_definition_secondary_flags)
	{
		"magnetizes only when zoomed",
		"force enable equipment tossing",
		"non-lunge melee dash disabled#melee-physics dash is disabled on melees that are not lunges",
		"don\'t drop on dual wield melee",
		"is equipment special weapon#when checked, this weapon\n-is deleted when dropped\n-does not count against maximum inventory\n-gets deleted on host migrations\n-prevents swapping or switching weapons",
		"uses ghost reticle",
		"never overheats",
		"force tracers to come from weapon barrel#setting this forces effects tracers to come from weapon barrel instead of eye point",
		"cannot fire during emp",
		"weapon can headshot",
		"AI cannot fire tracking projectiles#setting this will remove tracking data from AI-fired projectiles",
		"second barrel fires if friend is targeted#bishop beam support- primary barrel fires if foe is targeted, secondary if targeting friend",
		"weapon unzooms on damage#taking damage while wielding this will ping player out of zoom/iron sights",
		"do not drop on equipment activation#will counteract default support weapon behavior to drop on equipment activation",
		"weapon can not be dropped#used for CTF magnum, weapon can not be dropped or swapped out",
		"disable function overlays during reload",
		"throw weapon instead of grenade#Throws weapon when grenade trigger is pressed",
		"do not drop \'must be readied\' on primary trigger#Allows \'must be readied\' weapons to have a primary attack",
		"delete on drop",
		"allow melee when using device#Default behavior prevents melee attacks when using device.  Setting this bit allows them.",
		"do not lower weapon when using device#Default behavior lowers weapon when using device.  Setting this leaves the weapon up.",
		"cannot fire while zooming",
		"weapon ages when damage is inflicted#see \'weapon ages with each kill\', \'per kill or hit aging amount\'",
		"apply gunner armor mod abilites#Apply weapon\'s gunner armor mod movement penalty multipliers rather than base multipliers when gunner armor mod is active in _trait_weapons_gunner_armor_modifier",
		"wielders sprint is unaffected by soft ping#see momentum globals \'disable soft ping check\'",
		"weapon drops further away#Adds velocity to weapon\'s default drop (useful for weapons with auto-pickup)",
		"use automatic firing looping sounds",
		"do not drop on assassination#Keeps the weapon in your hand while being assassinated or performing an assassination (for must_be_readied or support weapons)",
		"is part of body#Keeps the weapon from dropping or being hidden at the start of assassinations, and must instead be dropped using the drop weapon keyframe",
		"force deny equipment use#Disallows any equipment usage while holding this weapon regardless of any other traits you may have",
		"hide pickup prompt unless special pickup priority#Used for Oddball that only shows the pickup prompt when megalo script sets pickup priority to special",
		"weapon ignores player_pickup_allowed trait#Player will always pickup this weapon if requested, Used for CTF that needs to force storm_magnum_ctf onto the player"
	};
	STRING_LIST(weapon_definition_secondary_flags, weapon_definition_secondary_flags_strings, _countof(weapon_definition_secondary_flags_strings));

	STRINGS(secondary_trigger_modes)
	{
		"normal",
		"slaved to primary",
		"inhibits primary",
		"loads alterate ammunition",
		"loads multiple primary ammunition"
	};
	STRING_LIST(secondary_trigger_modes, secondary_trigger_modes_strings, _countof(secondary_trigger_modes_strings));

	STRINGS(movement_penalty_modes)
	{
		"always",
		"when zoomed",
		"when zoomed or reloading"
	};
	STRING_LIST(movement_penalty_modes, movement_penalty_modes_strings, _countof(movement_penalty_modes_strings));

	STRINGS(first_time_pickup_types)
	{
		"unassigned",
		"bolt pistol",
		"light rifle",
		"suppressor",
		"binary rifle",
		"scattershot",
		"incineration cannon"
	};
	STRING_LIST(first_time_pickup_types, first_time_pickup_types_strings, _countof(first_time_pickup_types_strings));

	STRINGS(weapon_types)
	{
		"undefined",
		"shotgun",
		"needler",
		"plasma pistol",
		"plasma rifle",
		"rocket launcher",
		"energy blade",
		"splaser",
		"shield",
		"scarab gun",
		"wolverine quad",
		"flak cannon",
		"plasma launcher",
		"laser designator",
		"sticky detonator"
	};
	STRING_LIST(weapon_types, weapon_types_strings, _countof(weapon_types_strings));

	TAG_REFERENCE(vehicle_group_reference$6, VEHICLE_TAG);

	#define WEAPON_CLASS_BLOCK_STRUCT_ID { 0x4ECAAE41, 0xD23D4E20, 0xAAF8CE65, 0xF261D1BB }
	TAG_STRUCT(
		weapon_class_block_struct,
		"weapon_class_block_struct",
		"weapon_class_block_struct",
		"s_weapon_class_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_CLASS_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "label" },
		{ _field_short_block_index, "overlay group", MAKE_ALT_NAMES("pose overlay|overlay"), &overlay_group_definition_block_block },
		{ _field_short_block_index, "ik set", &animation_ik_set_block },
		{ _field_block, "weapon type", &weapon_type_block_block },
		{ _field_block, "weapon ik", &animation_ik_block_v1_block },
		{ _field_block, "ranged actions", &animation_ranged_action_block_block },
		{ _field_block, "sync actions groups", &animation_sync_action_group_block_block },
		{ _field_terminator }
	};

	#define WEAPON_CLASS_LOOKUP_BLOCK_ID { 0x829BCBD4, 0x902C4457, 0xB3D2562B, 0x178C3288 }
	TAG_STRUCT(
		weapon_class_lookup_block,
		"weapon_class_lookup_block",
		"weapon_class_lookup_block",
		"s_weapon_class_lookup_block",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_CLASS_LOOKUP_BLOCK_ID)
	{
		{ _field_string_id, "weapon name" },
		{ _field_string_id, "weapon class" },
		{ _field_terminator }
	};

	#define WEAPON_DISTRIBUTION_BLOCK_STRUCT_ID { 0xC1DBA160, 0x6F0F42BC, 0xB1DEA6B8, 0x5AA47A6C }
	TAG_STRUCT(
		weapon_distribution_block_struct,
		"weapon_distribution_block_struct",
		"weapon_distribution_block_struct",
		"s_weapon_distribution_block_struct",
		SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_DISTRIBUTION_BLOCK_STRUCT_ID)
	{
		{ _field_short_block_index, "weapon", &scenario_weapon_palette_block_block },
		FIELD_PAD("post-weapon-palette-index", 2),
		{ _field_terminator }
	};

	#define WEAPON_FIRST_PERSON_INTERFACE_BLOCK_ID { 0x3B47D10E, 0xB50C4EC2, 0xA64BEB32, 0x712F5A86 }
	TAG_STRUCT(
		weapon_first_person_interface_block,
		"weapon_first_person_interface_block",
		"weapon_first_person_interface_block",
		"s_weapon_first_person_interface_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_FIRST_PERSON_INTERFACE_BLOCK_ID)
	{
		{ _field_tag_reference, "first person model", &render_model_group_reference$10 },
		{ _field_tag_reference, "first person animations", &model_animation_graph_group_reference$5 },
		{ _field_real, "first person fov scale", "the multiplier by the standard first person FOV to use when this weapon is held" },
		{ _field_real, "first person dof distance", "the distance to apply depth of field to the weapon" },
		{ _field_terminator }
	};

	TAG_REFERENCE(render_model_group_reference$10, RENDER_MODEL_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR);

	TAG_REFERENCE(model_animation_graph_group_reference$5, MODEL_ANIMATION_GRAPH_TAG, TAG_REFERENCE_FLAG_DONT_RESOLVE_IN_EDITOR);

	#define WEAPON_INTERFACE_STRUCT_ID { 0xE19D1139, 0xDC6246CC, 0x9B9CDBBB, 0x5D685572 }
	TAG_STRUCT(
		weapon_interface_struct,
		"weapon_interface_struct",
		"weapon_interface_struct",
		"s_weapon_interface_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_INTERFACE_STRUCT_ID)
	{
		FIELD_EXPLANATION("interface", nullptr),
		{ _field_struct, "shared interface", &weapon_shared_interface_struct },
		{ _field_block, "first person", &weapon_first_person_interface_block_block },
		{ _field_tag_reference, "hud screen reference", &cui_screen_group_reference },
		{ _field_tag_reference, "alternate hud screen reference", "the parent of the weapon can indicate that this hud should be used instead of the default", &cui_screen_group_reference },
		{ _field_terminator }
	};

	#define WEAPON_PALETTE_CHOICE_BLOCK_STRUCT_ID { 0x2A9BC12D, 0x1F3C4AF4, 0x98D10B30, 0xD083A3F }
	TAG_STRUCT(
		weapon_palette_choice_block_struct,
		"weapon_palette_choice_block_struct",
		"weapon_palette_choice_block_struct",
		"s_weapon_palette_choice_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_IS_MEMCPYABLE | SET_UNKNOWN15,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_PALETTE_CHOICE_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "place on", &ai_spawn_conditions_struct },
		{ _field_short_block_index, "weapon type", &scenario_weapon_palette_block_block },
		FIELD_CUSTOM("value", _tag_field_custom_type_filter_on_next_field),
		{ _field_short_integer, "chance" },
		{ _field_terminator }
	};

	#define WEAPON_REF_CHOICE_BLOCK_STRUCT_ID { 0x75EE0928, 0xD53E4FC6, 0x83DA2A8E, 0x7CDFC94F }
	TAG_STRUCT(
		weapon_ref_choice_block_struct,
		"weapon_ref_choice_block_struct",
		"weapon_ref_choice_block_struct",
		"s_weapon_ref_choice_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_REF_CHOICE_BLOCK_STRUCT_ID)
	{
		{ _field_struct, "place on", &ai_spawn_conditions_struct },
		{ _field_tag_reference, "weapon type", &weapon_group_reference$9 },
		{ _field_short_integer, "chance" },
		FIELD_PAD("post-chance", 2),
		{ _field_terminator }
	};

	TAG_REFERENCE(weapon_group_reference$9, WEAPON_TAG, TAG_REFERENCE_FLAG_NOT_A_DEPENDENCY);

	#define WEAPON_SCREEN_EFFECT_BLOCK_ID { 0x13215947, 0xD5DB4A9C, 0x9D8632E0, 0xFDAF513D }
	TAG_STRUCT(
		weapon_screen_effect_block,
		"weapon_screen_effect_block",
		"weapon_screen_effect_block",
		"s_weapon_screen_effect_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_SCREEN_EFFECT_BLOCK_ID)
	{
		{ _field_byte_flags, "flags", &weapon_screen_effect_flags },
		FIELD_PAD("LKSZJFSE", 3),
		{ _field_tag_reference, "screen effect", &area_screen_effect_group_reference },
		{ _field_terminator }
	};

	STRINGS(weapon_screen_effect_flags)
	{
		"overrides unit and camera screen effects",
		"unzoomed",
		"zoom level 1",
		"zoom level 2"
	};
	STRING_LIST(weapon_screen_effect_flags, weapon_screen_effect_flags_strings, _countof(weapon_screen_effect_flags_strings));

	#define WEAPON_SHARED_INTERFACE_STRUCT_ID { 0x96C3519E, 0x13604185, 0x9C8C6C87, 0xE8738BE9 }
	TAG_STRUCT(
		weapon_shared_interface_struct,
		"weapon_shared_interface_struct",
		"weapon_shared_interface_struct",
		"s_weapon_shared_interface_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_SHARED_INTERFACE_STRUCT_ID)
	{
		FIELD_PAD("PWGUS", 16),
		{ _field_terminator }
	};

	#define WEAPON_TRIGGER_AUTOFIRE_STRUCT_ID { 0x2E880044, 0x234145A2, 0x803AC387, 0xB24AF26C }
	TAG_STRUCT(
		weapon_trigger_autofire_struct,
		"weapon_trigger_autofire_struct",
		"weapon_trigger_autofire_struct",
		"s_weapon_trigger_autofire_struct",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_TRIGGER_AUTOFIRE_STRUCT_ID)
	{
		FIELD_EXPLANATION("AUTOFIRE", nullptr),
		{ _field_real, "autofire time" },
		{ _field_real, "autofire throw" },
		{ _field_short_enum, "secondary action", &weapon_trigger_autofire_actions },
		{ _field_short_enum, "primary action", &weapon_trigger_autofire_actions },
		{ _field_terminator }
	};

	STRINGS(weapon_trigger_autofire_actions)
	{
		"fire",
		"charge",
		"fire other"
	};
	STRING_LIST(weapon_trigger_autofire_actions, weapon_trigger_autofire_actions_strings, _countof(weapon_trigger_autofire_actions_strings));

	#define WEAPON_TRIGGER_CHARGING_FIRE_FRACTION_ID { 0x59082A5C, 0x8986456E, 0xBF034B9A, 0x229B0B5E }
	TAG_STRUCT(
		weapon_trigger_charging_fire_fraction,
		"weapon_trigger_charging_fire_fraction",
		"weapon_trigger_charging_fire_fraction",
		"s_weapon_trigger_charging_fire_fraction",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_TRIGGER_CHARGING_FIRE_FRACTION_ID)
	{
		{ _field_real_fraction, "charge fraction", "charging fraction at which the weapon should additionally fire a shot.", nullptr, "[0.1]" },
		{ _field_terminator }
	};

	#define WEAPON_TRIGGER_CHARGING_STRUCT_ID { 0x2A90D186, 0xD9FD48DD, 0x879003FA, 0x3B897118 }
	TAG_STRUCT(
		weapon_trigger_charging_struct,
		"weapon_trigger_charging_struct",
		"weapon_trigger_charging_struct",
		"s_weapon_trigger_charging_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_TRIGGER_CHARGING_STRUCT_ID)
	{
		FIELD_EXPLANATION("CHARGING", nullptr),
		{ _field_real, "charging time", "the amount of time it takes for this trigger to become fully charged", "seconds" },
		{ _field_real, "charged time", "the amount of time this trigger can be charged before becoming overcharged", "seconds" },
		{ _field_char_enum, "overcharged action", &weapon_trigger_overcharged_actions },
		{ _field_byte_flags, "flags", &weapon_trigger_charging_flags },
		{ _field_short_integer, "cancelled trigger throw", "96 was the constant in code for the pp" },
		{ _field_real, "charged illumination", "the amount of illumination given off when the weapon is fully charged", nullptr, "[0,1]" },
		{ _field_tag_reference, "charging effect", "the charging effect is created once when the trigger begins to charge", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "charging damage effect", "the charging effect is created once when the trigger begins to charge", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_tag_reference, "charging continuous damage response", "plays every tick you're charging or charged, scaled to charging fraction", &damage_response_definition_group_reference$2 },
		{ _field_real, "charged drain rate", "how much battery to drain per second when charged" },
		{ _field_tag_reference, "discharge effect", "the discharging effect is created once when the trigger releases its charge", &sound_old_group_effect_group_reference },
		{ _field_tag_reference, "discharge damage effect", "the discharging effect is created once when the trigger releases its charge", &damage_effect_group_damage_response_definition_group_reference },
		{ _field_block, "fire fractions", &weapon_trigger_charging_fire_fraction_block },
		{ _field_terminator }
	};

	STRINGS(weapon_trigger_overcharged_actions)
	{
		"none",
		"explode",
		"discharge"
	};
	STRING_LIST(weapon_trigger_overcharged_actions, weapon_trigger_overcharged_actions_strings, _countof(weapon_trigger_overcharged_actions_strings));

	STRINGS(weapon_trigger_charging_flags)
	{
		"can fire from partial charge#discharging a partially charged weapon will spew for the charged fraction of the spew time set below",
		"limit to current rounds loaded#if magazine present, do not fire more than current rounds loaded (mantis rocket launcher)",
		"Wont charge unless tracked target is valid#spew-charge triggers only"
	};
	STRING_LIST(weapon_trigger_charging_flags, weapon_trigger_charging_flags_strings, _countof(weapon_trigger_charging_flags_strings));

	#define WEAPON_TRIGGERS_ID { 0x908CED94, 0x29134ADA, 0x9600E10A, 0x2C4ED066 }
	TAG_STRUCT(
		weapon_triggers,
		"weapon_triggers",
		"weapon_triggers",
		"s_weapon_triggers",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN4 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_TRIGGERS_ID)
	{
		{ _field_long_flags, "flags", &weapon_trigger_definition_flags },
		{ _field_short_enum, "input", &weapon_trigger_inputs },
		{ _field_short_enum, "behavior", &weapon_trigger_behaviors },
		{ _field_short_block_index, "primary barrel", &weapon_barrels_block },
		{ _field_short_block_index, "secondary barrel", &weapon_barrels_block },
		{ _field_short_enum, "prediction", &trigger_prediction_type_enum },
		FIELD_PAD("GNFR", 2),
		FIELD_USELESS_PAD("value", 28),
		{ _field_struct, "autofire", &weapon_trigger_autofire_struct },
		{ _field_struct, "charging", &weapon_trigger_charging_struct },
		{ _field_tag_reference, "double latch projectile releasable effect", "created once player is able to release the tethered projectile", &effect_group_reference },
		{ _field_tag_reference, "double latch projectile released effect", "created when player releases the tethered projectile", &effect_group_reference },
		{ _field_terminator }
	};

	STRINGS(weapon_trigger_definition_flags)
	{
		"autofire single action only"
	};
	STRING_LIST(weapon_trigger_definition_flags, weapon_trigger_definition_flags_strings, _countof(weapon_trigger_definition_flags_strings));

	STRINGS(weapon_trigger_inputs)
	{
		"right trigger",
		"left trigger",
		"melee attack",
		"ai only secondary"
	};
	STRING_LIST(weapon_trigger_inputs, weapon_trigger_inputs_strings, _countof(weapon_trigger_inputs_strings));

	STRINGS(weapon_trigger_behaviors)
	{
		"spew#fires its primary action barrel whenever the trigger is down",
		"latch#fires its primary action barrel when the trigger is down and then latches",
		"latch-autofire#fires its primary action barrel once if pulsed quickly or if not depressed all the way, otherwise does secondary behavior",
		"latch-tether#tethers projectiles if latched long enough, on release the tethered projectile detonates",
		"charge#charges the trigger",
		"latch-zoom#latched; fires its primary action barrel when unzoomed, secondary when zoomed",
		"spew-charge",
		"sword-charge",
		"paint-target",
		"double-latch-tether#projectile is tethered by 1st latch, 2nd releases and detonates it",
		"charge-with-magazine#like charge, but pays attention to any magazine and will not charge unless magazine is idle and barrel is actually able to fire"
	};
	STRING_LIST(weapon_trigger_behaviors, weapon_trigger_behaviors_strings, _countof(weapon_trigger_behaviors_strings));

	STRINGS(trigger_prediction_type_enum)
	{
		"none",
		"spew",
		"charge"
	};
	STRING_LIST(trigger_prediction_type_enum, trigger_prediction_type_enum_strings, _countof(trigger_prediction_type_enum_strings));

	#define WEAPON_TYPE_BLOCK_STRUCT_ID { 0x8238C4F4, 0x57964DFD, 0x95379F24, 0x49275A4A }
	TAG_STRUCT(
		weapon_type_block_struct,
		"weapon_type_block_struct",
		"weapon_type_block_struct",
		"s_weapon_type_block_struct",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEAPON_TYPE_BLOCK_STRUCT_ID)
	{
		{ _field_string_id, "label" },
		{ _field_short_block_index, "overlay group", MAKE_ALT_NAMES("pose overlay|overlay"), &overlay_group_definition_block_block },
		{ _field_short_block_index, "ik set", &animation_ik_set_block },
		{ _field_block, "sets", &animation_set_block_block },
		{ _field_terminator }
	};

	#define WEATHER_GLOBALS_STRUCT_DEFINITION_ID { 0x8C9B19BF, 0x971F413F, 0x8B57DFEF, 0xFC8E152E }
	TAG_STRUCT(
		weather_globals_struct_definition,
		"weather_globals_struct_definition",
		"weather_globals_struct_definition",
		"s_weather_globals_struct_definition",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WEATHER_GLOBALS_STRUCT_DEFINITION_ID)
	{
		FIELD_EXPLANATION("global textures", "0: ............... random noise\n"),
		{ _field_block, "global textures", &global_textures_refs_block_block },
		{ _field_tag_reference, "default rain", &rain_definition_group_reference },
		FIELD_EXPLANATION("ripple settings (TO BE REMOVED)", "we are going to use a new method to render and control of ripple effects\n"),
		{ _field_struct, "rain ripple setting", &rain_ripple_setting_block },
		{ _field_terminator }
	};

	#define WENTNESS_BIT_VECTOR_ID { 0x7D96F927, 0xE3BA4ED9, 0x854824AB, 0xE8BD309C }
	TAG_STRUCT(
		wentness_bit_vector,
		"wentness_bit_vector",
		"wentness_bit_vector",
		"s_wentness_bit_vector",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WENTNESS_BIT_VECTOR_ID)
	{
		{ _field_long_integer, "bits" },
		{ _field_terminator }
	};

	#define WENTNESS_BYTE_VECTOR_ID { 0x3CA1F30D, 0xBE644E28, 0x9BA62C05, 0xF671C6DB }
	TAG_STRUCT(
		wentness_byte_vector,
		"wentness_byte_vector",
		"wentness_byte_vector",
		"s_wentness_byte_vector",
		SET_IS_MEMCPYABLE | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WENTNESS_BYTE_VECTOR_ID)
	{
		{ _field_char_integer, "bytes" },
		{ _field_terminator }
	};

	#define WET_PROXIES_STRUCT_ID { 0xE5466355, 0x33AF4380, 0x83F0B03D, 0xFC20CC34 }
	TAG_STRUCT(
		wet_proxies_struct,
		"wet_proxies_struct",
		"wet_proxies_struct",
		"s_wet_proxies_struct",
		SET_UNKNOWN0 | SET_IS_MEMCPYABLE | SET_HAS_LEVEL_SPECIFIC_FIELDS | SET_CAN_MEMSET_TO_INITIALIZE,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WET_PROXIES_STRUCT_ID)
	{
		FIELD_EXPLANATION("when rained on, we report this material", nullptr),
		{ _field_string_id, "wet material" },
		{ _field_short_integer, "runtime proxy material index" },
		FIELD_PAD("wpb1", 2),
		{ _field_terminator }
	};

	#define WIDGET_REFERENCE_BLOCK_ID { 0xFE7DCA2C, 0x49136A81, 0xB9652900, 0xABAA5A82 }
	TAG_STRUCT(
		widget_reference_block,
		"widget_reference_block",
		"widget_reference_block",
		"s_widget_reference_block",
		SET_UNKNOWN0 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WIDGET_REFERENCE_BLOCK_ID)
	{
		{ _field_short_integer, "marker index" },
		FIELD_PAD("gnlao", 2),
		{ _field_tag_reference, "widget ref", &leaf_system_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(leaf_system_group_reference, LEAF_SYSTEM_TAG);

	#define WIND_BLOCK_ID { 0x4F54D275, 0x39034545, 0xA099DD8C, 0xB8647BC2 }
	TAG_STRUCT(
		wind_block,
		"wind_block",
		"wind_block",
		"s_wind_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WIND_BLOCK_ID)
	{
		FIELD_EXPLANATION("WIND DIRECTION", "Speed is in MPH, direction is in degrees:\n   0�  North\n  90�  East\n 180�  South\n 270�  West\n"),
		{ _field_struct, "direction", &wind_scalar_function_struct },
		{ _field_struct, "speed", &wind_scalar_function_struct },
		FIELD_EXPLANATION("DECORATOR WIND MOTION", "These are all a function of the wind speed (between 0 MPH on the left and 200 MPH on the right)\n\nbend: how much the decorators bend - 0.0 is standing straight up, 10.0 is super-flattened\noscillation: how much the decorators \'oscillate\' at a given speed\nfrequency: how fast the oscillation waves each decorator\ngust size: big gusts move large areas of decorators in sync.  small gusts give more variation\n"),
		{ _field_struct, "bend", &wind_scalar_function_struct },
		{ _field_struct, "oscillation", &wind_scalar_function_struct },
		{ _field_struct, "frequency", &wind_scalar_function_struct },
		{ _field_real, "gust size", nullptr, "world units" },
		{ _field_tag_reference, "gust noise bitmap", &bitmap_group_reference$2 },
		{ _field_terminator }
	};

	#define WIND_SCALAR_FUNCTION_STRUCT_ID { 0xC19F77F7, 0xBDE74B5E, 0xA4BA598F, 0x198FA328 }
	TAG_STRUCT(
		wind_scalar_function_struct,
		"wind_scalar_function_struct",
		"wind_scalar_function_struct",
		"s_wind_scalar_function_struct",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_HAS_INLINED_CHILDREN_WITH_PLACEMENT_NEW | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WIND_SCALAR_FUNCTION_STRUCT_ID)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_struct, "Mapping", &mapping_function }, // structure_version:2
		{ _field_terminator }
	};

	#define WOLVERINE_BLOCK_ID { 0xABB7F68B, 0xCBC644C7, 0xB028A235, 0x1AAC8551 }
	TAG_STRUCT(
		wolverine_block,
		"wolverine_block",
		"wolverine_block",
		"s_wolverine_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		WOLVERINE_BLOCK_ID)
	{
		{ _field_struct, "steering control", &vehicle_steering_control_struct },
		{ _field_struct, "turning control", &vehicle_turning_control_struct },
		{ _field_struct, "engine", &global_vehicle_engine_struct },
		FIELD_EXPLANATION("wheel circumferance", nullptr),
		{ _field_real, "wheel circumferance" },
		{ _field_real, "gravity adjust", "0-1 fraction by which we scale gravity that is not along the ground plane" },
		FIELD_EXPLANATION("deployed mode", nullptr),
		{ _field_real, "turret deployment time", "time it takes for turret and support legs to deploy", "seconds" },
		{ _field_real, "turret holster time", "time it takes for turret and support legs to pack up", "seconds" },
		{ _field_real, "runtime inverse turret deployment time" },
		{ _field_real, "runtime inverse turret holster time" },
		{ _field_real, "deployed camera yaw scale." },
		{ _field_terminator }
	};

	#define ZONE_BLOCK_ID { 0x661CA582, 0xD7F44761, 0x8100E014, 0x147ECA8B }
	TAG_STRUCT(
		zone_block,
		"zone_block",
		"zone_block",
		"s_zone_block",
		SET_UNKNOWN0 | SET_UNKNOWN1 | SET_UNKNOWN5 | SET_DELETE_RECURSIVELY | SET_POSTPROCESS_RECURSIVELY | SET_UNKNOWN15 | SET_HAS_LEVEL_SPECIFIC_FIELDS,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		ZONE_BLOCK_ID)
	{
		FIELD_CUSTOM("value", _field_id_default),
		FIELD_CUSTOM("value", _field_id_default),
		FIELD_CUSTOM("value", _field_id_default),
		{ _field_string, "name" },
		{ _field_word_flags, "flags", &zone_flags },
		{ _field_short_block_index, "editor folder index", &g_scenario_editor_folder_block_block, _tag_field_attributed_definition_scenario_folder_field },
		{ _field_block, "firing positions", &firing_positions_block_block },
		{ _field_block, "areas", &areas_block_block },
		{ _field_struct, "Nav Mesh Attachments", &navmeshattachmentsstruct },
		{ _field_struct, "disallowed attachment bsps", &manualbspflagsreferences },
		{ _field_terminator }
	};

	STRINGS(zone_flags)
	{
		"giants zone"
	};
	STRING_LIST(zone_flags, zone_flags_strings, _countof(zone_flags_strings));

	TAG_DATA(
		animationplaycountdata,
		"AnimationPlayCountData",
		256,
		3,
		8192,
		k_max_animations_per_graph * sizeof(dword));

	TAG_DATA(
		containmentdefinition,
		"ContainmentDefinition",
		0,
		0,
		1024,
		1*KILO);

	TAG_DATA(
		facetdefinition,
		"FacetDefinition",
		0,
		0,
		1024,
		1*KILO);

	TAG_DATA(
		fallbackhopperfiledata,
		"FallbackHopperFileData",
		0,
		0,
		73728,
		FallbackHopperFile::k_maximum_data_size_bytes);

	TAG_DATA(
		griddefinition,
		"GridDefinition",
		0,
		0,
		2048,
		2*KILO);

	TAG_DATA(
		havokserializabledatadefinition,
		"HavokSerializableDataDefinition",
		256,
		4,
		2147483647,
		LONG_MAX);

	TAG_DATA(
		navgraphdatadefinition,
		"NavGraphDataDefinition",
		256,
		4,
		1048576,
		1*KILO*KILO);

	TAG_DATA(
		navmediatordatadefinition,
		"NavMediatorDataDefinition",
		256,
		4,
		6291456,
		6*KILO*KILO);

	TAG_DATA(
		neighborsdefinition,
		"NeighborsDefinition",
		0,
		0,
		1024,
		1*KILO);

	TAG_DATA(
		pcacoefficientsdefinition,
		"PCACoefficientsDefinition",
		0,
		0,
		67108864,
		64 * k_meg);

	TAG_DATA(
		scenariounitrecordingdatadefinition,
		"ScenarioUnitRecordingDataDefinition",
		0,
		0,
		4194304,
		k_maximum_unit_recording_data_size);

	TAG_DATA(
		staticdecaldatadefinition,
		"StaticDecalDataDefinition",
		384,
		4,
		2147483647,
		LONG_MAX);

	TAG_DATA(
		syncframesdefinition,
		"SyncFramesDefinition",
		0,
		0,
		1024,
		1*KILO);

	TAG_DATA(
		aligned_animation_data_definition_v1,
		"aligned_animation_data_definition_v1",
		0,
		4,
		37308832,
		k_animation_maximum_data_size);

	TAG_DATA(
		base_render_texture_data,
		"base_render_texture_data",
		192,
		12,
		1073741824,
		MAXIMUM_BITMAP_PIXELS_SIZE);

	TAG_DATA(
		bink_resource_data,
		"bink_resource_data",
		0,
		0,
		2147483647,
		k_bink_resource_data_maximum_size);

	TAG_DATA(
		bitmap_group_pixel_data_def,
		"bitmap_group_pixel_data_def",
		104,
		12,
		1073741824,
		MAXIMUM_BITMAP_PIXELS_SIZE);

	TAG_DATA(
		bitmap_group_source_data_def,
		"bitmap_group_source_data_def",
		65,
		0,
		1073741824,
		MAXIMUM_BITMAP_PIXELS_SIZE);

	TAG_DATA(
		bitmap_group_xenon_pixel_data_def,
		"bitmap_group_xenon_pixel_data_def",
		88,
		12,
		1073741824,
		MAXIMUM_BITMAP_PIXELS_SIZE);

	TAG_DATA(
		code_block,
		"code_block",
		10,
		0,
		262140,
		UNSIGNED_SHORT_MAX*4);

	TAG_DATA(
		code_block$2,
		"code_block",
		10,
		0,
		65535,
		UNSIGNED_SHORT_MAX);

	TAG_DATA(
		compiled_effect_data,
		"compiled_effect_data",
		8,
		0,
		16777216,
		16 * ONE_MEGABYTE);

	TAG_DATA(
		compressed_facial_animation_curve_data,
		"compressed_facial_animation_curve_data",
		2048,
		2,
		18939904,
		k_max_compressed_facial_animation_data_per_track*k_facial_animation_track_count*MAXIMUM_PITCH_RANGES_PER_SOUND*MAXIMUM_PERMUTATIONS_PER_PITCH_RANGE);

	TAG_DATA(
		custom_script_data,
		"custom_script_data",
		2,
		0,
		4096,
		HS_MAXIMUM_DYNAMIC_SOURCE_DATA_BYTES);

	TAG_DATA(
		dx9_compiled_shader_data,
		"dx9_compiled_shader_data",
		40,
		0,
		32768,
		c_rasterizer_compiled_shader::k_maximum_shader_size);

	TAG_DATA(
		editor_scenario_data_definition,
		"editor_scenario_data_definition",
		8,
		0,
		65536,
		MAXIMUM_EDITOR_SCENARIO_DATA_SIZE);

	TAG_DATA(
		error_report_string_data,
		"error_report_string_data",
		2,
		0,
		8192,
		MAXIMUM_ERROR_REPORT_STRING_LENGTH+1);

	TAG_DATA(
		function_definition_data,
		"function_definition_data",
		4,
		2,
		872,
		k_max_function_size);

	TAG_DATA(
		help_text_block,
		"help_text_block",
		10,
		0,
		65535,
		UNSIGNED_SHORT_MAX);

	TAG_DATA(
		high_res_render_texture_data,
		"high_res_render_texture_data",
		4288,
		12,
		1073741824,
		MAXIMUM_BITMAP_PIXELS_SIZE);

	TAG_DATA(
		hkserializedcompressedmoppshapedata,
		"hkSerializedCompressedMoppShapeData",
		0,
		4,
		33554432,
		MAXIMUM_IO_SHAPE_DATA_SIZE);

	TAG_DATA(
		hkserializedcompressedstaticmeshshapedata,
		"hkSerializedCompressedStaticMeshShapeData",
		0,
		4,
		33554432,
		MAXIMUM_IO_SHAPE_DATA_SIZE);

	TAG_DATA(
		hs_source_data_definition,
		"hs_source_data_definition",
		2,
		0,
		1048576,
		k_maximum_hs_source_data_per_file);

	TAG_DATA(
		hs_string_data_definition,
		"hs_string_data_definition",
		256,
		0,
		1024000,
		k_maximum_hs_string_data_per_context);

	TAG_DATA(
		medium_res_render_texture_data,
		"medium_res_render_texture_data",
		2240,
		12,
		1073741824,
		MAXIMUM_BITMAP_PIXELS_SIZE);

	TAG_DATA(
		mesh_pca_data_definition,
		"mesh_pca_data_definition",
		0,
		0,
		67108864,
		MAXIMUM_PRT_DATA_SIZE_PER_MESH);

	TAG_DATA(
		meter_stencil_data_definition,
		"meter_stencil_data_definition",
		0,
		0,
		65536,
		MAXIMUM_METER_DEFINITION_ENCODED_STENCIL_SIZE);

	TAG_DATA(
		mopp_code_data_definition,
		"mopp_code_data_definition",
		256,
		4,
		1048576,
		k_maximum_mopp_code_size);

	TAG_DATA(
		naive_control_data_definition,
		"naive_control_data_definition",
		256,
		5,
		2147483647,
		LONG_MAX);

	TAG_DATA(
		naive_sample_data,
		"naive_sample_data",
		0,
		12,
		134217728,
		128*k_meg);

	TAG_DATA(
		parameters_text_definition,
		"parameters_text_definition",
		10,
		0,
		65535,
		UNSIGNED_SHORT_MAX);

	TAG_DATA(
		polyartindexdata,
		"polyartIndexData",
		128,
		2,
		65536,
		sizeof(PolyartIndex) * PolyartIndex::k_chudPolyArtIndexMaxCount);

	TAG_DATA(
		polyartvertexbufferdata,
		"polyartVertexBufferData",
		128,
		2,
		393216,
		sizeof(PolyartVertex_Full) * k_chudPolyArtVertexMaxCount);

	TAG_DATA(
		recorded_animation_event_stream_data,
		"recorded_animation_event_stream_data",
		0,
		0,
		2097152,
		MAXIMUM_RECORDED_ANIMATION_DATA_SIZE);

	TAG_DATA(
		render_geometry_index_data,
		"render_geometry_index_data",
		128,
		2,
		33554428,
		sizeof(word)*MAXIMUM_STRIP_INDICES_PER_GEOMETRY_SECTION);

	TAG_DATA(
		render_geometry_vertex_buffer_data,
		"render_geometry_vertex_buffer_data",
		128,
		2,
		268435456,
		256*k_meg);

	TAG_DATA(
		shader_code_block,
		"shader_code_block",
		10,
		0,
		1048576,
		ONE_MEGABYTE);

	TAG_DATA(
		sound_effect_template_explanation,
		"sound_effect_template_explanation",
		10,
		0,
		65536,
		64*k_kilo);

	TAG_DATA(
		sound_resource_samples,
		"sound_resource_samples",
		1025,
		11,
		2147483647,
		LONG_MAX);

	TAG_DATA(
		sound_samples,
		"sound_samples",
		208,
		11,
		16777216,
		MAXIMUM_SOUND_DATA_SIZE);

	TAG_DATA(
		structure_bsp_cluster_encoded_sound_data,
		"structure_bsp_cluster_encoded_sound_data",
		0,
		0,
		32512,
		(MAXIMUM_CLUSTERS_PER_STRUCTURE*MAXIMUM_CLUSTERS_PER_STRUCTURE/2)*sizeof(byte));

	TAG_DATA(
		user_data_definition,
		"user_data_definition",
		0,
		0,
		16384,
		MAXIMUM_USER_DATA_SIZE);

	TAG_DATA(
		utf8_string_data,
		"utf8_string_data",
		0,
		0,
		35651584,
		k_maximum_multilingual_unicode_strings_per_string_list * k_large_text_buffer_size * 4);

	TAG_DATA(
		variant_resource_data,
		"variant_resource_data",
		0,
		0,
		31744,
		s_single_variant_definition::k_maximum_data_size_bytes);

	TAG_DATA(
		vector_hud_raw_data,
		"vector_hud_raw_data",
		0,
		0,
		2048,
		MAXIMUM_VECTOR_HUD_RAW_DATA_SIZE);

	TAG_DATA(
		vectorartvertexbufferdata,
		"vectorartVertexBufferData",
		128,
		2,
		131072,
		sizeof(VectorartVertex) * k_chudPolyArtVertexMaxCount);

	TAG_DATA(
		xenon_compiled_shader_data,
		"xenon_compiled_shader_data",
		8,
		0,
		32768,
		c_rasterizer_compiled_shader::k_maximum_shader_size);

	TAG_RESOURCE(
		bink_resource,
		"bink_resource",
		bink_resource_struct);

	TAG_RESOURCE(
		bitmap_texture_interleaved_interop_resource,
		"bitmap_texture_interleaved_interop_resource",
		bitmap_texture_interleaved_interop_resource_struct);

	TAG_RESOURCE(
		bitmap_texture_interop_resource,
		"bitmap_texture_interop_resource",
		bitmap_texture_interop_resource_struct);

	TAG_RESOURCE(
		collision_model_resource,
		"collision_model_resource",
		collision_model_resource_struct);

	TAG_RESOURCE(
		facial_animation_resource_definition,
		"facial_animation_resource_definition",
		facial_animation_resource_definition_struct);

	TAG_RESOURCE(
		model_animation_tag_resource,
		"model_animation_tag_resource",
		model_animation_tag_resource_struct);

	TAG_RESOURCE(
		pca_coefficients_resource_definition,
		"pca_coefficients_resource_definition",
		pca_coefficients_resource_definition_struct);

	TAG_RESOURCE(
		render_geometry_api_resource_definition,
		"render_geometry_api_resource_definition",
		render_geometry_api_resource_definition_struct);

	TAG_RESOURCE(
		sound_resource_definition,
		"sound_resource_definition",
		sound_resource_definition_struct);

	TAG_RESOURCE(
		stitchable_bitmap_texture_interop_resource,
		"stitchable_bitmap_texture_interop_resource",
		stitchable_bitmap_texture_interop_resource_struct);

	TAG_RESOURCE(
		structure_bsp_cache_file_tag_resources,
		"structure_bsp_cache_file_tag_resources",
		structure_bsp_cache_file_tag_resources_struct);

	TAG_RESOURCE(
		structure_bsp_tag_resources,
		"structure_bsp_tag_resources",
		structure_bsp_tag_resources_struct);

	#define POLYARTINDEXBUFFERINTEROPDEFINITION_ID { 0xE0852B06, 0xBBAC4DF8, 0xAA48A764, 0x18DB2F80 }
	TAG_INTEROP(
		polyartindexbufferinteropdefinition,
		"polyartindexbufferinteropdefinition",
		polyartindexbufferdescriptorstruct,
		POLYARTINDEXBUFFERINTEROPDEFINITION_ID);

	#define POLYARTVERTEXBUFFERINTEROPDEFINITION_ID { 0xA06E820C, 0x7AE94C17, 0xB4CFD590, 0xAAA62E0 }
	TAG_INTEROP(
		polyartvertexbufferinteropdefinition,
		"polyartvertexbufferinteropdefinition",
		polyartvertexbufferdescriptorstruct,
		POLYARTVERTEXBUFFERINTEROPDEFINITION_ID);

	#define RENDER_INDEX_BUFFER_INTEROP_DEFINITION_ID { 0x8380D7D, 0xF14D4112, 0x82CE3471, 0x1E43A770 }
	TAG_INTEROP(
		render_index_buffer_interop_definition,
		"render_index_buffer_interop_definition",
		render_index_buffer_descriptor_struct,
		RENDER_INDEX_BUFFER_INTEROP_DEFINITION_ID);

	#define RENDER_TEXTURE_INTERLEAVED_INTEROP_DEFINITION_ID { 0x90486D0A, 0x944A4941, 0x9FE79AF0, 0x39E2E611 }
	TAG_INTEROP(
		render_texture_interleaved_interop_definition,
		"render_texture_interleaved_interop_definition",
		render_texture_interleaved_interop_definition_struct,
		RENDER_TEXTURE_INTERLEAVED_INTEROP_DEFINITION_ID);

	#define RENDER_TEXTURE_INTEROP_DEFINITION_ID { 0x64017671, 0x437A46F0, 0x9A33C422, 0x517096E3 }
	TAG_INTEROP(
		render_texture_interop_definition,
		"render_texture_interop_definition",
		render_texture_interop_definition_struct,
		RENDER_TEXTURE_INTEROP_DEFINITION_ID);

	#define RENDER_VERTEX_BUFFER_INTEROP_DEFINITION_ID { 0x12721193, 0x798F4648, 0xB08E254D, 0xFB5907DF }
	TAG_INTEROP(
		render_vertex_buffer_interop_definition,
		"render_vertex_buffer_interop_definition",
		render_vertex_buffer_descriptor_struct,
		RENDER_VERTEX_BUFFER_INTEROP_DEFINITION_ID);

	#define VECTORARTVERTEXBUFFERINTEROPDEFINITION_ID { 0xAE24DC6D, 0x9A604E07, 0xA799441A, 0x3E47B775 }
	TAG_INTEROP(
		vectorartvertexbufferinteropdefinition,
		"vectorartvertexbufferinteropdefinition",
		vectorartvertexbufferdescriptorstruct,
		VECTORARTVERTEXBUFFERINTEROPDEFINITION_ID);

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_area_block_index_definition,
		"custom_area_block_index_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_cell_block_index_definition,
		"custom_cell_block_index_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_constraint_reference_block_index_definition,
		"custom_constraint_reference_block_index_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_patrol_point_block_index_definition,
		"custom_patrol_point_block_index_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_performance_actor_block_index_definition,
		"custom_performance_actor_block_index_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_performance_character_search_definition,
		"custom_performance_character_search_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_performance_point_block_index_definition,
		"custom_performance_point_block_index_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_performance_pointset_block_index_definition,
		"custom_performance_pointset_block_index_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_performance_task_block_index_definition,
		"custom_performance_task_block_index_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_performance_template_point_block_index_definition,
		"custom_performance_template_point_block_index_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_physics_model_motor_reference_block_index_definition,
		"custom_physics_model_motor_reference_block_index_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_point_set_block_index_definition,
		"custom_point_set_block_index_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_powered_chain_constraint_reference_block_index_definition,
		"custom_powered_chain_constraint_reference_block_index_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_task_block_index_definition$2,
		"custom_task_block_index_definition$2");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		custom_task_block_index_definition,
		"custom_task_block_index_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		damage_section_search_definition,
		"damage_section_search_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		megalo_string_collection_search_definition,
		"megalo_string_collection_search_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		multiplayer_equipment_collection_search_definition,
		"multiplayer_equipment_collection_search_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		multiplayer_vehicle_collection_search_definition,
		"multiplayer_vehicle_collection_search_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		multiplayer_weapon_collection_search_definition,
		"multiplayer_weapon_collection_search_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		permutation_info_search_definition,
		"permutation_info_search_definition");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		permutation_search,
		"permutation_search");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		scenario_object_name_search,
		"scenario_object_name_search");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		shape_search,
		"shape_search");

	BLOCK_INDEX_CUSTOM_SEARCH_DEFINITION(
		_void,
		"_void");

}
