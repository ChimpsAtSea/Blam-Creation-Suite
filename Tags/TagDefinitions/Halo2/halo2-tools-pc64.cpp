#include <halo2tagdefinitions-private-pch.h>
#include <TagFramework\Definitions\definitions.h>

namespace blofeld::halo2::pc64
{

	TAG_GROUP(
		"ai_dialogue_globals",
		ai_dialogue_globals_group,
		AI_DIALOGUE_GLOBALS_TAG,
		1,
		nullptr,
		ai_dialogue_globals_group_block);

	TAG_GROUP(
		"ai_mission_dialogue",
		ai_mission_dialogue_group,
		AI_MISSION_DIALOGUE_TAG,
		1,
		nullptr,
		ai_mission_dialogue_group_block);

	TAG_GROUP(
		"antenna",
		antenna_group,
		ANTENNA_TAG,
		1,
		nullptr,
		antenna_group_block);

	TAG_GROUP(
		"biped",
		biped_group,
		BIPED_TAG,
		3,
		&unit_group,
		biped_group_block);

	TAG_GROUP(
		"bitmap",
		bitmap_group,
		BITMAP_TAG,
		7,
		nullptr,
		bitmap_group_block);

	TAG_GROUP(
		"breakable_surface",
		breakable_surface_group,
		BREAKABLE_SURFACE_TAG,
		0,
		nullptr,
		breakable_surface_group_block);

	TAG_GROUP(
		"cache_file_sound",
		cache_file_sound_group,
		CACHE_FILE_SOUND_TAG,
		2,
		nullptr,
		cache_file_sound_group_block);

	TAG_GROUP(
		"camera_track",
		camera_track_group,
		CAMERA_TRACK_TAG,
		2,
		nullptr,
		camera_track_group_block);

	TAG_GROUP(
		"cellular_automata",
		cellular_automata_group,
		CELLULAR_AUTOMATA_TAG,
		2,
		nullptr,
		cellular_automata_group_block);

	TAG_GROUP(
		"cellular_automata2d",
		cellular_automata2d_group,
		CELLULAR_AUTOMATA2D_TAG,
		1,
		nullptr,
		cellular_automata2d_group_block);

	TAG_GROUP(
		"character",
		character_group,
		CHARACTER_TAG,
		1,
		nullptr,
		character_group_block);

	TAG_GROUP(
		"chocolate_mountain",
		chocolate_mountain_group,
		CHOCOLATE_MOUNTAIN_TAG,
		1,
		nullptr,
		chocolate_mountain_group_block);

	TAG_GROUP(
		"cloth",
		cloth_group,
		CLOTH_TAG,
		0,
		nullptr,
		cloth_group_block);

	TAG_GROUP(
		"collision_model",
		collision_model_group,
		COLLISION_MODEL_TAG,
		10,
		nullptr,
		collision_model_group_block);

	TAG_GROUP(
		"colony",
		colony_group,
		COLONY_TAG,
		4,
		nullptr,
		colony_group_block);

	TAG_GROUP(
		"color_table",
		color_table_group,
		COLOR_TABLE_TAG,
		1,
		nullptr,
		color_table_group_block);

	TAG_GROUP(
		"contrail",
		contrail_group,
		CONTRAIL_TAG,
		3,
		nullptr,
		contrail_group_block);

	TAG_GROUP(
		"crate",
		crate_group,
		CRATE_TAG,
		1,
		&object_group,
		crate_group_block);

	TAG_GROUP(
		"creature",
		creature_group,
		CREATURE_TAG,
		1,
		&object_group,
		creature_group_block);

	TAG_GROUP(
		"damage_effect",
		damage_effect_group,
		DAMAGE_EFFECT_TAG,
		6,
		nullptr,
		damage_effect_group_block);

	TAG_GROUP(
		"decal",
		decal_group,
		DECAL_TAG,
		1,
		nullptr,
		decal_group_block);

	TAG_GROUP(
		"decorator_set",
		decorator_set_group,
		DECORATOR_SET_TAG,
		1,
		nullptr,
		decorator_set_group_block);

	TAG_GROUP(
		"decorators",
		decorators_group,
		DECORATORS_TAG,
		1,
		nullptr,
		decorators_group_block);

	TAG_GROUP(
		"detail_object_collection",
		detail_object_collection_group,
		DETAIL_OBJECT_COLLECTION_TAG,
		1,
		nullptr,
		detail_object_collection_group_block);

	TAG_GROUP(
		"device",
		device_group,
		DEVICE_TAG,
		1,
		&object_group,
		device_group_block);

	TAG_GROUP(
		"device_control",
		device_control_group,
		DEVICE_CONTROL_TAG,
		1,
		&device_group,
		device_control_group_block);

	TAG_GROUP(
		"device_light_fixture",
		device_light_fixture_group,
		DEVICE_LIGHT_FIXTURE_TAG,
		1,
		&device_group,
		device_light_fixture_group_block);

	TAG_GROUP(
		"device_machine",
		device_machine_group,
		DEVICE_MACHINE_TAG,
		1,
		&device_group,
		device_machine_group_block);

	TAG_GROUP(
		"dialogue",
		dialogue_group,
		DIALOGUE_TAG,
		1,
		nullptr,
		dialogue_group_block);

	TAG_GROUP(
		"effect",
		effect_group,
		EFFECT_TAG,
		4,
		nullptr,
		effect_group_block);

	TAG_GROUP(
		"equipment",
		equipment_group,
		EQUIPMENT_TAG,
		2,
		&item_group,
		equipment_group_block);

	TAG_GROUP(
		"garbage",
		garbage_group,
		GARBAGE_TAG,
		1,
		&item_group,
		garbage_group_block);

	TAG_GROUP(
		"globals",
		globals_group,
		GLOBALS_TAG,
		3,
		nullptr,
		globals_group_block);

	TAG_GROUP(
		"grenade_hud_interface",
		grenade_hud_interface_group,
		GRENADE_HUD_INTERFACE_TAG,
		1,
		nullptr,
		grenade_hud_interface_group_block);

	TAG_GROUP(
		"hud_globals",
		hud_globals_group,
		HUD_GLOBALS_TAG,
		1,
		nullptr,
		hud_globals_group_block);

	TAG_GROUP(
		"hud_message_text",
		hud_message_text_group,
		HUD_MESSAGE_TEXT_TAG,
		1,
		nullptr,
		hud_message_text_group_block);

	TAG_GROUP(
		"hud_number",
		hud_number_group,
		HUD_NUMBER_TAG,
		1,
		nullptr,
		hud_number_group_block);

	TAG_GROUP(
		"item",
		item_group,
		ITEM_TAG,
		2,
		&object_group,
		item_group_block);

	TAG_GROUP(
		"item_collection",
		item_collection_group,
		ITEM_COLLECTION_TAG,
		0,
		nullptr,
		item_collection_group_block);

	TAG_GROUP(
		"lens_flare",
		lens_flare_group,
		LENS_FLARE_TAG,
		2,
		nullptr,
		lens_flare_group_block);

	TAG_GROUP(
		"light",
		light_group,
		LIGHT_TAG,
		4,
		nullptr,
		light_group_block);

	TAG_GROUP(
		"light_volume",
		light_volume_group,
		LIGHT_VOLUME_TAG,
		1,
		nullptr,
		light_volume_group_block);

	TAG_GROUP(
		"liquid",
		liquid_group,
		LIQUID_TAG,
		1,
		nullptr,
		liquid_group_block);

	TAG_GROUP(
		"material_effects",
		material_effects_group,
		MATERIAL_EFFECTS_TAG,
		1,
		nullptr,
		material_effects_group_block);

	TAG_GROUP(
		"material_physics",
		material_physics_group,
		MATERIAL_PHYSICS_TAG,
		0,
		nullptr,
		material_physics_group_block);

	TAG_GROUP(
		"meter",
		meter_group,
		METER_TAG,
		1,
		nullptr,
		meter_group_block);

	TAG_GROUP(
		"model",
		model_group,
		MODEL_TAG,
		1,
		nullptr,
		model_group_block);

	TAG_GROUP(
		"model_animation_graph",
		model_animation_graph_group,
		MODEL_ANIMATION_GRAPH_TAG,
		1,
		nullptr,
		model_animation_graph_group_block);

	TAG_GROUP(
		"mouse_cursor_definition",
		mouse_cursor_definition_group,
		MOUSE_CURSOR_DEFINITION_TAG,
		1,
		nullptr,
		mouse_cursor_definition_group_block);

	TAG_GROUP(
		"multilingual_unicode_string_list",
		multilingual_unicode_string_list_group,
		MULTILINGUAL_UNICODE_STRING_LIST_TAG,
		2,
		nullptr,
		multilingual_unicode_string_list_group_block);

	TAG_GROUP(
		"multiplayer_globals",
		multiplayer_globals_group,
		MULTIPLAYER_GLOBALS_TAG,
		1,
		nullptr,
		multiplayer_globals_group_block);

	TAG_GROUP(
		"multiplayer_scenario_description",
		multiplayer_scenario_description_group,
		MULTIPLAYER_SCENARIO_DESCRIPTION_TAG,
		1,
		nullptr,
		multiplayer_scenario_description_group_block);

	TAG_GROUP(
		"multiplayer_variant_settings_interface_definition",
		multiplayer_variant_settings_interface_definition_group,
		MULTIPLAYER_VARIANT_SETTINGS_INTERFACE_DEFINITION_TAG,
		1,
		nullptr,
		multiplayer_variant_settings_interface_definition_group_block);

	TAG_GROUP(
		"new_hud_definition",
		new_hud_definition_group,
		NEW_HUD_DEFINITION_TAG,
		1,
		nullptr,
		new_hud_definition_group_block);

	TAG_GROUP(
		"object",
		object_group,
		OBJECT_TAG,
		1,
		nullptr,
		object_group_block);

	TAG_GROUP(
		"particle",
		particle_group,
		PARTICLE_TAG,
		1,
		nullptr,
		particle_group_block);

	TAG_GROUP(
		"particle_model",
		particle_model_group,
		PARTICLE_MODEL_TAG,
		1,
		nullptr,
		particle_model_group_block);

	TAG_GROUP(
		"particle_physics",
		particle_physics_group,
		PARTICLE_PHYSICS_TAG,
		1,
		nullptr,
		particle_physics_group_block);

	TAG_GROUP(
		"patchy_fog",
		patchy_fog_group,
		PATCHY_FOG_TAG,
		1,
		nullptr,
		patchy_fog_group_block);

	TAG_GROUP(
		"physics",
		physics_group,
		PHYSICS_TAG,
		4,
		nullptr,
		physics_group_block);

	TAG_GROUP(
		"physics_model",
		physics_model_group,
		PHYSICS_MODEL_TAG,
		2,
		nullptr,
		physics_model_group_block);

	TAG_GROUP(
		"pixel_shader",
		pixel_shader_group,
		PIXEL_SHADER_TAG,
		1,
		nullptr,
		pixel_shader_group_block);

	TAG_GROUP(
		"planar_fog",
		planar_fog_group,
		PLANAR_FOG_TAG,
		1,
		nullptr,
		planar_fog_group_block);

	TAG_GROUP(
		"point_physics",
		point_physics_group,
		POINT_PHYSICS_TAG,
		1,
		nullptr,
		point_physics_group_block);

	TAG_GROUP(
		"projectile",
		projectile_group,
		PROJECTILE_TAG,
		5,
		&object_group,
		projectile_group_block);

	TAG_GROUP(
		"render_model",
		render_model_group,
		RENDER_MODEL_TAG,
		5,
		nullptr,
		render_model_group_block);

	TAG_GROUP(
		"scenario",
		scenario_group,
		SCENARIO_TAG,
		2,
		nullptr,
		scenario_group_block);

	TAG_GROUP(
		"scenario_ai_resource",
		scenario_ai_resource_group,
		SCENARIO_AI_RESOURCE_TAG,
		1,
		nullptr,
		scenario_ai_resource_group_block);

	TAG_GROUP(
		"scenario_bipeds_resource",
		scenario_bipeds_resource_group,
		SCENARIO_BIPEDS_RESOURCE_TAG,
		1,
		nullptr,
		scenario_bipeds_resource_group_block);

	TAG_GROUP(
		"scenario_cinematics_resource",
		scenario_cinematics_resource_group,
		SCENARIO_CINEMATICS_RESOURCE_TAG,
		1,
		nullptr,
		scenario_cinematics_resource_group_block);

	TAG_GROUP(
		"scenario_cluster_data_resource",
		scenario_cluster_data_resource_group,
		SCENARIO_CLUSTER_DATA_RESOURCE_TAG,
		1,
		nullptr,
		scenario_cluster_data_resource_group_block);

	TAG_GROUP(
		"scenario_comments_resource",
		scenario_comments_resource_group,
		SCENARIO_COMMENTS_RESOURCE_TAG,
		1,
		nullptr,
		scenario_comments_resource_group_block);

	TAG_GROUP(
		"scenario_creature_resource",
		scenario_creature_resource_group,
		SCENARIO_CREATURE_RESOURCE_TAG,
		1,
		nullptr,
		scenario_creature_resource_group_block);

	TAG_GROUP(
		"scenario_decals_resource",
		scenario_decals_resource_group,
		SCENARIO_DECALS_RESOURCE_TAG,
		1,
		nullptr,
		scenario_decals_resource_group_block);

	TAG_GROUP(
		"scenario_decorators_resource",
		scenario_decorators_resource_group,
		SCENARIO_DECORATORS_RESOURCE_TAG,
		1,
		nullptr,
		scenario_decorators_resource_group_block);

	TAG_GROUP(
		"scenario_devices_resource",
		scenario_devices_resource_group,
		SCENARIO_DEVICES_RESOURCE_TAG,
		1,
		nullptr,
		scenario_devices_resource_group_block);

	TAG_GROUP(
		"scenario_equipment_resource",
		scenario_equipment_resource_group,
		SCENARIO_EQUIPMENT_RESOURCE_TAG,
		1,
		nullptr,
		scenario_equipment_resource_group_block);

	TAG_GROUP(
		"scenario_hs_source_file",
		scenario_hs_source_file_group,
		SCENARIO_HS_SOURCE_FILE_TAG,
		1,
		nullptr,
		hs_source_files_group_block);

	TAG_GROUP(
		"scenario_lights_resource",
		scenario_lights_resource_group,
		SCENARIO_LIGHTS_RESOURCE_TAG,
		1,
		nullptr,
		scenario_lights_resource_group_block);

	TAG_GROUP(
		"scenario_scenery_resource",
		scenario_scenery_resource_group,
		SCENARIO_SCENERY_RESOURCE_TAG,
		1,
		nullptr,
		scenario_scenery_resource_group_block);

	TAG_GROUP(
		"scenario_sound_scenery_resource",
		scenario_sound_scenery_resource_group,
		SCENARIO_SOUND_SCENERY_RESOURCE_TAG,
		1,
		nullptr,
		scenario_sound_scenery_resource_group_block);

	TAG_GROUP(
		"scenario_structure_bsp",
		scenario_structure_bsp_group,
		SCENARIO_STRUCTURE_BSP_TAG,
		5,
		nullptr,
		scenario_structure_bsp_group_block);

	TAG_GROUP(
		"scenario_structure_lighting_resource",
		scenario_structure_lighting_resource_group,
		SCENARIO_STRUCTURE_LIGHTING_RESOURCE_TAG,
		1,
		nullptr,
		scenario_structure_lighting_resource_group_block);

	TAG_GROUP(
		"scenario_structure_lightmap",
		scenario_structure_lightmap_group,
		SCENARIO_STRUCTURE_LIGHTMAP_TAG,
		1,
		nullptr,
		scenario_structure_lightmap_group_block);

	TAG_GROUP(
		"scenario_trigger_volumes_resource",
		scenario_trigger_volumes_resource_group,
		SCENARIO_TRIGGER_VOLUMES_RESOURCE_TAG,
		1,
		nullptr,
		scenario_trigger_volumes_resource_group_block);

	TAG_GROUP(
		"scenario_vehicles_resource",
		scenario_vehicles_resource_group,
		SCENARIO_VEHICLES_RESOURCE_TAG,
		1,
		nullptr,
		scenario_vehicles_resource_group_block);

	TAG_GROUP(
		"scenario_weapons_resource",
		scenario_weapons_resource_group,
		SCENARIO_WEAPONS_RESOURCE_TAG,
		1,
		nullptr,
		scenario_weapons_resource_group_block);

	TAG_GROUP(
		"scenery",
		scenery_group,
		SCENERY_TAG,
		1,
		&object_group,
		scenery_group_block);

	TAG_GROUP(
		"screen_effect",
		screen_effect_group,
		SCREEN_EFFECT_TAG,
		4,
		nullptr,
		screen_effect_group_block);

	TAG_GROUP(
		"shader",
		shader_group,
		SHADER_TAG,
		1,
		nullptr,
		shader_group_block);

	TAG_GROUP(
		"shader_light_response",
		shader_light_response_group,
		SHADER_LIGHT_RESPONSE_TAG,
		2,
		nullptr,
		shader_light_response_group_block);

	TAG_GROUP(
		"shader_pass",
		shader_pass_group,
		SHADER_PASS_TAG,
		1,
		nullptr,
		shader_pass_group_block);

	TAG_GROUP(
		"shader_template",
		shader_template_group,
		SHADER_TEMPLATE_TAG,
		1,
		nullptr,
		shader_template_group_block);

	TAG_GROUP(
		"sky",
		sky_group,
		SKY_TAG,
		1,
		nullptr,
		sky_group_block);

	TAG_GROUP(
		"sound",
		sound_group,
		SOUND_TAG,
		4,
		nullptr,
		sound_group_block);

	TAG_GROUP(
		"sound_cache_file_gestalt",
		sound_cache_file_gestalt_group,
		SOUND_CACHE_FILE_GESTALT_TAG,
		2,
		nullptr,
		sound_cache_file_gestalt_group_block);

	TAG_GROUP(
		"sound_classes",
		sound_classes_group,
		SOUND_CLASSES_TAG,
		1,
		nullptr,
		sound_classes_group_block);

	TAG_GROUP(
		"sound_dialogue_constants",
		sound_dialogue_constants_group,
		SOUND_DIALOGUE_CONSTANTS_TAG,
		1,
		nullptr,
		sound_dialogue_constants_group_block);

	TAG_GROUP(
		"sound_effect_collection",
		sound_effect_collection_group,
		SOUND_EFFECT_COLLECTION_TAG,
		1,
		nullptr,
		sound_effect_collection_group_block);

	TAG_GROUP(
		"sound_effect_template",
		sound_effect_template_group,
		SOUND_EFFECT_TEMPLATE_TAG,
		1,
		nullptr,
		sound_effect_template_group_block);

	TAG_GROUP(
		"sound_environment",
		sound_environment_group,
		SOUND_ENVIRONMENT_TAG,
		1,
		nullptr,
		sound_environment_group_block);

	TAG_GROUP(
		"sound_looping",
		sound_looping_group,
		SOUND_LOOPING_TAG,
		3,
		nullptr,
		sound_looping_group_block);

	TAG_GROUP(
		"sound_mix",
		sound_mix_group,
		SOUND_MIX_TAG,
		1,
		nullptr,
		sound_mix_group_block);

	TAG_GROUP(
		"sound_scenery",
		sound_scenery_group,
		SOUND_SCENERY_TAG,
		1,
		&object_group,
		sound_scenery_group_block);

	TAG_GROUP(
		"stereo_system",
		stereo_system_group,
		STEREO_SYSTEM_TAG,
		1,
		nullptr,
		stereo_system_group_block);

	TAG_GROUP(
		"style",
		style_group,
		STYLE_TAG,
		1,
		nullptr,
		style_group_block);

	TAG_GROUP(
		"text_value_pair_definition",
		text_value_pair_definition_group,
		TEXT_VALUE_PAIR_DEFINITION_TAG,
		1,
		nullptr,
		text_value_pair_definition_group_block);

	TAG_GROUP(
		"unit",
		unit_group,
		UNIT_TAG,
		3,
		&object_group,
		unit_group_block);

	TAG_GROUP(
		"unit_hud_interface",
		unit_hud_interface_group,
		UNIT_HUD_INTERFACE_TAG,
		1,
		nullptr,
		unit_hud_interface_group_block);

	TAG_GROUP(
		"user_interface_globals_definition",
		user_interface_globals_definition_group,
		USER_INTERFACE_GLOBALS_DEFINITION_TAG,
		3,
		nullptr,
		user_interface_globals_definition_group_block);

	TAG_GROUP(
		"user_interface_list_skin_definition",
		user_interface_list_skin_definition_group,
		USER_INTERFACE_LIST_SKIN_DEFINITION_TAG,
		1,
		nullptr,
		user_interface_list_skin_definition_group_block);

	TAG_GROUP(
		"user_interface_screen_widget_definition",
		user_interface_screen_widget_definition_group,
		USER_INTERFACE_SCREEN_WIDGET_DEFINITION_TAG,
		898,
		nullptr,
		user_interface_screen_widget_definition_group_block);

	TAG_GROUP(
		"user_interface_shared_globals_definition",
		user_interface_shared_globals_definition_group,
		USER_INTERFACE_SHARED_GLOBALS_DEFINITION_TAG,
		1,
		nullptr,
		user_interface_shared_globals_definition_group_block);

	TAG_GROUP(
		"vehicle",
		vehicle_group,
		VEHICLE_TAG,
		1,
		&unit_group,
		vehicle_group_block);

	TAG_GROUP(
		"vehicle_collection",
		vehicle_collection_group,
		VEHICLE_COLLECTION_TAG,
		0,
		nullptr,
		vehicle_collection_group_block);

	TAG_GROUP(
		"vertex_shader",
		vertex_shader_group,
		VERTEX_SHADER_TAG,
		1,
		nullptr,
		vertex_shader_group_block);

	TAG_GROUP(
		"weapon",
		weapon_group,
		WEAPON_TAG,
		2,
		&item_group,
		weapon_group_block);

	TAG_GROUP(
		"weapon_hud_interface",
		weapon_hud_interface_group,
		WEAPON_HUD_INTERFACE_TAG,
		2,
		nullptr,
		weapon_hud_interface_group_block);

	TAG_GROUP(
		"weather_system",
		weather_system_group,
		WEATHER_SYSTEM_TAG,
		1,
		nullptr,
		weather_system_group_block);

	TAG_GROUP(
		"wind",
		wind_group,
		WIND_TAG,
		1,
		nullptr,
		wind_group_block);

	TAG_BLOCK_FROM_STRUCT(
		old_global_damage_resistance_struct_block,
		"OLD_global_damage_resistance_struct",
		"OLD_global_damage_resistance_struct_block",
		1,
		old_global_damage_resistance_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unused_structure_bsp_node_block,
		"UNUSED_structure_bsp_node_block",
		"UNUSED_structure_bsp_node_block",
		131072,
		unused_structure_bsp_node_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		actor_palette_block,
		"actor_palette_block",
		"actor_palette_block",
		64,
		actor_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		actor_starting_locations_block,
		"actor_starting_locations_block",
		"actor_starting_locations_block",
		32,
		actor_starting_location_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		additional_node_data_block,
		"additional_node_data_block",
		"additional_node_data_block",
		255,
		additional_node_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_animation_reference_block,
		"ai_animation_reference_block",
		"ai_animation_reference_block",
		128,
		ai_animation_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_conversation_block,
		"ai_conversation_block",
		"ai_conversation_block",
		128,
		ai_conversation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_conversation_line_block,
		"ai_conversation_line_block",
		"ai_conversation_line_block",
		32,
		ai_conversation_line_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_conversation_participant_block,
		"ai_conversation_participant_block",
		"ai_conversation_participant_block",
		8,
		ai_conversation_participant_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_deafening_encoded_pas_block,
		"ai_deafening_encoded_pas_block",
		"ai_deafening_encoded_pas_block",
		4088,
		ai_deafening_encoded_pas_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_dialogue_globals_group_block,
		"ai_dialogue_globals",
		"ai_dialogue_globals_block",
		1,
		ai_dialogue_globals_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_globals_block,
		"ai_globals_block",
		"ai_globals_block",
		1,
		ai_globals_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_globals_gravemind_block,
		"ai_globals_gravemind_block",
		"ai_globals_gravemind_block",
		1,
		ai_globals_gravemind_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_mission_dialogue_group_block,
		"ai_mission_dialogue",
		"ai_mission_dialogue_block",
		1,
		ai_mission_dialogue_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_recording_reference_block,
		"ai_recording_reference_block",
		"ai_recording_reference_block",
		128,
		ai_recording_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_scenario_mission_dialogue_block,
		"ai_scenario_mission_dialogue_block",
		"ai_scenario_mission_dialogue_block",
		1,
		ai_scenario_mission_dialogue_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_scene_block,
		"ai_scene_block",
		"ai_scene_block",
		100,
		ai_scene_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_scene_role_block,
		"ai_scene_role_block",
		"ai_scene_role_block",
		10,
		ai_scene_role_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_scene_role_variants_block,
		"ai_scene_role_variants_block",
		"ai_scene_role_variants_block",
		10,
		ai_scene_role_variants_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_scene_trigger_block,
		"ai_scene_trigger_block",
		"ai_scene_trigger_block",
		1,
		ai_scene_trigger_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ai_script_reference_block,
		"ai_script_reference_block",
		"ai_script_reference_block",
		128,
		ai_script_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		aim_assist_struct_block,
		"aim_assist_struct",
		"aim_assist_struct_block",
		1,
		aim_assist_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ambient_light_struct_block,
		"ambient_light_struct",
		"ambient_light_struct_block",
		1,
		ambient_light_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		angular_velocity_lower_bound_struct_block,
		"angular_velocity_lower_bound_struct",
		"angular_velocity_lower_bound_struct_block",
		1,
		angular_velocity_lower_bound_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_aiming_screen_struct_block,
		"animation_aiming_screen_struct",
		"animation_aiming_screen_struct_block",
		1,
		animation_aiming_screen_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_blend_screen_block,
		"animation_blend_screen_block",
		"animation_blend_screen_block",
		64,
		animation_blend_screen_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_destination_state_struct_block,
		"animation_destination_state_struct",
		"animation_destination_state_struct_block",
		1,
		animation_destination_state_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_effect_event_block,
		"animation_effect_event_block",
		"animation_effect_event_block",
		512,
		s_effect_event_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_entry_block,
		"animation_entry_block",
		"animation_entry_block",
		256,
		animation_entry_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_frame_event_block,
		"animation_frame_event_block",
		"animation_frame_event_block",
		512,
		animation_frame_event_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_graph_contents_struct_block,
		"animation_graph_contents_struct",
		"animation_graph_contents_struct_block",
		1,
		animation_graph_contents_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_graph_effect_reference_block,
		"animation_graph_effect_reference_block",
		"animation_graph_effect_reference_block",
		512,
		animation_graph_effect_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_graph_node_block,
		"animation_graph_node_block",
		"animation_graph_node_block",
		255,
		animation_graph_node_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_graph_resources_struct_block,
		"animation_graph_resources_struct",
		"animation_graph_resources_struct_block",
		1,
		animation_resources_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_graph_sound_reference_block,
		"animation_graph_sound_reference_block",
		"animation_graph_sound_reference_block",
		512,
		animation_graph_sound_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_ik_block,
		"animation_ik_block",
		"animation_ik_block",
		8,
		animation_ik_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_index_struct_block,
		"animation_index_struct",
		"animation_index_struct_block",
		1,
		animation_index_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_mode_block,
		"animation_mode_block",
		"animation_mode_block",
		512,
		animation_mode_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_pool_block,
		"animation_pool_block",
		"animation_pool_block",
		2048,
		animation_pool_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_reference_block,
		"animation_reference_block",
		"animation_reference_block",
		64,
		animation_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_sound_event_block,
		"animation_sound_event_block",
		"animation_sound_event_block",
		512,
		animation_sound_event_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_transition_block,
		"animation_transition_block",
		"animation_transition_block",
		256,
		animation_transition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_transition_destination_block,
		"animation_transition_destination_block",
		"animation_transition_destination_block",
		32,
		animation_transition_destination_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		animation_transition_state_struct_block,
		"animation_transition_state_struct",
		"animation_transition_state_struct_block",
		1,
		animation_transition_state_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		antenna_group_block,
		"antenna",
		"antenna_block",
		1,
		antenna_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		antenna_vertex_block,
		"antenna_vertex_block",
		"antenna_vertex_block",
		20,
		antenna_vertex_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		anti_gravity_point_definition_block,
		"anti_gravity_point_definition_block",
		"anti_gravity_point_definition_block",
		16,
		anti_gravity_point_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		area_set_block,
		"area_set_block",
		"area_set_block",
		32,
		area_set_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		areas_block,
		"areas_block",
		"areas_block",
		64,
		area_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		armor_modifier_block,
		"armor_modifier_block",
		"armor_modifier_block",
		2147483647,
		armor_modifier_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		background_animation_keyframe_reference_block,
		"background_animation_keyframe_reference_block",
		"background_animation_keyframe_reference_block",
		64,
		background_animation_keyframe_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ball_and_socket_constraints_block,
		"ball_and_socket_constraints_block",
		"ball_and_socket_constraints_block",
		64,
		ball_and_socket_constraints_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		barrel_firing_effect_block,
		"barrel_firing_effect_block",
		"barrel_firing_effect_block",
		3,
		barrel_firing_effect_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		beam_block,
		"beam_block",
		"beam_block",
		1024,
		beam_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		behavior_names_block,
		"behavior_names_block",
		"behavior_names_block",
		160,
		behavior_names_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		biped_group_block,
		"biped",
		"biped_block",
		1,
		biped_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		biped_lock_on_data_struct_block,
		"biped_lock_on_data_struct",
		"biped_lock_on_data_struct_block",
		1,
		biped_lock_on_data_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_group_block,
		"bitmap",
		"bitmap_block",
		1,
		bitmap_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_block_reference_block,
		"bitmap_block_reference_block",
		"bitmap_block_reference_block",
		64,
		bitmap_block_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_data_block,
		"bitmap_data_block",
		"bitmap_data_block",
		65536,
		bitmap_tags_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_group_sequence_block,
		"bitmap_group_sequence_block",
		"bitmap_group_sequence_block",
		256,
		bitmap_group_sequence_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_group_sprite_block,
		"bitmap_group_sprite_block",
		"bitmap_group_sprite_block",
		64,
		bitmap_group_sprite_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_native_info_struct_block,
		"bitmap_native_info_struct",
		"bitmap_native_info_struct_block",
		1,
		bitmap_native_info_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		bitmap_native_mipmap_info_block,
		"bitmap_native_mipmap_info_block",
		"bitmap_native_mipmap_info_block",
		16,
		bitmap_native_mipmap_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		boxes_block,
		"boxes_block",
		"boxes_block",
		1024,
		boxes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		breakable_surface_group_block,
		"breakable_surface",
		"breakable_surface_block",
		1,
		breakable_surface_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		breakable_surface_key_table_block,
		"breakable_surface_key_table_block",
		"breakable_surface_key_table_block",
		8192,
		breakable_surface_key_table_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		bsp2d_nodes_block,
		"bsp2d_nodes_block",
		"bsp2d_nodes_block",
		131072,
		bsp2d_nodes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		bsp2d_references_block,
		"bsp2d_references_block",
		"bsp2d_references_block",
		131072,
		bsp2d_references_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		bsp3d_nodes_block,
		"bsp3d_nodes_block",
		"bsp3d_nodes_block",
		131072,
		bsp3d_nodes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		bsp_leaf_block,
		"bsp_leaf_block",
		"bsp_leaf_block",
		65536,
		bsp_leaf_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		bsp_surface_reference_block,
		"bsp_surface_reference_block",
		"bsp_surface_reference_block",
		262144,
		bsp_surface_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		button_widget_reference_block,
		"button_widget_reference_block",
		"button_widget_reference_block",
		64,
		button_widget_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		byte_block,
		"byte_block",
		"byte_block",
		1024,
		byte_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cache_file_sound_group_block,
		"cache_file_sound",
		"cache_file_sound_block",
		1,
		cache_file_sound_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cached_data_block$2,
		"cached_data_block",
		"cached_data_block",
		1,
		cached_data_block_struct_definition$2);

	TAG_BLOCK_FROM_STRUCT(
		cached_data_block,
		"cached_data_block",
		"cached_data_block",
		1,
		cached_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		camera_block,
		"camera_block",
		"camera_block",
		1,
		camera_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		camera_track_group_block,
		"camera_track",
		"camera_track_block",
		1,
		camera_track_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		camera_track_control_point_block,
		"camera_track_control_point_block",
		"camera_track_control_point_block",
		16,
		camera_track_control_point_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		campaign_metagame_bucket_block,
		"campaign_metagame_bucket_block",
		"campaign_metagame_bucket_block",
		1,
		campaign_metagame_bucket_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		campaign_metagame_bucket_struct_block,
		"campaign_metagame_bucket_struct",
		"campaign_metagame_bucket_struct_block",
		1,
		campaign_metagame_bucket_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cellular_automata2d_group_block,
		"cellular_automata2d",
		"cellular_automata2d_block",
		1,
		cellular_automata2d_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cellular_automata_group_block,
		"cellular_automata",
		"cellular_automata_block",
		1,
		cellular_automata_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_group_block,
		"character",
		"character_block",
		1,
		character_tag_v3_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_boarding_block,
		"character_boarding_block",
		"character_boarding_block",
		1,
		character_boarding_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_boss_block,
		"character_boss_block",
		"character_boss_block",
		1,
		character_boss_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_charge_block,
		"character_charge_block",
		"character_charge_block",
		3,
		charge_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_cover_block,
		"character_cover_block",
		"character_cover_block",
		3,
		character_cover_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_engage_block,
		"character_engage_block",
		"character_engage_block",
		3,
		character_engage_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_evasion_block,
		"character_evasion_block",
		"character_evasion_block",
		3,
		character_evasion_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_firing_pattern_block,
		"character_firing_pattern_block",
		"character_firing_pattern_block",
		2,
		character_firing_pattern_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_firing_pattern_properties_block,
		"character_firing_pattern_properties_block",
		"character_firing_pattern_properties_block",
		100,
		character_firing_pattern_properties_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_general_block,
		"character_general_block",
		"character_general_block",
		1,
		character_general_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_grenades_block,
		"character_grenades_block",
		"character_grenades_block",
		10,
		character_grenades_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_idle_block,
		"character_idle_block",
		"character_idle_block",
		3,
		character_idle_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_look_block,
		"character_look_block",
		"character_look_block",
		1,
		character_look_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_movement_block,
		"character_movement_block",
		"character_movement_block",
		1,
		character_movement_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_palette_block,
		"character_palette_block",
		"character_palette_block",
		64,
		character_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_perception_block,
		"character_perception_block",
		"character_perception_block",
		4,
		character_perception_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_physics_dead_struct_block,
		"character_physics_dead_struct",
		"character_physics_dead_struct_block",
		1,
		character_physics_dead_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_physics_flying_struct_block,
		"character_physics_flying_struct",
		"character_physics_flying_struct_block",
		1,
		character_physics_flying_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_physics_ground_struct_block,
		"character_physics_ground_struct",
		"character_physics_ground_struct_block",
		1,
		character_physics_ground_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_physics_sentinel_struct_block,
		"character_physics_sentinel_struct",
		"character_physics_sentinel_struct_block",
		1,
		character_physics_sentinel_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_physics_struct_block,
		"character_physics_struct",
		"character_physics_struct_block",
		1,
		character_physics_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_placement_block,
		"character_placement_block",
		"character_placement_block",
		1,
		character_placement_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_presearch_block,
		"character_presearch_block",
		"character_presearch_block",
		3,
		presearch_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_ready_block,
		"character_ready_block",
		"character_ready_block",
		3,
		character_ready_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_retreat_block,
		"character_retreat_block",
		"character_retreat_block",
		3,
		character_retreat_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_search_block,
		"character_search_block",
		"character_search_block",
		3,
		character_search_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_swarm_block,
		"character_swarm_block",
		"character_swarm_block",
		3,
		character_swarm_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_variants_block,
		"character_variants_block",
		"character_variants_block",
		64,
		character_variants_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_vehicle_block,
		"character_vehicle_block",
		"character_vehicle_block",
		100,
		vehicle_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_vitality_block,
		"character_vitality_block",
		"character_vitality_block",
		1,
		character_vitality_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_vocalization_block,
		"character_vocalization_block",
		"character_vocalization_block",
		1,
		character_vocalization_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		character_weapons_block,
		"character_weapons_block",
		"character_weapons_block",
		100,
		weapon_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cheat_powerups_block,
		"cheat_powerups_block",
		"cheat_powerups_block",
		20,
		cheat_powerups_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cheat_weapons_block,
		"cheat_weapons_block",
		"cheat_weapons_block",
		20,
		cheat_weapons_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		chocolate_mountain_group_block,
		"chocolate_mountain",
		"chocolate_mountain_block",
		1,
		chocolate_mountain_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cloth_group_block,
		"cloth",
		"cloth_block",
		1,
		cloth_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cloth_indices_block,
		"cloth_indices_block",
		"cloth_indices_block",
		768,
		cloth_indices_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cloth_links_block,
		"cloth_links_block",
		"cloth_links_block",
		640,
		cloth_links_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cloth_properties_block,
		"cloth_properties",
		"cloth_properties_block",
		1,
		cloth_properties_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cloth_vertices_block,
		"cloth_vertices_block",
		"cloth_vertices_block",
		128,
		cloth_vertices_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cluster_door_portal_encoded_pas_block,
		"cluster_door_portal_encoded_pas_block",
		"cluster_door_portal_encoded_pas_block",
		2048,
		cluster_door_portal_encoded_pas_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		collision_bsp_physics_block,
		"collision_bsp_physics_block",
		"collision_bsp_physics_block",
		1024,
		collision_bsp_physics_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		collision_damage_block,
		"collision_damage_block",
		"collision_damage_block",
		1,
		collision_damage_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_group_block,
		"collision_model",
		"collision_model_block",
		1,
		collision_model_fields_current_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_bsp_block,
		"bsp",
		"collision_model_bsp_block",
		64,
		collision_model_bsp_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_material_block,
		"material",
		"collision_model_material_block",
		32,
		collision_model_material_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_node_block,
		"collision_model_node_block",
		"collision_model_node_block",
		255,
		collision_model_node_fields_current_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_pathfinding_sphere_block,
		"sphere",
		"collision_model_pathfinding_sphere_block",
		32,
		collision_model_pathfinding_sphere_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_permutation_block,
		"collision_model_permutation_block",
		"collision_model_permutation_block",
		32,
		collision_model_permutation_fields_current_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		collision_model_region_block,
		"region",
		"collision_model_region_block",
		16,
		collision_model_region_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		colony_group_block,
		"colony",
		"colony_block",
		1,
		colony_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		color_block,
		"color_block",
		"color_block",
		512,
		color_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		color_function_struct_block,
		"color_function_struct",
		"color_function_struct_block",
		1,
		color_function_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		color_table_group_block,
		"color_table",
		"color_table_block",
		1,
		color_table_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		constraint_bodies_struct_block,
		"constraint_bodies_struct",
		"constraint_bodies_struct_block",
		1,
		constraint_bodies_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		contact_point_block,
		"contact_point_block",
		"contact_point_block",
		3,
		contact_point_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		contact_point_block_v1_block,
		"contact_point_block_v1",
		"contact_point_block_v1",
		3,
		contact_point_block_v1_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		contrail_group_block,
		"contrail",
		"contrail_block",
		1,
		contrail_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		contrail_point_states_block,
		"contrail_point_states_block",
		"contrail_point_states_block",
		16,
		contrail_point_states_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		crate_group_block,
		"crate",
		"crate_block",
		1,
		crate_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		create_new_variant_struct_block,
		"create_new_variant_struct",
		"create_new_variant_struct_block",
		1,
		create_new_variant_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		creature_group_block,
		"creature",
		"creature_block",
		1,
		creature_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cs_point_block,
		"cs_point_block",
		"cs_point_block",
		20,
		cs_point_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cs_point_set_block,
		"cs_point_set_block",
		"cs_point_set_block",
		200,
		cs_point_set_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		cs_script_data_block,
		"cs_script_data_block",
		"cs_script_data_block",
		1,
		cs_script_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		custom_references_block,
		"custom_references_block",
		"custom_references_block",
		8,
		custom_references_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		damage_animation_block,
		"damage_animation_block",
		"damage_animation_block",
		8,
		damage_animation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		damage_constraint_info_block,
		"damage_constraint_info_block",
		"damage_constraint_info_block",
		16,
		damage_constraint_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		damage_direction_block,
		"damage_direction_block",
		"damage_direction_block",
		4,
		damage_direction_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		damage_effect_group_block,
		"damage_effect",
		"damage_effect_block",
		1,
		damage_effect_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		damage_effect_player_response_block,
		"damage_effect_player_response_block",
		"damage_effect_player_response_block",
		2,
		damage_effect_player_response_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		damage_effect_sound_effect_definition_block,
		"damage_effect_sound_effect_definition",
		"damage_effect_sound_effect_definition_block",
		1,
		damage_effect_sound_effect_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		damage_group_block,
		"damage_group_block",
		"damage_group_block",
		2147483647,
		damage_group_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		damage_outer_cone_angle_struct_block,
		"damage_outer_cone_angle_struct",
		"damage_outer_cone_angle_struct_block",
		1,
		damage_outer_cone_angle_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		damage_region_block,
		"damage_region_block",
		"damage_region_block",
		11,
		damage_region_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		damage_seat_info_block,
		"damage_seat_info_block",
		"damage_seat_info_block",
		16,
		damage_seat_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decal_group_block,
		"decal",
		"decal_block",
		1,
		decal_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decal_vertices_block,
		"decal_vertices_block",
		"decal_vertices_block",
		65536,
		decal_vertices_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_cache_block_block,
		"decorator_cache_block_block",
		"decorator_cache_block_block",
		4096,
		decorator_cache_block_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_cache_block_data_block,
		"decorator_cache_block_data_block",
		"decorator_cache_block_data_block",
		1,
		decorator_cache_block_data_v2_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_cell_collection_block,
		"decorator_cell_collection_block",
		"decorator_cell_collection_block",
		65535,
		decorator_cell_collection_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_classes_block,
		"decorator_classes_block",
		"decorator_classes_block",
		8,
		decorator_classes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_group_block,
		"decorator_group_block",
		"decorator_group_block",
		131072,
		decorator_group_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_model_indices_block,
		"decorator_model_indices_block",
		"decorator_model_indices_block",
		32768,
		decorator_model_indices_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_model_vertices_block,
		"decorator_model_vertices_block",
		"decorator_model_vertices_block",
		32768,
		decorator_model_vertices_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_models_block,
		"decorator_models_block",
		"decorator_models_block",
		256,
		decorator_models_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_permutations_block,
		"decorator_permutations_block",
		"decorator_permutations_block",
		64,
		decorator_permutations_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_placement_block,
		"decorator_placement_block",
		"decorator_placement_block",
		32768,
		decorator_placement_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_placement_definition_block,
		"decorator_placement_definition_block",
		"decorator_placement_definition_block",
		1,
		decorator_cache_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_projected_decal_block,
		"decorator_projected_decal_block",
		"decorator_projected_decal_block",
		32768,
		decorator_projected_decal_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_set_group_block,
		"decorator_set",
		"decorator_set_block",
		1,
		decorator_set_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorator_shader_reference_block,
		"decorator_shader_reference_block",
		"decorator_shader_reference_block",
		8,
		decorator_shader_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		decorators_group_block,
		"decorators",
		"decorators_block",
		1,
		decorator_cache_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		detail_object_collection_group_block,
		"detail_object_collection",
		"detail_object_collection_block",
		1,
		detail_object_collection_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		detail_object_type_block,
		"detail_object_type_block",
		"detail_object_type_block",
		16,
		detail_object_type_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		device_group_block,
		"device",
		"device_block",
		1,
		device_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		device_control_group_block,
		"device_control",
		"device_control_block",
		1,
		device_control_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		device_group_block$2,
		"device_group_block",
		"device_group_block",
		128,
		device_group_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		device_light_fixture_group_block,
		"device_light_fixture",
		"device_light_fixture_block",
		1,
		device_light_fixture_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		device_machine_group_block,
		"device_machine",
		"device_machine_block",
		1,
		device_machine_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		dialogue_group_block,
		"dialogue",
		"dialogue_block",
		1,
		g_dialogue_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		dialogue_data_block,
		"dialogue_data_block",
		"dialogue_data_block",
		200,
		dialogue_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		dialogue_variant_block,
		"dialogue_variant_block",
		"dialogue_variant_block",
		16,
		dialogue_variant_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		difficulty_block,
		"difficulty_block",
		"difficulty_block",
		1,
		difficulty_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		dont_use_me_scenario_environment_object_block,
		"dont_use_me_scenario_environment_object_block",
		"dont_use_me_scenario_environment_object_block",
		4096,
		dont_use_me_scenario_environment_object_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		door_encoded_pas_block,
		"door_encoded_pas_block",
		"door_encoded_pas_block",
		4096,
		door_encoded_pas_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		dynamic_spawn_zone_overload_block,
		"dynamic_spawn_zone_overload_block",
		"dynamic_spawn_zone_overload_block",
		32,
		dynamic_spawn_zone_overload_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		edges_block,
		"edges_block",
		"edges_block",
		262144,
		collision_edge_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		editor_comment_block,
		"editor_comment_block",
		"editor_comment_block",
		65536,
		editor_comment_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		effect_accelerations_block,
		"effect_accelerations_block",
		"effect_accelerations_block",
		32,
		effect_accelerations_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		effect_group_block,
		"effect",
		"effect_block",
		1,
		effect_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		effect_event_block,
		"effect_event_block",
		"effect_event_block",
		32,
		effect_event_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		effect_locations_block,
		"effect_locations_block",
		"effect_locations_block",
		32,
		effect_locations_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		effect_part_block,
		"effect_part_block",
		"effect_part_block",
		32,
		effect_part_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		encoded_cluster_distances_block,
		"encoded_cluster_distances_block",
		"encoded_cluster_distances_block",
		130816,
		encoded_cluster_distances_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		environment_object_bsp_refs_block,
		"environment_object_bsp_refs",
		"environment_object_bsp_refs",
		1024,
		environment_object_bsp_ref_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		environment_object_nodes_block,
		"environment_object_nodes",
		"environment_object_nodes",
		255,
		environment_object_node_ref_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		environment_object_refs_block,
		"environment_object_refs",
		"environment_object_refs",
		2000,
		environment_object_ref_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		equipment_group_block,
		"equipment",
		"equipment_block",
		1,
		equipment_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		error_report_comments_block,
		"error report comment",
		"error_report_comments_block",
		1048576,
		error_report_comments_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		error_report_lines_block,
		"error report line",
		"error_report_lines_block",
		1048576,
		error_report_lines_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		error_report_quads_block,
		"error report quad",
		"error_report_quads_block",
		1048576,
		error_report_quads_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		error_report_triangles_block,
		"error report triangle",
		"error_report_triangles_block",
		1048576,
		error_report_triangles_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		error_report_vectors_block,
		"error report vector",
		"error_report_vectors_block",
		1048576,
		error_report_vectors_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		error_report_vertices_block,
		"error report vertex",
		"error_report_vertices_block",
		1048576,
		error_report_vertices_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		error_reports_block,
		"error report",
		"error_reports_block",
		1048576,
		error_reports_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		extern_reference_block,
		"extern_reference_block",
		"extern_reference_block",
		1024,
		extern_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		falling_damage_block,
		"falling_damage_block",
		"falling_damage_block",
		1,
		falling_damage_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		firing_positions_block,
		"firing_positions_block",
		"firing_positions_block",
		512,
		firing_position_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		flight_reference_block,
		"flight_reference_block",
		"flight_reference_block",
		10,
		flight_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		flock_definition_block,
		"flock_definition_block",
		"flock_definition_block",
		20,
		flock_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		flock_sink_block,
		"flock_sink_block",
		"flock_sink_block",
		10,
		flock_sink_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		flock_source_block,
		"flock_source_block",
		"flock_source_block",
		10,
		flock_source_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		friction_point_definition_block,
		"friction_point_definition_block",
		"friction_point_definition_block",
		16,
		friction_point_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		g_default_variant_settings_block,
		"g_default_variant_settings_block",
		"g_default_variant_settings_block",
		134,
		g_default_variant_settings_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		g_default_variants_block,
		"g_default_variants_block",
		"g_default_variants_block",
		100,
		g_default_variants_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		g_null_block,
		"g_null_block",
		"g_null_block",
		0,
		g_null_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		g_scenario_editor_folder_block,
		"g_scenario_editor_folder_block",
		"g_scenario_editor_folder_block",
		32767,
		g_scenario_editor_folder_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_assault_event_block,
		"game_engine_assault_event_block",
		"game_engine_assault_event_block",
		128,
		game_engine_assault_event_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_ctf_event_block,
		"game_engine_ctf_event_block",
		"game_engine_ctf_event_block",
		128,
		game_engine_ctf_event_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_flavor_event_block,
		"game_engine_flavor_event_block",
		"game_engine_flavor_event_block",
		128,
		game_engine_flavor_event_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_general_event_block,
		"game_engine_general_event_block",
		"game_engine_general_event_block",
		128,
		game_engine_general_event_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_juggernaut_event_block,
		"game_engine_juggernaut_event_block",
		"game_engine_juggernaut_event_block",
		128,
		game_engine_juggernaut_event_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_king_event_block,
		"game_engine_king_event_block",
		"game_engine_king_event_block",
		128,
		game_engine_king_event_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_oddball_event_block,
		"game_engine_oddball_event_block",
		"game_engine_oddball_event_block",
		128,
		game_engine_oddball_event_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_slayer_event_block,
		"game_engine_slayer_event_block",
		"game_engine_slayer_event_block",
		128,
		game_engine_slayer_event_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_status_response_block,
		"game_engine_status_response_block",
		"game_engine_status_response_block",
		32,
		game_engine_status_response_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_engine_territories_event_block,
		"game_engine_territories_event_block",
		"game_engine_territories_event_block",
		128,
		game_engine_territories_event_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_globals_damage_block,
		"game_globals_damage_block",
		"game_globals_damage_block",
		1,
		game_globals_damage_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		game_portal_to_portal_mapping_block,
		"game_portal_to_portal_mapping_block",
		"game_portal_to_portal_mapping_block",
		128,
		game_portal_to_portal_mapping_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		garbage_group_block,
		"garbage",
		"garbage_block",
		1,
		garbage_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		gear_block,
		"gear_block",
		"gear_block",
		16,
		gear_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		gloal_wind_primitives_block,
		"wind primitives",
		"gloal_wind_primitives_block",
		128,
		gloal_wind_primitives_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_collision_bsp_block,
		"global_collision_bsp_block",
		"global_collision_bsp_block",
		1,
		collision_bsp_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_collision_bsp_struct_block,
		"global_collision_bsp_struct",
		"global_collision_bsp_struct_block",
		1,
		collision_bsp_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_damage_info_block,
		"global_damage_info_block",
		"global_damage_info_block",
		1,
		global_damage_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_damage_nodes_block,
		"global_damage_nodes_block",
		"global_damage_nodes_block",
		255,
		global_damage_nodes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_damage_section_block,
		"global_damage_section_block",
		"global_damage_section_block",
		16,
		global_damage_section_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_detail_object_block,
		"global_detail_object_block",
		"global_detail_object_block",
		2097152,
		global_detail_object_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_detail_object_cells_block,
		"global_detail_object_cells_block",
		"global_detail_object_cells_block",
		262144,
		global_detail_object_cells_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_detail_object_counts_block,
		"global_detail_object_counts_block",
		"global_detail_object_counts_block",
		8388608,
		global_detail_object_counts_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_error_report_categories_block,
		"error report category",
		"global_error_report_categories_block",
		64,
		global_error_report_categories_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_block_info_struct_block,
		"global_geometry_block_info_struct",
		"global_geometry_block_info_struct_block",
		1,
		global_geometry_block_info_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_block_resource_block,
		"block resources",
		"global_geometry_block_resource_block",
		1024,
		global_geometry_block_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_compression_info_block,
		"compression info",
		"global_geometry_compression_info_block",
		1,
		global_geometry_compression_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_explicit_edge_block,
		"explicit edge",
		"global_geometry_explicit_edge_block",
		65535,
		global_geometry_explicit_edge_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_isq_info_struct_block,
		"global_geometry_isq_info_struct",
		"global_geometry_isq_info_struct_block",
		1,
		global_geometry_isq_info_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_material_block,
		"material",
		"global_geometry_material_block",
		1024,
		global_geometry_material_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_material_property_block,
		"material property",
		"global_geometry_material_property_block",
		16,
		global_geometry_material_property_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_part_block,
		"part",
		"global_geometry_part_block",
		255,
		global_geometry_part_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_part_block_new_block,
		"part",
		"global_geometry_part_block_new",
		255,
		global_geometry_part_block_new_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_plane_block,
		"plane",
		"global_geometry_plane_block",
		65535,
		global_geometry_plane_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_point_data_index_block,
		"index",
		"global_geometry_point_data_index_block",
		32767,
		global_geometry_point_data_index_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_point_data_struct_block,
		"global_geometry_point_data_struct",
		"global_geometry_point_data_struct_block",
		1,
		global_geometry_point_data_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_raw_point_block,
		"point",
		"global_geometry_raw_point_block",
		32767,
		global_geometry_raw_point_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_rigid_plane_group_block,
		"rigid plane group",
		"global_geometry_rigid_plane_group_block",
		65280,
		global_geometry_rigid_plane_group_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_rigid_point_group_block,
		"rigid point group",
		"global_geometry_rigid_point_group_block",
		32767,
		global_geometry_rigid_point_group_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_section_info_struct_block,
		"global_geometry_section_info_struct",
		"global_geometry_section_info_struct_block",
		1,
		global_geometry_section_info_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_section_raw_vertex_block,
		"vertex",
		"global_geometry_section_raw_vertex_block",
		32767,
		global_geometry_section_raw_vertex_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_section_strip_index_block,
		"index",
		"global_geometry_section_strip_index_block",
		65535,
		global_geometry_section_strip_index_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_section_struct_block,
		"global_geometry_section_struct",
		"global_geometry_section_struct_block",
		1,
		geometry_section_fieldset_new_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_geometry_section_vertex_buffer_block,
		"vertex buffer",
		"global_geometry_section_vertex_buffer_block",
		512,
		global_geometry_section_vertex_buffer_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_hud_multitexture_overlay_definition_block,
		"global_hud_multitexture_overlay_definition",
		"global_hud_multitexture_overlay_definition",
		30,
		global_hud_multitexture_overlay_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_hud_multitexture_overlay_effector_definition_block,
		"global_hud_multitexture_overlay_effector_definition",
		"global_hud_multitexture_overlay_effector_definition",
		30,
		global_hud_multitexture_overlay_effector_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_hud_screen_effect_definition_block,
		"global_hud_screen_effect_definition",
		"global_hud_screen_effect_definition",
		1,
		global_hud_screen_effect_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_leaf_connection_block,
		"global_leaf_connection_block",
		"global_leaf_connection_block",
		524288,
		global_leaf_connection_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_map_leaf_block,
		"global_map_leaf_block",
		"global_map_leaf_block",
		65536,
		global_map_leaf_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_new_hud_globals_constants_struct_block,
		"global_new_hud_globals_constants_struct",
		"global_new_hud_globals_constants_struct_block",
		1,
		global_new_hud_globals_constants_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_new_hud_globals_struct_block,
		"global_new_hud_globals_struct",
		"global_new_hud_globals_struct_block",
		1,
		global_new_hud_globals_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_particle_system_lite_block,
		"global_particle_system_lite_block",
		"global_particle_system_lite_block",
		1,
		global_particle_system_lite_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_scenario_load_parameters_block,
		"scenario load parameters",
		"global_scenario_load_parameters_block",
		32,
		global_scenario_load_parameters_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_shader_parameter_block,
		"parameter",
		"global_shader_parameter_block",
		64,
		global_shader_parameter_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_structure_physics_struct_block,
		"global_structure_physics_struct",
		"global_structure_physics_struct_block",
		1,
		structure_physics_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_subparts_block,
		"subparts",
		"global_subparts_block",
		32768,
		global_subparts_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_tag_import_info_block,
		"import info",
		"global_tag_import_info_block",
		1,
		global_tag_import_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_ui_campaign_level_block,
		"global_ui_campaign_level_block",
		"global_ui_campaign_level_block",
		20,
		global_ui_campaign_level_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_ui_multiplayer_level_block,
		"global_ui_multiplayer_level_block",
		"global_ui_multiplayer_level_block",
		50,
		global_ui_multiplayer_level_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_visibility_bounds_block,
		"visibility bounds",
		"global_visibility_bounds_block",
		32768,
		global_visibility_bounds_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_water_definitions_block,
		"global_water_definitions_block",
		"global_water_definitions_block",
		1,
		global_water_definitions_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_weather_background_plate_block,
		"global_weather_background_plate_block",
		"global_weather_background_plate_block",
		3,
		global_weather_background_plate_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_wind_model_struct_block,
		"global_wind_model_struct",
		"global_wind_model_struct_block",
		1,
		global_wind_model_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		global_z_reference_vector_block,
		"global_z_reference_vector_block",
		"global_z_reference_vector_block",
		262144,
		global_z_reference_vector_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		globals_group_block,
		"globals",
		"globals_block",
		1,
		globals_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		grenade_and_powerup_struct_block,
		"grenade_and_powerup_struct",
		"grenade_and_powerup_struct_block",
		1,
		grenade_and_powerup_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		grenade_block,
		"grenade_block",
		"grenade_block",
		20,
		grenade_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		grenade_hud_interface_group_block,
		"grenade_hud_interface",
		"grenade_hud_interface_block",
		1,
		grenade_hud_interface_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		grenade_hud_overlay_block,
		"grenade_hud_overlay_block",
		"grenade_hud_overlay_block",
		16,
		grenade_hud_overlay_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		grenade_hud_sound_block,
		"grenade_hud_sound_block",
		"grenade_hud_sound_block",
		12,
		grenade_hud_sound_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		grenades_block,
		"grenades_block",
		"grenades_block",
		2,
		grenades_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		havok_cleanup_resources_block,
		"havok_cleanup_resources_block",
		"havok_cleanup_resources_block",
		1,
		havok_cleanup_resources_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		havok_vehicle_physics_struct_block,
		"havok_vehicle_physics_struct",
		"havok_vehicle_physics_struct_block",
		1,
		havok_vehicle_physics_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hinge_constraints_block,
		"hinge_constraints_block",
		"hinge_constraints_block",
		64,
		hinge_constraints_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hs_globals_block,
		"hs_globals_block",
		"hs_globals_block",
		512,
		hs_globals_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hs_references_block,
		"hs_references_block",
		"hs_references_block",
		512,
		hs_references_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hs_scripts_block,
		"hs_scripts_block",
		"hs_scripts_block",
		1024,
		hs_scripts_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hs_source_files_group_block,
		"hs_source_files_block",
		"hs_source_files_block",
		16,
		hs_source_files_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hs_unit_seat_block,
		"hs_unit_seat_block",
		"hs_unit_seat_block",
		65536,
		hs_unit_seat_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_bitmap_widgets_block,
		"hud_bitmap_widgets",
		"hud_bitmap_widgets",
		256,
		hud_bitmap_widgets_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_block_reference_block,
		"hud_block_reference_block",
		"hud_block_reference_block",
		64,
		hud_block_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_button_icon_block,
		"hud_button_icon_block",
		"hud_button_icon_block",
		18,
		hud_button_icon_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_dashlights_block,
		"hud_dashlights_block",
		"hud_dashlights_block",
		9,
		hud_dashlights_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_globals_group_block,
		"hud_globals",
		"hud_globals_block",
		1,
		hud_globals_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_message_elements_block,
		"hud_message_elements_block",
		"hud_message_elements_block",
		8192,
		hud_message_elements_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_message_text_group_block,
		"hud_message_text",
		"hud_message_text_block",
		1,
		hud_message_text_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_messages_block,
		"hud_messages_block",
		"hud_messages_block",
		1024,
		hud_messages_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_number_group_block,
		"hud_number",
		"hud_number_block",
		1,
		hud_number_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_screen_effect_widgets_block,
		"hud_screen_effect_widgets",
		"hud_screen_effect_widgets",
		4,
		hud_screen_effect_widgets_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_text_widgets_block,
		"hud_text_widgets",
		"hud_text_widgets",
		256,
		hud_text_widgets_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_waypoint_arrow_block,
		"hud_waypoint_arrow_block",
		"hud_waypoint_arrow_block",
		16,
		hud_waypoint_arrow_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_waypoint_arrow_block$2,
		"hud_waypoint_arrow_block",
		"hud_waypoint_arrow_block",
		4,
		hud_waypoint_arrow_block_struct_definition$2);

	TAG_BLOCK_FROM_STRUCT(
		hud_waypoint_block,
		"hud_waypoint_block",
		"hud_waypoint_block",
		8,
		hud_waypoint_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_widget_effect_block,
		"hud_widget_effect_block",
		"hud_widget_effect_block",
		1,
		hud_widget_effect_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_widget_effect_function_struct_block,
		"hud_widget_effect_function_struct",
		"hud_widget_effect_function_struct_block",
		1,
		hud_widget_effect_function_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_widget_inputs_struct_block,
		"hud_widget_inputs_struct",
		"hud_widget_inputs_struct_block",
		1,
		hud_widget_inputs_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		hud_widget_state_definition_struct_block,
		"hud_widget_state_definition_struct",
		"hud_widget_state_definition_struct_block",
		1,
		hud_widget_state_definition_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		indices_block,
		"indices_block",
		"indices_block",
		65536,
		indices_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		inertial_matrix_block,
		"inertial_matrix_block",
		"inertial_matrix_block",
		2,
		inertial_matrix_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		inherited_animation_block,
		"inherited_animation_block",
		"inherited_animation_block",
		8,
		inherited_animation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		inherited_animation_node_map_block,
		"inherited_animation_node_map_block",
		"inherited_animation_node_map_block",
		255,
		inherited_animation_node_map_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		inherited_animation_node_map_flag_block,
		"inherited_animation_node_map_flag_block",
		"inherited_animation_node_map_flag_block",
		255,
		inherited_animation_node_map_flag_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		instanced_geometry_reference_block,
		"instanced_geometry_reference_block",
		"instanced_geometry_reference_block",
		1024,
		instanced_geometry_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		instantaneous_damage_repsonse_block,
		"instantaneous_damage_repsonse_block",
		"instantaneous_damage_repsonse_block",
		16,
		instantaneous_damage_repsonse_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		instantaneous_response_damage_effect_marker_struct_block,
		"instantaneous_response_damage_effect_marker_struct",
		"instantaneous_response_damage_effect_marker_struct_block",
		1,
		instantaneous_response_damage_effect_marker_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		instantaneous_response_damage_effect_struct_block,
		"instantaneous_response_damage_effect_struct",
		"instantaneous_response_damage_effect_struct_block",
		1,
		instantaneous_response_damage_effect_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		interface_tag_references_block,
		"interface_tag_references",
		"interface_tag_references",
		1,
		interface_tag_references_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		involuntary_data_block,
		"involuntary_data_block",
		"involuntary_data_block",
		100,
		involuntary_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		item_group_block,
		"item",
		"item_block",
		1,
		item_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		item_collection_group_block,
		"item_collection",
		"item_collection_block",
		1,
		item_collection_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		item_permutation_block,
		"item_permutation",
		"item_permutation",
		32,
		item_permutation_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		large_bsp2d_nodes_block,
		"bsp2d node",
		"large_bsp2d_nodes_block",
		131072,
		large_bsp2d_nodes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		large_bsp2d_references_block,
		"bsp2d reference",
		"large_bsp2d_references_block",
		131072,
		large_bsp2d_references_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		large_bsp3d_nodes_block,
		"bsp3d node",
		"large_bsp3d_nodes_block",
		131072,
		large_bsp3d_nodes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		large_edges_block,
		"edge",
		"large_edges_block",
		262144,
		large_edges_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		large_leaves_block,
		"leaf",
		"large_leaves_block",
		65536,
		large_leaves_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		large_sound_permutations_block,
		"large_sound_permutations_block",
		"large_sound_permutations_block",
		32,
		large_sound_permutations_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		large_sound_pitch_range_block,
		"large_sound_pitch_range_block",
		"large_sound_pitch_range_block",
		9,
		large_sound_pitch_range_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		large_sound_playback_parameters_struct_block,
		"large_sound_playback_parameters_struct",
		"large_sound_playback_parameters_struct_block",
		1,
		large_sound_playback_parameters_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		large_sound_scale_modifiers_struct_block,
		"large_sound_scale_modifiers_struct",
		"large_sound_scale_modifiers_struct_block",
		1,
		large_sound_scale_modifiers_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		large_surfaces_block,
		"surface",
		"large_surfaces_block",
		131072,
		large_surfaces_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		large_vertices_block,
		"vertex",
		"large_vertices_block",
		131072,
		large_vertices_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		leaf_connection_vertex_block,
		"leaf_connection_vertex_block",
		"leaf_connection_vertex_block",
		64,
		leaf_connection_vertex_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		leaves_block,
		"leaves_block",
		"leaves_block",
		65536,
		leaves_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lens_flare_group_block,
		"lens_flare",
		"lens_flare_block",
		1,
		lens_flare_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lens_flare_color_animation_block,
		"lens_flare_color_animation_block",
		"lens_flare_color_animation_block",
		1,
		lens_flare_color_animation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lens_flare_reflection_block,
		"reflection",
		"lens_flare_reflection_block",
		32,
		lens_flare_reflection_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lens_flare_scalar_animation_block,
		"lens_flare_scalar_animation_block",
		"lens_flare_scalar_animation_block",
		1,
		lens_flare_scalar_animation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		light_group_block,
		"light",
		"light_block",
		1,
		light_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		light_brightness_animation_block,
		"brightness animation",
		"light_brightness_animation_block",
		1,
		light_brightness_animation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		light_color_animation_block,
		"color animation",
		"light_color_animation_block",
		1,
		light_color_animation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		light_gel_animation_block,
		"gel animation",
		"light_gel_animation_block",
		1,
		light_gel_animation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		light_volume_aspect_block,
		"aspect",
		"light_volume_aspect_block",
		1,
		light_volume_aspect_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		light_volume_group_block,
		"light_volume",
		"light_volume_block",
		1,
		light_volume_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		light_volume_runtime_offset_block,
		"light_volume_runtime_offset_block",
		"light_volume_runtime_offset_block",
		256,
		light_volume_runtime_offset_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		light_volume_volume_block,
		"volume",
		"light_volume_volume_block",
		16,
		light_volume_volume_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lighting_variables_block,
		"lighting_variables_block",
		"lighting_variables_block",
		13,
		lighting_variables_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lightmap_bucket_raw_vertex_block,
		"vertex",
		"lightmap_bucket_raw_vertex_block",
		32767,
		lightmap_bucket_raw_vertex_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lightmap_geometry_render_info_block,
		"lightmap_geometry_render_info_block",
		"lightmap_geometry_render_info_block",
		1024,
		lightmap_geometry_render_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lightmap_geometry_section_block,
		"lightmap_geometry_section_block",
		"lightmap_geometry_section_block",
		512,
		lightmap_geometry_section_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lightmap_geometry_section_cache_data_block,
		"lightmap_geometry_section_cache_data_block",
		"lightmap_geometry_section_cache_data_block",
		1,
		lightmap_geometry_section_cache_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lightmap_instance_bucket_reference_block,
		"lightmap_instance_bucket_reference_block",
		"lightmap_instance_bucket_reference_block",
		2000,
		lightmap_instance_bucket_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lightmap_instance_bucket_section_offset_block,
		"lightmap_instance_bucket_section_offset_block",
		"lightmap_instance_bucket_section_offset_block",
		255,
		lightmap_instance_bucket_section_offset_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lightmap_scenery_object_info_block,
		"lightmap_scenery_object_info_block",
		"lightmap_scenery_object_info_block",
		2000,
		lightmap_scenery_object_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lightmap_shadows_struct_block,
		"lightmap_shadows_struct",
		"lightmap_shadows_struct_block",
		1,
		lightmap_shadows_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lightmap_vertex_buffer_bucket_block,
		"lightmap_vertex_buffer_bucket_block",
		"lightmap_vertex_buffer_bucket_block",
		1024,
		lightmap_vertex_buffer_bucket_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lightmap_vertex_buffer_bucket_cache_data_block,
		"lightmap_vertex_buffer_bucket_cache_data_block",
		"lightmap_vertex_buffer_bucket_cache_data_block",
		1,
		lightmap_vertex_buffer_bucket_cache_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		limited_hinge_constraints_block,
		"limited_hinge_constraints_block",
		"limited_hinge_constraints_block",
		64,
		limited_hinge_constraints_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		liquid_arc_block,
		"arc",
		"liquid_arc_block",
		3,
		liquid_arc_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		liquid_group_block,
		"liquid",
		"liquid_block",
		1,
		liquid_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		liquid_core_block,
		"core",
		"liquid_core_block",
		4,
		liquid_core_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		list_reference_block,
		"list_reference_block",
		"list_reference_block",
		1,
		list_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		list_shapes_block,
		"list_shapes_block",
		"list_shapes_block",
		256,
		list_shapes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		list_skin_reference_block,
		"list_skin_reference_block",
		"list_skin_reference_block",
		32,
		list_skin_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		lists_block,
		"lists_block",
		"lists_block",
		64,
		lists_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		local_bitmap_reference_block,
		"local_bitmap_reference_block",
		"local_bitmap_reference_block",
		16,
		local_bitmap_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		local_string_id_list_section_reference_block,
		"local_string_id_list_section_reference_block",
		"local_string_id_list_section_reference_block",
		16,
		local_string_id_list_section_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		local_string_id_list_string_reference_block,
		"local_string_id_list_string_reference_block",
		"local_string_id_list_string_reference_block",
		64,
		local_string_id_list_string_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		long_block,
		"long_block",
		"long_block",
		5,
		long_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		look_function_block,
		"look_function_block",
		"look_function_block",
		16,
		look_function_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		looping_sound_detail_block,
		"looping_sound_detail_block",
		"looping_sound_detail_block",
		12,
		looping_sound_detail_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		looping_sound_track_block,
		"looping_sound_track_block",
		"looping_sound_track_block",
		3,
		looping_sound_track_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		magazine_objects_block,
		"magazine_objects",
		"magazine_objects",
		8,
		weapon_ammunition_object_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		magazines_block,
		"magazines",
		"magazines",
		2,
		weapon_magazine_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		map_leaf_connection_index_block,
		"map_leaf_connection_index_block",
		"map_leaf_connection_index_block",
		512,
		map_leaf_connection_index_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		map_leaf_face_block,
		"map_leaf_face_block",
		"map_leaf_face_block",
		512,
		map_leaf_face_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		map_leaf_face_vertex_block,
		"map_leaf_face_vertex_block",
		"map_leaf_face_vertex_block",
		64,
		map_leaf_face_vertex_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		mapping_function_block,
		"mapping_function",
		"mapping_function_block",
		1,
		function_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		mass_distributions_block,
		"mass_distributions_block",
		"mass_distributions_block",
		256,
		mass_distributions_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		mass_point_block,
		"mass_point_block",
		"mass_point_block",
		32,
		mass_point_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		material_effect_block_v1_block,
		"material_effect_block_v1",
		"material_effect_block_v1",
		14,
		material_effect_block_v1_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		material_effect_block_v2_block,
		"material_effect_block_v2",
		"material_effect_block_v2",
		21,
		material_effect_block_v2_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		material_effect_material_block,
		"material_effect_material_block",
		"material_effect_material_block",
		500,
		material_effect_material_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		material_effect_material_block_old_v1_block,
		"material_effect_material_block_old_v1",
		"material_effect_material_block_old_v1",
		33,
		material_effect_material_block_old_v1_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		material_effects_group_block,
		"material_effects",
		"material_effects_block",
		1,
		material_effects_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		material_physics_group_block,
		"material_physics",
		"material_physics_block",
		1,
		material_physics_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		material_physics_properties_struct_block,
		"material_physics_properties_struct",
		"material_physics_properties_struct_block",
		1,
		material_physics_properties_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		materials_block$2,
		"materials_block",
		"materials_block",
		64,
		materials_block_struct_definition$2);

	TAG_BLOCK_FROM_STRUCT(
		materials_block,
		"materials_block",
		"materials_block",
		256,
		materials_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		materials_sweeteners_struct_block,
		"materials_sweeteners_struct",
		"materials_sweeteners_struct_block",
		1,
		materials_sweeteners_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		melee_aim_assist_struct_block,
		"melee_aim_assist_struct",
		"melee_aim_assist_struct_block",
		1,
		melee_aim_assist_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		melee_damage_parameters_struct_block,
		"melee_damage_parameters_struct",
		"melee_damage_parameters_struct_block",
		1,
		melee_damage_parameters_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		meter_group_block,
		"meter",
		"meter_block",
		1,
		meter_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		mission_dialogue_lines_block,
		"mission_dialogue_lines_block",
		"mission_dialogue_lines_block",
		500,
		mission_dialogue_lines_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		mission_dialogue_variants_block,
		"mission_dialogue_variants_block",
		"mission_dialogue_variants_block",
		10,
		mission_dialogue_variants_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_animation_graph_group_block,
		"model_animation_graph",
		"model_animation_graph_block",
		1,
		model_animation_graph_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_animation_runtime_data_struct_block,
		"model_animation_runtime_data_struct",
		"model_animation_runtime_data_struct_block",
		1,
		model_animation_runtime_data_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_group_block,
		"model",
		"model_block",
		1,
		model_group_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_material_block,
		"material",
		"model_material_block",
		32,
		model_material_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_node_block,
		"model_node_block",
		"model_node_block",
		255,
		model_node_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_object_data_block,
		"model_object_data_block",
		"model_object_data_block",
		1,
		model_object_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_permutation_block,
		"model_permutation_block",
		"model_permutation_block",
		32,
		model_permutation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_region_block,
		"model_region_block",
		"model_region_block",
		16,
		model_region_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_target_block,
		"model_target_block",
		"model_target_block",
		32,
		model_target_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_target_lock_on_data_struct_block,
		"model_target_lock_on_data_struct",
		"model_target_lock_on_data_struct_block",
		1,
		model_target_lock_on_data_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_variant_block,
		"variant",
		"model_variant_block",
		64,
		model_variant_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_variant_object_block,
		"object",
		"model_variant_object_block",
		16,
		model_variant_object_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_variant_permutation_block,
		"permutation",
		"model_variant_permutation_block",
		32,
		model_variant_permutation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_variant_region_block,
		"region",
		"model_variant_region_block",
		16,
		model_variant_region_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		model_variant_state_block,
		"model_variant_state_block",
		"model_variant_state_block",
		10,
		model_variant_state_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		mopps_block,
		"mopps_block",
		"mopps_block",
		64,
		mopps_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		mouse_cursor_bitmap_reference_block,
		"mouse_cursor_bitmap_reference_block",
		"mouse_cursor_bitmap_reference_block",
		4,
		mouse_cursor_bitmap_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		mouse_cursor_definition_group_block,
		"mouse_cursor_definition",
		"mouse_cursor_definition_block",
		1,
		mouse_cursor_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		move_positions_block,
		"move_positions_block",
		"move_positions_block",
		32,
		move_positions_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multi_spheres_block,
		"multi_spheres_block",
		"multi_spheres_block",
		1024,
		multi_spheres_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multilingual_unicode_string_list_group_block,
		"multilingual_unicode_string_list",
		"multilingual_unicode_string_list_block",
		1,
		multilingual_unicode_string_list_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multilingual_unicode_string_reference_block,
		"multilingual_unicode_string_reference_block",
		"multilingual_unicode_string_reference_block",
		9216,
		multilingual_unicode_string_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_color_block,
		"multiplayer_color_block",
		"multiplayer_color_block",
		32,
		multiplayer_color_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_color_block$2,
		"multiplayer_color_block",
		"multiplayer_color_block",
		32,
		multiplayer_color_block_struct_definition$2);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_constants_block,
		"multiplayer_constants_block",
		"multiplayer_constants_block",
		1,
		multiplayer_constants_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_globals_group_block,
		"multiplayer_globals",
		"multiplayer_globals_block",
		1,
		multiplayer_globals_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_information_block,
		"multiplayer_information_block",
		"multiplayer_information_block",
		1,
		multiplayer_information_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_runtime_block,
		"multiplayer_runtime_block",
		"multiplayer_runtime_block",
		1,
		multiplayer_runtime_global_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_scenario_description_group_block,
		"multiplayer_scenario_description",
		"multiplayer_scenario_description_block",
		1,
		multiplayer_scenario_description_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_ui_block,
		"multiplayer_ui_block",
		"multiplayer_ui_block",
		1,
		multiplayer_ui_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_universal_block,
		"multiplayer_universal_block",
		"multiplayer_universal_block",
		1,
		multiplayer_universal_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		multiplayer_variant_settings_interface_definition_group_block,
		"multiplayer_variant_settings_interface_definition",
		"multiplayer_variant_settings_interface_definition_block",
		1,
		multiplayer_variant_settings_interface_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		new_hud_dashlight_data_struct_block,
		"new_hud_dashlight_data_struct",
		"new_hud_dashlight_data_struct_block",
		1,
		new_hud_dashlight_data_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		new_hud_definition_group_block,
		"new_hud_definition",
		"new_hud_definition_block",
		1,
		new_hud_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		new_hud_sound_block,
		"new_hud_sound_block",
		"new_hud_sound_block",
		6,
		new_hud_sound_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		node_render_leaves_block,
		"node_render_leaves_block",
		"node_render_leaves_block",
		64,
		node_render_leaves_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		nodes_block,
		"nodes_block",
		"nodes_block",
		255,
		nodes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		null_block,
		"null_block",
		"null_block",
		0,
		null_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		object_ai_properties_block,
		"object_ai_properties_block",
		"object_ai_properties_block",
		1,
		object_ai_properties_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		object_animation_block,
		"object_animation_block",
		"object_animation_block",
		32,
		object_animation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		object_attachment_block,
		"object_attachment_block",
		"object_attachment_block",
		16,
		object_attachment_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		object_group_block,
		"object",
		"object_block",
		1,
		object_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		object_change_color_function_block,
		"object_change_color_function",
		"object_change_color_function",
		4,
		object_change_color_function_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		object_change_color_initial_permutation_block,
		"object_change_color_initial_permutation",
		"object_change_color_initial_permutation",
		32,
		object_change_color_initial_permutation_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		object_change_colors_block,
		"object_change_colors",
		"object_change_colors",
		4,
		object_change_colors_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		object_function_block,
		"object_function_block",
		"object_function_block",
		256,
		object_function_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		object_space_node_data_block,
		"object_space_node_data_block",
		"object_space_node_data_block",
		255,
		object_space_node_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		object_space_node_data_block_v0_block,
		"object_space_node_data_block_v0",
		"object_space_node_data_block_v0",
		255,
		object_space_node_data_block_v0_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		object_widget_block,
		"object_widget_block",
		"object_widget_block",
		4,
		object_widget_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		occluder_to_machine_door_mapping_block,
		"occluder_to_machine_door_mapping",
		"occluder_to_machine_door_mapping",
		128,
		occluder_to_machine_door_mapping_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		old_material_effect_material_block,
		"old_material_effect_material_block",
		"old_material_effect_material_block",
		33,
		old_material_effect_material_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		old_materials_block,
		"old_materials_block",
		"old_materials_block",
		33,
		old_materials_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		old_object_function_block,
		"old_object_function_block",
		"old_object_function_block",
		4,
		old_object_function_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		old_scenario_device_struct_block,
		"old_scenario_device_struct",
		"old_scenario_device_struct_block",
		1,
		old_scenario_device_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		old_scenario_unit_struct_block,
		"old_scenario_unit_struct",
		"old_scenario_unit_struct_block",
		1,
		old_scenario_unit_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		old_sound_permutation_info_block,
		"old_sound_permutation_info_block",
		"old_sound_permutation_info_block",
		32,
		old_sound_permutation_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		old_sound_permutations_block,
		"old_sound_permutations_block",
		"old_sound_permutations_block",
		1024,
		old_sound_permutations_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		old_sound_pitch_range_block,
		"old_sound_pitch_range_block",
		"old_sound_pitch_range_block",
		9,
		old_sound_pitch_range_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		old_unused_object_identifiers_block,
		"old_unused_object_identifiers_block",
		"old_unused_object_identifiers_block",
		2048,
		old_unused_object_identifiers_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		old_unused_strucure_physics_block,
		"old_unused_strucure_physics_block",
		"old_unused_strucure_physics_block",
		16,
		old_unused_strucure_physics_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		order_completion_block,
		"order_completion_block",
		"order_completion_block",
		5,
		order_completion_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		order_completion_condition_block,
		"order_completion_condition",
		"order_completion_condition",
		5,
		order_completion_condition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		order_ending_block,
		"order_ending_block",
		"order_ending_block",
		12,
		order_ending_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		orders_block,
		"orders_block",
		"orders_block",
		300,
		orders_v3_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		packed_data_sizes_struct_block,
		"packed_data_sizes_struct",
		"packed_data_sizes_struct_block",
		1,
		packed_data_sizes_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_group_block,
		"particle",
		"particle_block",
		1,
		particle_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_controller_block,
		"particle_controller",
		"particle_controller",
		4,
		particle_controller_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_controller_parameters_block,
		"particle_controller_parameters",
		"particle_controller_parameters",
		9,
		particle_controller_parameters_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_model_group_block,
		"particle_model",
		"particle_model_block",
		1,
		particle_model_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_model_indices_block,
		"particle_model_indices_block",
		"particle_model_indices_block",
		32768,
		particle_model_indices_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_model_vertices_block,
		"particle_model_vertices_block",
		"particle_model_vertices_block",
		32768,
		particle_model_vertices_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_models_block,
		"particle_models_block",
		"particle_models_block",
		256,
		particle_models_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_physics_group_block,
		"particle_physics",
		"particle_physics_block",
		1,
		particle_physics_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_property_color_struct_new_block,
		"particle_property_color_struct_new",
		"particle_property_color_struct_new_block",
		1,
		particle_property_color_struct_new_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_property_scalar_struct_new_block,
		"particle_property_scalar_struct_new",
		"particle_property_scalar_struct_new_block",
		1,
		particle_property_scalar_struct_new_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_system_definition_block_new_block,
		"particle_system_definition_block_new",
		"particle_system_definition_block_new",
		32,
		particle_system_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_system_emitter_definition_block,
		"particle_system_emitter_definition_block",
		"particle_system_emitter_definition_block",
		8,
		particle_system_emitter_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particle_system_lite_data_block,
		"particle_system_lite_data_block",
		"particle_system_lite_data_block",
		1,
		particle_system_lite_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particles_render_data_block,
		"particles_render_data_block",
		"particles_render_data_block",
		4096,
		particles_render_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		particles_update_data_block,
		"particles_update_data_block",
		"particles_update_data_block",
		4096,
		particles_update_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		patchy_fog_group_block,
		"patchy_fog",
		"patchy_fog_block",
		1,
		patchy_fog_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pathfinding_data_block,
		"pathfinding_data_block",
		"pathfinding_data_block",
		16,
		pathfinding_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pathfinding_hints_block,
		"pathfinding_hints_block",
		"pathfinding_hints_block",
		32767,
		hints_v2_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pathfinding_object_index_list_block,
		"pathfinding_object_index_list_block",
		"pathfinding_object_index_list_block",
		16,
		pathfinding_object_index_list_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		permutations_block,
		"permutations_block",
		"permutations_block",
		32,
		permutations_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		persistent_background_animation_block,
		"persistent_background_animation_block",
		"persistent_background_animation_block",
		100,
		persistent_background_animation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		phantom_types_block,
		"phantom_types_block",
		"phantom_types_block",
		16,
		phantom_type_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		phantoms_block,
		"phantoms_block",
		"phantoms_block",
		1024,
		phantoms_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		physics_group_block,
		"physics",
		"physics_block",
		1,
		physics_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		physics_model_group_block,
		"physics_model",
		"physics_model_block",
		1,
		physics_model_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		physics_model_constraint_edge_constraint_block,
		"physics_model_constraint_edge_constraint_block",
		"physics_model_constraint_edge_constraint_block",
		64,
		physics_model_constraint_edge_constraint_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		physics_model_node_constraint_edge_block,
		"physics_model_node_constraint_edge_block",
		"physics_model_node_constraint_edge_block",
		4096,
		physics_model_node_constraint_edge_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pills_block,
		"pills_block",
		"pills_block",
		1024,
		pills_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pixel32_block,
		"pixel32_block",
		"pixel32_block",
		1024,
		pixel32_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pixel_shader_group_block,
		"pixel_shader",
		"pixel_shader_block",
		1,
		pixel_shader_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pixel_shader_combiner_block,
		"pixel_shader_combiner_block",
		"pixel_shader_combiner_block",
		1024,
		pixel_shader_combiner_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pixel_shader_constant_block,
		"pixel_shader_constant_block",
		"pixel_shader_constant_block",
		1024,
		pixel_shader_constant_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pixel_shader_extern_map_block,
		"pixel_shader_extern_map_block",
		"pixel_shader_extern_map_block",
		6,
		pixel_shader_extern_map_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pixel_shader_fragment_block,
		"pixel_shader_fragment_block",
		"pixel_shader_fragment_block",
		1024,
		pixel_shader_fragment_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pixel_shader_index_block,
		"pixel_shader_index_block",
		"pixel_shader_index_block",
		100,
		pixel_shader_index_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pixel_shader_permutation_block,
		"pixel_shader_permutation_block",
		"pixel_shader_permutation_block",
		1024,
		pixel_shader_permutation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		pixel_shader_permutation_new_block,
		"pixel_shader_permutation_new_block",
		"pixel_shader_permutation_new_block",
		1024,
		pixel_shader_permutation_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		planar_fog_group_block,
		"planar_fog",
		"planar_fog_block",
		1,
		planar_fog_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		planar_fog_patchy_fog_block,
		"planar_fog_patchy_fog_block",
		"planar_fog_patchy_fog_block",
		1,
		planar_fog_patchy_fog_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		planes_block,
		"planes_block",
		"planes_block",
		65536,
		planes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_effect_block,
		"platform_sound_effect_block",
		"platform_sound_effect_block",
		8,
		platform_sound_effect_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_effect_collection_block,
		"platform_sound_effect_collection_block",
		"platform_sound_effect_collection_block",
		1,
		platform_sound_effect_collection_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_effect_constant_block,
		"platform_sound_effect_constant_block",
		"platform_sound_effect_constant_block",
		16,
		platform_sound_effect_constant_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_effect_function_block,
		"platform_sound_effect_function_block",
		"platform_sound_effect_function_block",
		16,
		platform_sound_effect_function_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_effect_override_descriptor_block,
		"platform_sound_effect_override_descriptor_block",
		"platform_sound_effect_override_descriptor_block",
		16,
		platform_sound_effect_override_descriptor_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_effect_template_block,
		"platform_sound_effect_template_block",
		"platform_sound_effect_template_block",
		8,
		platform_sound_effect_template_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_effect_template_collection_block,
		"platform_sound_effect_template_collection_block",
		"platform_sound_effect_template_collection_block",
		1,
		platform_sound_effect_template_collection_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_effect_template_component_block,
		"platform_sound_effect_template_component_block",
		"platform_sound_effect_template_component_block",
		16,
		platform_sound_effect_template_component_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_filter_block,
		"platform_sound_filter_block",
		"platform_sound_filter_block",
		1,
		platform_sound_filter_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_filter_lfo_block,
		"platform_sound_filter_lfo_block",
		"platform_sound_filter_lfo_block",
		1,
		platform_sound_filter_lfo_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_override_mixbins_block,
		"platform_sound_override_mixbins_block",
		"platform_sound_override_mixbins_block",
		8,
		platform_sound_override_mixbins_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_pitch_lfo_block,
		"platform_sound_pitch_lfo_block",
		"platform_sound_pitch_lfo_block",
		1,
		platform_sound_pitch_lfo_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_playback_block,
		"platform_sound_playback_block",
		"platform_sound_playback_block",
		128,
		platform_sound_playback_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		platform_sound_playback_struct_block,
		"platform_sound_playback_struct",
		"platform_sound_playback_struct_block",
		1,
		platform_sound_playback_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		player_block_reference_block,
		"player_block_reference_block",
		"player_block_reference_block",
		64,
		player_block_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		player_control_block,
		"player_control_block",
		"player_control_block",
		1,
		player_control_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		player_information_block,
		"player_information_block",
		"player_information_block",
		1,
		player_information_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		player_representation_block,
		"player_representation_block",
		"player_representation_block",
		4,
		player_representation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		player_training_entry_data_block,
		"player_training_entry_data_block",
		"player_training_entry_data_block",
		32,
		player_training_entry_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		point_block_reference_block,
		"point_block_reference_block",
		"point_block_reference_block",
		16,
		point_block_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		point_physics_group_block,
		"point_physics",
		"point_physics_block",
		1,
		point_physics_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		point_to_path_curve_block,
		"point_to_path_curve_block",
		"point_to_path_curve_block",
		64,
		point_to_path_curve_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		point_to_path_curve_point_block,
		"point_to_path_curve_point_block",
		"point_to_path_curve_point_block",
		1024,
		point_to_path_curve_point_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		polyhedra_block,
		"polyhedra_block",
		"polyhedra_block",
		1024,
		polyhedra_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		polyhedron_four_vectors_block,
		"polyhedron_four_vectors_block",
		"polyhedron_four_vectors_block",
		4096,
		polyhedron_four_vectors_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		polyhedron_plane_equations_block,
		"polyhedron_plane_equations_block",
		"polyhedron_plane_equations_block",
		1024,
		polyhedron_plane_equations_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		powered_mass_point_block,
		"powered_mass_point_block",
		"powered_mass_point_block",
		32,
		powered_mass_point_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		powered_seat_block,
		"powered_seat_block",
		"powered_seat_block",
		2,
		powered_seat_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		powerup_block,
		"powerup_block",
		"powerup_block",
		20,
		powerup_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		precache_list_block,
		"precache_list_block",
		"precache_list_block",
		1024,
		precache_list_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		predicted_bitmaps_block,
		"predicted_bitmaps_block",
		"predicted_bitmaps_block",
		8,
		predicted_bitmaps_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		predicted_resource_block,
		"predicted_resource_block",
		"predicted_resource_block",
		2048,
		predicted_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		primary_light_struct_block,
		"primary_light_struct",
		"primary_light_struct_block",
		1,
		primary_light_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		prismatic_constraints_block,
		"prismatic_constraints_block",
		"prismatic_constraints_block",
		64,
		prismatic_constraints_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		projectile_group_block,
		"projectile",
		"projectile_block",
		1,
		projectile_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		projectile_material_response_block,
		"projectile_material_response_block",
		"projectile_material_response_block",
		200,
		projectile_material_response_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		prt_cluster_basis_block,
		"cluster basis",
		"prt_cluster_basis_block",
		34560,
		prt_cluster_basis_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		prt_info_block,
		"prt_info_block",
		"prt_info_block",
		1,
		prt_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		prt_lod_info_block,
		"prt lod info",
		"prt_lod_info_block",
		6,
		prt_lod_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		prt_raw_pca_data_block,
		"raw pca data",
		"prt_raw_pca_data_block",
		150405120,
		prt_raw_pca_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		prt_section_info_block,
		"prt section info",
		"prt_section_info_block",
		255,
		prt_section_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		prt_vertex_buffers_block,
		"vertex buffers",
		"prt_vertex_buffers_block",
		255,
		prt_vertex_buffers_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		quantized_orientation_struct_block,
		"quantized_orientation_struct",
		"quantized_orientation_struct_block",
		1,
		quantized_orientation_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ragdoll_constraints_block,
		"ragdoll_constraints_block",
		"ragdoll_constraints_block",
		64,
		ragdoll_constraints_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		rasterizer_data_block,
		"rasterizer_data_block",
		"rasterizer_data_block",
		1,
		rasterizer_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		rasterizer_screen_effect_convolution_block,
		"convolution",
		"rasterizer_screen_effect_convolution_block",
		2,
		rasterizer_screen_effect_convolution_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		rasterizer_screen_effect_pass_reference_block,
		"pass reference",
		"rasterizer_screen_effect_pass_reference_block",
		8,
		rasterizer_screen_effect_pass_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		rasterizer_screen_effect_texcoord_generation_advanced_control_block,
		"advanced control",
		"rasterizer_screen_effect_texcoord_generation_advanced_control_block",
		1,
		rasterizer_screen_effect_texcoord_generation_advanced_control_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		real_block,
		"real_block",
		"real_block",
		64,
		real_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		real_vector4d_block,
		"real_vector4d_block",
		"real_vector4d_block",
		1024,
		real_vector4d_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		recorded_animation_block,
		"recorded_animation_block",
		"recorded_animation_block",
		1024,
		recorded_animation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ref_block,
		"ref_block",
		"ref_block",
		131072,
		ref_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		regions_block,
		"regions_block",
		"regions_block",
		16,
		regions_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_lighting_struct_block,
		"render_lighting_struct",
		"render_lighting_struct_block",
		1,
		render_lighting_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_backward_shared_edge_block,
		"backward shared edge",
		"render_model_backward_shared_edge_block",
		16384,
		render_model_backward_shared_edge_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_group_block,
		"render_model",
		"render_model_block",
		1,
		render_model_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_compound_node_block,
		"compound node",
		"render_model_compound_node_block",
		255,
		render_model_compound_node_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_dsq_raw_vertex_block,
		"vertex",
		"render_model_dsq_raw_vertex_block",
		65536,
		render_model_dsq_raw_vertex_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_dsq_silhouette_quad_block,
		"quad",
		"render_model_dsq_silhouette_quad_block",
		65536,
		render_model_dsq_silhouette_quad_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_dsq_strip_index_block,
		"index",
		"render_model_dsq_strip_index_block",
		262144,
		render_model_dsq_strip_index_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_forward_shared_edge_block,
		"forward shared edge",
		"render_model_forward_shared_edge_block",
		16384,
		render_model_forward_shared_edge_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_invalid_section_pairs_block,
		"bitvector",
		"render_model_invalid_section_pairs_block",
		1013,
		render_model_invalid_section_pairs_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_marker_block,
		"marker",
		"render_model_marker_block",
		256,
		render_model_marker_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_marker_group_block,
		"marker group",
		"render_model_marker_group_block",
		4096,
		render_model_marker_group_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_node_block,
		"node",
		"render_model_node_block",
		255,
		render_model_node_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_node_map_block,
		"index",
		"render_model_node_map_block",
		40,
		render_model_node_map_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_node_map_block_old_block,
		"index",
		"render_model_node_map_block_OLD",
		640,
		render_model_node_map_block_old_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_permutation_block,
		"permutation",
		"render_model_permutation_block",
		32,
		render_model_permutation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_region_block,
		"region",
		"render_model_region_block",
		16,
		render_model_region_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_section_block,
		"render_model_section_block",
		"render_model_section_block",
		255,
		render_model_section_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_section_data_block,
		"render_model_section_data_block",
		"render_model_section_data_block",
		1,
		render_model_section_data_tag_field_new_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_section_group_block,
		"section group",
		"render_model_section_group_block",
		6,
		render_model_section_group_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_model_shared_edge_group_block,
		"shared edge group",
		"render_model_shared_edge_group_block",
		512,
		render_model_shared_edge_group_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_state_block,
		"render_state_block",
		"render_state_block",
		1024,
		render_state_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		render_state_parameter_block,
		"render_state_parameter_block",
		"render_state_parameter_block",
		1024,
		render_state_parameter_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		response_block,
		"response_block",
		"response_block",
		20,
		response_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		rigid_bodies_block,
		"rigid_bodies_block",
		"rigid_bodies_block",
		64,
		rigid_bodies_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		rigid_body_indices_block,
		"rigid_body_indices_block",
		"rigid_body_indices_block",
		64,
		rigid_body_indices_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		rules_block,
		"rules_block",
		"rules_block",
		16,
		rules_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		runtime_campaign_level_block,
		"runtime_campaign_level_block",
		"runtime_campaign_level_block",
		20,
		runtime_campaign_level_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		runtime_levels_definition_block,
		"runtime_levels_definition_block",
		"runtime_levels_definition_block",
		1,
		runtime_levels_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		s_text_value_pair_blocks_block_unused_block,
		"s_text_value_pair_blocks_block_UNUSED",
		"s_text_value_pair_blocks_block_UNUSED",
		100,
		s_text_value_pair_blocks_block_unused_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		s_text_value_pair_reference_block_unused_block,
		"s_text_value_pair_reference_block_UNUSED",
		"s_text_value_pair_reference_block_UNUSED",
		100,
		s_text_value_pair_reference_block_unused_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scalar_function_struct_block,
		"scalar_function_struct",
		"scalar_function_struct_block",
		1,
		scalar_function_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_ai_resource_group_block,
		"scenario_ai_resource",
		"scenario_ai_resource_block",
		1,
		scenario_ai_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_ai_resource_reference_block,
		"scenario_ai_resource_reference_block",
		"scenario_ai_resource_reference_block",
		2,
		scenario_ai_resource_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_atmospheric_fog_mixer_block,
		"mixers",
		"scenario_atmospheric_fog_mixer_block",
		2,
		scenario_atmospheric_fog_mixer_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_atmospheric_fog_palette_block,
		"scenario_atmospheric_fog_palette",
		"scenario_atmospheric_fog_palette",
		127,
		scenario_atmospheric_fog_palette_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_biped_block,
		"scenario_biped_block",
		"scenario_biped_block",
		128,
		scenario_biped_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_biped_palette_block,
		"scenario_biped_palette_block",
		"scenario_biped_palette_block",
		256,
		scenario_biped_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_bipeds_resource_group_block,
		"scenario_bipeds_resource",
		"scenario_bipeds_resource_block",
		1,
		scenario_bipeds_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_group_block,
		"scenario",
		"scenario_block",
		1,
		scenario_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_bsp_switch_transition_volume_block,
		"scenario_bsp_switch_transition_volume_block",
		"scenario_bsp_switch_transition_volume_block",
		256,
		scenario_bsp_switch_transition_volume_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_bsp_switch_trigger_volume_block,
		"scenario_bsp_switch_trigger_volume_block",
		"scenario_bsp_switch_trigger_volume_block",
		256,
		scenario_bsp_switch_trigger_volume_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_child_scenario_block,
		"scenario_child_scenario_block",
		"scenario_child_scenario_block",
		16,
		scenario_child_scenario_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cinematics_resource_group_block,
		"scenario_cinematics_resource",
		"scenario_cinematics_resource_block",
		1,
		scenario_cinematics_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cluster_atmospheric_fog_properties_block,
		"scenario_cluster_atmospheric_fog_properties_block",
		"scenario_cluster_atmospheric_fog_properties_block",
		512,
		scenario_cluster_atmospheric_fog_properties_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cluster_background_sounds_block,
		"scenario_cluster_background_sounds_block",
		"scenario_cluster_background_sounds_block",
		512,
		scenario_cluster_background_sounds_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cluster_data_block,
		"scenario_cluster_data_block",
		"scenario_cluster_data_block",
		16,
		scenario_cluster_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cluster_data_resource_group_block,
		"scenario_cluster_data_resource",
		"scenario_cluster_data_resource_block",
		1,
		scenario_cluster_data_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cluster_points_block,
		"scenario_cluster_points_block",
		"scenario_cluster_points_block",
		512,
		scenario_cluster_points_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cluster_sound_environments_block,
		"scenario_cluster_sound_environments_block",
		"scenario_cluster_sound_environments_block",
		512,
		scenario_cluster_sound_environments_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cluster_weather_properties_block,
		"scenario_cluster_weather_properties_block",
		"scenario_cluster_weather_properties_block",
		512,
		scenario_cluster_weather_properties_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_comments_resource_group_block,
		"scenario_comments_resource",
		"scenario_comments_resource_block",
		1,
		scenario_comments_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_control_block,
		"scenario_control_block",
		"scenario_control_block",
		100,
		scenario_control_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_control_palette_block,
		"scenario_control_palette_block",
		"scenario_control_palette_block",
		256,
		scenario_control_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_control_struct_block,
		"scenario_control_struct",
		"scenario_control_struct_block",
		1,
		scenario_control_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_crate_block,
		"scenario_crate_block",
		"scenario_crate_block",
		1024,
		scenario_crate_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_crate_palette_block,
		"scenario_crate_palette_block",
		"scenario_crate_palette_block",
		256,
		scenario_crate_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_creature_block,
		"scenario_creature_block",
		"scenario_creature_block",
		128,
		scenario_creature_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_creature_palette_block,
		"scenario_creature_palette_block",
		"scenario_creature_palette_block",
		256,
		scenario_creature_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_creature_resource_group_block,
		"scenario_creature_resource",
		"scenario_creature_resource_block",
		1,
		scenario_creature_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cutscene_camera_point_block,
		"scenario_cutscene_camera_point_block",
		"scenario_cutscene_camera_point_block",
		512,
		scenario_cutscene_camera_point_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cutscene_flag_block,
		"scenario_cutscene_flag_block",
		"scenario_cutscene_flag_block",
		512,
		scenario_cutscene_flag_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_cutscene_title_block,
		"scenario_cutscene_title_block",
		"scenario_cutscene_title_block",
		128,
		scenario_cutscene_title_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_decal_palette_block,
		"scenario_decal_palette_block",
		"scenario_decal_palette_block",
		128,
		scenario_decal_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_decals_block,
		"scenario_decals_block",
		"scenario_decals_block",
		65536,
		scenario_decals_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_decals_resource_group_block,
		"scenario_decals_resource",
		"scenario_decals_resource_block",
		1,
		scenario_decals_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_decorator_set_palette_entry_block,
		"scenario_decorator_set_palette_entry_block",
		"scenario_decorator_set_palette_entry_block",
		32,
		scenario_decorator_set_palette_entry_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_decorators_resource_group_block,
		"scenario_decorators_resource",
		"scenario_decorators_resource_block",
		1,
		scenario_decorators_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_description_block,
		"scenario_description_block",
		"scenario_description_block",
		32,
		scenario_description_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_detail_object_collection_palette_block,
		"scenario_detail_object_collection_palette_block",
		"scenario_detail_object_collection_palette_block",
		32,
		scenario_detail_object_collection_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_device_struct_block,
		"scenario_device_struct",
		"scenario_device_struct_block",
		1,
		scenario_device_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_devices_resource_group_block,
		"scenario_devices_resource",
		"scenario_devices_resource_block",
		1,
		scenario_devices_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_equipment_block,
		"scenario_equipment_block",
		"scenario_equipment_block",
		256,
		scenario_equipment_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_equipment_datum_struct_block,
		"scenario_equipment_datum_struct",
		"scenario_equipment_datum_struct_block",
		1,
		scenario_equipment_datum_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_equipment_palette_block,
		"scenario_equipment_palette_block",
		"scenario_equipment_palette_block",
		256,
		scenario_equipment_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_equipment_resource_group_block,
		"scenario_equipment_resource",
		"scenario_equipment_resource_block",
		1,
		scenario_equipment_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_function_block,
		"scenario_function_block",
		"scenario_function_block",
		32,
		scenario_function_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_hs_source_reference_block,
		"scenario_hs_source_reference_block",
		"scenario_hs_source_reference_block",
		16,
		scenario_hs_source_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_interpolator_block,
		"interpolators",
		"scenario_interpolator_block",
		16,
		scenario_interpolator_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_kill_trigger_volumes_block,
		"scenario_kill_trigger_volumes_block",
		"scenario_kill_trigger_volumes_block",
		256,
		scenario_kill_trigger_volumes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_level_data_block,
		"scenario_level_data_block",
		"scenario_level_data_block",
		1,
		scenario_level_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_light_block,
		"scenario_light_block",
		"scenario_light_block",
		500,
		scenario_light_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_light_fixture_block,
		"scenario_light_fixture_block",
		"scenario_light_fixture_block",
		500,
		scenario_light_fixture_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_light_fixture_palette_block,
		"scenario_light_fixture_palette_block",
		"scenario_light_fixture_palette_block",
		256,
		scenario_light_fixture_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_light_fixture_struct_block,
		"scenario_light_fixture_struct",
		"scenario_light_fixture_struct_block",
		1,
		scenario_light_fixture_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_light_palette_block,
		"scenario_light_palette_block",
		"scenario_light_palette_block",
		256,
		scenario_light_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_light_struct_block,
		"scenario_light_struct",
		"scenario_light_struct_block",
		1,
		scenario_light_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_lights_resource_group_block,
		"scenario_lights_resource",
		"scenario_lights_resource_block",
		1,
		scenario_lights_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_machine_block,
		"scenario_machine_block",
		"scenario_machine_block",
		400,
		scenario_machine_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_machine_palette_block,
		"scenario_machine_palette_block",
		"scenario_machine_palette_block",
		256,
		scenario_machine_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_machine_struct_v2_block,
		"scenario_machine_struct_v2",
		"scenario_machine_struct_v2_block",
		1,
		scenario_machine_struct_v2_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_machine_struct_v3_block,
		"scenario_machine_struct_v3",
		"scenario_machine_struct_v3_block",
		1,
		scenario_machine_struct_v3_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_netgame_equipment_block,
		"scenario_netgame_equipment_block",
		"scenario_netgame_equipment_block",
		100,
		scenario_netgame_equipment_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_netgame_equipment_orientation_struct_block,
		"scenario_netgame_equipment_orientation_struct",
		"scenario_netgame_equipment_orientation_struct_block",
		1,
		scenario_netgame_equipment_orientation_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_netpoints_block,
		"scenario_netpoints_block",
		"scenario_netpoints_block",
		200,
		scenario_netpoint_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_object_datum_struct_block,
		"scenario_object_datum_struct",
		"scenario_object_datum_struct_block",
		1,
		g_new_scenario_object_datum_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_object_id_struct_block,
		"scenario_object_id_struct",
		"scenario_object_id_struct_block",
		1,
		scenario_object_id_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_object_names_block,
		"scenario_object_names_block",
		"scenario_object_names_block",
		640,
		scenario_object_names_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_object_permutation_struct_block,
		"scenario_object_permutation_struct",
		"scenario_object_permutation_struct_block",
		1,
		scenario_object_permutation_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_planar_fog_palette_block,
		"scenario_planar_fog_palette",
		"scenario_planar_fog_palette",
		127,
		scenario_planar_fog_palette_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_players_block,
		"scenario_players_block",
		"scenario_players_block",
		256,
		scenario_players_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_profiles_block,
		"scenario_profiles_block",
		"scenario_profiles_block",
		256,
		scenario_profiles_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_resource_reference_block,
		"scenario_resource_reference_block",
		"scenario_resource_reference_block",
		16,
		scenario_resource_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_resources_block,
		"scenario_resources_block",
		"scenario_resources_block",
		1,
		scenario_resources_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_scenery_block,
		"scenario_scenery_block",
		"scenario_scenery_block",
		2000,
		scenario_scenery_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_scenery_datum_struct_v2_block,
		"scenario_scenery_datum_struct_v2",
		"scenario_scenery_datum_struct_v2_block",
		1,
		scenario_scenery_datum_struct_v2_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_scenery_datum_struct_v3_block,
		"scenario_scenery_datum_struct_v3",
		"scenario_scenery_datum_struct_v3_block",
		1,
		scenario_scenery_datum_struct_v3_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_scenery_datum_struct_v4_block,
		"scenario_scenery_datum_struct_v4",
		"scenario_scenery_datum_struct_v4_block",
		1,
		scenario_scenery_datum_struct_v4_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_scenery_palette_block,
		"scenario_scenery_palette_block",
		"scenario_scenery_palette_block",
		256,
		scenario_scenery_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_scenery_resource_group_block,
		"scenario_scenery_resource",
		"scenario_scenery_resource_block",
		1,
		scenario_scenery_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_screen_effect_reference_block,
		"screen effect reference",
		"scenario_screen_effect_reference_block",
		16,
		scenario_screen_effect_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_simulation_definition_table_block,
		"simulation definition table element",
		"scenario_simulation_definition_table_block",
		512,
		scenario_simulation_definition_table_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_sky_reference_block,
		"scenario_sky_reference_block",
		"scenario_sky_reference_block",
		32,
		scenario_sky_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_sound_scenery_block,
		"scenario_sound_scenery_block",
		"scenario_sound_scenery_block",
		256,
		scenario_sound_scenery_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_sound_scenery_palette_block,
		"scenario_sound_scenery_palette_block",
		"scenario_sound_scenery_palette_block",
		256,
		scenario_sound_scenery_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_sound_scenery_resource_group_block,
		"scenario_sound_scenery_resource",
		"scenario_sound_scenery_resource_block",
		1,
		scenario_sound_scenery_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_spawn_data_block,
		"scenario_spawn_data_block",
		"scenario_spawn_data_block",
		1,
		scenario_spawn_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_spherical_harmonic_lighting_point_block,
		"scenario_spherical_harmonic_lighting_point",
		"scenario_spherical_harmonic_lighting_point",
		32768,
		scenario_spherical_harmonic_lighting_point_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_starting_equipment_block,
		"scenario_starting_equipment_block",
		"scenario_starting_equipment_block",
		200,
		scenario_starting_equipment_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_structure_bsp_group_block,
		"scenario_structure_bsp",
		"scenario_structure_bsp_block",
		1,
		scenario_structure_bsp_fieldset_old_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_structure_bsp_reference_block,
		"scenario_structure_bsp_reference_block",
		"scenario_structure_bsp_reference_block",
		16,
		scenario_structure_bsp_reference_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_structure_bsp_spherical_harmonic_lighting_block,
		"scenario_structure_bsp_spherical_harmonic_lighting_block",
		"scenario_structure_bsp_spherical_harmonic_lighting_block",
		16,
		scenario_structure_bsp_spherical_harmonic_lighting_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_structure_lighting_resource_group_block,
		"scenario_structure_lighting_resource",
		"scenario_structure_lighting_resource_block",
		1,
		scenario_structure_lighting_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_structure_lightmap_group_block,
		"scenario_structure_lightmap",
		"scenario_structure_lightmap_block",
		1,
		scenario_structure_lightmap_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_trigger_volume_block,
		"scenario_trigger_volume_block",
		"scenario_trigger_volume_block",
		256,
		scenario_trigger_volume_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_trigger_volumes_resource_group_block,
		"scenario_trigger_volumes_resource",
		"scenario_trigger_volumes_resource_block",
		1,
		scenario_trigger_volumes_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_unit_struct_block,
		"scenario_unit_struct",
		"scenario_unit_struct_block",
		1,
		scenario_unit_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_vehicle_block,
		"scenario_vehicle_block",
		"scenario_vehicle_block",
		256,
		scenario_vehicle_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_vehicle_palette_block,
		"scenario_vehicle_palette_block",
		"scenario_vehicle_palette_block",
		256,
		scenario_vehicle_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_vehicles_resource_group_block,
		"scenario_vehicles_resource",
		"scenario_vehicles_resource_block",
		1,
		scenario_vehicles_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_weapon_block,
		"scenario_weapon_block",
		"scenario_weapon_block",
		128,
		scenario_weapon_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_weapon_datum_struct_block,
		"scenario_weapon_datum_struct",
		"scenario_weapon_datum_struct_block",
		1,
		scenario_weapon_datum_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_weapon_palette_block,
		"scenario_weapon_palette_block",
		"scenario_weapon_palette_block",
		256,
		scenario_weapon_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenario_weapons_resource_group_block,
		"scenario_weapons_resource",
		"scenario_weapons_resource_block",
		1,
		scenario_weapons_resource_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		scenery_group_block,
		"scenery",
		"scenery_block",
		1,
		scenery_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		screen_animation_keyframe_reference_block,
		"screen_animation_keyframe_reference_block",
		"screen_animation_keyframe_reference_block",
		64,
		screen_animation_keyframe_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		screen_effect_group_block,
		"screen_effect",
		"screen_effect_block",
		1,
		screen_effect_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		screen_effect_bonus_struct_block,
		"screen_effect_bonus_struct",
		"screen_effect_bonus_struct_block",
		1,
		screen_effect_bonus_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		screen_flash_definition_struct_block,
		"screen_flash_definition_struct",
		"screen_flash_definition_struct_block",
		1,
		screen_flash_definition_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		secondary_light_struct_block,
		"secondary_light_struct",
		"secondary_light_struct_block",
		1,
		secondary_light_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		secondary_set_trigger_block,
		"secondary_set_trigger_block",
		"secondary_set_trigger_block",
		1,
		secondary_set_trigger_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		secondary_zone_set_block,
		"secondary_zone_set_block",
		"secondary_zone_set_block",
		32,
		zone_set_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		section_render_leaves_block,
		"section_render_leaves_block",
		"section_render_leaves_block",
		255,
		section_render_leaves_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sector_block,
		"sector_block",
		"sector_block",
		65534,
		sectors_v3_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sector_bsp2d_nodes_block,
		"sector_bsp2d_nodes_block",
		"sector_bsp2d_nodes_block",
		131072,
		sector_bsp2d_nodes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sector_link_block,
		"sector_link_block",
		"sector_link_block",
		262144,
		links_v2_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sector_vertex_block,
		"sector_vertex_block",
		"sector_vertex_block",
		65535,
		sector_vertex_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_animation_property_block,
		"animation property",
		"shader_animation_property_block",
		14,
		shader_animation_property_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_group_block,
		"shader",
		"shader_block",
		1,
		shader_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_gpu_state_reference_struct_block,
		"shader_gpu_state_reference_struct",
		"shader_gpu_state_reference_struct_block",
		1,
		shader_gpu_state_reference_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_gpu_state_struct_block,
		"shader_gpu_state_struct",
		"shader_gpu_state_struct_block",
		1,
		shader_gpu_state_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_light_response_group_block,
		"shader_light_response",
		"shader_light_response_block",
		1,
		shader_light_response_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_pass_group_block,
		"shader_pass",
		"shader_pass_block",
		1,
		shader_pass_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_pass_implementation_block,
		"implementation",
		"shader_pass_implementation_block",
		32,
		shader_pass_implementation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_pass_parameter_block,
		"parameter",
		"shader_pass_parameter_block",
		64,
		shader_pass_parameter_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_pass_postprocess_constant_info_new_block,
		"shader_pass_postprocess_constant_info_new_block",
		"shader_pass_postprocess_constant_info_new_block",
		1024,
		shader_pass_postprocess_constant_info_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_pass_postprocess_constant_new_block,
		"shader_pass_postprocess_constant_new_block",
		"shader_pass_postprocess_constant_new_block",
		1024,
		shader_pass_postprocess_constant_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_pass_postprocess_definition_new_block,
		"shader_pass_postprocess_definition_new_block",
		"shader_pass_postprocess_definition_new_block",
		3,
		shader_pass_postprocess_definition_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_pass_postprocess_extern_new_block,
		"shader_pass_postprocess_extern_new_block",
		"shader_pass_postprocess_extern_new_block",
		1024,
		shader_pass_postprocess_extern_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_pass_postprocess_implementation_block,
		"shader_pass_postprocess_implementation_block",
		"shader_pass_postprocess_implementation_block",
		1024,
		shader_pass_postprocess_implementation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_pass_postprocess_implementation_new_block,
		"shader_pass_postprocess_implementation_new_block",
		"shader_pass_postprocess_implementation_new_block",
		1024,
		shader_pass_postprocess_implementation_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_pass_postprocess_texture_new_block,
		"shader_pass_postprocess_texture_new_block",
		"shader_pass_postprocess_texture_new_block",
		1024,
		shader_pass_postprocess_texture_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_pass_postprocess_texture_state_block,
		"shader_pass_postprocess_texture_state_block",
		"shader_pass_postprocess_texture_state_block",
		1024,
		shader_pass_postprocess_texture_state_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_pass_texture_block,
		"texture stage",
		"shader_pass_texture_block",
		8,
		shader_pass_texture_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_pass_vertex_shader_constant_block,
		"vs constant",
		"shader_pass_vertex_shader_constant_block",
		32,
		shader_pass_vertex_shader_constant_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_animated_parameter_new_block,
		"shader_postprocess_animated_parameter_new_block",
		"shader_postprocess_animated_parameter_new_block",
		1024,
		shader_postprocess_animated_parameter_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_animated_parameter_reference_new_block,
		"shader_postprocess_animated_parameter_reference_new_block",
		"shader_postprocess_animated_parameter_reference_new_block",
		1024,
		shader_postprocess_animated_parameter_reference_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_bitmap_block,
		"shader_postprocess_bitmap_block",
		"shader_postprocess_bitmap_block",
		1024,
		shader_postprocess_bitmap_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_bitmap_new_block,
		"shader_postprocess_bitmap_new_block",
		"shader_postprocess_bitmap_new_block",
		1024,
		shader_postprocess_bitmap_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_bitmap_property_block,
		"shader_postprocess_bitmap_property_block",
		"shader_postprocess_bitmap_property_block",
		5,
		shader_postprocess_bitmap_property_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_bitmap_transform_block,
		"shader_postprocess_bitmap_transform_block",
		"shader_postprocess_bitmap_transform_block",
		1024,
		shader_postprocess_bitmap_transform_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_bitmap_transform_overlay_block,
		"shader_postprocess_bitmap_transform_overlay_block",
		"shader_postprocess_bitmap_transform_overlay_block",
		1024,
		shader_postprocess_bitmap_transform_overlay_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_color_block,
		"shader_postprocess_color_block",
		"shader_postprocess_color_block",
		1024,
		shader_postprocess_color_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_color_overlay_block,
		"shader_postprocess_color_overlay_block",
		"shader_postprocess_color_overlay_block",
		1024,
		shader_postprocess_color_overlay_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_color_property_block,
		"shader_postprocess_color_property_block",
		"shader_postprocess_color_property_block",
		2,
		shader_postprocess_color_property_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_definition_new_block,
		"shader_postprocess_definition_new_block",
		"shader_postprocess_definition_new_block",
		3,
		shader_postprocess_definition_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_implementation_block,
		"shader_postprocess_implementation_block",
		"shader_postprocess_implementation_block",
		1024,
		shader_postprocess_implementation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_implementation_new_block,
		"shader_postprocess_implementation_new_block",
		"shader_postprocess_implementation_new_block",
		1024,
		shader_postprocess_implementation_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_layer_block,
		"shader_postprocess_layer_block",
		"shader_postprocess_layer_block",
		25,
		shader_postprocess_layer_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_level_of_detail_block,
		"shader_postprocess_level_of_detail_block",
		"shader_postprocess_level_of_detail_block",
		1024,
		shader_postprocess_level_of_detail_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_level_of_detail_new_block,
		"shader_postprocess_level_of_detail_new_block",
		"shader_postprocess_level_of_detail_new_block",
		1024,
		shader_postprocess_level_of_detail_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_overlay_new_block,
		"shader_postprocess_overlay_new_block",
		"shader_postprocess_overlay_new_block",
		1024,
		shader_postprocess_overlay_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_overlay_reference_new_block,
		"shader_postprocess_overlay_reference_new_block",
		"shader_postprocess_overlay_reference_new_block",
		1024,
		shader_postprocess_overlay_reference_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_pass_block,
		"shader_postprocess_pass_block",
		"shader_postprocess_pass_block",
		1024,
		shader_postprocess_pass_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_pixel_shader_block,
		"shader_postprocess_pixel_shader",
		"shader_postprocess_pixel_shader",
		100,
		shader_postprocess_pixel_shader_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_pixel_shader_constant_defaults_block,
		"shader_postprocess_pixel_shader_constant_defaults",
		"shader_postprocess_pixel_shader_constant_defaults",
		32,
		shader_postprocess_pixel_shader_constant_defaults_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_value_block,
		"shader_postprocess_value_block",
		"shader_postprocess_value_block",
		1024,
		shader_postprocess_value_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_value_overlay_block,
		"shader_postprocess_value_overlay_block",
		"shader_postprocess_value_overlay_block",
		1024,
		shader_postprocess_value_overlay_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_value_property_block,
		"shader_postprocess_value_property_block",
		"shader_postprocess_value_property_block",
		6,
		shader_postprocess_value_property_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_postprocess_vertex_shader_constant_block,
		"shader_postprocess_vertex_shader_constant_block",
		"shader_postprocess_vertex_shader_constant_block",
		1024,
		shader_postprocess_vertex_shader_constant_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_properties_block,
		"runtime properties",
		"shader_properties_block",
		1,
		shader_properties_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_state_alpha_blend_state_block,
		"alpha-blend state",
		"shader_state_alpha_blend_state_block",
		1,
		shader_state_alpha_blend_state_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_state_alpha_test_state_block,
		"alpha-test state",
		"shader_state_alpha_test_state_block",
		1,
		shader_state_alpha_test_state_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_state_channels_state_block,
		"channels",
		"shader_state_channels_state_block",
		1,
		shader_state_channels_state_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_state_constant_block,
		"render state constant",
		"shader_state_constant_block",
		7,
		shader_state_constant_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_state_cull_state_block,
		"cull state",
		"shader_state_cull_state_block",
		1,
		shader_state_cull_state_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_state_depth_state_block,
		"depth state",
		"shader_state_depth_state_block",
		1,
		shader_state_depth_state_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_state_fill_state_block,
		"fill state",
		"shader_state_fill_state_block",
		1,
		shader_state_fill_state_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_state_misc_state_block,
		"misc state",
		"shader_state_misc_state_block",
		1,
		shader_state_misc_state_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_template_group_block,
		"shader_template",
		"shader_template_block",
		1,
		shader_template_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_template_category_block,
		"category",
		"shader_template_category_block",
		16,
		shader_template_category_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_template_level_of_detail_block,
		"shader_template_level_of_detail_block",
		"shader_template_level_of_detail_block",
		8,
		shader_template_level_of_detail_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_template_parameter_block,
		"parameter",
		"shader_template_parameter_block",
		64,
		shader_template_parameter_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_template_pass_reference_block,
		"pass",
		"shader_template_pass_reference_block",
		16,
		shader_template_pass_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_template_postprocess_definition_new_block,
		"shader_template_postprocess_definition_new_block",
		"shader_template_postprocess_definition_new_block",
		3,
		shader_template_postprocess_definition_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_template_postprocess_implementation_new_block,
		"shader_template_postprocess_implementation_new_block",
		"shader_template_postprocess_implementation_new_block",
		1024,
		shader_template_postprocess_implementation_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_template_postprocess_level_of_detail_new_block,
		"shader_template_postprocess_level_of_detail_new_block",
		"shader_template_postprocess_level_of_detail_new_block",
		1024,
		shader_template_postprocess_level_of_detail_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_template_postprocess_pass_new_block,
		"shader_template_postprocess_pass_new_block",
		"shader_template_postprocess_pass_new_block",
		1024,
		shader_template_postprocess_pass_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_template_postprocess_remapping_new_block,
		"shader_template_postprocess_remapping_new_block",
		"shader_template_postprocess_remapping_new_block",
		1024,
		shader_template_postprocess_remapping_new_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_template_property_block,
		"property",
		"shader_template_property_block",
		14,
		shader_template_property_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_template_runtime_external_light_response_index_block,
		"shader_template_runtime_external_light_response_index_block",
		"shader_template_runtime_external_light_response_index_block",
		65535,
		shader_template_runtime_external_light_response_index_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_texture_state_address_state_block,
		"address state",
		"shader_texture_state_address_state_block",
		1,
		shader_texture_state_address_state_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_texture_state_constant_block,
		"texture constant",
		"shader_texture_state_constant_block",
		10,
		shader_texture_state_constant_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_texture_state_filter_state_block,
		"filter state",
		"shader_texture_state_filter_state_block",
		1,
		shader_texture_state_filter_state_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_texture_state_kill_state_block,
		"kill state",
		"shader_texture_state_kill_state_block",
		1,
		shader_texture_state_kill_state_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shader_texture_state_misc_state_block,
		"misc state",
		"shader_texture_state_misc_state_block",
		1,
		shader_texture_state_misc_state_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shape_block_reference_block,
		"shape_block_reference_block",
		"shape_block_reference_block",
		32,
		shape_block_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		shape_group_reference_block,
		"shape_group_reference_block",
		"shape_group_reference_block",
		64,
		shape_group_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		simple_platform_sound_playback_struct_block,
		"simple_platform_sound_playback_struct",
		"simple_platform_sound_playback_struct_block",
		1,
		simple_platform_sound_playback_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		single_animation_reference_block,
		"single_animation_reference_block",
		"single_animation_reference_block",
		7,
		single_animation_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		skill_to_rank_mapping_block,
		"skill_to_rank_mapping_block",
		"skill_to_rank_mapping_block",
		65535,
		skill_to_rank_mapping_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sky_animation_block,
		"sky_animation_block",
		"sky_animation_block",
		8,
		sky_animation_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sky_atmospheric_fog_block,
		"sky_atmospheric_fog_block",
		"sky_atmospheric_fog_block",
		1,
		sky_atmospheric_fog_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sky_group_block,
		"sky",
		"sky_block",
		1,
		sky_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sky_cubemap_block,
		"sky_cubemap_block",
		"sky_cubemap_block",
		1,
		sky_cubemap_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sky_fog_block,
		"sky_fog_block",
		"sky_fog_block",
		1,
		sky_fog_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sky_light_block,
		"sky_light_block",
		"sky_light_block",
		8,
		sky_light_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sky_light_fog_block,
		"sky_light_fog_block",
		"sky_light_fog_block",
		1,
		sky_light_fog_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sky_patchy_fog_block,
		"sky_patchy_fog_block",
		"sky_patchy_fog_block",
		1,
		sky_patchy_fog_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sky_radiosity_light_block,
		"sky_radiosity_light_block",
		"sky_radiosity_light_block",
		1,
		sky_radiosity_light_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sky_shader_function_block,
		"sky_shader_function_block",
		"sky_shader_function_block",
		8,
		sky_shader_function_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		small_bsp3d_nodes_block,
		"small_bsp3d_nodes_block",
		"small_bsp3d_nodes_block",
		131072,
		small_bsp3d_nodes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_block,
		"sound_block",
		"sound_block",
		2,
		sound_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_group_block,
		"sound",
		"sound_block",
		1,
		sound_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_cache_file_gestalt_group_block,
		"sound_cache_file_gestalt",
		"sound_cache_file_gestalt_block",
		1,
		sound_cache_file_gestalt_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_class_block,
		"sound_class_block",
		"sound_class_block",
		54,
		sound_class_block_v4_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_class_ducker_block_definition_block,
		"sound_class_ducker_block_definition",
		"sound_class_ducker_block_definition",
		54,
		sound_class_ducker_block_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_classes_group_block,
		"sound_classes",
		"sound_classes_block",
		1,
		sound_class_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_definition_language_permutation_info_block,
		"sound_definition_language_permutation_info_block",
		"sound_definition_language_permutation_info_block",
		576,
		sound_permutation_language_info_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_dialogue_constants_group_block,
		"sound_dialogue_constants",
		"sound_dialogue_constants_block",
		1,
		sound_dialogue_constants_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_collection_group_block,
		"sound_effect_collection",
		"sound_effect_collection_block",
		1,
		sound_effect_collection_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_component_block,
		"sound_effect_component_block",
		"sound_effect_component_block",
		16,
		sound_effect_component_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_override_parameters_block,
		"sound_effect_override_parameters_block",
		"sound_effect_override_parameters_block",
		128,
		g_sound_effect_override_parameters_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_overrides_block,
		"sound_effect_overrides_block",
		"sound_effect_overrides_block",
		128,
		sound_effect_overrides_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_playback_block,
		"sound_effect_playback_block",
		"sound_effect_playback_block",
		1,
		sound_effect_playback_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_struct_definition_block,
		"sound_effect_struct_definition",
		"sound_effect_struct_definition_block",
		1,
		sound_effect_struct_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_template_additional_sound_input_block,
		"sound_effect_template_additional_sound_input_block",
		"sound_effect_template_additional_sound_input_block",
		1,
		sound_effect_template_additional_sound_input_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_template_group_block,
		"sound_effect_template",
		"sound_effect_template_block",
		1,
		g_sound_effect_template_collection_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_template_parameter_block,
		"sound_effect_template_parameter_block",
		"sound_effect_template_parameter_block",
		128,
		sound_effect_template_parameter_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_effect_templates_block,
		"sound_effect_templates_block",
		"sound_effect_templates_block",
		8,
		g_sound_effect_template_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_encoded_dialogue_section_block,
		"sound_encoded_dialogue_section_block",
		"sound_encoded_dialogue_section_block",
		1,
		sound_encoded_dialogue_section_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_environment_group_block,
		"sound_environment",
		"sound_environment_block",
		1,
		sound_environment_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_extra_info_block,
		"sound_extra_info_block",
		"sound_extra_info_block",
		1,
		sound_extra_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_codec_block,
		"sound_gestalt_codec_block",
		"sound_gestalt_codec_block",
		127,
		sound_gestalt_codec_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_custom_playback_block,
		"sound_gestalt_custom_playback_block",
		"sound_gestalt_custom_playback_block",
		32767,
		sound_gestalt_custom_playback_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_extra_info_block,
		"sound_gestalt_extra_info_block",
		"sound_gestalt_extra_info_block",
		32767,
		sound_gestalt_extra_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_import_names_block,
		"sound_gestalt_import_names_block",
		"sound_gestalt_import_names_block",
		32767,
		sound_gestalt_import_names_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_language_chunks_block,
		"sound_gestalt_language_chunks_block",
		"sound_gestalt_language_chunks_block",
		9,
		sound_gestalt_language_chunks_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_lowpass_block,
		"sound_gestalt_lowpass_block",
		"sound_gestalt_lowpass_block",
		128,
		sound_gestalt_lowpass_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_permutation_language_data_block,
		"sound_gestalt_permutation_language_data_block",
		"sound_gestalt_permutation_language_data_block",
		9,
		sound_gestalt_permutation_language_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_permutations_block,
		"sound_gestalt_permutations_block",
		"sound_gestalt_permutations_block",
		32767,
		sound_gestalt_permutations_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_pitch_range_parameters_block,
		"sound_gestalt_pitch_range_parameters_block",
		"sound_gestalt_pitch_range_parameters_block",
		32767,
		sound_gestalt_pitch_range_parameters_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_pitch_ranges_block,
		"sound_gestalt_pitch_ranges_block",
		"sound_gestalt_pitch_ranges_block",
		32767,
		sound_gestalt_pitch_ranges_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_playback_block,
		"sound_gestalt_playback_block",
		"sound_gestalt_playback_block",
		32767,
		sound_gestalt_playback_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_promotions_block,
		"sound_gestalt_promotions_block",
		"sound_gestalt_promotions_block",
		32767,
		sound_gestalt_promotions_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_reflections_block,
		"sound_gestalt_reflections_block",
		"sound_gestalt_reflections_block",
		32767,
		sound_gestalt_reflections_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_remastered_sound_references_block,
		"sound_gestalt_remastered_sound_references_block",
		"sound_gestalt_remastered_sound_references_block",
		32767,
		sound_gestalt_remastered_sound_references_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_runtime_permutation_bit_vector_block,
		"sound_gestalt_runtime_permutation_bit_vector_block",
		"sound_gestalt_runtime_permutation_bit_vector_block",
		32767,
		sound_gestalt_runtime_permutation_bit_vector_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_gestalt_scale_block,
		"sound_gestalt_scale_block",
		"sound_gestalt_scale_block",
		32767,
		sound_gestalt_scale_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_global_mix_struct_block,
		"sound_global_mix_struct",
		"sound_global_mix_struct_block",
		1,
		sound_global_mix_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_globals_block,
		"sound_globals_block",
		"sound_globals_block",
		1,
		sound_globals_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_looping_group_block,
		"sound_looping",
		"sound_looping_block",
		1,
		looping_sound_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_lowpass_struct_block,
		"sound_lowpass_struct",
		"sound_lowpass_struct_block",
		1,
		sound_lowpass_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_mix_group_block,
		"sound_mix",
		"sound_mix_block",
		1,
		sound_mix_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_permutation_chunk_block,
		"sound_permutation_chunk_block",
		"sound_permutation_chunk_block",
		32767,
		g_sound_permutation_chunk_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_permutation_dialogue_info_block,
		"sound_permutation_dialogue_info_block",
		"sound_permutation_dialogue_info_block",
		288,
		sound_permutation_dialogue_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_permutation_marker_block,
		"sound_permutation_marker_block",
		"sound_permutation_marker_block",
		65535,
		sound_permutation_marker_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_permutation_raw_info_block,
		"sound_permutation_raw_info_block",
		"sound_permutation_raw_info_block",
		18,
		sound_permutation_raw_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_permutation_raw_info_block_old_block,
		"sound_permutation_raw_info_block_old",
		"sound_permutation_raw_info_block_old",
		18,
		sound_permutation_raw_info_block_old_struct_definition$2);

	TAG_BLOCK_FROM_STRUCT(
		sound_permutations_block,
		"sound_permutations_block",
		"sound_permutations_block",
		32,
		sound_permutations_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_pitch_range_block,
		"sound_pitch_range_block",
		"sound_pitch_range_block",
		9,
		sound_pitch_range_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_platform_sound_playback_block,
		"sound_platform_sound_playback_block",
		"sound_platform_sound_playback_block",
		1,
		sound_platform_sound_playback_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_playback_parameter_definition_block,
		"sound_playback_parameter_definition",
		"sound_playback_parameter_definition_block",
		1,
		sound_playback_parameter_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_playback_parameters_struct_block,
		"sound_playback_parameters_struct",
		"sound_playback_parameters_struct_block",
		1,
		sound_playback_parameters_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_promotion_parameters_struct_block,
		"sound_promotion_parameters_struct",
		"sound_promotion_parameters_struct_block",
		1,
		sound_promotion_parameter_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_promotion_rule_block,
		"sound_promotion_rule_block",
		"sound_promotion_rule_block",
		9,
		sound_promotion_rule_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_promotion_runtime_timer_block,
		"sound_promotion_runtime_timer_block",
		"sound_promotion_runtime_timer_block",
		9,
		sound_promotion_runtime_timer_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_references_block,
		"sound_references_block",
		"sound_references_block",
		500,
		g_vocalization_sound_references_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_reflection_block,
		"sound_reflection_block",
		"sound_reflection_block",
		16,
		sound_reflection_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_reflection_parameters_struct_block,
		"sound_reflection_parameters_struct",
		"sound_reflection_parameters_struct_block",
		1,
		sound_reflection_parameters_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_response_definition_block,
		"sound_response_definition_block",
		"sound_response_definition_block",
		10,
		sound_response_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_response_extra_sounds_struct_block,
		"sound_response_extra_sounds_struct",
		"sound_response_extra_sounds_struct_block",
		1,
		sound_response_extra_sounds_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_scale_modifiers_struct_block,
		"sound_scale_modifiers_struct",
		"sound_scale_modifiers_struct_block",
		1,
		sound_scale_modifiers_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_scenery_group_block,
		"sound_scenery",
		"sound_scenery_block",
		1,
		sound_scenery_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sound_scenery_datum_struct_block,
		"sound_scenery_datum_struct",
		"sound_scenery_datum_struct_block",
		1,
		sound_scenery_datum_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sounds_block,
		"sounds_block",
		"sounds_block",
		60,
		sounds_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sounds_block$2,
		"sounds_block",
		"sounds_block",
		60,
		sounds_block_struct_definition$2);

	TAG_BLOCK_FROM_STRUCT(
		special_movement_block,
		"special_movement_block",
		"special_movement_block",
		1,
		special_movement_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		spheres_block,
		"spheres_block",
		"spheres_block",
		1024,
		spheres_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		sprite_vertices_block,
		"sprite_vertices_block",
		"sprite_vertices_block",
		65536,
		sprite_vertices_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		squad_groups_block,
		"squad_groups_block",
		"squad_groups_block",
		100,
		squad_groups_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		squads_block,
		"squads_block",
		"squads_block",
		335,
		squads_v3_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		states_block,
		"states_block",
		"states_block",
		16,
		states_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		static_spawn_zone_block,
		"static_spawn_zone_block",
		"static_spawn_zone_block",
		128,
		static_spawn_zone_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		static_spawn_zone_data_struct_block,
		"static_spawn_zone_data_struct",
		"static_spawn_zone_data_struct_block",
		1,
		static_spawn_zone_data_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		stereo_system_group_block,
		"stereo_system",
		"stereo_system_block",
		1,
		stereo_system_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		stiff_spring_constraints_block,
		"stiff_spring_constraints_block",
		"stiff_spring_constraints_block",
		64,
		stiff_spring_constraints_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_audibility_block,
		"structure_bsp_audibility_block",
		"structure_bsp_audibility_block",
		1,
		structure_bsp_audibility_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_background_sound_palette_block,
		"structure_bsp_background_sound_palette_block",
		"structure_bsp_background_sound_palette_block",
		64,
		structure_bsp_background_sound_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_breakable_surface_block,
		"structure_bsp_breakable_surface_block",
		"structure_bsp_breakable_surface_block",
		8448,
		structure_bsp_breakable_surface_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_block,
		"structure_bsp_cluster_block",
		"structure_bsp_cluster_block",
		512,
		structure_bsp_cluster_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_data_block,
		"structure_bsp_cluster_data_block",
		"structure_bsp_cluster_data_block",
		1,
		structure_bsp_cluster_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_data_block_new_block,
		"structure_bsp_cluster_data_block_new",
		"structure_bsp_cluster_data_block_new",
		1,
		structure_bsp_cluster_data_block_new_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_debug_info_block,
		"structure_bsp_cluster_debug_info_block",
		"structure_bsp_cluster_debug_info_block",
		512,
		structure_bsp_cluster_debug_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_havok_shape_block,
		"structure_bsp_cluster_havok_shape",
		"structure_bsp_cluster_havok_shape_block",
		1,
		structure_bsp_cluster_havok_shape_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_instanced_geometry_index_block,
		"structure_bsp_cluster_instanced_geometry_index_block",
		"structure_bsp_cluster_instanced_geometry_index_block",
		1024,
		structure_bsp_cluster_instanced_geometry_index_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_lightmap_data_block,
		"structure_bsp_cluster_lightmap_data_block",
		"structure_bsp_cluster_lightmap_data_block",
		128,
		structure_bsp_cluster_lightmap_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_lightmap_duplicate_index_block,
		"structure_bsp_cluster_lightmap_duplicate_index_block",
		"structure_bsp_cluster_lightmap_duplicate_index_block",
		32767,
		structure_bsp_cluster_lightmap_duplicate_index_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_lightmap_index_block,
		"structure_bsp_cluster_lightmap_index_block",
		"structure_bsp_cluster_lightmap_index_block",
		20000,
		structure_bsp_cluster_lightmap_index_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_lightmap_texture_coordinate_block,
		"structure_bsp_cluster_lightmap_texture_coordinate_block",
		"structure_bsp_cluster_lightmap_texture_coordinate_block",
		32767,
		structure_bsp_cluster_lightmap_texture_coordinate_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_mopp_shape_block,
		"structure_bsp_cluster_mopp_shape",
		"structure_bsp_cluster_mopp_shape_block",
		1,
		structure_bsp_cluster_mopp_shape_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_portal_block,
		"structure_bsp_cluster_portal_block",
		"structure_bsp_cluster_portal_block",
		512,
		structure_bsp_cluster_portal_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_portal_index_block,
		"structure_bsp_cluster_portal_index_block",
		"structure_bsp_cluster_portal_index_block",
		512,
		structure_bsp_cluster_portal_index_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_portal_vertex_block,
		"structure_bsp_cluster_portal_vertex_block",
		"structure_bsp_cluster_portal_vertex_block",
		128,
		structure_bsp_cluster_portal_vertex_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_cluster_visibility_mopp_leaf_block,
		"structure_bsp_cluster_visibility_mopp_leaf_block",
		"structure_bsp_cluster_visibility_mopp_leaf_block",
		32768,
		structure_bsp_cluster_visibility_mopp_leaf_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_conveyor_surface_block,
		"structure_bsp_conveyor_surface_block",
		"structure_bsp_conveyor_surface_block",
		512,
		structure_bsp_conveyor_surface_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_debug_info_block,
		"structure_bsp_debug_info_block",
		"structure_bsp_debug_info_block",
		1,
		structure_bsp_debug_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_debug_info_indices_block,
		"structure_bsp_debug_info_indices_block",
		"structure_bsp_debug_info_indices_block",
		32767,
		structure_bsp_debug_info_indices_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_debug_info_render_line_block,
		"structure_bsp_debug_info_render_line_block",
		"structure_bsp_debug_info_render_line_block",
		32767,
		structure_bsp_debug_info_render_line_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_detail_object_data_block,
		"structure_bsp_detail_object_data_block",
		"structure_bsp_detail_object_data_block",
		1,
		structure_bsp_detail_object_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_environment_object_block,
		"structure_bsp_environment_object_block",
		"structure_bsp_environment_object_block",
		16384,
		structure_bsp_environment_object_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_environment_object_palette_block,
		"structure_bsp_environment_object_palette_block",
		"structure_bsp_environment_object_palette_block",
		100,
		structure_bsp_environment_object_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_fake_lightprobes_block,
		"structure_bsp_fake_lightprobes_block",
		"structure_bsp_fake_lightprobes_block",
		2048,
		structure_bsp_fake_lightprobes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_fog_plane_block,
		"structure_bsp_fog_plane_block",
		"structure_bsp_fog_plane_block",
		127,
		structure_bsp_fog_plane_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_fog_plane_debug_info_block,
		"structure_bsp_fog_plane_debug_info_block",
		"structure_bsp_fog_plane_debug_info_block",
		127,
		structure_bsp_fog_plane_debug_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_fog_zone_debug_info_block,
		"structure_bsp_fog_zone_debug_info_block",
		"structure_bsp_fog_zone_debug_info_block",
		127,
		structure_bsp_fog_zone_debug_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_instanced_geometry_definition_block,
		"structure_bsp_instanced_geometry_definition_block",
		"structure_bsp_instanced_geometry_definition_block",
		512,
		structure_bsp_instanced_geometry_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_instanced_geometry_instances_block,
		"structure_bsp_instanced_geometry_instances_block",
		"structure_bsp_instanced_geometry_instances_block",
		1024,
		instanced_geometry_instance_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_leaf_block,
		"structure_bsp_leaf_block",
		"structure_bsp_leaf_block",
		65536,
		structure_bsp_leaf_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_lightmap_data_block,
		"structure_bsp_lightmap_data_block",
		"structure_bsp_lightmap_data_block",
		128,
		structure_bsp_lightmap_data_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_marker_block,
		"structure_bsp_marker_block",
		"structure_bsp_marker_block",
		1024,
		structure_bsp_marker_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_pathfinding_edges_block,
		"structure_bsp_pathfinding_edges_block",
		"structure_bsp_pathfinding_edges_block",
		262144,
		structure_bsp_pathfinding_edges_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_precomputed_lighting_block,
		"structure_bsp_precomputed_lighting_block",
		"structure_bsp_precomputed_lighting_block",
		350,
		structure_bsp_precomputed_lighting_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_runtime_decal_block,
		"structure_bsp_runtime_decal_block",
		"structure_bsp_runtime_decal_block",
		6144,
		structure_bsp_runtime_decal_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_sky_owner_cluster_block,
		"structure_bsp_sky_owner_cluster_block",
		"structure_bsp_sky_owner_cluster_block",
		32,
		structure_bsp_sky_owner_cluster_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_sound_cluster_block,
		"structure_bsp_sound_cluster_block",
		"structure_bsp_sound_cluster_block",
		512,
		structure_bsp_sound_cluster_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_sound_environment_palette_block,
		"structure_bsp_sound_environment_palette_block",
		"structure_bsp_sound_environment_palette_block",
		64,
		structure_bsp_sound_environment_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_surface_reference_block,
		"structure_bsp_surface_reference_block",
		"structure_bsp_surface_reference_block",
		262144,
		structure_bsp_surface_reference_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_weather_palette_block,
		"structure_bsp_weather_palette_block",
		"structure_bsp_weather_palette_block",
		32,
		structure_bsp_weather_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_weather_polyhedron_block,
		"structure_bsp_weather_polyhedron_block",
		"structure_bsp_weather_polyhedron_block",
		32,
		structure_bsp_weather_polyhedron_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_bsp_weather_polyhedron_plane_block,
		"structure_bsp_weather_polyhedron_plane_block",
		"structure_bsp_weather_polyhedron_plane_block",
		16,
		structure_bsp_weather_polyhedron_plane_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_collision_materials_block,
		"structure_collision_materials_block",
		"structure_collision_materials_block",
		512,
		structure_collision_materials_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_device_portal_association_block,
		"structure_device_portal_association_block",
		"structure_device_portal_association_block",
		128,
		structure_device_portal_association_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_indices_segment_block,
		"structure_indices_segment_block",
		"structure_indices_segment_block",
		16384,
		structure_indices_segment_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_indices_segment_reference_block,
		"structure_indices_segment_reference_block",
		"structure_indices_segment_reference_block",
		16384,
		structure_indices_segment_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_instanced_geometry_render_info_struct_block,
		"structure_instanced_geometry_render_info_struct",
		"structure_instanced_geometry_render_info_struct_block",
		1,
		structure_instanced_geometry_render_info_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_lightmap_bsp_leaf_block,
		"structure_lightmap_bsp_leaf_block",
		"structure_lightmap_bsp_leaf_block",
		4096,
		structure_lightmap_bsp_leaf_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_lightmap_group_block,
		"structure_lightmap_group_block",
		"structure_lightmap_group_block",
		256,
		structure_lightmap_group_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_lightmap_lighting_environment_block,
		"structure_lightmap_lighting_environment_block",
		"structure_lightmap_lighting_environment_block",
		1024,
		structure_lightmap_lighting_environment_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_lightmap_palette_color_block,
		"structure_lightmap_palette_color_block",
		"structure_lightmap_palette_color_block",
		128,
		structure_lightmap_palette_color_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_lightmap_sampling_info_block,
		"structure_lightmap_sampling_info_block",
		"structure_lightmap_sampling_info_block",
		1,
		structure_lightmap_sampling_info_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_lightmap_surface_block,
		"structure_lightmap_surface_block",
		"structure_lightmap_surface_block",
		4096,
		structure_lightmap_surface_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_portal_device_mapping_block,
		"structure_portal_device_mapping_block",
		"structure_portal_device_mapping_block",
		1,
		structure_portal_device_mapping_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_shared_edge_block,
		"structure_shared_edge_block",
		"structure_shared_edge_block",
		16384,
		structure_shared_edge_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_shared_edge_group_block,
		"structure_shared_edge_group_block",
		"structure_shared_edge_group_block",
		512,
		structure_shared_edge_group_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_sound_cluster_interior_cluster_indices_block,
		"structure_sound_cluster_interior_cluster_indices",
		"structure_sound_cluster_interior_cluster_indices",
		512,
		structure_sound_cluster_interior_cluster_indices_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_sound_cluster_portal_designators_block,
		"structure_sound_cluster_portal_designators",
		"structure_sound_cluster_portal_designators",
		512,
		structure_sound_cluster_portal_designators_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_strip_segment_first_triangle_index_block,
		"structure_strip_segment_first_triangle_index_block",
		"structure_strip_segment_first_triangle_index_block",
		16384,
		structure_strip_segment_first_triangle_index_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_subcluster_block,
		"structure_subcluster_block",
		"structure_subcluster_block",
		32768,
		structure_subcluster_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		structure_subcluster_boundary_block,
		"structure_subcluster_boundary_block",
		"structure_subcluster_boundary_block",
		6144,
		structure_subcluster_boundary_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		style_group_block,
		"style",
		"style_block",
		1,
		style_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		style_palette_block,
		"style_palette_block",
		"style_palette_block",
		50,
		style_palette_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		super_detonation_damage_struct_block,
		"super_detonation_damage_struct",
		"super_detonation_damage_struct_block",
		1,
		super_detonation_damage_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		surface_flags_block,
		"surface_flags_block",
		"surface_flags_block",
		4096,
		surface_flags_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		surfaces_block,
		"surfaces_block",
		"surfaces_block",
		131072,
		surfaces_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		syntax_datum_block,
		"syntax_datum_block",
		"syntax_datum_block",
		36864,
		syntax_datum_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		table_view_list_item_reference_block,
		"table_view_list_item_reference_block",
		"table_view_list_item_reference_block",
		8,
		table_view_list_item_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		table_view_list_reference_block,
		"table_view_list_reference_block",
		"table_view_list_reference_block",
		1,
		table_view_list_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		table_view_list_row_reference_block,
		"table_view_list_row_reference_block",
		"table_view_list_row_reference_block",
		16,
		table_view_list_row_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		tag_block_index_block,
		"tag_block_index_block",
		"tag_block_index_block",
		1024,
		tag_block_index_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		tag_block_index_struct_block,
		"tag_block_index_struct",
		"tag_block_index_struct_block",
		1,
		tag_block_index_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		tag_import_file_block,
		"import file",
		"tag_import_file_block",
		1024,
		tag_import_file_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		text_block_reference_block,
		"text_block_reference_block",
		"text_block_reference_block",
		64,
		text_block_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		text_value_pair_block,
		"text_value_pair_block",
		"text_value_pair_block",
		32,
		text_value_pair_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		text_value_pair_definition_group_block,
		"text_value_pair_definition",
		"text_value_pair_definition_block",
		1,
		text_value_pair_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		text_value_pair_reference_block,
		"text_value_pair_reference_block",
		"text_value_pair_reference_block",
		32,
		text_value_pair_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		texture_block,
		"texture_block",
		"texture_block",
		1024,
		texture_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		texture_stage_state_block,
		"texture_stage_state_block",
		"texture_stage_state_block",
		1024,
		texture_stage_state_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		texture_stage_state_parameter_block,
		"texture_stage_state_parameter_block",
		"texture_stage_state_parameter_block",
		1024,
		texture_stage_state_parameter_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		torque_curve_struct_block,
		"torque_curve_struct",
		"torque_curve_struct_block",
		1,
		torque_curve_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		transparent_planes_block,
		"transparent_planes_block",
		"transparent_planes_block",
		32768,
		transparent_planes_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		triangles_block,
		"triangles_block",
		"triangles_block",
		1024,
		triangles_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		trigger_references_block,
		"trigger_references",
		"trigger_references",
		10,
		trigger_references_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		triggers_block,
		"triggers_block",
		"triggers_block",
		256,
		triggers_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ui_campaign_block,
		"ui_campaign_block",
		"ui_campaign_block",
		4,
		ui_campaign_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ui_error_block,
		"ui_error_block",
		"ui_error_block",
		100,
		ui_error_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ui_error_category_block,
		"ui_error_category_block",
		"ui_error_category_block",
		100,
		ui_error_category_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ui_levels_definition_block,
		"ui_levels_definition_block",
		"ui_levels_definition_block",
		1,
		ui_levels_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ui_light_reference_block,
		"ui_light_reference_block",
		"ui_light_reference_block",
		8,
		ui_light_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ui_model_scene_reference_block,
		"ui_model_scene_reference_block",
		"ui_model_scene_reference_block",
		32,
		ui_model_scene_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		ui_object_reference_block,
		"ui_object_reference_block",
		"ui_object_reference_block",
		32,
		ui_object_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_additional_node_names_struct_block,
		"unit_additional_node_names_struct",
		"unit_additional_node_names_struct_block",
		1,
		unit_additional_node_names_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_group_block,
		"unit",
		"unit_block",
		1,
		unit_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_boarding_melee_struct_block,
		"unit_boarding_melee_struct",
		"unit_boarding_melee_struct_block",
		1,
		unit_boarding_melee_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_boost_struct_block,
		"unit_boost_struct",
		"unit_boost_struct_block",
		1,
		unit_boost_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_camera_struct_block,
		"unit_camera_struct",
		"unit_camera_struct_block",
		1,
		unit_camera_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_camera_track_block,
		"unit_camera_track_block",
		"unit_camera_track_block",
		2,
		unit_camera_track_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_hud_auxilary_overlay_block,
		"unit_hud_auxilary_overlay_block",
		"unit_hud_auxilary_overlay_block",
		16,
		unit_hud_auxilary_overlay_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_hud_auxilary_panel_block,
		"unit_hud_auxilary_panel_block",
		"unit_hud_auxilary_panel_block",
		16,
		unit_hud_auxilary_panel_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_hud_interface_group_block,
		"unit_hud_interface",
		"unit_hud_interface_block",
		1,
		unit_hud_interface_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_hud_reference_block,
		"unit_hud_reference_block",
		"unit_hud_reference_block",
		2,
		unit_hud_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_hud_sound_block,
		"unit_hud_sound_block",
		"unit_hud_sound_block",
		12,
		unit_hud_sound_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_lipsync_scales_struct_block,
		"unit_lipsync_scales_struct",
		"unit_lipsync_scales_struct_block",
		1,
		unit_lipsync_scales_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_postures_block,
		"unit_postures_block",
		"unit_postures_block",
		20,
		unit_postures_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_seat_acceleration_struct_block,
		"unit_seat_acceleration_struct",
		"unit_seat_acceleration_struct_block",
		1,
		unit_seat_acceleration_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_seat_block,
		"unit_seat_block",
		"unit_seat_block",
		32,
		unit_seat_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		unit_weapon_block,
		"unit_weapon_block",
		"unit_weapon_block",
		4,
		unit_weapon_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_block,
		"user_hint_block",
		"user_hint_block",
		1,
		user_hint_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_climb_block,
		"user_hint_climb_block",
		"user_hint_climb_block",
		200,
		user_hint_climb_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_flight_block,
		"user_hint_flight_block",
		"user_hint_flight_block",
		50,
		user_hint_flight_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_flight_point_block,
		"user_hint_flight_point_block",
		"user_hint_flight_point_block",
		10,
		user_hint_flight_point_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_jump_block,
		"user_hint_jump_block",
		"user_hint_jump_block",
		200,
		user_hint_jump_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_line_segment_block,
		"user_hint_line_segment_block",
		"user_hint_line_segment_block",
		200,
		user_hint_line_segment_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_parallelogram_block,
		"user_hint_parallelogram_block",
		"user_hint_parallelogram_block",
		200,
		user_hint_parallelogram_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_point_block,
		"user_hint_point_block",
		"user_hint_point_block",
		200,
		user_hint_point_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_polygon_block,
		"user_hint_polygon_block",
		"user_hint_polygon_block",
		200,
		user_hint_polygon_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_ray_block,
		"user_hint_ray_block",
		"user_hint_ray_block",
		200,
		user_hint_ray_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_well_block,
		"user_hint_well_block",
		"user_hint_well_block",
		200,
		user_hint_well_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_hint_well_point_block,
		"user_hint_well_point_block",
		"user_hint_well_point_block",
		200,
		user_hint_well_point_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_interface_globals_definition_group_block,
		"user_interface_globals_definition",
		"user_interface_globals_definition_block",
		1,
		user_interface_globals_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_interface_list_skin_definition_group_block,
		"user_interface_list_skin_definition",
		"user_interface_list_skin_definition_block",
		1,
		user_interface_list_skin_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_interface_screen_widget_definition_group_block,
		"user_interface_screen_widget_definition",
		"user_interface_screen_widget_definition_block",
		1,
		user_interface_screen_widget_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_interface_shared_globals_definition_group_block,
		"user_interface_shared_globals_definition",
		"user_interface_shared_globals_definition_block",
		1,
		user_interface_shared_globals_definition_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		user_interface_widget_reference_block,
		"user_interface_widget_reference_block",
		"user_interface_widget_reference_block",
		256,
		user_interface_widget_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		variant_setting_edit_reference_block,
		"variant_setting_edit_reference_block",
		"variant_setting_edit_reference_block",
		41,
		variant_setting_edit_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vehicle_group_block,
		"vehicle",
		"vehicle_block",
		1,
		vehicle_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vehicle_collection_group_block,
		"vehicle_collection",
		"vehicle_collection_block",
		1,
		vehicle_collection_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vehicle_permutation_block,
		"vehicle_permutation",
		"vehicle_permutation",
		32,
		vehicle_permutation_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vehicle_phantom_shape_block,
		"vehicle_phantom_shape_block",
		"vehicle_phantom_shape_block",
		1,
		vehicle_phantom_shape_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vehicle_suspension_block,
		"vehicle_suspension_block",
		"vehicle_suspension_block",
		32,
		vehicle_suspension_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vehicles_block$2,
		"vehicles_block",
		"vehicles_block",
		64,
		vehicles_block_struct_definition$2);

	TAG_BLOCK_FROM_STRUCT(
		vehicles_block,
		"vehicles_block",
		"vehicles_block",
		20,
		vehicles_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vertex_shader_group_block,
		"vertex_shader",
		"vertex_shader_block",
		1,
		vertex_shader_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vertex_shader_classification_block,
		"classification",
		"vertex_shader_classification_block",
		12,
		vertex_shader_classification_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vertex_shader_constant_block,
		"vertex_shader_constant_block",
		"vertex_shader_constant_block",
		1024,
		vertex_shader_constant_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vertex_shader_reference_block,
		"vertex_shader_reference_block",
		"vertex_shader_reference_block",
		33,
		vertex_shader_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vertices_block,
		"vertices_block",
		"vertices_block",
		131072,
		vertices_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vibration_definition_struct_block,
		"vibration_definition_struct",
		"vibration_definition_struct_block",
		1,
		vibration_definition_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vibration_frequency_definition_struct_block,
		"vibration_frequency_definition_struct",
		"vibration_frequency_definition_struct_block",
		1,
		vibration_frequency_definition_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		visibility_mopp_reorder_table_block,
		"visibility_mopp_reorder_table_block",
		"visibility_mopp_reorder_table_block",
		32768,
		visibility_mopp_reorder_table_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		visibility_struct_block,
		"visibility_struct",
		"visibility_struct_block",
		1,
		visibility_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vocalization_definitions_block_0_block,
		"vocalization_definitions_block_0",
		"vocalization_definitions_block_0",
		500,
		g_vocalization_fields_v2_0_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vocalization_definitions_block_1_block,
		"vocalization_definitions_block_1",
		"vocalization_definitions_block_1",
		500,
		g_vocalization_fields_v2_1_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vocalization_definitions_block_2_block,
		"vocalization_definitions_block_2",
		"vocalization_definitions_block_2",
		500,
		g_vocalization_fields_v2_2_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vocalization_definitions_block_3_block,
		"vocalization_definitions_block_3",
		"vocalization_definitions_block_3",
		500,
		g_vocalization_fields_v2_3_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vocalization_definitions_block_4_block,
		"vocalization_definitions_block_4",
		"vocalization_definitions_block_4",
		500,
		g_vocalization_fields_v2_4_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vocalization_definitions_block_5_block,
		"vocalization_definitions_block_5",
		"vocalization_definitions_block_5",
		500,
		g_vocalization_fields_v2_5_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		vocalization_patterns_block,
		"vocalization_patterns_block",
		"vocalization_patterns_block",
		1000,
		vocalization_patterns_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		water_geometry_section_block,
		"water_geometry_section_block",
		"water_geometry_section_block",
		1,
		water_geometry_section_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_barrel_damage_effect_struct_block,
		"weapon_barrel_damage_effect_struct",
		"weapon_barrel_damage_effect_struct_block",
		1,
		weapon_barrel_damage_effect_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_barrels_block,
		"weapon_barrels",
		"weapon_barrels",
		2,
		weapon_barrel_definition_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_group_block,
		"weapon",
		"weapon_block",
		1,
		weapon_struct_definition$3);

	TAG_BLOCK_FROM_STRUCT(
		weapon_class_block,
		"weapon_class_block",
		"weapon_class_block",
		64,
		weapon_class_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_class_lookup_block,
		"weapon_class_lookup_block",
		"weapon_class_lookup_block",
		64,
		weapon_class_lookup_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_first_person_interface_block,
		"weapon_first_person_interface_block",
		"weapon_first_person_interface_block",
		4,
		weapon_first_person_interface_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_hud_crosshair_block,
		"weapon_hud_crosshair_block",
		"weapon_hud_crosshair_block",
		19,
		weapon_hud_crosshair_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_hud_crosshair_item_block,
		"weapon_hud_crosshair_item_block",
		"weapon_hud_crosshair_item_block",
		16,
		weapon_hud_crosshair_item_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_hud_interface_group_block,
		"weapon_hud_interface",
		"weapon_hud_interface_block",
		1,
		weapon_hud_interface_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_hud_meter_block,
		"weapon_hud_meter_block",
		"weapon_hud_meter_block",
		16,
		weapon_hud_meter_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_hud_number_block,
		"weapon_hud_number_block",
		"weapon_hud_number_block",
		16,
		weapon_hud_number_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_hud_overlay_block,
		"weapon_hud_overlay_block",
		"weapon_hud_overlay_block",
		16,
		weapon_hud_overlay_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_hud_overlays_block,
		"weapon_hud_overlays_block",
		"weapon_hud_overlays_block",
		16,
		weapon_hud_overlays_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_hud_static_block,
		"weapon_hud_static_block",
		"weapon_hud_static_block",
		16,
		weapon_hud_static_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_interface_struct_block,
		"weapon_interface_struct",
		"weapon_interface_struct_block",
		1,
		weapon_interface_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_shared_interface_struct_block,
		"weapon_shared_interface_struct",
		"weapon_shared_interface_struct_block",
		1,
		weapon_shared_interface_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_tracking_struct_block,
		"weapon_tracking_struct",
		"weapon_tracking_struct_block",
		1,
		weapon_tracking_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_trigger_autofire_struct_block,
		"weapon_trigger_autofire_struct",
		"weapon_trigger_autofire_struct_block",
		1,
		weapon_trigger_autofire_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_trigger_charging_struct_block,
		"weapon_trigger_charging_struct",
		"weapon_trigger_charging_struct_block",
		1,
		weapon_trigger_charging_struct_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_triggers_block,
		"weapon_triggers",
		"weapon_triggers",
		2,
		weapon_triggers_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapon_type_block,
		"weapon_type_block",
		"weapon_type_block",
		64,
		weapon_type_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weapons_block,
		"weapons_block",
		"weapons_block",
		64,
		weapons_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		weather_system_group_block,
		"weather_system",
		"weather_system_block",
		1,
		weather_system_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		wind_group_block,
		"wind",
		"wind_block",
		1,
		wind_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		window_pane_reference_block,
		"window_pane_reference_block",
		"window_pane_reference_block",
		16,
		window_pane_reference_block_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		zone_block,
		"zone_block",
		"zone_block",
		128,
		zone_v2_struct_definition);

	TAG_BLOCK_FROM_STRUCT(
		zone_set_block,
		"zone_set_block",
		"zone_set_block",
		32,
		zone_set_struct_definition);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array,
		"unnamed_array",
		8,
		array);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$10,
		"unnamed_array$10",
		4,
		array$11);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$11,
		"unnamed_array$11",
		3,
		array$10);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$12,
		"unnamed_array$12",
		4,
		array$12);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$13,
		"unnamed_array$13",
		4,
		array$14);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$14,
		"unnamed_array$14",
		4,
		array$13);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$15,
		"unnamed_array$15",
		4,
		array$15);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$16,
		"unnamed_array$16",
		4,
		array$16);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$17,
		"unnamed_array$17",
		4,
		array$17);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$18,
		"unnamed_array$18",
		7,
		array$18);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$19,
		"unnamed_array$19",
		32,
		array$19);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$2,
		"unnamed_array$2",
		15,
		array$2);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$20,
		"unnamed_array$20",
		32,
		array$20);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$21,
		"unnamed_array$21",
		3,
		array$21);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$22,
		"unnamed_array$22",
		3,
		array$22);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$23,
		"unnamed_array$23",
		3,
		array$23);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$24,
		"unnamed_array$24",
		4,
		array$24);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$25,
		"unnamed_array$25",
		3,
		array$25);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$26,
		"unnamed_array$26",
		4,
		array$26);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$27,
		"unnamed_array$27",
		4,
		array$27);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$28,
		"unnamed_array$28",
		4,
		array$28);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$29,
		"unnamed_array$29",
		3,
		array$29);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$3,
		"unnamed_array$3",
		4,
		array$3);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$30,
		"unnamed_array$30",
		4,
		array$30);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$31,
		"unnamed_array$31",
		3,
		array$31);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$32,
		"unnamed_array$32",
		9,
		array$32);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$33,
		"unnamed_array$33",
		9,
		array$33);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$34,
		"unnamed_array$34",
		9,
		array$34);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$35,
		"unnamed_array$35",
		4,
		array$35);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$36,
		"unnamed_array$36",
		4,
		array$36);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$37,
		"unnamed_array$37",
		4,
		array$37);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$38,
		"unnamed_array$38",
		2,
		array$38);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$39,
		"unnamed_array$39",
		2,
		array$39);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$4,
		"unnamed_array$4",
		4,
		array$4);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$40,
		"unnamed_array$40",
		2,
		array$40);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$41,
		"unnamed_array$41",
		4,
		array$41);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$42,
		"unnamed_array$42",
		4,
		array$42);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$43,
		"unnamed_array$43",
		3,
		array$43);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$44,
		"unnamed_array$44",
		8,
		array$44);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$45,
		"unnamed_array$45",
		3,
		array$45);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$46,
		"unnamed_array$46",
		4,
		array$46);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$47,
		"unnamed_array$47",
		2,
		array$47);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$48,
		"unnamed_array$48",
		32,
		array$48);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$49,
		"unnamed_array$49",
		9,
		array$49);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$5,
		"unnamed_array$5",
		4,
		array$5);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$50,
		"unnamed_array$50",
		4,
		array$50);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$51,
		"unnamed_array$51",
		8,
		array$52);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$52,
		"unnamed_array$52",
		4,
		array$51);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$6,
		"unnamed_array$6",
		4,
		array$6);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$7,
		"unnamed_array$7",
		4,
		array$8);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$8,
		"unnamed_array$8",
		2,
		array$7);

	TAG_ARRAY_FROM_STRUCT(
		unnamed_array$9,
		"unnamed_array$9",
		4,
		array$9);

	TAG_STRUCT(
		old_global_damage_resistance_struct_struct_definition,
		"OLD_global_damage_resistance_struct",
		"OLD_global_damage_resistance_struct_struct_definition",
		"s_old_damage_resistance",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 600),
		{ _field_terminator }
	};

	TAG_STRUCT(
		unused_structure_bsp_node_block_struct_definition,
		"UNUSED_structure_bsp_node_block",
		"UNUSED_structure_bsp_node_block_struct_definition",
		"s_unused_structure_node",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_SKIP("value", 6),
		{ _field_terminator }
	};

	TAG_STRUCT(
		actor_palette_block_struct_definition,
		"actor_palette_block",
		"actor_palette_block_struct_definition",
		"s_actor_palette_entry",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 16),
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		actor_starting_location_struct_definition,
		"actor_starting_location",
		"actor_starting_location_struct_definition",
		"s_actor_starting_location_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 6, 22 },
		{ _field_old_string_id, "name" },
		{ _field_real_point_3d, "position" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		{ _field_real_euler_angles_2d, "facing (yaw, pitch)", nullptr, "degrees" },
		{ _field_long_flags, "flags", &unnamed_enum$69 },
		{ _field_short_block_index, "character type" },
		{ _field_short_block_index, "initial weapon" },
		{ _field_short_block_index, "initial secondary weapon" },
		FIELD_PAD("value", 2),
		{ _field_short_block_index, "vehicle type" },
		{ _field_short_enum, "seat type", &unnamed_enum$70 },
		{ _field_short_enum, "grenade type", &unnamed_enum$68 },
		{ _field_short_integer, "swarm count", "number of cretures in swarm if a swarm is spawned at this location" },
		{ _field_string_id, "actor variant name" },
		{ _field_string_id, "vehicle variant name" },
		{ _field_real, "initial movement distance", "before doing anything else, the actor will travel the given distance in its forward direction" },
		{ _field_short_block_index, "emitter vehicle" },
		{ _field_short_enum, "initial movement mode", &unnamed_enum$71 },
		{ _field_string, "Placement script", _field_id_halo_script_block },
		FIELD_SKIP("value", 2),
		FIELD_PAD("value", 2),
		
		{ _struct_version_mode_equal, 5, 18 },
		{ _field_old_string_id, "name" },
		{ _field_real_point_3d, "position" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		{ _field_real_euler_angles_2d, "facing (yaw, pitch)", nullptr, "degrees" },
		{ _field_long_flags, "flags", &unnamed_enum$69 },
		{ _field_short_block_index, "character type" },
		{ _field_short_block_index, "initial weapon" },
		{ _field_short_block_index, "vehicle type" },
		{ _field_short_enum, "seat type", &unnamed_enum$70 },
		FIELD_PAD("value", 8),
		{ _field_short_enum, "grenade type", &unnamed_enum$68 },
		{ _field_short_integer, "swarm count", "number of cretures in swarm if a swarm is spawned at this location" },
		{ _field_string_id, "actor variant name" },
		{ _field_string_id, "vehicle variant name" },
		{ _field_real, "initial movement distance", "before doing anything else, the actor will travel the given distance in its forward direction" },
		{ _field_short_block_index, "emitter vehicle" },
		FIELD_PAD("value", 2),
		
		{ _struct_version_mode_equal, 4, 18 },
		{ _field_old_string_id, "name" },
		{ _field_real_point_3d, "position" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		{ _field_real_euler_angles_2d, "facing (yaw, pitch)", nullptr, "degrees" },
		{ _field_long_flags, "flags", &unnamed_enum$69 },
		{ _field_short_block_index, "character type" },
		{ _field_short_block_index, "initial weapon" },
		{ _field_short_block_index, "vehicle type" },
		{ _field_short_enum, "seat type", &unnamed_enum$70 },
		FIELD_PAD("value", 8),
		{ _field_short_enum, "grenade type", &unnamed_enum$68 },
		{ _field_short_integer, "swarm count", "number of cretures in swarm if a swarm is spawned at this location" },
		{ _field_string_id, "actor variant name" },
		{ _field_string_id, "vehicle variant name" },
		{ _field_real, "initial movement distance", "before doing anything else, the actor will travel the given distance in its forward direction" },
		{ _field_short_block_index, "emitter vehicle" },
		FIELD_PAD("value", 2),
		
		{ _struct_version_mode_equal, 3, 15 },
		{ _field_old_string_id, "name" },
		{ _field_real_point_3d, "position" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		{ _field_angle, "facing", nullptr, "degrees" },
		{ _field_long_flags, "flags", &unnamed_enum$69 },
		{ _field_short_block_index, "character type" },
		{ _field_short_block_index, "initial weapon" },
		{ _field_short_block_index, "vehicle type" },
		{ _field_short_enum, "seat type", &unnamed_enum$70 },
		FIELD_PAD("value", 8),
		{ _field_short_enum, "grenade type", &unnamed_enum$68 },
		{ _field_short_integer, "swarm count", "number of cretures in swarm if a swarm is spawned at this location" },
		{ _field_string_id, "actor variant name" },
		{ _field_string_id, "vehicle variant name" },
		
		{ _struct_version_mode_equal, 2, 13 },
		{ _field_old_string_id, "name" },
		{ _field_real_point_3d, "position" },
		{ _field_angle, "facing", nullptr, "degrees" },
		FIELD_SKIP("value", 2),
		FIELD_PAD("value", 2),
		{ _field_long_flags, "flags", &unnamed_enum$69 },
		{ _field_short_block_index, "character type" },
		{ _field_short_block_index, "initial weapon" },
		{ _field_short_block_index, "vehicle type" },
		{ _field_short_enum, "seat type", &unnamed_enum$70 },
		FIELD_PAD("value", 8),
		{ _field_short_enum, "grenade type", &unnamed_enum$68 },
		FIELD_PAD("value", 2),
		
		{ _struct_version_mode_equal, 1, 14 },
		{ _field_old_string_id, "name" },
		{ _field_real_point_3d, "position" },
		{ _field_angle, "facing", nullptr, "degrees" },
		FIELD_SKIP("value", 2),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		{ _field_short_block_index, "character type" },
		{ _field_short_block_index, "initial weapon" },
		{ _field_short_block_index, "vehicle type" },
		{ _field_short_enum, "seat type", &unnamed_enum$70 },
		FIELD_PAD("value", 8),
		{ _field_short_enum, "grenade type", &unnamed_enum$68 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		
		{ _struct_version_mode_equal, 0, 11 },
		{ _field_real_point_3d, "position" },
		{ _field_angle, "facing", nullptr, "degrees" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 6),
		{ _field_short_block_index, "character type" },
		{ _field_short_block_index, "initial weapon" },
		FIELD_PAD("value", 12),
		{ _field_tag_reference, "weapon reference (DO NOT USE)", &weapon_group_reference$2 },
		FIELD_PAD("value", 12),
		{ _field_short_enum, "grenade type", &unnamed_enum$68 },
		FIELD_PAD("value", 2),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$69)
	{
		"initially asleep",
		"infection form explode",
		"n/a",
		"always place",
		"initially hidden"
	};
	STRING_LIST(unnamed_enum$69, unnamed_enum$69_strings, _countof(unnamed_enum$69_strings));

	STRINGS(unnamed_enum$70)
	{
		"DEFAULT",
		"passenger",
		"gunner",
		"driver",
		"small cargo",
		"large cargo",
		"NO driver",
		"NO vehicle"
	};
	STRING_LIST(unnamed_enum$70, unnamed_enum$70_strings, _countof(unnamed_enum$70_strings));

	STRINGS(unnamed_enum$68)
	{
		"NONE",
		"Human grenade",
		"Covenant Plasma"
	};
	STRING_LIST(unnamed_enum$68, unnamed_enum$68_strings, _countof(unnamed_enum$68_strings));

	STRINGS(unnamed_enum$71)
	{
		"default",
		"climbing",
		"flying"
	};
	STRING_LIST(unnamed_enum$71, unnamed_enum$71_strings, _countof(unnamed_enum$71_strings));

	TAG_REFERENCE(weapon_group_reference$2, WEAPON_TAG);

	TAG_STRUCT(
		additional_node_data_block_struct_definition,
		"additional_node_data_block",
		"additional_node_data_block_struct_definition",
		"s_additional_node_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "node name" },
		{ _field_real_quaternion, "default rotation" },
		{ _field_real_point_3d, "default translation" },
		{ _field_real, "default scale" },
		{ _field_real_point_3d, "min bounds" },
		{ _field_real_point_3d, "max bounds" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		ai_animation_reference_block_struct_definition,
		"ai_animation_reference_block",
		"ai_animation_reference_block_struct_definition",
		"s_ai_animation_reference_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "animation name" },
		{ _field_tag_reference, "animation graph", "leave this blank to use the unit's normal animation graph", &model_animation_graph_group_reference },
		FIELD_PAD("value", 12),
		{ _field_terminator }
	};

	TAG_REFERENCE(model_animation_graph_group_reference, MODEL_ANIMATION_GRAPH_TAG);

	TAG_STRUCT(
		ai_conversation_block_struct_definition,
		"ai_conversation_block",
		"ai_conversation_block_struct_definition",
		"s_ai_conversation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_word_flags, "flags", &unnamed_enum$88 },
		FIELD_PAD("value", 2),
		{ _field_real, "trigger distance", "distance the player must enter before the conversation can trigger", "world units" },
		{ _field_real, "run-to-player dist", "if the 'involves player' flag is set, when triggered the conversation's participant(s) will run to within this distance of the player", "world units" },
		FIELD_PAD("value", 36),
		{ _field_block, "participants", &ai_conversation_participant_block },
		{ _field_block, "lines", &ai_conversation_line_block },
		{ _field_block, "value", &g_null_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$88)
	{
		"stop if death#this conversation will be aborted if any participant dies",
		"stop if damaged#an actor will abort this conversation if they are damaged",
		"stop if visible enemy#an actor will abort this conversation if they see an enemy",
		"stop if alerted to enemy#an actor will abort this conversation if they suspect an enemy",
		"player must be visible#this conversation cannot take place unless the participants can _see_ a nearby player",
		"stop other actions#participants stop doing whatever they were doing in order to perform this conversation",
		"keep trying to play#if this conversation fails initially, it will keep testing to see when it can play",
		"player must be looking#this conversation will not start until the player is looking at one of the participants"
	};
	STRING_LIST(unnamed_enum$88, unnamed_enum$88_strings, _countof(unnamed_enum$88_strings));

	TAG_STRUCT(
		ai_conversation_line_block_struct_definition,
		"ai_conversation_line_block",
		"ai_conversation_line_block_struct_definition",
		"s_ai_conversation_line",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$89 },
		{ _field_short_block_index, "participant" },
		{ _field_short_enum, "addressee", &unnamed_enum$90 },
		{ _field_short_block_index, "addressee participant", "this field is only used if the addressee type is 'participant'" },
		FIELD_PAD("value", 4),
		{ _field_real, "line delay time" },
		FIELD_PAD("value", 12),
		{ _field_tag_reference, "variant 1", &sound_group_reference },
		{ _field_tag_reference, "variant 2", &sound_group_reference },
		{ _field_tag_reference, "variant 3", &sound_group_reference },
		{ _field_tag_reference, "variant 4", &sound_group_reference },
		{ _field_tag_reference, "variant 5", &sound_group_reference },
		{ _field_tag_reference, "variant 6", &sound_group_reference },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$89)
	{
		"addressee look at speaker",
		"everyone look at speaker",
		"everyone look at addressee",
		"wait after until told to advance",
		"wait until speaker nearby",
		"wait until everyone nearby"
	};
	STRING_LIST(unnamed_enum$89, unnamed_enum$89_strings, _countof(unnamed_enum$89_strings));

	STRINGS(unnamed_enum$90)
	{
		"none",
		"player",
		"participant"
	};
	STRING_LIST(unnamed_enum$90, unnamed_enum$90_strings, _countof(unnamed_enum$90_strings));

	TAG_REFERENCE(sound_group_reference, SOUND_TAG, _tag_reference_flag_resolved_manually);

	TAG_STRUCT(
		ai_conversation_participant_block_struct_definition,
		"ai_conversation_participant_block",
		"ai_conversation_participant_block_struct_definition",
		"s_ai_conversation_participant",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 8),
		{ _field_short_block_index, "use this object", "if a unit with this name exists, we try to pick them to start the conversation" },
		{ _field_short_block_index, "set new name", "once we pick a unit, we name it this" },
		FIELD_PAD("value", 12),
		FIELD_PAD("value", 12),
		{ _field_string, "encounter name" },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 12),
		{ _field_terminator }
	};

	TAG_STRUCT(
		ai_deafening_encoded_pas_block_struct_definition,
		"ai_deafening_encoded_pas_block",
		"ai_deafening_encoded_pas_block_struct_definition",
		"s_dword$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		ai_dialogue_globals_block_struct_definition,
		"ai_dialogue_globals_block",
		"ai_dialogue_globals_block_struct_definition",
		"s_ai_dialogue_definitions",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "vocalizations", &vocalization_definitions_block_0_block },
		{ _field_block, "patterns", &vocalization_patterns_block },
		FIELD_PAD("value", 12),
		{ _field_block, "dialogue data", &dialogue_data_block },
		{ _field_block, "involuntary data", &involuntary_data_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		ai_globals_block_struct_definition,
		"ai_globals_block",
		"ai_globals_block_struct_definition",
		"s_ai_globals_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "danger broadly facing" },
		FIELD_PAD("value", 4),
		{ _field_real, "danger shooting near" },
		FIELD_PAD("value", 4),
		{ _field_real, "danger shooting at" },
		FIELD_PAD("value", 4),
		{ _field_real, "danger extremely close" },
		FIELD_PAD("value", 4),
		{ _field_real, "danger shield damage" },
		{ _field_real, "danger exetended shield damage" },
		{ _field_real, "danger body damage" },
		{ _field_real, "danger extended body damage" },
		FIELD_PAD("value", 48),
		{ _field_tag_reference, "global dialogue tag", &ai_dialogue_globals_group_reference },
		{ _field_string_id, "default mission dialogue sound effect" },
		FIELD_PAD("value", 20),
		{ _field_real, "jump down", nullptr, "wu/tick" },
		{ _field_real, "jump step", nullptr, "wu/tick" },
		{ _field_real, "jump crouch", nullptr, "wu/tick" },
		{ _field_real, "jump stand", nullptr, "wu/tick" },
		{ _field_real, "jump storey", nullptr, "wu/tick" },
		{ _field_real, "jump tower", nullptr, "wu/tick" },
		{ _field_real, "max jump down height down", nullptr, "wu" },
		{ _field_real, "max jump down height step", nullptr, "wu" },
		{ _field_real, "max jump down height crouch", nullptr, "wu" },
		{ _field_real, "max jump down height stand", nullptr, "wu" },
		{ _field_real, "max jump down height storey", nullptr, "wu" },
		{ _field_real, "max jump down height tower", nullptr, "wu" },
		{ _field_real_bounds, "hoist step", nullptr, "wus" },
		{ _field_real_bounds, "hoist crouch", nullptr, "wus" },
		{ _field_real_bounds, "hoist stand", nullptr, "wus" },
		FIELD_PAD("value", 24),
		{ _field_real_bounds, "vault step", nullptr, "wus" },
		{ _field_real_bounds, "vault crouch", nullptr, "wus" },
		FIELD_PAD("value", 48),
		{ _field_block, "gravemind properties", &ai_globals_gravemind_block },
		FIELD_PAD("value", 48),
		{ _field_real, "scary target threhold", "A target of this scariness is officially considered scary (by combat dialogue, etc.)" },
		{ _field_real, "scary weapon threhold", "A weapon of this scariness is officially considered scary (by combat dialogue, etc.)" },
		{ _field_real, "player scariness" },
		{ _field_real, "berserking actor scariness" },
		{ _field_terminator }
	};

	TAG_REFERENCE(ai_dialogue_globals_group_reference, AI_DIALOGUE_GLOBALS_TAG);

	TAG_STRUCT(
		ai_globals_gravemind_block_struct_definition,
		"ai_globals_gravemind_block",
		"ai_globals_gravemind_block_struct_definition",
		"s_ai_globals_gravemind_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "min retreat time", nullptr, "secs" },
		{ _field_real, "ideal retreat time", nullptr, "secs" },
		{ _field_real, "max retreat time", nullptr, "secs" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		ai_mission_dialogue_block_struct_definition,
		"ai_mission_dialogue_block",
		"ai_mission_dialogue_block_struct_definition",
		"s_ai_mission_dialogue",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "lines", &mission_dialogue_lines_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		ai_recording_reference_block_struct_definition,
		"ai_recording_reference_block",
		"ai_recording_reference_block_struct_definition",
		"s_ai_recording_reference_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "recording name" },
		FIELD_PAD("value", 8),
		{ _field_terminator }
	};

	TAG_STRUCT(
		ai_scenario_mission_dialogue_block_struct_definition,
		"ai_scenario_mission_dialogue_block",
		"ai_scenario_mission_dialogue_block_struct_definition",
		"s_ai_scenario_mission_dialogue",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "mission dialogue", &ai_mission_dialogue_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(ai_mission_dialogue_group_reference, AI_MISSION_DIALOGUE_TAG);

	TAG_STRUCT(
		ai_scene_block_struct_definition,
		"ai_scene_block",
		"ai_scene_block_struct_definition",
		"s_ai_scene",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_long_flags, "flags", &unnamed_enum$93 },
		{ _field_block, "trigger conditions", &ai_scene_trigger_block },
		FIELD_USELESS_PAD("value", 32),
		{ _field_block, "roles", &ai_scene_role_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$93)
	{
		"scene can play multiple times",
		"enable combat dialogue"
	};
	STRING_LIST(unnamed_enum$93, unnamed_enum$93_strings, _countof(unnamed_enum$93_strings));

	TAG_STRUCT(
		ai_scene_role_block_struct_definition,
		"ai_scene_role_block",
		"ai_scene_role_block_struct_definition",
		"s_ai_scene_role",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_short_enum, "group", &unnamed_enum$94 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 36),
		{ _field_block, "role variants", &ai_scene_role_variants_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$94)
	{
		"group 1",
		"group 2",
		"group 3"
	};
	STRING_LIST(unnamed_enum$94, unnamed_enum$94_strings, _countof(unnamed_enum$94_strings));

	TAG_STRUCT(
		ai_scene_role_variants_block_struct_definition,
		"ai_scene_role_variants_block",
		"ai_scene_role_variants_block_struct_definition",
		"s_ai_scene_role_variant",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "variant designation" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		ai_scene_trigger_block_struct_definition,
		"ai_scene_trigger_block",
		"ai_scene_trigger_block_struct_definition",
		"s_ai_scene_trigger",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "combination rule", &unnamed_enum$82 },
		FIELD_PAD("value", 2),
		{ _field_block, "triggers", &trigger_references_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$82)
	{
		"OR",
		"AND"
	};
	STRING_LIST(unnamed_enum$82, unnamed_enum$82_strings, _countof(unnamed_enum$82_strings));

	TAG_STRUCT(
		ai_script_reference_block_struct_definition,
		"ai_script_reference_block",
		"ai_script_reference_block_struct_definition",
		"s_ai_script_reference_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "script name" },
		FIELD_PAD("value", 8),
		{ _field_terminator }
	};

	TAG_STRUCT(
		aim_assist_struct_struct_definition,
		"aim_assist_struct",
		"aim_assist_struct_struct_definition",
		"s_aim_assist_parameters",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_angle, "autoaim angle", "the maximum angle that autoaim works at full strength", "degrees" },
		{ _field_real, "autoaim range", "the maximum distance that autoaim works at full strength", "world units" },
		{ _field_angle, "magnetism angle", "the maximum angle that magnetism works at full strength", "degrees" },
		{ _field_real, "magnetism range", "the maximum distance that magnetism works at full strength", "world units" },
		{ _field_angle, "deviation angle", "the maximum angle that a projectile is allowed to deviate from the gun barrel", "degrees" },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 12),
		{ _field_terminator }
	};

	TAG_STRUCT(
		ambient_light_struct_struct_definition,
		"ambient_light_struct",
		"ambient_light_struct_struct_definition",
		"s_ambient_light",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("Ambient light", nullptr),
		{ _field_real_rgb_color, "Min lightmap sample" },
		{ _field_real_rgb_color, "Max lightmap sample" },
		FIELD_EXPLANATION("Ambient light function", "Ambient light scale. (left side min brightness, right side max brightness). Before this scale it determines a global ambient scale, which added to either light will total ~1.0 scale. Then this scale modifies that."),
		FIELD_CUSTOM("function", _field_id_function_editor),
		{ _field_struct, "function", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		angular_velocity_lower_bound_struct_definition,
		"angular_velocity_lower_bound",
		"angular_velocity_lower_bound_struct_definition",
		"s_real$7",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_angle, "guided angular velocity (lower)", nullptr, "degrees per second" },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		animation_aiming_screen_struct_struct_definition,
		"animation_aiming_screen_struct",
		"animation_aiming_screen_struct_struct_definition",
		"s_animation_aiming_screen_bounds",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_angle, "right yaw per frame" },
		{ _field_angle, "left yaw per frame" },
		{ _field_short_integer, "right frame count" },
		{ _field_short_integer, "left frame count" },
		{ _field_angle, "down pitch per frame" },
		{ _field_angle, "up pitch per frame" },
		{ _field_short_integer, "down pitch frame count" },
		{ _field_short_integer, "up pitch frame count" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		animation_blend_screen_block_struct_definition,
		"animation_blend_screen_block",
		"animation_blend_screen_block_struct_definition",
		"s_animation_blend_screen",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "label" },
		{ _field_struct, "aiming screen", &animation_aiming_screen_struct_struct_definition, _field_id_aaim },
		{ _field_terminator }
	};

	TAG_STRUCT(
		animation_destination_state_struct_struct_definition,
		"animation_destination_state_struct",
		"animation_destination_state_struct_struct_definition",
		"s_animation_transition_state$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "state name", "name of the state" },
		{ _field_char_enum, "frame event link", "which frame event to link to", &unnamed_enum$255 },
		FIELD_PAD("value", 1),
		{ _field_char_integer, "index a", "first level sub-index into state" },
		{ _field_char_integer, "index b", "second level sub-index into state" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$255)
	{
		"NO KEYFRAME",
		"KEYFRAME TYPE A",
		"KEYFRAME TYPE B",
		"KEYFRAME TYPE C",
		"KEYFRAME TYPE D"
	};
	STRING_LIST(unnamed_enum$255, unnamed_enum$255_strings, _countof(unnamed_enum$255_strings));

	TAG_STRUCT(
		animation_entry_block_struct_definition,
		"animation_entry_block",
		"animation_entry_block_struct_definition",
		"s_animation_entry",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "label" },
		{ _field_struct, "animation", &animation_index_struct_struct_definition, _field_id_ANII },
		{ _field_terminator }
	};

	TAG_STRUCT(
		animation_frame_event_block_struct_definition,
		"animation_frame_event_block",
		"animation_frame_event_block_struct_definition",
		"s_frame_event",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$253 },
		{ _field_short_integer, "frame" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$253)
	{
		"primary_keyframe",
		"secondary_keyframe",
		"left_foot",
		"right_foot",
		"allow_interruption",
		"transition A",
		"transition B",
		"transition C",
		"transition D",
		"both-feet shuffle",
		"body impact"
	};
	STRING_LIST(unnamed_enum$253, unnamed_enum$253_strings, _countof(unnamed_enum$253_strings));

	TAG_STRUCT(
		animation_graph_contents_struct_struct_definition,
		"animation_graph_contents_struct",
		"animation_graph_contents_struct_struct_definition",
		"s_model_animation_graph_contents",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("MODE-n-STATE GRAPH", nullptr),
		{ _field_block, "modes", &animation_mode_block },
		FIELD_EXPLANATION("SPECIAL CASE ANIMS", nullptr),
		{ _field_block, "vehicle suspension", &vehicle_suspension_block },
		{ _field_block, "object overlays", &object_animation_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		animation_graph_effect_reference_block_struct_definition,
		"animation_graph_effect_reference_block",
		"animation_graph_effect_reference_block_struct_definition",
		"s_animation_graph_effect_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "effect", &effect_group_reference },
		{ _field_word_flags, "flags", &unnamed_enum$246 },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_REFERENCE(effect_group_reference, EFFECT_TAG);

	STRINGS(unnamed_enum$246)
	{
		"allow on player",
		"left arm only",
		"right arm only",
		"first-person only",
		"forward only",
		"reverse only"
	};
	STRING_LIST(unnamed_enum$246, unnamed_enum$246_strings, _countof(unnamed_enum$246_strings));

	VERSIONED_TAG_STRUCT(
		animation_graph_node_struct_definition,
		"animation_graph_node",
		"animation_graph_node_struct_definition",
		"s_animation_graph_node",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 9 },
		{ _field_string_id, "name" },
		{ _field_short_block_index, "next sibling node index" },
		{ _field_short_block_index, "first child node index" },
		{ _field_short_block_index, "parent node index" },
		{ _field_byte_flags, "model flags", &unnamed_enum$244 },
		{ _field_byte_flags, "node joint flags", &unnamed_enum$245 },
		{ _field_real_vector_3d, "base vector" },
		{ _field_real, "vector range" },
		{ _field_real, "z_pos" },
		
		{ _struct_version_mode_equal, 0, 9 },
		{ _field_old_string_id, "name" },
		{ _field_short_block_index, "next sibling node index" },
		{ _field_short_block_index, "first child node index" },
		{ _field_short_block_index, "parent node index" },
		FIELD_PAD("value", 2),
		{ _field_long_flags, "Node joint flags", &unnamed_enum$245 },
		{ _field_real_vector_3d, "base vector" },
		{ _field_real, "vector range" },
		{ _field_real, "z_pos" },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$244)
	{
		"primary model",
		"secondary model",
		"local root",
		"left hand",
		"right hand",
		"left arm member"
	};
	STRING_LIST(unnamed_enum$244, unnamed_enum$244_strings, _countof(unnamed_enum$244_strings));

	STRINGS(unnamed_enum$245)
	{
		"ball-socket",
		"hinge",
		"no movement"
	};
	STRING_LIST(unnamed_enum$245, unnamed_enum$245_strings, _countof(unnamed_enum$245_strings));

	TAG_STRUCT(
		animation_graph_sound_reference_block_struct_definition,
		"animation_graph_sound_reference_block",
		"animation_graph_sound_reference_block_struct_definition",
		"s_animation_graph_sound_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_word_flags, "flags", &unnamed_enum$246 },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		animation_ik_block_struct_definition,
		"animation_ik_block",
		"animation_ik_block_struct_definition",
		"s_animation_ik_point",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "marker", "the marker name on the object being attached" },
		{ _field_string_id, "attach to marker", "the marker name object (weapon, vehicle, etc.) the above marker is being attached to" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		animation_index_struct_struct_definition,
		"animation_index_struct",
		"animation_index_struct_struct_definition",
		"s_animation_id",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "graph index" },
		{ _field_short_block_index, "animation" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		animation_mode_block_struct_definition,
		"animation_mode_block",
		"animation_mode_block_struct_definition",
		"s_animation_mode",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "label" },
		{ _field_block, "weapon class", &weapon_class_block },
		{ _field_block, "mode ik", &animation_ik_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		animation_pool_struct_definition,
		"animation_pool",
		"animation_pool_struct_definition",
		"s_model_animation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 5, 26 },
		{ _field_string_id, "name" },
		FIELD_CUSTOM("Play on player", _field_id_edit),
		{ _field_long_integer, "node list checksum" },
		{ _field_long_integer, "production checksum" },
		{ _field_long_integer, "import_checksum" },
		{ _field_char_enum, "type", &unnamed_enum$247 },
		{ _field_char_enum, "frame info type", &unnamed_enum$248 },
		{ _field_char_block_index, "blend screen" },
		{ _field_char_integer, "node count" },
		{ _field_short_integer, "frame count" },
		{ _field_byte_flags, "internal flags", &unnamed_enum$249 },
		{ _field_byte_flags, "production flags", &unnamed_enum$250 },
		{ _field_word_flags, "playback flags", &unnamed_enum$251 },
		{ _field_char_enum, "desired compression", &unnamed_enum$252 },
		{ _field_char_enum, "current compression", &unnamed_enum$252 },
		{ _field_real, "weight" },
		{ _field_short_integer, "loop frame index" },
		{ _field_short_block_index, "value" },
		{ _field_short_block_index, "value" },
		FIELD_PAD("value", 2),
		{ _field_data, "value", &aligned_animation_data_definition },
		{ _field_struct, "value", &packed_data_sizes_struct_struct_definition, _field_id_apds },
		{ _field_block, "frame events", &animation_frame_event_block },
		{ _field_block, "sound events", &animation_sound_event_block },
		{ _field_block, "effect events", &animation_effect_event_block },
		{ _field_block, "object-space parent nodes", &object_space_node_data_block },
		
		{ _struct_version_mode_equal, 4, 28 },
		{ _field_string_id, "name" },
		{ _field_long_integer, "node list checksum" },
		{ _field_long_integer, "production checksum" },
		{ _field_long_integer, "import_checksum" },
		{ _field_char_enum, "type", &unnamed_enum$247 },
		{ _field_char_enum, "frame info type", &unnamed_enum$248 },
		{ _field_char_block_index, "blend screen" },
		{ _field_char_integer, "node count" },
		{ _field_short_integer, "frame count" },
		{ _field_byte_flags, "internal flags", &unnamed_enum$249 },
		{ _field_byte_flags, "production flags", &unnamed_enum$250 },
		{ _field_word_flags, "playback flags", &unnamed_enum$251 },
		{ _field_char_enum, "desired compression", &unnamed_enum$252 },
		{ _field_char_enum, "current compression", &unnamed_enum$252 },
		{ _field_real, "weight" },
		{ _field_long_integer, "parent graph index" },
		{ _field_long_integer, "parent graph block index" },
		{ _field_long_integer, "parent graph block offset" },
		{ _field_short_integer, "parent graph starting point index" },
		{ _field_short_integer, "loop frame index" },
		{ _field_short_block_index, "parent animation" },
		{ _field_short_block_index, "next animation" },
		{ _field_data, "animation data", &aligned_animation_data_definition },
		{ _field_struct, "data sizes", &packed_data_sizes_struct_struct_definition, _field_id_apds },
		{ _field_block, "frame events", &animation_frame_event_block },
		{ _field_block, "sound events", &animation_sound_event_block },
		{ _field_block, "effect events", &animation_effect_event_block },
		{ _field_block, "object-space parent nodes", &object_space_node_data_block },
		
		{ _struct_version_mode_equal, 3, 28 },
		{ _field_string_id, "name" },
		{ _field_long_integer, "node list checksum" },
		{ _field_long_integer, "production checksum" },
		{ _field_long_integer, "import_checksum" },
		{ _field_char_enum, "type", &unnamed_enum$247 },
		{ _field_char_enum, "frame info type", &unnamed_enum$248 },
		{ _field_char_block_index, "blend screen" },
		{ _field_char_integer, "node count" },
		{ _field_short_integer, "frame count" },
		{ _field_byte_flags, "internal flags", &unnamed_enum$249 },
		{ _field_byte_flags, "production flags", &unnamed_enum$250 },
		{ _field_word_flags, "playback flags", &unnamed_enum$251 },
		{ _field_char_enum, "desired compression", &unnamed_enum$252 },
		{ _field_char_enum, "current compression", &unnamed_enum$252 },
		{ _field_real, "weight" },
		{ _field_long_integer, "value" },
		{ _field_short_integer, "value" },
		{ _field_short_integer, "value" },
		{ _field_short_integer, "value" },
		{ _field_short_integer, "loop frame index" },
		{ _field_short_block_index, "parent animation" },
		{ _field_short_block_index, "next animation" },
		{ _field_data, "animation data", &animation_data_definition },
		{ _field_struct, "data sizes", &packed_data_sizes_struct_struct_definition, _field_id_apds },
		{ _field_block, "frame events", &animation_frame_event_block },
		{ _field_block, "sound events", &animation_sound_event_block },
		{ _field_block, "effect events", &animation_effect_event_block },
		{ _field_block, "object-space parent nodes", &object_space_node_data_block },
		
		{ _struct_version_mode_equal, 2, 25 },
		{ _field_string_id, "name" },
		{ _field_long_integer, "node list checksum" },
		{ _field_long_integer, "production checksum" },
		{ _field_long_integer, "import_checksum" },
		{ _field_char_enum, "type", &unnamed_enum$247 },
		{ _field_char_enum, "frame info type", &unnamed_enum$248 },
		{ _field_char_block_index, "blend screen" },
		{ _field_char_integer, "node count" },
		{ _field_short_integer, "frame count" },
		{ _field_byte_flags, "internal flags", &unnamed_enum$249 },
		{ _field_byte_flags, "production flags", &unnamed_enum$250 },
		{ _field_word_flags, "playback flags", &unnamed_enum$251 },
		{ _field_char_enum, "desired compression", &unnamed_enum$252 },
		{ _field_char_enum, "current compression", &unnamed_enum$252 },
		{ _field_real, "weight" },
		{ _field_short_integer, "loop frame index" },
		{ _field_short_integer, "max random start frame index" },
		{ _field_short_block_index, "parent animation" },
		{ _field_short_block_index, "next animation" },
		{ _field_data, "animation data", &animation_data_definition },
		{ _field_struct, "data sizes", &packed_data_sizes_struct_struct_definition, _field_id_apds },
		{ _field_block, "frame events", &animation_frame_event_block },
		{ _field_block, "sound events", &animation_sound_event_block },
		{ _field_block, "effect events", &animation_effect_event_block },
		{ _field_block, "object-space parent nodes", &object_space_node_data_block_v0_block },
		
		{ _struct_version_mode_equal, 1, 23 },
		{ _field_string_id, "name" },
		{ _field_long_integer, "node list checksum" },
		{ _field_long_integer, "production checksum" },
		{ _field_char_enum, "type", &unnamed_enum$247 },
		{ _field_char_enum, "frame info type", &unnamed_enum$248 },
		{ _field_char_block_index, "blend screen" },
		{ _field_char_integer, "node count" },
		{ _field_short_integer, "frame count" },
		{ _field_byte_flags, "internal flags", &unnamed_enum$249 },
		{ _field_byte_flags, "production flags", &unnamed_enum$250 },
		{ _field_word_flags, "playback flags", &unnamed_enum$251 },
		{ _field_char_enum, "desired compression", &unnamed_enum$252 },
		{ _field_char_enum, "current compression", &unnamed_enum$252 },
		{ _field_real, "weight" },
		{ _field_short_integer, "loop frame index" },
		{ _field_short_integer, "max random start frame index" },
		{ _field_short_block_index, "parent animation" },
		{ _field_short_block_index, "next animation" },
		{ _field_data, "animation data", &animation_data_definition },
		{ _field_block, "frame events", &animation_frame_event_block },
		{ _field_block, "sound events", &animation_sound_event_block },
		{ _field_struct, "data sizes", &packed_data_sizes_struct_struct_definition, _field_id_apds },
		{ _field_long_integer, "import_checksum" },
		
		{ _struct_version_mode_equal, 0, 31 },
		{ _field_string_id, "name" },
		{ _field_char_enum, "type", &unnamed_enum$247 },
		{ _field_char_enum, "frame info type", &unnamed_enum$248 },
		{ _field_char_integer, "blend screen" },
		{ _field_char_integer, "node count" },
		{ _field_short_integer, "frame count" },
		{ _field_short_integer, "frame size" },
		{ _field_long_integer, "node list checksum" },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "playback flags", &unnamed_enum$251 },
		{ _field_byte_flags, "internal flags", &unnamed_enum$249 },
		{ _field_byte_flags, "production flags", &unnamed_enum$250 },
		{ _field_char_integer, "static node flag data size" },
		{ _field_char_integer, "animated node flag data size" },
		{ _field_real, "weight" },
		{ _field_short_integer, "loop frame index" },
		{ _field_short_integer, "max random start frame index" },
		{ _field_short_integer, "next animation" },
		{ _field_char_enum, "desired compression", &unnamed_enum$252 },
		{ _field_char_enum, "current compression", &unnamed_enum$252 },
		{ _field_array, "node trans. flag data", &unnamed_array$21 },
		{ _field_array, "node rotation flag data", &unnamed_array$22 },
		{ _field_array, "node scale flag data", &unnamed_array$23 },
		{ _field_short_integer, "movement_data size" },
		{ _field_short_integer, "default_data size" },
		{ _field_long_integer, "uncompressed_data size" },
		{ _field_long_integer, "compressed_data size" },
		{ _field_data, "animation data", &animation_data_definition },
		{ _field_block, "frame events", &animation_frame_event_block },
		{ _field_block, "sound events", &animation_sound_event_block },
		{ _field_long_integer, "production checksum" },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$247)
	{
		"base",
		"overlay",
		"replacement"
	};
	STRING_LIST(unnamed_enum$247, unnamed_enum$247_strings, _countof(unnamed_enum$247_strings));

	STRINGS(unnamed_enum$248)
	{
		"none",
		"dx,dy",
		"dx,dy,dyaw",
		"dx,dy,dz,dyaw"
	};
	STRING_LIST(unnamed_enum$248, unnamed_enum$248_strings, _countof(unnamed_enum$248_strings));

	STRINGS(unnamed_enum$249)
	{
		"<unused0>!",
		"world relative",
		"<unused1>!",
		"<unused2>!",
		"<unused3>!",
		"compression disabled",
		"old production checksum",
		"valid production checksum"
	};
	STRING_LIST(unnamed_enum$249, unnamed_enum$249_strings, _countof(unnamed_enum$249_strings));

	STRINGS(unnamed_enum$250)
	{
		"do not monitor changes",
		"verify sound events",
		"do not inherit for player graphs"
	};
	STRING_LIST(unnamed_enum$250, unnamed_enum$250_strings, _countof(unnamed_enum$250_strings));

	STRINGS(unnamed_enum$251)
	{
		"disable interpolation_in",
		"disable interpolation_out",
		"disable mode ik",
		"disable weapon ik",
		"disable weapon aim/1st person",
		"disable look screen",
		"disable transition adjustment"
	};
	STRING_LIST(unnamed_enum$251, unnamed_enum$251_strings, _countof(unnamed_enum$251_strings));

	STRINGS(unnamed_enum$252)
	{
		"best score",
		"best compression",
		"best accuracy",
		"best fullframe",
		"best small keyframe",
		"best large keyframe"
	};
	STRING_LIST(unnamed_enum$252, unnamed_enum$252_strings, _countof(unnamed_enum$252_strings));

	TAG_STRUCT(
		animation_reference_block_struct_definition,
		"animation_reference_block",
		"animation_reference_block_struct_definition",
		"s_animation_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$550 },
		FIELD_EXPLANATION("Primary Intro Transition", "Defines the primary intro transitional animation"),
		{ _field_long_integer, "animation period", nullptr, "milliseconds" },
		{ _field_block, "keyframes", &screen_animation_keyframe_reference_block },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 12),
		FIELD_EXPLANATION("Primary Outro Transition", "Defines the primary outro transitional animation"),
		{ _field_long_integer, "animation period", nullptr, "milliseconds" },
		{ _field_block, "keyframes", &screen_animation_keyframe_reference_block },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 12),
		FIELD_EXPLANATION("Ambient Animation", "Defines the ambient animation"),
		{ _field_long_integer, "animation period", nullptr, "milliseconds" },
		{ _field_short_enum, "ambient animation looping style", &unnamed_enum$551 },
		FIELD_PAD("value", 2),
		{ _field_block, "keyframes", &screen_animation_keyframe_reference_block },
		FIELD_USELESS_PAD("value", 16),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$550)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$550, unnamed_enum$550_strings, _countof(unnamed_enum$550_strings));

	STRINGS(unnamed_enum$551)
	{
		"NONE",
		"reverse loop",
		"loop",
		"don\'t loop"
	};
	STRING_LIST(unnamed_enum$551, unnamed_enum$551_strings, _countof(unnamed_enum$551_strings));

	VERSIONED_TAG_STRUCT(
		animation_resources_struct_definition,
		"animation_resources",
		"animation_resources_struct_definition",
		"s_animation_graph_resources",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 10 },
		FIELD_EXPLANATION("GRAPH DATA", nullptr),
		{ _field_tag_reference, "parent animation graph", &model_animation_graph_group_reference$2 },
		{ _field_byte_flags, "inheritance flags", &unnamed_enum$242 },
		{ _field_byte_flags, "private flags", &unnamed_enum$243 },
		{ _field_short_integer, "animation codec pack" },
		{ _field_block, "skeleton nodes", &animation_graph_node_block },
		{ _field_block, "sound references", &animation_graph_sound_reference_block },
		{ _field_block, "effect references", &animation_graph_effect_reference_block },
		{ _field_block, "blend screens", &animation_blend_screen_block },
		{ _field_block, "animations", &animation_pool_block, _field_id_wide },
		
		{ _struct_version_mode_equal, 1, 9 },
		FIELD_EXPLANATION("GRAPH DATA", nullptr),
		{ _field_tag_reference, "parent animation graph", &model_animation_graph_group_reference$2 },
		{ _field_byte_flags, "inheritance flags", &unnamed_enum$242 },
		{ _field_byte_flags, "private flags", &unnamed_enum$243 },
		{ _field_short_integer, "animation codec pack" },
		{ _field_block, "skeleton nodes", &animation_graph_node_block },
		{ _field_block, "sound references", &animation_graph_sound_reference_block },
		{ _field_block, "blend screens", &animation_blend_screen_block },
		{ _field_block, "animations", &animation_pool_block, _field_id_wide },
		
		{ _struct_version_mode_equal, 0, 10 },
		FIELD_EXPLANATION("GRAPH DATA", nullptr),
		{ _field_tag_reference, "parent animation graph", &model_animation_graph_group_reference$2 },
		{ _field_block, "skeleton nodes", &animation_graph_node_block },
		FIELD_PAD("value", 4),
		{ _field_block, "sound references", &animation_graph_sound_reference_block },
		{ _field_block, "blend screens", &animation_blend_screen_block },
		{ _field_block, "animations", &animation_pool_block, _field_id_wide },
		{ _field_word_flags, "animation graph flags", &unnamed_enum$243 },
		{ _field_short_integer, "animation codec pack" },
		FIELD_PAD("value", 32),
		
		{ _field_terminator }
	};

	TAG_REFERENCE(model_animation_graph_group_reference$2, MODEL_ANIMATION_GRAPH_TAG);

	STRINGS(unnamed_enum$242)
	{
		"inherit root trans scale only",
		"inherit for use on player"
	};
	STRING_LIST(unnamed_enum$242, unnamed_enum$242_strings, _countof(unnamed_enum$242_strings));

	STRINGS(unnamed_enum$243)
	{
		"prepared for cache",
		"unused",
		"imported with codec compressors",
		"unused smelly flag",
		"written to cache",
		"animation data reordered"
	};
	STRING_LIST(unnamed_enum$243, unnamed_enum$243_strings, _countof(unnamed_enum$243_strings));

	TAG_STRUCT(
		animation_sound_event_block_struct_definition,
		"animation_sound_event_block",
		"animation_sound_event_block_struct_definition",
		"s_sound_event",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "sound" },
		{ _field_short_integer, "frame" },
		{ _field_string_id, "marker name" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		animation_transition_block_struct_definition,
		"animation_transition_block",
		"animation_transition_block_struct_definition",
		"s_animation_transition_source",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "full name", "name of the mode & state of the source" },
		{ _field_struct, "state info", &animation_transition_state_struct_struct_definition, _field_id_ATSS },
		{ _field_block, "destinations", &animation_transition_destination_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		animation_transition_destination_block_struct_definition,
		"animation_transition_destination_block",
		"animation_transition_destination_block_struct_definition",
		"s_animation_transition_destination",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "full name", "name of the mode & state this transitions to" },
		{ _field_string_id, "mode", "name of the mode" },
		{ _field_struct, "state info", &animation_destination_state_struct_struct_definition, _field_id_ATSS },
		{ _field_struct, "animation", &animation_index_struct_struct_definition, _field_id_ANII },
		{ _field_terminator }
	};

	TAG_STRUCT(
		animation_transition_state_struct_struct_definition,
		"animation_transition_state_struct",
		"animation_transition_state_struct_struct_definition",
		"s_animation_transition_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "state name", "name of the state" },
		FIELD_PAD("value", 2),
		{ _field_char_integer, "index a", "first level sub-index into state" },
		{ _field_char_integer, "index b", "second level sub-index into state" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		antenna_block_struct_definition,
		"antenna_block",
		"antenna_block_struct_definition",
		"s_antenna_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_old_string_id, "attachment marker name", "the marker name where the antenna should be attached" },
		{ _field_tag_reference, "bitmaps", &bitmap_group_reference$2 },
		{ _field_tag_reference, "physics", &point_physics_group_reference },
		FIELD_PAD("value", 80),
		{ _field_real_fraction, "spring strength coefficient", "strength of the spring (larger values make the spring stronger)" },
		{ _field_real, "falloff pixels" },
		{ _field_real, "cutoff pixels" },
		FIELD_PAD("value", 40),
		{ _field_block, "vertices", &antenna_vertex_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(bitmap_group_reference$2, BITMAP_TAG);

	TAG_REFERENCE(point_physics_group_reference, POINT_PHYSICS_TAG);

	TAG_STRUCT(
		antenna_vertex_block_struct_definition,
		"antenna_vertex_block",
		"antenna_vertex_block_struct_definition",
		"s_antenna_vertex",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_fraction, "spring strength coefficient", "strength of the spring (larger values make the spring stronger)" },
		FIELD_PAD("value", 24),
		{ _field_real_euler_angles_2d, "angles", "direction toward next vertex" },
		{ _field_real, "length", "distance between this vertex and the next", "world units" },
		{ _field_short_integer, "sequence index", "bitmap group sequence index for this vertex's texture" },
		FIELD_PAD("value", 2),
		{ _field_real_argb_color, "color", "color at this vertex" },
		{ _field_real_argb_color, "LOD color", "color at this vertex for the low-LOD line primitives" },
		FIELD_PAD("value", 40),
		FIELD_PAD("value", 12),
		{ _field_terminator }
	};

	TAG_STRUCT(
		anti_gravity_point_definition_block_struct_definition,
		"anti_gravity_point_definition_block",
		"anti_gravity_point_definition_block_struct_definition",
		"s_anti_gravity_point_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "marker name" },
		{ _field_long_flags, "flags", &unnamed_enum$512 },
		{ _field_real, "antigrav strength" },
		{ _field_real, "antigrav offset" },
		{ _field_real, "antigrav height" },
		{ _field_real, "antigrav damp factor" },
		{ _field_real, "antigrav normal k1" },
		{ _field_real, "antigrav normal k0" },
		{ _field_real, "radius" },
		FIELD_PAD("value", 12),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_string_id, "damage source region name" },
		{ _field_real, "default state error" },
		{ _field_real, "minor damage error" },
		{ _field_real, "medium damage error" },
		{ _field_real, "major damage error" },
		{ _field_real, "destroyed state error" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$512)
	{
		"gets damage from region"
	};
	STRING_LIST(unnamed_enum$512, unnamed_enum$512_strings, _countof(unnamed_enum$512_strings));

	TAG_STRUCT(
		area_set_block_struct_definition,
		"area_set_block",
		"area_set_block_struct_definition",
		"s_area_reference_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "area" },
		FIELD_PAD("value", 2),
		{ _field_long_integer, "deprecated" },
		FIELD_PAD("value", 44),
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		area_struct_definition,
		"area",
		"area_struct_definition",
		"s_area_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 9 },
		{ _field_string, "name" },
		{ _field_long_flags, "area flags", &unnamed_enum$74 },
		FIELD_SKIP("value", 20),
		{ _field_short_integer, "runtime starting index" },
		{ _field_short_integer, "runtime count" },
		FIELD_PAD("value", 64),
		{ _field_short_integer, "manual reference frame" },
		FIELD_PAD("WP", 2),
		{ _field_block, "flight_hints", &flight_reference_block },
		
		{ _struct_version_mode_equal, 0, 7 },
		{ _field_string, "name" },
		{ _field_long_flags, "area flags", &unnamed_enum$74 },
		FIELD_PAD("value", 28),
		FIELD_SKIP("value", 16),
		FIELD_SKIP("value", 4),
		FIELD_PAD("value", 64),
		FIELD_PAD("value", 48),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$74)
	{
		"vehicle area",
		"perch",
		"manual reference frame"
	};
	STRING_LIST(unnamed_enum$74, unnamed_enum$74_strings, _countof(unnamed_enum$74_strings));

	TAG_STRUCT(
		armor_modifier_block_struct_definition,
		"armor_modifier_block",
		"armor_modifier_block_struct_definition",
		"s_armor_modifier_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_real, "damage multiplier" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$42,
		"array",
		"array",
		"s_array$42",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$43,
		"array",
		"array",
		"s_array$43",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "node weight" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$26,
		"array",
		"array",
		"s_array$26",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "node index (OLD)" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$2,
		"array",
		"array",
		"s_array$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "parameters" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$46,
		"array",
		"array",
		"s_array$46",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_pointer, "value" },
		FIELD_PAD("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$45,
		"array",
		"array",
		"s_array$45",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_vector_3d, "four vectors x" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "four vectors y" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "four vectors z" },
		FIELD_SKIP("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$44,
		"array",
		"array",
		"s_array$44",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_vector_3d, "sphere" },
		FIELD_SKIP("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$27,
		"array",
		"array",
		"s_array$27",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "node_weight" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$48,
		"array",
		"array",
		"s_array$48",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "salt" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$47,
		"array",
		"array",
		"s_array$47",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "vertex index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array,
		"array",
		"array",
		"s_array",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "child index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$18,
		"array",
		"array",
		"s_array$18",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "value", &create_new_variant_struct_struct_definition, _field_id_cnvs },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$17,
		"array",
		"array",
		"s_array$17",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "node weight" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$9,
		"array",
		"array",
		"s_array$9",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "node weight" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$8,
		"array",
		"array",
		"s_array$8",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$16,
		"array",
		"array",
		"s_array$16",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$52,
		"array",
		"array",
		"s_array$52",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_vector_3d, "sphere" },
		FIELD_SKIP("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$15,
		"array",
		"array",
		"s_array$15",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "node weight" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$14,
		"array",
		"array",
		"s_array$14",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$13,
		"array",
		"array",
		"s_array$13",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_array, "node indices", &unnamed_array$13 },
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$12,
		"array",
		"array",
		"s_array$12",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "node weight" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$11,
		"array",
		"array",
		"s_array$11",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$10,
		"array",
		"array",
		"s_array$10",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_array, "node indices", &unnamed_array$10 },
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$7,
		"array",
		"array",
		"s_array$7",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_array, "node indices", &unnamed_array$7 },
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$6,
		"array",
		"array",
		"s_array$6",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "node weight" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$5,
		"array",
		"array",
		"s_array$5",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$4,
		"array",
		"array",
		"s_array$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "node weight" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$24,
		"array",
		"array",
		"s_array$24",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$25,
		"array",
		"array",
		"s_array$25",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "node weight" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$28,
		"array",
		"array",
		"s_array$28",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "node index (NEW)" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$29,
		"array",
		"array",
		"s_array$29",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_vertex_buffer, "vertex buffer" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$3,
		"array",
		"array",
		"s_array$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$23,
		"array",
		"array",
		"s_array$23",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$30,
		"array",
		"array",
		"s_array$30",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$35,
		"array",
		"array",
		"s_array$35",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "node index (OLD)" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$21,
		"array",
		"array",
		"s_array$21",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$20,
		"array",
		"array",
		"s_array$20",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$19,
		"array",
		"array",
		"s_array$19",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$31,
		"array",
		"array",
		"s_array$31",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "node weight" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$32,
		"array",
		"array",
		"s_array$32",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "red coefficient" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$22,
		"array",
		"array",
		"s_array$22",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$51,
		"array",
		"array",
		"s_array$51",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_long_integer, "num spheres" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_array, "four vectors storage", &unnamed_array$51 },
		{ _field_real_vector_3d, "sphere" },
		FIELD_SKIP("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$33,
		"array",
		"array",
		"s_array$33",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "green coefficient" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$50,
		"array",
		"array",
		"s_array$50",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_pointer, "value" },
		FIELD_PAD("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$49,
		"array",
		"array",
		"s_array$49",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "geometry block info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$34,
		"array",
		"array",
		"s_array$34",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "blue coefficient" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$36,
		"array",
		"array",
		"s_array$36",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "node_weight" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$37,
		"array",
		"array",
		"s_array$37",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "node index (NEW)" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$38,
		"array",
		"array",
		"s_array$38",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "vertex index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$39,
		"array",
		"array",
		"s_array$39",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "triangle index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$40,
		"array",
		"array",
		"s_array$40",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "vertex index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		array$41,
		"array",
		"array",
		"s_array$41",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "vertex index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		background_animation_keyframe_reference_block_struct_definition,
		"background_animation_keyframe_reference_block",
		"background_animation_keyframe_reference_block_struct_definition",
		"s_animation_keyframe_reference$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "start transition index" },
		{ _field_real, "alpha" },
		{ _field_real_point_3d, "position" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		ball_and_socket_constraints_block_struct_definition,
		"ball_and_socket_constraints_block",
		"ball_and_socket_constraints_block_struct_definition",
		"s_physics_model_ball_and_socket_constraint",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "constraint bodies", &constraint_bodies_struct_struct_definition, _field_id_csbs },
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		barrel_firing_effect_struct_definition,
		"barrel_firing_effect",
		"barrel_firing_effect_struct_definition",
		"s_barrel_firing_effect",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 8 },
		{ _field_short_integer, "shot count lower bound", "the minimum number of times this firing effect will be used, once it has been chosen" },
		{ _field_short_integer, "shot count upper bound", "the maximum number of times this firing effect will be used, once it has been chosen" },
		{ _field_tag_reference, "firing effect", "this effect is used when the weapon is loaded and fired normally", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "misfire effect", "this effect is used when the weapon is loaded but fired while overheated", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "empty effect", "this effect is used when the weapon is not loaded", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "firing damage", "this effect is used when the weapon is loaded and fired normally", &damage_effect_group_reference },
		{ _field_tag_reference, "misfire damage", "this effect is used when the weapon is loaded but fired while overheated", &damage_effect_group_reference },
		{ _field_tag_reference, "empty damage", "this effect is used when the weapon is not loaded", &damage_effect_group_reference },
		
		{ _struct_version_mode_equal, 0, 9 },
		{ _field_short_integer, "shot count lower bound", "the minimum number of times this firing effect will be used, once it has been chosen" },
		{ _field_short_integer, "shot count upper bound", "the maximum number of times this firing effect will be used, once it has been chosen" },
		FIELD_PAD("value", 32),
		{ _field_tag_reference, "firing effect", "this effect is used when the weapon is loaded and fired normally", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "misfire effect", "this effect is used when the weapon is loaded but fired while overheated", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "empty effect", "this effect is used when the weapon is not loaded", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "firing damage", "this effect is used when the weapon is loaded and fired normally", &damage_effect_group_reference },
		{ _field_tag_reference, "misfire damage", "this effect is used when the weapon is loaded but fired while overheated", &damage_effect_group_reference },
		{ _field_tag_reference, "empty damage", "this effect is used when the weapon is not loaded", &damage_effect_group_reference },
		
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(sound_group_effect_group_reference$2)
	{
		SOUND_TAG,
		EFFECT_TAG,
		INVALID_TAG
	};

	TAG_REFERENCE(damage_effect_group_reference, DAMAGE_EFFECT_TAG);

	TAG_STRUCT(
		beam_block_struct_definition,
		"beam_block",
		"beam_block_struct_definition",
		"s_beam_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "shader", &shader_group_reference },
		{ _field_short_block_index, "location" },
		FIELD_PAD("value", 2),
		FIELD_EXPLANATION("COLOR", "tint color of the beam"),
		{ _field_struct, "color", &color_function_struct_struct_definition, _field_id_CLFN },
		FIELD_EXPLANATION("ALPHA", "how much to fade out beam"),
		{ _field_struct, "alpha", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_EXPLANATION("WIDTH", "how wide in world units"),
		{ _field_struct, "width", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_EXPLANATION("LENGTH", "how long in world units"),
		{ _field_struct, "length", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_EXPLANATION("YAW", "rotate the marker"),
		{ _field_struct, "yaw", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_EXPLANATION("PITCH", "rotate the marker"),
		{ _field_struct, "pitch", &scalar_function_struct_struct_definition, _field_id_SCFN },
		{ _field_terminator }
	};

	TAG_REFERENCE(shader_group_reference, SHADER_TAG);

	TAG_STRUCT(
		behavior_names_block_struct_definition,
		"behavior_names_block",
		"behavior_names_block_struct_definition",
		"s_style_behavior_name",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "behavior name" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		biped_definition_struct_definition,
		"biped_definition",
		"biped_definition_struct_definition",
		"s_biped_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 138 },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ UNIT $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$106 },
		{ _field_short_enum, "default team", &unnamed_enum$107 },
		{ _field_short_enum, "constant sound volume", &unnamed_enum$108 },
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "integrated light toggle", &effect_group_reference },
		FIELD_USELESS_PAD("value", 8),
		{ _field_angle, "camera field of view", nullptr, "degrees" },
		{ _field_real, "camera stiffness" },
		{ _field_struct, "unit camera", &unit_camera_struct_struct_definition, _field_id_uncs },
		{ _field_struct, "acceleration", &unit_seat_acceleration_struct_struct_definition, _field_id_usas },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "soft ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "soft ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "hard ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death time", nullptr, "seconds" },
		{ _field_real, "distance of evade anim", "this must be set to tell the AI how far it should expect our evade animation to move us", "world units" },
		{ _field_real, "distance of dive anim", "this must be set to tell the AI how far it should expect our dive animation to move us", "world units" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "stunned movement threshold", "if we take this much damage in a short space of time we will play our 'stunned movement' animations", nullptr, "[0,1]" },
		{ _field_real, "feign death chance", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign repeat chance", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "spawned turret character", "automatically created character when this unit is driven", &character_group_reference$2 },
		{ _field_short_integer_bounds, "spawned actor count", "number of actors which we spawn" },
		{ _field_real, "spawned velocity", "velocity at which we throw spawned actors" },
		{ _field_angle, "aiming velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "aiming acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual aiming modifier", nullptr, nullptr, "[0,1]" },
		{ _field_angle, "looking velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "looking acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_string_id, "right_hand_node", "where the primary weapon is attached" },
		{ _field_string_id, "left_hand_node", "where the seconday weapon is attached (for dual-pistol modes)" },
		{ _field_struct, "more damn nodes", &unit_additional_node_names_struct_definition, _field_id_uHnd }, // structure_version:1
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "melee damage", &damage_effect_group_reference },
		{ _field_struct, "your momma", &unit_boarding_melee_struct_definition, _field_id_ubms }, // structure_version:1
		{ _field_short_enum, "motion sensor blip size", &unnamed_enum$109 },
		{ _field_struct, "campaign metagame bucket", &campaign_metagame_bucket_block_struct_definition, _field_id_cmtb },
		{ _field_block, "postures", &unit_postures_block },
		{ _field_block, "NEW HUD INTERFACES", &unit_hud_reference_block },
		{ _field_block, "dialogue variants", &dialogue_variant_block },
		{ _field_real, "grenade velocity", nullptr, "world units per second" },
		{ _field_short_enum, "grenade type", &unnamed_enum$112 },
		{ _field_short_integer, "grenade count" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_block, "powered seats", &powered_seat_block },
		{ _field_block, "weapons", &unit_weapon_block },
		{ _field_block, "seats", &unit_seat_block },
		FIELD_EXPLANATION("Boost", nullptr),
		{ _field_struct, "boost", &unit_boost_struct_struct_definition, _field_id_unknown },
		FIELD_EXPLANATION("Lipsync", nullptr),
		{ _field_struct, "lipsync", &unit_lipsync_scales_struct_definition, _field_id_ulYc }, // structure_version:1
		FIELD_EXPLANATION("$$$ BIPED $$$", nullptr),
		{ _field_angle, "moving turning speed", nullptr, "degrees per second" },
		{ _field_long_flags, "flags", &unnamed_enum$115 },
		{ _field_angle, "stationary turning threshold" },
		FIELD_USELESS_PAD("value", 16),
		FIELD_USELESS_PAD("value", 32),
		FIELD_EXPLANATION("jumping and landing", nullptr),
		{ _field_real, "jump velocity", nullptr, "world units per second" },
		FIELD_USELESS_PAD("value", 28),
		{ _field_real, "maximum soft landing time", "the longest amount of time the biped can take to recover from a soft landing", "seconds" },
		{ _field_real, "maximum hard landing time", "the longest amount of time the biped can take to recover from a hard landing", "seconds" },
		{ _field_real, "minimum soft landing velocity", "below this velocity the biped does not react when landing", "world units per second" },
		{ _field_real, "minimum hard landing velocity", "below this velocity the biped will not do a soft landing when returning to the ground", "world units per second" },
		{ _field_real, "maximum hard landing velocity", "the velocity corresponding to the maximum landing time", "world units per second" },
		{ _field_real, "death hard landing velocity", "the maximum velocity with which a character can strike the ground and live", "world units per second" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real, "stun duration", "0 is the default.  Bipeds are stuned when damaged by vehicle collisions, also some are when they take emp damage" },
		FIELD_EXPLANATION("camera, collision, and autoaim", nullptr),
		{ _field_real, "standing camera height", nullptr, "world units" },
		{ _field_real, "crouching camera height", nullptr, "world units" },
		{ _field_real, "crouch transition time", nullptr, "seconds" },
		{ _field_angle, "camera interpolation start", "looking-downward angle that starts camera interpolation to fp position", "degrees" },
		{ _field_angle, "camera interpolation end", "looking-downward angle at which camera interpolation to fp position is complete", "degrees" },
		{ _field_real, "camera forward movement scale", "amount of fp camera movement forward and back (1.0 is full)" },
		{ _field_real, "camera side movement scale", "amount of fp camera movement side-to-side (1.0 is full)" },
		{ _field_real, "camera vertical movement scale", "amount of fp camera movement vertically (1.0 is full)" },
		{ _field_real, "camera exclusion distance", "fp camera must always be at least this far out from root node", "world units" },
		{ _field_real, "autoaim width", nullptr, "world units" },
		{ _field_struct, "lock-on data", &biped_lock_on_data_struct_definition, _field_id_blod }, // structure_version:1
		FIELD_PAD("value", 16),
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "head shot acc scale", "when the biped ragdolls from a head shot it acceleartes based on this value.  0 defaults to the standard acceleration scale" },
		{ _field_tag_reference, "area damage effect", &effect_group_reference },
		{ _field_struct, "physics", &character_physics_struct_struct_definition, _field_id_chpy },
		{ _field_block, "contact points", "these are the points where the biped touches the ground", &contact_point_block },
		{ _field_tag_reference, "reanimation character", "when the flood reanimate this guy, he turns into a ...", &character_group_reference$3 },
		{ _field_tag_reference, "death spawn character", "when I die, out of the ashes of my death crawls a ...", &character_group_reference$3 },
		{ _field_short_integer, "death spawn count" },
		FIELD_PAD("value", 2),
		
		{ _struct_version_mode_equal, 0, 166 },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ UNIT $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$106 },
		{ _field_short_enum, "default team", &unnamed_enum$107 },
		{ _field_short_enum, "constant sound volume", &unnamed_enum$108 },
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "integrated light toggle", &effect_group_reference },
		FIELD_USELESS_PAD("value", 8),
		{ _field_angle, "camera field of view", nullptr, "degrees" },
		{ _field_real, "camera stiffness" },
		{ _field_struct, "unit camera", &unit_camera_struct_struct_definition, _field_id_uncs },
		{ _field_struct, "acceleration", &unit_seat_acceleration_struct_struct_definition, _field_id_usas },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "soft ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "soft ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "hard ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death time", nullptr, "seconds" },
		{ _field_real, "distance of evade anim", "this must be set to tell the AI how far it should expect our evade animation to move us", "world units" },
		{ _field_real, "distance of dive anim", "this must be set to tell the AI how far it should expect our dive animation to move us", "world units" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "stunned movement threshold", "if we take this much damage in a short space of time we will play our 'stunned movement' animations", nullptr, "[0,1]" },
		{ _field_real, "feign death chance", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign repeat chance", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "spawned turret character", "automatically created character when this unit is driven", &character_group_reference$2 },
		{ _field_short_integer_bounds, "spawned actor count", "number of actors which we spawn" },
		{ _field_real, "spawned velocity", "velocity at which we throw spawned actors" },
		{ _field_angle, "aiming velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "aiming acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual aiming modifier", nullptr, nullptr, "[0,1]" },
		{ _field_angle, "looking velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "looking acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_string_id, "right_hand_node", "where the primary weapon is attached" },
		{ _field_string_id, "left_hand_node", "where the seconday weapon is attached (for dual-pistol modes)" },
		{ _field_struct, "more damn nodes", &unit_additional_node_names_struct_definition, _field_id_uHnd }, // structure_version:1
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "melee damage", &damage_effect_group_reference },
		{ _field_struct, "your momma", &unit_boarding_melee_struct_definition, _field_id_ubms }, // structure_version:1
		{ _field_short_enum, "motion sensor blip size", &unnamed_enum$109 },
		{ _field_struct, "campaign metagame bucket", &campaign_metagame_bucket_block_struct_definition, _field_id_cmtb },
		{ _field_block, "postures", &unit_postures_block },
		{ _field_block, "NEW HUD INTERFACES", &unit_hud_reference_block },
		{ _field_block, "dialogue variants", &dialogue_variant_block },
		{ _field_real, "grenade velocity", nullptr, "world units per second" },
		{ _field_short_enum, "grenade type", &unnamed_enum$112 },
		{ _field_short_integer, "grenade count" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_block, "powered seats", &powered_seat_block },
		{ _field_block, "weapons", &unit_weapon_block },
		{ _field_block, "seats", &unit_seat_block },
		FIELD_EXPLANATION("Boost", nullptr),
		{ _field_struct, "boost", &unit_boost_struct_struct_definition, _field_id_unknown },
		FIELD_EXPLANATION("Lipsync", nullptr),
		{ _field_struct, "lipsync", &unit_lipsync_scales_struct_definition, _field_id_ulYc }, // structure_version:1
		FIELD_EXPLANATION("$$$ BIPED $$$", nullptr),
		{ _field_angle, "moving turning speed", nullptr, "degrees per second" },
		FIELD_SKIP("value", 4),
		{ _field_angle, "stationary turning threshold" },
		FIELD_PAD("value", 16),
		{ _field_short_enum, "old obsolete A in", &unnamed_enum$119 },
		{ _field_short_enum, "old obsolete B in", &unnamed_enum$119 },
		{ _field_short_enum, "old obsolete C in", &unnamed_enum$119 },
		{ _field_short_enum, "old obsolete D in", &unnamed_enum$119 },
		{ _field_tag_reference, "DON'T USE", &damage_effect_group_reference },
		FIELD_EXPLANATION("flying", nullptr),
		{ _field_angle, "bank angle", "angle at which we bank left/right when sidestepping or turning while moving forwards", "degrees" },
		{ _field_real, "bank apply time", "time it takes us to apply a bank", "seconds" },
		{ _field_real, "bank decay time", "time it takes us to recover from a bank", "seconds" },
		{ _field_real, "pitch ratio", "amount that we pitch up/down when moving up or down" },
		{ _field_real, "max velocity", "max velocity when not crouching", "world units per second" },
		{ _field_real, "max sidestep velocity", "max sideways or up/down velocity when not crouching", "world units per second" },
		{ _field_real, "acceleration", nullptr, "world units per second squared" },
		{ _field_real, "deceleration", nullptr, "world units per second squared" },
		{ _field_angle, "angular velocity maximum", "turn rate", "degrees per second" },
		{ _field_angle, "angular acceleration maximum", "turn acceleration rate", "degrees per second squared" },
		{ _field_real, "crouch velocity modifier", "how much slower we fly if crouching (zero = same speed)", nullptr, "[0,1]" },
		FIELD_PAD("value", 8),
		FIELD_EXPLANATION("movement", nullptr),
		{ _field_angle, "maximum slope angle", nullptr, "degrees" },
		{ _field_angle, "downhill falloff angle", nullptr, "degrees" },
		{ _field_angle, "downhill cutoff angle", nullptr, "degrees" },
		{ _field_real, "downhill velocity scale" },
		{ _field_angle, "uphill falloff angle", nullptr, "degrees" },
		{ _field_angle, "uphill cutoff angle", nullptr, "degrees" },
		{ _field_real, "uphill velocity scale" },
		FIELD_PAD("value", 24),
		{ _field_tag_reference, "UNUSED", &material_effects_group_reference },
		FIELD_PAD("value", 24),
		FIELD_EXPLANATION("jumping and landing", nullptr),
		{ _field_real, "jump velocity", nullptr, "world units per second" },
		FIELD_PAD("value", 28),
		{ _field_real, "maximum soft landing time", "the longest amount of time the biped can take to recover from a soft landing", "seconds" },
		{ _field_real, "maximum hard landing time", "the longest amount of time the biped can take to recover from a hard landing", "seconds" },
		{ _field_real, "minimum soft landing velocity", "below this velocity the biped does not react when landing", "world units per second" },
		{ _field_real, "minimum hard landing velocity", "below this velocity the biped will not do a soft landing when returning to the ground", "world units per second" },
		{ _field_real, "maximum hard landing velocity", "the velocity corresponding to the maximum landing time", "world units per second" },
		{ _field_real, "death hard landing velocity", "the maximum velocity with which a character can strike the ground and live", "world units per second" },
		FIELD_PAD("value", 20),
		FIELD_EXPLANATION("camera, collision, and autoaim", nullptr),
		{ _field_real, "standing camera height", nullptr, "world units" },
		{ _field_real, "crouching camera height", nullptr, "world units" },
		{ _field_real, "crouch transition time", nullptr, "seconds" },
		{ _field_angle, "camera interpolation start", "looking-downward angle that starts camera interpolation to fp position", "degrees" },
		{ _field_angle, "camera interpolation end", "looking-downward angle at which camera interpolation to fp position is complete", "degrees" },
		{ _field_real, "camera forward movement scale", "amount of fp camera movement forward and back (1.0 is full)" },
		{ _field_real, "camera side movement scale", "amount of fp camera movement side-to-side (1.0 is full)" },
		{ _field_real, "camera vertical movement scale", "amount of fp camera movement vertically (1.0 is full)" },
		{ _field_real, "camera exclusion distance", "fp camera must always be at least this far out from root node", "world units" },
		{ _field_real, "standing collision height", nullptr, "world units" },
		{ _field_real, "crouching collision height", nullptr, "world units" },
		{ _field_real, "collision radius", nullptr, "world units" },
		{ _field_real, "collision mass", nullptr, "world mass units" },
		{ _field_string_id, "collision global material name", "collision material used when biped is alive" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_string_id, "dead collision global material name", "collision material used when biped is dead" },
		FIELD_PAD("value", 24),
		{ _field_real, "autoaim width", nullptr, "world units" },
		FIELD_PAD("value", 140),
		{ _field_block, "contact points", "these are the points where the biped touches the ground", &contact_point_block_v1_block },
		{ _field_block, "pill shapes", "No point editing these.  They get filled out at map load.", &pills_block },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$96)
	{
		"does not cast shadow",
		"search cardinal direction lightmaps on failure",
		"unused!",
		"not a pathfinding obstacle",
		"extension of parent#object passes all function values to parent and uses parent\'s markers",
		"does not cause collision damage",
		"early mover",
		"early mover localized physics",
		"use static massive lightmap sample#cast A LOT of rays once and store the results for lighting",
		"object scales attachments",
		"inherits player\'s appearance",
		"dead bipeds can\'t localize",
		"attach to clusters by dynamic sphere#use this for the mac gun on spacestation",
		"effects created by this object do not spawn objects in multiplayer",
		"prophet is not displayed in pegasus builds!"
	};
	STRING_LIST(unnamed_enum$96, unnamed_enum$96_strings, _countof(unnamed_enum$96_strings));

	STRINGS(unnamed_enum$97)
	{
		"default",
		"never",
		"always"
	};
	STRING_LIST(unnamed_enum$97, unnamed_enum$97_strings, _countof(unnamed_enum$97_strings));

	STRINGS(unnamed_enum$98)
	{
		"small",
		"medium",
		"large"
	};
	STRING_LIST(unnamed_enum$98, unnamed_enum$98_strings, _countof(unnamed_enum$98_strings));

	TAG_REFERENCE(model_group_reference, MODEL_TAG);

	TAG_REFERENCE(crate_group_reference$2, CRATE_TAG);

	TAG_REFERENCE(material_effects_group_reference, MATERIAL_EFFECTS_TAG);

	STRINGS(unnamed_enum$106)
	{
		"circular aiming",
		"destroyed after dying",
		"half-speed interpolation",
		"fires from camera",
		"entrance inside bounding sphere",
		"doesn\'t show readied weapon",
		"causes passenger dialogue",
		"resists pings",
		"melee attack is fatal",
		"don\'t reface during pings",
		"has no aiming",
		"simple creature",
		"impact melee attaches to unit",
		"impact melee dies on shields",
		"cannot open doors automatically",
		"melee attackers cannot attach",
		"not instantly killed by melee",
		"shield sapping",
		"runs around flaming",
		"inconsequential",
		"special cinematic unit",
		"ignored by autoaiming",
		"shields fry infection forms",
		"unused",
		"unused",
		"acts as gunner for parent",
		"controlled by parent gunner",
		"parent\'s primary weapon",
		"unit has boost"
	};
	STRING_LIST(unnamed_enum$106, unnamed_enum$106_strings, _countof(unnamed_enum$106_strings));

	STRINGS(unnamed_enum$107)
	{
		"default",
		"player",
		"human",
		"covenant",
		"flood",
		"sentinel",
		"heretic",
		"prophet",
		"unused8",
		"unused9",
		"unused10",
		"unused11",
		"unused12",
		"unused13",
		"unused14",
		"unused15"
	};
	STRING_LIST(unnamed_enum$107, unnamed_enum$107_strings, _countof(unnamed_enum$107_strings));

	STRINGS(unnamed_enum$108)
	{
		"silent",
		"medium",
		"loud",
		"shout",
		"quiet"
	};
	STRING_LIST(unnamed_enum$108, unnamed_enum$108_strings, _countof(unnamed_enum$108_strings));

	TAG_REFERENCE(character_group_reference$2, CHARACTER_TAG);

	STRINGS(unnamed_enum$109)
	{
		"medium",
		"small",
		"large"
	};
	STRING_LIST(unnamed_enum$109, unnamed_enum$109_strings, _countof(unnamed_enum$109_strings));

	STRINGS(unnamed_enum$112)
	{
		"human fragmentation",
		"covenant plasma"
	};
	STRING_LIST(unnamed_enum$112, unnamed_enum$112_strings, _countof(unnamed_enum$112_strings));

	STRINGS(unnamed_enum$115)
	{
		"turns without animating",
		"passes through other bipeds",
		"immune to falling damage",
		"rotate while airborne",
		"uses limp body physics",
		"unused",
		"random speed increase",
		"unused",
		"spawn death children on destroy",
		"stunned by emp damage",
		"dead physics when stunned",
		"always ragdoll when dead"
	};
	STRING_LIST(unnamed_enum$115, unnamed_enum$115_strings, _countof(unnamed_enum$115_strings));

	TAG_REFERENCE(character_group_reference$3, CHARACTER_TAG);

	STRINGS(unnamed_enum$119)
	{
		"none",
		"flying velocity"
	};
	STRING_LIST(unnamed_enum$119, unnamed_enum$119_strings, _countof(unnamed_enum$119_strings));

	VERSIONED_TAG_STRUCT(
		biped_lock_on_data_struct_definition,
		"biped_lock_on_data",
		"biped_lock_on_data_struct_definition",
		"s_biped_lock_on_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 3 },
		FIELD_EXPLANATION("lock-on fields", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$116 },
		{ _field_real, "lock on distance" },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$116)
	{
		"locked by human targeting",
		"locked by plasma targeting",
		"always locked by plasma targeting"
	};
	STRING_LIST(unnamed_enum$116, unnamed_enum$116_strings, _countof(unnamed_enum$116_strings));

	TAG_STRUCT(
		bitmap_block_reference_block_struct_definition,
		"bitmap_block_reference_block",
		"bitmap_block_reference_block_struct_definition",
		"s_bitmap_block_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$426 },
		{ _field_short_enum, "animation index", &unnamed_enum$424 },
		{ _field_short_integer, "intro animation delay milliseconds" },
		{ _field_short_enum, "bitmap blend method", &unnamed_enum$427 },
		{ _field_short_integer, "initial sprite frame" },
		{ _field_point_2d, "top-left" },
		{ _field_real, "horiz texture wraps/second" },
		{ _field_real, "vert texture wraps/second" },
		{ _field_tag_reference, "bitmap tag", &bitmap_group_reference },
		{ _field_short_integer, "render depth bias" },
		FIELD_PAD("value", 2),
		{ _field_real, "sprite animation speed fps" },
		{ _field_point_2d, "progress bottom-left" },
		{ _field_string_id, "string identifier" },
		FIELD_USELESS_PAD("value", 12),
		FIELD_USELESS_PAD("value", 12),
		{ _field_real_vector_2d, "render scale" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 4),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$426)
	{
		"ignore for list skin size calculation",
		"swap on relative list position",
		"render as progress bar"
	};
	STRING_LIST(unnamed_enum$426, unnamed_enum$426_strings, _countof(unnamed_enum$426_strings));

	STRINGS(unnamed_enum$424)
	{
		"NONE",
		"00",
		"01",
		"02",
		"03",
		"04",
		"05",
		"06",
		"07",
		"08",
		"09",
		"10",
		"11",
		"12",
		"13",
		"14",
		"15",
		"16",
		"17",
		"18",
		"19",
		"20",
		"21",
		"22",
		"23",
		"24",
		"25",
		"26",
		"27",
		"28",
		"29",
		"30",
		"31",
		"32",
		"33",
		"34",
		"35",
		"36",
		"37",
		"38",
		"39",
		"40",
		"41",
		"42",
		"43",
		"44",
		"45",
		"46",
		"47",
		"48",
		"49",
		"50",
		"51",
		"52",
		"53",
		"54",
		"55",
		"56",
		"57",
		"58",
		"59",
		"60",
		"61",
		"62",
		"63"
	};
	STRING_LIST(unnamed_enum$424, unnamed_enum$424_strings, _countof(unnamed_enum$424_strings));

	STRINGS(unnamed_enum$427)
	{
		"standard",
		"multiply",
		"UNUSED"
	};
	STRING_LIST(unnamed_enum$427, unnamed_enum$427_strings, _countof(unnamed_enum$427_strings));

	TAG_REFERENCE(bitmap_group_reference, BITMAP_TAG);

	TAG_STRUCT(
		bitmap_block_struct_definition,
		"bitmap_block",
		"bitmap_block_struct_definition",
		"s_bitmap_group",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("value", _field_id_bitmap_show),
		FIELD_EXPLANATION("type", "Type controls bitmap \'geometry\'. All dimensions must be a power of two except for SPRITES and INTERFACE BITMAPS:\n\n* 2D TEXTURES: Ordinary, 2D textures will be generated.\n* 3D TEXTURES: Volume textures will be generated from each sequence of 2D texture \'slices\'.\n* CUBE MAPS: Cube maps will be generated from each consecutive set of six 2D textures in each sequence, all faces of a cube map must be square and the same size.\n* SPRITES: Sprite texture pages will be generated.\n* INTERFACE BITMAPS: Similar to 2D TEXTURES, but without mipmaps and without the power of two restriction."),
		{ _field_short_enum, "type", &unnamed_enum$120 },
		FIELD_EXPLANATION("format", "Format controls how pixels will be stored internally:\n\n* COMPRESSED WITH COLOR-KEY TRANSPARENCY: DXT1 compression, uses 4 bits per pixel. 4x4 blocks of pixels are reduced to 2 colors and interpolated, alpha channel uses color-key transparency instead of alpha from the plate (all zero-alpha pixels also have zero-color).\n* COMPRESSED WITH EXPLICIT ALPHA: DXT2/3 compression, uses 8 bits per pixel. Same as DXT1 without the color key transparency, alpha channel uses alpha from plate quantized down to 4 bits per pixel.\n* COMPRESSED WITH INTERPOLATED ALPHA: DXT4/5 compression, uses 8 bits per pixel. Same as DXT2/3, except alpha is smoother. Better for smooth alpha gradients, worse for noisy alpha.\n* 16-BIT COLOR: Uses 16 bits per pixel. Depending on the alpha channel, bitmaps are quantized to either r5g6b5 (no alpha), a1r5g5b5 (1-bit alpha), or a4r4g4b4 (>1-bit alpha).\n* 32-BIT COLOR: Uses 32 bits per pixel. Very high quality, can have alpha at no added cost. This format takes up the most memory, however. Bitmap formats are x8r8g8b8 and a8r8g8b.\n* MONOCHROME: Uses either 8 or 16 bits per pixel. Bitmap formats are a8 (alpha), y8 (intensity), ay8 (combined alpha-intensity) and a8y8 (separate alpha-intensity).\n\nNote: Height maps (a.k.a. bump maps) should use 32-bit color; this is internally converted to a palettized format which takes less memory."),
		{ _field_short_enum, "format", &unnamed_enum$121 },
		FIELD_EXPLANATION("usage", "Usage controls how mipmaps are generated:\n\n* ALPHA BLEND: Pixels with zero alpha are ignored in mipmaps, to prevent bleeding the transparent color. If the edges are zero alpha, the dimensions will in turn get cropped in this process.\n* DEFAULT: Downsampling works normally, as in Photoshop.\n* HEIGHT MAP: The bitmap (normally grayscale) is a height map which gets converted to a bump map. Uses <bump height> below. Alpha is passed through unmodified.\n* DETAIL MAP: Mipmap color fades to gray, controlled by <detail fade factor> below. Alpha fades to white.\n* LIGHT MAP: Generates no mipmaps. Do not use!\n* VECTOR MAP: Used mostly for special effects; pixels are treated as XYZ vectors and normalized after downsampling. Alpha is passed through unmodified."),
		{ _field_short_enum, "usage", &unnamed_enum$122 },
		{ _field_word_flags, "flags", &unnamed_enum$123 },
		FIELD_EXPLANATION("post-processing", "These properties control how mipmaps are post-processed."),
		{ _field_real_fraction, "detail fade factor", "0 means fade to gray by last mipmap, 1 means fade to gray by first mipmap", nullptr, "[0,1]" },
		{ _field_real_fraction, "sharpen amount", "sharpens mipmap after downsampling", nullptr, "[0,1]" },
		{ _field_real, "bump height", "the apparent height of the bump map above the triangle it is textured onto, in texture repeats (i.e., 1.0 would be as high as the texture is wide)", "repeats" },
		{ _field_short_enum, "value", &unnamed_enum$124 },
		{ _field_short_integer, "value" },
		FIELD_EXPLANATION("color plate", "The original TIFF file used to import the bitmap group."),
		{ _field_short_integer, "color plate width", nullptr, "pixels" },
		{ _field_short_integer, "color plate height", nullptr, "pixels" },
		{ _field_data, "compressed color plate data", &color_plate_data },
		FIELD_EXPLANATION("processed pixel data", "Pixel data after being processed by the tool."),
		{ _field_data, "processed pixel data", &bitmap_pixel_data },
		FIELD_EXPLANATION("miscellaneous", nullptr),
		{ _field_real, "blur filter size", "blurs the bitmap before generating mipmaps", nullptr, "[0,10] pixels" },
		{ _field_real, "alpha bias", "affects alpha mipmap generation", nullptr, "[-1,1]" },
		{ _field_short_integer, "mipmap count", "0 defaults to all levels", "levels" },
		FIELD_EXPLANATION("...more sprite processing", "Sprite usage controls the background color of sprite plates."),
		{ _field_short_enum, "sprite usage", &unnamed_enum$125 },
		{ _field_short_integer, "sprite spacing" },
		FIELD_EXPLANATION("...more stuff", nullptr),
		{ _field_short_enum, "force format", &unnamed_enum$126 },
		{ _field_block, "sequences", &bitmap_group_sequence_block },
		{ _field_block, "bitmaps", &bitmap_data_block },
		FIELD_EXPLANATION("WDP fields", nullptr),
		{ _field_char_integer, "color compression quality", "1 means lossless, 127 means crappy", nullptr, "[1,127]" },
		{ _field_char_integer, "alpha compression quality", "1 means lossless, 127 means crappy", nullptr, "[1,127]" },
		{ _field_char_integer, "overlap" },
		{ _field_char_enum, "color subsampling", &unnamed_enum$132 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$120)
	{
		"2D textures",
		"3D textures",
		"cube maps",
		"sprites",
		"interface bitmaps"
	};
	STRING_LIST(unnamed_enum$120, unnamed_enum$120_strings, _countof(unnamed_enum$120_strings));

	STRINGS(unnamed_enum$121)
	{
		"compressed with color-key transparency",
		"compressed with explicit alpha",
		"compressed with interpolated alpha",
		"16-bit color",
		"32-bit color",
		"monochrome"
	};
	STRING_LIST(unnamed_enum$121, unnamed_enum$121_strings, _countof(unnamed_enum$121_strings));

	STRINGS(unnamed_enum$122)
	{
		"alpha-blend",
		"default",
		"height map",
		"detail map",
		"light map",
		"vector map",
		"height map BLUE 255",
		"embm",
		"height map A8L8",
		"height map G8B8",
		"height map G8B8 w/ alpha"
	};
	STRING_LIST(unnamed_enum$122, unnamed_enum$122_strings, _countof(unnamed_enum$122_strings));

	STRINGS(unnamed_enum$123)
	{
		"enable diffusion dithering",
		"disable height map compression",
		"uniform sprite sequences",
		"filthy sprite bug fix",
		"use sharp bump filter",
		"WDP compression",
		"use clamped/mirrored bump filter",
		"invert detail fade",
		"swap x-y vector components",
		"convert from signed",
		"convert to signed",
		"import mipmap chains",
		"intentionally true color"
	};
	STRING_LIST(unnamed_enum$123, unnamed_enum$123_strings, _countof(unnamed_enum$123_strings));

	STRINGS(unnamed_enum$124)
	{
		"32x32",
		"64x64",
		"128x128",
		"256x256",
		"512x512",
		"1024x1024"
	};
	STRING_LIST(unnamed_enum$124, unnamed_enum$124_strings, _countof(unnamed_enum$124_strings));

	STRINGS(unnamed_enum$125)
	{
		"blend/add/subtract/max",
		"multiply/min",
		"double multiply"
	};
	STRING_LIST(unnamed_enum$125, unnamed_enum$125_strings, _countof(unnamed_enum$125_strings));

	STRINGS(unnamed_enum$126)
	{
		"default",
		"force G8B8",
		"force DXT1",
		"force DXT3",
		"force DXT5",
		"force ALPHA-LUMINANCE8",
		"force A4R4G4B4"
	};
	STRING_LIST(unnamed_enum$126, unnamed_enum$126_strings, _countof(unnamed_enum$126_strings));

	STRINGS(unnamed_enum$132)
	{
		"4:0:0",
		"4:2:0",
		"4:2:2",
		"4:4:4"
	};
	STRING_LIST(unnamed_enum$132, unnamed_enum$132_strings, _countof(unnamed_enum$132_strings));

	TAG_STRUCT(
		bitmap_group_sequence_block_struct_definition,
		"bitmap_group_sequence_block",
		"bitmap_group_sequence_block_struct_definition",
		"s_bitmap_group_sequence",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_short_integer, "first bitmap index" },
		{ _field_short_integer, "bitmap count" },
		FIELD_PAD("value", 16),
		{ _field_block, "sprites", &bitmap_group_sprite_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		bitmap_group_sprite_block_struct_definition,
		"bitmap_group_sprite_block",
		"bitmap_group_sprite_block_struct_definition",
		"s_bitmap_group_sprite",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "bitmap index" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		{ _field_real, "left" },
		{ _field_real, "right" },
		{ _field_real, "top" },
		{ _field_real, "bottom" },
		{ _field_real_point_2d, "registration point" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		bitmap_native_info_struct_struct_definition,
		"bitmap_native_info_struct",
		"bitmap_native_info_struct_struct_definition",
		"s_native_bitmap_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "native mipmap info", &bitmap_native_mipmap_info_block },
		{ _field_long_integer, "native size" },
		{ _field_long_integer, "tile mode" },
		{ _field_pointer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		bitmap_native_mipmap_info_block_struct_definition,
		"bitmap_native_mipmap_info_block",
		"bitmap_native_mipmap_info_block_struct_definition",
		"s_native_bitmap_mipmap_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "offset" },
		{ _field_long_integer, "pitch row" },
		{ _field_long_integer, "pitch slice" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		bitmap_tags_struct_definition,
		"bitmap_tags",
		"bitmap_tags_struct_definition",
		"s_bitmap_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 27 },
		{ _field_tag, "signature" },
		{ _field_short_integer, "width", nullptr, "pixels" },
		{ _field_short_integer, "height", nullptr, "pixels" },
		{ _field_char_integer, "depth", "depth is 1 for 2D textures and cube maps", "pixels" },
		{ _field_byte_flags, "more flags", &unnamed_enum$127 },
		{ _field_short_enum, "type", "determines bitmap 'geometry'", &unnamed_enum$128 },
		{ _field_short_enum, "format", "determines how pixels are represented internally", &unnamed_enum$129 },
		{ _field_word_flags, "flags", &unnamed_enum$130 },
		{ _field_point_2d, "registration point" },
		{ _field_short_integer, "mipmap count" },
		{ _field_char_integer, "lod adjust", nullptr, "postprocessed", FIELD_FLAG_UNKNOWN0 },
		{ _field_char_enum, "cache usage", nullptr, "postprocessed", FIELD_FLAG_UNKNOWN0, &unnamed_enum$131 },
		{ _field_long_integer, "pixels offset" },
		FIELD_SKIP("value", 4),
		{ _field_struct, "native bitmap info", &bitmap_native_info_struct_struct_definition, _field_id_nbmi },
		FIELD_SKIP("value", 12),
		FIELD_SKIP("value", 12),
		FIELD_SKIP("value", 12),
		{ _field_pointer, "value" },
		{ _field_pointer, "value" },
		{ _field_pointer, "value" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "value" },
		{ _field_pointer, "value" },
		FIELD_SKIP("value", 4),
		FIELD_SKIP("value", 20),
		{ _field_pointer, "value" },
		
		{ _struct_version_mode_equal, 1, 26 },
		{ _field_tag, "signature" },
		{ _field_short_integer, "width", nullptr, "pixels" },
		{ _field_short_integer, "height", nullptr, "pixels" },
		{ _field_char_integer, "depth", "depth is 1 for 2D textures and cube maps", "pixels" },
		{ _field_byte_flags, "more flags", &unnamed_enum$127 },
		{ _field_short_enum, "type", "determines bitmap 'geometry'", &unnamed_enum$128 },
		{ _field_short_enum, "format", "determines how pixels are represented internally", &unnamed_enum$129 },
		{ _field_word_flags, "flags", &unnamed_enum$130 },
		{ _field_point_2d, "registration point" },
		{ _field_short_integer, "mipmap count" },
		{ _field_char_integer, "lod adjust", nullptr, "postprocessed", FIELD_FLAG_UNKNOWN0 },
		{ _field_char_enum, "cache usage", nullptr, "postprocessed", FIELD_FLAG_UNKNOWN0, &unnamed_enum$131 },
		{ _field_long_integer, "pixels offset" },
		FIELD_SKIP("value", 12),
		FIELD_SKIP("value", 12),
		FIELD_SKIP("value", 12),
		{ _field_pointer, "value" },
		{ _field_pointer, "value" },
		{ _field_pointer, "value" },
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "value" },
		{ _field_pointer, "value" },
		FIELD_SKIP("value", 4),
		FIELD_SKIP("value", 20),
		{ _field_pointer, "value" },
		
		{ _struct_version_mode_equal, 0, 15 },
		{ _field_tag, "signature" },
		{ _field_short_integer, "width", nullptr, "pixels" },
		{ _field_short_integer, "height", nullptr, "pixels" },
		{ _field_short_integer, "depth", "depth is 1 for 2D textures and cube maps", "pixels" },
		{ _field_short_enum, "type", "determines bitmap 'geometry'", &unnamed_enum$128 },
		{ _field_short_enum, "format", "determines how pixels are represented internally", &unnamed_enum$129 },
		{ _field_word_flags, "flags", &unnamed_enum$130 },
		{ _field_point_2d, "registration point" },
		{ _field_short_integer, "mipmap count" },
		FIELD_PAD("value", 2),
		{ _field_long_integer, "pixels offset" },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 8),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$127)
	{
		"delete from cache file",
		"bitmap create attempted",
		"bitmap recreate allowed",
		"bitmap sampling allowed"
	};
	STRING_LIST(unnamed_enum$127, unnamed_enum$127_strings, _countof(unnamed_enum$127_strings));

	STRINGS(unnamed_enum$128)
	{
		"2D texture",
		"3D texture",
		"cube map"
	};
	STRING_LIST(unnamed_enum$128, unnamed_enum$128_strings, _countof(unnamed_enum$128_strings));

	STRINGS(unnamed_enum$129)
	{
		"a8",
		"y8",
		"ay8",
		"a8y8",
		"unused1",
		"unused2",
		"r5g6b5",
		"unused3",
		"a1r5g5b5",
		"a4r4g4b4",
		"x8r8g8b8",
		"a8r8g8b8",
		"unused4",
		"unused5",
		"dxt1",
		"dxt3",
		"dxt5",
		"p8-bump",
		"p8",
		"argbfp32",
		"rgbfp32",
		"rgbfp16",
		"v8u8",
		"g8b8"
	};
	STRING_LIST(unnamed_enum$129, unnamed_enum$129_strings, _countof(unnamed_enum$129_strings));

	STRINGS(unnamed_enum$130)
	{
		"power of two dimensions",
		"compressed",
		"palettized",
		"swizzled",
		"linear",
		"v16u16",
		"MIPmap debug level",
		"prefer stutter (prefer low detail)!"
	};
	STRING_LIST(unnamed_enum$130, unnamed_enum$130_strings, _countof(unnamed_enum$130_strings));

	STRINGS(unnamed_enum$131)
	{
		"default",
		"environment",
		"environment bump",
		"environment lightmap",
		"scenery",
		"scenery bump",
		"weapon",
		"weapon bump",
		"vehicle",
		"vehicle bump",
		"biped",
		"biped bump",
		"object",
		"object bump",
		"effect",
		"hud",
		"ui",
		"sky",
		"first person",
		"rasterizer"
	};
	STRING_LIST(unnamed_enum$131, unnamed_enum$131_strings, _countof(unnamed_enum$131_strings));

	TAG_STRUCT(
		boxes_block_struct_definition,
		"boxes_block",
		"boxes_block_struct_definition",
		"s_physics_model_box",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "material" },
		{ _field_word_flags, "flags", &unnamed_enum$118 },
		{ _field_real, "relative mass scale" },
		{ _field_real_fraction, "friction" },
		{ _field_real_fraction, "restitution" },
		{ _field_real, "volume " },
		{ _field_real, "mass" },
		FIELD_SKIP("value", 2),
		{ _field_short_block_index, "phantom" },
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_real, "radius" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_real_vector_3d, "half extents" },
		FIELD_SKIP("value", 4),
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "value" },
		{ _field_real_vector_3d, "rotation i" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "rotation j" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "rotation k" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "translation" },
		FIELD_SKIP("value", 4),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$118)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$118, unnamed_enum$118_strings, _countof(unnamed_enum$118_strings));

	TAG_STRUCT(
		breakable_surface_block_struct_definition,
		"breakable_surface_block",
		"breakable_surface_block_struct_definition",
		"s_breakable_surface_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "maximum vitality" },
		{ _field_tag_reference, "effect", &effect_group_reference },
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_block, "particle effects", &particle_system_definition_block_new_block },
		{ _field_real, "particle density" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		breakable_surface_key_table_block_struct_definition,
		"breakable_surface_key_table_block",
		"breakable_surface_key_table_block_struct_definition",
		"s_strucure_physics_breakable_surface_key_value",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "*instanced geometry index" },
		{ _field_short_integer, "*breakable surface index" },
		{ _field_long_integer, "*seed surface index" },
		{ _field_real, "*x0" },
		{ _field_real, "*x1" },
		{ _field_real, "*y0" },
		{ _field_real, "*y1" },
		{ _field_real, "*z0" },
		{ _field_real, "*z1" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		bsp2d_nodes_block_struct_definition,
		"bsp2d_nodes_block",
		"bsp2d_nodes_block_struct_definition",
		"s_bsp2d_node",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		{ _field_real_plane_2d, "plane" },
		{ _field_short_integer, "left child" },
		{ _field_short_integer, "right child" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		bsp2d_references_block_struct_definition,
		"bsp2d_references_block",
		"bsp2d_references_block_struct_definition",
		"s_bsp2d_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		2)
	{
		{ _field_short_integer, "plane" },
		{ _field_short_integer, "bsp2d node" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		bsp3d_nodes_block_struct_definition,
		"bsp3d_nodes_block",
		"bsp3d_nodes_block_struct_definition",
		"s_bsp3d_node",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		3)
	{
		FIELD_SKIP("value", 8),
		{ _field_terminator }
	};

	TAG_STRUCT(
		bsp_leaf_block_struct_definition,
		"bsp_leaf_block",
		"bsp_leaf_block_struct_definition",
		"s_structure_leaf",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "cluster" },
		{ _field_short_integer, "surface reference count" },
		{ _field_long_integer, "first surface reference index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		bsp_surface_reference_block_struct_definition,
		"bsp_surface_reference_block",
		"bsp_surface_reference_block_struct_definition",
		"s_structure_surface_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "strip index" },
		{ _field_short_integer, "lightmap triangle index" },
		{ _field_long_integer, "bsp node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		button_widget_reference_block_struct_definition,
		"button_widget_reference_block",
		"button_widget_reference_block_struct_definition",
		"s_button_widget_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "text flags", &unnamed_enum$423 },
		{ _field_short_enum, "animation index", &unnamed_enum$424 },
		{ _field_short_integer, "intro animation delay milliseconds" },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "custom font", &unnamed_enum$425 },
		{ _field_real_argb_color, "text color" },
		{ _field_rectangle_2d, "bounds" },
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_point_2d, "bitmap offset", "from top-left" },
		{ _field_string_id, "string id" },
		{ _field_short_integer, "render depth bias" },
		{ _field_short_integer, "mouse region top offset" },
		{ _field_long_flags, "button flags", &unnamed_enum$538 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$423)
	{
		"left justify text",
		"right justify text",
		"pulsating text",
		"callout text",
		"small (31 char) buffer"
	};
	STRING_LIST(unnamed_enum$423, unnamed_enum$423_strings, _countof(unnamed_enum$423_strings));

	STRINGS(unnamed_enum$425)
	{
		"terminal",
		"body text",
		"title",
		"super large font",
		"large body text",
		"split screen hud message",
		"full screen hud message",
		"english body text",
		"HUD number text",
		"subtitle font",
		"main menu font",
		"text chat font"
	};
	STRING_LIST(unnamed_enum$425, unnamed_enum$425_strings, _countof(unnamed_enum$425_strings));

	STRINGS(unnamed_enum$538)
	{
		"DOESN\'T tab vertically",
		"DOESN\'T tab horizontally"
	};
	STRING_LIST(unnamed_enum$538, unnamed_enum$538_strings, _countof(unnamed_enum$538_strings));

	TAG_STRUCT(
		byte_block_struct_definition,
		"byte_block",
		"byte_block_struct_definition",
		"s_byte",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "Value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		cache_file_sound_block_struct_definition,
		"cache_file_sound_block",
		"cache_file_sound_block_struct_definition",
		"s_cache_file_sound_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum },
		{ _field_char_enum, "sound class", &unnamed_enum$2 },
		{ _field_char_integer, "codec index" },
		{ _field_short_integer, "remastered sound reference index" },
		{ _field_short_integer, "playback index" },
		{ _field_short_integer, "first pitch range index" },
		{ _field_char_integer, "pitch range count" },
		{ _field_char_integer, "scale index" },
		{ _field_char_integer, "promotion index" },
		{ _field_char_integer, "custom playback index" },
		{ _field_short_integer, "extra info index" },
		{ _field_long_integer, "maximum play time", nullptr, "ms" },
		{ _field_real, "inner_silence_distance", "don't play below this distance" },
		{ _field_short_integer, "first reflection parameters index" },
		{ _field_char_integer, "reflection parameters count" },
		{ _field_char_integer, "low pass cut off parameters index" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum)
	{
		"fit to adpcm blocksize",
		"split long sound into permutations",
		"always spatialize#always play as 3d sound, even in first person",
		"never obstruct#disable occlusion/obstruction for this sound",
		"internal don\'t touch",
		"use huge sound transmission",
		"link count to owner unit",
		"pitch range is language",
		"don\'t use sound class speaker flag",
		"don\'t use lipsync data",
		"play only in legacy mode",
		"play only in remastered mode"
	};
	STRING_LIST(unnamed_enum, unnamed_enum_strings, _countof(unnamed_enum_strings));

	STRINGS(unnamed_enum$2)
	{
		"projectile_impact",
		"projectile_detonation",
		"projectile_flyby",
		"unused",
		"weapon_fire",
		"weapon_ready",
		"weapon_reload",
		"weapon_empty",
		"weapon_charge",
		"weapon_overheat",
		"weapon_idle",
		"weapon_melee",
		"weapon_animation",
		"object_impacts",
		"particle_impacts",
		"weapon_fire_lod",
		"weapon_fire_lod_far",
		"lfe",
		"unit_footsteps",
		"unit_dialog",
		"unit_animation",
		"unused",
		"vehicle_collision",
		"vehicle_engine",
		"vehicle_animation",
		"unused",
		"device_door",
		"unused",
		"device_machinery",
		"device_stationary",
		"unused",
		"unused",
		"music",
		"ambient_nature",
		"ambient_machinery",
		"unused",
		"huge_ass",
		"object_looping",
		"cinematic_music",
		"reflection",
		"reflection_lod",
		"reflection_lod_far",
		"unused",
		"unused",
		"unused",
		"cortana_mission",
		"cortana_cinematic",
		"mission_dialog",
		"cinematic_dialog",
		"scripted_cinematic_foley",
		"game_event",
		"ui",
		"test",
		"multilingual_test"
	};
	STRING_LIST(unnamed_enum$2, unnamed_enum$2_strings, _countof(unnamed_enum$2_strings));

	TAG_STRUCT(
		cached_data_block_struct_definition$2,
		"cached_data_block",
		"cached_data_block_struct_definition",
		"s_particle_model_definitions_cached_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_vertex_buffer, "vertex buffer" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		cached_data_block_struct_definition,
		"cached_data_block",
		"cached_data_block_struct_definition",
		"s_decorator_set_definitions_cached_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_vertex_buffer, "vertex buffer" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		camera_block_struct_definition,
		"camera_block",
		"camera_block_struct_definition",
		"s_game_globals_camera",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "default unit camera track", &camera_track_group_reference },
		{ _field_real, "default change pause" },
		{ _field_real, "first person change pause" },
		{ _field_real, "following camera change pause" },
		{ _field_terminator }
	};

	TAG_REFERENCE(camera_track_group_reference, CAMERA_TRACK_TAG);

	TAG_STRUCT(
		camera_track_block_struct_definition,
		"camera_track_block",
		"camera_track_block_struct_definition",
		"s_camera_track_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$496 },
		{ _field_block, "control points", &camera_track_control_point_block },
		FIELD_USELESS_PAD("value", 32),
		{ _field_terminator }
	};

	STRING_LIST(unnamed_enum$496, empty_string_list, 0);

	TAG_STRUCT(
		camera_track_control_point_block_struct_definition,
		"camera_track_control_point_block",
		"camera_track_control_point_block_struct_definition",
		"s_camera_track_control_point",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_vector_3d, "position" },
		{ _field_real_quaternion, "orientation" },
		FIELD_USELESS_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_STRUCT(
		campaign_metagame_bucket_block_struct_definition,
		"campaign_metagame_bucket_block",
		"campaign_metagame_bucket_block_struct_definition",
		"s_campaign_metagame_bucket",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_enum, "type", &unnamed_enum$110 },
		{ _field_char_enum, "class", &unnamed_enum$111 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$110)
	{
		"brute",
		"grunt",
		"jackal",
		"skirmisher",
		"marine",
		"spartan",
		"bugger",
		"hunter",
		"flood_infection",
		"flood_carrier",
		"flood_combat",
		"flood_pure",
		"sentinel",
		"elite",
		"engineer",
		"mule",
		"turret",
		"mongoose",
		"warthog",
		"scorpion",
		"hornet",
		"pelican",
		"revenant",
		"seraph",
		"shade",
		"watchtower",
		"ghost",
		"chopper",
		"mauler",
		"wraith",
		"banshee",
		"phantom",
		"scarab",
		"guntower",
		"tuning_fork",
		"broadsword",
		"mammoth",
		"lich",
		"mantis",
		"wasp",
		"phaeton",
		"bishop",
		"knight",
		"pawn",
		"engineer_recharge_station"
	};
	STRING_LIST(unnamed_enum$110, unnamed_enum$110_strings, _countof(unnamed_enum$110_strings));

	STRINGS(unnamed_enum$111)
	{
		"infantry",
		"leader",
		"hero",
		"specialist",
		"light vehicle",
		"heavy vehicle",
		"giant vehicle",
		"standard vehicle"
	};
	STRING_LIST(unnamed_enum$111, unnamed_enum$111_strings, _countof(unnamed_enum$111_strings));

	TAG_STRUCT(
		cellular_automata2d_block_struct_definition,
		"cellular_automata2d_block",
		"cellular_automata2d_block_struct_definition",
		"s_ca2d_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("properties", nullptr),
		{ _field_short_integer, "updates per second", nullptr, "Hz" },
		FIELD_PAD("value", 2),
		{ _field_real, "dead cell penalty" },
		{ _field_real, "live cell bonus" },
		FIELD_PAD("value", 80),
		FIELD_EXPLANATION("height map", nullptr),
		{ _field_short_integer, "width", nullptr, "cells" },
		{ _field_short_integer, "height", nullptr, "cells" },
		{ _field_real, "cell width", nullptr, "world units" },
		{ _field_real, "height", nullptr, "world units" },
		{ _field_real_vector_2d, "velocity", nullptr, "cells/update" },
		FIELD_PAD("value", 28),
		{ _field_old_string_id, "marker" },
		{ _field_long_flags, "interpolation flags", &unnamed_enum$104 },
		{ _field_real_rgb_color, "base color" },
		{ _field_real_rgb_color, "peak color" },
		FIELD_PAD("value", 76),
		FIELD_EXPLANATION("detail map", nullptr),
		{ _field_short_integer, "width", nullptr, "cells" },
		{ _field_short_integer, "height", nullptr, "cells" },
		{ _field_real, "cell width", nullptr, "world units" },
		{ _field_real_vector_2d, "velocity", nullptr, "cells/update" },
		FIELD_PAD("value", 48),
		{ _field_old_string_id, "marker" },
		{ _field_short_integer, "texture width", nullptr, "cells" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 48),
		{ _field_tag_reference, "texture", &bitmap_group_reference },
		FIELD_PAD("value", 160),
		{ _field_block, "rules", &rules_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$104)
	{
		"blend in hsv#blends colors in hsv rather than rgb space",
		"...more colors#blends colors through more hues (goes the long way around the color wheel)"
	};
	STRING_LIST(unnamed_enum$104, unnamed_enum$104_strings, _countof(unnamed_enum$104_strings));

	TAG_STRUCT(
		cellular_automata_block_struct_definition,
		"cellular_automata_block",
		"cellular_automata_block_struct_definition",
		"s_ca_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("parameters", nullptr),
		{ _field_short_integer, "updates per second", nullptr, "Hz" },
		{ _field_short_integer, "x (width)", nullptr, "cells" },
		{ _field_short_integer, "y (depth)", nullptr, "cells" },
		{ _field_short_integer, "z (height)", nullptr, "cells" },
		{ _field_real, "x (width)", nullptr, "world units" },
		{ _field_real, "y (depth)", nullptr, "world units" },
		{ _field_real, "z (height)", nullptr, "world units" },
		FIELD_PAD("value", 32),
		{ _field_old_string_id, "marker" },
		FIELD_EXPLANATION("cell birth", nullptr),
		{ _field_real_fraction, "cell birth chance", nullptr, nullptr, "[0,1]" },
		FIELD_PAD("value", 32),
		FIELD_EXPLANATION("gene mutation", nullptr),
		{ _field_long_integer, "cell gene mutates 1 in", nullptr, "times" },
		{ _field_long_integer, "virus gene mutations 1 in", nullptr, "times" },
		FIELD_PAD("value", 32),
		FIELD_EXPLANATION("cell infection", nullptr),
		{ _field_short_integer_bounds, "infected cell lifespan", "the lifespan of a cell once infected", "updates" },
		{ _field_short_integer, "minimum infection age", "no cell can be infected before it has been alive this number of updates", "updates" },
		FIELD_PAD("value", 2),
		{ _field_real_fraction, "cell infection chance", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "infection threshold", "0.0 is most difficult for the virus, 1.0 means any virus can infect any cell", nullptr, "[0,1]" },
		FIELD_PAD("value", 32),
		FIELD_EXPLANATION("initial state", nullptr),
		{ _field_real_fraction, "new cell filled chance", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "new cell infected chance", nullptr, nullptr, "[0,1]" },
		FIELD_PAD("value", 32),
		FIELD_EXPLANATION("detail texture", nullptr),
		{ _field_real_fraction, "detail texture change chance", nullptr, nullptr, "[0,1]" },
		FIELD_PAD("value", 32),
		{ _field_short_integer, "detail texture width", "the number of cells repeating across the detail texture in both dimensions", "cells" },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "detail texture", &bitmap_group_reference },
		FIELD_EXPLANATION("mask texture", nullptr),
		FIELD_PAD("value", 32),
		{ _field_tag_reference, "mask bitmap", &bitmap_group_reference },
		FIELD_PAD("value", 240),
		{ _field_terminator }
	};

	TAG_STRUCT(
		character_boarding_block_struct_definition,
		"character_boarding_block",
		"character_boarding_block_struct_definition",
		"s_character_boarding_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$146 },
		{ _field_real, "max distance", "maximum distance from entry point that we will consider boarding", "wu/s" },
		{ _field_real, "abort distance", "give up trying to get in boarding seat if entry point is further away than this", "wu/s" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "max speed", "maximum speed at which we will consider boarding", "wu/s" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$146)
	{
		"airborne boarding"
	};
	STRING_LIST(unnamed_enum$146, unnamed_enum$146_strings, _countof(unnamed_enum$146_strings));

	TAG_STRUCT(
		character_boss_block_struct_definition,
		"character_boss_block",
		"character_boss_block_struct_definition",
		"s_character_boss_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 36),
		{ _field_real, "flurry damage threshold", "when more than x damage is caused a juggernaut flurry is triggered", nullptr, "[0..1]" },
		{ _field_real, "flurry time", "flurry lasts this long", "seconds" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		character_cover_block_struct_definition,
		"character_cover_block",
		"character_cover_block_struct_definition",
		"s_character_cover_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "cover flags", &unnamed_enum$138 },
		{ _field_real_bounds, "hide behind cover time", "how long we stay behind cover after seeking cover", "seconds" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "Cover vitality threshold", "When vitality drops below this level, possibly trigger a cover" },
		{ _field_real, "Cover shield fraction", "trigger cover when shield drops below this fraction (low shield cover impulse must be enabled)" },
		{ _field_real, "Cover check delay", "amount of time I will wait before trying again after covering" },
		{ _field_real, "Emerge from cover when shield fraction reaches threshold", "Emerge from cover when shield fraction reaches threshold" },
		{ _field_real, "Cover danger threshold", "Danger must be this high to cover. At a danger level of 'danger threshold', the chance of seeking cover is the cover chance lower bound (below)" },
		{ _field_real, "Danger upper threshold", "At or above danger level of upper threshold, the chance of seeking cover is the cover chance upper bound (below)" },
		FIELD_EXPLANATION("Cover chance", "The Bounds on the chance of seeking cover.\nThe lower bound is valid when the danger is at \'danger threshold\'\nThe upper bound is valid when the danger is at or above \'danger upper threshold\'.\nIt is interpolated linearly everywhere in between.\n All chances are expressed as \'chance of triggering cover in a 1 second period\'."),
		{ _field_real_bounds, "Cover chance", "Bounds on the chances of seeking cover." },
		{ _field_real, "Proximity self-preserve", "When the proximity_self_preservation impulse is enabled, triggers self-preservation when target within this distance", "wus" },
		{ _field_real, "Disallow cover distance", "Disallow covering from visible target under the given distance away", "world units" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real, "proximity melee distance", "When self preserving from a target less than given distance, causes melee attack (assuming proximity_melee_impulse is enabled)" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_real, "unreachable enemy danger threshold", "When danger from an unreachable enemy surpasses threshold, actor cover (assuming unreachable_enemy_cover impulse is enabled)" },
		{ _field_real, "scary target threshold", "When target is aware of me and surpasses the given scariness, self-preserve (assuming scary_target_cover_impulse is enabled)" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$138)
	{
		"Flag1"
	};
	STRING_LIST(unnamed_enum$138, unnamed_enum$138_strings, _countof(unnamed_enum$138_strings));

	TAG_STRUCT(
		character_engage_block_struct_definition,
		"character_engage_block",
		"character_engage_block_struct_definition",
		"s_character_engage_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$142 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real, "Crouch danger threshold", "When danger rises above the threshold, the actor crouches" },
		{ _field_real, "Stand danger threshold", "When danger drops below this threshold, the actor can stand again." },
		{ _field_real, "Fight danger move threshold", "When danger goes above given level, this actor switches firing positions" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$142)
	{
		"engage perch",
		"fight constant movement",
		"flight fight constant movement"
	};
	STRING_LIST(unnamed_enum$142, unnamed_enum$142_strings, _countof(unnamed_enum$142_strings));

	TAG_STRUCT(
		character_evasion_block_struct_definition,
		"character_evasion_block",
		"character_evasion_block_struct_definition",
		"s_character_evasion_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "Evasion danger threshold", "Consider evading when immediate danger surpasses threshold" },
		{ _field_real, "Evasion delay timer", "Wait at least this delay between evasions" },
		{ _field_real, "Evasion chance", "If danger is above threshold, the chance that we will evade. Expressed as chance of evading within a 1 second time period" },
		{ _field_real, "Evasion proximity threshold", "If target is within given proximity, possibly evade" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "dive retreat chance", "Chance of retreating (fleeing) after danger avoidance dive" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		character_firing_pattern_block_struct_definition,
		"character_firing_pattern_block",
		"character_firing_pattern_block_struct_definition",
		"s_character_firing_pattern",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "rate of fire", "how many times per second we pull the trigger (zero = continuously held down)" },
		{ _field_real, "target tracking", "how well our bursts track moving targets. 0.0= fire at the position they were standing when we started the burst. 1.0= fire at current position", nullptr, "[0,1]" },
		{ _field_real, "target leading", "how much we lead moving targets. 0.0= no prediction. 1.0= predict completely.", nullptr, "[0,1]" },
		FIELD_EXPLANATION("burst geometry", "at the start of every burst we pick a random point near the target to fire at, on either the left or the right side.\nthe burst origin angle controls whether this error is exactly horizontal or might have some vertical component.\n\nover the course of the burst we move our projectiles back in the opposite direction towards the target. this return motion is also controlled by an angle that specifies how close to the horizontal it is.\n\nfor example if the burst origin angle and the burst return angle were both zero, and the return length was the same as the burst length, every burst would start the same amount away from the target (on either the left or right) and move back to exactly over the target at the end of the burst."),
		{ _field_real, "burst origin radius", "how far away from the target the starting point is", "world units" },
		{ _field_angle, "burst origin angle", "the range from the horizontal that our starting error can be", "degrees" },
		{ _field_real_bounds, "burst return length", "how far the burst point moves back towards the target (could be negative)", "world units" },
		{ _field_angle, "burst return angle", "the range from the horizontal that the return direction can be", "degrees" },
		{ _field_real_bounds, "burst duration", "how long each burst we fire is", "seconds" },
		{ _field_real_bounds, "burst separation", "how long we wait between bursts", "seconds" },
		{ _field_real, "weapon damage modifier", "what fraction of its normal damage our weapon inflicts (zero = no modifier)" },
		{ _field_angle, "projectile error", "error added to every projectile we fire", "degrees" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_angle, "burst angular velocity", "the maximum rate at which we can sweep our fire (zero = unlimited)", "degrees per second" },
		{ _field_angle, "maximum error angle", "cap on the maximum angle by which we will miss target (restriction on burst origin radius", "degrees" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		character_firing_pattern_properties_block_struct_definition,
		"character_firing_pattern_properties_block",
		"character_firing_pattern_properties_block_struct_definition",
		"s_character_firing_pattern_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "weapon", &weapon_group_reference$5 },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "firing patterns", &character_firing_pattern_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(weapon_group_reference$5, WEAPON_TAG, _tag_reference_flag_dont_resolve_in_editor);

	TAG_STRUCT(
		character_general_block_struct_definition,
		"character_general_block",
		"character_general_block_struct_definition",
		"s_character_general_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "general flags", &unnamed_enum$135 },
		{ _field_short_enum, "type", &unnamed_enum$136 },
		{ _field_struct, "OBSOLETE campaign metagame bucket", &campaign_metagame_bucket_block_struct_definition, _field_id_cmtb },
		FIELD_USELESS_PAD("value", 100),
		{ _field_real, "scariness", "the inherent scariness of the character" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$135)
	{
		"swarm",
		"flying",
		"dual wields",
		"uses gravemind"
	};
	STRING_LIST(unnamed_enum$135, unnamed_enum$135_strings, _countof(unnamed_enum$135_strings));

	STRINGS(unnamed_enum$136)
	{
		"elite",
		"jackal",
		"grunt",
		"hunter",
		"engineer",
		"assassin",
		"player",
		"marine",
		"crew",
		"combat_form",
		"infection_form",
		"carrier_form",
		"monitor",
		"sentinel",
		"none",
		"mounted_weapon",
		"brute",
		"prophet",
		"bugger",
		"juggernaut"
	};
	STRING_LIST(unnamed_enum$136, unnamed_enum$136_strings, _countof(unnamed_enum$136_strings));

	TAG_STRUCT(
		character_grenades_block_struct_definition,
		"character_grenades_block",
		"character_grenades_block_struct_definition",
		"s_character_grenade_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "grenades flags", &unnamed_enum$138 },
		{ _field_short_enum, "grenade type", "type of grenades that we throw", FIELD_FLAG_INDEX, &unnamed_enum$112 },
		{ _field_short_enum, "trajectory type", "how we throw our grenades", &unnamed_enum$150 },
		FIELD_PAD("YZNPI", 2),
		{ _field_short_integer, "minimum enemy count", "how many enemies must be within the radius of the grenade before we will consider throwing there" },
		{ _field_real, "enemy radius", "we consider enemies within this radius when determining where to throw", "world units" },
		{ _field_real, "grenade ideal velocity", "how fast we LIKE to throw our grenades", "world units per second" },
		{ _field_real, "grenade velocity", "the fastest we can possibly throw our grenades", "world units per second" },
		{ _field_real_bounds, "grenade ranges", "ranges within which we will consider throwing a grenade", "world units" },
		{ _field_real, "collateral damage radius", "we won't throw if there are friendlies around our target within this range", "world units" },
		{ _field_real_fraction, "grenade chance", "how likely we are to throw a grenade in one second", nullptr, "[0,1]" },
		{ _field_real, "grenade throw delay", "How long we have to wait after throwing a grenade before we can throw another one", "seconds" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real_fraction, "grenade uncover chance", "how likely we are to throw a grenade to flush out a target in one second", nullptr, "[0,1]" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real_fraction, "anti-vehicle grenade chance", "how likely we are to throw a grenade against a vehicle", nullptr, "[0,1]" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_EXPLANATION("Grenade drop when killed", nullptr),
		{ _field_short_integer_bounds, "grenade count", "number of grenades that we start with" },
		{ _field_real, "dont drop grenades chance", "how likely we are not to drop any grenades when we die, even if we still have some", nullptr, "[0,1]" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$150)
	{
		"toss",
		"lob",
		"bounce"
	};
	STRING_LIST(unnamed_enum$150, unnamed_enum$150_strings, _countof(unnamed_enum$150_strings));

	TAG_STRUCT(
		character_idle_block_struct_definition,
		"character_idle_block",
		"character_idle_block_struct_definition",
		"s_character_idle_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 24),
		{ _field_real_bounds, "idle pose delay time", "time range for delays between idle poses", "seconds" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		character_look_block_struct_definition,
		"character_look_block",
		"character_look_block_struct_definition",
		"s_character_look_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_euler_angles_2d, "maximum aiming deviation", "how far we can turn our weapon", "degrees" },
		{ _field_real_euler_angles_2d, "maximum looking deviation", "how far we can turn our head", "degrees" },
		{ _field_real_euler_angles_2d, "runtime aiming deviation cosines" },
		{ _field_real_euler_angles_2d, "runtime looking deviation cosines" },
		{ _field_angle, "noncombat look delta L", "how far we can turn our head left away from our aiming vector when not in combat", "degrees" },
		{ _field_angle, "noncombat look delta R", "how far we can turn our head right away from our aiming vector when not in combat", "degrees" },
		{ _field_angle, "combat look delta L", "how far we can turn our head left away from our aiming vector when in combat", "degrees" },
		{ _field_angle, "combat look delta R", "how far we can turn our head right away from our aiming vector when in combat", "degrees" },
		{ _field_real_bounds, "noncombat idle looking", "rate at which we change look around randomly when not in combat", "seconds" },
		{ _field_real_bounds, "noncombat idle aiming", "rate at which we change aiming directions when looking around randomly when not in combat", "seconds" },
		{ _field_real_bounds, "combat idle looking", "rate at which we change look around randomly when searching or in combat", "seconds" },
		{ _field_real_bounds, "combat idle aiming", "rate at which we change aiming directions when looking around randomly when searching or in combat", "seconds" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		character_movement_block_struct_definition,
		"character_movement_block",
		"character_movement_block_struct_definition",
		"s_character_movement_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "movement flags", &unnamed_enum$139 },
		{ _field_real, "pathfinding radius" },
		{ _field_real, "destination radius" },
		FIELD_USELESS_PAD("value", 20),
		{ _field_real, "dive grenade chance" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_short_enum, "obstacle leap min size", &unnamed_enum$140 },
		{ _field_short_enum, "obstacle leap max size", &unnamed_enum$140 },
		{ _field_short_enum, "obstacle ignore size", &unnamed_enum$140 },
		{ _field_short_enum, "obstacle smashable size", &unnamed_enum$140 },
		FIELD_PAD("RQEMJY", 2),
		{ _field_short_enum, "jump height", &unnamed_enum$101 },
		{ _field_long_flags, "movement hints", &unnamed_enum$141 },
		{ _field_real, "throttle scale" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$139)
	{
		"danger crouch allow movement",
		"no side-step",
		"prefer to combat near friends",
		"hop (to cover path segments)",
		"perch",
		"has flying mode",
		"disallow crouch"
	};
	STRING_LIST(unnamed_enum$139, unnamed_enum$139_strings, _countof(unnamed_enum$139_strings));

	STRINGS(unnamed_enum$140)
	{
		"none",
		"tiny",
		"small",
		"medium",
		"large",
		"huge",
		"immobile"
	};
	STRING_LIST(unnamed_enum$140, unnamed_enum$140_strings, _countof(unnamed_enum$140_strings));

	STRINGS(unnamed_enum$101)
	{
		"NONE",
		"down",
		"step",
		"crouch",
		"stand",
		"storey",
		"tower",
		"infinite"
	};
	STRING_LIST(unnamed_enum$101, unnamed_enum$101_strings, _countof(unnamed_enum$101_strings));

	STRINGS(unnamed_enum$141)
	{
		"vault step",
		"vault crouch",
		"unused0!",
		"unused1!",
		"unused2!",
		"mount step",
		"mount crouch",
		"mount stand",
		"unused3!",
		"unused4!",
		"unused5!",
		"hoist crouch",
		"hoist stand",
		"unused6!",
		"unused7!",
		"unused8!"
	};
	STRING_LIST(unnamed_enum$141, unnamed_enum$141_strings, _countof(unnamed_enum$141_strings));

	TAG_STRUCT(
		character_palette_block_struct_definition,
		"character_palette_block",
		"character_palette_block_struct_definition",
		"s_character_palette_entry",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "reference", &character_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(character_group_reference, CHARACTER_TAG);

	TAG_STRUCT(
		character_perception_block_struct_definition,
		"character_perception_block",
		"character_perception_block_struct_definition",
		"s_character_perception_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "perception flags", &unnamed_enum$138 },
		{ _field_real, "max vision distance", "maximum range of sight", "world units" },
		{ _field_angle, "central vision angle", "horizontal angle within which we see targets out to our maximum range", "degrees" },
		{ _field_angle, "max vision angle", "maximum horizontal angle within which we see targets at range", "degrees" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_angle, "peripheral vision angle", "maximum horizontal angle within which we can see targets out of the corner of our eye", "degrees" },
		{ _field_real, "peripheral distance", "maximum range at which we can see targets our of the corner of our eye", "world units" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 24),
		{ _field_real, "hearing distance", "maximum range at which sounds can be heard", "world units" },
		{ _field_real, "notice projectile chance", "random chance of noticing a dangerous enemy projectile (e.g. grenade)", nullptr, "[0,1]" },
		{ _field_real, "notice vehicle chance", "random chance of noticing a dangerous vehicle", nullptr, "[0,1]" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_real, "combat perception time", "time required to acknowledge a visible enemy when we are already in combat or searching for them", "seconds" },
		{ _field_real, "guard perception time", "time required to acknowledge a visible enemy when we have been alerted", "seconds" },
		{ _field_real, "non-combat perception time", "time required to acknowledge a visible enemy when we are not alerted", "seconds" },
		FIELD_USELESS_PAD("value", 24),
		{ _field_real, "first ack. surprise distance", "If a new prop is acknowledged within the given distance, surprise is registerd", "world units" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		character_physics_dead_struct_struct_definition,
		"character_physics_dead_struct",
		"character_physics_dead_struct_struct_definition",
		"s_character_physics_dead",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_USELESS_PAD("value", 16),
		{ _field_terminator }
	};

	TAG_STRUCT(
		character_physics_flying_struct_struct_definition,
		"character_physics_flying_struct",
		"character_physics_flying_struct_struct_definition",
		"s_character_physics_flying_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_angle, "bank angle", "angle at which we bank left/right when sidestepping or turning while moving forwards", "degrees" },
		{ _field_real, "bank apply time", "time it takes us to apply a bank", "seconds" },
		{ _field_real, "bank decay time", "time it takes us to recover from a bank", "seconds" },
		{ _field_real, "pitch ratio", "amount that we pitch up/down when moving up or down" },
		{ _field_real, "max velocity", "max velocity when not crouching", "world units per second" },
		{ _field_real, "max sidestep velocity", "max sideways or up/down velocity when not crouching", "world units per second" },
		{ _field_real, "acceleration", nullptr, "world units per second squared" },
		{ _field_real, "deceleration", nullptr, "world units per second squared" },
		{ _field_angle, "angular velocity maximum", "turn rate", "degrees per second" },
		{ _field_angle, "angular acceleration maximum", "turn acceleration rate", "degrees per second squared" },
		{ _field_real, "crouch velocity modifier", "how much slower we fly if crouching (zero = same speed)", nullptr, "[0,1]" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_terminator }
	};

	TAG_STRUCT(
		character_physics_ground_struct_struct_definition,
		"character_physics_ground_struct",
		"character_physics_ground_struct_struct_definition",
		"s_character_physics_ground_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_angle, "maximum slope angle", nullptr, "degrees" },
		{ _field_angle, "downhill falloff angle", nullptr, "degrees" },
		{ _field_angle, "downhill cutoff angle", nullptr, "degrees" },
		{ _field_angle, "uphill falloff angle", nullptr, "degrees" },
		{ _field_angle, "uphill cutoff angle", nullptr, "degrees" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real, "downhill velocity scale" },
		{ _field_real, "uphill velocity scale" },
		FIELD_USELESS_PAD("value", 8),
		FIELD_PAD("value", 20),
		FIELD_USELESS_PAD("value", 16),
		{ _field_terminator }
	};

	TAG_STRUCT(
		character_physics_sentinel_struct_struct_definition,
		"character_physics_sentinel_struct",
		"character_physics_sentinel_struct_struct_definition",
		"s_character_physics_sentinel",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_USELESS_PAD("value", 16),
		{ _field_terminator }
	};

	TAG_STRUCT(
		character_physics_struct_struct_definition,
		"character_physics_struct",
		"character_physics_struct_struct_definition",
		"s_character_physics_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$117 },
		{ _field_real, "height standing" },
		{ _field_real, "height crouching" },
		{ _field_real, "radius" },
		{ _field_real, "mass" },
		{ _field_string_id, "living material name", "collision material used when character is alive", _field_id_sted },
		{ _field_string_id, "dead material name", "collision material used when character is dead", _field_id_sted },
		FIELD_USELESS_PAD("value", 16),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 20),
		{ _field_block, "dead sphere shapes", &spheres_block },
		{ _field_block, "pill shapes", &pills_block },
		{ _field_block, "sphere shapes", &spheres_block },
		FIELD_EXPLANATION("ground", nullptr),
		{ _field_struct, "ground physics", &character_physics_ground_struct_struct_definition, _field_id_chgr },
		FIELD_EXPLANATION("flying", nullptr),
		{ _field_struct, "flying physics", &character_physics_flying_struct_struct_definition, _field_id_chfl },
		FIELD_EXPLANATION("dead", nullptr),
		{ _field_struct, "dead physics", &character_physics_dead_struct_struct_definition, _field_id_chdd },
		FIELD_EXPLANATION("sentinel", nullptr),
		{ _field_struct, "sentinel physics", &character_physics_sentinel_struct_struct_definition, _field_id_chsn },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$117)
	{
		"centered_at_origin",
		"shape spherical",
		"use player physics",
		"climb any surface",
		"flying",
		"not physical",
		"dead character collision group"
	};
	STRING_LIST(unnamed_enum$117, unnamed_enum$117_strings, _countof(unnamed_enum$117_strings));

	TAG_STRUCT(
		character_placement_block_struct_definition,
		"character_placement_block",
		"character_placement_block_struct_definition",
		"s_character_placement_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 4),
		{ _field_real, "few upgrade chance (easy)" },
		{ _field_real, "few upgrade chance (normal)" },
		{ _field_real, "few upgrade chance (heroic)" },
		{ _field_real, "few upgrade chance (legendary)" },
		{ _field_real, "normal upgrade chance (easy)" },
		{ _field_real, "normal upgrade chance (normal)" },
		{ _field_real, "normal upgrade chance (heroic)" },
		{ _field_real, "normal upgrade chance (legendary)" },
		{ _field_real, "many upgrade chance (easy)" },
		{ _field_real, "many upgrade chance (normal)" },
		{ _field_real, "many upgrade chance (heroic)" },
		{ _field_real, "many upgrade chance (legendary)" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		character_ready_block_struct_definition,
		"character_ready_block",
		"character_ready_block_struct_definition",
		"s_character_ready_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_bounds, "ready time bounds", "Character will pause for given time before engaging threat" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		character_retreat_block_struct_definition,
		"character_retreat_block",
		"character_retreat_block_struct_definition",
		"s_character_retreat_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "Retreat flags", &unnamed_enum$144 },
		{ _field_real, "Shield threshold", "When shield vitality drops below given amount, retreat is triggered by low_shield_retreat_impulse" },
		{ _field_real, "Scary target threshold", "When confronting an enemy of over the given scariness, retreat is triggered by scary_target_retreat_impulse" },
		{ _field_real, "Danger threshold", "When perceived danger rises above the given threshold, retreat is triggered by danger_retreat_impulse" },
		{ _field_real, "Proximity threshold", "When enemy closer than given threshold, retreat is triggered by proximity_retreat_impulse" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real_bounds, "min/max forced cower time bounds", "actor cowers for at least the given amount of time" },
		{ _field_real_bounds, "min/max cower timeout bounds", "actor times out of cower after the given amount of time" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "proximity ambush threshold", "If target reaches is within the given proximity, an ambush is triggered by the proximity ambush impulse" },
		{ _field_real, "awareness ambush threshold", "If target is less than threshold (0-1) aware of me, an ambush is triggered by the vulnerable enemy ambush impulse" },
		FIELD_USELESS_PAD("value", 24),
		{ _field_real, "leader dead retreat chance", "If leader-dead-retreat-impulse is active, gives the chance that we will flee when our leader dies within 4 world units of us" },
		{ _field_real, "peer dead retreat chance", "If peer-dead-retreat-impulse is active, gives the chance that we will flee when one of our peers (friend of the same race) dies within 4 world units of us" },
		{ _field_real, "second peer dead retreat chance", "If peer-dead-retreat-impulse is active, gives the chance that we will flee when a second peer (friend of the same race) dies within 4 world units of us" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_angle, "zig-zag angle", "The angle from the intended destination direction that a zig-zag will cause", "degrees" },
		{ _field_real, "zig-zag period", "How long it takes to zig left and then zag right.", "seconds" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_real, "retreat grenade chance", "The likelihood of throwing down a grenade to cover our retreat" },
		{ _field_tag_reference, "backup weapon", "If I want to flee and I don't have flee animations with my current weapon, throw it away and try a ...", &weapon_group_reference$4 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$144)
	{
		"Zig-zag when fleeing",
		"Unused1!"
	};
	STRING_LIST(unnamed_enum$144, unnamed_enum$144_strings, _countof(unnamed_enum$144_strings));

	TAG_REFERENCE(weapon_group_reference$4, WEAPON_TAG);

	TAG_STRUCT(
		character_search_block_struct_definition,
		"character_search_block",
		"character_search_block_struct_definition",
		"s_character_search_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "Search flags", &unnamed_enum$145 },
		FIELD_USELESS_PAD("value", 24),
		{ _field_real_bounds, "search time" },
		FIELD_USELESS_PAD("value", 24),
		FIELD_EXPLANATION("Uncover", nullptr),
		{ _field_real_bounds, "Uncover distance bounds", "Distance of uncover point from target. Hard lower limit, soft upper limit." },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$145)
	{
		"crouch on investigate",
		"walk on pursuit"
	};
	STRING_LIST(unnamed_enum$145, unnamed_enum$145_strings, _countof(unnamed_enum$145_strings));

	TAG_STRUCT(
		character_swarm_block_struct_definition,
		"character_swarm_block",
		"character_swarm_block_struct_definition",
		"s_character_swarm_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_USELESS_PAD("value", 48),
		{ _field_short_integer, "scatter killed count", "After the given number of deaths, the swarm scatters" },
		FIELD_PAD("PEVUDXUKY", 2),
		{ _field_real, "scatter radius", "the distance from the target that the swarm scatters" },
		{ _field_real, "scatter time", "amount of time to remain scattered" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real, "hound min distance" },
		{ _field_real, "hound max distance" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real, "perlin offset scale", "amount of randomness added to creature's throttle", nullptr, "[0-1]" },
		{ _field_real_bounds, "offset period", "how fast the creature changes random offset to throttle", "s" },
		{ _field_real, "perlin idle movement threshold", "a random offset lower then given threshold is made 0. (threshold of 1 = no movement)", nullptr, "[0-1]" },
		{ _field_real, "perlin combat movement threshold", "a random offset lower then given threshold is made 0. (threshold of 1 = no movement)", nullptr, "[0-1]" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		character_tag_v3_struct_definition,
		"character_tag_v3",
		"character_tag_v3_struct_definition",
		"s_character_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 42 },
		{ _field_long_flags, "Character flags", &unnamed_enum$134 },
		FIELD_USELESS_PAD("value", 24),
		{ _field_tag_reference, "parent character", &character_group_reference$4 },
		{ _field_tag_reference, "unit", &unit_group_reference },
		{ _field_tag_reference, "creature", "Creature reference for swarm characters ONLY", &creature_group_reference$3 },
		{ _field_tag_reference, "style", &style_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "major character", &character_group_reference$5 },
		FIELD_USELESS_PAD("value", 12),
		{ _field_block, "variants", &character_variants_block },
		FIELD_USELESS_PAD("value", 36),
		{ _field_block, "general properties", &character_general_block },
		{ _field_block, "vitality properties", &character_vitality_block },
		{ _field_block, "placement properties", &character_placement_block },
		{ _field_block, "perception properties", &character_perception_block },
		{ _field_block, "look properties", &character_look_block },
		{ _field_block, "movement properties", &character_movement_block },
		{ _field_block, "swarm properties", &character_swarm_block },
		FIELD_USELESS_PAD("value", 36),
		{ _field_block, "ready properties", &character_ready_block },
		{ _field_block, "engage properties", &character_engage_block },
		{ _field_block, "charge properties", &character_charge_block },
		FIELD_EXPLANATION("Danger Values", "Danger values can be found in the ai-globals section of the globals tag."),
		{ _field_block, "evasion properties", &character_evasion_block },
		{ _field_block, "cover properties", &character_cover_block },
		{ _field_block, "retreat properties", &character_retreat_block },
		{ _field_block, "search properties", &character_search_block },
		{ _field_block, "pre-search properties", &character_presearch_block },
		{ _field_block, "idle properties", &character_idle_block },
		{ _field_block, "vocalization properties", &character_vocalization_block },
		{ _field_block, "boarding properties", &character_boarding_block },
		FIELD_USELESS_PAD("value", 12),
		{ _field_block, "boss properties", &character_boss_block },
		{ _field_block, "weapons properties", &character_weapons_block, _field_id_sort },
		{ _field_block, "firing pattern properties", &character_firing_pattern_properties_block, _field_id_sort },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "grenades properties", &character_grenades_block, _field_id_sort },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "vehicle properties", &character_vehicle_block, _field_id_sort },
		{ _field_block, "morph properties", &g_null_block },
		{ _field_block, "equipment definitions", &g_null_block },
		{ _field_block, "campaign metagame bucket", &campaign_metagame_bucket_block },
		
		{ _struct_version_mode_equal, 1, 36 },
		{ _field_long_flags, "Character flags", &unnamed_enum$134 },
		FIELD_USELESS_PAD("value", 24),
		{ _field_tag_reference, "parent character", &character_group_reference$4 },
		{ _field_tag_reference, "unit", &unit_group_reference },
		{ _field_tag_reference, "style", &style_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "major character", &character_group_reference$5 },
		{ _field_string_id, "model variant" },
		{ _field_tag_reference, "creature", "Creature reference for swarm characters ONLY", &creature_group_reference$3 },
		FIELD_USELESS_PAD("value", 32),
		{ _field_block, "general properties", &character_general_block },
		{ _field_block, "vitality properties", &character_vitality_block },
		{ _field_block, "placement properties", &character_placement_block },
		{ _field_block, "perception properties", &character_perception_block },
		{ _field_block, "look properties", &character_look_block },
		{ _field_block, "movement properties", &character_movement_block },
		{ _field_block, "swarm properties", &character_swarm_block },
		FIELD_USELESS_PAD("value", 36),
		{ _field_block, "ready properties", &character_ready_block },
		{ _field_block, "engage properties", &character_engage_block },
		{ _field_block, "charge properties", &character_charge_block },
		FIELD_EXPLANATION("Danger Values", "Danger values can be found in the ai-globals section of the globals tag."),
		{ _field_block, "evasion properties", &character_evasion_block },
		{ _field_block, "cover properties", &character_cover_block },
		{ _field_block, "retreat properties", &character_retreat_block },
		{ _field_block, "search properties", &character_search_block },
		{ _field_block, "pre-search properties", &character_presearch_block },
		{ _field_block, "idle properties", &character_idle_block },
		{ _field_block, "vocalization properties", &character_vocalization_block },
		FIELD_USELESS_PAD("value", 36),
		{ _field_block, "weapons properties", &character_weapons_block, _field_id_sort },
		{ _field_block, "firing pattern properties", &character_firing_pattern_properties_block, _field_id_sort },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "grenades properties", &character_grenades_block, _field_id_sort },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "vehicle properties", &character_vehicle_block, _field_id_sort },
		
		{ _struct_version_mode_equal, 0, 29 },
		{ _field_long_flags, "Character flags", &unnamed_enum$134 },
		FIELD_USELESS_PAD("value", 24),
		{ _field_tag_reference, "parent character", &character_group_reference$4 },
		{ _field_tag_reference, "unit", &unit_group_reference },
		{ _field_tag_reference, "style", &style_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "major character", &character_group_reference$5 },
		{ _field_string_id, "model variant" },
		FIELD_USELESS_PAD("value", 76),
		{ _field_block, "general properties", &character_general_block },
		{ _field_block, "placement properties", &character_placement_block },
		{ _field_block, "vitality properties", &character_vitality_block },
		{ _field_block, "perception properties", &character_perception_block },
		{ _field_block, "retreat properties", &character_retreat_block },
		{ _field_block, "Look properties", &character_look_block },
		{ _field_block, "Movement properties", &character_movement_block },
		{ _field_block, "Engage properties", &character_engage_block },
		FIELD_EXPLANATION("Danger Values", "Danger values can be found in the ai-globals section of the globals tag."),
		{ _field_block, "Evasion properties", &character_evasion_block },
		{ _field_block, "Cover properties", &character_cover_block },
		{ _field_block, "search properties", &character_search_block },
		{ _field_block, "pre-search properties", &character_presearch_block },
		{ _field_block, "weapons properties", &character_weapons_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "grenades properties", &character_grenades_block },
		{ _field_block, "charge properties", &character_charge_block },
		{ _field_block, "ready properties", &character_ready_block },
		{ _field_block, "vehicle properties", &character_vehicle_block },
		{ _field_block, "idle properties", &character_idle_block },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$134)
	{
		"Flag1"
	};
	STRING_LIST(unnamed_enum$134, unnamed_enum$134_strings, _countof(unnamed_enum$134_strings));

	TAG_REFERENCE(character_group_reference$4, CHARACTER_TAG);

	TAG_REFERENCE(unit_group_reference, UNIT_TAG);

	TAG_REFERENCE(creature_group_reference$3, CREATURE_TAG);

	TAG_REFERENCE(style_group_reference$2, STYLE_TAG);

	TAG_REFERENCE(character_group_reference$5, CHARACTER_TAG);

	TAG_STRUCT(
		character_variants_block_struct_definition,
		"character_variants_block",
		"character_variants_block_struct_definition",
		"s_character_variant",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "variant name" },
		{ _field_short_integer, "variant index" },
		FIELD_PAD("VN", 2),
		{ _field_string_id, "variant designator" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		character_vitality_block_struct_definition,
		"character_vitality_block",
		"character_vitality_block_struct_definition",
		"s_character_vitality_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "vitality flags", &unnamed_enum$137 },
		{ _field_real, "normal body vitality", "maximum body vitality of our unit" },
		{ _field_real, "normal shield vitality", "maximum shield vitality of our unit" },
		{ _field_real, "legendary body vitality", "maximum body vitality of our unit (on legendary)" },
		{ _field_real, "legendary shield vitality", "maximum shield vitality of our unit (on legendary)" },
		{ _field_real, "body recharge fraction", "fraction of body health that can be regained after damage" },
		{ _field_real, "soft ping threshold (with shields)", "damage necessary to trigger a soft ping when shields are up" },
		{ _field_real, "soft ping threshold (no shields)", "damage necessary to trigger a soft ping when shields are down" },
		{ _field_real, "soft ping min interrupt time", "minimum time before a soft ping can be interrupted" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "hard ping threshold (with shields)", "damage necessary to trigger a hard ping when shields are up" },
		{ _field_real, "hard ping threshold (no shields)", "damage necessary to trigger a hard ping when shields are down" },
		{ _field_real, "hard ping min interrupt time", "minimum time before a hard ping can be interrupted" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "current damage decay delay", "current damage begins to fall after a time delay has passed since last the damage (MAX 4.1, because timer is stored in a char so 127 ticks maximum)" },
		{ _field_real, "current damage decay time", "amount of time it would take for 100% current damage to decay to 0" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_real, "recent damage decay delay", "recent damage begins to fall after a time delay has passed since last the damage (MAX 4.1, because timer is stored in a char so 127 ticks maximum)" },
		{ _field_real, "recent damage decay time", "amount of time it would take for 100% recent damage to decay to 0" },
		{ _field_real, "body recharge delay time", "amount of time delay before a shield begins to recharge" },
		{ _field_real, "body recharge time", "amount of time for shields to recharge completely" },
		{ _field_real, "shield recharge delay time", "amount of time delay before a shield begins to recharge" },
		{ _field_real, "shield recharge time", "amount of time for shields to recharge completely" },
		{ _field_real, "stun threshold", "stun level that triggers the stunned state (currently, the 'stunned' behavior)" },
		{ _field_real_bounds, "stun time bounds", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real, "extended shield damage threshold", "Amount of shield damage sustained before it is considered 'extended'", "%" },
		{ _field_real, "extended body damage threshold", "Amount of body damage sustained before it is considered 'extended'", "%" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real, "suicide radius", "when I die and explode, I damage stuff within this distance of me." },
		{ _field_real, "runtime_body_recharge_velocity" },
		{ _field_real, "runtime_shield_recharge_velocity" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$137)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$137, unnamed_enum$137_strings, _countof(unnamed_enum$137_strings));

	TAG_STRUCT(
		character_vocalization_block_struct_definition,
		"character_vocalization_block",
		"character_vocalization_block_struct_definition",
		"s_character_vocalization_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "look comment time", "How long does the player look at an AI before the AI responds?", "s" },
		{ _field_real, "look long comment time", "How long does the player look at the AI before he responds with his 'long look' comment?", "s" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		charge_struct_definition,
		"charge",
		"charge_struct_definition",
		"s_character_charge_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 3, 15 },
		{ _field_long_flags, "Charge flags", &unnamed_enum$143 },
		{ _field_real, "melee consider range" },
		{ _field_real, "melee chance", "chance of initiating a melee within a 1 second period" },
		{ _field_real, "melee attack range" },
		{ _field_real, "melee abort range" },
		{ _field_real, "melee attack timeout", "Give up after given amount of time spent charging", "seconds" },
		{ _field_real, "melee attack delay timer", "don't attempt again before given time since last melee", "seconds" },
		{ _field_real_bounds, "melee leap range" },
		{ _field_real, "melee leap chance" },
		{ _field_real, "ideal leap velocity" },
		{ _field_real, "max leap velocity" },
		{ _field_real, "melee leap ballistic" },
		{ _field_real, "melee delay timer", "time between melee leaps", "seconds" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_tag_reference, "berserk weapon", "when I berserk, I pull out a ...", &weapon_group_reference$4 },
		
		{ _struct_version_mode_equal, 2, 11 },
		{ _field_long_flags, "Charge flags", &unnamed_enum$138 },
		{ _field_real, "melee consider range" },
		{ _field_real, "melee attack range" },
		{ _field_real, "melee abort range" },
		{ _field_real, "melee attack timeout", "Give up after given amount of time spent charging", "seconds" },
		{ _field_real, "melee attack delay timer" },
		{ _field_real_bounds, "melee leap range" },
		{ _field_real, "ideal leap velocity" },
		{ _field_real, "max leap velocity" },
		{ _field_real, "melee leap chance" },
		{ _field_real, "melee leap ballistic" },
		
		{ _struct_version_mode_equal, 1, 10 },
		{ _field_long_flags, "Charge flags", &unnamed_enum$138 },
		{ _field_real, "melee consider range" },
		{ _field_real, "melee attack range" },
		{ _field_real, "melee abort range" },
		{ _field_real, "melee attack timeout", "Give up after given amount of time spent charging", "seconds" },
		{ _field_real, "melee attack delay timer" },
		{ _field_real_bounds, "melee leap range" },
		{ _field_real, "melee leap velocity" },
		{ _field_real, "melee leap chance" },
		{ _field_real, "melee leap ballistic" },
		
		{ _struct_version_mode_equal, 0, 9 },
		{ _field_long_flags, "Charge flags", &unnamed_enum$138 },
		{ _field_real, "melee attack range" },
		{ _field_real, "melee abort range" },
		{ _field_real, "melee attack timeout", "Give up after given amount of time spent charging", "seconds" },
		{ _field_real, "melee attack delay timer" },
		{ _field_real_bounds, "melee leap range" },
		{ _field_real, "melee leap velocity" },
		{ _field_real, "melee leap chance" },
		{ _field_real, "melee leap ballistic" },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$143)
	{
		"offhand melee allowed",
		"berserk whenever charge"
	};
	STRING_LIST(unnamed_enum$143, unnamed_enum$143_strings, _countof(unnamed_enum$143_strings));

	TAG_STRUCT(
		cheat_powerups_block_struct_definition,
		"cheat_powerups_block",
		"cheat_powerups_block_struct_definition",
		"s_game_globals_tag_reference$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "powerup", &equipment_group_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(equipment_group_reference$2, EQUIPMENT_TAG);

	TAG_STRUCT(
		cheat_weapons_block_struct_definition,
		"cheat_weapons_block",
		"cheat_weapons_block_struct_definition",
		"s_game_globals_tag_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "weapon", &item_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(item_group_reference, ITEM_TAG);

	TAG_STRUCT(
		chocolate_mountain_block_struct_definition,
		"chocolate_mountain_block",
		"chocolate_mountain_block_struct_definition",
		"s_global_lighting_variables",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "lighting variables", &lighting_variables_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		cloth_block_struct_definition,
		"cloth_block",
		"cloth_block_struct_definition",
		"s_cloth_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$156 },
		{ _field_string_id, "marker attachment name" },
		{ _field_tag_reference, "Shader", &shader_group_reference },
		FIELD_EXPLANATION("Default cloth vertices", "if not importing from a render model, type a grid size"),
		{ _field_short_integer, "grid x dimension" },
		{ _field_short_integer, "grid y dimension" },
		{ _field_real, "grid spacing x" },
		{ _field_real, "grid spacing y" },
		FIELD_EXPLANATION("Cloth Properties", nullptr),
		{ _field_struct, "properties", &cloth_properties_struct_definition, _field_id_clpr },
		FIELD_EXPLANATION("Import or grid data", nullptr),
		{ _field_block, "vertices", &cloth_vertices_block },
		{ _field_block, "indices", &cloth_indices_block },
		{ _field_block, "strip indices", &cloth_indices_block },
		{ _field_block, "links", &cloth_links_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$156)
	{
		"Doesn\'t use wind",
		"Uses grid attach top"
	};
	STRING_LIST(unnamed_enum$156, unnamed_enum$156_strings, _countof(unnamed_enum$156_strings));

	TAG_STRUCT(
		cloth_indices_block_struct_definition,
		"cloth_indices_block",
		"cloth_indices_block_struct_definition",
		"s_cloth_index_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		cloth_links_block_struct_definition,
		"cloth_links_block",
		"cloth_links_block_struct_definition",
		"s_cloth_link_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "attachment bits" },
		{ _field_short_integer, "index1" },
		{ _field_short_integer, "index2" },
		{ _field_real, "default_distance" },
		{ _field_real, "damping_multiplier" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		cloth_properties_struct_definition,
		"cloth_properties",
		"cloth_properties_struct_definition",
		"s_cloth_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "Integration type", &unnamed_enum$157 },
		{ _field_short_integer, "Number iterations", "[1-8] sug 1" },
		{ _field_real, "weight", "[-10.0 - 10.0] sug 1.0" },
		{ _field_real, "drag", "[0.0 - 0.5] sug 0.07" },
		{ _field_real, "wind_scale", "[0.0 - 3.0] sug 1.0" },
		{ _field_real, "wind_flappiness_scale", "[0.0 - 1.0] sug 0.75" },
		{ _field_real, "longest_rod", "[1.0 - 10.0] sug 3.5" },
		FIELD_PAD("value", 24),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$157)
	{
		"verlet"
	};
	STRING_LIST(unnamed_enum$157, unnamed_enum$157_strings, _countof(unnamed_enum$157_strings));

	TAG_STRUCT(
		cloth_vertices_block_struct_definition,
		"cloth_vertices_block",
		"cloth_vertices_block_struct_definition",
		"s_cloth_vertex_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "initial position" },
		{ _field_real_vector_2d, "uv" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		cluster_door_portal_encoded_pas_block_struct_definition,
		"cluster_door_portal_encoded_pas_block",
		"cluster_door_portal_encoded_pas_block_struct_definition",
		"s_dword$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		collision_bsp_physics_block_struct_definition,
		"collision_bsp_physics_block",
		"collision_bsp_physics_block_struct_definition",
		"s_collision_bsp_physics_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "value" },
		FIELD_SKIP("value", 32),
		FIELD_PAD("value", 16),
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "value" },
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "value" },
		{ _field_pointer, "value" },
		{ _field_data, "mopp code data", &mopp_codes_data },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 8, _field_id_align),
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		collision_bsp_struct_definition,
		"collision_bsp",
		"collision_bsp_struct_definition",
		"s_collision_bsp",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 8 },
		{ _field_block, "bsp3d nodes", &bsp3d_nodes_block },
		{ _field_block, "planes", &planes_block },
		{ _field_block, "leaves", &leaves_block },
		{ _field_block, "bsp2d references", &bsp2d_references_block },
		{ _field_block, "bsp2d nodes", &bsp2d_nodes_block },
		{ _field_block, "surfaces", &surfaces_block },
		{ _field_block, "edges", &edges_block },
		{ _field_block, "vertices", &vertices_block },
		
		{ _struct_version_mode_equal, 1, 8 },
		{ _field_block, "bsp3d nodes", &small_bsp3d_nodes_block },
		{ _field_block, "planes", &planes_block },
		{ _field_block, "leaves", &leaves_block },
		{ _field_block, "bsp2d references", &bsp2d_references_block },
		{ _field_block, "bsp2d nodes", &bsp2d_nodes_block },
		{ _field_block, "surfaces", &surfaces_block },
		{ _field_block, "edges", &edges_block },
		{ _field_block, "vertices", &vertices_block },
		
		{ _struct_version_mode_equal, 0, 8 },
		{ _field_block, "bsp3d nodes", &large_bsp3d_nodes_block },
		{ _field_block, "planes", &planes_block },
		{ _field_block, "leaves", &large_leaves_block },
		{ _field_block, "bsp2d references", &large_bsp2d_references_block },
		{ _field_block, "bsp2d nodes", &large_bsp2d_nodes_block },
		{ _field_block, "surfaces", &large_surfaces_block },
		{ _field_block, "edges", &large_edges_block },
		{ _field_block, "vertices", &large_vertices_block },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		collision_damage_block_struct_definition,
		"collision_damage_block",
		"collision_damage_block_struct_definition",
		"s_game_globals_collision_damage",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "collision damage", &damage_effect_group_reference },
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		collision_edge_struct_definition,
		"collision_edge",
		"collision_edge_struct_definition",
		"s_collision_edge",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 6 },
		{ _field_short_integer, "start vertex" },
		{ _field_short_integer, "end vertex" },
		{ _field_short_integer, "forward edge" },
		{ _field_short_integer, "reverse edge" },
		{ _field_short_integer, "left surface" },
		{ _field_short_integer, "right surface" },
		
		{ _struct_version_mode_equal, 0, 7 },
		{ _field_short_integer, "start vertex" },
		{ _field_short_integer, "end vertex" },
		{ _field_short_integer, "forward edge" },
		{ _field_short_integer, "reverse edge" },
		{ _field_short_integer, "left surface" },
		{ _field_short_integer, "right surface" },
		FIELD_PAD("value", 4),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		collision_model_bsp_block_struct_definition,
		"collision_model_bsp_block",
		"collision_model_bsp_block_struct_definition",
		"s_collision_model_bsp",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "node index" },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 16),
		{ _field_struct, "bsp", &collision_bsp_struct_definition, _field_id_cbsp }, // structure_version:2
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		collision_model_fields_current_struct_definition,
		"collision_model_fields_current",
		"collision_model_fields_current_struct_definition",
		"s_collision_model_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 8 },
		{ _field_block, "import info", &global_tag_import_info_block },
		{ _field_block, "errors", &global_error_report_categories_block },
		{ _field_long_flags, "flags", &unnamed_enum$160 },
		FIELD_USELESS_PAD("value", 124),
		{ _field_block, "materials", &collision_model_material_block },
		{ _field_block, "regions", &collision_model_region_block },
		{ _field_block, "pathfinding spheres", &collision_model_pathfinding_sphere_block },
		{ _field_block, "nodes", &collision_model_node_block },
		
		{ _struct_version_mode_equal, 0, 7 },
		{ _field_struct, "OLD damage resistance", &old_global_damage_resistance_struct_struct_definition, _field_id_DREZ },
		FIELD_PAD("value", 4),
		{ _field_block, "errors", &global_error_report_categories_block },
		{ _field_block, "materials", &collision_model_material_block },
		{ _field_block, "regions", &collision_model_region_block },
		{ _field_block, "pathfinding spheres", &collision_model_pathfinding_sphere_block },
		{ _field_block, "nodes", &collision_model_node_block },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$160)
	{
		"contains open edges"
	};
	STRING_LIST(unnamed_enum$160, unnamed_enum$160_strings, _countof(unnamed_enum$160_strings));

	TAG_STRUCT(
		collision_model_material_block_struct_definition,
		"collision_model_material_block",
		"collision_model_material_block_struct_definition",
		"s_collision_model_material",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		collision_model_node_fields_current_struct_definition,
		"collision_model_node_fields_current",
		"collision_model_node_fields_current_struct_definition",
		"s_collision_model_node",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 5 },
		{ _field_string_id, "name" },
		FIELD_PAD("value", 2),
		{ _field_short_block_index, "parent node" },
		{ _field_short_block_index, "next sibling node" },
		{ _field_short_block_index, "first child node" },
		
		{ _struct_version_mode_equal, 0, 6 },
		{ _field_old_string_id, "name" },
		FIELD_PAD("value", 2),
		{ _field_short_block_index, "parent node" },
		{ _field_short_block_index, "next sibling node" },
		{ _field_short_block_index, "first child node" },
		FIELD_PAD("value", 24),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		collision_model_pathfinding_sphere_block_struct_definition,
		"collision_model_pathfinding_sphere_block",
		"collision_model_pathfinding_sphere_block_struct_definition",
		"s_collision_model_pathfinding_sphere",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "node" },
		{ _field_word_flags, "flags", &unnamed_enum$163 },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real_point_3d, "center" },
		{ _field_real, "radius" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$163)
	{
		"remains when open",
		"vehicle only",
		"with sectors"
	};
	STRING_LIST(unnamed_enum$163, unnamed_enum$163_strings, _countof(unnamed_enum$163_strings));

	VERSIONED_TAG_STRUCT(
		collision_model_permutation_fields_current_struct_definition,
		"collision_model_permutation_fields_current",
		"collision_model_permutation_fields_current_struct_definition",
		"s_collision_model_permutation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 3 },
		{ _field_string_id, "name" },
		{ _field_block, "bsps", &collision_model_bsp_block },
		{ _field_block, "bsp_physics", &collision_bsp_physics_block },
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_string_id, "name" },
		FIELD_PAD("value", 24),
		{ _field_block, "bsps", &collision_model_bsp_block },
		{ _field_block, "bsp_physics", &collision_bsp_physics_block },
		FIELD_PAD("value", 44),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		collision_model_region_block_struct_definition,
		"collision_model_region_block",
		"collision_model_region_block_struct_definition",
		"s_collision_model_region",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_block, "permutations", &collision_model_permutation_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		colony_block_struct_definition,
		"colony_block",
		"colony_block_struct_definition",
		"s_colony_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$164 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		{ _field_real_bounds, "radius" },
		FIELD_PAD("value", 12),
		{ _field_real_argb_color, "debug color" },
		{ _field_tag_reference, "base map", &bitmap_group_reference },
		{ _field_tag_reference, "detail map", &bitmap_group_reference },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$164)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$164, unnamed_enum$164_strings, _countof(unnamed_enum$164_strings));

	TAG_STRUCT(
		color_block_struct_definition,
		"color_block",
		"color_block_struct_definition",
		"s_color_table_color",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_real_argb_color, "color" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		color_function_struct_struct_definition,
		"color_function_struct",
		"color_function_struct_struct_definition",
		"s_function_definition$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("function", _field_id_function_editor),
		{ _field_struct, "function", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_terminator }
	};

	TAG_STRUCT(
		color_table_block_struct_definition,
		"color_table_block",
		"color_table_block_struct_definition",
		"s_color_table",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "colors", &color_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		constraint_bodies_struct_struct_definition,
		"constraint_bodies_struct",
		"constraint_bodies_struct_struct_definition",
		"s_physics_model_constraint_bodies",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "node a" },
		{ _field_short_block_index, "node b" },
		{ _field_real, "a scale" },
		{ _field_real_vector_3d, "a forward" },
		{ _field_real_vector_3d, "a left" },
		{ _field_real_vector_3d, "a up" },
		{ _field_real_point_3d, "a position" },
		{ _field_real, "b scale" },
		{ _field_real_vector_3d, "b forward" },
		{ _field_real_vector_3d, "b left" },
		{ _field_real_vector_3d, "b up" },
		{ _field_real_point_3d, "b position" },
		{ _field_short_block_index, "edge index" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		contact_point_block_struct_definition,
		"contact_point_block",
		"contact_point_block_struct_definition",
		"s_biped_contact_point",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_USELESS_PAD("value", 32),
		{ _field_old_string_id, "marker name" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		contact_point_block_v1_struct_definition,
		"contact_point_block_v1",
		"contact_point_block_v1_struct_definition",
		"s_biped_contact_point_v1",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 32),
		{ _field_old_string_id, "marker name" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		contrail_block_struct_definition,
		"contrail_block",
		"contrail_block_struct_definition",
		"s_contrail_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$165 },
		{ _field_word_flags, "scale flags", "these flags determine which fields are scaled by the contrail density", &unnamed_enum$166 },
		FIELD_EXPLANATION("point creation", nullptr),
		{ _field_real, "point generation rate", "this many points are generated per second", "points per second" },
		{ _field_real_bounds, "point velocity", "velocity added to each point's initial velocity", "world units per second" },
		{ _field_angle, "point velocity cone angle", "initial velocity is inside the cone defined by the marker's forward vector and this angle", "degrees" },
		{ _field_real_fraction, "inherited velocity fraction", "fraction of parent object's velocity that is inherited by contrail points." },
		FIELD_EXPLANATION("rendering", nullptr),
		{ _field_short_enum, "render type", "this specifies how the contrail is oriented in space", &unnamed_enum$167 },
		FIELD_PAD("value", 2),
		{ _field_real, "texture repeats u", "texture repeats per contrail segment" },
		{ _field_real, "texture repeats v", "texture repeats across contrail width" },
		{ _field_real, "texture animation u", "the texture along the contrail is animated by this value", "repeats per second" },
		{ _field_real, "texture animation v", "the texture across the contrail is animated by this value", "repeats per second" },
		{ _field_real, "animation rate", nullptr, "frames per second" },
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_short_integer, "first sequence index" },
		{ _field_short_integer, "sequence count" },
		FIELD_USELESS_PAD("value", 64),
		FIELD_PAD("value", 40),
		{ _field_word_flags, "shader flags", &unnamed_enum$168 },
		{ _field_short_enum, "framebuffer blend function", &unnamed_enum$169 },
		{ _field_short_enum, "framebuffer fade mode", &unnamed_enum$170 },
		{ _field_word_flags, "map flags", &unnamed_enum$171 },
		FIELD_PAD("value", 28),
		FIELD_EXPLANATION("Secondary Map", "Optional multitextured second map"),
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_short_enum, "anchor", &unnamed_enum$172 },
		{ _field_word_flags, "flags", &unnamed_enum$171 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "u-animation function", &unnamed_enum$173 },
		{ _field_real, "u-animation period", "0 defaults to 1", "seconds" },
		{ _field_real, "u-animation phase" },
		{ _field_real, "u-animation scale", "0 defaults to 1", "repeats" },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "v-animation function", &unnamed_enum$173 },
		{ _field_real, "v-animation period", "0 defaults to 1", "seconds" },
		{ _field_real, "v-animation phase" },
		{ _field_real, "v-animation scale", "0 defaults to 1", "repeats" },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "rotation-animation function", &unnamed_enum$173 },
		{ _field_real, "rotation-animation period", "0 defaults to 1", "seconds" },
		{ _field_real, "rotation-animation phase" },
		{ _field_real, "rotation-animation scale", "0 defaults to 360", "degrees" },
		{ _field_real_point_2d, "rotation-animation center" },
		FIELD_PAD("value", 4),
		{ _field_real, "zsprite radius scale" },
		FIELD_PAD("value", 20),
		{ _field_block, "point states", &contrail_point_states_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$165)
	{
		"first point unfaded",
		"last point unfaded",
		"points start pinned to media",
		"points start pinned to ground",
		"points always pinned to media",
		"points always pinned to ground",
		"edge effect fades slowly",
		"dont\'t inherit object change color"
	};
	STRING_LIST(unnamed_enum$165, unnamed_enum$165_strings, _countof(unnamed_enum$165_strings));

	STRINGS(unnamed_enum$166)
	{
		"point generation rate",
		"point velocity",
		"point velocity delta",
		"point velocity cone angle",
		"inherited velocity fraction",
		"sequence animation rate",
		"texture scale u",
		"texture scale v",
		"texture animation u",
		"texture animation v"
	};
	STRING_LIST(unnamed_enum$166, unnamed_enum$166_strings, _countof(unnamed_enum$166_strings));

	STRINGS(unnamed_enum$167)
	{
		"vertical orientation",
		"horizontal orientation",
		"media mapped",
		"ground mapped",
		"viewer facing",
		"double-marker linked"
	};
	STRING_LIST(unnamed_enum$167, unnamed_enum$167_strings, _countof(unnamed_enum$167_strings));

	STRINGS(unnamed_enum$168)
	{
		"sort bias",
		"nonlinear tint",
		"don\'t overdraw fp weapon"
	};
	STRING_LIST(unnamed_enum$168, unnamed_enum$168_strings, _countof(unnamed_enum$168_strings));

	STRINGS(unnamed_enum$169)
	{
		"alpha blend",
		"multiply",
		"double multiply",
		"add",
		"subtract",
		"component min",
		"component max",
		"alpha-multiply add",
		"constant color blend",
		"inverse constant color blend",
		"none"
	};
	STRING_LIST(unnamed_enum$169, unnamed_enum$169_strings, _countof(unnamed_enum$169_strings));

	STRINGS(unnamed_enum$170)
	{
		"none",
		"fade when perpendicular",
		"fade when parallel"
	};
	STRING_LIST(unnamed_enum$170, unnamed_enum$170_strings, _countof(unnamed_enum$170_strings));

	STRINGS(unnamed_enum$171)
	{
		"unfiltered"
	};
	STRING_LIST(unnamed_enum$171, unnamed_enum$171_strings, _countof(unnamed_enum$171_strings));

	STRINGS(unnamed_enum$172)
	{
		"with primary",
		"with screen space",
		"zsprite"
	};
	STRING_LIST(unnamed_enum$172, unnamed_enum$172_strings, _countof(unnamed_enum$172_strings));

	STRINGS(unnamed_enum$173)
	{
		"one",
		"zero",
		"cosine",
		"cosine (variable period)",
		"diagonal wave",
		"diagonal wave (variable period)",
		"slide",
		"slide (variable period)",
		"noise",
		"jitter",
		"wander",
		"spark"
	};
	STRING_LIST(unnamed_enum$173, unnamed_enum$173_strings, _countof(unnamed_enum$173_strings));

	TAG_STRUCT(
		contrail_point_states_block_struct_definition,
		"contrail_point_states_block",
		"contrail_point_states_block_struct_definition",
		"s_contrail_point_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("state timing", nullptr),
		{ _field_real_bounds, "duration", "the time a point spends in this state", "seconds:seconds" },
		{ _field_real_bounds, "transition duration", "the time a point takes to transition to the next state", "seconds" },
		FIELD_EXPLANATION("point variables", nullptr),
		{ _field_tag_reference, "physics", &point_physics_group_reference },
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "width", "contrail width at this point", "world units" },
		{ _field_real_argb_color, "color lower bound", "contrail color at this point" },
		{ _field_real_argb_color, "color upper bound", "contrail color at this point" },
		{ _field_long_flags, "scale flags", "these flags determine which fields are scaled by the contrail density", &unnamed_enum$174 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$174)
	{
		"duration",
		"duration delta",
		"transition duration",
		"transition duration delta",
		"width",
		"color"
	};
	STRING_LIST(unnamed_enum$174, unnamed_enum$174_strings, _countof(unnamed_enum$174_strings));

	TAG_STRUCT(
		crate_block_struct_definition,
		"crate_block",
		"crate_block_struct_definition",
		"s_crate_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		{ _field_word_flags, "flags", &unnamed_enum$133 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 124),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$133)
	{
		"does not block AOE"
	};
	STRING_LIST(unnamed_enum$133, unnamed_enum$133_strings, _countof(unnamed_enum$133_strings));

	TAG_STRUCT(
		create_new_variant_struct_struct_definition,
		"create_new_variant_struct",
		"create_new_variant_struct_struct_definition",
		"s_default_variant_definition$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "value" },
		{ _field_long_enum, "value", &unnamed_enum$204 },
		{ _field_block, "settings", &g_default_variant_settings_block },
		{ _field_char_integer, "value" },
		FIELD_PAD("value", 3),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$204)
	{
		"slayer",
		"oddball",
		"juggernaut",
		"king",
		"ctf",
		"invasion",
		"territories"
	};
	STRING_LIST(unnamed_enum$204, unnamed_enum$204_strings, _countof(unnamed_enum$204_strings));

	TAG_STRUCT(
		creature_block_struct_definition,
		"creature_block",
		"creature_block_struct_definition",
		"s_creature_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ CREATURE $$$", nullptr),
		{ _field_word_flags, "flags", &unnamed_enum$175 },
		{ _field_struct, "campaign metagame bucket", &campaign_metagame_bucket_block_struct_definition, _field_id_cmtb },
		{ _field_short_enum, "default team", &unnamed_enum$176 },
		{ _field_short_enum, "motion sensor blip size", &unnamed_enum$109 },
		{ _field_angle, "turning velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "turning acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual turning modifier", nullptr, nullptr, "[0,1]" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "autoaim width", nullptr, "world units" },
		{ _field_struct, "physics", &character_physics_struct_struct_definition, _field_id_chpy },
		FIELD_USELESS_PAD("value", 64),
		{ _field_tag_reference, "impact damage", &damage_effect_group_reference },
		{ _field_tag_reference, "impact shield damage", "if not specified, uses 'impact damage'", &damage_effect_group_reference },
		FIELD_USELESS_PAD("value", 32),
		FIELD_EXPLANATION("death and destruction", nullptr),
		{ _field_real_bounds, "destroy after death time", "if non-zero, the creature will destroy itself upon death after this much time", "seconds" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$175)
	{
		"unused",
		"infection form",
		"immune to falling damage",
		"rotate while airborne",
		"zapped by shields",
		"attach upon impact",
		"not on motion sensor"
	};
	STRING_LIST(unnamed_enum$175, unnamed_enum$175_strings, _countof(unnamed_enum$175_strings));

	STRINGS(unnamed_enum$176)
	{
		"default",
		"player",
		"human",
		"covenant",
		"flood",
		"sentinel",
		"heretic",
		"prophet",
		"unused8",
		"unused9",
		"unused10",
		"unused11",
		"unused12",
		"unused13",
		"unused14",
		"unused15"
	};
	STRING_LIST(unnamed_enum$176, unnamed_enum$176_strings, _countof(unnamed_enum$176_strings));

	VERSIONED_TAG_STRUCT(
		cs_point_set_struct_definition,
		"cs_point_set",
		"cs_point_set_struct_definition",
		"s_cs_point_set",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 5 },
		{ _field_string, "name" },
		{ _field_block, "points", &cs_point_block },
		{ _field_short_block_index, "bsp index" },
		{ _field_short_integer, "manual reference frame" },
		{ _field_long_flags, "flags", &unnamed_enum$91 },
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_string, "name" },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 44),
		{ _field_block, "points", &cs_point_block },
		FIELD_PAD("value", 48),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$91)
	{
		"manual reference frame",
		"turret deployment"
	};
	STRING_LIST(unnamed_enum$91, unnamed_enum$91_strings, _countof(unnamed_enum$91_strings));

	VERSIONED_TAG_STRUCT(
		cs_point_struct_definition,
		"cs_point",
		"cs_point_struct_definition",
		"s_cs_point",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 6 },
		{ _field_string, "name" },
		{ _field_real_point_3d, "position" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		{ _field_long_integer, "surface index" },
		{ _field_real_euler_angles_2d, "facing direction" },
		
		{ _struct_version_mode_equal, 0, 4 },
		{ _field_string, "name" },
		{ _field_real_point_3d, "position" },
		{ _field_long_integer, "surface index" },
		{ _field_real_euler_angles_2d, "facing direction" },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		cs_script_data_block_struct_definition,
		"cs_script_data_block",
		"cs_script_data_block_struct_definition",
		"s_cs_script_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "point sets", &cs_point_set_block },
		FIELD_PAD("value", 120),
		{ _field_terminator }
	};

	TAG_STRUCT(
		custom_references_block_struct_definition,
		"custom_references_block",
		"custom_references_block_struct_definition",
		"s_game_globals_custom_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "custom reference", &_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference$2, INVALID_TAG);

	TAG_STRUCT(
		damage_animation_block_struct_definition,
		"damage_animation_block",
		"damage_animation_block_struct_definition",
		"s_animation_damage_actions",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "label" },
		{ _field_block, "directions", &damage_direction_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		damage_constraint_info_block_struct_definition,
		"damage_constraint_info_block",
		"damage_constraint_info_block_struct_definition",
		"s_damage_constraint_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "physics model constraint name" },
		{ _field_string_id, "damage constraint name" },
		{ _field_string_id, "damage constraint group name" },
		{ _field_real, "group probability scale" },
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		damage_direction_block_struct_definition,
		"damage_direction_block",
		"damage_direction_block_struct_definition",
		"s_animation_damage_direction",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "regions", &damage_region_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		damage_effect_player_response_block_struct_definition,
		"damage_effect_player_response_block",
		"damage_effect_player_response_block_struct_definition",
		"s_damage_effect_player_response_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "response type", &unnamed_enum$261 },
		FIELD_PAD("value", 2),
		FIELD_EXPLANATION("screen flash", "There are seven screen flash types:\n\nNONE: DST\'= DST\nLIGHTEN: DST\'= DST(1 - A) + C\nDARKEN: DST\'= DST(1 - A) - C\nMAX: DST\'= MAX[DST(1 - C), (C - A)(1-DST)]\nMIN: DST\'= MIN[DST(1 - C), (C + A)(1-DST)]\nTINT: DST\'= DST(1 - C) + (A*PIN[2C - 1, 0, 1] + A)(1-DST)\nINVERT: DST\'= DST(1 - C) + A)\n\nIn the above equations C and A represent the color and alpha of the screen flash, DST represents the color in the framebuffer before the screen flash is applied, and DST\' represents the color after the screen flash is applied."),
		{ _field_struct, "screen flash", &screen_flash_definition_struct_struct_definition, _field_id_SFDS },
		FIELD_EXPLANATION("vibration", nullptr),
		{ _field_struct, "vibration", &vibration_definition_struct_struct_definition, _field_id_RBDS },
		FIELD_EXPLANATION("sound effect", nullptr),
		{ _field_struct, "sound effect", &damage_effect_sound_effect_definition_struct_definition, _field_id_dsfx },
		FIELD_USELESS_PAD("value", 24),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$261)
	{
		"shielded",
		"unshielded",
		"all"
	};
	STRING_LIST(unnamed_enum$261, unnamed_enum$261_strings, _countof(unnamed_enum$261_strings));

	TAG_STRUCT(
		damage_effect_sound_effect_definition_struct_definition,
		"damage_effect_sound_effect_definition",
		"damage_effect_sound_effect_definition_struct_definition",
		"s_damage_effect_sound_effect_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "effect name" },
		{ _field_real, "duration", nullptr, "seconds" },
		FIELD_CUSTOM("effect scale function", _field_id_function_editor),
		{ _field_struct, "effect scale function", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		damage_effect_struct_definition,
		"damage_effect",
		"damage_effect_struct_definition",
		"s_damage_effect_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 66 },
		{ _field_real_bounds, "radius", nullptr, "world units" },
		{ _field_real_fraction, "cutoff scale", nullptr, nullptr, "[0,1]" },
		{ _field_long_flags, "flags", &unnamed_enum$257 },
		FIELD_EXPLANATION("damage", nullptr),
		{ _field_short_enum, "side effect", &unnamed_enum$258 },
		{ _field_short_enum, "category", &unnamed_enum$259 },
		{ _field_long_flags, "flags", &unnamed_enum$260 },
		{ _field_real, "AOE core radius", "if this is area of effect damage", "world units" },
		{ _field_real, "damage lower bound" },
		{ _field_real_bounds, "damage upper bound" },
		{ _field_angle, "dmg inner cone angle" },
		{ _field_struct, "blah", &damage_outer_cone_angle_struct_definition, _field_id_masd }, // structure_version:1
		{ _field_real, "active camouflage damage", "how much more visible this damage makes a player who is active camouflaged", nullptr, "[0,1]" },
		{ _field_real, "stun", "amount of stun added to damaged unit", nullptr, "[0,1]" },
		{ _field_real, "maximum stun", "damaged unit's stun will never exceed this amount", nullptr, "[0,1]" },
		{ _field_real, "stun time", "duration of stun due to this damage", "seconds" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "instantaneous acceleration", nullptr, nullptr, "[0,+inf]" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "rider direct damage scale" },
		{ _field_real, "rider maximum transfer damage scale" },
		{ _field_real, "rider minimum transfer damage scale" },
		FIELD_USELESS_PAD("value", 140),
		{ _field_string_id, "general_damage" },
		{ _field_string_id, "specific_damage" },
		{ _field_real, "AI stun radius", nullptr, "world units" },
		{ _field_real_bounds, "AI stun bounds", nullptr, "(0-1)" },
		{ _field_real, "shake radius" },
		{ _field_real, "EMP radius" },
		{ _field_block, "player responses", &damage_effect_player_response_block },
		FIELD_EXPLANATION("temporary camera impulse", nullptr),
		{ _field_real, "duration", nullptr, "seconds" },
		{ _field_short_enum, "fade function", &unnamed_enum$264 },
		FIELD_PAD("value", 2),
		{ _field_angle, "rotation", nullptr, "degrees" },
		{ _field_real, "pushback", nullptr, "world units" },
		{ _field_real_bounds, "jitter", nullptr, "world units" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 24),
		FIELD_EXPLANATION("camera shaking", "The wobble function and weight affects how the camera shake oscilates over time.\nIf the weight is one, then the wobble function completely scales the translational\nand rotational magnitudes.  The less the weight, the less the effect wobble has.\nIf the wobble weight is 0 then wobble is completely ignored."),
		{ _field_real, "duration", "the effect will last for this duration.", "seconds" },
		{ _field_short_enum, "falloff function", "a function to envelope the effect's magnitude over time", &unnamed_enum$264 },
		FIELD_PAD("value", 2),
		{ _field_real, "random translation", "random translation in all directions", "world units" },
		{ _field_angle, "random rotation", "random rotation in all directions", "degrees" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_short_enum, "wobble function", "a function to perturb the effect's behavior over time", &unnamed_enum$173 },
		FIELD_PAD("value", 2),
		{ _field_real, "wobble function period", nullptr, "seconds" },
		{ _field_real_fraction, "wobble weight", "a value of 0.0 signifies that the wobble function has no effect; a value of 1.0 signifies that the effect will not be felt when the wobble function's value is zero." },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 20),
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("sound", nullptr),
		{ _field_tag_reference, "sound", &sound_group_reference },
		FIELD_USELESS_PAD("value", 112),
		FIELD_EXPLANATION("breaking effect", "Controls particle velocities when a damage effect shatters a materal.\n\nAll particles created within \'forward radius\' will be kicked along the\ndamage direction with a speed equivalent to \'forward velocity\' at the\nepicenter of the damage and 0 at the outer radius.  \'Forward exponent\'\nis used to modify the velocity scale.  A low exponent (like 0.5) means that\nparticles between the epicenter and the radius will be kicked out with a speed\ncloser to \'forward velocity\' than if a higher exponent (like 2.0) was used\n\nThe outward fields work in a similar way, except instead of kicking along the\ndamage direction, they get kick away from the damage epicenter."),
		{ _field_real, "forward velocity", nullptr, "world units per second" },
		{ _field_real, "forward radius", nullptr, "world units" },
		{ _field_real, "forward exponent" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "outward velocity", nullptr, "world units per second" },
		{ _field_real, "outward radius", nullptr, "world units" },
		{ _field_real, "outward exponent" },
		FIELD_USELESS_PAD("value", 12),
		
		{ _struct_version_mode_equal, 0, 81 },
		{ _field_real_bounds, "radius", nullptr, "world units" },
		{ _field_real_fraction, "cutoff scale", nullptr, nullptr, "[0,1]" },
		{ _field_long_flags, "flags", &unnamed_enum$257 },
		{ _field_real, "AI stun radius", nullptr, "world units" },
		{ _field_real_bounds, "AI stun bounds", nullptr, "(0-1)" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_short_enum, "type", &unnamed_enum$262 },
		{ _field_short_enum, "priority", &unnamed_enum$263 },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "duration", nullptr, "seconds" },
		{ _field_short_enum, "fade function", &unnamed_enum$264 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 8),
		{ _field_real_fraction, "maximum intensity", nullptr, nullptr, "[0,1]" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real_argb_color, "color" },
		{ _field_real_fraction, "frequency", nullptr, nullptr, "[0,1]" },
		{ _field_real, "duration", nullptr, "seconds" },
		{ _field_short_enum, "fade function", &unnamed_enum$264 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 8),
		{ _field_real_fraction, "frequency", nullptr, nullptr, "[0,1]" },
		{ _field_real, "duration", nullptr, "seconds" },
		{ _field_short_enum, "fade function", &unnamed_enum$264 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 8),
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 16),
		{ _field_real, "duration", nullptr, "seconds" },
		{ _field_short_enum, "fade function", &unnamed_enum$264 },
		FIELD_PAD("value", 2),
		{ _field_angle, "rotation", nullptr, "degrees" },
		{ _field_real, "pushback", nullptr, "world units" },
		{ _field_real_bounds, "jitter", nullptr, "world units" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 24),
		{ _field_real, "duration", "the effect will last for this duration.", "seconds" },
		{ _field_short_enum, "falloff function", "a function to envelope the effect's magnitude over time", &unnamed_enum$264 },
		FIELD_PAD("value", 2),
		{ _field_real, "random translation", "random translation in all directions", "world units" },
		{ _field_angle, "random rotation", "random rotation in all directions", "degrees" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_short_enum, "wobble function", "a function to perturb the effect's behavior over time", &unnamed_enum$173 },
		FIELD_PAD("value", 2),
		{ _field_real, "wobble function period", nullptr, "seconds" },
		{ _field_real_fraction, "wobble weight", "a value of 0.0 signifies that the wobble function has no effect; a value of 1.0 signifies that the effect will not be felt when the wobble function's value is zero." },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 28),
		{ _field_tag_reference, "sound", &sound_group_reference },
		FIELD_USELESS_PAD("value", 112),
		{ _field_real, "forward velocity", nullptr, "world units per second" },
		{ _field_real, "forward radius", nullptr, "world units" },
		{ _field_real, "forward exponent" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "outward velocity", nullptr, "world units per second" },
		{ _field_real, "outward radius", nullptr, "world units" },
		{ _field_real, "outward exponent" },
		FIELD_USELESS_PAD("value", 12),
		FIELD_EXPLANATION("damage", nullptr),
		{ _field_short_enum, "side effect", &unnamed_enum$258 },
		{ _field_short_enum, "category", &unnamed_enum$259 },
		{ _field_long_flags, "flags", &unnamed_enum$260 },
		{ _field_real, "AOE core radius", "if this is area of effect damage", "world units" },
		{ _field_real, "damage lower bound" },
		{ _field_real_bounds, "damage upper bound" },
		{ _field_angle, "dmg inner cone angle" },
		{ _field_struct, "blah", &damage_outer_cone_angle_struct_definition, _field_id_masd }, // structure_version:1
		{ _field_real, "active camouflage damage", "how much more visible this damage makes a player who is active camouflaged", nullptr, "[0,1]" },
		{ _field_real, "stun", "amount of stun added to damaged unit", nullptr, "[0,1]" },
		{ _field_real, "maximum stun", "damaged unit's stun will never exceed this amount", nullptr, "[0,1]" },
		{ _field_real, "stun time", "duration of stun due to this damage", "seconds" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "instantaneous acceleration", nullptr, nullptr, "[0,+inf]" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "value" },
		{ _field_real, "value" },
		{ _field_real, "value" },
		FIELD_USELESS_PAD("value", 140),
		{ _field_string_id, "general_damage" },
		{ _field_string_id, "specific_damage" },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$257)
	{
		"don\'t scale damage by distance",
		"area damage players only#area of effect damage only affects players"
	};
	STRING_LIST(unnamed_enum$257, unnamed_enum$257_strings, _countof(unnamed_enum$257_strings));

	STRINGS(unnamed_enum$258)
	{
		"none",
		"harmless",
		"lethal to the unsuspecting",
		"emp"
	};
	STRING_LIST(unnamed_enum$258, unnamed_enum$258_strings, _countof(unnamed_enum$258_strings));

	STRINGS(unnamed_enum$259)
	{
		"none",
		"falling",
		"bullet",
		"grenade",
		"high explosive",
		"sniper",
		"melee",
		"flame",
		"mounted weapon",
		"vehicle",
		"plasma",
		"needle",
		"shotgun"
	};
	STRING_LIST(unnamed_enum$259, unnamed_enum$259_strings, _countof(unnamed_enum$259_strings));

	STRINGS(unnamed_enum$260)
	{
		"does not hurt owner",
		"can cause headshots",
		"pings resistant units",
		"does not hurt friends",
		"does not ping units",
		"detonates explosives",
		"only hurts shields",
		"causes flaming death",
		"damage indicators always point down",
		"skips shields",
		"only hurts one infection form",
		"obsolete, was can cause multiplayer headshots",
		"infection form pop",
		"ignore seat scale for dir. dmg",
		"forces hard ping",
		"does not hurt players"
	};
	STRING_LIST(unnamed_enum$260, unnamed_enum$260_strings, _countof(unnamed_enum$260_strings));

	STRINGS(unnamed_enum$264)
	{
		"linear",
		"late",
		"very late",
		"early",
		"very early",
		"cosine",
		"zero",
		"one"
	};
	STRING_LIST(unnamed_enum$264, unnamed_enum$264_strings, _countof(unnamed_enum$264_strings));

	STRINGS(unnamed_enum$262)
	{
		"none",
		"lighten",
		"darken",
		"max",
		"min",
		"invert",
		"tint"
	};
	STRING_LIST(unnamed_enum$262, unnamed_enum$262_strings, _countof(unnamed_enum$262_strings));

	STRINGS(unnamed_enum$263)
	{
		"low",
		"medium",
		"high"
	};
	STRING_LIST(unnamed_enum$263, unnamed_enum$263_strings, _countof(unnamed_enum$263_strings));

	TAG_STRUCT(
		damage_group_block_struct_definition,
		"damage_group_block",
		"damage_group_block_struct_definition",
		"s_damage_group_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_block, "armor modifiers", &armor_modifier_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		damage_outer_cone_angle_struct_definition,
		"damage_outer_cone_angle",
		"damage_outer_cone_angle_struct_definition",
		"s_real$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_angle, "dmg outer cone angle" },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		damage_region_block_struct_definition,
		"damage_region_block",
		"damage_region_block_struct_definition",
		"s_animation_id$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "animation", &animation_index_struct_struct_definition, _field_id_ANII },
		{ _field_terminator }
	};

	TAG_STRUCT(
		damage_seat_info_block_struct_definition,
		"damage_seat_info_block",
		"damage_seat_info_block_struct_definition",
		"s_damage_seat_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "seat label" },
		{ _field_real_fraction, "direct damage scale", "0==no damage, 1==full damage" },
		{ _field_real, "damage transfer fall-off radius" },
		{ _field_real, "maximum transfer damage scale" },
		{ _field_real, "minimum transfer damage scale" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		decal_block_struct_definition,
		"decal_block",
		"decal_block_struct_definition",
		"s_decal_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("DECAL", "There are several \"layers\" which decals can be placed into, these layers are drawn in a specific order relative to the shader layers and each layer has its own specific blending mode. In general, the decal bitmap\'s alpha channel will be used as an opacity mask if it exists.\n\n* LIT ALPHA-BLEND PRELIGHT: Decals in this layer are lit by the lightmap but are \"faded out\" by dynamic lights. What this means is that dynamic lights hitting them will cause them to disappear, sort of. This layer is rendered immediately before lightmap shadows (and before dynamic lights).\n\n* LIT ALPHA-BLEND: Decals in this layer are lit by the lightmap but are NOT lit by dynamic lights. What this means is that if the decal exists in an area that has dark lightmapping but bright dynamic lighting, the decal will appear dark. This layer is rendered immediately after dynamic lights, and all subsequent decal layers are rendered after this one in order.\n\n* DOUBLE MULTIPLY: Decals in this layer will double-multiply the color in the framebuffer. Gray pixels in the decal bitmap will be transparent (black darkens, white brightens). The decal color in the tag does NOT do anything!!\n\n* MULTIPLY: Decals in this layer will multiply the color in the framebuffer. White pixels in the decal bitmap will be transparent. The decal color (in the decal tag) does NOT do anything!!\n\n* MAX: Decals in this layer will perform a component-wise max operation on the framebuffer, replacing color values with whichever is higher. Black pixels in the decal bitmap will be transparent.\n\n* ADD: Decals in this layer will perform an addition operation on the framebuffer, replacing color values with the sum of the two. Black pixels in the decal bitmap will be transparent.\n\n* ERROR: Decals in this layer will render bright red and show through geometry!\n\nA compound decal is a chain of decals which are instantiated simultaneously. Compound decals are created by referencing another decal tag in the \'next_decal_in_chain\' field below. Do not attempt to create a circularly linked decal chain, i.e. A->B->C->A! This will cause problems and probably hang the game. Also, do not reference a decal from an effect if it is not the head of the chain; for example an effect should not instantiate decal B if the chain was A->B->C. Compound decals can have seperate bitmaps, etc., and can be drawn in seperate layers. In addition, we used to have the ability for each decal in the chain can either inherit its parent\'s radius, rotation, color, etc. - or it can randomly choose its own. This behavior was controlled by the \'geometry_inherited_by_next_decal_in_chain\' flag, below but it\'s currently broken."),
		{ _field_word_flags, "flags", &unnamed_enum$181 },
		{ _field_short_enum, "type", "controls how the decal wraps onto surface geometry", &unnamed_enum$182 },
		{ _field_short_enum, "layer", &unnamed_enum$183 },
		{ _field_short_integer, "max overlapping count" },
		{ _field_tag_reference, "next decal in chain", &decal_group_reference$2 },
		{ _field_real_bounds, "radius", "0 defaults to 0.125", "world units" },
		{ _field_real, "radius overlap rejection", nullptr, "muliplier" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real_rgb_color, "color lower bounds" },
		{ _field_real_rgb_color, "color upper bounds" },
		FIELD_USELESS_PAD("value", 12),
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 28),
		{ _field_real_bounds, "lifetime", nullptr, "seconds" },
		{ _field_real_bounds, "decay time", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 12),
		FIELD_PAD("value", 40),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		FIELD_PAD("value", 20),
		{ _field_real, "maximum sprite extent", nullptr, "pixels", FIELD_FLAG_READ_ONLY },
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 8),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$181)
	{
		"geometry inherited by next decal in chain",
		"interpolate color in hsv",
		"...more colors",
		"no random rotation",
		"UNUSED",
		"SAPIEN- snap to axis",
		"SAPIEN- incremental counter",
		"UNUSED",
		"preserve aspect",
		"UNUSED"
	};
	STRING_LIST(unnamed_enum$181, unnamed_enum$181_strings, _countof(unnamed_enum$181_strings));

	STRINGS(unnamed_enum$182)
	{
		"scratch",
		"splatter",
		"burn",
		"painted sign"
	};
	STRING_LIST(unnamed_enum$182, unnamed_enum$182_strings, _countof(unnamed_enum$182_strings));

	STRINGS(unnamed_enum$183)
	{
		"lit alpha-blend prelight",
		"lit alpha-blend",
		"double multiply",
		"multiply",
		"max",
		"add",
		"error"
	};
	STRING_LIST(unnamed_enum$183, unnamed_enum$183_strings, _countof(unnamed_enum$183_strings));

	TAG_REFERENCE(decal_group_reference$2, DECAL_TAG);

	TAG_STRUCT(
		decal_vertices_block_struct_definition,
		"decal_vertices_block",
		"decal_vertices_block_struct_definition",
		"s_rasterizer_vertex_decorator_decal",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_real_point_2d, "texcoord 0" },
		{ _field_real_point_2d, "texcoord 1" },
		{ _field_rgb_color, "color" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		decorator_cache_block_block_struct_definition,
		"decorator_cache_block_block",
		"decorator_cache_block_block_struct_definition",
		"s_decorator_cache_block",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "geometry block info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		{ _field_block, "cache block data", &decorator_cache_block_data_block },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		decorator_cache_block_data_v2_struct_definition,
		"decorator_cache_block_data_v2",
		"decorator_cache_block_data_v2_struct_definition",
		"s_decorator_cache_block_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 9 },
		{ _field_block, "placements", &decorator_placement_block },
		{ _field_block, "decal vertices", &decal_vertices_block },
		{ _field_block, "decal indices", &indices_block },
		{ _field_vertex_buffer, "decal vertex buffer" },
		FIELD_PAD("value", 16),
		{ _field_block, "sprite vertices", &sprite_vertices_block },
		{ _field_block, "sprite indices", &indices_block },
		{ _field_vertex_buffer, "sprite vertex buffer" },
		FIELD_PAD("value", 16),
		
		{ _struct_version_mode_equal, 0, 3 },
		{ _field_block, "placements", &decorator_placement_block },
		{ _field_vertex_buffer, "decal vertex buffer" },
		{ _field_vertex_buffer, "sprite vertex buffer" },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		decorator_cache_definition_struct_definition,
		"decorator_cache_definition",
		"decorator_cache_definition_struct_definition",
		"s_decorator_placement_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "grid origin" },
		{ _field_long_integer, "cell count per dimension" },
		{ _field_block, "cache blocks", &decorator_cache_block_block },
		{ _field_block, "groups", &decorator_group_block },
		{ _field_block, "cells", &decorator_cell_collection_block },
		{ _field_block, "decals", &decorator_projected_decal_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		decorator_cell_collection_block_struct_definition,
		"decorator_cell_collection_block",
		"decorator_cell_collection_block_struct_definition",
		"s_decorator_cell_collection",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_array, "child indices", &unnamed_array },
		{ _field_short_block_index, "cache block index" },
		{ _field_short_integer, "group count" },
		{ _field_long_integer, "group start index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		decorator_classes_block_struct_definition,
		"decorator_classes_block",
		"decorator_classes_block_struct_definition",
		"s_decorator_class_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_char_enum, "type", &unnamed_enum$31 },
		FIELD_PAD("value", 3),
		{ _field_real, "scale" },
		{ _field_block, "permutations", &decorator_permutations_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$31)
	{
		"model",
		"floating decal",
		"projected decal",
		"screen facing quad",
		"axis rotating quad",
		"cross quad"
	};
	STRING_LIST(unnamed_enum$31, unnamed_enum$31_strings, _countof(unnamed_enum$31_strings));

	TAG_STRUCT(
		decorator_group_block_struct_definition,
		"decorator_group_block",
		"decorator_group_block_struct_definition",
		"s_decorator_group",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_block_index, "decorator set" },
		{ _field_char_enum, "decorator_type", &unnamed_enum$31 },
		{ _field_char_integer, "shader index" },
		{ _field_char_integer, "compressed radius" },
		{ _field_short_integer, "cluster" },
		{ _field_short_block_index, "cache block" },
		{ _field_short_integer, "decorator start index" },
		{ _field_short_integer, "decorator count" },
		{ _field_short_integer, "vertex start offset" },
		{ _field_short_integer, "vertex count" },
		{ _field_short_integer, "index start offset" },
		{ _field_short_integer, "index count" },
		{ _field_long_integer, "compressed bounding center" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		decorator_model_indices_block_struct_definition,
		"decorator_model_indices_block",
		"decorator_model_indices_block_struct_definition",
		"s_word$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		decorator_model_vertices_block_struct_definition,
		"decorator_model_vertices_block",
		"decorator_model_vertices_block_struct_definition",
		"s_decorator_model_vertex",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_real_vector_3d, "normal" },
		{ _field_real_vector_3d, "tangent" },
		{ _field_real_vector_3d, "binormal" },
		{ _field_real_point_2d, "texcoord" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		decorator_models_block_struct_definition,
		"decorator_models_block",
		"decorator_models_block_struct_definition",
		"s_decorator_model_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "model name" },
		{ _field_short_integer, "index start" },
		{ _field_short_integer, "index count" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		decorator_permutations_block_struct_definition,
		"decorator_permutations_block",
		"decorator_permutations_block_struct_definition",
		"s_decorator_permutation_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_char_block_index, "shader" },
		FIELD_PAD("value", 3),
		{ _field_byte_flags, "flags", &unnamed_enum$32 },
		{ _field_char_enum, "fade distance", &unnamed_enum$33 },
		{ _field_char_integer, "index" },
		{ _field_char_integer, "distribution weight" },
		{ _field_real_bounds, "scale" },
		{ _field_rgb_color, "tint 1" },
		{ _field_rgb_color, "tint 2" },
		{ _field_real, "base map tint percentage" },
		{ _field_real, "lightmap tint percentage" },
		{ _field_real, "wind scale" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$32)
	{
		"align to normal",
		"only on ground",
		"upright"
	};
	STRING_LIST(unnamed_enum$32, unnamed_enum$32_strings, _countof(unnamed_enum$32_strings));

	STRINGS(unnamed_enum$33)
	{
		"close",
		"medium",
		"far"
	};
	STRING_LIST(unnamed_enum$33, unnamed_enum$33_strings, _countof(unnamed_enum$33_strings));

	TAG_STRUCT(
		decorator_placement_block_struct_definition,
		"decorator_placement_block",
		"decorator_placement_block_struct_definition",
		"s_decorator_placement",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "internal data 1" },
		{ _field_long_integer, "compressed position" },
		{ _field_rgb_color, "tint color" },
		{ _field_rgb_color, "lightmap color" },
		{ _field_long_integer, "compressed light direction" },
		{ _field_long_integer, "compressed light 2 direction" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		decorator_projected_decal_block_struct_definition,
		"decorator_projected_decal_block",
		"decorator_projected_decal_block_struct_definition",
		"s_decorator_projected_decal",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_block_index, "decorator set" },
		{ _field_char_integer, "decorator class" },
		{ _field_char_integer, "decorator permutation" },
		{ _field_char_integer, "sprite index" },
		{ _field_real_point_3d, "position" },
		{ _field_real_vector_3d, "left" },
		{ _field_real_vector_3d, "up" },
		{ _field_real_vector_3d, "extents" },
		{ _field_real_point_3d, "previous position" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		decorator_set_struct_definition,
		"decorator_set",
		"decorator_set_struct_definition",
		"s_decorator_set_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 11 },
		{ _field_block, "shaders", &decorator_shader_reference_block },
		{ _field_real, "lighting min scale", "0.0 defaults to 0.4" },
		{ _field_real, "lighting max scale", "0.0 defaults to 2.0" },
		{ _field_block, "classes", &decorator_classes_block },
		{ _field_block, "models", &decorator_models_block },
		{ _field_block, "raw vertices", &decorator_model_vertices_block },
		{ _field_block, "indices", &decorator_model_indices_block },
		{ _field_block, "cached data", &cached_data_block },
		{ _field_struct, "geometry section info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 4),
		
		{ _struct_version_mode_equal, 0, 8 },
		{ _field_block, "shaders", &decorator_shader_reference_block },
		{ _field_block, "classes", &decorator_classes_block },
		{ _field_block, "models", &decorator_models_block },
		{ _field_block, "raw vertices", &decorator_model_vertices_block },
		{ _field_block, "indices", &decorator_model_indices_block },
		{ _field_block, "cached data", &cached_data_block },
		{ _field_struct, "geometry section info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		FIELD_PAD("value", 16),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		decorator_shader_reference_block_struct_definition,
		"decorator_shader_reference_block",
		"decorator_shader_reference_block_struct_definition",
		"s_decorator_shader_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "shader", &shader_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		detail_object_collection_block_struct_definition,
		"detail_object_collection_block",
		"detail_object_collection_block_struct_definition",
		"s_detail_object_collection_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "collection type", &unnamed_enum$187 },
		FIELD_PAD("value", 2),
		{ _field_real, "global z offset", nullptr, "applied to all detail objects of in this collection so they don't float above the ground" },
		FIELD_PAD("value", 44),
		{ _field_tag_reference, "sprite plate", &bitmap_group_reference },
		{ _field_block, "types", &detail_object_type_block },
		FIELD_PAD("value", 48),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$187)
	{
		"screen-facing",
		"viewer-facing"
	};
	STRING_LIST(unnamed_enum$187, unnamed_enum$187_strings, _countof(unnamed_enum$187_strings));

	TAG_STRUCT(
		detail_object_type_block_struct_definition,
		"detail_object_type_block",
		"detail_object_type_block_struct_definition",
		"s_detail_object_type_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_char_integer, "sequence index", nullptr, nullptr, "[0,15]" },
		{ _field_byte_flags, "type flags", &unnamed_enum$188 },
		FIELD_PAD("value", 2),
		{ _field_real_fraction, "color override factor", "fraction of detail object color to use instead of the base map color in the environment:[0,1]" },
		FIELD_PAD("value", 8),
		{ _field_real, "near fade distance", nullptr, "world units" },
		{ _field_real, "far fade distance", nullptr, "world units" },
		{ _field_real, "size", nullptr, "world units per pixel" },
		FIELD_PAD("value", 4),
		{ _field_real_rgb_color, "minimum color", nullptr, nullptr, "[0,1]" },
		{ _field_real_rgb_color, "maximum color", nullptr, nullptr, "[0,1]" },
		{ _field_argb_color, "ambient color", nullptr, nullptr, "[0,255]" },
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$188)
	{
		"unused",
		"unused",
		"interpolate color in hsv",
		"...more colors"
	};
	STRING_LIST(unnamed_enum$188, unnamed_enum$188_strings, _countof(unnamed_enum$188_strings));

	TAG_STRUCT(
		device_block_struct_definition,
		"device_block",
		"device_block_struct_definition",
		"s_device_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("$$$ DEVICE $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$177 },
		{ _field_real, "power transition time", nullptr, "seconds" },
		{ _field_real, "power acceleration time", nullptr, "seconds" },
		{ _field_real, "position transition time", nullptr, "seconds" },
		{ _field_real, "position acceleration time", nullptr, "seconds" },
		{ _field_real, "depowered position transition time", nullptr, "seconds" },
		{ _field_real, "depowered position acceleration time", nullptr, "seconds" },
		{ _field_word_flags, "lightmap flags", &unnamed_enum$178 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "open (up)", &sound_group_effect_group_reference },
		{ _field_tag_reference, "close (down)", &sound_group_effect_group_reference },
		{ _field_tag_reference, "opened", &sound_group_effect_group_reference },
		{ _field_tag_reference, "closed", &sound_group_effect_group_reference },
		{ _field_tag_reference, "depowered", &sound_group_effect_group_reference },
		{ _field_tag_reference, "repowered", &sound_group_effect_group_reference },
		{ _field_real, "delay time", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "delay effect", &sound_group_effect_group_reference },
		{ _field_real, "automatic activation radius", nullptr, "world units" },
		FIELD_USELESS_PAD("value", 112),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$177)
	{
		"position loops",
		"(unused)",
		"allow interpolation"
	};
	STRING_LIST(unnamed_enum$177, unnamed_enum$177_strings, _countof(unnamed_enum$177_strings));

	STRINGS(unnamed_enum$178)
	{
		"don\'t use in lightmap",
		"don\'t use in lightprobe"
	};
	STRING_LIST(unnamed_enum$178, unnamed_enum$178_strings, _countof(unnamed_enum$178_strings));

	TAG_REFERENCE_GROUP(sound_group_effect_group_reference)
	{
		SOUND_TAG,
		EFFECT_TAG,
		INVALID_TAG
	};

	TAG_STRUCT(
		device_control_block_struct_definition,
		"device_control_block",
		"device_control_block_struct_definition",
		"s_control_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ DEVICE $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$177 },
		{ _field_real, "power transition time", nullptr, "seconds" },
		{ _field_real, "power acceleration time", nullptr, "seconds" },
		{ _field_real, "position transition time", nullptr, "seconds" },
		{ _field_real, "position acceleration time", nullptr, "seconds" },
		{ _field_real, "depowered position transition time", nullptr, "seconds" },
		{ _field_real, "depowered position acceleration time", nullptr, "seconds" },
		{ _field_word_flags, "lightmap flags", &unnamed_enum$178 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "open (up)", &sound_group_effect_group_reference },
		{ _field_tag_reference, "close (down)", &sound_group_effect_group_reference },
		{ _field_tag_reference, "opened", &sound_group_effect_group_reference },
		{ _field_tag_reference, "closed", &sound_group_effect_group_reference },
		{ _field_tag_reference, "depowered", &sound_group_effect_group_reference },
		{ _field_tag_reference, "repowered", &sound_group_effect_group_reference },
		{ _field_real, "delay time", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "delay effect", &sound_group_effect_group_reference },
		{ _field_real, "automatic activation radius", nullptr, "world units" },
		FIELD_USELESS_PAD("value", 112),
		FIELD_EXPLANATION("$$$ CONTROL $$$", nullptr),
		{ _field_short_enum, "type", &unnamed_enum$179 },
		{ _field_short_enum, "triggers when", &unnamed_enum$180 },
		{ _field_real, "call value", nullptr, nullptr, "[0,1]" },
		{ _field_string_id, "action string" },
		FIELD_USELESS_PAD("value", 76),
		{ _field_tag_reference, "on", &sound_group_effect_group_reference },
		{ _field_tag_reference, "off", &sound_group_effect_group_reference },
		{ _field_tag_reference, "deny", &sound_group_effect_group_reference },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$179)
	{
		"toggle switch",
		"on button",
		"off button",
		"call button"
	};
	STRING_LIST(unnamed_enum$179, unnamed_enum$179_strings, _countof(unnamed_enum$179_strings));

	STRINGS(unnamed_enum$180)
	{
		"touched by player",
		"destroyed"
	};
	STRING_LIST(unnamed_enum$180, unnamed_enum$180_strings, _countof(unnamed_enum$180_strings));

	TAG_STRUCT(
		device_group_block_struct_definition,
		"device_group_block",
		"device_group_block_struct_definition",
		"s_scenario_device_group",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_real, "initial value", nullptr, nullptr, "[0,1]" },
		{ _field_long_flags, "flags", &unnamed_enum$184 },
		FIELD_USELESS_PAD("value", 12),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$184)
	{
		"can change only once"
	};
	STRING_LIST(unnamed_enum$184, unnamed_enum$184_strings, _countof(unnamed_enum$184_strings));

	TAG_STRUCT(
		device_light_fixture_block_struct_definition,
		"device_light_fixture_block",
		"device_light_fixture_block_struct_definition",
		"s_device_light_fixture_block",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ DEVICE $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$177 },
		{ _field_real, "power transition time", nullptr, "seconds" },
		{ _field_real, "power acceleration time", nullptr, "seconds" },
		{ _field_real, "position transition time", nullptr, "seconds" },
		{ _field_real, "position acceleration time", nullptr, "seconds" },
		{ _field_real, "depowered position transition time", nullptr, "seconds" },
		{ _field_real, "depowered position acceleration time", nullptr, "seconds" },
		{ _field_word_flags, "lightmap flags", &unnamed_enum$178 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "open (up)", &sound_group_effect_group_reference },
		{ _field_tag_reference, "close (down)", &sound_group_effect_group_reference },
		{ _field_tag_reference, "opened", &sound_group_effect_group_reference },
		{ _field_tag_reference, "closed", &sound_group_effect_group_reference },
		{ _field_tag_reference, "depowered", &sound_group_effect_group_reference },
		{ _field_tag_reference, "repowered", &sound_group_effect_group_reference },
		{ _field_real, "delay time", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "delay effect", &sound_group_effect_group_reference },
		{ _field_real, "automatic activation radius", nullptr, "world units" },
		FIELD_USELESS_PAD("value", 112),
		FIELD_EXPLANATION("$$$ LIGHT FIXTURE $$$", nullptr),
		FIELD_USELESS_PAD("value", 64),
		{ _field_terminator }
	};

	TAG_STRUCT(
		device_machine_block_struct_definition,
		"device_machine_block",
		"device_machine_block_struct_definition",
		"s_machine_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ DEVICE $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$177 },
		{ _field_real, "power transition time", nullptr, "seconds" },
		{ _field_real, "power acceleration time", nullptr, "seconds" },
		{ _field_real, "position transition time", nullptr, "seconds" },
		{ _field_real, "position acceleration time", nullptr, "seconds" },
		{ _field_real, "depowered position transition time", nullptr, "seconds" },
		{ _field_real, "depowered position acceleration time", nullptr, "seconds" },
		{ _field_word_flags, "lightmap flags", &unnamed_enum$178 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "open (up)", &sound_group_effect_group_reference },
		{ _field_tag_reference, "close (down)", &sound_group_effect_group_reference },
		{ _field_tag_reference, "opened", &sound_group_effect_group_reference },
		{ _field_tag_reference, "closed", &sound_group_effect_group_reference },
		{ _field_tag_reference, "depowered", &sound_group_effect_group_reference },
		{ _field_tag_reference, "repowered", &sound_group_effect_group_reference },
		{ _field_real, "delay time", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "delay effect", &sound_group_effect_group_reference },
		{ _field_real, "automatic activation radius", nullptr, "world units" },
		FIELD_USELESS_PAD("value", 112),
		FIELD_EXPLANATION("$$$ MACHINE $$$", nullptr),
		{ _field_short_enum, "type", &unnamed_enum$297 },
		{ _field_word_flags, "flags", &unnamed_enum$298 },
		{ _field_real, "door open time", nullptr, "seconds" },
		{ _field_real_fraction_bounds, "door occlusion bounds", "maps position [0,1] to occlusion" },
		FIELD_USELESS_PAD("value", 72),
		{ _field_short_enum, "collision response", &unnamed_enum$299 },
		{ _field_short_integer, "elevator node" },
		FIELD_USELESS_PAD("value", 68),
		{ _field_short_enum, "pathfinding policy", &unnamed_enum$300 },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$297)
	{
		"door",
		"platform",
		"gear"
	};
	STRING_LIST(unnamed_enum$297, unnamed_enum$297_strings, _countof(unnamed_enum$297_strings));

	STRINGS(unnamed_enum$298)
	{
		"pathfinding obstacle",
		"...but not when open",
		"elevator#lighting based on what\'s around, rather than what\'s below"
	};
	STRING_LIST(unnamed_enum$298, unnamed_enum$298_strings, _countof(unnamed_enum$298_strings));

	STRINGS(unnamed_enum$299)
	{
		"pause until crushed",
		"reverse directions"
	};
	STRING_LIST(unnamed_enum$299, unnamed_enum$299_strings, _countof(unnamed_enum$299_strings));

	STRINGS(unnamed_enum$300)
	{
		"discs",
		"sectors",
		"cut_out",
		"none"
	};
	STRING_LIST(unnamed_enum$300, unnamed_enum$300_strings, _countof(unnamed_enum$300_strings));

	TAG_STRUCT(
		dialogue_data_block_struct_definition,
		"dialogue_data_block",
		"dialogue_data_block_struct_definition",
		"s_dialogue_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "start index (postprocess)" },
		{ _field_short_integer, "length (postprocess)" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		dialogue_variant_block_struct_definition,
		"dialogue_variant_block",
		"dialogue_variant_block_struct_definition",
		"s_dialogue_variant_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "variant number", "variant number to use this dialogue with (must match the suffix in the permutations on the unit's model)" },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "dialogue", &dialogue_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(dialogue_group_reference, DIALOGUE_TAG);

	TAG_STRUCT(
		difficulty_block_struct_definition,
		"difficulty_block",
		"difficulty_block_struct_definition",
		"s_game_globals_difficulty_information",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("health", "scale values for enemy health and damage settings"),
		{ _field_real, "easy enemy damage", "enemy damage multiplier on easy difficulty" },
		{ _field_real, "normal enemy damage", "enemy damage multiplier on normal difficulty" },
		{ _field_real, "hard enemy damage", "enemy damage multiplier on hard difficulty" },
		{ _field_real, "imposs. enemy damage", "enemy damage multiplier on impossible difficulty" },
		{ _field_real, "easy enemy vitality", "enemy maximum body vitality scale on easy difficulty" },
		{ _field_real, "normal enemy vitality", "enemy maximum body vitality scale on normal difficulty" },
		{ _field_real, "hard enemy vitality", "enemy maximum body vitality scale on hard difficulty" },
		{ _field_real, "imposs. enemy vitality", "enemy maximum body vitality scale on impossible difficulty" },
		{ _field_real, "easy enemy shield", "enemy maximum shield vitality scale on easy difficulty" },
		{ _field_real, "normal enemy shield", "enemy maximum shield vitality scale on normal difficulty" },
		{ _field_real, "hard enemy shield", "enemy maximum shield vitality scale on hard difficulty" },
		{ _field_real, "imposs. enemy shield", "enemy maximum shield vitality scale on impossible difficulty" },
		{ _field_real, "easy enemy recharge", "enemy shield recharge scale on easy difficulty" },
		{ _field_real, "normal enemy recharge", "enemy shield recharge scale on normal difficulty" },
		{ _field_real, "hard enemy recharge", "enemy shield recharge scale on hard difficulty" },
		{ _field_real, "imposs. enemy recharge", "enemy shield recharge scale on impossible difficulty" },
		{ _field_real, "easy friend damage", "friend damage multiplier on easy difficulty" },
		{ _field_real, "normal friend damage", "friend damage multiplier on normal difficulty" },
		{ _field_real, "hard friend damage", "friend damage multiplier on hard difficulty" },
		{ _field_real, "imposs. friend damage", "friend damage multiplier on impossible difficulty" },
		{ _field_real, "easy friend vitality", "friend maximum body vitality scale on easy difficulty" },
		{ _field_real, "normal friend vitality", "friend maximum body vitality scale on normal difficulty" },
		{ _field_real, "hard friend vitality", "friend maximum body vitality scale on hard difficulty" },
		{ _field_real, "imposs. friend vitality", "friend maximum body vitality scale on impossible difficulty" },
		{ _field_real, "easy friend shield", "friend maximum shield vitality scale on easy difficulty" },
		{ _field_real, "normal friend shield", "friend maximum shield vitality scale on normal difficulty" },
		{ _field_real, "hard friend shield", "friend maximum shield vitality scale on hard difficulty" },
		{ _field_real, "imposs. friend shield", "friend maximum shield vitality scale on impossible difficulty" },
		{ _field_real, "easy friend recharge", "friend shield recharge scale on easy difficulty" },
		{ _field_real, "normal friend recharge", "friend shield recharge scale on normal difficulty" },
		{ _field_real, "hard friend recharge", "friend shield recharge scale on hard difficulty" },
		{ _field_real, "imposs. friend recharge", "friend shield recharge scale on impossible difficulty" },
		{ _field_real, "easy infection forms", "toughness of infection forms (may be negative) on easy difficulty" },
		{ _field_real, "normal infection forms", "toughness of infection forms (may be negative) on normal difficulty" },
		{ _field_real, "hard infection forms", "toughness of infection forms (may be negative) on hard difficulty" },
		{ _field_real, "imposs. infection forms", "toughness of infection forms (may be negative) on impossible difficulty" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("ranged fire", "difficulty-affecting values for enemy ranged combat settings"),
		{ _field_real, "easy rate of fire", "enemy rate of fire scale on easy difficulty" },
		{ _field_real, "normal rate of fire", "enemy rate of fire scale on normal difficulty" },
		{ _field_real, "hard rate of fire", "enemy rate of fire scale on hard difficulty" },
		{ _field_real, "imposs. rate of fire", "enemy rate of fire scale on impossible difficulty" },
		{ _field_real, "easy projectile error", "enemy projectile error scale, as a fraction of their base firing error. on easy difficulty" },
		{ _field_real, "normal projectile error", "enemy projectile error scale, as a fraction of their base firing error. on normal difficulty" },
		{ _field_real, "hard projectile error", "enemy projectile error scale, as a fraction of their base firing error. on hard difficulty" },
		{ _field_real, "imposs. projectile error", "enemy projectile error scale, as a fraction of their base firing error. on impossible difficulty" },
		{ _field_real, "easy burst error", "enemy burst error scale; reduces intra-burst shot distance. on easy difficulty" },
		{ _field_real, "normal burst error", "enemy burst error scale; reduces intra-burst shot distance. on normal difficulty" },
		{ _field_real, "hard burst error", "enemy burst error scale; reduces intra-burst shot distance. on hard difficulty" },
		{ _field_real, "imposs. burst error", "enemy burst error scale; reduces intra-burst shot distance. on impossible difficulty" },
		{ _field_real, "easy new target delay", "enemy new-target delay scale factor. on easy difficulty" },
		{ _field_real, "normal new target delay", "enemy new-target delay scale factor. on normal difficulty" },
		{ _field_real, "hard new target delay", "enemy new-target delay scale factor. on hard difficulty" },
		{ _field_real, "imposs. new target delay", "enemy new-target delay scale factor. on impossible difficulty" },
		{ _field_real, "easy burst separation", "delay time between bursts scale factor for enemies. on easy difficulty" },
		{ _field_real, "normal burst separation", "delay time between bursts scale factor for enemies. on normal difficulty" },
		{ _field_real, "hard burst separation", "delay time between bursts scale factor for enemies. on hard difficulty" },
		{ _field_real, "imposs. burst separation", "delay time between bursts scale factor for enemies. on impossible difficulty" },
		{ _field_real, "easy target tracking", "additional target tracking fraction for enemies. on easy difficulty" },
		{ _field_real, "normal target tracking", "additional target tracking fraction for enemies. on normal difficulty" },
		{ _field_real, "hard target tracking", "additional target tracking fraction for enemies. on hard difficulty" },
		{ _field_real, "imposs. target tracking", "additional target tracking fraction for enemies. on impossible difficulty" },
		{ _field_real, "easy target leading", "additional target leading fraction for enemies. on easy difficulty" },
		{ _field_real, "normal target leading", "additional target leading fraction for enemies. on normal difficulty" },
		{ _field_real, "hard target leading", "additional target leading fraction for enemies. on hard difficulty" },
		{ _field_real, "imposs. target leading", "additional target leading fraction for enemies. on impossible difficulty" },
		{ _field_real, "easy overcharge chance", "overcharge chance scale factor for enemies. on easy difficulty" },
		{ _field_real, "normal overcharge chance", "overcharge chance scale factor for enemies. on normal difficulty" },
		{ _field_real, "hard overcharge chance", "overcharge chance scale factor for enemies. on hard difficulty" },
		{ _field_real, "imposs. overcharge chance", "overcharge chance scale factor for enemies. on impossible difficulty" },
		{ _field_real, "easy special fire delay", "delay between special-fire shots (overcharge, banshee bombs) scale factor for enemies. on easy difficulty" },
		{ _field_real, "normal special fire delay", "delay between special-fire shots (overcharge, banshee bombs) scale factor for enemies. on normal difficulty" },
		{ _field_real, "hard special fire delay", "delay between special-fire shots (overcharge, banshee bombs) scale factor for enemies. on hard difficulty" },
		{ _field_real, "imposs. special fire delay", "delay between special-fire shots (overcharge, banshee bombs) scale factor for enemies. on impossible difficulty" },
		{ _field_real, "easy guidance vs player", "guidance velocity scale factor for all projectiles targeted on a player. on easy difficulty" },
		{ _field_real, "normal guidance vs player", "guidance velocity scale factor for all projectiles targeted on a player. on normal difficulty" },
		{ _field_real, "hard guidance vs player", "guidance velocity scale factor for all projectiles targeted on a player. on hard difficulty" },
		{ _field_real, "imposs. guidance vs player", "guidance velocity scale factor for all projectiles targeted on a player. on impossible difficulty" },
		{ _field_real, "easy melee delay base", "delay period added to all melee attacks, even when berserk. on easy difficulty" },
		{ _field_real, "normal melee delay base", "delay period added to all melee attacks, even when berserk. on normal difficulty" },
		{ _field_real, "hard melee delay base", "delay period added to all melee attacks, even when berserk. on hard difficulty" },
		{ _field_real, "imposs. melee delay base", "delay period added to all melee attacks, even when berserk. on impossible difficulty" },
		{ _field_real, "easy melee delay scale", "multiplier for all existing non-berserk melee delay times. on easy difficulty" },
		{ _field_real, "normal melee delay scale", "multiplier for all existing non-berserk melee delay times. on normal difficulty" },
		{ _field_real, "hard melee delay scale", "multiplier for all existing non-berserk melee delay times. on hard difficulty" },
		{ _field_real, "imposs. melee delay scale", "multiplier for all existing non-berserk melee delay times. on impossible difficulty" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("grenades", "difficulty-affecting values for enemy grenade behavior"),
		{ _field_real, "easy grenade chance scale", "scale factor affecting the desicions to throw a grenade. on easy difficulty" },
		{ _field_real, "normal grenade chance scale", "scale factor affecting the desicions to throw a grenade. on normal difficulty" },
		{ _field_real, "hard grenade chance scale", "scale factor affecting the desicions to throw a grenade. on hard difficulty" },
		{ _field_real, "imposs. grenade chance scale", "scale factor affecting the desicions to throw a grenade. on impossible difficulty" },
		{ _field_real, "easy grenade timer scale", "scale factor affecting the delay period between grenades thrown from the same encounter (lower is more often). on easy difficulty" },
		{ _field_real, "normal grenade timer scale", "scale factor affecting the delay period between grenades thrown from the same encounter (lower is more often). on normal difficulty" },
		{ _field_real, "hard grenade timer scale", "scale factor affecting the delay period between grenades thrown from the same encounter (lower is more often). on hard difficulty" },
		{ _field_real, "imposs. grenade timer scale", "scale factor affecting the delay period between grenades thrown from the same encounter (lower is more often). on impossible difficulty" },
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("placement", "difficulty-affecting values for enemy placement"),
		{ _field_real, "easy major upgrade (normal)", "fraction of actors upgraded to their major variant. on easy difficulty" },
		{ _field_real, "normal major upgrade (normal)", "fraction of actors upgraded to their major variant. on normal difficulty" },
		{ _field_real, "hard major upgrade (normal)", "fraction of actors upgraded to their major variant. on hard difficulty" },
		{ _field_real, "imposs. major upgrade (normal)", "fraction of actors upgraded to their major variant. on impossible difficulty" },
		{ _field_real, "easy major upgrade (few)", "fraction of actors upgraded to their major variant when mix = normal. on easy difficulty" },
		{ _field_real, "normal major upgrade (few)", "fraction of actors upgraded to their major variant when mix = normal. on normal difficulty" },
		{ _field_real, "hard major upgrade (few)", "fraction of actors upgraded to their major variant when mix = normal. on hard difficulty" },
		{ _field_real, "imposs. major upgrade (few)", "fraction of actors upgraded to their major variant when mix = normal. on impossible difficulty" },
		{ _field_real, "easy major upgrade (many)", "fraction of actors upgraded to their major variant when mix = many. on easy difficulty" },
		{ _field_real, "normal major upgrade (many)", "fraction of actors upgraded to their major variant when mix = many. on normal difficulty" },
		{ _field_real, "hard major upgrade (many)", "fraction of actors upgraded to their major variant when mix = many. on hard difficulty" },
		{ _field_real, "imposs. major upgrade (many)", "fraction of actors upgraded to their major variant when mix = many. on impossible difficulty" },
		FIELD_EXPLANATION("vehicles", "difficulty-affecting values for vehicle driving/combat"),
		{ _field_real, "easy player vehicle ram chance", "Chance of deciding to ram the player in a vehicle on easy difficulty" },
		{ _field_real, "normal player vehicle ram chance", "Chance of deciding to ram the player in a vehicle on normal difficulty" },
		{ _field_real, "hard player vehicle ram chance", "Chance of deciding to ram the player in a vehicle on hard difficulty" },
		{ _field_real, "imposs. player vehicle ram chance", "Chance of deciding to ram the player in a vehicle on impossible difficulty" },
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 84),
		{ _field_terminator }
	};

	TAG_STRUCT(
		dont_use_me_scenario_environment_object_block_struct_definition,
		"dont_use_me_scenario_environment_object_block",
		"dont_use_me_scenario_environment_object_block_struct_definition",
		"s_scenario_environment_object",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("value", _field_id_environment_unknown),
		{ _field_short_block_index, "bsp" },
		{ _field_short_integer, "runtime object type" },
		{ _field_long_integer, "unique id" },
		FIELD_PAD("value", 4),
		{ _field_tag, "object definition tag" },
		{ _field_long_integer, "object" },
		FIELD_PAD("value", 44),
		{ _field_terminator }
	};

	TAG_STRUCT(
		door_encoded_pas_block_struct_definition,
		"door_encoded_pas_block",
		"door_encoded_pas_block_struct_definition",
		"s_dword$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		dynamic_spawn_zone_overload_block_struct_definition,
		"dynamic_spawn_zone_overload_block",
		"dynamic_spawn_zone_overload_block_struct_definition",
		"s_dynamic_spawn_zone_overload",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "overload type", &unnamed_enum$408 },
		FIELD_PAD("value", 2),
		{ _field_real, "inner radius" },
		{ _field_real, "outer radius" },
		{ _field_real, "weight" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$408)
	{
		"enemy",
		"friend",
		"enemy vehicle",
		"friendly vehicle",
		"empty vehicle",
		"oddball inclusion",
		"oddball exclusion",
		"hill inclusion",
		"hill exclusion",
		"last race flag",
		"dead ally",
		"controlled territory"
	};
	STRING_LIST(unnamed_enum$408, unnamed_enum$408_strings, _countof(unnamed_enum$408_strings));

	TAG_STRUCT(
		editor_comment_block_struct_definition,
		"editor_comment_block",
		"editor_comment_block_struct_definition",
		"s_editor_comment_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_long_enum, "type", &unnamed_enum$24 },
		{ _field_string, "name" },
		{ _field_long_string, "comment" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$24)
	{
		"generic"
	};
	STRING_LIST(unnamed_enum$24, unnamed_enum$24_strings, _countof(unnamed_enum$24_strings));

	TAG_STRUCT(
		effect_accelerations_block_struct_definition,
		"effect_accelerations_block",
		"effect_accelerations_block_struct_definition",
		"s_effect_acceleration_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "create in", &unnamed_enum$40 },
		{ _field_short_enum, "create in", &unnamed_enum$41 },
		{ _field_short_block_index, "location" },
		FIELD_PAD("value", 2),
		{ _field_real, "acceleration" },
		{ _field_real, "inner cone angle", nullptr, "degrees" },
		{ _field_real, "outer cone angle", nullptr, "degrees" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$40)
	{
		"any environment",
		"air only",
		"water only",
		"space only"
	};
	STRING_LIST(unnamed_enum$40, unnamed_enum$40_strings, _countof(unnamed_enum$40_strings));

	STRINGS(unnamed_enum$41)
	{
		"either mode",
		"violent mode only",
		"nonviolent mode only"
	};
	STRING_LIST(unnamed_enum$41, unnamed_enum$41_strings, _countof(unnamed_enum$41_strings));

	TAG_STRUCT(
		effect_block_struct_definition,
		"effect_block",
		"effect_block_struct_definition",
		"s_effect_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$189 },
		{ _field_short_block_index, "loop start event" },
		FIELD_SKIP("value", 2),
		FIELD_PAD("value", 4),
		{ _field_block, "locations", &effect_locations_block },
		{ _field_block, "events", &effect_event_block },
		FIELD_USELESS_PAD("value", 12),
		FIELD_EXPLANATION("Looping Sound", nullptr),
		{ _field_tag_reference, "looping sound", &sound_looping_group_reference },
		{ _field_short_block_index, "location" },
		FIELD_SKIP("value", 2),
		{ _field_real, "always play distance" },
		{ _field_real, "never play distance" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$189)
	{
		"deleted when attachment deactivates"
	};
	STRING_LIST(unnamed_enum$189, unnamed_enum$189_strings, _countof(unnamed_enum$189_strings));

	TAG_REFERENCE(sound_looping_group_reference, SOUND_LOOPING_TAG, _tag_reference_flag_resolved_manually);

	TAG_STRUCT(
		effect_event_block_struct_definition,
		"effect_event_block",
		"effect_event_block_struct_definition",
		"s_effect_event_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$190 },
		{ _field_real_fraction, "skip fraction", "chance that this event will be skipped entirely" },
		{ _field_real_bounds, "delay bounds", "delay before this event takes place", "seconds" },
		{ _field_real_bounds, "duration bounds", "duration of this event", "seconds" },
		{ _field_block, "parts", &effect_part_block },
		FIELD_USELESS_PAD("value", 12),
		{ _field_block, "beams", &beam_block },
		{ _field_block, "accelerations", &effect_accelerations_block },
		{ _field_block, "particle systems", &particle_system_definition_block_new_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$190)
	{
		"disabled for debugging"
	};
	STRING_LIST(unnamed_enum$190, unnamed_enum$190_strings, _countof(unnamed_enum$190_strings));

	TAG_STRUCT(
		effect_locations_block_struct_definition,
		"effect_locations_block",
		"effect_locations_block_struct_definition",
		"s_effect_location_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("MARKER NAMES", "In addition to the marker in the render model there are several special marker names:\n\nreplace\nReplace allows you to use the same effect with different markers. Damage transition effects support this for example.\n\ngravity, up\nThe direction of gravity (down) and the opposite direction (up).  Always supplied\n\nnormal\nVector pointing directly away from the surface you collided with. Supplied for effects from collision.\n\nforward\nThe \'negative incident\' vector i.e. the direction the object is moving in. Most commonly used to generated decals. Supplied for effects from collision.\n\nbackward\nThe \'incident\' vector i.e. the opposite of the direction the object is moving in. Supplied for effects from collision.\n\nreflection\nThe way the effect would reflect off the surface it hit. Supplied for effects from collision.\n\nroot\nThe object root (pivot). These can used for all effects which are associated with an object.\n\nimpact\nThe location of a havok impact.\n\n"),
		{ _field_old_string_id, "marker name" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		effect_part_block_struct_definition,
		"effect_part_block",
		"effect_part_block_struct_definition",
		"s_effect_part_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "create in", &unnamed_enum$40 },
		{ _field_short_enum, "create in", &unnamed_enum$41 },
		{ _field_short_block_index, "location" },
		{ _field_word_flags, "flags", &unnamed_enum$191 },
		FIELD_PAD("value", 4),
		{ _field_tag_reference, "type", &damage_effect_group_object_group_sound_group_decal_group_colony_group_light_group_light_volume_group_liquid_group_lens_flare_group_character_group_reference },
		{ _field_real_bounds, "velocity bounds", "initial velocity along the location's forward, for decals the distance at which decal is created (defaults to 0.5)", "world units per second" },
		{ _field_angle, "velocity cone angle", "initial velocity will be inside the cone defined by this angle.", "degrees" },
		{ _field_angle_bounds, "angular velocity bounds", nullptr, "degrees per second" },
		{ _field_real_bounds, "radius modifier bounds" },
		FIELD_EXPLANATION("SCALE MODIFIERS", nullptr),
		{ _field_long_flags, "A scales values", &unnamed_enum$192 },
		{ _field_long_flags, "B scales values", &unnamed_enum$192 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$191)
	{
		"face down regardless of location (decals)",
		"offset origin away from geometry (lights)",
		"never attached to object",
		"disabled for debugging",
		"draw regardless of distance"
	};
	STRING_LIST(unnamed_enum$191, unnamed_enum$191_strings, _countof(unnamed_enum$191_strings));

	TAG_REFERENCE_GROUP(damage_effect_group_object_group_sound_group_decal_group_colony_group_light_group_light_volume_group_liquid_group_lens_flare_group_character_group_reference)
	{
		DAMAGE_EFFECT_TAG,
		OBJECT_TAG,
		SOUND_TAG,
		DECAL_TAG,
		COLONY_TAG,
		LIGHT_TAG,
		LIGHT_VOLUME_TAG,
		LIQUID_TAG,
		LENS_FLARE_TAG,
		CHARACTER_TAG,
		INVALID_TAG
	};

	STRINGS(unnamed_enum$192)
	{
		"velocity",
		"velocity delta",
		"velocity cone angle",
		"angular velocity",
		"angular velocity delta",
		"type-specific scale"
	};
	STRING_LIST(unnamed_enum$192, unnamed_enum$192_strings, _countof(unnamed_enum$192_strings));

	TAG_STRUCT(
		encoded_cluster_distances_block_struct_definition,
		"encoded_cluster_distances_block",
		"encoded_cluster_distances_block_struct_definition",
		"s_byte$5",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "value" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		environment_object_bsp_ref_struct_definition,
		"environment_object_bsp_ref",
		"environment_object_bsp_ref_struct_definition",
		"s_environment_object_bsp_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 5 },
		{ _field_long_integer, "bsp reference" },
		{ _field_long_integer, "first sector" },
		{ _field_long_integer, "last sector" },
		{ _field_short_integer, "node_index" },
		FIELD_PAD("value", 2),
		
		{ _struct_version_mode_equal, 0, 7 },
		{ _field_long_integer, "bsp reference" },
		{ _field_long_integer, "first sector" },
		{ _field_long_integer, "last sector" },
		{ _field_short_integer, "node_index" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 44),
		{ _field_block, "bsp2d refs", &ref_block },
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		environment_object_node_ref_struct_definition,
		"environment_object_node_ref",
		"environment_object_node_ref_struct_definition",
		"s_environment_object_node_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 3 },
		{ _field_short_integer, "reference frame index" },
		{ _field_char_integer, "projection axis" },
		{ _field_byte_flags, "projection sign", &unnamed_enum$375 },
		
		{ _struct_version_mode_equal, 0, 3 },
		FIELD_PAD("value", 12),
		{ _field_short_integer, "reference frame index" },
		FIELD_PAD("value", 2),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$375)
	{
		"projection sign"
	};
	STRING_LIST(unnamed_enum$375, unnamed_enum$375_strings, _countof(unnamed_enum$375_strings));

	VERSIONED_TAG_STRUCT(
		environment_object_ref_struct_definition,
		"environment_object_ref",
		"environment_object_ref_struct_definition",
		"s_environment_object_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 6 },
		{ _field_word_flags, "flags", &unnamed_enum$374 },
		FIELD_PAD("value", 2),
		{ _field_long_integer, "first sector" },
		{ _field_long_integer, "last sector" },
		{ _field_block, "bsps", &environment_object_bsp_refs_block },
		{ _field_block, "nodes", &environment_object_nodes_block },
		
		{ _struct_version_mode_equal, 0, 8 },
		{ _field_word_flags, "flags", &unnamed_enum$374 },
		FIELD_PAD("value", 2),
		{ _field_long_integer, "first sector" },
		{ _field_long_integer, "last sector" },
		FIELD_PAD("value", 48),
		{ _field_block, "bsps", &environment_object_bsp_refs_block },
		{ _field_block, "nodes", &environment_object_nodes_block },
		FIELD_PAD("value", 48),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$374)
	{
		"mobile"
	};
	STRING_LIST(unnamed_enum$374, unnamed_enum$374_strings, _countof(unnamed_enum$374_strings));

	TAG_STRUCT(
		equipment_block_struct_definition,
		"equipment_block",
		"equipment_block_struct_definition",
		"s_equipment_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ ITEM $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$197 },
		{ _field_short_integer, "OLD message index" },
		{ _field_short_integer, "sort order" },
		{ _field_real, "multiplayer on-ground scale" },
		{ _field_real, "campaign on-ground scale" },
		FIELD_EXPLANATION("NEW hud messages", "everything you need to display stuff"),
		{ _field_string_id, "pickup message" },
		{ _field_string_id, "swap message" },
		{ _field_string_id, "pickup or dual msg" },
		{ _field_string_id, "swap or dual msg" },
		{ _field_string_id, "dual-only msg" },
		{ _field_string_id, "picked up msg" },
		{ _field_string_id, "singluar quantity msg" },
		{ _field_string_id, "plural quantity msg" },
		{ _field_string_id, "switch-to msg" },
		{ _field_string_id, "switch-to from ai msg" },
		FIELD_USELESS_PAD("value", 148),
		{ _field_tag_reference, "UNUSED", &material_effects_group_reference },
		{ _field_tag_reference, "collision sound", &sound_group_reference },
		{ _field_block, "predicted bitmaps", &predicted_bitmaps_block },
		FIELD_USELESS_PAD("value", 92),
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_reference },
		{ _field_real_bounds, "detonation delay", nullptr, "seconds" },
		{ _field_tag_reference, "detonating effect", &effect_group_reference },
		{ _field_tag_reference, "detonation effect", &effect_group_reference },
		{ _field_short_enum, "powerup type", &unnamed_enum$198 },
		{ _field_short_enum, "grenade type", &unnamed_enum$112 },
		{ _field_real, "powerup time", nullptr, "seconds" },
		{ _field_tag_reference, "pickup sound", &sound_group_reference },
		FIELD_USELESS_PAD("value", 144),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$197)
	{
		"always maintains z up",
		"destroyed by explosions",
		"unaffected by gravity"
	};
	STRING_LIST(unnamed_enum$197, unnamed_enum$197_strings, _countof(unnamed_enum$197_strings));

	STRINGS(unnamed_enum$198)
	{
		"none",
		"double speed",
		"over shield",
		"active camouflage",
		"full-spectrum vision",
		"health",
		"grenade"
	};
	STRING_LIST(unnamed_enum$198, unnamed_enum$198_strings, _countof(unnamed_enum$198_strings));

	TAG_STRUCT(
		error_report_comments_block_struct_definition,
		"error_report_comments_block",
		"error_report_comments_block_struct_definition",
		"s_error_report_comment",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_data, "text", &error_report_string_data },
		{ _field_real_point_3d, "position" },
		{ _field_array, "node indices", &unnamed_array$16 },
		{ _field_array, "node weights", &unnamed_array$17 },
		{ _field_real_argb_color, "color" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		error_report_lines_block_struct_definition,
		"error_report_lines_block",
		"error_report_lines_block_struct_definition",
		"s_error_report_line",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_array, "points", &unnamed_array$8 },
		{ _field_array, "node weights", &unnamed_array$9 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		error_report_quads_block_struct_definition,
		"error_report_quads_block",
		"error_report_quads_block_struct_definition",
		"s_error_report_quad",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_array, "points", &unnamed_array$14 },
		{ _field_array, "node weights", &unnamed_array$15 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		error_report_triangles_block_struct_definition,
		"error_report_triangles_block",
		"error_report_triangles_block_struct_definition",
		"s_error_report_triangle",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_array, "points", &unnamed_array$11 },
		{ _field_array, "node weights", &unnamed_array$12 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		error_report_vectors_block_struct_definition,
		"error_report_vectors_block",
		"error_report_vectors_block_struct_definition",
		"s_error_report_vector",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_array, "node indices", &unnamed_array$5 },
		{ _field_array, "node weights", &unnamed_array$6 },
		{ _field_real_argb_color, "color" },
		{ _field_real_vector_3d, "normal" },
		{ _field_real, "screen length" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		error_report_vertices_block_struct_definition,
		"error_report_vertices_block",
		"error_report_vertices_block_struct_definition",
		"s_error_report_vertex",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_array, "node indices", &unnamed_array$3 },
		{ _field_array, "node weights", &unnamed_array$4 },
		{ _field_real_argb_color, "color" },
		{ _field_real, "screen size" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		error_reports_block_struct_definition,
		"error_reports_block",
		"error_reports_block_struct_definition",
		"s_error_report",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$158 },
		{ _field_word_flags, "flags", &unnamed_enum$159 },
		{ _field_data, "text", &error_report_string_data },
		{ _field_string, "source filename" },
		{ _field_long_integer, "source line number" },
		{ _field_block, "vertices", &error_report_vertices_block },
		{ _field_block, "vectors", &error_report_vectors_block },
		{ _field_block, "lines", &error_report_lines_block },
		{ _field_block, "triangles", &error_report_triangles_block },
		{ _field_block, "quads", &error_report_quads_block },
		{ _field_block, "comments", &error_report_comments_block },
		FIELD_PAD("value", 380),
		{ _field_long_integer, "report key" },
		{ _field_long_integer, "node index" },
		{ _field_real_bounds, "bounds x" },
		{ _field_real_bounds, "bounds y" },
		{ _field_real_bounds, "bounds z" },
		{ _field_real_argb_color, "color" },
		FIELD_PAD("value", 84),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$158)
	{
		"silent",
		"comment",
		"warning",
		"error"
	};
	STRING_LIST(unnamed_enum$158, unnamed_enum$158_strings, _countof(unnamed_enum$158_strings));

	STRINGS(unnamed_enum$159)
	{
		"rendered",
		"tangent-space",
		"non-critical",
		"lightmap light",
		"report key is valid"
	};
	STRING_LIST(unnamed_enum$159, unnamed_enum$159_strings, _countof(unnamed_enum$159_strings));

	TAG_STRUCT(
		extern_reference_block_struct_definition,
		"extern_reference_block",
		"extern_reference_block_struct_definition",
		"s_extern_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "parameter index" },
		{ _field_char_integer, "extern index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		falling_damage_block_struct_definition,
		"falling_damage_block",
		"falling_damage_block_struct_definition",
		"s_game_globals_falling_damage",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 8),
		{ _field_real_bounds, "harmful falling distance", nullptr, "world units" },
		{ _field_tag_reference, "falling damage", &damage_effect_group_reference },
		FIELD_PAD("value", 8),
		{ _field_real, "maximum falling distance", nullptr, "world units" },
		{ _field_tag_reference, "distance damage", &damage_effect_group_reference },
		{ _field_tag_reference, "vehicle environment collision damage effect", &damage_effect_group_reference },
		{ _field_tag_reference, "vehicle killed unit damage effect", &damage_effect_group_reference },
		{ _field_tag_reference, "vehicle collision damage", &damage_effect_group_reference },
		{ _field_tag_reference, "flaming death damage", &damage_effect_group_reference },
		FIELD_PAD("value", 28),
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		firing_position_struct_definition,
		"firing_position",
		"firing_position_struct_definition",
		"s_firing_position_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 3, 9 },
		FIELD_EXPLANATION("CONTROLS", "Ctrl-N: Creates a new area and assigns it to the current selection of firing points."),
		{ _field_real_point_3d, "position (local)" },
		{ _field_short_integer, "reference frame" },
		{ _field_word_flags, "flags", &unnamed_enum$73 },
		{ _field_short_block_index, "area" },
		{ _field_short_integer, "cluster index" },
		FIELD_SKIP("value", 4),
		{ _field_real_euler_angles_2d, "normal" },
		FIELD_CUSTOM("value", _field_id_unknown_facing),
		
		{ _struct_version_mode_equal, 2, 10 },
		FIELD_EXPLANATION("CONTROLS", "Ctrl-N: Creates a new area and assigns it to the current selection of firing points."),
		{ _field_word_flags, "flags", &unnamed_enum$73 },
		FIELD_PAD("value", 2),
		{ _field_real_point_3d, "position (local)" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		{ _field_short_block_index, "area" },
		{ _field_short_integer, "cluster index" },
		FIELD_SKIP("value", 8),
		FIELD_CUSTOM("value", _field_id_unknown_facing),
		
		{ _struct_version_mode_equal, 1, 10 },
		FIELD_EXPLANATION("CONTROLS", "Ctrl-N: Creates a new area and assigns it to the current selection of firing points."),
		{ _field_word_flags, "flags", &unnamed_enum$73 },
		FIELD_PAD("value", 2),
		{ _field_real_point_3d, "position (local)" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		{ _field_short_block_index, "area" },
		{ _field_short_integer, "cluster index" },
		FIELD_SKIP("value", 8),
		FIELD_CUSTOM("value", _field_id_unknown_facing),
		
		{ _struct_version_mode_equal, 0, 11 },
		FIELD_EXPLANATION("CONTROLS", "Ctrl-N: Creates a new area and assigns it to the current selection of firing points."),
		{ _field_real_point_3d, "placement position" },
		{ _field_short_block_index, "area" },
		FIELD_PAD("value", 2),
		FIELD_SKIP("value", 8),
		FIELD_CUSTOM("value", _field_id_unknown_facing),
		{ _field_word_flags, "flags", &unnamed_enum$73 },
		FIELD_PAD("value", 2),
		{ _field_real_point_3d, "local position" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$73)
	{
		"open",
		"partial",
		"closed",
		"mobile",
		"wall lean",
		"perch",
		"ground point",
		"dynamic cover point"
	};
	STRING_LIST(unnamed_enum$73, unnamed_enum$73_strings, _countof(unnamed_enum$73_strings));

	TAG_STRUCT(
		flight_reference_block_struct_definition,
		"flight_reference_block",
		"flight_reference_block_struct_definition",
		"s_flight_hint_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "flight hint index" },
		{ _field_short_integer, "poit index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		flock_definition_block_struct_definition,
		"flock_definition_block",
		"flock_definition_block_struct_definition",
		"s_flock_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "bsp" },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 32),
		{ _field_short_block_index, "bounding volume" },
		{ _field_word_flags, "flags", &unnamed_enum$95 },
		{ _field_real, "ecology margin", "distance from ecology boundary that creature begins to be repulsed", "wus" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_block, "sources", &flock_source_block },
		{ _field_block, "sinks", &flock_sink_block },
		{ _field_real, "production frequency", "How frequently boids are produced at one of the sources (limited by the max boid count)", "boids/sec" },
		{ _field_real_bounds, "scale" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_tag_reference, "creature", &creature_group_reference$2, _field_id_sort },
		{ _field_short_integer_bounds, "boid count" },
		FIELD_USELESS_PAD("value", 24),
		FIELD_EXPLANATION("Flock parameters", "Recommended initial values (for a sentinel-sized unit): \n\tneighborhood radius= 6.0 \n\tavoidance radius= 3 \n forward scale= 0.5 \n alignment scale= 0.5 \n avoidance scale= 1.0 \n leveling force scale= 0.1 \n perception angle= 120 \n average throttle= 0.75 \n maximum throttle= 1.0 \n position scale= 1.0 \n position min radius= 3 \n position max radius = 9"),
		FIELD_EXPLANATION("Let me give you a piece of free advice.", "Flocks with a neighborhood radius of 0 don\'t FLOCK, per se (in the creature-creature interaction kind of way), but they are much cheaper. The best thing is to have a non-zero radius for small flocks, and a zero radius for large flocks (or for \'flow-flocks\', ones with sources and sinks that are intended to create a steady flow of something). Note also that for flocks with a 0 neighborhood radius, the parameters for avoidance, alignment, position and perception angle are ignored entirely."),
		{ _field_real, "neighborhood radius", "distance within which one boid is affected by another", "world units" },
		{ _field_real, "avoidance radius", "distance that a boid tries to maintain from another", "world units" },
		{ _field_real, "forward scale", "weight given to boid's desire to fly straight ahead", nullptr, "[0..1]" },
		{ _field_real, "alignment scale", "weight given to boid's desire to align itself with neighboring boids", nullptr, "[0..1]" },
		{ _field_real, "avoidance scale", "weight given to boid's desire to avoid collisions with other boids, when within the avoidance radius", nullptr, "[0..1]" },
		{ _field_real, "leveling force scale", "weight given to boids desire to fly level", nullptr, "[0..1]" },
		{ _field_real, "sink scale", "weight given to boid's desire to fly towards its sinks", nullptr, "[0..1]" },
		{ _field_angle, "perception angle", "angle-from-forward within which one boid can perceive and react to another", "degrees" },
		{ _field_real, "average throttle", "throttle at which boids will naturally fly", nullptr, "[0..1]" },
		{ _field_real, "maximum throttle", "maximum throttle applicable", nullptr, "[0..1]" },
		{ _field_real, "position scale", "weight given to boid's desire to be near flock center", nullptr, "[0..1]" },
		{ _field_real, "position min radius", "distance to flock center beyond which an attracting force is applied", "wus" },
		{ _field_real, "position max radius", "distance to flock center at which the maximum attracting force is applied", "wus" },
		{ _field_real, "movement weight threshold", "The threshold of accumulated weight over which movement occurs" },
		{ _field_real, "danger radius", "distance within which boids will avoid a dangerous object (e.g. the player)", "wus" },
		{ _field_real, "danger scale", "weight given to boid's desire to avoid danger" },
		FIELD_EXPLANATION("Perlin noise parameters", "Recommended initial values: \n\trandom offset scale= 0.2 \n\toffset period bounds= 1, 3"),
		{ _field_real, "random offset scale", "weight given to boid's random heading offset", nullptr, "[0..1]" },
		{ _field_real_bounds, "random offset period", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 24),
		FIELD_USELESS_PAD("value", 4),
		{ _field_string_id, "flock name" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$95)
	{
		"hard boundaries on volume",
		"flock initially stopped"
	};
	STRING_LIST(unnamed_enum$95, unnamed_enum$95_strings, _countof(unnamed_enum$95_strings));

	TAG_REFERENCE(creature_group_reference$2, CREATURE_TAG);

	TAG_STRUCT(
		flock_sink_block_struct_definition,
		"flock_sink_block",
		"flock_sink_block_struct_definition",
		"s_flock_sink",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_vector_3d, "position" },
		{ _field_real, "radius" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		flock_source_block_struct_definition,
		"flock_source_block",
		"flock_source_block_struct_definition",
		"s_flock_source",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_vector_3d, "position" },
		{ _field_real_euler_angles_2d, "starting yaw, pitch", nullptr, "degrees" },
		{ _field_real, "radius" },
		{ _field_real, "weight", "probability of producing at this source" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		friction_point_definition_block_struct_definition,
		"friction_point_definition_block",
		"friction_point_definition_block_struct_definition",
		"s_friction_point_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "marker name" },
		{ _field_long_flags, "flags", &unnamed_enum$513 },
		{ _field_real, "fraction of total mass", "(0.0-1.0) fraction of total vehicle mass" },
		{ _field_real, "radius" },
		{ _field_real, "damaged radius", "radius when the tire is blown off." },
		{ _field_short_enum, "friction type", &unnamed_enum$514 },
		FIELD_PAD("value", 2),
		{ _field_real, "moving friction velocity diff" },
		{ _field_real, "e-brake moving friction" },
		{ _field_real, "e-brake friction" },
		{ _field_real, "e-brake moving friction vel diff" },
		FIELD_PAD("value", 20),
		{ _field_string_id, "collision global material name", _field_id_sted },
		FIELD_PAD("value", 2),
		FIELD_EXPLANATION("friction point destruction data", nullptr),
		{ _field_short_enum, "model state destroyed", "only need point can destroy flag set", &unnamed_enum$223 },
		{ _field_string_id, "region name", "only need point can destroy flag set" },
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$513)
	{
		"gets damage from region",
		"powered",
		"front turning",
		"rear turning",
		"attached to e-brake",
		"can be destroyed"
	};
	STRING_LIST(unnamed_enum$513, unnamed_enum$513_strings, _countof(unnamed_enum$513_strings));

	STRINGS(unnamed_enum$514)
	{
		"point",
		"forward"
	};
	STRING_LIST(unnamed_enum$514, unnamed_enum$514_strings, _countof(unnamed_enum$514_strings));

	STRINGS(unnamed_enum$223)
	{
		"default",
		"minor damage",
		"medium damage",
		"major damage",
		"destroyed"
	};
	STRING_LIST(unnamed_enum$223, unnamed_enum$223_strings, _countof(unnamed_enum$223_strings));

	VERSIONED_TAG_STRUCT(
		function_definition_struct_definition,
		"function_definition",
		"function_definition_struct_definition",
		"s_function_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 3 },
		FIELD_HIDE_BEGIN(),
		{ _field_block, "data", &byte_block },
		FIELD_HIDE_END(),
		
		{ _struct_version_mode_equal, 0, 11 },
		FIELD_HIDE_BEGIN(),
		{ _field_char_integer, "Function Type" },
		{ _field_byte_flags, "Flags", &unnamed_enum$28 },
		{ _field_char_integer, "Function 1" },
		{ _field_char_integer, "Function 2" },
		{ _field_rgb_color, "Color 0" },
		{ _field_rgb_color, "Color 1" },
		{ _field_rgb_color, "Color 2" },
		{ _field_rgb_color, "Color 3" },
		{ _field_block, "Values", &real_block },
		FIELD_HIDE_END(),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$28)
	{
		"Range",
		"Unused 0",
		"Unused 1",
		"Unused 2",
		"Color Bit 0",
		"Color Bit 1",
		"Color Bit 2",
		"Color Bit 3"
	};
	STRING_LIST(unnamed_enum$28, unnamed_enum$28_strings, _countof(unnamed_enum$28_strings));

	TAG_STRUCT(
		g_default_variant_settings_block_struct_definition,
		"g_default_variant_settings_block",
		"g_default_variant_settings_block_struct_definition",
		"s_default_variant_setting",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_enum, "setting category", &unnamed_enum$205 },
		{ _field_long_integer, "value" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$205)
	{
		"match round setting",
		"match ctf score to win",
		"match slayer score to win round",
		"match oddball score to win round",
		"match king score to win round",
		"match race score to win round",
		"match headhunter score to win round",
		"match juggernaut score to win round",
		"match territories score to win round",
		"match assault score to win round",
		"match round time limit",
		"match rounds reset map",
		"match tie resolution",
		"match observers",
		"match join in progress",
		"maximum players",
		"lives per round",
		"respawn time",
		"suicide penalty",
		"shields",
		"motion sensor",
		"invisibility",
		"team changing",
		"team scoring",
		"friendly fire",
		"team respawn setting",
		"betrayal respawn penalty",
		"team killer management",
		"slayer bonus points",
		"slayer suicide point loss",
		"slayer death point loss",
		"headhunter moving head bin",
		"headhunter point multiplier",
		"headhunter suicide point loss",
		"headhunter death point loss",
		"headhunter uncontested bin",
		"headhunter speed with heads",
		"headhunter max heads carried",
		"king uncontested hill",
		"king team time multiplier",
		"king moving hill",
		"king extra damage on hill",
		"king dmg resistance on hill",
		"oddball ball spawn count",
		"oddball ball hit damage",
		"oddball speed with ball",
		"oddball driving gunning with ball",
		"oddball waypoint to ball",
		"race random track",
		"race uncontested flag",
		"ctf game type",
		"ctf sudden death",
		"ctf flag may be returned",
		"ctf flag at home to score",
		"ctf flag reset time",
		"ctf speed with flag",
		"ctf flag hit damage",
		"ctf driving gunning with flag",
		"ctf waypoint to own flag",
		"assault game type",
		"assault sudden death",
		"assault detonation time",
		"assault bomb at home to score",
		"assault arming time",
		"assault speed with bomb",
		"assault bomb hit damage",
		"assault driving gunning with bomb",
		"assault waypoint to own bomb",
		"juggernaut betrayal point loss",
		"juggernaut juggy extra damage",
		"juggernaut juggy infinite ammo",
		"juggernaut juggy overshields",
		"juggernaut juggy active camo",
		"juggernaut juggy motion sensor",
		"territories territory count",
		"veh. respawn",
		"veh. primary light land",
		"veh. secondary light land",
		"veh. primary heavy land",
		"veh. primary flying",
		"veh. secondary heavy land",
		"veh. primary turret",
		"veh. secondary turret",
		"equip. weapons on map",
		"equip. overshields on map",
		"equip. active camo on map",
		"equip. grenades on map",
		"equip. weapon respawn times",
		"equip. starting grenades",
		"equip. primary starting equipment",
		"UNS. max. living players",
		"UNS. teams enabled",
		"UNS. assault bomb may be returned",
		"UNS. max. teams",
		"UNS. equip. secondary starting equipment",
		"UNS. assault fuse time",
		"UNS. juggy movement",
		"UNS. sticky fuse",
		"UNS. terr. contest time",
		"UNS. terr. control time",
		"UNS. oddb. carr. invis",
		"UNS. king invis in hill",
		"UNS. ball carr. dmg. resis.",
		"UNS. king dmg. res. in hill",
		"UNS. players ex. dmg",
		"UNS. players dmg. resis.",
		"UNS. ctf carr. dmg. resis.",
		"UNS. ctf carr. invis.",
		"UNS. juggy dmg. resis.",
		"UNS. bomb carr. dmg. resis.",
		"UNS. bomb carr. invis.",
		"UNS. force even teams",
		"skulls arbiter_envy",
		"skulls grunt_birthday_party",
		"skulls famine",
		"skulls blind",
		"skulls black_eye",
		"skulls sputnik",
		"skulls boom",
		"skulls eye_patch",
		"skulls foreign",
		"skulls grunt_funeral",
		"skulls recession",
		"skulls malfunction",
		"skulls streaking",
		"skulls scarab",
		"skulls feather",
		"veh. indestructible",
		"world gravity modifier",
		"player traits movement gravity",
		"vehicle traits movement gravity",
		"infinite ammo",
		"recharging grenades",
		"bottomless clip"
	};
	STRING_LIST(unnamed_enum$205, unnamed_enum$205_strings, _countof(unnamed_enum$205_strings));

	TAG_STRUCT(
		g_default_variants_block_struct_definition,
		"g_default_variants_block",
		"g_default_variants_block_struct_definition",
		"s_default_variant_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "variant name" },
		{ _field_long_enum, "variant type", &unnamed_enum$204 },
		{ _field_block, "settings", &g_default_variant_settings_block },
		{ _field_char_integer, "description index" },
		FIELD_PAD("value", 3),
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		g_dialogue_definition_struct_definition,
		"g_dialogue_definition",
		"g_dialogue_definition_struct_definition",
		"s_dialogue_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 4 },
		{ _field_tag_reference, "global dialogue info", &ai_dialogue_globals_group_reference$2 },
		{ _field_long_flags, "flags", &unnamed_enum$497 },
		{ _field_block, "vocalizations", &sound_references_block },
		{ _field_string_id, "mission dialogue designator", "3-letter mission dialogue designator name" },
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_tag_reference, "global dialogue info", &ai_dialogue_globals_group_reference$2 },
		{ _field_long_flags, "flags", &unnamed_enum$497 },
		FIELD_PAD("value", 20),
		{ _field_block, "vocalizations", &sound_references_block },
		{ _field_string_id, "mission dialogue designator", "3-letter mission dialogue designator name" },
		
		{ _field_terminator }
	};

	TAG_REFERENCE(ai_dialogue_globals_group_reference$2, AI_DIALOGUE_GLOBALS_TAG);

	STRINGS(unnamed_enum$497)
	{
		"female"
	};
	STRING_LIST(unnamed_enum$497, unnamed_enum$497_strings, _countof(unnamed_enum$497_strings));

	VERSIONED_TAG_STRUCT(
		g_new_scenario_object_datum_struct_definition,
		"g_new_scenario_object_datum",
		"g_new_scenario_object_datum_struct_definition",
		"s_scenario_object_datum",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 11 },
		FIELD_CUSTOM("value", _field_id_object_editor),
		{ _field_long_flags, "placement flags", &unnamed_enum$4 },
		{ _field_real_point_3d, "position", _field_id_point },
		{ _field_real_euler_angles_3d, "rotation", _field_id_orientation },
		{ _field_real, "scale", _field_id_scale },
		{ _field_word_flags, "value", &unnamed_enum$5 },
		{ _field_word_block_flags, "manual bsp flags", &scenario_structure_bsp_reference_block, _field_id_manual_bsp_flags },
		{ _field_struct, "object id", &scenario_object_id_struct_struct_definition, _field_id_object_id },
		{ _field_char_enum, "bsp policy", &unnamed_enum$8, _field_id_enum },
		FIELD_PAD("value", 1),
		{ _field_short_block_index, "value", _field_id_hide },
		
		{ _struct_version_mode_equal, 0, 11 },
		FIELD_CUSTOM("value", _field_id_object_editor),
		{ _field_long_flags, "placement flags", &unnamed_enum$4 },
		{ _field_real_point_3d, "position", _field_id_point },
		{ _field_real_euler_angles_3d, "rotation", _field_id_orientation },
		{ _field_real, "scale", _field_id_scale },
		{ _field_word_flags, "value", &unnamed_enum$5 },
		{ _field_word_block_flags, "manual bsp flags", &scenario_structure_bsp_reference_block, _field_id_manual_bsp_flags },
		{ _field_struct, "object id", &scenario_object_id_struct_struct_definition, _field_id_object_id },
		{ _field_char_enum, "bsp policy", &unnamed_enum$8, _field_id_enum },
		FIELD_PAD("value", 1),
		{ _field_short_block_index, "value", _field_id_hide },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$4)
	{
		"not automatically",
		"unused",
		"unused",
		"unused",
		"lock type to env. object",
		"lock transform to env. object",
		"never placed",
		"lock name to env. object",
		"create at rest"
	};
	STRING_LIST(unnamed_enum$4, unnamed_enum$4_strings, _countof(unnamed_enum$4_strings));

	STRINGS(unnamed_enum$5)
	{
		"mirrored"
	};
	STRING_LIST(unnamed_enum$5, unnamed_enum$5_strings, _countof(unnamed_enum$5_strings));

	STRINGS(unnamed_enum$8)
	{
		"default",
		"always placed",
		"manual bsp placement"
	};
	STRING_LIST(unnamed_enum$8, unnamed_enum$8_strings, _countof(unnamed_enum$8_strings));

	TAG_STRUCT(
		g_null_block_struct_definition,
		"g_null_block",
		"g_null_block_struct_definition",
		"s_null_block",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("value", _field_id_null),
		{ _field_terminator }
	};

	TAG_STRUCT(
		g_scenario_editor_folder_block_struct_definition,
		"g_scenario_editor_folder_block",
		"g_scenario_editor_folder_block_struct_definition",
		"s_scenario_editor_folder",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_block_index, "parent folder" },
		{ _field_long_string, "name" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		g_sound_effect_override_parameters_struct_definition,
		"g_sound_effect_override_parameters",
		"g_sound_effect_override_parameters_struct_definition",
		"s_sound_effect_override_parameter",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 8 },
		{ _field_string_id, "name" },
		{ _field_string_id, "input", _field_id_function_input_scalar },
		{ _field_string_id, "range", _field_id_function_input_range },
		{ _field_real, "time period", nullptr, "seconds", _field_id_function_unknown },
		{ _field_long_integer, "integer value" },
		{ _field_real, "real value" },
		FIELD_CUSTOM("sound effect value", _field_id_function_editor),
		{ _field_struct, "function value", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		
		{ _struct_version_mode_equal, 0, 3 },
		{ _field_string_id, "name" },
		{ _field_long_integer, "integer value" },
		{ _field_real, "real value" },
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		g_sound_effect_template_collection_struct_definition,
		"g_sound_effect_template_collection",
		"g_sound_effect_template_collection_struct_definition",
		"s_sound_effect_template_collection",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 4 },
		{ _field_block, "template collection", &sound_effect_templates_block },
		{ _field_string_id, "input effect name" },
		{ _field_block, "additional sound inputs", &sound_effect_template_additional_sound_input_block },
		{ _field_block, "value", &platform_sound_effect_template_collection_block },
		
		{ _struct_version_mode_equal, 0, 7 },
		{ _field_string_id, "dsp effect" },
		FIELD_EXPLANATION("WARNING", "DON\'T MODIFY THIS TAG UNLESS YOU KNOW WHAT YOU ARE DOING"),
		{ _field_data, "explanation", &sound_effect_template_explanation },
		{ _field_long_flags, "flags", &unnamed_enum$25 },
		{ _field_short_integer, "value" },
		{ _field_short_integer, "value" },
		{ _field_block, "parameters", &sound_effect_template_parameter_block },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$25)
	{
		"use high level parameters",
		"custom parameters"
	};
	STRING_LIST(unnamed_enum$25, unnamed_enum$25_strings, _countof(unnamed_enum$25_strings));

	TAG_STRUCT(
		g_sound_effect_template_struct_definition,
		"g_sound_effect_template",
		"g_sound_effect_template_struct_definition",
		"s_sound_effect_template_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "dsp effect" },
		FIELD_EXPLANATION("WARNING", "DON\'T MODIFY THIS TAG UNLESS YOU KNOW WHAT YOU ARE DOING"),
		{ _field_data, "explanation", &sound_effect_template_explanation },
		{ _field_long_flags, "flags", &unnamed_enum$25 },
		{ _field_short_integer, "value" },
		{ _field_short_integer, "value" },
		{ _field_block, "parameters", &sound_effect_template_parameter_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		g_sound_permutation_chunk_struct_definition,
		"g_sound_permutation_chunk",
		"g_sound_permutation_chunk_struct_definition",
		"s_sound_permutation_chunk",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 4 },
		{ _field_long_integer, "file offset" },
		{ _field_long_integer, "value" },
		{ _field_long_integer, "value" },
		{ _field_long_integer, "value" },
		
		{ _struct_version_mode_equal, 1, 3 },
		{ _field_long_integer, "file offset" },
		{ _field_long_integer, "value" },
		{ _field_long_integer, "value" },
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_long_integer, "file offset" },
		{ _field_short_integer, "value" },
		{ _field_short_integer, "value" },
		{ _field_long_integer, "value" },
		{ _field_long_integer, "value" },
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		g_vocalization_fields_v2_0_struct_definition,
		"g_vocalization_fields_v2_0",
		"g_vocalization_fields_v2_0_struct_definition",
		"s_vocalization",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 27 },
		{ _field_string_id, "vocalization" },
		{ _field_string_id, "parent vocalization", _field_id_sted },
		{ _field_short_integer, "parent index" },
		{ _field_short_enum, "priority", &unnamed_enum$45 },
		{ _field_long_flags, "flags", &unnamed_enum$46 },
		{ _field_short_enum, "glance behavior", "how does the speaker of this vocalization direct his gaze?", &unnamed_enum$47 },
		{ _field_short_enum, "glance recipient behavior", "how does someone who hears me behave?", &unnamed_enum$47 },
		{ _field_short_enum, "perception type", &unnamed_enum$48 },
		{ _field_short_enum, "max combat status", &unnamed_enum$49 },
		{ _field_short_enum, "animation impulse", &unnamed_enum$50 },
		{ _field_short_enum, "overlap priority", &unnamed_enum$45 },
		{ _field_real, "sound repetition delay", "Minimum delay time between playing the same permutation", "minutes" },
		{ _field_real, "allowable queue delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "pre voc. delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "notification delay", "How long into the vocalization the AI should be notified", "seconds" },
		{ _field_real, "post voc. delay", "How long speech is suppressed in the speaking unit after vocalizing", "seconds" },
		{ _field_real, "repeat delay", "How long before the same vocalization can be repeated", "seconds" },
		{ _field_real, "weight", "Inherent weight of this vocalization", nullptr, "[0-1]" },
		{ _field_real, "speaker freeze time", "speaker won't move for the given amount of time" },
		{ _field_real, "listener freeze time", "listener won't move for the given amount of time (from start of vocalization)" },
		{ _field_short_enum, "speaker emotion", &unnamed_enum$51 },
		{ _field_short_enum, "listener emotion", &unnamed_enum$51 },
		{ _field_real, "player skip fraction" },
		{ _field_real, "skip fraction" },
		{ _field_string_id, "Sample line" },
		{ _field_block, "reponses", &response_block },
		{ _field_block, "children", &vocalization_definitions_block_1_block },
		
		{ _struct_version_mode_equal, 0, 33 },
		{ _field_string_id, "vocalization" },
		{ _field_string_id, "parent vocalization", _field_id_sted },
		{ _field_short_integer, "parent index" },
		{ _field_short_enum, "priority", &unnamed_enum$45 },
		{ _field_long_flags, "flags", &unnamed_enum$46 },
		FIELD_PAD("value", 8),
		{ _field_short_enum, "glance behavior", "how does the speaker of this vocalization direct his gaze?", &unnamed_enum$47 },
		{ _field_short_enum, "glance recipient behavior", "how does someone who hears me behave?", &unnamed_enum$47 },
		{ _field_short_enum, "perception type", &unnamed_enum$48 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "animation impulse", &unnamed_enum$50 },
		{ _field_short_enum, "overlap priority", &unnamed_enum$45 },
		{ _field_real, "sound repetition delay", "Minimum delay time between playing the same permutation", "minutes" },
		FIELD_PAD("value", 12),
		{ _field_real, "allowable queue delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "pre voc. delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "notification delay", "How long into the vocalization the AI should be notified", "seconds" },
		{ _field_real, "post voc. delay", "How long speech is suppressed in the speaking unit after vocalizing", "seconds" },
		{ _field_real, "repeat delay", "How long before the same vocalization can be repeated", "seconds" },
		{ _field_real, "weight", "Inherent weight of this vocalization", nullptr, "[0-1]" },
		{ _field_short_enum, "max combat status", &unnamed_enum$49 },
		FIELD_PAD("value", 2),
		{ _field_real, "speaker freeze time", "speaker won't move for the given amount of time" },
		{ _field_real, "listener freeze time", "listener won't move for the given amount of time (from start of vocalization)" },
		{ _field_short_enum, "speaker emotion", &unnamed_enum$51 },
		{ _field_short_enum, "listener emotion", &unnamed_enum$51 },
		{ _field_real, "player skip fraction" },
		{ _field_real, "skip fraction" },
		{ _field_long_string, "Sample line" },
		FIELD_PAD("value", 12),
		{ _field_block, "reponses", &response_block },
		FIELD_PAD("value", 12),
		{ _field_block, "children", &vocalization_definitions_block_1_block },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$45)
	{
		"none",
		"recall",
		"idle",
		"comment",
		"idle_response",
		"postcombat",
		"combat",
		"status",
		"respond",
		"warn",
		"act",
		"react",
		"involuntary",
		"scream",
		"scripted",
		"death"
	};
	STRING_LIST(unnamed_enum$45, unnamed_enum$45_strings, _countof(unnamed_enum$45_strings));

	STRINGS(unnamed_enum$46)
	{
		"immediate",
		"interrupt",
		"cancel low priority"
	};
	STRING_LIST(unnamed_enum$46, unnamed_enum$46_strings, _countof(unnamed_enum$46_strings));

	STRINGS(unnamed_enum$47)
	{
		"NONE",
		"glance subject short",
		"glance subject long",
		"glance cause short",
		"glance cause long",
		"glance friend short",
		"glance friend long"
	};
	STRING_LIST(unnamed_enum$47, unnamed_enum$47_strings, _countof(unnamed_enum$47_strings));

	STRINGS(unnamed_enum$48)
	{
		"none",
		"speaker",
		"listener"
	};
	STRING_LIST(unnamed_enum$48, unnamed_enum$48_strings, _countof(unnamed_enum$48_strings));

	STRINGS(unnamed_enum$49)
	{
		"asleep",
		"idle",
		"alert",
		"active",
		"uninspected",
		"definite",
		"certain",
		"visible",
		"clear_los",
		"dangerous"
	};
	STRING_LIST(unnamed_enum$49, unnamed_enum$49_strings, _countof(unnamed_enum$49_strings));

	STRINGS(unnamed_enum$50)
	{
		"none",
		"shakefist",
		"cheer",
		"surprise-front",
		"surprise-back",
		"taunt",
		"brace",
		"point",
		"hold",
		"wave",
		"advance",
		"fallback"
	};
	STRING_LIST(unnamed_enum$50, unnamed_enum$50_strings, _countof(unnamed_enum$50_strings));

	STRINGS(unnamed_enum$51)
	{
		"none",
		"asleep",
		"amorous",
		"happy",
		"inquisitive",
		"repulsed",
		"disappointed",
		"shocked",
		"scared",
		"arrogant",
		"annoyed",
		"angry",
		"pensive",
		"pain"
	};
	STRING_LIST(unnamed_enum$51, unnamed_enum$51_strings, _countof(unnamed_enum$51_strings));

	VERSIONED_TAG_STRUCT(
		g_vocalization_fields_v2_1_struct_definition,
		"g_vocalization_fields_v2_1",
		"g_vocalization_fields_v2_1_struct_definition",
		"s_vocalization$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 27 },
		{ _field_string_id, "vocalization" },
		{ _field_string_id, "parent vocalization", _field_id_sted },
		{ _field_short_integer, "parent index" },
		{ _field_short_enum, "priority", &unnamed_enum$45 },
		{ _field_long_flags, "flags", &unnamed_enum$46 },
		{ _field_short_enum, "glance behavior", "how does the speaker of this vocalization direct his gaze?", &unnamed_enum$47 },
		{ _field_short_enum, "glance recipient behavior", "how does someone who hears me behave?", &unnamed_enum$47 },
		{ _field_short_enum, "perception type", &unnamed_enum$48 },
		{ _field_short_enum, "max combat status", &unnamed_enum$49 },
		{ _field_short_enum, "animation impulse", &unnamed_enum$50 },
		{ _field_short_enum, "overlap priority", &unnamed_enum$45 },
		{ _field_real, "sound repetition delay", "Minimum delay time between playing the same permutation", "minutes" },
		{ _field_real, "allowable queue delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "pre voc. delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "notification delay", "How long into the vocalization the AI should be notified", "seconds" },
		{ _field_real, "post voc. delay", "How long speech is suppressed in the speaking unit after vocalizing", "seconds" },
		{ _field_real, "repeat delay", "How long before the same vocalization can be repeated", "seconds" },
		{ _field_real, "weight", "Inherent weight of this vocalization", nullptr, "[0-1]" },
		{ _field_real, "speaker freeze time", "speaker won't move for the given amount of time" },
		{ _field_real, "listener freeze time", "listener won't move for the given amount of time (from start of vocalization)" },
		{ _field_short_enum, "speaker emotion", &unnamed_enum$51 },
		{ _field_short_enum, "listener emotion", &unnamed_enum$51 },
		{ _field_real, "player skip fraction" },
		{ _field_real, "skip fraction" },
		{ _field_string_id, "Sample line" },
		{ _field_block, "reponses", &response_block },
		{ _field_block, "children", &vocalization_definitions_block_2_block },
		
		{ _struct_version_mode_equal, 0, 33 },
		{ _field_string_id, "vocalization" },
		{ _field_string_id, "parent vocalization", _field_id_sted },
		{ _field_short_integer, "parent index" },
		{ _field_short_enum, "priority", &unnamed_enum$45 },
		{ _field_long_flags, "flags", &unnamed_enum$46 },
		FIELD_PAD("value", 8),
		{ _field_short_enum, "glance behavior", "how does the speaker of this vocalization direct his gaze?", &unnamed_enum$47 },
		{ _field_short_enum, "glance recipient behavior", "how does someone who hears me behave?", &unnamed_enum$47 },
		{ _field_short_enum, "perception type", &unnamed_enum$48 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "animation impulse", &unnamed_enum$50 },
		{ _field_short_enum, "overlap priority", &unnamed_enum$45 },
		{ _field_real, "sound repetition delay", "Minimum delay time between playing the same permutation", "minutes" },
		FIELD_PAD("value", 12),
		{ _field_real, "allowable queue delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "pre voc. delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "notification delay", "How long into the vocalization the AI should be notified", "seconds" },
		{ _field_real, "post voc. delay", "How long speech is suppressed in the speaking unit after vocalizing", "seconds" },
		{ _field_real, "repeat delay", "How long before the same vocalization can be repeated", "seconds" },
		{ _field_real, "weight", "Inherent weight of this vocalization", nullptr, "[0-1]" },
		{ _field_short_enum, "max combat status", &unnamed_enum$49 },
		FIELD_PAD("value", 2),
		{ _field_real, "speaker freeze time", "speaker won't move for the given amount of time" },
		{ _field_real, "listener freeze time", "listener won't move for the given amount of time (from start of vocalization)" },
		{ _field_short_enum, "speaker emotion", &unnamed_enum$51 },
		{ _field_short_enum, "listener emotion", &unnamed_enum$51 },
		{ _field_real, "player skip fraction" },
		{ _field_real, "skip fraction" },
		{ _field_long_string, "Sample line" },
		FIELD_PAD("value", 12),
		{ _field_block, "reponses", &response_block },
		FIELD_PAD("value", 12),
		{ _field_block, "children", &vocalization_definitions_block_2_block },
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		g_vocalization_fields_v2_2_struct_definition,
		"g_vocalization_fields_v2_2",
		"g_vocalization_fields_v2_2_struct_definition",
		"s_vocalization$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 27 },
		{ _field_string_id, "vocalization" },
		{ _field_string_id, "parent vocalization", _field_id_sted },
		{ _field_short_integer, "parent index" },
		{ _field_short_enum, "priority", &unnamed_enum$45 },
		{ _field_long_flags, "flags", &unnamed_enum$46 },
		{ _field_short_enum, "glance behavior", "how does the speaker of this vocalization direct his gaze?", &unnamed_enum$47 },
		{ _field_short_enum, "glance recipient behavior", "how does someone who hears me behave?", &unnamed_enum$47 },
		{ _field_short_enum, "perception type", &unnamed_enum$48 },
		{ _field_short_enum, "max combat status", &unnamed_enum$49 },
		{ _field_short_enum, "animation impulse", &unnamed_enum$50 },
		{ _field_short_enum, "overlap priority", &unnamed_enum$45 },
		{ _field_real, "sound repetition delay", "Minimum delay time between playing the same permutation", "minutes" },
		{ _field_real, "allowable queue delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "pre voc. delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "notification delay", "How long into the vocalization the AI should be notified", "seconds" },
		{ _field_real, "post voc. delay", "How long speech is suppressed in the speaking unit after vocalizing", "seconds" },
		{ _field_real, "repeat delay", "How long before the same vocalization can be repeated", "seconds" },
		{ _field_real, "weight", "Inherent weight of this vocalization", nullptr, "[0-1]" },
		{ _field_real, "speaker freeze time", "speaker won't move for the given amount of time" },
		{ _field_real, "listener freeze time", "listener won't move for the given amount of time (from start of vocalization)" },
		{ _field_short_enum, "speaker emotion", &unnamed_enum$51 },
		{ _field_short_enum, "listener emotion", &unnamed_enum$51 },
		{ _field_real, "player skip fraction" },
		{ _field_real, "skip fraction" },
		{ _field_string_id, "Sample line" },
		{ _field_block, "reponses", &response_block },
		{ _field_block, "children", &vocalization_definitions_block_3_block },
		
		{ _struct_version_mode_equal, 0, 33 },
		{ _field_string_id, "vocalization" },
		{ _field_string_id, "parent vocalization", _field_id_sted },
		{ _field_short_integer, "parent index" },
		{ _field_short_enum, "priority", &unnamed_enum$45 },
		{ _field_long_flags, "flags", &unnamed_enum$46 },
		FIELD_PAD("value", 8),
		{ _field_short_enum, "glance behavior", "how does the speaker of this vocalization direct his gaze?", &unnamed_enum$47 },
		{ _field_short_enum, "glance recipient behavior", "how does someone who hears me behave?", &unnamed_enum$47 },
		{ _field_short_enum, "perception type", &unnamed_enum$48 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "animation impulse", &unnamed_enum$50 },
		{ _field_short_enum, "overlap priority", &unnamed_enum$45 },
		{ _field_real, "sound repetition delay", "Minimum delay time between playing the same permutation", "minutes" },
		FIELD_PAD("value", 12),
		{ _field_real, "allowable queue delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "pre voc. delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "notification delay", "How long into the vocalization the AI should be notified", "seconds" },
		{ _field_real, "post voc. delay", "How long speech is suppressed in the speaking unit after vocalizing", "seconds" },
		{ _field_real, "repeat delay", "How long before the same vocalization can be repeated", "seconds" },
		{ _field_real, "weight", "Inherent weight of this vocalization", nullptr, "[0-1]" },
		{ _field_short_enum, "max combat status", &unnamed_enum$49 },
		FIELD_PAD("value", 2),
		{ _field_real, "speaker freeze time", "speaker won't move for the given amount of time" },
		{ _field_real, "listener freeze time", "listener won't move for the given amount of time (from start of vocalization)" },
		{ _field_short_enum, "speaker emotion", &unnamed_enum$51 },
		{ _field_short_enum, "listener emotion", &unnamed_enum$51 },
		{ _field_real, "player skip fraction" },
		{ _field_real, "skip fraction" },
		{ _field_long_string, "Sample line" },
		FIELD_PAD("value", 12),
		{ _field_block, "reponses", &response_block },
		FIELD_PAD("value", 12),
		{ _field_block, "children", &vocalization_definitions_block_3_block },
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		g_vocalization_fields_v2_3_struct_definition,
		"g_vocalization_fields_v2_3",
		"g_vocalization_fields_v2_3_struct_definition",
		"s_vocalization$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 27 },
		{ _field_string_id, "vocalization" },
		{ _field_string_id, "parent vocalization", _field_id_sted },
		{ _field_short_integer, "parent index" },
		{ _field_short_enum, "priority", &unnamed_enum$45 },
		{ _field_long_flags, "flags", &unnamed_enum$46 },
		{ _field_short_enum, "glance behavior", "how does the speaker of this vocalization direct his gaze?", &unnamed_enum$47 },
		{ _field_short_enum, "glance recipient behavior", "how does someone who hears me behave?", &unnamed_enum$47 },
		{ _field_short_enum, "perception type", &unnamed_enum$48 },
		{ _field_short_enum, "max combat status", &unnamed_enum$49 },
		{ _field_short_enum, "animation impulse", &unnamed_enum$50 },
		{ _field_short_enum, "overlap priority", &unnamed_enum$45 },
		{ _field_real, "sound repetition delay", "Minimum delay time between playing the same permutation", "minutes" },
		{ _field_real, "allowable queue delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "pre voc. delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "notification delay", "How long into the vocalization the AI should be notified", "seconds" },
		{ _field_real, "post voc. delay", "How long speech is suppressed in the speaking unit after vocalizing", "seconds" },
		{ _field_real, "repeat delay", "How long before the same vocalization can be repeated", "seconds" },
		{ _field_real, "weight", "Inherent weight of this vocalization", nullptr, "[0-1]" },
		{ _field_real, "speaker freeze time", "speaker won't move for the given amount of time" },
		{ _field_real, "listener freeze time", "listener won't move for the given amount of time (from start of vocalization)" },
		{ _field_short_enum, "speaker emotion", &unnamed_enum$51 },
		{ _field_short_enum, "listener emotion", &unnamed_enum$51 },
		{ _field_real, "player skip fraction" },
		{ _field_real, "skip fraction" },
		{ _field_string_id, "Sample line" },
		{ _field_block, "reponses", &response_block },
		{ _field_block, "children", &vocalization_definitions_block_4_block },
		
		{ _struct_version_mode_equal, 0, 33 },
		{ _field_string_id, "vocalization" },
		{ _field_string_id, "parent vocalization", _field_id_sted },
		{ _field_short_integer, "parent index" },
		{ _field_short_enum, "priority", &unnamed_enum$45 },
		{ _field_long_flags, "flags", &unnamed_enum$46 },
		FIELD_PAD("value", 8),
		{ _field_short_enum, "glance behavior", "how does the speaker of this vocalization direct his gaze?", &unnamed_enum$47 },
		{ _field_short_enum, "glance recipient behavior", "how does someone who hears me behave?", &unnamed_enum$47 },
		{ _field_short_enum, "perception type", &unnamed_enum$48 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "animation impulse", &unnamed_enum$50 },
		{ _field_short_enum, "overlap priority", &unnamed_enum$45 },
		{ _field_real, "sound repetition delay", "Minimum delay time between playing the same permutation", "minutes" },
		FIELD_PAD("value", 12),
		{ _field_real, "allowable queue delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "pre voc. delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "notification delay", "How long into the vocalization the AI should be notified", "seconds" },
		{ _field_real, "post voc. delay", "How long speech is suppressed in the speaking unit after vocalizing", "seconds" },
		{ _field_real, "repeat delay", "How long before the same vocalization can be repeated", "seconds" },
		{ _field_real, "weight", "Inherent weight of this vocalization", nullptr, "[0-1]" },
		{ _field_short_enum, "max combat status", &unnamed_enum$49 },
		FIELD_PAD("value", 2),
		{ _field_real, "speaker freeze time", "speaker won't move for the given amount of time" },
		{ _field_real, "listener freeze time", "listener won't move for the given amount of time (from start of vocalization)" },
		{ _field_short_enum, "speaker emotion", &unnamed_enum$51 },
		{ _field_short_enum, "listener emotion", &unnamed_enum$51 },
		{ _field_real, "player skip fraction" },
		{ _field_real, "skip fraction" },
		{ _field_long_string, "Sample line" },
		FIELD_PAD("value", 12),
		{ _field_block, "reponses", &response_block },
		FIELD_PAD("value", 12),
		{ _field_block, "children", &vocalization_definitions_block_4_block },
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		g_vocalization_fields_v2_4_struct_definition,
		"g_vocalization_fields_v2_4",
		"g_vocalization_fields_v2_4_struct_definition",
		"s_vocalization$5",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 27 },
		{ _field_string_id, "vocalization" },
		{ _field_string_id, "parent vocalization", _field_id_sted },
		{ _field_short_integer, "parent index" },
		{ _field_short_enum, "priority", &unnamed_enum$45 },
		{ _field_long_flags, "flags", &unnamed_enum$46 },
		{ _field_short_enum, "glance behavior", "how does the speaker of this vocalization direct his gaze?", &unnamed_enum$47 },
		{ _field_short_enum, "glance recipient behavior", "how does someone who hears me behave?", &unnamed_enum$47 },
		{ _field_short_enum, "perception type", &unnamed_enum$48 },
		{ _field_short_enum, "max combat status", &unnamed_enum$49 },
		{ _field_short_enum, "animation impulse", &unnamed_enum$50 },
		{ _field_short_enum, "overlap priority", &unnamed_enum$45 },
		{ _field_real, "sound repetition delay", "Minimum delay time between playing the same permutation", "minutes" },
		{ _field_real, "allowable queue delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "pre voc. delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "notification delay", "How long into the vocalization the AI should be notified", "seconds" },
		{ _field_real, "post voc. delay", "How long speech is suppressed in the speaking unit after vocalizing", "seconds" },
		{ _field_real, "repeat delay", "How long before the same vocalization can be repeated", "seconds" },
		{ _field_real, "weight", "Inherent weight of this vocalization", nullptr, "[0-1]" },
		{ _field_real, "speaker freeze time", "speaker won't move for the given amount of time" },
		{ _field_real, "listener freeze time", "listener won't move for the given amount of time (from start of vocalization)" },
		{ _field_short_enum, "speaker emotion", &unnamed_enum$51 },
		{ _field_short_enum, "listener emotion", &unnamed_enum$51 },
		{ _field_real, "player skip fraction" },
		{ _field_real, "skip fraction" },
		{ _field_string_id, "Sample line" },
		{ _field_block, "reponses", &response_block },
		{ _field_block, "children", &vocalization_definitions_block_5_block },
		
		{ _struct_version_mode_equal, 0, 33 },
		{ _field_string_id, "vocalization" },
		{ _field_string_id, "parent vocalization", _field_id_sted },
		{ _field_short_integer, "parent index" },
		{ _field_short_enum, "priority", &unnamed_enum$45 },
		{ _field_long_flags, "flags", &unnamed_enum$46 },
		FIELD_PAD("value", 8),
		{ _field_short_enum, "glance behavior", "how does the speaker of this vocalization direct his gaze?", &unnamed_enum$47 },
		{ _field_short_enum, "glance recipient behavior", "how does someone who hears me behave?", &unnamed_enum$47 },
		{ _field_short_enum, "perception type", &unnamed_enum$48 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "animation impulse", &unnamed_enum$50 },
		{ _field_short_enum, "overlap priority", &unnamed_enum$45 },
		{ _field_real, "sound repetition delay", "Minimum delay time between playing the same permutation", "minutes" },
		FIELD_PAD("value", 12),
		{ _field_real, "allowable queue delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "pre voc. delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "notification delay", "How long into the vocalization the AI should be notified", "seconds" },
		{ _field_real, "post voc. delay", "How long speech is suppressed in the speaking unit after vocalizing", "seconds" },
		{ _field_real, "repeat delay", "How long before the same vocalization can be repeated", "seconds" },
		{ _field_real, "weight", "Inherent weight of this vocalization", nullptr, "[0-1]" },
		{ _field_short_enum, "max combat status", &unnamed_enum$49 },
		FIELD_PAD("value", 2),
		{ _field_real, "speaker freeze time", "speaker won't move for the given amount of time" },
		{ _field_real, "listener freeze time", "listener won't move for the given amount of time (from start of vocalization)" },
		{ _field_short_enum, "speaker emotion", &unnamed_enum$51 },
		{ _field_short_enum, "listener emotion", &unnamed_enum$51 },
		{ _field_real, "player skip fraction" },
		{ _field_real, "skip fraction" },
		{ _field_long_string, "Sample line" },
		FIELD_PAD("value", 12),
		{ _field_block, "reponses", &response_block },
		FIELD_PAD("value", 12),
		{ _field_block, "children", &vocalization_definitions_block_5_block },
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		g_vocalization_fields_v2_5_struct_definition,
		"g_vocalization_fields_v2_5",
		"g_vocalization_fields_v2_5_struct_definition",
		"s_vocalization$6",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 27 },
		{ _field_string_id, "vocalization" },
		{ _field_string_id, "parent vocalization", _field_id_sted },
		{ _field_short_integer, "parent index" },
		{ _field_short_enum, "priority", &unnamed_enum$45 },
		{ _field_long_flags, "flags", &unnamed_enum$46 },
		{ _field_short_enum, "glance behavior", "how does the speaker of this vocalization direct his gaze?", &unnamed_enum$47 },
		{ _field_short_enum, "glance recipient behavior", "how does someone who hears me behave?", &unnamed_enum$47 },
		{ _field_short_enum, "perception type", &unnamed_enum$48 },
		{ _field_short_enum, "max combat status", &unnamed_enum$49 },
		{ _field_short_enum, "animation impulse", &unnamed_enum$50 },
		{ _field_short_enum, "overlap priority", &unnamed_enum$45 },
		{ _field_real, "sound repetition delay", "Minimum delay time between playing the same permutation", "minutes" },
		{ _field_real, "allowable queue delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "pre voc. delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "notification delay", "How long into the vocalization the AI should be notified", "seconds" },
		{ _field_real, "post voc. delay", "How long speech is suppressed in the speaking unit after vocalizing", "seconds" },
		{ _field_real, "repeat delay", "How long before the same vocalization can be repeated", "seconds" },
		{ _field_real, "weight", "Inherent weight of this vocalization", nullptr, "[0-1]" },
		{ _field_real, "speaker freeze time", "speaker won't move for the given amount of time" },
		{ _field_real, "listener freeze time", "listener won't move for the given amount of time (from start of vocalization)" },
		{ _field_short_enum, "speaker emotion", &unnamed_enum$51 },
		{ _field_short_enum, "listener emotion", &unnamed_enum$51 },
		{ _field_real, "player skip fraction" },
		{ _field_real, "skip fraction" },
		{ _field_string_id, "Sample line" },
		{ _field_block, "reponses", &response_block },
		{ _field_block, "value", &g_null_block },
		
		{ _struct_version_mode_equal, 0, 33 },
		{ _field_string_id, "vocalization" },
		{ _field_string_id, "parent vocalization", _field_id_sted },
		{ _field_short_integer, "parent index" },
		{ _field_short_enum, "priority", &unnamed_enum$45 },
		{ _field_long_flags, "flags", &unnamed_enum$46 },
		FIELD_PAD("value", 8),
		{ _field_short_enum, "glance behavior", "how does the speaker of this vocalization direct his gaze?", &unnamed_enum$47 },
		{ _field_short_enum, "glance recipient behavior", "how does someone who hears me behave?", &unnamed_enum$47 },
		{ _field_short_enum, "perception type", &unnamed_enum$48 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "animation impulse", &unnamed_enum$50 },
		{ _field_short_enum, "overlap priority", &unnamed_enum$45 },
		{ _field_real, "sound repetition delay", "Minimum delay time between playing the same permutation", "minutes" },
		FIELD_PAD("value", 12),
		{ _field_real, "allowable queue delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "pre voc. delay", "How long to wait to actually start the vocalization", "seconds" },
		{ _field_real, "notification delay", "How long into the vocalization the AI should be notified", "seconds" },
		{ _field_real, "post voc. delay", "How long speech is suppressed in the speaking unit after vocalizing", "seconds" },
		{ _field_real, "repeat delay", "How long before the same vocalization can be repeated", "seconds" },
		{ _field_real, "weight", "Inherent weight of this vocalization", nullptr, "[0-1]" },
		{ _field_short_enum, "max combat status", &unnamed_enum$49 },
		FIELD_PAD("value", 2),
		{ _field_real, "speaker freeze time", "speaker won't move for the given amount of time" },
		{ _field_real, "listener freeze time", "listener won't move for the given amount of time (from start of vocalization)" },
		{ _field_short_enum, "speaker emotion", &unnamed_enum$51 },
		{ _field_short_enum, "listener emotion", &unnamed_enum$51 },
		{ _field_real, "player skip fraction" },
		{ _field_real, "skip fraction" },
		{ _field_long_string, "Sample line" },
		FIELD_PAD("value", 12),
		{ _field_block, "reponses", &response_block },
		FIELD_PAD("value", 12),
		FIELD_PAD("value", 12),
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		g_vocalization_sound_references_struct_definition,
		"g_vocalization_sound_references",
		"g_vocalization_sound_references_struct_definition",
		"s_vocalization_sound",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 4 },
		{ _field_word_flags, "flags", &unnamed_enum$498 },
		FIELD_PAD("value", 2),
		{ _field_string_id, "vocalization" },
		{ _field_tag_reference, "sound", &sound_group_reference$3 },
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_word_flags, "flags", &unnamed_enum$498 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_string_id, "vocalization" },
		{ _field_tag_reference, "sound", &sound_group_reference$3 },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$498)
	{
		"new vocalization"
	};
	STRING_LIST(unnamed_enum$498, unnamed_enum$498_strings, _countof(unnamed_enum$498_strings));

	TAG_REFERENCE(sound_group_reference$3, SOUND_TAG, _tag_reference_flag_resolved_manually);

	TAG_STRUCT(
		game_engine_assault_event_block_struct_definition,
		"game_engine_assault_event_block",
		"game_engine_assault_event_block_struct_definition",
		"s_multiplayer_event_response_definition$9",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$303 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "event", &unnamed_enum$326 },
		{ _field_short_enum, "audience", &unnamed_enum$305 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_string_id, "display string" },
		{ _field_short_enum, "required field", &unnamed_enum$306 },
		{ _field_short_enum, "excluded audience", &unnamed_enum$306 },
		{ _field_string_id, "primary string" },
		{ _field_long_integer, "primary string duration", nullptr, "seconds" },
		{ _field_string_id, "plural display string" },
		FIELD_PAD("value", 28),
		{ _field_real, "sound delay (announcer only)" },
		{ _field_word_flags, "sound flags", &unnamed_enum$307 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_struct, "extra sounds", &sound_response_extra_sounds_struct_definition, _field_id_masd }, // structure_version:1
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 16),
		{ _field_block, "sound permutations", &sound_response_definition_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$303)
	{
		"quantity message"
	};
	STRING_LIST(unnamed_enum$303, unnamed_enum$303_strings, _countof(unnamed_enum$303_strings));

	STRINGS(unnamed_enum$326)
	{
		"game start",
		"bomb taken",
		"bomb dropped",
		"bomb returned by player",
		"bomb returned by timeout",
		"bomb captured",
		"bomb new defensive team",
		"bomb return faliure",
		"side switch tick",
		"side switch final tick",
		"side switch 30 seconds",
		"side switch 10 seconds",
		"bomb returned by defusing",
		"bomb placed on enemy post",
		"bomb arming started",
		"bomb arming completed",
		"bomb contested"
	};
	STRING_LIST(unnamed_enum$326, unnamed_enum$326_strings, _countof(unnamed_enum$326_strings));

	STRINGS(unnamed_enum$305)
	{
		"cause player",
		"cause team",
		"effect player",
		"effect team",
		"all"
	};
	STRING_LIST(unnamed_enum$305, unnamed_enum$305_strings, _countof(unnamed_enum$305_strings));

	STRINGS(unnamed_enum$306)
	{
		"NONE",
		"cause player",
		"cause team",
		"effect player",
		"effect team"
	};
	STRING_LIST(unnamed_enum$306, unnamed_enum$306_strings, _countof(unnamed_enum$306_strings));

	STRINGS(unnamed_enum$307)
	{
		"announcer sound"
	};
	STRING_LIST(unnamed_enum$307, unnamed_enum$307_strings, _countof(unnamed_enum$307_strings));

	TAG_STRUCT(
		game_engine_ctf_event_block_struct_definition,
		"game_engine_ctf_event_block",
		"game_engine_ctf_event_block_struct_definition",
		"s_multiplayer_event_response_definition$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$303 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "event", &unnamed_enum$309 },
		{ _field_short_enum, "audience", &unnamed_enum$305 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_string_id, "display string" },
		{ _field_short_enum, "required field", &unnamed_enum$306 },
		{ _field_short_enum, "excluded audience", &unnamed_enum$306 },
		{ _field_string_id, "primary string" },
		{ _field_long_integer, "primary string duration", nullptr, "seconds" },
		{ _field_string_id, "plural display string" },
		FIELD_PAD("value", 28),
		{ _field_real, "sound delay (announcer only)" },
		{ _field_word_flags, "sound flags", &unnamed_enum$307 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_struct, "extra sounds", &sound_response_extra_sounds_struct_definition, _field_id_masd }, // structure_version:1
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 16),
		{ _field_block, "sound permutations", &sound_response_definition_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$309)
	{
		"game start",
		"flag taken",
		"flag dropped",
		"flag returned by player",
		"flag returned by timeout",
		"flag captured",
		"flag new defensive team",
		"flag return faliure",
		"side switch tick",
		"side switch final tick",
		"side switch 30 seconds",
		"side switch 10 seconds",
		"flag contested",
		"flag capture faliure"
	};
	STRING_LIST(unnamed_enum$309, unnamed_enum$309_strings, _countof(unnamed_enum$309_strings));

	TAG_STRUCT(
		game_engine_flavor_event_block_struct_definition,
		"game_engine_flavor_event_block",
		"game_engine_flavor_event_block_struct_definition",
		"s_multiplayer_event_response_definition$6",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$303 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "event", &unnamed_enum$323 },
		{ _field_short_enum, "audience", &unnamed_enum$305 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_string_id, "display string" },
		{ _field_short_enum, "required field", &unnamed_enum$306 },
		{ _field_short_enum, "excluded audience", &unnamed_enum$306 },
		{ _field_string_id, "primary string" },
		{ _field_long_integer, "primary string duration", nullptr, "seconds" },
		{ _field_string_id, "plural display string" },
		FIELD_PAD("value", 28),
		{ _field_real, "sound delay (announcer only)" },
		{ _field_word_flags, "sound flags", &unnamed_enum$307 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_struct, "extra sounds", &sound_response_extra_sounds_struct_definition, _field_id_masd }, // structure_version:1
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 16),
		{ _field_block, "sound permutations", &sound_response_definition_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$323)
	{
		"double kill",
		"triple kill",
		"killtacular",
		"killing spree",
		"running riot",
		"well placed kill",
		"broke killing spree",
		"kill frenzy",
		"killtrocity",
		"killimajaro",
		"15 in a row",
		"20 in a row",
		"25 in a row"
	};
	STRING_LIST(unnamed_enum$323, unnamed_enum$323_strings, _countof(unnamed_enum$323_strings));

	TAG_STRUCT(
		game_engine_general_event_block_struct_definition,
		"game_engine_general_event_block",
		"game_engine_general_event_block_struct_definition",
		"s_multiplayer_event_response_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$303 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "event", &unnamed_enum$304 },
		{ _field_short_enum, "audience", &unnamed_enum$305 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_string_id, "display string" },
		{ _field_short_enum, "required field", &unnamed_enum$306 },
		{ _field_short_enum, "excluded audience", &unnamed_enum$306 },
		{ _field_string_id, "primary string" },
		{ _field_long_integer, "primary string duration", nullptr, "seconds" },
		{ _field_string_id, "plural display string" },
		FIELD_PAD("value", 28),
		{ _field_real, "sound delay (announcer only)" },
		{ _field_word_flags, "sound flags", &unnamed_enum$307 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_struct, "extra sounds", &sound_response_extra_sounds_struct_definition, _field_id_masd }, // structure_version:1
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 16),
		{ _field_block, "sound permutations", &sound_response_definition_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$304)
	{
		"kill",
		"suicide",
		"kill teammate",
		"victory",
		"team victory",
		"unused1",
		"unused2",
		"1 min to win",
		"team 1 min to win",
		"30 secs to win",
		"team 30 secs to win",
		"player quit",
		"player joined",
		"killed by unknown",
		"30 minutes left",
		"15 minutes left",
		"5 minutes left",
		"1 minute left",
		"time expired",
		"game over",
		"respawn tick",
		"last respawn tick",
		"teleporter used",
		"player changed team",
		"player rejoined",
		"gained lead",
		"gained team lead",
		"lost lead",
		"lost team lead",
		"tied leader",
		"tied team leader",
		"round over",
		"30 seconds left",
		"10 seconds left",
		"kill (falling)",
		"kill (collision)",
		"kill (melee)",
		"sudden death",
		"player booted player",
		"kill (flag carrier)",
		"kill (bomb carrier)",
		"kill (sticky grenade)",
		"kill (sniper)",
		"kill (st. melee)",
		"boarded vehicle",
		"start team noti.",
		"telefrag",
		"10 secs to win",
		"team 10 secs to win"
	};
	STRING_LIST(unnamed_enum$304, unnamed_enum$304_strings, _countof(unnamed_enum$304_strings));

	TAG_STRUCT(
		game_engine_juggernaut_event_block_struct_definition,
		"game_engine_juggernaut_event_block",
		"game_engine_juggernaut_event_block_struct_definition",
		"s_multiplayer_event_response_definition$7",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$303 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "event", &unnamed_enum$324 },
		{ _field_short_enum, "audience", &unnamed_enum$305 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_string_id, "display string" },
		{ _field_short_enum, "required field", &unnamed_enum$306 },
		{ _field_short_enum, "excluded audience", &unnamed_enum$306 },
		{ _field_string_id, "primary string" },
		{ _field_long_integer, "primary string duration", nullptr, "seconds" },
		{ _field_string_id, "plural display string" },
		FIELD_PAD("value", 28),
		{ _field_real, "sound delay (announcer only)" },
		{ _field_word_flags, "sound flags", &unnamed_enum$307 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_struct, "extra sounds", &sound_response_extra_sounds_struct_definition, _field_id_masd }, // structure_version:1
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 16),
		{ _field_block, "sound permutations", &sound_response_definition_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$324)
	{
		"game start",
		"new juggernaut",
		"juggernaut killed"
	};
	STRING_LIST(unnamed_enum$324, unnamed_enum$324_strings, _countof(unnamed_enum$324_strings));

	TAG_STRUCT(
		game_engine_king_event_block_struct_definition,
		"game_engine_king_event_block",
		"game_engine_king_event_block_struct_definition",
		"s_multiplayer_event_response_definition$5",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$303 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "event", &unnamed_enum$311 },
		{ _field_short_enum, "audience", &unnamed_enum$305 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_string_id, "display string" },
		{ _field_short_enum, "required field", &unnamed_enum$306 },
		{ _field_short_enum, "excluded audience", &unnamed_enum$306 },
		{ _field_string_id, "primary string" },
		{ _field_long_integer, "primary string duration", nullptr, "seconds" },
		{ _field_string_id, "plural display string" },
		FIELD_PAD("value", 28),
		{ _field_real, "sound delay (announcer only)" },
		{ _field_word_flags, "sound flags", &unnamed_enum$307 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_struct, "extra sounds", &sound_response_extra_sounds_struct_definition, _field_id_masd }, // structure_version:1
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 16),
		{ _field_block, "sound permutations", &sound_response_definition_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$311)
	{
		"game start",
		"hill controlled",
		"hill contested",
		"hill tick",
		"hill move",
		"hill controlled team",
		"hill contested team"
	};
	STRING_LIST(unnamed_enum$311, unnamed_enum$311_strings, _countof(unnamed_enum$311_strings));

	TAG_STRUCT(
		game_engine_oddball_event_block_struct_definition,
		"game_engine_oddball_event_block",
		"game_engine_oddball_event_block_struct_definition",
		"s_multiplayer_event_response_definition$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$303 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "event", &unnamed_enum$310 },
		{ _field_short_enum, "audience", &unnamed_enum$305 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_string_id, "display string" },
		{ _field_short_enum, "required field", &unnamed_enum$306 },
		{ _field_short_enum, "excluded audience", &unnamed_enum$306 },
		{ _field_string_id, "primary string" },
		{ _field_long_integer, "primary string duration", nullptr, "seconds" },
		{ _field_string_id, "plural display string" },
		FIELD_PAD("value", 28),
		{ _field_real, "sound delay (announcer only)" },
		{ _field_word_flags, "sound flags", &unnamed_enum$307 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_struct, "extra sounds", &sound_response_extra_sounds_struct_definition, _field_id_masd }, // structure_version:1
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 16),
		{ _field_block, "sound permutations", &sound_response_definition_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$310)
	{
		"game start",
		"ball spawned",
		"ball picked up",
		"ball dropped",
		"ball reset",
		"ball tick"
	};
	STRING_LIST(unnamed_enum$310, unnamed_enum$310_strings, _countof(unnamed_enum$310_strings));

	TAG_STRUCT(
		game_engine_slayer_event_block_struct_definition,
		"game_engine_slayer_event_block",
		"game_engine_slayer_event_block_struct_definition",
		"s_multiplayer_event_response_definition$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$303 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "event", &unnamed_enum$308 },
		{ _field_short_enum, "audience", &unnamed_enum$305 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_string_id, "display string" },
		{ _field_short_enum, "required field", &unnamed_enum$306 },
		{ _field_short_enum, "excluded audience", &unnamed_enum$306 },
		{ _field_string_id, "primary string" },
		{ _field_long_integer, "primary string duration", nullptr, "seconds" },
		{ _field_string_id, "plural display string" },
		FIELD_PAD("value", 28),
		{ _field_real, "sound delay (announcer only)" },
		{ _field_word_flags, "sound flags", &unnamed_enum$307 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_struct, "extra sounds", &sound_response_extra_sounds_struct_definition, _field_id_masd }, // structure_version:1
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 16),
		{ _field_block, "sound permutations", &sound_response_definition_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$308)
	{
		"game start",
		"new target"
	};
	STRING_LIST(unnamed_enum$308, unnamed_enum$308_strings, _countof(unnamed_enum$308_strings));

	TAG_STRUCT(
		game_engine_status_response_block_struct_definition,
		"game_engine_status_response_block",
		"game_engine_status_response_block_struct_definition",
		"s_game_engine_status_response",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$327 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "state", &unnamed_enum$328 },
		FIELD_PAD("value", 2),
		{ _field_string_id, "ffa message" },
		{ _field_string_id, "team message" },
		{ _field_tag_reference, "value", &_reference$4 },
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$327)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$327, unnamed_enum$327_strings, _countof(unnamed_enum$327_strings));

	STRINGS(unnamed_enum$328)
	{
		"waiting for space to clear",
		"observing",
		"respawning soon",
		"sitting out",
		"out of lives",
		"playing (winning)",
		"playing (tied)",
		"playing (losing)",
		"game over (won)",
		"game over (tied)",
		"game over (lost)",
		"you have flag",
		"enemy has flag",
		"flag not home",
		"carrying oddball",
		"you are juggy",
		"you control hill",
		"switching sides soon",
		"player recently started",
		"you have bomb",
		"flag contested",
		"bomb contested",
		"limited lives left (multiple)",
		"limited lives left (single)",
		"limited lives left (final)",
		"playing (winning, unlimited)",
		"playing (tied, unlimited)",
		"playing (losing, unlimited)"
	};
	STRING_LIST(unnamed_enum$328, unnamed_enum$328_strings, _countof(unnamed_enum$328_strings));

	TAG_REFERENCE(_reference$4, INVALID_TAG);

	TAG_STRUCT(
		game_engine_territories_event_block_struct_definition,
		"game_engine_territories_event_block",
		"game_engine_territories_event_block_struct_definition",
		"s_multiplayer_event_response_definition$8",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$303 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "event", &unnamed_enum$325 },
		{ _field_short_enum, "audience", &unnamed_enum$305 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_string_id, "display string" },
		{ _field_short_enum, "required field", &unnamed_enum$306 },
		{ _field_short_enum, "excluded audience", &unnamed_enum$306 },
		{ _field_string_id, "primary string" },
		{ _field_long_integer, "primary string duration", nullptr, "seconds" },
		{ _field_string_id, "plural display string" },
		FIELD_PAD("value", 28),
		{ _field_real, "sound delay (announcer only)" },
		{ _field_word_flags, "sound flags", &unnamed_enum$307 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_struct, "extra sounds", &sound_response_extra_sounds_struct_definition, _field_id_masd }, // structure_version:1
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 16),
		{ _field_block, "sound permutations", &sound_response_definition_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$325)
	{
		"game start",
		"territory control gained",
		"territory contest lost",
		"all territories cntrld",
		"team territory ctrl gained",
		"team territory ctrl lost",
		"team all territories cntrld"
	};
	STRING_LIST(unnamed_enum$325, unnamed_enum$325_strings, _countof(unnamed_enum$325_strings));

	TAG_STRUCT(
		game_globals_damage_block_struct_definition,
		"game_globals_damage_block",
		"game_globals_damage_block_struct_definition",
		"s_damage_globals_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "damage groups", &damage_group_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		game_portal_to_portal_mapping_block_struct_definition,
		"game_portal_to_portal_mapping_block",
		"game_portal_to_portal_mapping_block_struct_definition",
		"s_short$7",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "portal index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		garbage_block_struct_definition,
		"garbage_block",
		"garbage_block_struct_definition",
		"s_garbage_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ ITEM $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$197 },
		{ _field_short_integer, "OLD message index" },
		{ _field_short_integer, "sort order" },
		{ _field_real, "multiplayer on-ground scale" },
		{ _field_real, "campaign on-ground scale" },
		FIELD_EXPLANATION("NEW hud messages", "everything you need to display stuff"),
		{ _field_string_id, "pickup message" },
		{ _field_string_id, "swap message" },
		{ _field_string_id, "pickup or dual msg" },
		{ _field_string_id, "swap or dual msg" },
		{ _field_string_id, "dual-only msg" },
		{ _field_string_id, "picked up msg" },
		{ _field_string_id, "singluar quantity msg" },
		{ _field_string_id, "plural quantity msg" },
		{ _field_string_id, "switch-to msg" },
		{ _field_string_id, "switch-to from ai msg" },
		FIELD_USELESS_PAD("value", 148),
		{ _field_tag_reference, "UNUSED", &material_effects_group_reference },
		{ _field_tag_reference, "collision sound", &sound_group_reference },
		{ _field_block, "predicted bitmaps", &predicted_bitmaps_block },
		FIELD_USELESS_PAD("value", 92),
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_reference },
		{ _field_real_bounds, "detonation delay", nullptr, "seconds" },
		{ _field_tag_reference, "detonating effect", &effect_group_reference },
		{ _field_tag_reference, "detonation effect", &effect_group_reference },
		FIELD_PAD("value", 168),
		{ _field_terminator }
	};

	TAG_STRUCT(
		gear_block_struct_definition,
		"gear_block",
		"gear_block_struct_definition",
		"s_vehicle_gear",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("loaded torque", nullptr),
		{ _field_struct, "loaded torque curve", &torque_curve_struct_struct_definition, _field_id_trcv },
		FIELD_EXPLANATION("cruising torque", nullptr),
		{ _field_struct, "cruising torque curve", &torque_curve_struct_struct_definition, _field_id_trcv },
		FIELD_EXPLANATION("gearing", nullptr),
		{ _field_real, "min time to upshift", "seconds" },
		{ _field_real, "engine up-shift scale", "0-1" },
		{ _field_real, "gear ratio" },
		{ _field_real, "min time to downshift", "seconds" },
		{ _field_real, "engine down-shift scale", "0-1" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		geometry_section_fieldset_new_struct_definition,
		"geometry_section_fieldset_new",
		"geometry_section_fieldset_new_struct_definition",
		"s_geometry_section",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 9 },
		{ _field_block, "parts", &global_geometry_part_block_new_block },
		{ _field_block, "subparts", &global_subparts_block },
		{ _field_block, "visibility bounds", &global_visibility_bounds_block },
		{ _field_block, "raw vertices", &global_geometry_section_raw_vertex_block },
		{ _field_block, "strip indices", &global_geometry_section_strip_index_block },
		{ _field_data, "visibility mopp code", &global_section_mopp_code_data },
		{ _field_block, "mopp reorder table", &global_geometry_section_strip_index_block },
		{ _field_block, "vertex buffers", &global_geometry_section_vertex_buffer_block },
		{ _field_pointer, "index_buffer", _field_id_zero_data },
		
		{ _struct_version_mode_equal, 0, 7 },
		{ _field_block, "raw vertices", &global_geometry_section_raw_vertex_block },
		{ _field_array, "old vertex buffers", &unnamed_array$29 },
		{ _field_vertex_buffer, "transparent position" },
		{ _field_block, "vertex buffers", &global_geometry_section_vertex_buffer_block },
		{ _field_block, "strip indices", &global_geometry_section_strip_index_block },
		{ _field_block, "parts", &global_geometry_part_block },
		FIELD_PAD("value", 96),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		gloal_wind_primitives_block_struct_definition,
		"gloal_wind_primitives_block",
		"gloal_wind_primitives_block_struct_definition",
		"s_wind_primitive",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_vector_3d, "position" },
		{ _field_real, "radius" },
		{ _field_real, "strength" },
		{ _field_short_enum, "wind primitive type", &unnamed_enum$534 },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$534)
	{
		"vortex",
		"gust",
		"implosion",
		"explosion"
	};
	STRING_LIST(unnamed_enum$534, unnamed_enum$534_strings, _countof(unnamed_enum$534_strings));

	VERSIONED_TAG_STRUCT(
		global_damage_info_block_struct_definition,
		"global_damage_info_block",
		"global_damage_info_block_struct_definition",
		"s_model_damage_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 39 },
		{ _field_long_flags, "flags", &unnamed_enum$227 },
		{ _field_string_id, "global indirect material name", "absorbes AOE or child damage" },
		{ _field_short_block_index_custom_search, "indirect damage section", "absorbes AOE or child damage" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		{ _field_char_enum, "collision damage reporting type", &unnamed_enum$228 },
		{ _field_char_enum, "response damage reporting type", &unnamed_enum$228 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		FIELD_EXPLANATION("body", nullptr),
		{ _field_real, "maximum vitality" },
		{ _field_real, "minimum stun damage", "the minimum damage required to stun this object's health" },
		{ _field_real, "stun time", "the length of time the health stay stunned (do not recharge) after taking damage", "seconds" },
		{ _field_real, "recharge time", "the length of time it would take for the shields to fully recharge after being completely depleted", "seconds" },
		{ _field_real_fraction, "recharge fraction", "0 defaults to 1 - to what maximum level the body health will be allowed to recharge" },
		FIELD_PAD("value", 64),
		FIELD_EXPLANATION("shield", nullptr),
		{ _field_tag_reference, "shield damaged first person shader", &shader_group_reference },
		{ _field_tag_reference, "shield damaged shader", &shader_group_reference },
		{ _field_real, "maximum shield vitality", "the default initial and maximum shield vitality of this object" },
		{ _field_string_id, "global shield material name", _field_id_sted },
		{ _field_real, "minimum stun damage", "the minimum damage required to stun this object's shields" },
		{ _field_real, "stun time", "the length of time the shields stay stunned (do not recharge) after taking damage", "seconds" },
		{ _field_real, "recharge time", "the length of time it would take for the shields to fully recharge after being completely depleted", "seconds" },
		{ _field_real, "shield damaged threshold" },
		{ _field_tag_reference, "shield damaged effect", &effect_group_reference },
		{ _field_tag_reference, "shield depleted effect", &effect_group_reference },
		{ _field_tag_reference, "shield recharging effect", &effect_group_reference },
		{ _field_block, "damage sections", &global_damage_section_block },
		{ _field_block, "nodes", &global_damage_nodes_block },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 4),
		{ _field_block, "damage seats", &damage_seat_info_block },
		{ _field_block, "damage constraints", &damage_constraint_info_block },
		FIELD_EXPLANATION("overshield", nullptr),
		{ _field_tag_reference, "overshield first person shader", &shader_group_reference },
		{ _field_tag_reference, "overshield shader", &shader_group_reference },
		
		{ _struct_version_mode_equal, 0, 27 },
		{ _field_long_flags, "flags", &unnamed_enum$227 },
		{ _field_string_id, "global indirect material name", "absorbes AOE or child damage" },
		{ _field_real, "maximum vitality" },
		{ _field_real, "body system shock", "anything that kills us (body depleted) doing more than this amount of damage also destroys us" },
		{ _field_real_fraction, "friendly damage resistance", "the fraction of damage caused by friendly units ignored by this object (zero means full damage)", nullptr, "[0,1]" },
		{ _field_tag_reference, "localized damage effect", &effect_group_reference },
		{ _field_real, "area damage effect threshold", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "area damage effect", &effect_group_reference },
		{ _field_real, "body damaged threshold", "when passing this vitality the 'body damaged' effect, below, is created" },
		{ _field_tag_reference, "body damaged effect", &effect_group_reference },
		{ _field_tag_reference, "body depleted effect", &effect_group_reference },
		{ _field_real, "body destroyed threshold", "when passing this vitality (usually negative) the object is deleted" },
		{ _field_tag_reference, "body destroyed effect", &effect_group_reference },
		{ _field_real, "maximum shield vitality", "the default initial and maximum shield vitality of this object" },
		{ _field_string_id, "global shield material name", _field_id_sted },
		{ _field_real, "minimum stun damage", "the minimum damage required to stun this object's shields" },
		{ _field_real, "stun time", "the length of time the shields stay stunned (do not recharge) after taking damage", "seconds" },
		{ _field_real, "recharge time", "the length of time it would take for the shields to fully recharge after being completely depleted", "seconds" },
		{ _field_real, "shield damaged threshold" },
		{ _field_tag_reference, "shield damaged effect", &effect_group_reference },
		{ _field_tag_reference, "shield depleted effect", &effect_group_reference },
		{ _field_tag_reference, "shield recharging effect", &effect_group_reference },
		{ _field_block, "damage sections", &global_damage_section_block },
		{ _field_block, "nodes", &global_damage_nodes_block },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$227)
	{
		"takes shield damage for children",
		"takes body damage for children",
		"always shields friendly damage",
		"passes area damage to children",
		"parent never takes body damage for us",
		"only damaged by explosives",
		"parent never takes shield damage for us",
		"cannot die from damage",
		"passes attached damage to riders"
	};
	STRING_LIST(unnamed_enum$227, unnamed_enum$227_strings, _countof(unnamed_enum$227_strings));

	STRINGS(unnamed_enum$228)
	{
		"teh guardians!!1!!1!",
		"falling damage",
		"generic collision damage",
		"generic melee damage",
		"generic explosion",
		"magnum pistol",
		"plasma pistol",
		"needler",
		"smg",
		"plasma rifle",
		"battle rifle",
		"carbine",
		"shotgun",
		"sniper rifle",
		"beam rifle",
		"rocket launcher",
		"flak cannon",
		"brute shot",
		"disintegrator",
		"brute plasma rifle",
		"energy sword",
		"frag grenade",
		"plasma grenade",
		"flag melee damage",
		"bomb melee damage",
		"bomb explosion damage",
		"ball melee damage",
		"human turret",
		"plasma turret",
		"banshee",
		"ghost",
		"mongoose",
		"scorpion",
		"spectre driver",
		"spectre gunner",
		"warthog driver",
		"warthog gunner",
		"wraith",
		"tank",
		"sentinel beam",
		"sentinel rpg",
		"teleporter",
		"warthog gunner gauss",
		"warthog gunner rocket"
	};
	STRING_LIST(unnamed_enum$228, unnamed_enum$228_strings, _countof(unnamed_enum$228_strings));

	TAG_STRUCT(
		global_damage_nodes_block_struct_definition,
		"global_damage_nodes_block",
		"global_damage_nodes_block_struct_definition",
		"s_damage_node",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 12),
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_damage_section_block_struct_definition,
		"global_damage_section_block",
		"global_damage_section_block_struct_definition",
		"s_model_damage_section",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		FIELD_EXPLANATION("damage section flags", "* absorbs body damage: damage to this section does not count against body vitality\n* headshottable: takes extra headshot damage when shot\n* ignores shields: damage to this section bypasses shields"),
		{ _field_long_flags, "flags", &unnamed_enum$229 },
		{ _field_real_fraction, "vitality percentage", "percentage of total object vitality", nullptr, "[0.1]" },
		{ _field_block, "instant responses", &instantaneous_damage_repsonse_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "value", &g_null_block },
		{ _field_real, "stun time", nullptr, "seconds" },
		{ _field_real, "recharge time", nullptr, "seconds" },
		FIELD_PAD("value", 4),
		{ _field_string_id, "resurrection restored region name" },
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$229)
	{
		"absorbs body damage",
		"takes full dmg when object dies",
		"cannot die with riders",
		"takes full dmg when obj dstryd",
		"restored on ressurection",
		"unused",
		"unused",
		"heatshottable",
		"ignores shields"
	};
	STRING_LIST(unnamed_enum$229, unnamed_enum$229_strings, _countof(unnamed_enum$229_strings));

	TAG_STRUCT(
		global_detail_object_block_struct_definition,
		"global_detail_object_block",
		"global_detail_object_block_struct_definition",
		"s_detail_object",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "value" },
		{ _field_char_integer, "value" },
		{ _field_char_integer, "value" },
		{ _field_char_integer, "value" },
		{ _field_short_integer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_detail_object_cells_block_struct_definition,
		"global_detail_object_cells_block",
		"global_detail_object_cells_block_struct_definition",
		"s_detail_object_cell_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "value" },
		{ _field_short_integer, "value" },
		{ _field_short_integer, "value" },
		{ _field_short_integer, "value" },
		{ _field_long_integer, "value" },
		{ _field_long_integer, "value" },
		{ _field_long_integer, "value" },
		FIELD_PAD("value", 12),
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_detail_object_counts_block_struct_definition,
		"global_detail_object_counts_block",
		"global_detail_object_counts_block_struct_definition",
		"s_detail_object_count",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_error_report_categories_block_struct_definition,
		"global_error_report_categories_block",
		"global_error_report_categories_block_struct_definition",
		"s_error_report_category",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_string, "name" },
		{ _field_short_enum, "report type", &unnamed_enum$158 },
		{ _field_word_flags, "flags", &unnamed_enum$159 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 404),
		{ _field_block, "reports", &error_reports_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_geometry_block_info_struct_struct_definition,
		"global_geometry_block_info_struct",
		"global_geometry_block_info_struct_struct_definition",
		"s_geometry_block_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("BLOCK INFO", nullptr),
		{ _field_long_integer, "block offset" },
		{ _field_long_integer, "block size" },
		{ _field_long_integer, "section data size" },
		{ _field_long_integer, "resource data size" },
		{ _field_block, "resources", &global_geometry_block_resource_block },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "owner tag section offset" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_geometry_block_resource_block_struct_definition,
		"global_geometry_block_resource_block",
		"global_geometry_block_resource_block_struct_definition",
		"s_geometry_block_resource",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_enum, "type", &unnamed_enum$30 },
		FIELD_PAD("value", 3),
		{ _field_short_integer, "primary locator" },
		{ _field_short_integer, "secondary locator" },
		{ _field_long_integer, "resource data size" },
		{ _field_long_integer, "resource data offset" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$30)
	{
		"tag block",
		"tag data",
		"vertex buffer"
	};
	STRING_LIST(unnamed_enum$30, unnamed_enum$30_strings, _countof(unnamed_enum$30_strings));

	TAG_STRUCT(
		global_geometry_compression_info_block_struct_definition,
		"global_geometry_compression_info_block",
		"global_geometry_compression_info_block_struct_definition",
		"s_geometry_compression_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_bounds, "position bounds x" },
		{ _field_real_bounds, "position bounds y" },
		{ _field_real_bounds, "position bounds z" },
		{ _field_real_bounds, "texcoord bounds x" },
		{ _field_real_bounds, "texcoord bounds y" },
		{ _field_real_bounds, "secondary texcoord bounds x" },
		{ _field_real_bounds, "secondary texcoord bounds y" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_geometry_explicit_edge_block_struct_definition,
		"global_geometry_explicit_edge_block",
		"global_geometry_explicit_edge_block_struct_definition",
		"s_geometry_explicit_edge",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_array, "vertex indices", &unnamed_array$38 },
		{ _field_array, "triangle indices", &unnamed_array$39 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_geometry_isq_info_struct_struct_definition,
		"global_geometry_isq_info_struct",
		"global_geometry_isq_info_struct_struct_definition",
		"s_geometry_isq_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$320 },
		FIELD_PAD("value", 2),
		{ _field_block, "raw planes", &global_geometry_plane_block },
		{ _field_data, "runtime plane data", &global_geometry_runtime_plane_data_definition },
		{ _field_block, "rigid plane groups", &global_geometry_rigid_plane_group_block },
		FIELD_PAD("value", 32),
		{ _field_block, "explicit edges", &global_geometry_explicit_edge_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$320)
	{
		"compressed planes",
		"swizzled planes"
	};
	STRING_LIST(unnamed_enum$320, unnamed_enum$320_strings, _countof(unnamed_enum$320_strings));

	TAG_STRUCT(
		global_geometry_material_block_struct_definition,
		"global_geometry_material_block",
		"global_geometry_material_block_struct_definition",
		"s_geometry_material",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "old shader", &shader_group_reference },
		{ _field_tag_reference, "shader", &shader_group_reference },
		{ _field_block, "properties", &global_geometry_material_property_block },
		FIELD_PAD("value", 4),
		{ _field_char_integer, "breakable surface index" },
		FIELD_PAD("value", 3),
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_geometry_material_property_block_struct_definition,
		"global_geometry_material_property_block",
		"global_geometry_material_property_block_struct_definition",
		"s_geometry_material_property",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$322 },
		{ _field_short_integer, "int-value" },
		{ _field_real, "real-value" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$322)
	{
		"lightmap resolution",
		"lightmap power",
		"lightmap half life",
		"lightmap diffuse scale"
	};
	STRING_LIST(unnamed_enum$322, unnamed_enum$322_strings, _countof(unnamed_enum$322_strings));

	TAG_STRUCT(
		global_geometry_part_block_new_struct_definition,
		"global_geometry_part_block_new",
		"global_geometry_part_block_new_struct_definition",
		"s_geometry_part",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$290 },
		{ _field_word_flags, "flags", &unnamed_enum$291 },
		{ _field_short_block_index, "material" },
		{ _field_short_integer, "strip start index" },
		{ _field_short_integer, "strip length" },
		{ _field_short_integer, "first subpart index" },
		{ _field_short_integer, "subpart count" },
		{ _field_char_integer, "max nodes/vertex" },
		{ _field_char_integer, "contributing compound node count" },
		FIELD_EXPLANATION("CENTROID", nullptr),
		{ _field_real_point_3d, "position" },
		{ _field_array, "node indices", &unnamed_array$24 },
		{ _field_array, "node weights", &unnamed_array$25 },
		{ _field_real, "lod mipmap magic number" },
		FIELD_SKIP("value", 24),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$290)
	{
		"not drawn",
		"opaque shadow-only",
		"opaque shadow-casting",
		"opaque non-shadowing",
		"transparent",
		"lightmap only"
	};
	STRING_LIST(unnamed_enum$290, unnamed_enum$290_strings, _countof(unnamed_enum$290_strings));

	STRINGS(unnamed_enum$291)
	{
		"decalable",
		"new part types",
		"dislikes photons",
		"override triangle list",
		"ignored by lightmapper"
	};
	STRING_LIST(unnamed_enum$291, unnamed_enum$291_strings, _countof(unnamed_enum$291_strings));

	TAG_STRUCT(
		global_geometry_part_block_struct_definition,
		"global_geometry_part_block",
		"global_geometry_part_block_struct_definition",
		"s_geometry_part_old",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$290 },
		{ _field_word_flags, "flags", &unnamed_enum$291 },
		{ _field_short_block_index, "material" },
		{ _field_short_enum, "geometry subclassification", &unnamed_enum$292 },
		{ _field_short_integer, "strip start index" },
		{ _field_short_integer, "strip length" },
		{ _field_short_integer, "first strip segment index" },
		{ _field_short_integer, "strip segment count" },
		{ _field_short_integer, "first vertex index" },
		{ _field_short_integer, "vertex count" },
		{ _field_short_integer, "first triangle index" },
		{ _field_short_integer, "triangle count" },
		{ _field_char_integer, "max nodes/vertex" },
		{ _field_char_integer, "contributing compound node count" },
		{ _field_word_flags, "vertex usage flags", &unnamed_enum$293 },
		FIELD_PAD("value", 12),
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 3),
		FIELD_EXPLANATION("CENTROID", nullptr),
		{ _field_real_point_3d, "position" },
		{ _field_array, "node indices", &unnamed_array$30 },
		{ _field_array, "node weights", &unnamed_array$31 },
		{ _field_real, "lod mipmap magic number" },
		FIELD_SKIP("value", 24),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$292)
	{
		"default (opaque)",
		"faceted (opaque)",
		"simple (transparent)",
		"normal (transparent)",
		"tangent-space (transparent)"
	};
	STRING_LIST(unnamed_enum$292, unnamed_enum$292_strings, _countof(unnamed_enum$292_strings));

	STRINGS(unnamed_enum$293)
	{
		"position software transformed",
		"texcoord",
		"normal",
		"binormal/tangent",
		"anisotropic binormal",
		"secondary texcoord"
	};
	STRING_LIST(unnamed_enum$293, unnamed_enum$293_strings, _countof(unnamed_enum$293_strings));

	TAG_STRUCT(
		global_geometry_plane_block_struct_definition,
		"global_geometry_plane_block",
		"global_geometry_plane_block_struct_definition",
		"s_real_plane3d$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_plane_3d, "plane" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_geometry_point_data_index_block_struct_definition,
		"global_geometry_point_data_index_block",
		"global_geometry_point_data_index_block_struct_definition",
		"s_word$6",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_geometry_point_data_struct_struct_definition,
		"global_geometry_point_data_struct",
		"global_geometry_point_data_struct_struct_definition",
		"s_geometry_point_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "raw points", &global_geometry_raw_point_block },
		{ _field_data, "runtime point data", &global_geometry_runtime_point_data_definition },
		{ _field_block, "rigid point groups", &global_geometry_rigid_point_group_block },
		{ _field_block, "vertex-point indices", &global_geometry_point_data_index_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_geometry_raw_point_block_struct_definition,
		"global_geometry_raw_point_block",
		"global_geometry_raw_point_block_struct_definition",
		"s_geometry_point",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_array, "node indices (OLD)", &unnamed_array$35 },
		{ _field_array, "node weights", &unnamed_array$36 },
		{ _field_array, "node indices (NEW)", &unnamed_array$37 },
		{ _field_long_integer, "use new node indices" },
		{ _field_long_integer, "adjusted compound node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_geometry_rigid_plane_group_block_struct_definition,
		"global_geometry_rigid_plane_group_block",
		"global_geometry_rigid_plane_group_block_struct_definition",
		"s_geometry_rigid_plane_group",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "rigid node index" },
		{ _field_char_integer, "part index" },
		{ _field_short_integer, "triangle count" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_geometry_rigid_point_group_block_struct_definition,
		"global_geometry_rigid_point_group_block",
		"global_geometry_rigid_point_group_block_struct_definition",
		"s_geometry_rigid_point_group",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "rigid node index" },
		{ _field_char_integer, "nodes per point" },
		{ _field_short_integer, "point count" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_geometry_section_info_struct_struct_definition,
		"global_geometry_section_info_struct",
		"global_geometry_section_info_struct_struct_definition",
		"s_geometry_section_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("SECTION INFO", nullptr),
		{ _field_short_integer, "total vertex count" },
		{ _field_short_integer, "total triangle count" },
		{ _field_short_integer, "total part count" },
		{ _field_short_integer, "shadow-casting triangle count" },
		{ _field_short_integer, "shadow-casting part count" },
		{ _field_short_integer, "opaque point count" },
		{ _field_short_integer, "opaque vertex count" },
		{ _field_short_integer, "opaque part count" },
		{ _field_char_integer, "opaque max nodes/vertex" },
		{ _field_char_integer, "transparent max nodes/vertex" },
		{ _field_short_integer, "shadow-casting rigid triangle count" },
		{ _field_short_enum, "geometry classification", &unnamed_enum$287 },
		{ _field_word_flags, "geometry compression flags", &unnamed_enum$288 },
		{ _field_block, "value", &global_geometry_compression_info_block },
		{ _field_char_integer, "hardware node count" },
		{ _field_char_integer, "node map size" },
		{ _field_short_integer, "software plane count" },
		{ _field_short_integer, "total subpart_cont" },
		{ _field_word_flags, "section lighting flags", &unnamed_enum$289 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$287)
	{
		"worldspace",
		"rigid",
		"rigid boned",
		"skinned",
		"unsupported (reimport)"
	};
	STRING_LIST(unnamed_enum$287, unnamed_enum$287_strings, _countof(unnamed_enum$287_strings));

	STRINGS(unnamed_enum$288)
	{
		"compressed position",
		"compressed texcoord",
		"compressed secondary texcoord"
	};
	STRING_LIST(unnamed_enum$288, unnamed_enum$288_strings, _countof(unnamed_enum$288_strings));

	STRINGS(unnamed_enum$289)
	{
		"has lm texcoords",
		"has lm inc. rad.",
		"has lm colors",
		"has lm prt"
	};
	STRING_LIST(unnamed_enum$289, unnamed_enum$289_strings, _countof(unnamed_enum$289_strings));

	TAG_STRUCT(
		global_geometry_section_raw_vertex_block_struct_definition,
		"global_geometry_section_raw_vertex_block",
		"global_geometry_section_raw_vertex_block_struct_definition",
		"s_geometry_vertex",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_array, "node indices (OLD)", &unnamed_array$26 },
		{ _field_array, "node weights", &unnamed_array$27 },
		{ _field_array, "node indices (NEW)", &unnamed_array$28 },
		{ _field_long_integer, "use new node indices" },
		{ _field_long_integer, "adjusted compound node index" },
		{ _field_real_point_2d, "texcoord" },
		{ _field_real_vector_3d, "normal" },
		{ _field_real_vector_3d, "binormal" },
		{ _field_real_vector_3d, "tangent" },
		{ _field_real_vector_3d, "anisotropic binormal" },
		{ _field_real_point_2d, "secondary texcoord" },
		{ _field_real_rgb_color, "primary lightmap color" },
		{ _field_real_point_2d, "primary lightmap texcoord" },
		{ _field_real_vector_3d, "primary lightmap incident direction" },
		FIELD_PAD("value", 12),
		FIELD_PAD("value", 8),
		FIELD_PAD("value", 12),
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_geometry_section_strip_index_block_struct_definition,
		"global_geometry_section_strip_index_block",
		"global_geometry_section_strip_index_block_struct_definition",
		"s_word$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_geometry_section_vertex_buffer_block_struct_definition,
		"global_geometry_section_vertex_buffer_block",
		"global_geometry_section_vertex_buffer_block_struct_definition",
		"s_rasterizer_vertex_buffer",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_vertex_buffer, "vertex buffer" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_hud_multitexture_overlay_definition_struct_definition,
		"global_hud_multitexture_overlay_definition",
		"global_hud_multitexture_overlay_definition_struct_definition",
		"s_multitexture_overlay_hud_element_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		{ _field_short_integer, "type" },
		{ _field_short_enum, "framebuffer blend func", &unnamed_enum$169 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 32),
		FIELD_EXPLANATION("anchors", "where you want the origin of the texture.\n*\"texture\" uses the texture coordinates supplied\n*\"screen\" uses the origin of the screen as the origin of the texture"),
		{ _field_short_enum, "primary anchor", &unnamed_enum$209 },
		{ _field_short_enum, "secondary anchor", &unnamed_enum$209 },
		{ _field_short_enum, "tertiary anchor", &unnamed_enum$209 },
		FIELD_EXPLANATION("blending function", "how to blend the textures together"),
		{ _field_short_enum, "0 to 1 blend func", &unnamed_enum$210 },
		{ _field_short_enum, "1 to 2 blend func", &unnamed_enum$210 },
		FIELD_PAD("value", 2),
		FIELD_EXPLANATION("map scales", "how much to scale the textures"),
		{ _field_real_point_2d, "primary scale" },
		{ _field_real_point_2d, "secondary scale" },
		{ _field_real_point_2d, "tertiary scale" },
		FIELD_EXPLANATION("map offsets", "how much to offset the origin of the texture"),
		{ _field_real_point_2d, "primary offset" },
		{ _field_real_point_2d, "secondary offset" },
		{ _field_real_point_2d, "tertiary offset" },
		FIELD_EXPLANATION("map", "which maps to use"),
		{ _field_tag_reference, "primary", &bitmap_group_reference },
		{ _field_tag_reference, "secondary", &bitmap_group_reference },
		{ _field_tag_reference, "tertiary", &bitmap_group_reference },
		{ _field_short_enum, "primary wrap mode", &unnamed_enum$211 },
		{ _field_short_enum, "secondary wrap mode", &unnamed_enum$211 },
		{ _field_short_enum, "tertiary wrap mode", &unnamed_enum$211 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 184),
		{ _field_block, "effectors", &global_hud_multitexture_overlay_effector_definition_block },
		FIELD_PAD("value", 128),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$209)
	{
		"texture",
		"screen"
	};
	STRING_LIST(unnamed_enum$209, unnamed_enum$209_strings, _countof(unnamed_enum$209_strings));

	STRINGS(unnamed_enum$210)
	{
		"add",
		"subtract",
		"multiply",
		"multiply2x",
		"dot"
	};
	STRING_LIST(unnamed_enum$210, unnamed_enum$210_strings, _countof(unnamed_enum$210_strings));

	STRINGS(unnamed_enum$211)
	{
		"clamp",
		"wrap"
	};
	STRING_LIST(unnamed_enum$211, unnamed_enum$211_strings, _countof(unnamed_enum$211_strings));

	TAG_STRUCT(
		global_hud_multitexture_overlay_effector_definition_struct_definition,
		"global_hud_multitexture_overlay_effector_definition",
		"global_hud_multitexture_overlay_effector_definition_struct_definition",
		"s_multitexture_overlay_hud_element_effector_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 64),
		FIELD_EXPLANATION("source/destination", "These describe the relationship that causes the effect.\n* destination type is the type of variable you want to be effected\n* destination tells which texture map (or geometry offset) to apply it to\n* source says which value to look at when computing the effect"),
		{ _field_short_enum, "destination type", &unnamed_enum$212 },
		{ _field_short_enum, "destination", &unnamed_enum$213 },
		{ _field_short_enum, "source", &unnamed_enum$214 },
		FIELD_PAD("value", 2),
		FIELD_EXPLANATION("in/out bounds", "When the source is at the lower inbound, the destination ends up the lower outbound and vice-versa applies for the upper values."),
		{ _field_real_bounds, "in bounds", nullptr, "source units" },
		{ _field_real_bounds, "out bounds", nullptr, "pixels" },
		FIELD_PAD("value", 64),
		FIELD_EXPLANATION("tint color bounds", "If destination is tint, these values are used instead of the out bounds."),
		{ _field_real_rgb_color, "tint color lower bound" },
		{ _field_real_rgb_color, "tint color upper bound" },
		FIELD_EXPLANATION("periodic functions", "If you use a periodic function as the source, this lets you tweak it."),
		{ _field_short_enum, "periodic function", &unnamed_enum$173 },
		FIELD_PAD("value", 2),
		{ _field_real, "function period", nullptr, "seconds" },
		{ _field_real, "function phase", nullptr, "seconds" },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$212)
	{
		"tint [0,1]",
		"horizontal offset",
		"vertical offset",
		"fade [0,1]"
	};
	STRING_LIST(unnamed_enum$212, unnamed_enum$212_strings, _countof(unnamed_enum$212_strings));

	STRINGS(unnamed_enum$213)
	{
		"geometry offset",
		"primary map",
		"secondary map",
		"tertiary map"
	};
	STRING_LIST(unnamed_enum$213, unnamed_enum$213_strings, _countof(unnamed_enum$213_strings));

	STRINGS(unnamed_enum$214)
	{
		"player pitch",
		"player pitch tangent",
		"player yaw",
		"weapon rounds (loaded)",
		"weapon rounds (inventory)",
		"weapon heat",
		"explicit (uses low bound)",
		"weapon zoom level"
	};
	STRING_LIST(unnamed_enum$214, unnamed_enum$214_strings, _countof(unnamed_enum$214_strings));

	TAG_STRUCT(
		global_hud_screen_effect_definition_struct_definition,
		"global_hud_screen_effect_definition",
		"global_hud_screen_effect_definition_struct_definition",
		"s_hud_screen_effect_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("Mask", "Mask bitmap overlay. Use either a 2D bitmap or an interface bitmap."),
		{ _field_word_flags, "flags", &unnamed_enum$560 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 16),
		{ _field_tag_reference, "mask (fullscreen)", &bitmap_group_reference },
		{ _field_tag_reference, "mask (splitscreen)", &bitmap_group_reference },
		FIELD_PAD("value", 8),
		FIELD_PAD("value", 20),
		FIELD_PAD("value", 24),
		FIELD_PAD("value", 8),
		FIELD_PAD("value", 24),
		FIELD_PAD("value", 20),
		FIELD_PAD("value", 24),
		FIELD_EXPLANATION("Screen effect (fullscreen)", nullptr),
		{ _field_long_flags, "screen effect flags", &unnamed_enum$561 },
		FIELD_PAD("value", 32),
		{ _field_tag_reference, "screen effect", &screen_effect_group_reference },
		FIELD_PAD("value", 32),
		FIELD_EXPLANATION("Screen effect (splitscreen)", nullptr),
		{ _field_long_flags, "screen effect flags", &unnamed_enum$561 },
		FIELD_PAD("value", 32),
		{ _field_tag_reference, "screen effect", &screen_effect_group_reference },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$560)
	{
		"only when zoomed",
		"mirror horizontally",
		"mirror vertically",
		"use new hotness"
	};
	STRING_LIST(unnamed_enum$560, unnamed_enum$560_strings, _countof(unnamed_enum$560_strings));

	STRINGS(unnamed_enum$561)
	{
		"only when zoomed"
	};
	STRING_LIST(unnamed_enum$561, unnamed_enum$561_strings, _countof(unnamed_enum$561_strings));

	TAG_REFERENCE(screen_effect_group_reference, SCREEN_EFFECT_TAG);

	TAG_STRUCT(
		global_leaf_connection_block_struct_definition,
		"global_leaf_connection_block",
		"global_leaf_connection_block_struct_definition",
		"s_leaf_connection",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "plane index" },
		{ _field_long_integer, "back leaf index" },
		{ _field_long_integer, "front leaf index" },
		{ _field_block, "vertices", &leaf_connection_vertex_block },
		{ _field_real, "area" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_map_leaf_block_struct_definition,
		"global_map_leaf_block",
		"global_map_leaf_block_struct_definition",
		"s_map_leaf",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "faces", &map_leaf_face_block },
		{ _field_block, "connection indices", &map_leaf_connection_index_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_new_hud_globals_constants_struct_struct_definition,
		"global_new_hud_globals_constants_struct",
		"global_new_hud_globals_constants_struct_struct_definition",
		"s_new_hud_globals_constants",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "primary message sound", &sound_group_sound_looping_group_reference$2 },
		{ _field_tag_reference, "secondary message sound", &sound_group_sound_looping_group_reference$2 },
		{ _field_string_id, "boot griefer string" },
		{ _field_string_id, "cannot boot griefer string" },
		{ _field_tag_reference, "training shader", &shader_group_reference },
		{ _field_tag_reference, "human training top right", &bitmap_group_reference },
		{ _field_tag_reference, "human training top center", &bitmap_group_reference },
		{ _field_tag_reference, "human training top left", &bitmap_group_reference },
		{ _field_tag_reference, "human training middle", &bitmap_group_reference },
		{ _field_tag_reference, "elite training top right", &bitmap_group_reference },
		{ _field_tag_reference, "elite training top center", &bitmap_group_reference },
		{ _field_tag_reference, "elite training top left", &bitmap_group_reference },
		{ _field_tag_reference, "elite training middle", &bitmap_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(sound_group_sound_looping_group_reference$2)
	{
		SOUND_TAG,
		SOUND_LOOPING_TAG,
		INVALID_TAG
	};

	TAG_STRUCT(
		global_new_hud_globals_struct_struct_definition,
		"global_new_hud_globals_struct",
		"global_new_hud_globals_struct_struct_definition",
		"s_new_hud_globals",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "hud text", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "dashlights", &hud_dashlights_block },
		{ _field_block, "waypoint arrows", &hud_waypoint_arrow_block$2 },
		{ _field_block, "waypoints", &hud_waypoint_block },
		{ _field_block, "hud sounds", &new_hud_sound_block },
		{ _field_block, "player training data", &player_training_entry_data_block },
		{ _field_struct, "constants", &global_new_hud_globals_constants_struct_struct_definition, _field_id_nhgs },
		{ _field_terminator }
	};

	TAG_REFERENCE(multilingual_unicode_string_list_group_reference, MULTILINGUAL_UNICODE_STRING_LIST_TAG);

	TAG_STRUCT(
		global_particle_system_lite_block_struct_definition,
		"global_particle_system_lite_block",
		"global_particle_system_lite_block_struct_definition",
		"s_particle_system_lite",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "sprites", &bitmap_group_reference },
		{ _field_real, "view box width" },
		{ _field_real, "view box height" },
		{ _field_real, "view box depth" },
		{ _field_real, "exclusion radius" },
		{ _field_real, "max velocity" },
		{ _field_real, "min mass" },
		{ _field_real, "max mass" },
		{ _field_real, "min size" },
		{ _field_real, "max size" },
		{ _field_long_integer, "maximum number of particles" },
		{ _field_real_vector_3d, "initial velocity" },
		{ _field_real, "bitmap animation speed" },
		{ _field_struct, "geometry block info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		{ _field_block, "particle system data", &particle_system_lite_data_block },
		{ _field_short_enum, "type", &unnamed_enum$532 },
		FIELD_PAD("value", 2),
		{ _field_real, "mininum opacity" },
		{ _field_real, "maxinum opacity" },
		{ _field_real, "rain streak scale" },
		{ _field_real, "rain line width" },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$532)
	{
		"generic",
		"snow",
		"rain",
		"rain splash",
		"bugs",
		"sand storm",
		"debris",
		"bubbles"
	};
	STRING_LIST(unnamed_enum$532, unnamed_enum$532_strings, _countof(unnamed_enum$532_strings));

	TAG_STRUCT(
		global_scenario_load_parameters_block_struct_definition,
		"global_scenario_load_parameters_block",
		"global_scenario_load_parameters_block_struct_definition",
		"s_scenario_load_parameters",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("SCENARIO LOAD PARAMETERS", "strip-variant <variant-name>\nstrips a given variant out of the model tag\nstrip-dialogue\nstrips all the dialogue for this model i.e. cinematic only"),
		{ _field_tag_reference, "scenario", &scenario_group_reference },
		{ _field_data, "parameters", &parameters_text_definition },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(scenario_group_reference, SCENARIO_TAG, _tag_reference_flag_dont_resolve_in_editor);

	TAG_STRUCT(
		global_shader_parameter_block_struct_definition,
		"global_shader_parameter_block",
		"global_shader_parameter_block_struct_definition",
		"s_shader_parameter",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_short_enum, "type", &unnamed_enum$365 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_real, "const value" },
		{ _field_real_rgb_color, "const color" },
		{ _field_block, "animation properties", &shader_animation_property_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$365)
	{
		"bitmap",
		"value",
		"color",
		"switch"
	};
	STRING_LIST(unnamed_enum$365, unnamed_enum$365_strings, _countof(unnamed_enum$365_strings));

	TAG_STRUCT(
		global_subparts_block_struct_definition,
		"global_subparts_block",
		"global_subparts_block_struct_definition",
		"s_geometry_subpart",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "indices_start_index" },
		{ _field_short_integer, "indices_length" },
		{ _field_short_integer, "visibility_bounds_index" },
		{ _field_short_integer, "part index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_tag_import_info_block_struct_definition,
		"global_tag_import_info_block",
		"global_tag_import_info_block_struct_definition",
		"s_tag_import_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "build" },
		{ _field_long_string, "version" },
		{ _field_string, "import date" },
		{ _field_string, "culprit" },
		FIELD_PAD("value", 96),
		{ _field_string, "import time" },
		FIELD_PAD("value", 4),
		{ _field_block, "files", &tag_import_file_block },
		FIELD_PAD("value", 128),
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_ui_campaign_level_block_struct_definition,
		"global_ui_campaign_level_block",
		"global_ui_campaign_level_block_struct_definition",
		"s_campaign_ui_level_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "campaign id" },
		{ _field_long_integer, "map id" },
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		FIELD_SKIP("value", 576),
		FIELD_SKIP("value", 2304),
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_ui_multiplayer_level_block_struct_definition,
		"global_ui_multiplayer_level_block",
		"global_ui_multiplayer_level_block_struct_definition",
		"s_multiplayer_ui_level_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "map id" },
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		FIELD_SKIP("value", 576),
		FIELD_SKIP("value", 2304),
		{ _field_long_string, "path" },
		{ _field_long_integer, "sort order" },
		{ _field_byte_flags, "flags", &unnamed_enum$314 },
		FIELD_PAD("value", 3),
		{ _field_char_integer, "max teams none" },
		{ _field_char_integer, "max teams ctf" },
		{ _field_char_integer, "max teams slayer" },
		{ _field_char_integer, "max teams oddball" },
		{ _field_char_integer, "max teams king" },
		{ _field_char_integer, "max teams race" },
		{ _field_char_integer, "max teams head hunter" },
		{ _field_char_integer, "max teams juggernaut" },
		{ _field_char_integer, "max teams territories" },
		{ _field_char_integer, "max teams assault" },
		{ _field_char_integer, "max teams 10 stub" },
		{ _field_char_integer, "max teams 11 stub" },
		{ _field_char_integer, "max teams 12 stub" },
		{ _field_char_integer, "max teams 13 stub" },
		{ _field_char_integer, "max teams 14 stub" },
		{ _field_char_integer, "max teams 15 stub" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$314)
	{
		"unlockable"
	};
	STRING_LIST(unnamed_enum$314, unnamed_enum$314_strings, _countof(unnamed_enum$314_strings));

	TAG_STRUCT(
		global_visibility_bounds_block_struct_definition,
		"global_visibility_bounds_block",
		"global_visibility_bounds_block_struct_definition",
		"s_geometry_visibility",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "position x" },
		{ _field_real, "position y" },
		{ _field_real, "position z" },
		{ _field_real, "radius" },
		{ _field_char_integer, "node 0" },
		FIELD_PAD("value", 3),
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_water_definitions_block_struct_definition,
		"global_water_definitions_block",
		"global_water_definitions_block_struct_definition",
		"s_water_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "shader", &shader_group_reference },
		{ _field_block, "section", &water_geometry_section_block },
		{ _field_struct, "geometry block info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		{ _field_real_rgb_color, "sun spot color" },
		{ _field_real_rgb_color, "reflection tint" },
		{ _field_real_rgb_color, "refraction tint" },
		{ _field_real_rgb_color, "horizon color" },
		{ _field_real, "sun specular power" },
		{ _field_real, "reflection bump scale" },
		{ _field_real, "refraction bump scale" },
		{ _field_real, "fresnel scale" },
		{ _field_real, "sun dir heading" },
		{ _field_real, "sun dir pitch" },
		{ _field_real, "fov" },
		{ _field_real, "aspect" },
		{ _field_real, "height" },
		{ _field_real, "farz" },
		{ _field_real, "rotate_offset" },
		{ _field_real_vector_2d, "center" },
		{ _field_real_vector_2d, "extents" },
		{ _field_real, "fog near" },
		{ _field_real, "fog far" },
		{ _field_real, "dynamic_height_bias" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_weather_background_plate_block_struct_definition,
		"global_weather_background_plate_block",
		"global_weather_background_plate_block_struct_definition",
		"s_animated_background_plate",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "texture 0", &bitmap_group_reference },
		{ _field_tag_reference, "texture 1", &bitmap_group_reference },
		{ _field_tag_reference, "texture 2", &bitmap_group_reference },
		{ _field_real, "plate positions 0" },
		{ _field_real, "plate positions 1" },
		{ _field_real, "plate positions 2" },
		{ _field_real_vector_3d, "move speed 0" },
		{ _field_real_vector_3d, "move speed 1" },
		{ _field_real_vector_3d, "move speed 2" },
		{ _field_real, "texture scale 0" },
		{ _field_real, "texture scale 1" },
		{ _field_real, "texture scale 2" },
		{ _field_real_vector_3d, "jitter 0" },
		{ _field_real_vector_3d, "jitter 1" },
		{ _field_real_vector_3d, "jitter 2" },
		{ _field_real, "plate z near" },
		{ _field_real, "plate z far" },
		{ _field_real, "depth blend z near" },
		{ _field_real, "depth blend z far" },
		{ _field_real, "opacity 0" },
		{ _field_real, "opacity 1" },
		{ _field_real, "opacity 2" },
		{ _field_long_flags, "flags", &unnamed_enum$533 },
		{ _field_real_rgb_color, "tint color0" },
		{ _field_real_rgb_color, "tint color1" },
		{ _field_real_rgb_color, "tint color2" },
		{ _field_real, "mass 1" },
		{ _field_real, "mass 2" },
		{ _field_real, "mass 3" },
		FIELD_PAD("value", 736),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$533)
	{
		"forward motion",
		"auto position planes",
		"auto scale planesauto update speed"
	};
	STRING_LIST(unnamed_enum$533, unnamed_enum$533_strings, _countof(unnamed_enum$533_strings));

	TAG_STRUCT(
		global_wind_model_struct_struct_definition,
		"global_wind_model_struct",
		"global_wind_model_struct_struct_definition",
		"s_wind_model",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "wind tiling scale" },
		{ _field_real_vector_3d, "wind primary heading/pitch/strength" },
		{ _field_real, "primary rate of change" },
		{ _field_real, "primary min strength" },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 12),
		{ _field_real_vector_3d, "wind gusting heading/pitch/strength" },
		{ _field_real, "gust diretional rate of change" },
		{ _field_real, "gust strength rate of change" },
		{ _field_real, "gust cone angle" },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 12),
		FIELD_PAD("value", 12),
		FIELD_PAD("value", 12),
		FIELD_PAD("value", 12),
		{ _field_real, "turbulance rate of change" },
		{ _field_real_vector_3d, "turbulence_scale x, y, z" },
		{ _field_real, "gravity constant" },
		{ _field_block, "wind_pirmitives", &gloal_wind_primitives_block },
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		global_z_reference_vector_block_struct_definition,
		"global_z_reference_vector_block",
		"global_z_reference_vector_block_struct_definition",
		"s_real_vector4d$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "value" },
		{ _field_real, "value" },
		{ _field_real, "value" },
		{ _field_real, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		globals_block_struct_definition,
		"globals_block",
		"globals_block_struct_definition",
		"s_game_globals",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 172),
		{ _field_long_enum, "language", &unnamed_enum$301 },
		{ _field_block, "havok cleanup resources", &havok_cleanup_resources_block },
		{ _field_block, "collision damage", &collision_damage_block },
		{ _field_block, "sound globals", &sound_globals_block },
		{ _field_block, "ai globals", &ai_globals_block },
		{ _field_block, "damage table", &game_globals_damage_block },
		{ _field_block, "custom references", &custom_references_block },
		{ _field_block, "sounds", &sound_block },
		{ _field_block, "camera", &camera_block },
		{ _field_block, "player control", &player_control_block },
		{ _field_block, "difficulty", &difficulty_block },
		{ _field_block, "grenades", &grenades_block },
		{ _field_block, "rasterizer data", &rasterizer_data_block },
		{ _field_block, "interface tags", &interface_tag_references_block },
		{ _field_block, "weapon list", &cheat_weapons_block },
		{ _field_block, "@cheat powerups", &cheat_powerups_block },
		{ _field_block, "@multiplayer information", &multiplayer_information_block },
		{ _field_block, "@player information", &player_information_block },
		{ _field_block, "@player representation", &player_representation_block },
		{ _field_block, "falling damage", &falling_damage_block },
		{ _field_block, "old materials", &old_materials_block },
		{ _field_block, "materials", &materials_block, _field_id_sort },
		{ _field_block, "multiplayer UI", &multiplayer_ui_block },
		{ _field_block, "profile colors", &multiplayer_color_block },
		{ _field_tag_reference, "multiplayer globals", &multiplayer_globals_group_reference },
		{ _field_block, "runtime level data", &runtime_levels_definition_block },
		{ _field_block, "ui level data", &ui_levels_definition_block },
		FIELD_EXPLANATION("Default global lighting", nullptr),
		{ _field_tag_reference, "default global lighting", &chocolate_mountain_group_reference },
		FIELD_PAD("value", 252),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$301)
	{
		"english",
		"japanese",
		"german",
		"french",
		"spanish",
		"italian",
		"korean",
		"chinese",
		"portuguese"
	};
	STRING_LIST(unnamed_enum$301, unnamed_enum$301_strings, _countof(unnamed_enum$301_strings));

	TAG_REFERENCE(multiplayer_globals_group_reference, MULTIPLAYER_GLOBALS_TAG);

	TAG_REFERENCE(chocolate_mountain_group_reference, CHOCOLATE_MOUNTAIN_TAG);

	VERSIONED_TAG_STRUCT(
		grenade_and_powerup_struct_definition,
		"grenade_and_powerup",
		"grenade_and_powerup_struct_definition",
		"s_tag_block",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_block, "grenades", &grenade_block },
		{ _field_block, "powerups", &powerup_block },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		grenade_block_struct_definition,
		"grenade_block",
		"grenade_block_struct_definition",
		"s_tag_reference$8",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "grenade", &equipment_group_reference$2 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		grenade_hud_interface_block_struct_definition,
		"grenade_hud_interface_block",
		"grenade_hud_interface_block_struct_definition",
		"s_grenade_hud_interface_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("value", _field_id_ghis),
		FIELD_EXPLANATION("Grenade hud screen alignment", nullptr),
		{ _field_short_enum, "anchor", &unnamed_enum$206 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 32),
		FIELD_EXPLANATION("Grenade hud background", nullptr),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "interface bitmap", &bitmap_group_reference },
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "sequence index" },
		FIELD_PAD("value", 2),
		{ _field_block, "multitex overlay", &global_hud_multitexture_overlay_definition_block },
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("Total grenades background", nullptr),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "interface bitmap", &bitmap_group_reference },
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "sequence index" },
		FIELD_PAD("value", 2),
		{ _field_block, "multitex overlay", &global_hud_multitexture_overlay_definition_block },
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("Total grenades numbers", nullptr),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_char_integer, "maximum number of digits" },
		{ _field_byte_flags, "flags", &unnamed_enum$215 },
		{ _field_char_integer, "number of fractional digits" },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 12),
		{ _field_short_integer, "flash cutoff" },
		FIELD_PAD("value", 2),
		FIELD_EXPLANATION("Total grenades overlays", nullptr),
		{ _field_tag_reference, "Overlay bitmap", &bitmap_group_reference },
		{ _field_block, "Overlays", &grenade_hud_overlay_block },
		{ _field_block, "Warning sounds", &grenade_hud_sound_block },
		FIELD_PAD("value", 68),
		FIELD_EXPLANATION("Messaging information", nullptr),
		{ _field_short_integer, "sequence index", "sequence index into the global hud icon bitmap" },
		{ _field_short_integer, "width offset", "extra spacing beyond bitmap width for text alignment" },
		{ _field_point_2d, "offset from reference corner" },
		{ _field_argb_color, "override icon color" },
		{ _field_char_integer, "frame rate" },
		{ _field_byte_flags, "flags", &unnamed_enum$219 },
		{ _field_short_integer, "text index" },
		FIELD_PAD("value", 48),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$206)
	{
		"top left",
		"top right",
		"bottom left",
		"bottom right",
		"center",
		"crosshair"
	};
	STRING_LIST(unnamed_enum$206, unnamed_enum$206_strings, _countof(unnamed_enum$206_strings));

	STRINGS(unnamed_enum$207)
	{
		"don\'t scale offset",
		"don\'t scale size"
	};
	STRING_LIST(unnamed_enum$207, unnamed_enum$207_strings, _countof(unnamed_enum$207_strings));

	STRINGS(unnamed_enum$208)
	{
		"reverse default/flashing colors"
	};
	STRING_LIST(unnamed_enum$208, unnamed_enum$208_strings, _countof(unnamed_enum$208_strings));

	STRINGS(unnamed_enum$215)
	{
		"show leading zeros",
		"only show when zoomed",
		"draw a trailing m"
	};
	STRING_LIST(unnamed_enum$215, unnamed_enum$215_strings, _countof(unnamed_enum$215_strings));

	STRINGS(unnamed_enum$219)
	{
		"use text from string_list instead",
		"override default color",
		"width offset is absolute icon width"
	};
	STRING_LIST(unnamed_enum$219, unnamed_enum$219_strings, _countof(unnamed_enum$219_strings));

	TAG_STRUCT(
		grenade_hud_overlay_block_struct_definition,
		"grenade_hud_overlay_block",
		"grenade_hud_overlay_block_struct_definition",
		"s_weapon_hud_overlay_item",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_real, "frame rate" },
		{ _field_short_integer, "sequence index" },
		{ _field_word_flags, "type", &unnamed_enum$216 },
		{ _field_long_flags, "flags", &unnamed_enum$217 },
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 40),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$216)
	{
		"show on flashing",
		"show on empty",
		"show on default",
		"show always"
	};
	STRING_LIST(unnamed_enum$216, unnamed_enum$216_strings, _countof(unnamed_enum$216_strings));

	STRINGS(unnamed_enum$217)
	{
		"flashes when active"
	};
	STRING_LIST(unnamed_enum$217, unnamed_enum$217_strings, _countof(unnamed_enum$217_strings));

	TAG_STRUCT(
		grenade_hud_sound_block_struct_definition,
		"grenade_hud_sound_block",
		"grenade_hud_sound_block_struct_definition",
		"s_sound_hud_element_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "sound", &sound_group_sound_looping_group_reference$2 },
		{ _field_long_flags, "latched to", &unnamed_enum$218 },
		{ _field_real, "scale" },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$218)
	{
		"low grenade count",
		"no grenades left",
		"throw on no grenades"
	};
	STRING_LIST(unnamed_enum$218, unnamed_enum$218_strings, _countof(unnamed_enum$218_strings));

	TAG_STRUCT(
		grenades_block_struct_definition,
		"grenades_block",
		"grenades_block_struct_definition",
		"s_game_globals_grenade",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "maximum count" },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "throwing effect", &effect_group_reference },
		FIELD_PAD("value", 16),
		{ _field_tag_reference, "equipment", &equipment_group_reference$2 },
		{ _field_tag_reference, "projectile", &projectile_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(projectile_group_reference, PROJECTILE_TAG);

	TAG_STRUCT(
		havok_cleanup_resources_block_struct_definition,
		"havok_cleanup_resources_block",
		"havok_cleanup_resources_block_struct_definition",
		"s_game_globals_havok_cleanup_resources",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "object cleanup effect", &effect_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		havok_vehicle_physics_struct_definition,
		"havok_vehicle_physics",
		"havok_vehicle_physics_struct_definition",
		"s_havok_vehicle_physics_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$511 },
		{ _field_real, "ground friction", "for friction based vehicles only" },
		{ _field_real, "ground depth", "for friction based vehicles only" },
		{ _field_real, "ground damp factor", "for friction based vehicles only" },
		{ _field_real, "ground moving friction", "for friction based vehicles only" },
		{ _field_real, "ground maximum slope 0", "degrees 0-90" },
		{ _field_real, "ground maximum slope 1", "degrees 0-90.  and greater than slope 0" },
		FIELD_PAD("value", 16),
		{ _field_real, "anti_gravity_bank_lift", "lift per WU." },
		{ _field_real, "steering_bank_reaction_scale", "how quickly we bank when we steer " },
		{ _field_real, "gravity scale", "value of 0 defaults to 1.  .5 is half gravity" },
		{ _field_real, "radius", "generated from the radius of the hkConvexShape for this vehicle" },
		{ _field_block, "anti gravity points", &anti_gravity_point_definition_block },
		{ _field_block, "friction points", &friction_point_definition_block },
		{ _field_block, "*shape phantom shape", &vehicle_phantom_shape_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$511)
	{
		"invalid"
	};
	STRING_LIST(unnamed_enum$511, unnamed_enum$511_strings, _countof(unnamed_enum$511_strings));

	TAG_STRUCT(
		hinge_constraints_block_struct_definition,
		"hinge_constraints_block",
		"hinge_constraints_block_struct_definition",
		"s_physics_model_hinge_constraint",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "constraint bodies", &constraint_bodies_struct_struct_definition, _field_id_csbs },
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		hints_v2_struct_definition,
		"hints_v2",
		"hints_v2_struct_definition",
		"s_pathfinding_hint_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 3, 10 },
		{ _field_short_enum, "hint type", &unnamed_enum$376 },
		{ _field_short_integer, "Next hint index" },
		{ _field_short_integer, "hint data 0" },
		{ _field_short_integer, "hint data 1" },
		{ _field_short_integer, "hint data 2" },
		{ _field_short_integer, "hint data 3" },
		{ _field_short_integer, "hint data 4" },
		{ _field_short_integer, "hint data 5" },
		{ _field_short_integer, "hint data 6" },
		{ _field_short_integer, "hint data 7" },
		
		{ _struct_version_mode_equal, 2, 10 },
		{ _field_short_enum, "hint type", &unnamed_enum$376 },
		{ _field_short_integer, "Next hint index" },
		{ _field_short_integer, "hint data 0" },
		{ _field_short_integer, "hint data 1" },
		{ _field_short_integer, "hint data 2" },
		{ _field_short_integer, "hint data 3" },
		{ _field_short_integer, "hint data 4" },
		{ _field_short_integer, "hint data 5" },
		{ _field_short_integer, "hint data 6" },
		{ _field_short_integer, "hint data 7" },
		
		{ _struct_version_mode_equal, 1, 10 },
		{ _field_short_enum, "hint type", &unnamed_enum$376 },
		{ _field_short_integer, "Next hint index" },
		{ _field_short_integer, "hint data 0" },
		{ _field_short_integer, "hint data 1" },
		{ _field_short_integer, "hint data 2" },
		{ _field_short_integer, "hint data 3" },
		{ _field_short_integer, "hint data 4" },
		{ _field_short_integer, "hint data 5" },
		{ _field_short_integer, "hint data 6" },
		{ _field_short_integer, "hint data 7" },
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_short_enum, "hint type", &unnamed_enum$376 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 84),
		{ _field_short_integer, "Next hint index" },
		FIELD_PAD("value", 2),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$376)
	{
		"intersection link",
		"jump link",
		"climb link",
		"vault link",
		"mount link",
		"hoist link",
		"wall jump link",
		"breakable floor"
	};
	STRING_LIST(unnamed_enum$376, unnamed_enum$376_strings, _countof(unnamed_enum$376_strings));

	TAG_STRUCT(
		hs_globals_block_struct_definition,
		"hs_globals_block",
		"hs_globals_block_struct_definition",
		"s_hs_global_internal",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_short_enum, "type", &unnamed_enum$405 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 4),
		{ _field_long_integer, "initialization expression index" },
		FIELD_USELESS_PAD("value", 48),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$405)
	{
		"unparsed",
		"special form",
		"function name",
		"passthrough",
		"void",
		"boolean",
		"real",
		"short",
		"long",
		"string",
		"script",
		"string_id",
		"unit_seat_mapping",
		"trigger_volume",
		"cutscene_flag",
		"cutscene_camera_point",
		"cutscene_title",
		"cutscene_recording",
		"device_group",
		"ai",
		"ai_command_list",
		"ai_command_script",
		"ai_behavior",
		"ai_orders",
		"starting_profile",
		"conversation",
		"structure_bsp",
		"navpoint",
		"point reference",
		"style",
		"hud_message",
		"object_list",
		"sound",
		"effect",
		"damage",
		"looping_sound",
		"animation_graph",
		"damage_effect",
		"object_definition",
		"bitmap",
		"shader",
		"render model",
		"structure definition",
		"lightmap definition",
		"game_difficulty",
		"team",
		"actor_type",
		"hud_corner",
		"model_state",
		"network_event",
		"object",
		"unit",
		"vehicle",
		"weapon",
		"device",
		"scenery",
		"object_name",
		"unit_name",
		"vehicle_name",
		"weapon_name",
		"device_name",
		"scenery_name"
	};
	STRING_LIST(unnamed_enum$405, unnamed_enum$405_strings, _countof(unnamed_enum$405_strings));

	TAG_STRUCT(
		hs_references_block_struct_definition,
		"hs_references_block",
		"hs_references_block_struct_definition",
		"s_hs_tag_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_USELESS_PAD("value", 24),
		{ _field_tag_reference, "reference", &_reference$5 },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference$5, INVALID_TAG);

	TAG_STRUCT(
		hs_scripts_block_struct_definition,
		"hs_scripts_block",
		"hs_scripts_block_struct_definition",
		"s_hs_script",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_short_enum, "script type", &unnamed_enum$404 },
		{ _field_short_enum, "return type", &unnamed_enum$405 },
		{ _field_long_integer, "root expression index" },
		FIELD_USELESS_PAD("value", 52),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$404)
	{
		"startup",
		"dormant",
		"continuous",
		"static",
		"stub",
		"command_script"
	};
	STRING_LIST(unnamed_enum$404, unnamed_enum$404_strings, _countof(unnamed_enum$404_strings));

	TAG_STRUCT(
		hs_source_files_block_struct_definition,
		"hs_source_files_block",
		"hs_source_files_block_struct_definition",
		"s_hs_source_file",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_data, "source", &hs_source_data_definition },
		{ _field_terminator }
	};

	TAG_STRUCT(
		hs_unit_seat_block_struct_definition,
		"hs_unit_seat_block",
		"hs_unit_seat_block_struct_definition",
		"s_hs_unit_seat_mapping",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "unit definition tag index" },
		{ _field_long_integer, "unit seats" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		hud_bitmap_widgets_struct_definition,
		"hud_bitmap_widgets",
		"hud_bitmap_widgets_struct_definition",
		"s_hud_bitmap_widget_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_struct, "value", &hud_widget_inputs_struct_definition, _field_id_hwis }, // structure_version:1
		{ _field_struct, "value", &hud_widget_state_definition_struct_struct_definition, _field_id_hwsd },
		{ _field_short_enum, "anchor", &unnamed_enum$334 },
		{ _field_word_flags, "flags", &unnamed_enum$335 },
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_tag_reference, "shader", &shader_group_reference },
		{ _field_char_integer, "fullscreen sequence index" },
		{ _field_char_integer, "halfscreen sequence index" },
		{ _field_char_integer, "quarterscreen sequence index" },
		FIELD_PAD("value", 1),
		{ _field_point_2d, "fullscreen offset" },
		{ _field_point_2d, "halfscreen offset" },
		{ _field_point_2d, "quarterscreen offset" },
		{ _field_real_point_2d, "fullscreen registration point" },
		{ _field_real_point_2d, "halfscreen registration point" },
		{ _field_real_point_2d, "quarterscreen registration point" },
		{ _field_block, "effect", &hud_widget_effect_block },
		{ _field_short_enum, "special hud type", &unnamed_enum$337 },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$334)
	{
		"health and shield",
		"weapon hud",
		"motion sensor",
		"scoreboard",
		"crosshair",
		"lock-on target"
	};
	STRING_LIST(unnamed_enum$334, unnamed_enum$334_strings, _countof(unnamed_enum$334_strings));

	STRINGS(unnamed_enum$335)
	{
		"flip horizontally",
		"flip vertically",
		"(scope) mirror horizontally",
		"(scope) mirror vertically",
		"(scope) stretch"
	};
	STRING_LIST(unnamed_enum$335, unnamed_enum$335_strings, _countof(unnamed_enum$335_strings));

	STRINGS(unnamed_enum$337)
	{
		"unspecial",
		"s.b. player emblem",
		"s.b. other player emblem",
		"s.b. player score meter",
		"s.b. other player score meter",
		"unit shield meter",
		"motion sensor",
		"territory meter"
	};
	STRING_LIST(unnamed_enum$337, unnamed_enum$337_strings, _countof(unnamed_enum$337_strings));

	TAG_STRUCT(
		hud_block_reference_block_struct_definition,
		"hud_block_reference_block",
		"hud_block_reference_block_struct_definition",
		"s_hud_block_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$428 },
		{ _field_short_enum, "animation index", &unnamed_enum$424 },
		{ _field_short_integer, "intro animation delay milliseconds" },
		{ _field_short_integer, "render depth bias" },
		{ _field_short_integer, "starting bitmap sequence index" },
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_tag_reference, "shader", &shader_group_reference },
		{ _field_rectangle_2d, "bounds" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$428)
	{
		"ignore for list skin size",
		"needs valid rank"
	};
	STRING_LIST(unnamed_enum$428, unnamed_enum$428_strings, _countof(unnamed_enum$428_strings));

	TAG_STRUCT(
		hud_button_icon_block_struct_definition,
		"hud_button_icon_block",
		"hud_button_icon_block_struct_definition",
		"s_icon_hud_element_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "sequence index", "sequence index into the global hud icon bitmap" },
		{ _field_short_integer, "width offset", "extra spacing beyond bitmap width for text alignment" },
		{ _field_point_2d, "offset from reference corner" },
		{ _field_argb_color, "override icon color" },
		{ _field_char_integer, "frame rate" },
		{ _field_byte_flags, "flags", &unnamed_enum$219 },
		{ _field_short_integer, "text index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		hud_dashlights_block_struct_definition,
		"hud_dashlights_block",
		"hud_dashlights_block_struct_definition",
		"s_new_hud_dashlight_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_tag_reference, "shader", &shader_group_reference },
		{ _field_short_integer, "sequence index" },
		{ _field_word_flags, "flags", &unnamed_enum$239 },
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$239)
	{
		"don\'t scale when pulsing"
	};
	STRING_LIST(unnamed_enum$239, unnamed_enum$239_strings, _countof(unnamed_enum$239_strings));

	TAG_STRUCT(
		hud_globals_block_struct_definition,
		"hud_globals_block",
		"hud_globals_block_struct_definition",
		"s_hud_globals_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("Messaging parameters", nullptr),
		{ _field_short_enum, "anchor", &unnamed_enum$206 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 32),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "obsolete1", &bitmap_group_reference },
		{ _field_tag_reference, "obsolete2", &bitmap_group_reference },
		{ _field_real, "up time" },
		{ _field_real, "fade time" },
		{ _field_real_argb_color, "icon color" },
		{ _field_real_argb_color, "text color" },
		{ _field_real, "text spacing" },
		{ _field_tag_reference, "item message text", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "icon bitmap", &bitmap_group_reference },
		{ _field_tag_reference, "alternate icon text", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "button icons", &hud_button_icon_block },
		FIELD_EXPLANATION("HUD HELP TEXT COLOR", nullptr),
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("Other hud messaging data", nullptr),
		{ _field_tag_reference, "hud messages", &hud_message_text_group_reference },
		FIELD_EXPLANATION("Objective colors", nullptr),
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		{ _field_short_integer, "uptime ticks" },
		{ _field_short_integer, "fade ticks" },
		FIELD_EXPLANATION("Waypoint parameters", "The offset values are how much the waypoint rectangle border is offset from the safe camera bounds"),
		{ _field_real, "top offset" },
		{ _field_real, "bottom offset" },
		{ _field_real, "left offset" },
		{ _field_real, "right offset" },
		FIELD_PAD("value", 32),
		{ _field_tag_reference, "arrow bitmap", &bitmap_group_reference },
		{ _field_block, "waypoint arrows", &hud_waypoint_arrow_block },
		FIELD_PAD("value", 80),
		FIELD_EXPLANATION("Multiplayer parameters", nullptr),
		{ _field_real, "hud scale in multiplayer" },
		FIELD_PAD("value", 256),
		FIELD_EXPLANATION("Hud globals", nullptr),
		FIELD_PAD("value", 16),
		{ _field_real, "motion sensor range" },
		{ _field_real, "motion sensor velocity sensitivity", "how fast something moves to show up on the motion sensor" },
		{ _field_real, "motion sensor scale [DON'T TOUCH EVER]" },
		{ _field_rectangle_2d, "default chapter title bounds" },
		FIELD_PAD("value", 44),
		FIELD_EXPLANATION("Hud damage indicators", nullptr),
		{ _field_short_integer, "top offset" },
		{ _field_short_integer, "bottom offset" },
		{ _field_short_integer, "left offset" },
		{ _field_short_integer, "right offset" },
		FIELD_PAD("value", 32),
		{ _field_tag_reference, "indicator bitmap", &bitmap_group_reference },
		{ _field_short_integer, "sequence index" },
		{ _field_short_integer, "multiplayer sequence index" },
		{ _field_argb_color, "color" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("Hud timer definitions", nullptr),
		FIELD_EXPLANATION("Not much time left flash color", nullptr),
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("Time out flash color", nullptr),
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 40),
		{ _field_tag_reference, "carnage report bitmap", &bitmap_group_reference },
		FIELD_EXPLANATION("Hud crap that wouldn't fit anywhere else", nullptr),
		{ _field_short_integer, "loading begin text" },
		{ _field_short_integer, "loading end text" },
		{ _field_short_integer, "checkpoint begin text" },
		{ _field_short_integer, "checkpoint end text" },
		{ _field_tag_reference, "checkpoint sound", &sound_group_reference },
		FIELD_PAD("value", 96),
		{ _field_struct, "new globals", &global_new_hud_globals_struct_struct_definition, _field_id_nhgs },
		{ _field_terminator }
	};

	TAG_REFERENCE(hud_message_text_group_reference, HUD_MESSAGE_TEXT_TAG);

	TAG_STRUCT(
		hud_message_elements_block_struct_definition,
		"hud_message_elements_block",
		"hud_message_elements_block_struct_definition",
		"s_hud_state_message_element",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "type" },
		{ _field_char_integer, "data" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		hud_message_text_block_struct_definition,
		"hud_message_text_block",
		"hud_message_text_block_struct_definition",
		"s_hud_state_messages",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_data, "text data", &string_data_definition },
		{ _field_block, "message elements", &hud_message_elements_block },
		{ _field_block, "messages", &hud_messages_block },
		FIELD_PAD("value", 84),
		{ _field_terminator }
	};

	TAG_STRUCT(
		hud_messages_block_struct_definition,
		"hud_messages_block",
		"hud_messages_block_struct_definition",
		"s_hud_state_message_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_short_integer, "start index into text blob" },
		{ _field_short_integer, "start index of message block" },
		{ _field_char_integer, "panel count" },
		FIELD_PAD("value", 3),
		FIELD_PAD("value", 24),
		{ _field_terminator }
	};

	TAG_STRUCT(
		hud_number_block_struct_definition,
		"hud_number_block",
		"hud_number_block_struct_definition",
		"s_hud_number_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "digits bitmap", &bitmap_group_reference },
		{ _field_char_integer, "bitmap digit width" },
		{ _field_char_integer, "screen digit width" },
		{ _field_char_integer, "x offset" },
		{ _field_char_integer, "y offset" },
		{ _field_char_integer, "decimal point width" },
		{ _field_char_integer, "colon width" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 76),
		{ _field_terminator }
	};

	TAG_STRUCT(
		hud_screen_effect_widgets_struct_definition,
		"hud_screen_effect_widgets",
		"hud_screen_effect_widgets_struct_definition",
		"s_hud_screen_effect_widget_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_struct, "value", &hud_widget_inputs_struct_definition, _field_id_hwis }, // structure_version:1
		{ _field_struct, "value", &hud_widget_state_definition_struct_struct_definition, _field_id_hwsd },
		{ _field_short_enum, "anchor", &unnamed_enum$334 },
		{ _field_word_flags, "flags", &unnamed_enum$341 },
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_tag_reference, "fullscreen screen effect", &screen_effect_group_reference },
		{ _field_struct, "waa", &screen_effect_bonus_struct_definition, _field_id_sebs }, // structure_version:1
		{ _field_char_integer, "fullscreen sequence index" },
		{ _field_char_integer, "halfscreen sequence index" },
		{ _field_char_integer, "quarterscreen sequence index" },
		FIELD_PAD("value", 1),
		{ _field_point_2d, "fullscreen offset" },
		{ _field_point_2d, "halfscreen offset" },
		{ _field_point_2d, "quarterscreen offset" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$341)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$341, unnamed_enum$341_strings, _countof(unnamed_enum$341_strings));

	TAG_STRUCT(
		hud_text_widgets_struct_definition,
		"hud_text_widgets",
		"hud_text_widgets_struct_definition",
		"s_hud_text_widget_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_struct, "value", &hud_widget_inputs_struct_definition, _field_id_hwis }, // structure_version:1
		{ _field_struct, "value", &hud_widget_state_definition_struct_struct_definition, _field_id_hwsd },
		{ _field_short_enum, "anchor", &unnamed_enum$334 },
		FIELD_EXPLANATION("FLAGS", "string is a number: treats the inputted string id as a function name, not a string name\n\nforce 2-digit number: when used in combination with above, forces output to be a 2-digit numberwith leading zeros if necessary\n\nforce 3-digit number: same as above, but with 3 digits instead of 2\n\n"),
		{ _field_word_flags, "flags", &unnamed_enum$338 },
		{ _field_tag_reference, "shader", &shader_group_reference },
		{ _field_string_id, "string" },
		{ _field_short_enum, "justification", &unnamed_enum$339 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 12),
		{ _field_char_enum, "fullscreen font index", &unnamed_enum$340 },
		{ _field_char_enum, "halfscreen font index", &unnamed_enum$340 },
		{ _field_char_enum, "quarterscreen font index", &unnamed_enum$340 },
		FIELD_PAD("value", 1),
		{ _field_real, "fullscreen scale" },
		{ _field_real, "halfscreen scale" },
		{ _field_real, "quarterscreen scale" },
		{ _field_point_2d, "fullscreen offset" },
		{ _field_point_2d, "halfscreen offset" },
		{ _field_point_2d, "quarterscreen offset" },
		{ _field_block, "effect", &hud_widget_effect_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$338)
	{
		"string is a number",
		"force 2-digit number",
		"force 3-digit number",
		"talking player hack"
	};
	STRING_LIST(unnamed_enum$338, unnamed_enum$338_strings, _countof(unnamed_enum$338_strings));

	STRINGS(unnamed_enum$339)
	{
		"left",
		"center",
		"right"
	};
	STRING_LIST(unnamed_enum$339, unnamed_enum$339_strings, _countof(unnamed_enum$339_strings));

	STRINGS(unnamed_enum$340)
	{
		"default",
		"number font"
	};
	STRING_LIST(unnamed_enum$340, unnamed_enum$340_strings, _countof(unnamed_enum$340_strings));

	TAG_STRUCT(
		hud_waypoint_arrow_block_struct_definition,
		"hud_waypoint_arrow_block",
		"hud_waypoint_arrow_block_struct_definition",
		"s_hud_waypoint_arrow",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		FIELD_PAD("value", 8),
		{ _field_rgb_color, "color" },
		{ _field_real, "opacity" },
		{ _field_real, "translucency" },
		{ _field_short_integer, "on screen sequence index" },
		{ _field_short_integer, "off screen sequence index" },
		{ _field_short_integer, "occluded sequence index" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 16),
		{ _field_long_flags, "flags", &unnamed_enum$238 },
		FIELD_PAD("value", 24),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$238)
	{
		"don\'t rotate when pointing offscreen"
	};
	STRING_LIST(unnamed_enum$238, unnamed_enum$238_strings, _countof(unnamed_enum$238_strings));

	TAG_STRUCT(
		hud_waypoint_arrow_block_struct_definition$2,
		"hud_waypoint_arrow_block",
		"hud_waypoint_arrow_block_struct_definition",
		"s_new_hud_waypoint_arrow_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_tag_reference, "shader", &shader_group_reference },
		{ _field_short_integer, "sequence index" },
		FIELD_PAD("value", 2),
		{ _field_real, "smallest size" },
		{ _field_real, "smallest distance" },
		{ _field_tag_reference, "border bitmap", &bitmap_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		hud_waypoint_block_struct_definition,
		"hud_waypoint_block",
		"hud_waypoint_block_struct_definition",
		"s_new_hud_waypoint_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_tag_reference, "shader", &shader_group_reference },
		{ _field_short_integer, "onscreen sequence index" },
		{ _field_short_integer, "occluded sequence index" },
		{ _field_short_integer, "offscreen sequence index" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		hud_widget_effect_block_struct_definition,
		"hud_widget_effect_block",
		"hud_widget_effect_block_struct_definition",
		"s_hud_widget_effect_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("WIDGET EFFECTS", "allow the scaling, rotation, and offsetting of widgets"),
		{ _field_word_flags, "flags", &unnamed_enum$336 },
		FIELD_PAD("value", 2),
		FIELD_EXPLANATION("horizontal and vertical scale", nullptr),
		{ _field_struct, "your mom", &hud_widget_effect_function_struct_struct_definition, _field_id_hwef },
		{ _field_struct, "your mom", &hud_widget_effect_function_struct_struct_definition, _field_id_hwef },
		FIELD_EXPLANATION("theta", nullptr),
		{ _field_struct, "your mom", &hud_widget_effect_function_struct_struct_definition, _field_id_hwef },
		FIELD_EXPLANATION("horizontal and vertical offset", nullptr),
		{ _field_struct, "your mom", &hud_widget_effect_function_struct_struct_definition, _field_id_hwef },
		{ _field_struct, "your mom", &hud_widget_effect_function_struct_struct_definition, _field_id_hwef },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$336)
	{
		"apply scale",
		"apply theta",
		"apply offset"
	};
	STRING_LIST(unnamed_enum$336, unnamed_enum$336_strings, _countof(unnamed_enum$336_strings));

	TAG_STRUCT(
		hud_widget_effect_function_struct_struct_definition,
		"hud_widget_effect_function_struct",
		"hud_widget_effect_function_struct_struct_definition",
		"s_hud_widget_effect_function",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "input name" },
		{ _field_string_id, "range name" },
		{ _field_real, "time period in seconds" },
		{ _field_struct, "function", &scalar_function_struct_struct_definition, _field_id_SCFN },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		hud_widget_inputs_struct_definition,
		"hud_widget_inputs",
		"hud_widget_inputs_struct_definition",
		"s_hud_widget_inputs_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 5 },
		FIELD_EXPLANATION("widget inputs", nullptr),
		{ _field_char_enum, "input 1", &unnamed_enum$329 },
		{ _field_char_enum, "input 2", &unnamed_enum$329 },
		{ _field_char_enum, "input 3", &unnamed_enum$329 },
		{ _field_char_enum, "input 4", &unnamed_enum$329 },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$329)
	{
		"BASIC zero",
		"BASIC one",
		"BASIC time",
		"BASIC global hud fade",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"UNIT shield",
		"UNIT body",
		"UNIT autoaimed",
		"UNIT has no grenades",
		"UNIT frag gren cnt",
		"UNIT plasma gren cnt",
		"UNIT time on dpl shld",
		"UNIT zoom fraction",
		"UNIT camo value",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"PARENT shield",
		"PARENT body",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"WEAPON clip ammo",
		"WEAPON heat",
		"WEAPON battery",
		"WEAPON total_ammo",
		"WEAPON barrel spin",
		"WEAPON overheated",
		"WEAPON clip ammo fraction",
		"WEAPON time on overheat",
		"WEAPON battery fraction",
		"WEAPON locking fraction",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"user score fraction",
		"other user score fraction",
		"user winning",
		"bomb arming amount",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"...",
		"..."
	};
	STRING_LIST(unnamed_enum$329, unnamed_enum$329_strings, _countof(unnamed_enum$329_strings));

	TAG_STRUCT(
		hud_widget_state_definition_struct_struct_definition,
		"hud_widget_state_definition_struct",
		"hud_widget_state_definition_struct_struct_definition",
		"s_hud_widget_state_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("widget state", "this section is split up into YES and NO flags.\na widget will draw if any of it\'s YES flags are true,\nbut it will NOT draw if any of it\'s NO flags are true.\n"),
		{ _field_word_flags, "[Y] unit flags", &unnamed_enum$330 },
		{ _field_word_flags, "[Y] extra flags", &unnamed_enum$331 },
		{ _field_word_flags, "[Y] weapon flags", &unnamed_enum$332 },
		{ _field_word_flags, "[Y] game engine state flags", &unnamed_enum$333 },
		FIELD_USELESS_PAD("value", 8),
		{ _field_word_flags, "[N] unit flags", &unnamed_enum$330 },
		{ _field_word_flags, "[N] extra flags", &unnamed_enum$331 },
		{ _field_word_flags, "[N] weapon flags", &unnamed_enum$332 },
		{ _field_word_flags, "[N] game engine state flags", &unnamed_enum$333 },
		FIELD_USELESS_PAD("value", 8),
		{ _field_char_integer, "age cutoff" },
		{ _field_char_integer, "clip cutoff" },
		{ _field_char_integer, "total cutoff" },
		FIELD_PAD("value", 1),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$330)
	{
		"default",
		"grenade type is NONE",
		"grenade type is frag",
		"grenade type is plasma",
		"unit is single wielding",
		"unit is dual wielding",
		"unit is unzoomed",
		"unit is zoomed (level 1)",
		"unit is zoomed (level 2)",
		"grenades disabled",
		"binoculars enabled",
		"motion sensor enabled",
		"shield enabled",
		"dervish"
	};
	STRING_LIST(unnamed_enum$330, unnamed_enum$330_strings, _countof(unnamed_enum$330_strings));

	STRINGS(unnamed_enum$331)
	{
		"autoaim-friendly",
		"autoaim-plasma",
		"autoaim-headshot",
		"autoaim-vulnerable",
		"autoaim-invincible"
	};
	STRING_LIST(unnamed_enum$331, unnamed_enum$331_strings, _countof(unnamed_enum$331_strings));

	STRINGS(unnamed_enum$332)
	{
		"primary weapon",
		"secondary weapon",
		"backpack weapon",
		"age below cutoff",
		"clip below cutoff",
		"total below cutoff",
		"overheated",
		"out of ammo",
		"lock target available",
		"locking",
		"locked"
	};
	STRING_LIST(unnamed_enum$332, unnamed_enum$332_strings, _countof(unnamed_enum$332_strings));

	STRINGS(unnamed_enum$333)
	{
		"campaign solo",
		"campaign coop",
		"free-for-all",
		"team game",
		"user leading",
		"user not leading",
		"timed game",
		"untimed game",
		"other score valid",
		"other score invalid",
		"player is arming bomb",
		"player talking"
	};
	STRING_LIST(unnamed_enum$333, unnamed_enum$333_strings, _countof(unnamed_enum$333_strings));

	TAG_STRUCT(
		indices_block_struct_definition,
		"indices_block",
		"indices_block_struct_definition",
		"s_word",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		inertial_matrix_block_struct_definition,
		"inertial_matrix_block",
		"inertial_matrix_block_struct_definition",
		"s_real_matrix3x3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_vector_3d, "yy+zz    -xy     -zx" },
		{ _field_real_vector_3d, "-xy    zz+xx    -yz" },
		{ _field_real_vector_3d, "-zx     -yz    xx+yy" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		inherited_animation_block_struct_definition,
		"inherited_animation_block",
		"inherited_animation_block_struct_definition",
		"s_animation_inheritence",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "inherited graph", &model_animation_graph_group_reference$2 },
		{ _field_block, "node map", &inherited_animation_node_map_block },
		{ _field_block, "node map flags", &inherited_animation_node_map_flag_block },
		{ _field_real, "root z offset" },
		{ _field_long_integer, "inheritance_flags" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		inherited_animation_node_map_block_struct_definition,
		"inherited_animation_node_map_block",
		"inherited_animation_node_map_block_struct_definition",
		"s_short",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "local node" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		inherited_animation_node_map_flag_block_struct_definition,
		"inherited_animation_node_map_flag_block",
		"inherited_animation_node_map_flag_block_struct_definition",
		"s_unsigned_long",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "local node flags" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		instanced_geometry_instance_struct_definition,
		"instanced_geometry_instance",
		"instanced_geometry_instance_struct_definition",
		"s_structure_instanced_geometry_instance",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 14 },
		{ _field_real, "scale" },
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "left" },
		{ _field_real_vector_3d, "up" },
		{ _field_real_point_3d, "position" },
		{ _field_short_block_index, "instance definition" },
		{ _field_word_flags, "flags", &unnamed_enum$382 },
		FIELD_PAD("value", 4),
		FIELD_SKIP("value", 12),
		FIELD_SKIP("value", 4),
		{ _field_long_integer, "checksum" },
		{ _field_string_id, "name" },
		{ _field_short_enum, "pathfinding policy", &unnamed_enum$383 },
		{ _field_short_enum, "lightmapping policy", &unnamed_enum$384 },
		
		{ _struct_version_mode_equal, 1, 13 },
		{ _field_real, "scale" },
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "left" },
		{ _field_real_vector_3d, "up" },
		{ _field_real_point_3d, "position" },
		{ _field_short_block_index, "instance definition" },
		{ _field_short_integer, "render first bitvector index" },
		FIELD_PAD("value", 4),
		{ _field_tag_reference, "lightmap bitmap", &bitmap_group_reference },
		{ _field_long_integer, "checksum" },
		{ _field_string_id, "name" },
		{ _field_short_integer, "pathfinding object index" },
		FIELD_SKIP("value", 2),
		
		{ _struct_version_mode_equal, 0, 13 },
		{ _field_real, "scale" },
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "left" },
		{ _field_real_vector_3d, "up" },
		{ _field_real_point_3d, "position" },
		{ _field_short_block_index, "instance definition" },
		{ _field_short_integer, "render first bitvector index" },
		FIELD_PAD("value", 4),
		{ _field_tag_reference, "lightmap bitmap", &bitmap_group_reference },
		{ _field_long_integer, "checksum" },
		{ _field_string_id, "name" },
		{ _field_short_integer, "pathfinding object index" },
		FIELD_SKIP("value", 2),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$382)
	{
		"not in lightprobes"
	};
	STRING_LIST(unnamed_enum$382, unnamed_enum$382_strings, _countof(unnamed_enum$382_strings));

	STRINGS(unnamed_enum$383)
	{
		"cut-out",
		"static",
		"none"
	};
	STRING_LIST(unnamed_enum$383, unnamed_enum$383_strings, _countof(unnamed_enum$383_strings));

	STRINGS(unnamed_enum$384)
	{
		"per-pixel",
		"per-vertex"
	};
	STRING_LIST(unnamed_enum$384, unnamed_enum$384_strings, _countof(unnamed_enum$384_strings));

	TAG_STRUCT(
		instanced_geometry_reference_block_struct_definition,
		"instanced_geometry_reference_block",
		"instanced_geometry_reference_block_struct_definition",
		"s_instanced_geometry_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "pathfinding object_index" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		instantaneous_damage_repsonse_block_struct_definition,
		"instantaneous_damage_repsonse_block",
		"instantaneous_damage_repsonse_block_struct_definition",
		"s_instantaneous_damage_response",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "response type", &unnamed_enum$230 },
		FIELD_EXPLANATION("Constraint damage type", "* if you specify a constraint group name (see lower section of this block)\n  you can specify a constraint damage\n* loosening a constraint takes it out of the rigid state - activates it\n* destroying a constraint sets the attached body free"),
		{ _field_short_enum, "constraint damage type", &unnamed_enum$231 },
		FIELD_EXPLANATION("Damage response flags", "* kills object: when the response fires the object dies regardless of its current health\n* inhibits <x>: from halo 1 - disallows basic behaviors for a unit\n* forces drop weapon: from halo 1 - makes the unit drop its current weapon\n* kills weapon <x> trigger: destroys the <x> trigger on the unit\'s current weapon\n* destroys object: when the response fires the object is destroyed"),
		{ _field_long_flags, "flags", &unnamed_enum$232 },
		{ _field_real, "damage threshold", "repsonse fires after crossing this threshold.  1=full health" },
		{ _field_tag_reference, "transition effect", &effect_group_reference },
		{ _field_struct, "damage effect", &instantaneous_response_damage_effect_struct_definition, _field_id_ires }, // structure_version:1
		{ _field_string_id, "region" },
		{ _field_short_enum, "new state", &unnamed_enum$223 },
		{ _field_short_integer, "runtime region index" },
		{ _field_string_id, "effect marker name" },
		{ _field_struct, "damage effect marker", &instantaneous_response_damage_effect_marker_struct_definition, _field_id_irem }, // structure_version:1
		FIELD_EXPLANATION("Response delay", "If desired, you can specify a delay until the response fires.This delay is pre-empted if another timed response for the same section fires.The delay effect plays while the timer is counting down"),
		{ _field_real, "response delay", "in seconds" },
		{ _field_tag_reference, "delay effect", &effect_group_reference },
		{ _field_string_id, "delay effect marker name" },
		FIELD_EXPLANATION("Constraint destruction", "- a response can destroy a single constraint by naming it explicitly.\n- alternatively it can randomly destroy a single constraint from a specified group if the \"destroy one group constraint\" flag is set\n- also it can destroy all constraints in a specified group if the \"destroy all group constraints\" flag is set\n"),
		{ _field_string_id, "constraint/group name" },
		FIELD_EXPLANATION("seat ejaculation", nullptr),
		{ _field_string_id, "ejecting seat label" },
		FIELD_EXPLANATION("skip fraction", "0.0 always fires, 1.0 never fires"),
		{ _field_real_fraction, "skip fraction" },
		FIELD_EXPLANATION("destroyed child object marker name", "when this response fires, any children objects created at the supplied marker name will be destroyed"),
		{ _field_string_id, "destroyed child object marker name" },
		FIELD_EXPLANATION("total damage threshold", "scale on total damage section vitality"),
		{ _field_real_fraction, "total damage threshold" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$230)
	{
		"receives all damage",
		"receives area effect damage",
		"receives local damage"
	};
	STRING_LIST(unnamed_enum$230, unnamed_enum$230_strings, _countof(unnamed_enum$230_strings));

	STRINGS(unnamed_enum$231)
	{
		"none",
		"destroy one of group",
		"destroy entire group",
		"loosen one of group",
		"loosen entire group"
	};
	STRING_LIST(unnamed_enum$231, unnamed_enum$231_strings, _countof(unnamed_enum$231_strings));

	STRINGS(unnamed_enum$232)
	{
		"kills object",
		"inhibits melee attack",
		"inhibits weapon attack",
		"inhibits walking",
		"forces drop weapon",
		"kills weapon primary trigger",
		"kills weapon secondary trigger",
		"destroys object",
		"damages weapon primary trigger",
		"damages weapon secondary trigger",
		"light damage left turn",
		"major damage left turn",
		"light damage right turn",
		"major damage right turn",
		"light damage engine",
		"major damage engine",
		"kills object (no player solo)",
		"causes detonation",
		"destroy all group constraints",
		"kills variant objects",
		"force unattached effects",
		"fires under threshold",
		"triggers special death",
		"only on special death",
		"only NOT on special death"
	};
	STRING_LIST(unnamed_enum$232, unnamed_enum$232_strings, _countof(unnamed_enum$232_strings));

	VERSIONED_TAG_STRUCT(
		instantaneous_response_damage_effect_marker_struct_definition,
		"instantaneous_response_damage_effect_marker",
		"instantaneous_response_damage_effect_marker_struct_definition",
		"s_string_ids",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_string_id, "damage effect marker name" },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		instantaneous_response_damage_effect_struct_definition,
		"instantaneous_response_damage_effect",
		"instantaneous_response_damage_effect_struct_definition",
		"s_tag_reference$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_tag_reference, "transition damage effect", &damage_effect_group_reference },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		interface_tag_references_struct_definition,
		"interface_tag_references",
		"interface_tag_references_struct_definition",
		"s_game_globals_interface_tag_references",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "obsolete1", &bitmap_group_reference },
		{ _field_tag_reference, "obsolete2", &bitmap_group_reference },
		{ _field_tag_reference, "screen color table", &color_table_group_reference },
		{ _field_tag_reference, "hud color table", &color_table_group_reference },
		{ _field_tag_reference, "editor color table", &color_table_group_reference },
		{ _field_tag_reference, "dialog color table", &color_table_group_reference },
		{ _field_tag_reference, "hud globals", &hud_globals_group_reference },
		{ _field_tag_reference, "motion sensor sweep bitmap", &bitmap_group_reference },
		{ _field_tag_reference, "motion sensor sweep bitmap mask", &bitmap_group_reference },
		{ _field_tag_reference, "multiplayer hud bitmap", &bitmap_group_reference },
		{ _field_tag_reference, "value", &_reference$4 },
		{ _field_tag_reference, "hud digits definition", &hud_number_group_reference },
		{ _field_tag_reference, "motion sensor blip bitmap", &bitmap_group_reference },
		{ _field_tag_reference, "interface goo map1", &bitmap_group_reference },
		{ _field_tag_reference, "interface goo map2", &bitmap_group_reference },
		{ _field_tag_reference, "interface goo map3", &bitmap_group_reference },
		{ _field_tag_reference, "mainmenu ui globals", &user_interface_globals_definition_group_reference },
		{ _field_tag_reference, "singleplayer ui globals", &user_interface_globals_definition_group_reference },
		{ _field_tag_reference, "multiplayer ui globals", &user_interface_globals_definition_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(color_table_group_reference, COLOR_TABLE_TAG);

	TAG_REFERENCE(hud_globals_group_reference, HUD_GLOBALS_TAG);

	TAG_REFERENCE(hud_number_group_reference, HUD_NUMBER_TAG);

	TAG_REFERENCE(user_interface_globals_definition_group_reference, USER_INTERFACE_GLOBALS_DEFINITION_TAG);

	TAG_STRUCT(
		involuntary_data_block_struct_definition,
		"involuntary_data_block",
		"involuntary_data_block_struct_definition",
		"s_involuntary_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "involuntary vocalization index" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		item_block_struct_definition,
		"item_block",
		"item_block_struct_definition",
		"s_item_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("$$$ ITEM $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$197 },
		{ _field_short_integer, "OLD message index" },
		{ _field_short_integer, "sort order" },
		{ _field_real, "multiplayer on-ground scale" },
		{ _field_real, "campaign on-ground scale" },
		FIELD_EXPLANATION("NEW hud messages", "everything you need to display stuff"),
		{ _field_string_id, "pickup message" },
		{ _field_string_id, "swap message" },
		{ _field_string_id, "pickup or dual msg" },
		{ _field_string_id, "swap or dual msg" },
		{ _field_string_id, "dual-only msg" },
		{ _field_string_id, "picked up msg" },
		{ _field_string_id, "singluar quantity msg" },
		{ _field_string_id, "plural quantity msg" },
		{ _field_string_id, "switch-to msg" },
		{ _field_string_id, "switch-to from ai msg" },
		FIELD_USELESS_PAD("value", 148),
		{ _field_tag_reference, "UNUSED", &material_effects_group_reference },
		{ _field_tag_reference, "collision sound", &sound_group_reference },
		{ _field_block, "predicted bitmaps", &predicted_bitmaps_block },
		FIELD_USELESS_PAD("value", 92),
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_reference },
		{ _field_real_bounds, "detonation delay", nullptr, "seconds" },
		{ _field_tag_reference, "detonating effect", &effect_group_reference },
		{ _field_tag_reference, "detonation effect", &effect_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		item_collection_block_struct_definition,
		"item_collection_block",
		"item_collection_block_struct_definition",
		"s_item_collection_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "item permutations", &item_permutation_block },
		{ _field_short_integer, "spawn time (in seconds, 0 = default)" },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 76),
		{ _field_terminator }
	};

	TAG_STRUCT(
		item_permutation_struct_definition,
		"item_permutation",
		"item_permutation_struct_definition",
		"s_item_permutation_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "weight", "relatively how likely this item will be chosen" },
		{ _field_tag_reference, "item", "which item to ", &item_group_reference },
		{ _field_string_id, "variant name" },
		FIELD_USELESS_PAD("value", 28),
		{ _field_terminator }
	};

	TAG_STRUCT(
		large_bsp2d_nodes_block_struct_definition,
		"large_bsp2d_nodes_block",
		"large_bsp2d_nodes_block_struct_definition",
		"s_large_bsp2d_node",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_plane_2d, "plane" },
		{ _field_long_integer, "left child" },
		{ _field_long_integer, "right child" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		large_bsp2d_references_block_struct_definition,
		"large_bsp2d_references_block",
		"large_bsp2d_references_block_struct_definition",
		"s_large_bsp2d_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "plane" },
		{ _field_long_integer, "bsp2d node" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		large_bsp3d_nodes_block_struct_definition,
		"large_bsp3d_nodes_block",
		"large_bsp3d_nodes_block_struct_definition",
		"s_large_bsp3d_node",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "plane" },
		{ _field_long_integer, "back child" },
		{ _field_long_integer, "front child" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		large_edges_block_struct_definition,
		"large_edges_block",
		"large_edges_block_struct_definition",
		"s_large_collision_edge",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "start vertex" },
		{ _field_long_integer, "end vertex" },
		{ _field_long_integer, "forward edge" },
		{ _field_long_integer, "reverse edge" },
		{ _field_long_integer, "left surface" },
		{ _field_long_integer, "right surface" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		large_leaves_block_struct_definition,
		"large_leaves_block",
		"large_leaves_block_struct_definition",
		"s_large_collision_leaf",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$161 },
		{ _field_short_integer, "bsp2d reference count" },
		{ _field_long_integer, "first bsp2d reference" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$161)
	{
		"contains double-sided surfaces"
	};
	STRING_LIST(unnamed_enum$161, unnamed_enum$161_strings, _countof(unnamed_enum$161_strings));

	TAG_STRUCT(
		large_sound_permutations_block_struct_definition,
		"large_sound_permutations_block",
		"large_sound_permutations_block_struct_definition",
		"s_large_sound_permutation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name", "name of the file from which this sample was imported" },
		{ _field_real_fraction, "skip fraction", "fraction of requests to play this permutation that are ignored (a different permutation is selected.)" },
		{ _field_real, "gain", "additional attenuation when played", "dB", _field_id_decibels },
		{ _field_data, "value", &large_permutation_sound_samples },
		{ _field_data, "value", &sound_mouth_data },
		{ _field_block, "value", &sound_permutation_chunk_block },
		{ _field_short_enum, "compression", &unnamed_enum$445 },
		FIELD_PAD("value", 2),
		{ _field_data, "value", &sound_lipsync_data },
		{ _field_block, "value", &sound_permutation_marker_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$445)
	{
		"none (big endian)",
		"xbox adpcm",
		"ima adpcm",
		"none (little endian)",
		"wma",
		"opus"
	};
	STRING_LIST(unnamed_enum$445, unnamed_enum$445_strings, _countof(unnamed_enum$445_strings));

	TAG_STRUCT(
		large_sound_pitch_range_block_struct_definition,
		"large_sound_pitch_range_block",
		"large_sound_pitch_range_block_struct_definition",
		"s_large_sound_pitch_range",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name", "the name of the imported pitch range directory" },
		{ _field_real, "natural pitch", "the apparent pitch when these samples are played at their recorded pitch.", "cents", _field_id_cents },
		{ _field_real_bounds, "bend bounds", "the range of pitches that will be represented using this sample.", "cents", _field_id_cents },
		{ _field_real_bounds, "value" },
		{ _field_struct, "value", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		FIELD_PAD("value", 12),
		{ _field_block, "permutations", "permutations represent equivalent variations of this sound.", &large_sound_permutations_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		large_sound_playback_parameters_struct_definition,
		"large_sound_playback_parameters",
		"large_sound_playback_parameters_struct_definition",
		"s_large_sound_definition_playback_parameters",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 17 },
		{ _field_real, "minimum distance", "the distance below which this sound no longer gets louder", "world units" },
		{ _field_real, "maximum distance", "the distance beyond which this sound is no longer audible", "world units" },
		{ _field_real_fraction, "skip fraction", "fraction of requests to play this sound that will be ignored (0 means always play.)" },
		{ _field_real, "maximum bend per second", nullptr, "cents", _field_id_cents },
		FIELD_EXPLANATION("randomization", "these settings control random variation of volume and pitch.\n the second parameter gets clipped to the first."),
		{ _field_real, "gain base", "sound's random gain will start here", "dB", _field_id_decibels },
		{ _field_real, "gain variance", "sound's gain will be randomly modulated within this range", "dB", _field_id_decibels },
		{ _field_real_bounds, "random pitch bounds", "the sound's pitch will be modulated randomly within this range.", "cents", _field_id_cents },
		FIELD_EXPLANATION("directional sounds", "these settings allow sounds to be directional, fading as they turn away from the listener"),
		{ _field_angle, "inner cone angle", "within the cone defined by this angle and the sound's direction, the sound plays with a gain of 1.0.", "degrees" },
		{ _field_angle, "outer cone angle", "outside the cone defined by this angle and the sound's direction, the sound plays with a gain of OUTER CONE GAIN. (0 means the sound does not attenuate with direction.)", "degrees" },
		{ _field_real, "outer cone gain", "the gain to use when the sound is directed away from the listener", "dB", _field_id_decibels },
		FIELD_EXPLANATION("SCRIPTED LOCATION OVERRIDE", "NOTE: this will only apply when the sound is started via script\nazimuth:\n    0 => front\n    90 => left\n    180 => back\n    270 => right\n"),
		{ _field_long_flags, "flags", &unnamed_enum$443 },
		{ _field_angle, "azimuth" },
		{ _field_real, "positional gain", nullptr, "dB" },
		{ _field_real, "first person gain", nullptr, "dB" },
		
		{ _struct_version_mode_equal, 0, 10 },
		{ _field_real, "minimum distance", "the distance below which this sound no longer gets louder", "world units" },
		{ _field_real, "maximum distance", "the distance beyond which this sound is no longer audible", "world units" },
		{ _field_real_fraction, "skip fraction", "fraction of requests to play this sound that will be ignored (0 means always play.)" },
		{ _field_real, "maximum bend per second", nullptr, "cents", _field_id_cents },
		{ _field_real, "gain base", "sound's random gain will start here", "dB", _field_id_decibels },
		{ _field_real, "gain variance", "sound's gain will be randomly modulated within this range", "dB", _field_id_decibels },
		{ _field_real_bounds, "random pitch bounds", "the sound's pitch will be modulated randomly within this range.", "cents", _field_id_cents },
		{ _field_angle, "inner cone angle", "within the cone defined by this angle and the sound's direction, the sound plays with a gain of 1.0.", "degrees" },
		{ _field_angle, "outer cone angle", "outside the cone defined by this angle and the sound's direction, the sound plays with a gain of OUTER CONE GAIN. (0 means the sound does not attenuate with direction.)", "degrees" },
		{ _field_real, "outer cone gain", "the gain to use when the sound is directed away from the listener", "dB", _field_id_decibels },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$443)
	{
		"override azimuth",
		"override 3d gain",
		"override speaker gain"
	};
	STRING_LIST(unnamed_enum$443, unnamed_enum$443_strings, _countof(unnamed_enum$443_strings));

	TAG_STRUCT(
		large_sound_scale_modifiers_struct_struct_definition,
		"large_sound_scale_modifiers_struct",
		"large_sound_scale_modifiers_struct_struct_definition",
		"s_large_sound_definition_scale_modifiers",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("scale modifiers", "as the sound\'s input scale changes from zero to one, these modifiers move between the two values specified here. the sound will play using the current scale modifier multiplied by the values specified above. (0 values are ignored.)"),
		{ _field_real_bounds, "gain modifier", nullptr, "dB", _field_id_decibels },
		{ _field_real_bounds, "pitch modifier", nullptr, "cents", _field_id_cents },
		{ _field_real_fraction_bounds, "skip fraction modifier" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		large_surfaces_block_struct_definition,
		"large_surfaces_block",
		"large_surfaces_block_struct_definition",
		"s_large_collision_surface",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "plane" },
		{ _field_long_integer, "first edge" },
		{ _field_byte_flags, "flags", &unnamed_enum$162 },
		{ _field_char_integer, "breakable surface" },
		{ _field_short_integer, "material" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$162)
	{
		"two sided",
		"invisible",
		"climbable",
		"breakable",
		"invalid",
		"conveyor"
	};
	STRING_LIST(unnamed_enum$162, unnamed_enum$162_strings, _countof(unnamed_enum$162_strings));

	TAG_STRUCT(
		large_vertices_block_struct_definition,
		"large_vertices_block",
		"large_vertices_block_struct_definition",
		"s_large_collision_vertex",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "point" },
		{ _field_long_integer, "first edge" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		leaf_connection_vertex_block_struct_definition,
		"leaf_connection_vertex_block",
		"leaf_connection_vertex_block_struct_definition",
		"s_real_point3d$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "vertex" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		leaves_block_struct_definition,
		"leaves_block",
		"leaves_block_struct_definition",
		"s_collision_leaf",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		2)
	{
		{ _field_byte_flags, "flags", &unnamed_enum$161 },
		{ _field_char_integer, "bsp2d reference count" },
		{ _field_short_integer, "first bsp2d reference" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		lens_flare_block_struct_definition,
		"lens_flare_block",
		"lens_flare_block_struct_definition",
		"s_lens_flare_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("LENS FLARE", nullptr),
		{ _field_angle, "falloff angle", nullptr, "degrees" },
		{ _field_angle, "cutoff angle", nullptr, "degrees" },
		FIELD_SKIP("value", 4),
		FIELD_SKIP("value", 4),
		FIELD_EXPLANATION("OCCLUSION", "Occlusion factor affects overall lens flare brightness and can also affect scale. Occlusion never affects rotation."),
		{ _field_real, "occlusion radius", "radius of the square used to test occlusion", "world units" },
		{ _field_short_enum, "occlusion offset direction", &unnamed_enum$265 },
		{ _field_short_enum, "occlusion inner radius scale", &unnamed_enum$266 },
		{ _field_real, "near fade distance", "distance at which the lens flare brightness is maximum", "world units" },
		{ _field_real, "far fade distance", "distance at which the lens flare brightness is minimum; set to zero to disable distance fading", "world units" },
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_word_flags, "flags", &unnamed_enum$267 },
		FIELD_SKIP("value", 2),
		FIELD_USELESS_PAD("value", 76),
		{ _field_short_enum, "rotation function", &unnamed_enum$268 },
		FIELD_PAD("value", 2),
		{ _field_angle, "rotation function scale", nullptr, "degrees" },
		FIELD_USELESS_PAD("value", 24),
		{ _field_real_vector_2d, "corona scale", "amount to stretch the corona" },
		FIELD_EXPLANATION("EFFECT PARAMETERS", "Only affects lens flares created by effects."),
		{ _field_short_enum, "falloff function", &unnamed_enum$264 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "reflections", &lens_flare_reflection_block },
		FIELD_EXPLANATION("ANIMATION", nullptr),
		{ _field_word_flags, "flags", &unnamed_enum$270 },
		FIELD_PAD("value", 2),
		{ _field_block, "brightness", &lens_flare_scalar_animation_block },
		{ _field_block, "color", &lens_flare_color_animation_block },
		{ _field_block, "rotation", &lens_flare_scalar_animation_block },
		FIELD_USELESS_PAD("value", 4),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$265)
	{
		"toward viewer",
		"marker forward",
		"none"
	};
	STRING_LIST(unnamed_enum$265, unnamed_enum$265_strings, _countof(unnamed_enum$265_strings));

	STRINGS(unnamed_enum$266)
	{
		"none",
		"1/2",
		"1/4",
		"1/8",
		"1/16",
		"1/32",
		"1/64"
	};
	STRING_LIST(unnamed_enum$266, unnamed_enum$266_strings, _countof(unnamed_enum$266_strings));

	STRINGS(unnamed_enum$267)
	{
		"sun",
		"no occlusion test",
		"only render in first person",
		"only render in third person",
		"fade in more quickly",
		"fade out more quickly",
		"scale by marker"
	};
	STRING_LIST(unnamed_enum$267, unnamed_enum$267_strings, _countof(unnamed_enum$267_strings));

	STRINGS(unnamed_enum$268)
	{
		"none",
		"rotation A",
		"rotation B",
		"rotation-translation",
		"translation"
	};
	STRING_LIST(unnamed_enum$268, unnamed_enum$268_strings, _countof(unnamed_enum$268_strings));

	STRINGS(unnamed_enum$270)
	{
		"synchronized"
	};
	STRING_LIST(unnamed_enum$270, unnamed_enum$270_strings, _countof(unnamed_enum$270_strings));

	TAG_STRUCT(
		lens_flare_color_animation_block_struct_definition,
		"lens_flare_color_animation_block",
		"lens_flare_color_animation_block_struct_definition",
		"s_function_definition$5",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "function", &color_function_struct_struct_definition, _field_id_CLFN },
		{ _field_terminator }
	};

	TAG_STRUCT(
		lens_flare_reflection_block_struct_definition,
		"lens_flare_reflection_block",
		"lens_flare_reflection_block_struct_definition",
		"s_lens_flare_reflection",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$269 },
		FIELD_PAD("value", 2),
		{ _field_short_integer, "bitmap index" },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 20),
		{ _field_real, "position", "0 is on top of light, 1 is opposite light, 0.5 is the center of the screen, etc.", "along flare axis" },
		{ _field_real, "rotation offset", nullptr, "degrees" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real_bounds, "radius", "interpolated by external input", "world units" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real_fraction_bounds, "brightness", "interpolated by external input", nullptr, "[0,1]" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_EXPLANATION("TINT COLOR", "Tinting and modulating are not the same; \'tinting\' a reflection will color the darker regions but leave the highlights, while \'modulating\' will color everything uniformly. The modulation factor controls how much the reflection is modulated as opposed to tinted (0 is tinted, 1 is modulated)."),
		{ _field_real_fraction, "modulation factor", nullptr, nullptr, "[0,1]" },
		{ _field_real_rgb_color, "color" },
		FIELD_USELESS_PAD("value", 48),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$269)
	{
		"align rotation with screen center",
		"radius NOT scaled by distance",
		"radius scaled by occlusion factor",
		"occluded by solid objects",
		"ignore light color",
		"not affected by inner occlusion"
	};
	STRING_LIST(unnamed_enum$269, unnamed_enum$269_strings, _countof(unnamed_enum$269_strings));

	TAG_STRUCT(
		lens_flare_scalar_animation_block_struct_definition,
		"lens_flare_scalar_animation_block",
		"lens_flare_scalar_animation_block_struct_definition",
		"s_function_definition$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "function", &scalar_function_struct_struct_definition, _field_id_SCFN },
		{ _field_terminator }
	};

	TAG_STRUCT(
		light_block_struct_definition,
		"light_block",
		"light_block_struct_definition",
		"s_light_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$271 },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("SHAPE", "overall shape of the light"),
		{ _field_short_enum, "type", &unnamed_enum$18 },
		FIELD_PAD("value", 2),
		{ _field_real_bounds, "size modifer", "how the light's size changes with external scale" },
		{ _field_real, "shadow quality bias", "larger positive numbers improve quality, larger negative numbers improve speed" },
		{ _field_short_enum, "shadow tap bias", "the less taps you use, the faster the light (but edges can look worse)", &unnamed_enum$272 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 24),
		FIELD_EXPLANATION("SPHERE LIGHT", "default shape parameters for spherical lights"),
		{ _field_real, "radius", "the radius at which illumination falls off to zero", "world units" },
		{ _field_real, "specular radius", "the radius at which specular highlights fall off to zero (if zero, same as maximum radius)", "world units" },
		FIELD_USELESS_PAD("value", 32),
		FIELD_EXPLANATION("FRUSTUM LIGHT", "default shape parameters for frustum lights (orthogonal, projective or pyramid types)"),
		{ _field_real, "near width", "width of the frustum light at its near plane", "world units" },
		{ _field_real, "height stretch", "how much the gel is stretched vertically (0.0 or 1.0 = aspect ratio same as gel)" },
		{ _field_real, "field of view", "horizontal angle that the frustum light covers (0.0 = no spread, a parallel beam)", "degrees" },
		{ _field_real, "falloff distance", "distance from near plane to where the light falloff starts" },
		{ _field_real, "cutoff distance", "distance from near plane to where illumination falls off to zero" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_EXPLANATION("COLOR", nullptr),
		{ _field_long_flags, "interpolation flags", &unnamed_enum$104 },
		{ _field_real_bounds, "bloom bounds", nullptr, nullptr, "[0..2]" },
		{ _field_real_rgb_color, "specular lower bound" },
		{ _field_real_rgb_color, "specular upper bound" },
		{ _field_real_rgb_color, "diffuse lower bound" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real_rgb_color, "diffuse upper bound" },
		{ _field_real_bounds, "brightness bounds", nullptr, nullptr, "[0..2]" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_EXPLANATION("GEL", "the gel map tints the light\'s illumination per-pixel"),
		{ _field_tag_reference, "gel map", "must be a cubemap for spherical light and a 2d texture for frustum light", &bitmap_group_reference },
		{ _field_short_enum, "specular mask", &unnamed_enum$273 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 12),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 80),
		FIELD_USELESS_PAD("value", 12),
		FIELD_USELESS_PAD("value", 12),
		FIELD_USELESS_PAD("value", 12),
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("FALLOFF", nullptr),
		{ _field_short_enum, "falloff function", &unnamed_enum$274 },
		{ _field_short_enum, "diffuse contrast", &unnamed_enum$275 },
		{ _field_short_enum, "specular contrast", &unnamed_enum$276 },
		{ _field_short_enum, "falloff geometry", &unnamed_enum$277 },
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("LENS FLARE", "optional lens flare and light volume associated with this light"),
		{ _field_tag_reference, "lens flare", &lens_flare_group_reference },
		{ _field_real, "bounding radius", "used to generate a bounding radius for lensflare-only lights", "world units" },
		{ _field_tag_reference, "light volume", &light_volume_group_reference },
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("RADIOSITY", "how the light affects the lightmaps (ignored for dynamic lights)"),
		{ _field_short_enum, "default lightmap setting", &unnamed_enum$278 },
		FIELD_PAD("value", 2),
		{ _field_real, "lightmap half life" },
		{ _field_real, "lightmap light scale" },
		FIELD_USELESS_PAD("value", 20),
		FIELD_EXPLANATION("EFFECT PARAMETERS", "if the light is created by an effect, it will animate itself as follows"),
		{ _field_real, "duration", "the light will last this long when created by an effect", "seconds" },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "falloff function", "the scale of the light will diminish over time according to this function", &unnamed_enum$264 },
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("DISTANCE FADING PARAMETERS", "To fade the light\'s illumination and shadow casting abilities"),
		{ _field_short_enum, "illumination fade", &unnamed_enum$279 },
		{ _field_short_enum, "shadow fade", &unnamed_enum$279 },
		{ _field_short_enum, "specular fade", &unnamed_enum$279 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("ANIMATION PARAMETERS", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$280 },
		{ _field_block, "brightness animation", &light_brightness_animation_block },
		{ _field_block, "color animation", &light_color_animation_block },
		{ _field_block, "gel animation", &light_gel_animation_block },
		FIELD_USELESS_PAD("value", 72),
		FIELD_EXPLANATION("SHADER", nullptr),
		{ _field_tag_reference, "shader", &shader_group_reference },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$271)
	{
		"no illumination#don\'t cast any per-pixel dynamic light",
		"no specular#don\'t cast any specular highlights",
		"force cast environment shadows through portals",
		"no shadow#don\'t cast any stencil shadows",
		"force frustum visibility on small light#nobody here but us chickens...",
		"only render in first person",
		"only render in third person",
		"don\'t fade when invisible?#don\'t fade out this light when under active-camouflage",
		"multiplayer override#don\'t turn off in multiplayer",
		"animated gel",
		"only in dynamic envmap?#only draw this light in dynamic reflection maps",
		"ignore parent object#don\'t illuminate or shadow the single object we are attached to",
		"don\'t shadow parent#don\'t shadow the object we are attached to",
		"ignore all parents#don\'t illuminate or shadow all the way up to our parent object",
		"march milestone hack#don\'t click this unless you know what you\'re doing",
		"force light inside world#every update will push light back inside the world",
		"environment doesnt cast stencil shadows#environment in this light will not cast stencil shadows",
		"objects don\'t cast stencil shadows#objects in this light will not cast stencil shadows",
		"first person from camera",
		"texture camera gel",
		"light framerate killer",
		"allowed in split screen",
		"only on parent bipeds"
	};
	STRING_LIST(unnamed_enum$271, unnamed_enum$271_strings, _countof(unnamed_enum$271_strings));

	STRINGS(unnamed_enum$18)
	{
		"sphere",
		"orthogonal",
		"projective",
		"pyramid"
	};
	STRING_LIST(unnamed_enum$18, unnamed_enum$18_strings, _countof(unnamed_enum$18_strings));

	STRINGS(unnamed_enum$272)
	{
		"3 tap",
		"UNUSED",
		"1 tap"
	};
	STRING_LIST(unnamed_enum$272, unnamed_enum$272_strings, _countof(unnamed_enum$272_strings));

	STRINGS(unnamed_enum$273)
	{
		"default",
		"none (no mask)",
		"gel alpha",
		"gel color"
	};
	STRING_LIST(unnamed_enum$273, unnamed_enum$273_strings, _countof(unnamed_enum$273_strings));

	STRINGS(unnamed_enum$274)
	{
		"default",
		"narrow",
		"broad",
		"very broad"
	};
	STRING_LIST(unnamed_enum$274, unnamed_enum$274_strings, _countof(unnamed_enum$274_strings));

	STRINGS(unnamed_enum$275)
	{
		"default (linear)",
		"high",
		"low",
		"very low"
	};
	STRING_LIST(unnamed_enum$275, unnamed_enum$275_strings, _countof(unnamed_enum$275_strings));

	STRINGS(unnamed_enum$276)
	{
		"default (one)",
		"high (linear)",
		"low",
		"very low"
	};
	STRING_LIST(unnamed_enum$276, unnamed_enum$276_strings, _countof(unnamed_enum$276_strings));

	STRINGS(unnamed_enum$277)
	{
		"default",
		"directional",
		"spherical"
	};
	STRING_LIST(unnamed_enum$277, unnamed_enum$277_strings, _countof(unnamed_enum$277_strings));

	TAG_REFERENCE(lens_flare_group_reference, LENS_FLARE_TAG);

	TAG_REFERENCE(light_volume_group_reference, LIGHT_VOLUME_TAG);

	STRINGS(unnamed_enum$278)
	{
		"dynamic only",
		"dynamic with lightmaps",
		"lightmaps only"
	};
	STRING_LIST(unnamed_enum$278, unnamed_enum$278_strings, _countof(unnamed_enum$278_strings));

	STRINGS(unnamed_enum$279)
	{
		"fade very far",
		"fade far",
		"fade medium",
		"fade close",
		"fade very close"
	};
	STRING_LIST(unnamed_enum$279, unnamed_enum$279_strings, _countof(unnamed_enum$279_strings));

	STRINGS(unnamed_enum$280)
	{
		"synchronized"
	};
	STRING_LIST(unnamed_enum$280, unnamed_enum$280_strings, _countof(unnamed_enum$280_strings));

	TAG_STRUCT(
		light_brightness_animation_block_struct_definition,
		"light_brightness_animation_block",
		"light_brightness_animation_block_struct_definition",
		"s_light_brightness_animation_parameters",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("function", _field_id_function_editor),
		{ _field_struct, "function", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_terminator }
	};

	TAG_STRUCT(
		light_color_animation_block_struct_definition,
		"light_color_animation_block",
		"light_color_animation_block_struct_definition",
		"s_light_color_animation_parameters",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("function", _field_id_function_editor),
		{ _field_struct, "function", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_terminator }
	};

	TAG_STRUCT(
		light_gel_animation_block_struct_definition,
		"light_gel_animation_block",
		"light_gel_animation_block_struct_definition",
		"s_light_gel_animation_parameters",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("dx", _field_id_function_editor),
		{ _field_struct, "dx", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		FIELD_CUSTOM("dy", _field_id_function_editor),
		{ _field_struct, "dy", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_terminator }
	};

	TAG_STRUCT(
		light_volume_aspect_block_struct_definition,
		"light_volume_aspect_block",
		"light_volume_aspect_block_struct_definition",
		"s_light_volume_aspect",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("SCALE FACTORS", "These function control the screenspace aspect ratio of each sprite relative to the projected forward axis. Note that there is no range-input to these functions, because it would not make sense to stretch sprites when the light volume is facing directly towards or away from the camera (which way would we stretch them?)"),
		FIELD_EXPLANATION("ALONG-AXIS SCALE", "Values higher than 1 along the axis will cause sprites to elongate and overlap more regardless of the orientation of the light volume, whereas values lower than 1 will cause sprite separation."),
		{ _field_struct, "along axis", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_EXPLANATION("AWAY-FROM-AXIS SCALE", "Values higher than 1 away from the axis will cause the light volume to appear thicker."),
		{ _field_struct, "away from axis", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_EXPLANATION("PARALLEL SCALE", "When the light volume is viewed directly towards (parallel) or away from the camera, the scale factors above are interpolated towards this constant value. The threshold angle controls when the light volume is considered to be 100% parallel for these computations. The exponent controls how quickly the transition from using the perpendicular scale factors to using the parallel scale factor happens, e.g.:\n\n* exponent=0.0 -> perpendicular scale factors will always be used unless below threshold angle\n* exponent=0.1 -> transition quickly as viewing angle becomes perpendicular\n* exponent=1.0 -> transition smoothly between perpendicular and parallel\n* exponent=9.0 -> transition quickly as viewing angle becomes parallel"),
		{ _field_real, "parallel scale" },
		{ _field_angle, "parallel threshold angle", nullptr, "degrees" },
		{ _field_real, "parallel exponent" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		light_volume_block_struct_definition,
		"light_volume_block",
		"light_volume_block_struct_definition",
		"s_light_volume_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("LIGHT VOLUME", "Light volumes are rendered as a sequence of glowy sprites, just like in Metal Gear Solid 2. Each instance of the light volume is rendered separately; this allows, for example, a narrow bright white volume to be overlaid on top of a fuzzy wide colored volume, or anything else you want!"),
		FIELD_USELESS_PAD("value", 64),
		{ _field_real, "falloff distance from camera", nullptr, "world units" },
		{ _field_real, "cutoff distance from camera", nullptr, "world units" },
		FIELD_USELESS_PAD("value", 32),
		{ _field_block, "volumes", &light_volume_volume_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		light_volume_runtime_offset_block_struct_definition,
		"light_volume_runtime_offset_block",
		"light_volume_runtime_offset_block_struct_definition",
		"s_real_vector2d",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_vector_2d, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		light_volume_volume_block_struct_definition,
		"light_volume_volume_block",
		"light_volume_volume_block_struct_definition",
		"s_light_volume",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("VOLUME", "If no bitmap is selected, the default glow bitmap will be used. Sprite count controls how many sprites are used to render this volume. Using more sprites will result in a smoother and brighter effect, at a slight performance penalty. Don\'t touch the flags unless you know what you\'re doing (they should be off by default).\n\nBe careful with the \'fuzzy\' flag! It should be used on very wide light volumes to make them blend smoothly into solid geometry rather than \"cutting\" into the zbuffer. Using this feature will make light volumes several times slower when they fill a large portion of the screen."),
		{ _field_long_flags, "flags", &unnamed_enum$34 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_long_integer, "sprite count", nullptr, nullptr, "[4,256]" },
		FIELD_USELESS_PAD("value", 32),
		FIELD_EXPLANATION("OFFSET", "This function controls the offset along the projected forward axis of the light volume. The output range of this function is the distance in WORLD UNITS from the origin where the first and last sprite are rendered. The input to this function is the fractional value (from 0 to 1) along the projected axis. Using a transition function such as \"late\" will result in more sprites being bunched up towards the origin and spaced further apart near the end.\n\nNote that this and other functions in this tag have a range-input, which is controlled by the output of the FACING function below."),
		{ _field_struct, "offset function", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_EXPLANATION("RADIUS", "This function controls the radius in WORLD UNITS of each sprite along the projected forward axis. Using a smaller min value and a larger max value results in a light volume that looks like a cone."),
		{ _field_struct, "radius function", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_EXPLANATION("BRIGHTNESS", "This function controls the overall brightness (in [0,1]) of each sprite along the projected forward axis. Note that since the sprites are additive, they will be brighter in areas where they overlap more even if this function is constant, so it may be useful to use the brightness function to compensate for this."),
		{ _field_struct, "brightness function", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_EXPLANATION("COLOR", "This function controls the color of each sprite along the projected forward axis. Color is multiplied by brightness to produce the final color that will be applied to the sprite."),
		{ _field_struct, "color function", &color_function_struct_struct_definition, _field_id_CLFN },
		FIELD_USELESS_PAD("value", 64),
		FIELD_EXPLANATION("FACING", "The input to this function is the facing angle between the light volume and the camera. Zero represents facing towards (parallel) or away from the camera and 1.0 represents facing perpendicular to the camera.\n\nThe output of this function is fed into the range-input of the functions above."),
		{ _field_struct, "facing function", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_USELESS_PAD("value", 64),
		{ _field_block, "aspect", &light_volume_aspect_block },
		FIELD_USELESS_PAD("value", 64),
		FIELD_EXPLANATION("POSTPROCESS CONTROL", "ADVANCED STUFF!! Don\'t change these values!!"),
		{ _field_real_fraction, "radius frac min", nullptr, nullptr, "[0.00390625, 1.0]" },
		{ _field_real_fraction, "DEPRECATED!! x-step exponent", nullptr, nullptr, "[0.5, 0.875]" },
		{ _field_long_integer, "DEPRECATED!! x-buffer length", nullptr, nullptr, "[32, 512]" },
		{ _field_long_integer, "x-buffer spacing", nullptr, nullptr, "[1, 256]" },
		{ _field_long_integer, "x-buffer min iterations", nullptr, nullptr, "[1, 256]" },
		{ _field_long_integer, "x-buffer max iterations", nullptr, nullptr, "[1, 256]" },
		{ _field_real_fraction, "x-delta max error", nullptr, nullptr, "[0.001, 0.1]" },
		FIELD_USELESS_PAD("value", 48),
		FIELD_SKIP("value", 4),
		{ _field_block, "value", &light_volume_runtime_offset_block },
		FIELD_SKIP("value", 48),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$34)
	{
		"force linear radius function",
		"force linear offset",
		"force differential evaluation",
		"fuzzy",
		"not scaled by event duration",
		"scaled by marker"
	};
	STRING_LIST(unnamed_enum$34, unnamed_enum$34_strings, _countof(unnamed_enum$34_strings));

	TAG_STRUCT(
		lighting_variables_block_struct_definition,
		"lighting_variables_block",
		"lighting_variables_block_struct_definition",
		"s_lighting_variables",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "object affected", &unnamed_enum$202 },
		FIELD_EXPLANATION("Global lightmap sample", nullptr),
		{ _field_real, "Lightmap brightness offset" },
		{ _field_struct, "primary light", &primary_light_struct_struct_definition, _field_id_prli },
		{ _field_struct, "secondary light", &secondary_light_struct_struct_definition, _field_id_scli },
		{ _field_struct, "ambient light", &ambient_light_struct_struct_definition, _field_id_amli },
		{ _field_struct, "lightmap shadows", &lightmap_shadows_struct_struct_definition, _field_id_lmsh },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$202)
	{
		"all",
		"biped",
		"vehicle",
		"weapon",
		"equipment",
		"garbage",
		"projectile",
		"scenery",
		"machine",
		"control",
		"light fixture",
		"sound scenery",
		"crate",
		"creature"
	};
	STRING_LIST(unnamed_enum$202, unnamed_enum$202_strings, _countof(unnamed_enum$202_strings));

	TAG_STRUCT(
		lightmap_bucket_raw_vertex_block_struct_definition,
		"lightmap_bucket_raw_vertex_block",
		"lightmap_bucket_raw_vertex_block_struct_definition",
		"s_lightmap_bucket_vertex",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_rgb_color, "primary lightmap color" },
		{ _field_real_vector_3d, "primary lightmap incident direction" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		lightmap_geometry_render_info_block_struct_definition,
		"lightmap_geometry_render_info_block",
		"lightmap_geometry_render_info_block_struct_definition",
		"s_lightmap_geometry_render_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "bitmap index" },
		{ _field_char_integer, "palette index" },
		FIELD_PAD("value", 1),
		{ _field_terminator }
	};

	TAG_STRUCT(
		lightmap_geometry_section_block_struct_definition,
		"lightmap_geometry_section_block",
		"lightmap_geometry_section_block_struct_definition",
		"s_lightmap_geometry_section",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "geometry info", &global_geometry_section_info_struct_struct_definition, _field_id_SINF },
		{ _field_struct, "geometry block info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		{ _field_block, "cache data", &lightmap_geometry_section_cache_data_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		lightmap_geometry_section_cache_data_block_struct_definition,
		"lightmap_geometry_section_cache_data_block",
		"lightmap_geometry_section_cache_data_block_struct_definition",
		"s_lightmap_geometry_section_cache_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "geometry", &geometry_section_fieldset_new_struct_definition, _field_id_SECT }, // structure_version:1
		{ _field_terminator }
	};

	TAG_STRUCT(
		lightmap_instance_bucket_reference_block_struct_definition,
		"lightmap_instance_bucket_reference_block",
		"lightmap_instance_bucket_reference_block_struct_definition",
		"s_lightmap_bucket_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "flags" },
		{ _field_short_integer, "bucket index" },
		{ _field_block, "section offsets", &lightmap_instance_bucket_section_offset_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		lightmap_instance_bucket_section_offset_block_struct_definition,
		"lightmap_instance_bucket_section_offset_block",
		"lightmap_instance_bucket_section_offset_block_struct_definition",
		"s_word$5",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "section offset" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		lightmap_scenery_object_info_block_struct_definition,
		"lightmap_scenery_object_info_block",
		"lightmap_scenery_object_info_block_struct_definition",
		"s_lightmap_scenery_object_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "unique ID" },
		{ _field_short_integer, "origin BSP index" },
		{ _field_char_integer, "type" },
		{ _field_char_integer, "source" },
		{ _field_long_integer, "render model checksum" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		lightmap_shadows_struct_struct_definition,
		"lightmap_shadows_struct",
		"lightmap_shadows_struct_struct_definition",
		"s_lightmap_shadows",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("Lightmap shadows", "Shadows generated by the lightmaps get direction from lightmap primary incoming light direction and darken based on how accurate that light is fed into the function below"),
		FIELD_CUSTOM("accuracy function", _field_id_function_editor),
		{ _field_struct, "function 1", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_terminator }
	};

	TAG_STRUCT(
		lightmap_vertex_buffer_bucket_block_struct_definition,
		"lightmap_vertex_buffer_bucket_block",
		"lightmap_vertex_buffer_bucket_block_struct_definition",
		"s_lightmap_vertex_buffer_bucket",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$296 },
		FIELD_PAD("value", 2),
		{ _field_block, "raw vertices", &lightmap_bucket_raw_vertex_block },
		{ _field_struct, "geometry block info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		{ _field_block, "cache data", &lightmap_vertex_buffer_bucket_cache_data_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$296)
	{
		"incident direction",
		"color"
	};
	STRING_LIST(unnamed_enum$296, unnamed_enum$296_strings, _countof(unnamed_enum$296_strings));

	TAG_STRUCT(
		lightmap_vertex_buffer_bucket_cache_data_block_struct_definition,
		"lightmap_vertex_buffer_bucket_cache_data_block",
		"lightmap_vertex_buffer_bucket_cache_data_block_struct_definition",
		"s_lightmap_vertex_buffer_bucket_cache_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "vertex buffers", &global_geometry_section_vertex_buffer_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		limited_hinge_constraints_block_struct_definition,
		"limited_hinge_constraints_block",
		"limited_hinge_constraints_block_struct_definition",
		"s_physics_model_limited_hinge_constraint",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "constraint bodies", &constraint_bodies_struct_struct_definition, _field_id_csbs },
		FIELD_PAD("value", 4),
		{ _field_real, "limit friction" },
		{ _field_real, "limit min angle" },
		{ _field_real, "limit max angle" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		links_v2_struct_definition,
		"links_v2",
		"links_v2_struct_definition",
		"s_sector_link",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 3, 8 },
		{ _field_short_integer, "vertex 1" },
		{ _field_short_integer, "vertex 2" },
		{ _field_word_flags, "link flags", &unnamed_enum$373 },
		{ _field_short_integer, "hint index" },
		{ _field_short_integer, "forward link" },
		{ _field_short_integer, "reverse link" },
		{ _field_short_integer, "left sector" },
		{ _field_short_integer, "right sector" },
		
		{ _struct_version_mode_equal, 2, 8 },
		{ _field_short_integer, "vertex 1" },
		{ _field_short_integer, "vertex 2" },
		{ _field_word_flags, "link flags", &unnamed_enum$373 },
		{ _field_short_integer, "hint index" },
		{ _field_long_integer, "forward link" },
		{ _field_long_integer, "reverse link" },
		{ _field_short_integer, "left sector" },
		{ _field_short_integer, "right sector" },
		
		{ _struct_version_mode_equal, 1, 8 },
		{ _field_short_integer, "vertex 1" },
		{ _field_short_integer, "vertex 2" },
		{ _field_word_flags, "link flags", &unnamed_enum$373 },
		{ _field_short_integer, "hint index" },
		{ _field_short_integer, "forward link" },
		{ _field_short_integer, "reverse link" },
		{ _field_short_integer, "left sector" },
		{ _field_short_integer, "right sector" },
		
		{ _struct_version_mode_equal, 0, 8 },
		{ _field_long_integer, "Index" },
		{ _field_long_integer, "Index2 (for vertex-indices)" },
		{ _field_word_flags, "link flags", &unnamed_enum$373 },
		{ _field_short_integer, "hint index" },
		{ _field_long_integer, "forward link" },
		{ _field_long_integer, "reverse link" },
		{ _field_long_integer, "left sector" },
		{ _field_long_integer, "right sector" },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$373)
	{
		"sector link from collision edge",
		"sector intersection link",
		"sector link bsp2d creation error",
		"sector link topology error",
		"sector link chain error",
		"sector link both sectors walkable",
		"sector link magic hanging link",
		"sector link threshold",
		"sector link crouchable",
		"sector link wall base",
		"sector link ledge",
		"sector link leanable",
		"sector link start corner",
		"sector link end corner"
	};
	STRING_LIST(unnamed_enum$373, unnamed_enum$373_strings, _countof(unnamed_enum$373_strings));

	TAG_STRUCT(
		liquid_arc_block_struct_definition,
		"liquid_arc_block",
		"liquid_arc_block_struct_definition",
		"s_liquid_arc",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("LIQUID ARC", "Note that if the type is not STANDARD, then the \'collide_with_stuff\' and material effects will not have any effect. In addition, the \'natural_length\' will not have an effect except as a means to compute the collision fraction."),
		{ _field_word_flags, "flags", &unnamed_enum$493 },
		{ _field_short_enum, "sprite count", &unnamed_enum$494 },
		{ _field_real, "natural length", nullptr, "world units" },
		{ _field_short_integer, "instances" },
		FIELD_PAD("value", 2),
		{ _field_angle, "instance spread angle", nullptr, "degrees" },
		{ _field_real, "instance rotation period", nullptr, "seconds" },
		FIELD_PAD("value", 8),
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		FIELD_PAD("value", 8),
		FIELD_EXPLANATION("HORIZONTAL RANGE", "In world units, how far the noise extends horizontally. By default the horizontal range is along the world XY plane."),
		{ _field_struct, "horizontal range", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_EXPLANATION("VERTICAL RANGE", "In world units, how far the noise extends vertically. By default the vertical range is along the world Z axis (up)."),
		{ _field_struct, "vertical range", &scalar_function_struct_struct_definition, _field_id_SCFN },
		{ _field_real_fraction, "vertical negative scale", nullptr, nullptr, "[0,1]" },
		FIELD_EXPLANATION("ROUGHNESS", "Roughness controls how the different \'octaves\' of noise get scaled. Usually it is in the range [0,1] but it can be slightly higher or lower and still make sense (zero is actually a pretty decent value). The mathematical equation used is 2^(-k*(1-r)) where \'k\' is the octave index starting at 0 and \'r\' is the roughness value."),
		{ _field_struct, "roughness", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_PAD("value", 64),
		FIELD_EXPLANATION("NOISE FREQUENCIES", "4 sprites is 3 octaves\n8 sprites is 4 octaves\n16 sprites is 5 octaves\n32 sprites is 6 octaves\n64 sprites is 7 octaves\n128 sprites is 8 octaves\n256 sprites is 9 octaves, etc."),
		{ _field_real, "octave 1 frequency", nullptr, "cycles/second" },
		{ _field_real, "octave 2 frequency", nullptr, "cycles/second" },
		{ _field_real, "octave 3 frequency", nullptr, "cycles/second" },
		{ _field_real, "octave 4 frequency", nullptr, "cycles/second" },
		{ _field_real, "octave 5 frequency", nullptr, "cycles/second" },
		{ _field_real, "octave 6 frequency", nullptr, "cycles/second" },
		{ _field_real, "octave 7 frequency", nullptr, "cycles/second" },
		{ _field_real, "octave 8 frequency", nullptr, "cycles/second" },
		{ _field_real, "octave 9 frequency", nullptr, "cycles/second" },
		FIELD_PAD("value", 28),
		{ _field_word_flags, "octave flags", &unnamed_enum$495 },
		FIELD_PAD("value", 2),
		{ _field_block, "cores", &liquid_core_block },
		FIELD_EXPLANATION("RANGE-COLLISION SCALE", "Scales range (amplitude) by collision fraction. The input to the function will be 1 if there is no collision, and 0 if the collision occurs at the origin."),
		{ _field_struct, "range-scale", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_EXPLANATION("BRIGHTNESS-COLLISION SCALE", "Scales brightness by collision fraction."),
		{ _field_struct, "brightness-scale", &scalar_function_struct_struct_definition, _field_id_SCFN },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$493)
	{
		"basis marker-relative",
		"spread by external input",
		"collide with stuff",
		"no perspective midpoints"
	};
	STRING_LIST(unnamed_enum$493, unnamed_enum$493_strings, _countof(unnamed_enum$493_strings));

	STRINGS(unnamed_enum$494)
	{
		"4 sprites",
		"8 sprites",
		"16 sprites",
		"32 sprites",
		"64 sprites",
		"128 sprites",
		"256 sprites"
	};
	STRING_LIST(unnamed_enum$494, unnamed_enum$494_strings, _countof(unnamed_enum$494_strings));

	STRINGS(unnamed_enum$495)
	{
		"octave 1",
		"octave 2",
		"octave 3",
		"octave 4",
		"octave 5",
		"octave 6",
		"octave 7",
		"octave 8",
		"octave 9"
	};
	STRING_LIST(unnamed_enum$495, unnamed_enum$495_strings, _countof(unnamed_enum$495_strings));

	TAG_STRUCT(
		liquid_block_struct_definition,
		"liquid_block",
		"liquid_block_struct_definition",
		"s_liquid_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("LIQUID", nullptr),
		FIELD_PAD("value", 2),
		{ _field_short_enum, "type", &unnamed_enum$492 },
		{ _field_string_id, "attachment marker name" },
		FIELD_PAD("value", 56),
		{ _field_real, "falloff distance from camera", nullptr, "world units" },
		{ _field_real, "cutoff distance from camera", nullptr, "world units" },
		FIELD_PAD("value", 32),
		{ _field_block, "arcs", &liquid_arc_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$492)
	{
		"standard",
		"weapon to projectile",
		"projectile from weapon"
	};
	STRING_LIST(unnamed_enum$492, unnamed_enum$492_strings, _countof(unnamed_enum$492_strings));

	TAG_STRUCT(
		liquid_core_block_struct_definition,
		"liquid_core_block",
		"liquid_core_block_struct_definition",
		"s_liquid_core",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 12),
		{ _field_short_integer, "bitmap index" },
		FIELD_PAD("value", 2),
		FIELD_EXPLANATION("THICKNESS", "In world units."),
		{ _field_struct, "thickness", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_EXPLANATION("COLOR", nullptr),
		{ _field_struct, "color", &color_function_struct_struct_definition, _field_id_CLFN },
		FIELD_EXPLANATION("BRIGHTNESS/TIME", "Periodic function based on time."),
		{ _field_struct, "brightness-time", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_EXPLANATION("BRIGHTNESS/FACING", "Brightness when facing perpendicular versus parallel."),
		{ _field_struct, "brightness-facing", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_EXPLANATION("ALONG-AXIS SCALE", "Scale along-axis. Default should be 1."),
		{ _field_struct, "along-axis scale", &scalar_function_struct_struct_definition, _field_id_SCFN },
		{ _field_terminator }
	};

	TAG_STRUCT(
		list_reference_block_struct_definition,
		"list_reference_block",
		"list_reference_block_struct_definition",
		"s_list_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$539 },
		{ _field_short_enum, "skin index", &unnamed_enum$540 },
		{ _field_short_integer, "num. visible items" },
		{ _field_point_2d, "bottom left" },
		{ _field_short_enum, "animation index", &unnamed_enum$424 },
		{ _field_short_integer, "intro animation delay milliseconds" },
		FIELD_EXPLANATION("UNUSED", "This is unused"),
		{ _field_block, "UNUSED", &s_text_value_pair_reference_block_unused_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$539)
	{
		"list wraps",
		"interactive"
	};
	STRING_LIST(unnamed_enum$539, unnamed_enum$539_strings, _countof(unnamed_enum$539_strings));

	STRINGS(unnamed_enum$540)
	{
		"default",
		"squad lobby player list",
		"settings list",
		"playlist entry list",
		"variants",
		"game browser",
		"online player menu",
		"game setup menu",
		"playlist contents display",
		"player profile picker",
		"mp map selection",
		"main menu list",
		"color picker",
		"profile picker",
		"y menu recent list",
		"pcr team stats",
		"pcr player stats",
		"pcr kill stats",
		"pcr pvp stats",
		"pcr medal stats",
		"matchmaking progress",
		"default 5",
		"default 6",
		"advanced settings list",
		"live game browser",
		"default wide",
		"unused26",
		"unused27",
		"unused28",
		"unused29",
		"unused30",
		"unused31"
	};
	STRING_LIST(unnamed_enum$540, unnamed_enum$540_strings, _countof(unnamed_enum$540_strings));

	TAG_STRUCT(
		list_shapes_block_struct_definition,
		"list_shapes_block",
		"list_shapes_block_struct_definition",
		"s_hklistshapechildinfo",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_pointer, "value" },
		FIELD_PAD("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_terminator }
	};

	TAG_STRUCT(
		list_skin_reference_block_struct_definition,
		"list_skin_reference_block",
		"list_skin_reference_block_struct_definition",
		"s_user_interface_list_skin_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "list item skins", &user_interface_list_skin_definition_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(user_interface_list_skin_definition_group_reference, USER_INTERFACE_LIST_SKIN_DEFINITION_TAG);

	TAG_STRUCT(
		lists_block_struct_definition,
		"lists_block",
		"lists_block_struct_definition",
		"s_physics_model_list",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "value" },
		{ _field_long_integer, "child shapes size" },
		{ _field_long_integer, "child shapes capacity" },
		{ _field_array, "child shapes storage", &unnamed_array$46 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		local_bitmap_reference_block_struct_definition,
		"local_bitmap_reference_block",
		"local_bitmap_reference_block_struct_definition",
		"s_local_bitmap_reference$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		local_string_id_list_section_reference_block_struct_definition,
		"local_string_id_list_section_reference_block",
		"local_string_id_list_section_reference_block_struct_definition",
		"s_local_string_id_list_section_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "section name" },
		{ _field_block, "local string section references", &local_string_id_list_string_reference_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		local_string_id_list_string_reference_block_struct_definition,
		"local_string_id_list_string_reference_block",
		"local_string_id_list_string_reference_block_struct_definition",
		"s_local_string_id_list_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "string id" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		long_block_struct_definition,
		"long_block",
		"long_block_struct_definition",
		"s_long$5",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "bitmap group index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		look_function_block_struct_definition,
		"look_function_block",
		"look_function_block_struct_definition",
		"s_real$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "scale" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		looping_sound_detail_struct_definition,
		"looping_sound_detail",
		"looping_sound_detail_struct_definition",
		"s_looping_sound_detail",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 10 },
		{ _field_string_id, "name" },
		{ _field_tag_reference, "sound", &sound_group_reference },
		FIELD_EXPLANATION("frequency of play", nullptr),
		{ _field_real_bounds, "random period bounds", "the time between successive playings of this sound will be randomly selected from this range.", "seconds" },
		{ _field_real, "value", _field_id_decibels },
		{ _field_long_flags, "flags", &unnamed_enum$284 },
		FIELD_EXPLANATION("random spatialization", "if the sound specified above is not stereo it will be randomly spatialized according to the following constraints. if both lower and upper bounds are zero for any of the following fields, the sound\'s position will be randomly selected from all possible directions or distances."),
		{ _field_angle_bounds, "yaw bounds", "the sound's position along the horizon will be randomly selected from this range.", "degrees" },
		{ _field_angle_bounds, "pitch bounds", "the sound's position above (positive values) or below (negative values) the horizon will be randomly selected from this range.", "degrees" },
		{ _field_real_bounds, "distance bounds", "the sound's distance (from its spatialized looping sound or from the listener if the looping sound is stereo) will be randomly selected from this range.", "world units" },
		
		{ _struct_version_mode_equal, 0, 10 },
		{ _field_tag_reference, "sound", &sound_group_reference },
		FIELD_EXPLANATION("frequency of play", nullptr),
		{ _field_real_bounds, "random period bounds", "the time between successive playings of this sound will be randomly selected from this range.", "seconds" },
		{ _field_real, "gain", nullptr, "dB" },
		{ _field_long_flags, "flags", &unnamed_enum$284 },
		FIELD_PAD("value", 48),
		FIELD_EXPLANATION("random spatialization", "if the sound specified above is not stereo it will be randomly spatialized according to the following constraints. if both lower and upper bounds are zero for any of the following fields, the sound\'s position will be randomly selected from all possible directions or distances."),
		{ _field_angle_bounds, "yaw bounds", "the sound's position along the horizon will be randomly selected from this range.", "degrees" },
		{ _field_angle_bounds, "pitch bounds", "the sound's position above (positive values) or below (negative values) the horizon will be randomly selected from this range.", "degrees" },
		{ _field_real_bounds, "distance bounds", "the sound's distance (from its spatialized looping sound or from the listener if the looping sound is stereo) will be randomly selected from this range.", "world units" },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$284)
	{
		"don\'t play with alternate",
		"don\'t play without alternate",
		"start immediately with loop"
	};
	STRING_LIST(unnamed_enum$284, unnamed_enum$284_strings, _countof(unnamed_enum$284_strings));

	VERSIONED_TAG_STRUCT(
		looping_sound_struct_definition,
		"looping_sound",
		"looping_sound_struct_definition",
		"s_looping_sound_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 3, 8 },
		{ _field_tag_reference, "remastered looping sound", &sound_looping_group_reference },
		{ _field_long_flags, "flags", &unnamed_enum$281 },
		{ _field_real, "marty's music time", nullptr, "seconds" },
		{ _field_real, "value" },
		FIELD_PAD("value", 8),
		{ _field_tag_reference, "value", &_reference },
		{ _field_block, "tracks", "tracks play in parallel and loop continuously for the duration of the looping sound.", &looping_sound_track_block },
		{ _field_block, "detail sounds", "detail sounds play at random throughout the duration of the looping sound.", &looping_sound_detail_block },
		
		{ _struct_version_mode_equal, 2, 7 },
		{ _field_long_flags, "flags", &unnamed_enum$281 },
		{ _field_real, "marty's music time", nullptr, "seconds" },
		{ _field_real, "value" },
		FIELD_PAD("value", 8),
		{ _field_tag_reference, "value", &_reference },
		{ _field_block, "tracks", "tracks play in parallel and loop continuously for the duration of the looping sound.", &looping_sound_track_block },
		{ _field_block, "detail sounds", "detail sounds play at random throughout the duration of the looping sound.", &looping_sound_detail_block },
		
		{ _struct_version_mode_equal, 1, 7 },
		{ _field_long_flags, "flags", &unnamed_enum$281 },
		{ _field_real, "marty's music time", nullptr, "seconds" },
		{ _field_real, "value" },
		FIELD_PAD("value", 8),
		{ _field_tag_reference, "value", &_reference },
		{ _field_block, "tracks", "tracks play in parallel and loop continuously for the duration of the looping sound.", &looping_sound_track_block },
		{ _field_block, "detail sounds", "detail sounds play at random throughout the duration of the looping sound.", &looping_sound_detail_block },
		
		{ _struct_version_mode_equal, 0, 11 },
		{ _field_long_flags, "flags", &unnamed_enum$281 },
		FIELD_EXPLANATION("when scale is ZERO", "as the sound\'s input scale changes from zero to one, these modifiers move between the two values specified here. the sound will play using the current scale modifier multiplied by the value specified below. (0 values are ignored.)"),
		{ _field_real, "detail sound period" },
		FIELD_PAD("value", 8),
		FIELD_EXPLANATION("when scale is ONE", "as the sound\'s input scale changes from zero to one, these modifiers move between the two values specified here. the sound will play using the current scale modifier multiplied by the value specified below. (0 values are ignored.)"),
		{ _field_real, "detail sound period" },
		FIELD_PAD("value", 8),
		FIELD_PAD("value", 16),
		{ _field_tag_reference, "continuous damage effect", &_reference },
		{ _field_block, "tracks", "tracks play in parallel and loop continuously for the duration of the looping sound.", &looping_sound_track_block },
		{ _field_block, "detail sounds", "detail sounds play at random throughout the duration of the looping sound.", &looping_sound_detail_block },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$281)
	{
		"deafening to AIs#when used as a background stereo track, causes nearby AIs to be unable to hear",
		"not a loop#this is a collection of permutations strung together that should play once then stop.",
		"stops music#all other music loops will stop when this one starts.",
		"always spatialize#always play as 3d sound, even in first person",
		"synchronize playback#synchronizes playback with other looping sounds attached to the owner of this sound",
		"synchronize tracks",
		"fake spatialization with distance",
		"combine all 3d playback",
		"legacy only",
		"remastered only"
	};
	STRING_LIST(unnamed_enum$281, unnamed_enum$281_strings, _countof(unnamed_enum$281_strings));

	TAG_REFERENCE(_reference, INVALID_TAG);

	VERSIONED_TAG_STRUCT(
		looping_sound_track_struct_definition,
		"looping_sound_track",
		"looping_sound_track_struct_definition",
		"s_looping_sound_track",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 17 },
		{ _field_string_id, "name" },
		{ _field_long_flags, "flags", &unnamed_enum$282 },
		{ _field_real, "gain", nullptr, "dB", _field_id_decibels },
		{ _field_real, "fade in duration", nullptr, "seconds" },
		{ _field_real, "fade out duration", nullptr, "seconds" },
		{ _field_tag_reference, "in", &sound_group_reference },
		{ _field_tag_reference, "loop", &sound_group_reference },
		{ _field_tag_reference, "out", &sound_group_reference },
		{ _field_tag_reference, "alt loop", &sound_group_reference },
		{ _field_tag_reference, "alt out", &sound_group_reference },
		FIELD_USELESS_PAD("value", 12),
		{ _field_short_enum, "output effect", &unnamed_enum$283 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "alt trans in", &sound_group_reference },
		{ _field_tag_reference, "alt trans out", &sound_group_reference },
		{ _field_real, "alt crossfade duration", nullptr, "seconds" },
		{ _field_real, "alt fade out duration", nullptr, "seconds" },
		
		{ _struct_version_mode_equal, 0, 11 },
		{ _field_long_flags, "flags", &unnamed_enum$282 },
		{ _field_real, "gain", nullptr, "dB" },
		{ _field_real, "fade in duration", nullptr, "seconds" },
		{ _field_real, "fade out duration", nullptr, "seconds" },
		FIELD_PAD("value", 32),
		{ _field_tag_reference, "start", &sound_group_reference },
		{ _field_tag_reference, "loop", &sound_group_reference },
		{ _field_tag_reference, "end", &sound_group_reference },
		FIELD_PAD("value", 32),
		{ _field_tag_reference, "alternate loop", &sound_group_reference },
		{ _field_tag_reference, "alternate end", &sound_group_reference },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$282)
	{
		"fade in at start#the loop sound should fade in while the start sound is playing.",
		"fade out at stop#the loop sound should fade out while the stop sound is playing.",
		"crossfade alt loop#when the sound changes to the alternate version,  .",
		"master surround sound track",
		"fade out at alt stop"
	};
	STRING_LIST(unnamed_enum$282, unnamed_enum$282_strings, _countof(unnamed_enum$282_strings));

	STRINGS(unnamed_enum$283)
	{
		"none",
		"output front speakers",
		"output rear speakers",
		"output center speakers"
	};
	STRING_LIST(unnamed_enum$283, unnamed_enum$283_strings, _countof(unnamed_enum$283_strings));

	TAG_STRUCT(
		map_leaf_connection_index_block_struct_definition,
		"map_leaf_connection_index_block",
		"map_leaf_connection_index_block_struct_definition",
		"s_long$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "connection index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		map_leaf_face_block_struct_definition,
		"map_leaf_face_block",
		"map_leaf_face_block_struct_definition",
		"s_map_leaf_face",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "node index" },
		{ _field_block, "vertices", &map_leaf_face_vertex_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		map_leaf_face_vertex_block_struct_definition,
		"map_leaf_face_vertex_block",
		"map_leaf_face_vertex_block_struct_definition",
		"s_real_point3d$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "vertex" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		mass_distributions_block_struct_definition,
		"mass_distributions_block",
		"mass_distributions_block_struct_definition",
		"s_physics_model_mass_distribution",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		{ _field_real_vector_3d, "center of mass" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "inertia tensor i" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "inertia tensor j" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "inertia tensor k" },
		FIELD_SKIP("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		mass_point_block_struct_definition,
		"mass_point_block",
		"mass_point_block_struct_definition",
		"s_mass_point_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_short_block_index, "powered mass point" },
		{ _field_short_integer, "model node" },
		{ _field_long_flags, "flags", &unnamed_enum$353 },
		{ _field_real, "relative mass" },
		{ _field_real, "mass" },
		{ _field_real, "relative density" },
		{ _field_real, "density" },
		{ _field_real_point_3d, "position" },
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "up" },
		{ _field_short_enum, "friction type", &unnamed_enum$354 },
		FIELD_PAD("value", 2),
		{ _field_real, "friction parallel scale" },
		{ _field_real, "friction perpendicular scale" },
		{ _field_real, "radius" },
		FIELD_PAD("value", 20),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$353)
	{
		"metallic"
	};
	STRING_LIST(unnamed_enum$353, unnamed_enum$353_strings, _countof(unnamed_enum$353_strings));

	STRINGS(unnamed_enum$354)
	{
		"point",
		"forward",
		"left",
		"up"
	};
	STRING_LIST(unnamed_enum$354, unnamed_enum$354_strings, _countof(unnamed_enum$354_strings));

	TAG_STRUCT(
		material_effect_block_v1_struct_definition,
		"material_effect_block_v1",
		"material_effect_block_v1_struct_definition",
		"s_material_effect_v1",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "materials", &material_effect_material_block_old_v1_block },
		FIELD_PAD("value", 16),
		{ _field_terminator }
	};

	TAG_STRUCT(
		material_effect_block_v2_struct_definition,
		"material_effect_block_v2",
		"material_effect_block_v2_struct_definition",
		"s_material_effect",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "old materials (DO NOT USE)", &old_material_effect_material_block },
		{ _field_block, "sounds", &material_effect_material_block },
		{ _field_block, "effects", &material_effect_material_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		material_effect_material_block_old_v1_struct_definition,
		"material_effect_material_block_old_v1",
		"material_effect_material_block_old_v1_struct_definition",
		"s_material_effect_material_old_v1",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "effect", &effect_group_reference },
		{ _field_tag_reference, "sound", &sound_group_sound_looping_group_reference },
		{ _field_string_id, "material name", _field_id_sted },
		FIELD_SKIP("value", 4),
		{ _field_char_enum, "sweetener mode", &unnamed_enum$200 },
		FIELD_PAD("value", 3),
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(sound_group_sound_looping_group_reference, _tag_reference_flag_resolved_manually)
	{
		SOUND_TAG,
		SOUND_LOOPING_TAG,
		INVALID_TAG
	};

	STRINGS(unnamed_enum$200)
	{
		"sweetener default",
		"sweetener enabled",
		"sweetener disabled"
	};
	STRING_LIST(unnamed_enum$200, unnamed_enum$200_strings, _countof(unnamed_enum$200_strings));

	VERSIONED_TAG_STRUCT(
		material_effect_material_struct_definition,
		"material_effect_material",
		"material_effect_material_struct_definition",
		"s_material_effect_material",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 6 },
		{ _field_tag_reference, "tag (effect or sound)", &sound_group_sound_looping_group_effect_group_reference },
		{ _field_tag_reference, "secondary tag (effect or sound)", &sound_group_sound_looping_group_effect_group_reference },
		{ _field_string_id, "material name", _field_id_sted },
		FIELD_SKIP("value", 2),
		{ _field_char_enum, "sweetener mode", &unnamed_enum$200 },
		FIELD_PAD("value", 1),
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_tag_reference, "tag (effect or sound)", &sound_group_sound_looping_group_effect_group_reference },
		{ _field_string_id, "material name", _field_id_sted },
		FIELD_SKIP("value", 2),
		{ _field_char_enum, "sweetener mode", &unnamed_enum$200 },
		FIELD_PAD("value", 1),
		
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(sound_group_sound_looping_group_effect_group_reference, _tag_reference_flag_resolved_manually)
	{
		SOUND_TAG,
		SOUND_LOOPING_TAG,
		EFFECT_TAG,
		INVALID_TAG
	};

	VERSIONED_TAG_STRUCT(
		material_effects_struct_definition,
		"material_effects",
		"material_effects_struct_definition",
		"s_material_effects_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_block, "effects", &material_effect_block_v2_block },
		FIELD_USELESS_PAD("value", 128),
		
		{ _struct_version_mode_equal, 0, 2 },
		{ _field_block, "effects", &material_effect_block_v1_block },
		FIELD_PAD("value", 128),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		material_physics_block_struct_definition,
		"material_physics_block",
		"material_physics_block_struct_definition",
		"s_material_physics_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("vehicle terrain parameters", "the following fields modify the way a vehicle drives over terrain of this material type."),
		{ _field_real, "ground friction scale", "fraction of original velocity parallel to the ground after one tick" },
		{ _field_real, "ground friction normal k1 scale", "cosine of angle at which friction falls off" },
		{ _field_real, "ground friction normal k0 scale", "cosine of angle at which friction is zero" },
		{ _field_real, "ground depth scale", "depth a point mass rests in the ground" },
		{ _field_real, "ground damp fraction scale", "fraction of original velocity perpendicular to the ground after one tick" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		material_physics_properties_struct_definition,
		"material_physics_properties",
		"material_physics_properties_struct_definition",
		"s_material_physics_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 4 },
		FIELD_PAD("value", 4),
		{ _field_real, "friction" },
		{ _field_real_fraction, "restitution" },
		{ _field_real, "density", nullptr, "kg/m^3" },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		materials_block_struct_definition$2,
		"materials_block",
		"materials_block_struct_definition",
		"s_physics_model_material",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "global material name", _field_id_sted },
		{ _field_short_block_index, "phantom type" },
		{ _field_word_flags, "flags", &unnamed_enum$350 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$350)
	{
		"does not collide with fixed bodies"
	};
	STRING_LIST(unnamed_enum$350, unnamed_enum$350_strings, _countof(unnamed_enum$350_strings));

	TAG_STRUCT(
		materials_block_struct_definition,
		"materials_block",
		"materials_block_struct_definition",
		"s_global_material_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "parent name" },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$312 },
		{ _field_short_enum, "old material type", &unnamed_enum$226 },
		FIELD_PAD("value", 2),
		{ _field_string_id, "general armor" },
		{ _field_string_id, "specific armor" },
		{ _field_struct, "physics properties", &material_physics_properties_struct_definition, _field_id_mphp }, // structure_version:1
		{ _field_tag_reference, "old material physics", &material_physics_group_reference },
		{ _field_tag_reference, "breakable surface", &breakable_surface_group_reference },
		{ _field_struct, "sweeteners", &materials_sweeteners_struct_struct_definition, _field_id_msst },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$312)
	{
		"flammable",
		"biomass"
	};
	STRING_LIST(unnamed_enum$312, unnamed_enum$312_strings, _countof(unnamed_enum$312_strings));

	STRINGS(unnamed_enum$226)
	{
		"dirt",
		"sand",
		"stone",
		"snow",
		"wood",
		"metal (hollow)",
		"metal (thin)",
		"metal (thick)",
		"rubber",
		"glass",
		"force field",
		"grunt",
		"hunter armor",
		"hunter skin",
		"elite",
		"jackal",
		"jackal energy shield",
		"engineer skin",
		"engineer force field",
		"flood combat form",
		"flood carrier form",
		"cyborg armor",
		"cyborg energy shield",
		"human armor",
		"human skin",
		"sentinel",
		"monitor",
		"plastic",
		"water",
		"leaves",
		"elite energy shield",
		"ice",
		"hunter shield"
	};
	STRING_LIST(unnamed_enum$226, unnamed_enum$226_strings, _countof(unnamed_enum$226_strings));

	TAG_REFERENCE(material_physics_group_reference, MATERIAL_PHYSICS_TAG);

	TAG_REFERENCE(breakable_surface_group_reference, BREAKABLE_SURFACE_TAG);

	TAG_STRUCT(
		materials_sweeteners_struct_struct_definition,
		"materials_sweeteners_struct",
		"materials_sweeteners_struct_struct_definition",
		"s_global_material_sweeteners_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "sound sweetener (small)", &sound_group_reference },
		{ _field_tag_reference, "sound sweetener (medium)", &sound_group_reference },
		{ _field_tag_reference, "sound sweetener (large)", &sound_group_reference },
		{ _field_tag_reference, "sound sweetener rolling", &sound_looping_group_reference },
		{ _field_tag_reference, "sound sweetener grinding", &sound_looping_group_reference },
		{ _field_tag_reference, "sound sweetener (melee)", &sound_group_reference },
		{ _field_tag_reference, "value", &_reference$4 },
		{ _field_tag_reference, "effect sweetener (small)", &effect_group_reference },
		{ _field_tag_reference, "effect sweetener (medium)", &effect_group_reference },
		{ _field_tag_reference, "effect sweetener (large)", &effect_group_reference },
		{ _field_tag_reference, "effect sweetener rolling", &effect_group_reference },
		{ _field_tag_reference, "effect sweetener grinding", &effect_group_reference },
		{ _field_tag_reference, "effect sweetener (melee)", &effect_group_reference },
		{ _field_tag_reference, "value", &_reference$4 },
		FIELD_EXPLANATION("sweetener inheritance flags", "when a sweetener inheritance flag is set the sound\\effect is not inherited from the parent material.  If you leave the sweetener blank and set the flag than no effect\\sound will play"),
		{ _field_long_flags, "sweetener inheritance flags", &unnamed_enum$313 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$313)
	{
		"sound_small",
		"sound_medium",
		"sound_large",
		"sound_rolling",
		"sound_grinding",
		"sound_melee",
		"unused",
		"effect_small",
		"effect_medium",
		"effect_large",
		"effect_rolling",
		"effect_grinding",
		"effect_melee",
		"unused"
	};
	STRING_LIST(unnamed_enum$313, unnamed_enum$313_strings, _countof(unnamed_enum$313_strings));

	VERSIONED_TAG_STRUCT(
		melee_aim_assist_struct_definition,
		"melee_aim_assist",
		"melee_aim_assist_struct_definition",
		"s_melee_aim_assist_parameters",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 7 },
		{ _field_angle, "magnetism angle", "the maximum angle that magnetism works at full strength", "degrees" },
		{ _field_real, "magnetism range", "the maximum distance that magnetism works at full strength", "world units" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_real, "throttle magnitude" },
		{ _field_real, "throttle minimum distance" },
		{ _field_angle, "throttle maximum adjustment angle", nullptr, "degrees" },
		FIELD_USELESS_PAD("value", 4),
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		melee_damage_parameters_struct_definition,
		"melee_damage_parameters",
		"melee_damage_parameters_struct_definition",
		"s_melee_damage_parameters",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 11 },
		{ _field_real_euler_angles_2d, "damage pyramid angles" },
		{ _field_real, "damage pyramid depth" },
		FIELD_EXPLANATION("melee combo damage", nullptr),
		{ _field_tag_reference, "1st hit melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "1st hit melee response", &damage_effect_group_reference },
		{ _field_tag_reference, "2nd hit melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "2nd hit melee response", &damage_effect_group_reference },
		{ _field_tag_reference, "3rd hit melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "3rd hit melee response", &damage_effect_group_reference },
		{ _field_tag_reference, "lunge melee damage", "this is only important for the energy sword", &damage_effect_group_reference },
		{ _field_tag_reference, "lunge melee response", "this is only important for the energy sword", &damage_effect_group_reference },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		meter_block_struct_definition,
		"meter_block",
		"meter_block_struct_definition",
		"s_meter_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$315 },
		{ _field_tag_reference, "stencil bitmaps", "two bitmaps specifying the mask and the meter levels", &bitmap_group_reference$5 },
		{ _field_tag_reference, "source bitmap", "optional bitmap to draw into the unmasked regions of the meter (modulated by the colors below)", &bitmap_group_reference },
		{ _field_short_integer, "stencil sequence index" },
		{ _field_short_integer, "source sequence index" },
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 4),
		{ _field_short_enum, "interpolate colors...", &unnamed_enum$316 },
		{ _field_short_enum, "anchor colors...", &unnamed_enum$317 },
		FIELD_PAD("value", 8),
		{ _field_real_argb_color, "empty color" },
		{ _field_real_argb_color, "full color" },
		FIELD_PAD("value", 20),
		{ _field_real, "unmask distance", "fade from fully masked to fully unmasked this distance beyond full (and below empty)", "meter units" },
		{ _field_real, "mask distance", "fade from fully unmasked to fully masked this distance below full (and beyond empty)", "meter units" },
		FIELD_PAD("value", 20),
		{ _field_data, "encoded stencil", &meter_stencil_data_definition },
		{ _field_terminator }
	};

	STRING_LIST(unnamed_enum$315, empty_string_list, 0);

	TAG_REFERENCE(bitmap_group_reference$5, BITMAP_TAG, _tag_reference_flag_dont_resolve_in_editor);

	STRINGS(unnamed_enum$316)
	{
		"linearly",
		"faster near empty",
		"faster near full",
		"through random noise"
	};
	STRING_LIST(unnamed_enum$316, unnamed_enum$316_strings, _countof(unnamed_enum$316_strings));

	STRINGS(unnamed_enum$317)
	{
		"at both ends",
		"at empty",
		"at full"
	};
	STRING_LIST(unnamed_enum$317, unnamed_enum$317_strings, _countof(unnamed_enum$317_strings));

	TAG_STRUCT(
		mission_dialogue_lines_block_struct_definition,
		"mission_dialogue_lines_block",
		"mission_dialogue_lines_block_struct_definition",
		"s_mission_dialogue_line",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_block, "variants", &mission_dialogue_variants_block },
		{ _field_string_id, "default sound effect" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		mission_dialogue_variants_block_struct_definition,
		"mission_dialogue_variants_block",
		"mission_dialogue_variants_block_struct_definition",
		"s_mission_dialogue_variant",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "variant designation", "3-letter designation for the character", FIELD_FLAG_INDEX },
		{ _field_tag_reference, "sound", &sound_group_reference$2 },
		{ _field_string_id, "sound effect" },
		{ _field_terminator }
	};

	TAG_REFERENCE(sound_group_reference$2, SOUND_TAG, _tag_reference_flag_resolved_manually);

	TAG_STRUCT(
		model_animation_graph_block_struct_definition,
		"model_animation_graph_block",
		"model_animation_graph_block_struct_definition",
		"s_model_animation_graph",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "resources", &animation_resources_struct_definition, _field_id_MAgr }, // structure_version:2
		{ _field_struct, "content", &animation_graph_contents_struct_struct_definition, _field_id_MAgc },
		{ _field_struct, "run time data", &model_animation_runtime_data_struct_struct_definition, _field_id_MArt },
		FIELD_EXPLANATION("RESULTS OF THE LAST IMPORT", nullptr),
		{ _field_data, "last import results", &error_report_string_data$2 },
		{ _field_block, "additional node data", &additional_node_data_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		model_animation_runtime_data_struct_struct_definition,
		"model_animation_runtime_data_struct",
		"model_animation_runtime_data_struct_struct_definition",
		"s_model_animation_runtime_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("RUN-TIME DATA", nullptr),
		{ _field_block, "inheritence list", &inherited_animation_block },
		{ _field_block, "weapon list", &weapon_class_lookup_block },
		FIELD_PAD("value", 32),
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		model_group_struct_definition,
		"model_group",
		"model_group_struct_definition",
		"s_model_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 39 },
		FIELD_EXPLANATION("MODEL", nullptr),
		FIELD_CUSTOM("value", _field_id_high_level_model_tag),
		{ _field_tag_reference, "render model", &render_model_group_reference },
		{ _field_tag_reference, "collision model", &collision_model_group_reference },
		{ _field_tag_reference, "animation", &model_animation_graph_group_reference },
		{ _field_tag_reference, "physics", &physics_group_reference },
		{ _field_tag_reference, "physics_model", &physics_model_group_reference },
		FIELD_EXPLANATION("level of detail", "If a model is further away than the LOD reduction distance, it will be reduced to that LOD.\nSo the L1 reduction distance should be really long and the L5 reduction distance should be really short.\nThis means distances should be in descending order, e.g. 5 4 3 2 1.\n\nNote that if we run out of memory or too many models are on screen at once, the engine may reduce\nmodels to a lower LOD BEFORE they reach the reduction distance for that LOD.\n\nIf a model has a begin fade distance and disappear distance, it will begin fading out at that distance,\nreaching zero alpha and disappearing at the disappear distance. These distances should be greater than all\nof the LOD reduction distances.\n"),
		{ _field_real, "disappear distance", nullptr, "world units" },
		{ _field_real, "begin fade distance", nullptr, "world units" },
		FIELD_PAD("value", 4),
		{ _field_real, "reduce to L1", nullptr, "world units (super low)" },
		{ _field_real, "reduce to L2", nullptr, "world units (low)" },
		{ _field_real, "reduce to L3", nullptr, "world units (medium)" },
		{ _field_real, "reduce to L4", nullptr, "world units (high)" },
		{ _field_real, "reduce to L5", nullptr, "world units (super high)" },
		FIELD_SKIP("value", 4),
		{ _field_short_enum, "shadow fade distance", &unnamed_enum$220 },
		FIELD_PAD("value", 2),
		{ _field_block, "variants", &model_variant_block },
		{ _field_block, "materials", &model_material_block },
		{ _field_block, "new damage info", &global_damage_info_block },
		{ _field_block, "targets", &model_target_block },
		{ _field_block, "runtime regions", &model_region_block },
		{ _field_block, "runtime nodes", &model_node_block },
		FIELD_PAD("value", 4),
		{ _field_block, "model object data", &model_object_data_block },
		FIELD_EXPLANATION("more stuff", nullptr),
		{ _field_tag_reference, "default dialogue", "The default dialogue tag for this model (overriden by variants)", &dialogue_group_reference$2 },
		{ _field_tag_reference, "UNUSED", &shader_group_reference },
		{ _field_long_flags, "flags", &unnamed_enum$236 },
		{ _field_string_id, "default dialogue effect", "The default dialogue tag for this model (overriden by variants)" },
		{ _field_array, "render-only node flags", &unnamed_array$19 },
		{ _field_array, "render-only section flags", &unnamed_array$20 },
		{ _field_long_flags, "runtime flags", &unnamed_enum$237 },
		{ _field_block, "scenario load parameters", &global_scenario_load_parameters_block },
		FIELD_EXPLANATION("HOLOGRAM", "hologram shader is applied whenever the control function from it\'s object is non-zero"),
		{ _field_tag_reference, "hologram shader", &shader_group_reference },
		{ _field_string_id, "hologram control function" },
		
		{ _struct_version_mode_equal, 0, 24 },
		FIELD_EXPLANATION("MODEL", nullptr),
		{ _field_tag_reference, "render model", &render_model_group_reference },
		{ _field_tag_reference, "collision model", &collision_model_group_reference },
		{ _field_tag_reference, "animation", &model_animation_graph_group_reference },
		{ _field_tag_reference, "physics", &physics_group_reference },
		{ _field_tag_reference, "physics model", &physics_model_group_reference },
		FIELD_EXPLANATION("level of detail", "If a model is further away than the LOD reduction distance, it will be reduced to that LOD.\nSo the L1 reduction distance should be really long and the L5 reduction distance should be really short.\nThis means distances should be in descending order, e.g. 5 4 3 2 1.\n\nNote that if we run out of memory or too many models are on screen at once, the engine may reduce\nmodels to a lower LOD BEFORE they reach the reduction distance for that LOD.\n\nIf a model has a max draw distance, it will disappear when it reaches that distance. The max draw distance\nshould be greater than all of the LOD reduction distances.\n"),
		{ _field_real, "max draw distance", nullptr, "world units" },
		{ _field_real, "reduce to L1", nullptr, "world units (super low)" },
		{ _field_real, "reduce to L2", nullptr, "world units (low)" },
		{ _field_real, "reduce to L3", nullptr, "world units (medium)" },
		{ _field_real, "reduce to L4", nullptr, "world units (high)" },
		{ _field_real, "reduce to L5", nullptr, "world units (super high)" },
		FIELD_SKIP("value", 4),
		{ _field_short_enum, "shadow fade distance", &unnamed_enum$220 },
		FIELD_PAD("value", 2),
		{ _field_block, "variants", &model_variant_block },
		{ _field_block, "materials", &model_material_block },
		{ _field_block, "new damage info", &global_damage_info_block },
		FIELD_PAD("value", 12),
		{ _field_block, "runtime regions", &model_region_block },
		{ _field_block, "runtime nodes", &model_node_block },
		FIELD_PAD("value", 4),
		{ _field_block, "model object data", &model_object_data_block },
		
		{ _field_terminator }
	};

	TAG_REFERENCE(render_model_group_reference, RENDER_MODEL_TAG);

	TAG_REFERENCE(collision_model_group_reference, COLLISION_MODEL_TAG);

	TAG_REFERENCE(physics_group_reference, PHYSICS_TAG);

	TAG_REFERENCE(physics_model_group_reference, PHYSICS_MODEL_TAG);

	STRINGS(unnamed_enum$220)
	{
		"fade at super high detail level",
		"fade at high detail level",
		"fade at medium detail level",
		"fade at low detail level",
		"fade at super low detail level",
		"fade never"
	};
	STRING_LIST(unnamed_enum$220, unnamed_enum$220_strings, _countof(unnamed_enum$220_strings));

	TAG_REFERENCE(dialogue_group_reference$2, DIALOGUE_TAG, _tag_reference_flag_dont_resolve_in_editor);

	STRINGS(unnamed_enum$236)
	{
		"active camo always on",
		"active camo always merge",
		"active camo never merge"
	};
	STRING_LIST(unnamed_enum$236, unnamed_enum$236_strings, _countof(unnamed_enum$236_strings));

	STRINGS(unnamed_enum$237)
	{
		"contains run-time nodes"
	};
	STRING_LIST(unnamed_enum$237, unnamed_enum$237_strings, _countof(unnamed_enum$237_strings));

	TAG_STRUCT(
		model_material_block_struct_definition,
		"model_material_block",
		"model_material_block_struct_definition",
		"s_model_material",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "material name" },
		{ _field_short_enum, "material type", &unnamed_enum$226 },
		{ _field_short_block_index_custom_search, "damage section" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_string_id, "global material name", _field_id_sted },
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		model_node_block_struct_definition,
		"model_node_block",
		"model_node_block_struct_definition",
		"s_model_node",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "parent node" },
		{ _field_short_block_index, "first child node" },
		{ _field_short_block_index, "next sibling node" },
		FIELD_PAD("value", 2),
		{ _field_real_point_3d, "default translation" },
		{ _field_real_quaternion, "default rotation" },
		{ _field_real, "default inverse scale" },
		{ _field_real_vector_3d, "default inverse forward" },
		{ _field_real_vector_3d, "default inverse left" },
		{ _field_real_vector_3d, "default inverse up" },
		{ _field_real_point_3d, "default inverse position" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		model_object_data_block_struct_definition,
		"model_object_data_block",
		"model_object_data_block_struct_definition",
		"s_model_object_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$235 },
		FIELD_PAD("value", 2),
		{ _field_real_point_3d, "offset" },
		{ _field_real, "radius" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$235)
	{
		"not set",
		"user defined",
		"auto generated"
	};
	STRING_LIST(unnamed_enum$235, unnamed_enum$235_strings, _countof(unnamed_enum$235_strings));

	TAG_STRUCT(
		model_permutation_block_struct_definition,
		"model_permutation_block",
		"model_permutation_block_struct_definition",
		"s_model_permutation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_byte_flags, "flags", &unnamed_enum$234 },
		{ _field_char_integer, "collision permutation index" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$234)
	{
		"cannot be chosen randomly"
	};
	STRING_LIST(unnamed_enum$234, unnamed_enum$234_strings, _countof(unnamed_enum$234_strings));

	TAG_STRUCT(
		model_region_block_struct_definition,
		"model_region_block",
		"model_region_block_struct_definition",
		"s_model_region",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_char_integer, "collision region index" },
		{ _field_char_integer, "physics region index" },
		FIELD_PAD("value", 2),
		{ _field_block, "permutations", &model_permutation_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		model_target_block_struct_definition,
		"model_target_block",
		"model_target_block_struct_definition",
		"s_model_target",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "marker name", "multiple markers become multiple spheres of the same radius" },
		{ _field_real, "size", "sphere radius" },
		{ _field_angle, "cone angle", "the target is only visible when viewed within this angle of the marker's x axis" },
		{ _field_short_block_index_custom_search, "damage section", "the target is associated with this damage section" },
		{ _field_short_block_index, "variant", "the target will only appear with this variant" },
		{ _field_real_fraction, "targeting relevance", "higher relevances turn into stronger magnetisms" },
		{ _field_struct, "lock-on data", &model_target_lock_on_data_struct_struct_definition, _field_id_MTLO },
		{ _field_terminator }
	};

	TAG_STRUCT(
		model_target_lock_on_data_struct_struct_definition,
		"model_target_lock_on_data_struct",
		"model_target_lock_on_data_struct_struct_definition",
		"s_model_target_lock_on_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("lock-on fields", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$233 },
		{ _field_real, "lock on distance" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$233)
	{
		"locked by human tracking",
		"locked by plasma tracking",
		"headshot",
		"vulnerable",
		"alwas locked by plasma tracking"
	};
	STRING_LIST(unnamed_enum$233, unnamed_enum$233_strings, _countof(unnamed_enum$233_strings));

	TAG_STRUCT(
		model_variant_block_struct_definition,
		"model_variant_block",
		"model_variant_block_struct_definition",
		"s_model_variant",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		FIELD_PAD("value", 16),
		{ _field_block, "regions", &model_variant_region_block },
		{ _field_block, "objects", &model_variant_object_block },
		FIELD_PAD("value", 8),
		{ _field_string_id, "dialogue sound effect" },
		{ _field_tag_reference, "dialogue", &dialogue_group_reference$2 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		model_variant_object_block_struct_definition,
		"model_variant_object_block",
		"model_variant_object_block_struct_definition",
		"s_model_variant_object",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "parent marker" },
		{ _field_string_id, "child marker" },
		{ _field_tag_reference, "child object", &object_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(object_group_reference, OBJECT_TAG, _tag_reference_flag_dont_resolve_in_editor);

	TAG_STRUCT(
		model_variant_permutation_block_struct_definition,
		"model_variant_permutation_block",
		"model_variant_permutation_block_struct_definition",
		"s_model_variant_permutation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "permutation name" },
		FIELD_PAD("value", 1),
		{ _field_byte_flags, "flags", &unnamed_enum$221 },
		FIELD_PAD("value", 2),
		{ _field_real, "probability", nullptr, "(0,+inf)" },
		{ _field_block, "states", &model_variant_state_block },
		FIELD_PAD("value", 5),
		FIELD_PAD("value", 7),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$221)
	{
		"copy states to all permutations"
	};
	STRING_LIST(unnamed_enum$221, unnamed_enum$221_strings, _countof(unnamed_enum$221_strings));

	TAG_STRUCT(
		model_variant_region_block_struct_definition,
		"model_variant_region_block",
		"model_variant_region_block_struct_definition",
		"s_model_variant_region",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "region name", nullptr, "must match region name in render_model" },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 1),
		{ _field_short_block_index, "parent variant" },
		{ _field_block, "permutations", &model_variant_permutation_block },
		{ _field_short_enum, "sort order", "negative values mean closer to the camera", &unnamed_enum$225 },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$225)
	{
		"no sorting",
		"-5 (closest)",
		"-4",
		"-3",
		"-2",
		"-1",
		"0 (same as model)",
		"1",
		"2",
		"3",
		"4",
		"5 (farthest)"
	};
	STRING_LIST(unnamed_enum$225, unnamed_enum$225_strings, _countof(unnamed_enum$225_strings));

	VERSIONED_TAG_STRUCT(
		model_variant_state_struct_definition,
		"model_variant_state",
		"model_variant_state_struct_definition",
		"s_model_variant_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 7 },
		{ _field_string_id, "permutation name" },
		FIELD_PAD("value", 1),
		{ _field_byte_flags, "property flags", &unnamed_enum$222 },
		{ _field_short_enum, "state", &unnamed_enum$223 },
		{ _field_tag_reference, "looping effect", "played while the model is in this state", &effect_group_reference$2 },
		{ _field_string_id, "looping effect marker name" },
		{ _field_real_fraction, "initial probability" },
		
		{ _struct_version_mode_equal, 0, 3 },
		{ _field_string_id, "permutation name" },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "state", &unnamed_enum$224 },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$222)
	{
		"blurred",
		"hella blurred",
		"shielded"
	};
	STRING_LIST(unnamed_enum$222, unnamed_enum$222_strings, _countof(unnamed_enum$222_strings));

	TAG_REFERENCE(effect_group_reference$2, EFFECT_TAG);

	STRINGS(unnamed_enum$224)
	{
		"default",
		"minor damage",
		"medium damage",
		"major damage",
		"destroyed",
		"blurred (DEPRECIATED)",
		"very blurred (DEPRECIATED)",
		"shield active (DEPRECIATED)",
		"shield inactive (DEPRECIATED)"
	};
	STRING_LIST(unnamed_enum$224, unnamed_enum$224_strings, _countof(unnamed_enum$224_strings));

	TAG_STRUCT(
		mopps_block_struct_definition,
		"mopps_block",
		"mopps_block_struct_definition",
		"s_physics_model_mopp",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "value" },
		{ _field_pointer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		mouse_cursor_bitmap_reference_block_struct_definition,
		"mouse_cursor_bitmap_reference_block",
		"mouse_cursor_bitmap_reference_block_struct_definition",
		"s_local_bitmap_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		mouse_cursor_definition_block_struct_definition,
		"mouse_cursor_definition_block",
		"mouse_cursor_definition_block_struct_definition",
		"s_mouse_cursor_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("Mouse Cursor Bitmaps", "0 - Normal mouse cursor\n1 - Busy mouse cursor\n2 - Hover mouse cursor\n3 - Text select mouse cursor\n"),
		{ _field_block, "mouse cursor bitmaps", &mouse_cursor_bitmap_reference_block },
		{ _field_real, "animation speed (fps)" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		move_positions_block_struct_definition,
		"move_positions_block",
		"move_positions_block_struct_definition",
		"s_move_position_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_angle, "facing", nullptr, "degrees" },
		{ _field_real, "weight" },
		{ _field_real_bounds, "time", nullptr, "seconds" },
		{ _field_short_block_index, "animation" },
		{ _field_char_integer, "sequence ID", "identifies this move position as belonging to a sequence, only actors whose starting locations match this sequence ID can use it (zero = no sequence)" },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 44),
		{ _field_long_integer, "surface index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		multi_spheres_block_struct_definition,
		"multi_spheres_block",
		"multi_spheres_block_struct_definition",
		"s_physics_model_multi_sphere",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "material" },
		{ _field_word_flags, "flags", &unnamed_enum$118 },
		{ _field_real, "relative mass scale" },
		{ _field_real_fraction, "friction" },
		{ _field_real_fraction, "restitution" },
		{ _field_real, "volume " },
		{ _field_real, "mass" },
		FIELD_SKIP("value", 2),
		{ _field_short_block_index, "phantom" },
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_long_integer, "num spheres" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_array, "four vectors storage", &unnamed_array$44 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		multilingual_unicode_string_list_block_struct_definition,
		"multilingual_unicode_string_list_block",
		"multilingual_unicode_string_list_block_struct_definition",
		"s_multilingual_unicode_string_list_group_header",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "string references", &multilingual_unicode_string_reference_block },
		{ _field_data, "string data utf8", &utf8_string_data },
		FIELD_PAD("value", 36),
		{ _field_terminator }
	};

	TAG_STRUCT(
		multilingual_unicode_string_reference_block_struct_definition,
		"multilingual_unicode_string_reference_block",
		"multilingual_unicode_string_reference_block_struct_definition",
		"s_multilingual_unicode_string_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "string id" },
		{ _field_long_integer, "english offset" },
		{ _field_long_integer, "japanese offset" },
		{ _field_long_integer, "german offset" },
		{ _field_long_integer, "french offset" },
		{ _field_long_integer, "spanish offset" },
		{ _field_long_integer, "italian offset" },
		{ _field_long_integer, "korean offset" },
		{ _field_long_integer, "chinese offset" },
		{ _field_long_integer, "portuguese offset" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		multiplayer_color_block_struct_definition,
		"multiplayer_color_block",
		"multiplayer_color_block_struct_definition",
		"s_real_rgb_color",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_rgb_color, "color" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		multiplayer_color_block_struct_definition$2,
		"multiplayer_color_block",
		"multiplayer_color_block_struct_definition",
		"s_real_rgb_color$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_rgb_color, "color" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		multiplayer_constants_block_struct_definition,
		"multiplayer_constants_block",
		"multiplayer_constants_block_struct_definition",
		"s_multiplayer_constants",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "maximum random spawn bias" },
		{ _field_real, "teleporter recharge time", nullptr, "seconds" },
		{ _field_real, "grenade danger weight" },
		{ _field_real, "grenade danger inner radius" },
		{ _field_real, "grenade danger outer radius" },
		{ _field_real, "grenade danger lead time", nullptr, "seconds" },
		{ _field_real, "vehicle danger min speed", nullptr, "wu/sec" },
		{ _field_real, "vehicle danger weight" },
		{ _field_real, "vehicle danger radius" },
		{ _field_real, "vehicle danger lead time", nullptr, "seconds" },
		{ _field_real, "vehicle nearby player dist", "how nearby a player is to count a vehicle as 'occupied'" },
		FIELD_PAD("value", 84),
		FIELD_PAD("value", 32),
		FIELD_PAD("value", 32),
		{ _field_tag_reference, "hill shader", &shader_group_reference },
		FIELD_PAD("value", 16),
		{ _field_real, "flag reset stop distance" },
		{ _field_tag_reference, "bomb explode effect", &effect_group_reference },
		{ _field_tag_reference, "bomb explode dmg effect", &damage_effect_group_reference },
		{ _field_tag_reference, "bomb defuse effect", &effect_group_reference },
		{ _field_string_id, "bomb defusal string" },
		{ _field_string_id, "blocked teleporter string" },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 32),
		FIELD_PAD("value", 32),
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_STRUCT(
		multiplayer_globals_block_struct_definition,
		"multiplayer_globals_block",
		"multiplayer_globals_block_struct_definition",
		"s_multiplayer_globals_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "universal", &multiplayer_universal_block },
		{ _field_block, "runtime", &multiplayer_runtime_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		multiplayer_information_block_struct_definition,
		"multiplayer_information_block",
		"multiplayer_information_block_struct_definition",
		"s_game_globals_multiplayer_information",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "flag", &item_group_reference },
		{ _field_tag_reference, "unit", &unit_group_reference$3 },
		{ _field_block, "vehicles", &vehicles_block },
		{ _field_tag_reference, "hill shader", &shader_group_reference },
		{ _field_tag_reference, "flag shader", &shader_group_reference },
		{ _field_tag_reference, "ball", &item_group_reference },
		{ _field_block, "sounds", &sounds_block },
		{ _field_tag_reference, "in game text", &multilingual_unicode_string_list_group_reference },
		FIELD_PAD("value", 40),
		{ _field_block, "general events", &game_engine_general_event_block },
		{ _field_block, "slayer events", &game_engine_slayer_event_block },
		{ _field_block, "ctf events", &game_engine_ctf_event_block },
		{ _field_block, "oddball events", &game_engine_oddball_event_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "king events", &game_engine_king_event_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(unit_group_reference$3, UNIT_TAG);

	VERSIONED_TAG_STRUCT(
		multiplayer_runtime_global_struct_definition,
		"multiplayer_runtime_global",
		"multiplayer_runtime_global_struct_definition",
		"s_multiplayer_runtime_globals_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 111 },
		{ _field_tag_reference, "flag", &item_group_reference },
		{ _field_tag_reference, "ball", &item_group_reference },
		{ _field_tag_reference, "unit", &unit_group_reference$5 },
		{ _field_tag_reference, "flag shader", &shader_group_reference },
		{ _field_tag_reference, "hill shader", &shader_group_reference },
		{ _field_tag_reference, "head", &item_group_reference },
		{ _field_tag_reference, "juggernaut powerup", &item_group_reference },
		{ _field_tag_reference, "da bomb", &item_group_reference },
		{ _field_tag_reference, "value", &_reference$4 },
		{ _field_tag_reference, "value", &_reference$4 },
		{ _field_tag_reference, "value", &_reference$4 },
		{ _field_tag_reference, "value", &_reference$4 },
		{ _field_tag_reference, "value", &_reference$4 },
		{ _field_block, "weapons", &weapons_block },
		{ _field_block, "vehicles", &vehicles_block$2 },
		{ _field_struct, "arr", &grenade_and_powerup_struct_definition, _field_id_gapu }, // structure_version:1
		{ _field_tag_reference, "in game text", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "sounds", &sounds_block$2 },
		{ _field_block, "general events", &game_engine_general_event_block },
		{ _field_block, "flavor events", &game_engine_flavor_event_block },
		{ _field_block, "slayer events", &game_engine_slayer_event_block },
		{ _field_block, "ctf events", &game_engine_ctf_event_block },
		{ _field_block, "oddball events", &game_engine_oddball_event_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "king events", &game_engine_king_event_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "juggernaut events", &game_engine_juggernaut_event_block },
		{ _field_block, "territories events", &game_engine_territories_event_block },
		{ _field_block, "invasion events", &game_engine_assault_event_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "value", &g_null_block },
		{ _field_tag_reference, "default item collection 1", &item_collection_group_reference },
		{ _field_tag_reference, "default item collection 2", &item_collection_group_reference },
		{ _field_long_integer, "default frag grenade count" },
		{ _field_long_integer, "default plasma grenade count" },
		FIELD_PAD("value", 40),
		FIELD_EXPLANATION("dynamic spawn zones", nullptr),
		{ _field_real, "dynamic zone upper height" },
		{ _field_real, "dynamic zone lower height" },
		FIELD_PAD("value", 40),
		FIELD_EXPLANATION("enemy", nullptr),
		{ _field_real, "enemy inner radius" },
		{ _field_real, "enemy outer radius" },
		{ _field_real, "enemy weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("friend", nullptr),
		{ _field_real, "friend inner radius" },
		{ _field_real, "friend outer radius" },
		{ _field_real, "friend weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("enemy vehicle", nullptr),
		{ _field_real, "enemy vehicle inner radius" },
		{ _field_real, "enemy vehicle outer radius" },
		{ _field_real, "enemy vehicle weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("friendly vehicle", nullptr),
		{ _field_real, "friendly vehicle inner radius" },
		{ _field_real, "friendly vehicle outer radius" },
		{ _field_real, "friendly vehicle weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("empty vehicle", nullptr),
		{ _field_real, "empty vehicle inner radius" },
		{ _field_real, "empty vehicle outer radius" },
		{ _field_real, "empty vehicle weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("oddball inclusion", nullptr),
		{ _field_real, "oddball inclusion inner radius" },
		{ _field_real, "oddball inclusion outer radius" },
		{ _field_real, "oddball inclusion weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("oddball exclusion", nullptr),
		{ _field_real, "oddball exclusion inner radius" },
		{ _field_real, "oddball exclusion outer radius" },
		{ _field_real, "oddball exclusion weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("hill inclusion", nullptr),
		{ _field_real, "hill inclusion inner radius" },
		{ _field_real, "hill inclusion outer radius" },
		{ _field_real, "hill inclusion weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("hill exclusion", nullptr),
		{ _field_real, "hill exclusion inner radius" },
		{ _field_real, "hill exclusion outer radius" },
		{ _field_real, "hill exclusion weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("last race flag", nullptr),
		{ _field_real, "last race flag inner radius" },
		{ _field_real, "last race flag outer radius" },
		{ _field_real, "last race flag weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("dead ally", nullptr),
		{ _field_real, "dead ally inner radius" },
		{ _field_real, "dead ally outer radius" },
		{ _field_real, "dead ally weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("controlled territory", nullptr),
		{ _field_real, "controlled territory inner radius" },
		{ _field_real, "controlled territory outer radius" },
		{ _field_real, "controlled territory weight" },
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 560),
		FIELD_PAD("value", 48),
		{ _field_block, "multiplayer constants", &multiplayer_constants_block },
		{ _field_block, "state responses", &game_engine_status_response_block },
		{ _field_tag_reference, "scoreboard hud definition", &new_hud_definition_group_reference },
		{ _field_tag_reference, "scoreboard emblem shader", &shader_group_reference },
		{ _field_tag_reference, "scoreboard emblem bitmap", &bitmap_group_reference },
		{ _field_tag_reference, "scoreboard dead emblem shader", &shader_group_reference },
		{ _field_tag_reference, "scoreboard dead emblem bitmap", &bitmap_group_reference },
		
		{ _struct_version_mode_equal, 0, 75 },
		{ _field_tag_reference, "flag", &item_group_reference },
		{ _field_tag_reference, "ball", &item_group_reference },
		{ _field_tag_reference, "unit", &unit_group_reference$5 },
		{ _field_tag_reference, "flag shader", &shader_group_reference },
		{ _field_tag_reference, "hill shader", &shader_group_reference },
		{ _field_block, "weapons", &weapons_block },
		{ _field_block, "vehicles", &vehicles_block$2 },
		{ _field_tag_reference, "in game text", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "sounds", &sounds_block$2 },
		{ _field_block, "general events", &game_engine_general_event_block },
		{ _field_block, "slayer events", &game_engine_slayer_event_block },
		{ _field_block, "ctf events", &game_engine_ctf_event_block },
		{ _field_block, "oddball events", &game_engine_oddball_event_block },
		FIELD_PAD("value", 12),
		{ _field_block, "king events", &game_engine_king_event_block },
		{ _field_tag_reference, "default item collection 1", &item_collection_group_reference },
		{ _field_tag_reference, "default item collection 2", &item_collection_group_reference },
		{ _field_long_integer, "default frag grenade count" },
		{ _field_long_integer, "default plasma grenade count" },
		FIELD_EXPLANATION("dynamic spawn zones", nullptr),
		{ _field_real, "dynamic zone upper height" },
		{ _field_real, "dynamic zone lower height" },
		FIELD_PAD("value", 40),
		FIELD_EXPLANATION("enemy", nullptr),
		{ _field_real, "enemy inner radius" },
		{ _field_real, "enemy outer radius" },
		{ _field_real, "enemy weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("friend", nullptr),
		{ _field_real, "friend inner radius" },
		{ _field_real, "friend outer radius" },
		{ _field_real, "friend weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("enemy vehicle", nullptr),
		{ _field_real, "enemy vehicle inner radius" },
		{ _field_real, "enemy vehicle outer radius" },
		{ _field_real, "enemy vehicle weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("friendly vehicle", nullptr),
		{ _field_real, "friendly vehicle inner radius" },
		{ _field_real, "friendly vehicle outer radius" },
		{ _field_real, "friendly vehicle weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("empty vehicle", nullptr),
		{ _field_real, "empty vehicle inner radius" },
		{ _field_real, "empty vehicle outer radius" },
		{ _field_real, "empty vehicle weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("oddball inclusion", nullptr),
		{ _field_real, "oddball inclusion inner radius" },
		{ _field_real, "oddball inclusion outer radius" },
		{ _field_real, "oddball inclusion weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("oddball exclusion", nullptr),
		{ _field_real, "oddball exclusion inner radius" },
		{ _field_real, "oddball exclusion outer radius" },
		{ _field_real, "oddball exclusion weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("hill inclusion", nullptr),
		{ _field_real, "hill inclusion inner radius" },
		{ _field_real, "hill inclusion outer radius" },
		{ _field_real, "hill inclusion weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("hill exclusion", nullptr),
		{ _field_real, "hill exclusion inner radius" },
		{ _field_real, "hill exclusion outer radius" },
		{ _field_real, "hill exclusion weight" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("last race flag", nullptr),
		{ _field_real, "last race flag inner radius" },
		{ _field_real, "last race flag outer radius" },
		{ _field_real, "last race flag weight" },
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 616),
		FIELD_PAD("value", 48),
		
		{ _field_terminator }
	};

	TAG_REFERENCE(unit_group_reference$5, UNIT_TAG);

	TAG_REFERENCE(item_collection_group_reference, ITEM_COLLECTION_TAG);

	TAG_REFERENCE(new_hud_definition_group_reference, NEW_HUD_DEFINITION_TAG);

	TAG_STRUCT(
		multiplayer_scenario_description_block_struct_definition,
		"multiplayer_scenario_description_block",
		"multiplayer_scenario_description_block_struct_definition",
		"s_multiplayer_scenario_description_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "multiplayer scenarios", &scenario_description_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		multiplayer_ui_block_struct_definition,
		"multiplayer_ui_block",
		"multiplayer_ui_block_struct_definition",
		"s_game_globals_multiplayer_ui",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "random player names", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "obsolete profile colors", &multiplayer_color_block },
		{ _field_block, "team colors", &multiplayer_color_block },
		{ _field_tag_reference, "team names", &multilingual_unicode_string_list_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		multiplayer_universal_block_struct_definition,
		"multiplayer_universal_block",
		"multiplayer_universal_block_struct_definition",
		"s_multiplayer_universal_globals_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "random player names", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "team names", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "team colors", &multiplayer_color_block$2 },
		{ _field_tag_reference, "multiplayer text", &multilingual_unicode_string_list_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		multiplayer_variant_settings_interface_definition_block_struct_definition,
		"multiplayer_variant_settings_interface_definition_block",
		"multiplayer_variant_settings_interface_definition_block_struct_definition",
		"s_multiplayer_variant_settings_interface_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "value", &user_interface_screen_widget_definition_group_reference },
		{ _field_tag_reference, "value", &user_interface_screen_widget_definition_group_reference },
		{ _field_tag_reference, "value", &user_interface_screen_widget_definition_group_reference },
		{ _field_block, "game engine settings", &variant_setting_edit_reference_block },
		{ _field_tag_reference, "default variant strings", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "default variants", &g_default_variants_block },
		FIELD_EXPLANATION("create new slayer variant", nullptr),
		{ _field_struct, "value", &create_new_variant_struct_struct_definition, _field_id_cnvs },
		FIELD_EXPLANATION("create new king of the hill variant", nullptr),
		{ _field_struct, "value", &create_new_variant_struct_struct_definition, _field_id_cnvs },
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "value", &create_new_variant_struct_struct_definition, _field_id_cnvs },
		FIELD_HIDE_END(),
		FIELD_EXPLANATION("create new oddball variant", nullptr),
		{ _field_struct, "value", &create_new_variant_struct_struct_definition, _field_id_cnvs },
		FIELD_EXPLANATION("create new juggernaut variant", nullptr),
		{ _field_struct, "value", &create_new_variant_struct_struct_definition, _field_id_cnvs },
		FIELD_HIDE_BEGIN(),
		{ _field_struct, "value", &create_new_variant_struct_struct_definition, _field_id_cnvs },
		FIELD_HIDE_END(),
		FIELD_EXPLANATION("create new capture the flag variant", nullptr),
		{ _field_struct, "value", &create_new_variant_struct_struct_definition, _field_id_cnvs },
		FIELD_EXPLANATION("create new assault variant", nullptr),
		{ _field_struct, "value", &create_new_variant_struct_struct_definition, _field_id_cnvs },
		FIELD_EXPLANATION("create new territories variant", nullptr),
		{ _field_struct, "value", &create_new_variant_struct_struct_definition, _field_id_cnvs },
		FIELD_HIDE_BEGIN(),
		{ _field_array, "unused_create_new_variants", &unnamed_array$18 },
		FIELD_HIDE_END(),
		{ _field_terminator }
	};

	TAG_REFERENCE(user_interface_screen_widget_definition_group_reference, USER_INTERFACE_SCREEN_WIDGET_DEFINITION_TAG);

	TAG_STRUCT(
		new_hud_dashlight_data_struct_struct_definition,
		"new_hud_dashlight_data_struct",
		"new_hud_dashlight_data_struct_struct_definition",
		"s_new_hud_dashlight_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("dashlight data", "only relevant to new hud tags for weapons"),
		{ _field_short_integer, "low clip cutoff", "the cutoff for showing the reload dashlight" },
		{ _field_short_integer, "low ammo cutoff", "the cutoff for showing the low ammo dashlight" },
		{ _field_real, "age cutoff", "the age cutoff for showing the low battery dashlight" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		new_hud_definition_block_struct_definition,
		"new_hud_definition_block",
		"new_hud_definition_block_struct_definition",
		"s_new_hud_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "DO NOT USE", &new_hud_definition_group_reference },
		{ _field_block, "bitmap widgets", &hud_bitmap_widgets_block },
		{ _field_block, "text widgets", &hud_text_widgets_block },
		{ _field_struct, "dashlight data", &new_hud_dashlight_data_struct_struct_definition, _field_id_nhd2 },
		{ _field_block, "screen effect widgets", &hud_screen_effect_widgets_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		new_hud_sound_block_struct_definition,
		"new_hud_sound_block",
		"new_hud_sound_block_struct_definition",
		"s_new_hud_sound_element_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "chief sound", &sound_group_sound_looping_group_reference$2 },
		{ _field_long_flags, "latched to", &unnamed_enum$240 },
		{ _field_real, "scale" },
		{ _field_tag_reference, "dervish sound", &sound_group_sound_looping_group_reference$2 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$240)
	{
		"shield recharging",
		"shield damaged",
		"shield low",
		"shield empty",
		"health low",
		"health empty",
		"health minor damage",
		"health major damage",
		"rocket locking",
		"rocket locked"
	};
	STRING_LIST(unnamed_enum$240, unnamed_enum$240_strings, _countof(unnamed_enum$240_strings));

	TAG_STRUCT(
		node_render_leaves_block_struct_definition,
		"node_render_leaves_block",
		"node_render_leaves_block_struct_definition",
		"s_node_render_leaves",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "collision leaves", &bsp_leaf_block },
		{ _field_block, "surface references", &bsp_surface_reference_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		nodes_block_struct_definition,
		"nodes_block",
		"nodes_block_struct_definition",
		"s_physics_model_node",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_word_flags, "flags", &unnamed_enum$351 },
		{ _field_short_block_index, "parent" },
		{ _field_short_block_index, "sibling" },
		{ _field_short_block_index, "child" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$351)
	{
		"does not animate"
	};
	STRING_LIST(unnamed_enum$351, unnamed_enum$351_strings, _countof(unnamed_enum$351_strings));

	TAG_STRUCT(
		null_block_struct_definition,
		"null_block",
		"null_block_struct_definition",
		"s_null_block$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_terminator }
	};

	TAG_STRUCT(
		object_ai_properties_block_struct_definition,
		"object_ai_properties_block",
		"object_ai_properties_block_struct_definition",
		"s_object_ai_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "ai flags", &unnamed_enum$99 },
		{ _field_string_id, "ai type name", "used for combat dialogue, etc." },
		FIELD_PAD("value", 4),
		{ _field_short_enum, "ai size", &unnamed_enum$100 },
		{ _field_short_enum, "leap jump speed", &unnamed_enum$101 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$99)
	{
		"detroyable cover",
		"pathfinding ignore when dead",
		"dynamic cover"
	};
	STRING_LIST(unnamed_enum$99, unnamed_enum$99_strings, _countof(unnamed_enum$99_strings));

	STRINGS(unnamed_enum$100)
	{
		"default",
		"tiny",
		"small",
		"medium",
		"large",
		"huge",
		"immobile"
	};
	STRING_LIST(unnamed_enum$100, unnamed_enum$100_strings, _countof(unnamed_enum$100_strings));

	TAG_STRUCT(
		object_animation_block_struct_definition,
		"object_animation_block",
		"object_animation_block_struct_definition",
		"s_object_overlay",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "label" },
		{ _field_struct, "animation", &animation_index_struct_struct_definition, _field_id_ANII },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "function controls", &unnamed_enum$256 },
		{ _field_string_id, "function" },
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$256)
	{
		"frame",
		"scale"
	};
	STRING_LIST(unnamed_enum$256, unnamed_enum$256_strings, _countof(unnamed_enum$256_strings));

	TAG_STRUCT(
		object_attachment_block_struct_definition,
		"object_attachment_block",
		"object_attachment_block_struct_definition",
		"s_object_attachment_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "type", &light_group_light_volume_group_liquid_group_contrail_group_effect_group_sound_looping_group_lens_flare_group_reference },
		{ _field_old_string_id, "marker" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_short_enum, "change color", &unnamed_enum$103 },
		FIELD_PAD("value", 2),
		{ _field_string_id, "primary scale", _field_id_sted },
		{ _field_string_id, "secondary scale", _field_id_sted },
		FIELD_USELESS_PAD("value", 8),
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(light_group_light_volume_group_liquid_group_contrail_group_effect_group_sound_looping_group_lens_flare_group_reference)
	{
		LIGHT_TAG,
		LIGHT_VOLUME_TAG,
		LIQUID_TAG,
		CONTRAIL_TAG,
		EFFECT_TAG,
		SOUND_LOOPING_TAG,
		LENS_FLARE_TAG,
		INVALID_TAG
	};

	STRINGS(unnamed_enum$103)
	{
		"none",
		"primary",
		"secondary",
		"tertiary",
		"quaternary"
	};
	STRING_LIST(unnamed_enum$103, unnamed_enum$103_strings, _countof(unnamed_enum$103_strings));

	TAG_STRUCT(
		object_block_struct_definition,
		"object_block",
		"object_block_struct_definition",
		"s_object_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		object_change_color_function_struct_definition,
		"object_change_color_function",
		"object_change_color_function_struct_definition",
		"s_object_change_color_function",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 4),
		{ _field_long_flags, "scale flags", &unnamed_enum$104 },
		{ _field_real_rgb_color, "color lower bound" },
		{ _field_real_rgb_color, "color upper bound" },
		{ _field_string_id, "darken by" },
		{ _field_string_id, "scale by" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		object_change_color_initial_permutation_struct_definition,
		"object_change_color_initial_permutation",
		"object_change_color_initial_permutation_struct_definition",
		"s_object_change_color_initial_permutation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "weight" },
		{ _field_real_rgb_color, "color lower bound" },
		{ _field_real_rgb_color, "color upper bound" },
		{ _field_string_id, "variant name", "if empty, may be used by any model variant" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		object_change_colors_struct_definition,
		"object_change_colors",
		"object_change_colors_struct_definition",
		"s_object_change_color_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_USELESS_PAD("value", 32),
		{ _field_block, "initial permutations", &object_change_color_initial_permutation_block },
		{ _field_block, "functions", &object_change_color_function_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		object_function_block_struct_definition,
		"object_function_block",
		"object_function_block_struct_definition",
		"s_object_function_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$102 },
		{ _field_string_id, "import name", _field_id_sted },
		{ _field_string_id, "export name" },
		{ _field_string_id, "turn off with", "if the specified function is off, so is this function", _field_id_sted },
		{ _field_real, "min value", "function must exceed this value (after mapping) to be active 0. means do nothing" },
		FIELD_CUSTOM("default function", _field_id_function_editor),
		{ _field_struct, "default function", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_string_id, "scale by" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$102)
	{
		"invert#result of function is one minus actual result",
		"mapping does not controls active#the curve mapping can make the function active/inactive",
		"always active#function does not deactivate when at or below lower bound",
		"random time offset#function offsets periodic function input by random value between 0 and 1"
	};
	STRING_LIST(unnamed_enum$102, unnamed_enum$102_strings, _countof(unnamed_enum$102_strings));

	TAG_STRUCT(
		object_space_node_data_block_struct_definition,
		"object_space_node_data_block",
		"object_space_node_data_block_struct_definition",
		"s_object_space_node_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "node_index" },
		{ _field_word_flags, "component flags", &unnamed_enum$254 },
		{ _field_struct, "orientation", &quantized_orientation_struct_struct_definition, _field_id_qoSS },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$254)
	{
		"rotation",
		"translation",
		"scale"
	};
	STRING_LIST(unnamed_enum$254, unnamed_enum$254_strings, _countof(unnamed_enum$254_strings));

	TAG_STRUCT(
		object_space_node_data_block_v0_struct_definition,
		"object_space_node_data_block_v0",
		"object_space_node_data_block_v0_struct_definition",
		"s_object_space_node_data_v0",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "node_index" },
		{ _field_word_flags, "component flags", &unnamed_enum$254 },
		{ _field_real_quaternion, "default rotation" },
		{ _field_real_point_3d, "default translation" },
		{ _field_real, "default scale" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		object_widget_block_struct_definition,
		"object_widget_block",
		"object_widget_block_struct_definition",
		"s_object_definition_widget",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "type", &antenna_group_cloth_group_cellular_automata_group_cellular_automata2d_group_stereo_system_group_liquid_group_reference },
		FIELD_USELESS_PAD("value", 16),
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(antenna_group_cloth_group_cellular_automata_group_cellular_automata2d_group_stereo_system_group_liquid_group_reference)
	{
		ANTENNA_TAG,
		CLOTH_TAG,
		CELLULAR_AUTOMATA_TAG,
		CELLULAR_AUTOMATA2D_TAG,
		STEREO_SYSTEM_TAG,
		LIQUID_TAG,
		INVALID_TAG
	};

	TAG_STRUCT(
		occluder_to_machine_door_mapping_struct_definition,
		"occluder_to_machine_door_mapping",
		"occluder_to_machine_door_mapping_struct_definition",
		"s_char",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "machine door index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		old_material_effect_material_block_struct_definition,
		"old_material_effect_material_block",
		"old_material_effect_material_block_struct_definition",
		"s_material_effect_material_old",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "effect", &effect_group_reference },
		{ _field_tag_reference, "sound", &sound_group_sound_looping_group_reference },
		{ _field_string_id, "material name", _field_id_sted },
		FIELD_SKIP("value", 4),
		{ _field_char_enum, "sweetener mode", &unnamed_enum$200 },
		FIELD_PAD("value", 3),
		FIELD_USELESS_PAD("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		old_materials_block_struct_definition,
		"old_materials_block",
		"old_materials_block_struct_definition",
		"s_material_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_USELESS_PAD("value", 4),
		{ _field_string_id, "new material name", _field_id_sted },
		{ _field_string_id, "new general material name", _field_id_sted },
		FIELD_USELESS_PAD("value", 88),
		FIELD_USELESS_PAD("value", 48),
		FIELD_EXPLANATION("vehicle terrain parameters", "the following fields modify the way a vehicle drives over terrain of this material type."),
		{ _field_real, "ground friction scale", "fraction of original velocity parallel to the ground after one tick" },
		{ _field_real, "ground friction normal k1 scale", "cosine of angle at which friction falls off" },
		{ _field_real, "ground friction normal k0 scale", "cosine of angle at which friction is zero" },
		{ _field_real, "ground depth scale", "depth a point mass rests in the ground" },
		{ _field_real, "ground damp fraction scale", "fraction of original velocity perpendicular to the ground after one tick" },
		FIELD_USELESS_PAD("value", 76),
		FIELD_USELESS_PAD("value", 624),
		{ _field_tag_reference, "melee hit sound", &sound_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		old_object_function_block_struct_definition,
		"old_object_function_block",
		"old_object_function_block_struct_definition",
		"s_old_object_function_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 76),
		{ _field_old_string_id, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		old_scenario_device_struct_struct_definition,
		"old_scenario_device_struct",
		"old_scenario_device_struct_struct_definition",
		"s_old_scenario_device_datum",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "power group" },
		{ _field_short_block_index, "position group" },
		{ _field_long_flags, "flags", &unnamed_enum$17 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$17)
	{
		"initially open (1.0)",
		"initially off (0.0)",
		"can change only once",
		"position reversed",
		"not usable from any side"
	};
	STRING_LIST(unnamed_enum$17, unnamed_enum$17_strings, _countof(unnamed_enum$17_strings));

	TAG_STRUCT(
		old_scenario_unit_struct_struct_definition,
		"old_scenario_unit_struct",
		"old_scenario_unit_struct_struct_definition",
		"s_old_scenario_unit_datum",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "body vitality", nullptr, nullptr, "[0,1]" },
		{ _field_long_flags, "flags", &unnamed_enum$16 },
		FIELD_PAD("value", 8),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$16)
	{
		"dead",
		"closed",
		"not enterable by player"
	};
	STRING_LIST(unnamed_enum$16, unnamed_enum$16_strings, _countof(unnamed_enum$16_strings));

	TAG_STRUCT(
		old_sound_permutation_info_block_struct_definition,
		"old_sound_permutation_info_block",
		"old_sound_permutation_info_block_struct_definition",
		"s_sound_permutation_info_v1",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 12),
		{ _field_data, "mouth data", &sound_mouth_data },
		{ _field_terminator }
	};

	TAG_STRUCT(
		old_sound_permutations_block_struct_definition,
		"old_sound_permutations_block",
		"old_sound_permutations_block_struct_definition",
		"s_sound_permutation_v1",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name", "name of the file from which this sample was imported" },
		{ _field_real_fraction, "skip fraction", "fraction of requests to play this permutation that are ignored (a different permutation is selected.)" },
		{ _field_real, "gain", "fraction of recorded volume to play at.", "dB" },
		{ _field_short_enum, "compression", &unnamed_enum$445 },
		{ _field_short_integer, "next permutation index" },
		FIELD_PAD("value", 20),
		{ _field_data, "samples", "sampled sound data", &old_sound_samples },
		{ _field_data, "mouth data", &sound_mouth_data },
		{ _field_data, "subtitle data", &sound_subtitle_data },
		{ _field_terminator }
	};

	TAG_STRUCT(
		old_sound_pitch_range_block_struct_definition,
		"old_sound_pitch_range_block",
		"old_sound_pitch_range_block_struct_definition",
		"s_sound_pitch_range_v1",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name", "the name of the imported pitch range directory" },
		FIELD_EXPLANATION("pitch control", "these settings control what pitches this set of samples represents. if there is only one pitch range, all three values are ignored."),
		{ _field_real, "natural pitch", "the apparent pitch when these samples are played at their recorded pitch.", "cents", _field_id_cents },
		{ _field_real_bounds, "bend bounds", "the range of pitches that will be represented using this sample. this should always contain the natural pitch.", "cents", _field_id_cents },
		{ _field_short_integer, "actual permutation count" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 12),
		{ _field_block, "permutations", "permutations represent equivalent variations of this sound.", &old_sound_permutations_block },
		{ _field_block, "permutation info", &old_sound_permutation_info_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		old_unused_object_identifiers_block_struct_definition,
		"old_unused_object_identifiers_block",
		"old_unused_object_identifiers_block_struct_definition",
		"s_object_identifier$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "object id", &scenario_object_id_struct_struct_definition, _field_id_object_id },
		{ _field_terminator }
	};

	TAG_STRUCT(
		old_unused_strucure_physics_block_struct_definition,
		"old_unused_strucure_physics_block",
		"old_unused_strucure_physics_block_struct_definition",
		"s_here_but_for_the_grace_of_god_go_this_poor_soul",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_data, "*mopp code", &old_unused_mopp_code_data },
		{ _field_block, "*environment object identifiers", &old_unused_object_identifiers_block },
		FIELD_PAD("value", 4),
		{ _field_real_point_3d, "mopp bounds min" },
		{ _field_real_point_3d, "mopp bounds max" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		order_completion_block_struct_definition,
		"order_completion_block",
		"order_completion_block_struct_definition",
		"s_order_completion_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "combination rule", &unnamed_enum$82 },
		{ _field_short_block_index, "next order" },
		FIELD_PAD("value", 48),
		{ _field_block, "conditions", &order_completion_condition_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		order_completion_condition_struct_definition,
		"order_completion_condition",
		"order_completion_condition_struct_definition",
		"s_order_completion_condition_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "rule type", &unnamed_enum$86 },
		{ _field_short_block_index, "squad" },
		{ _field_short_block_index, "squad group" },
		{ _field_short_integer, "a" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "x" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_short_block_index, "trigger volume" },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 8),
		{ _field_string, "Exit condition script", _field_id_halo_script_block },
		{ _field_short_integer, "value" },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 36),
		{ _field_long_flags, "flags", &unnamed_enum$87 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$86)
	{
		"A or greater alive",
		"A or fewer alive",
		"X or greater strength",
		"X or less strength",
		"If enemy sighted",
		"After A ticks",
		"If alerted by squad A",
		"Script ref TRUE",
		"Script ref FALSE",
		"If player in trigger volume",
		"If ALL players in trigger volume",
		"Combat status A or more",
		"Combat status A or less",
		"Arrived",
		"In vehicle",
		"Sighted player",
		"A or greater fighting",
		"A or fewer fighting",
		"Player within X world units",
		"Player shot more than X seconds ago",
		"Game safe to save"
	};
	STRING_LIST(unnamed_enum$86, unnamed_enum$86_strings, _countof(unnamed_enum$86_strings));

	STRINGS(unnamed_enum$87)
	{
		"NOT!"
	};
	STRING_LIST(unnamed_enum$87, unnamed_enum$87_strings, _countof(unnamed_enum$87_strings));

	TAG_STRUCT(
		order_ending_block_struct_definition,
		"order_ending_block",
		"order_ending_block_struct_definition",
		"s_order_ending_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "next order" },
		{ _field_short_enum, "combination rule", &unnamed_enum$82 },
		{ _field_real, "delay time" },
		{ _field_short_enum, "dialogue type", "when this ending is triggered, launch a dialogue event of the given type", &unnamed_enum$83 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 16),
		{ _field_block, "triggers", &trigger_references_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$83)
	{
		"none",
		"advance",
		"charge",
		"fall_back",
		"retreat",
		"moveone",
		"arrival",
		"enter_vehicle",
		"exit_vehicle",
		"follow_player",
		"leave_player",
		"support"
	};
	STRING_LIST(unnamed_enum$83, unnamed_enum$83_strings, _countof(unnamed_enum$83_strings));

	VERSIONED_TAG_STRUCT(
		orders_v3_struct_definition,
		"orders_v3",
		"orders_v3_struct_definition",
		"s_orders_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 17 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_string, "name" },
		{ _field_short_block_index, "Style" },
		FIELD_PAD("value", 2),
		{ _field_long_flags, "flags", &unnamed_enum$79 },
		{ _field_short_enum, "Force combat status", &unnamed_enum$80 },
		FIELD_PAD("value", 2),
		{ _field_string, "Entry Script", _field_id_halo_script_block },
		FIELD_SKIP("value", 2),
		{ _field_short_block_index, "Follow squad" },
		{ _field_real, "follow radius" },
		{ _field_block, "Primary area set", &zone_set_block },
		{ _field_block, "Secondary area set", &secondary_zone_set_block },
		{ _field_block, "Secondary set trigger", &secondary_set_trigger_block },
		{ _field_block, "Special movement", &special_movement_block },
		FIELD_USELESS_PAD("value", 12),
		{ _field_block, "Order endings", &order_ending_block },
		
		{ _struct_version_mode_equal, 1, 16 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_string, "name" },
		{ _field_short_block_index, "Style" },
		FIELD_PAD("value", 2),
		{ _field_long_flags, "flags", &unnamed_enum$79 },
		{ _field_short_enum, "Force combat status", &unnamed_enum$80 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 8),
		{ _field_string, "Entry Script", _field_id_halo_script_block },
		FIELD_SKIP("value", 2),
		{ _field_short_block_index, "Follow squad" },
		{ _field_real, "follow radius" },
		{ _field_block, "Area references", &zone_set_block },
		{ _field_block, "Special movement", &special_movement_block },
		FIELD_PAD("value", 12),
		{ _field_block, "Order endings", &order_ending_block },
		
		{ _struct_version_mode_equal, 0, 17 },
		{ _field_string, "name" },
		{ _field_short_block_index, "Style" },
		FIELD_PAD("value", 2),
		{ _field_long_flags, "flags", &unnamed_enum$79 },
		{ _field_short_enum, "Force combat status", &unnamed_enum$80 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 8),
		{ _field_string, "Entry Script", _field_id_halo_script_block },
		FIELD_SKIP("value", 2),
		{ _field_short_block_index, "Follow squad" },
		{ _field_real, "follow radius" },
		{ _field_block, "DEPRECATED", &area_set_block },
		{ _field_block, "Area references", &zone_set_block },
		FIELD_PAD("value", 36),
		{ _field_block, "DEPRECATED", &order_completion_block },
		FIELD_PAD("value", 48),
		{ _field_block, "Order endings", &order_ending_block },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$79)
	{
		"locked",
		"always active",
		"debug on",
		"strict area def",
		"follow closest player",
		"follow squad",
		"active camo",
		"suppress combat until engaged",
		"inhibit vehicle use"
	};
	STRING_LIST(unnamed_enum$79, unnamed_enum$79_strings, _countof(unnamed_enum$79_strings));

	STRINGS(unnamed_enum$80)
	{
		"NONE",
		"Asleep",
		"Idle",
		"Alert",
		"Combat"
	};
	STRING_LIST(unnamed_enum$80, unnamed_enum$80_strings, _countof(unnamed_enum$80_strings));

	TAG_STRUCT(
		packed_data_sizes_struct_struct_definition,
		"packed_data_sizes_struct",
		"packed_data_sizes_struct_struct_definition",
		"s_animation_data_sizes",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "value" },
		{ _field_char_integer, "value" },
		{ _field_short_integer, "value" },
		{ _field_short_integer, "value" },
		{ _field_short_integer, "value" },
		{ _field_long_integer, "value" },
		{ _field_long_integer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		particle_block_struct_definition,
		"particle_block",
		"particle_block_struct_definition",
		"s_particle_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$35 },
		{ _field_short_enum, "particle billboard style", &unnamed_enum$36 },
		FIELD_PAD("value", 2),
		{ _field_short_integer, "first sequence index" },
		{ _field_short_integer, "sequence count" },
		FIELD_EXPLANATION("Shader Parameters", nullptr),
		FIELD_CUSTOM("shader", _field_id_shader_template),
		FIELD_HIDE_BEGIN(),
		{ _field_tag_reference, "shader template", &shader_template_group_reference },
		{ _field_block, "shader parameters", &global_shader_parameter_block },
		FIELD_HIDE_END(),
		FIELD_EXPLANATION("Color", "controls how the color of the particle changes as\na function of its input"),
		{ _field_struct, "color", &particle_property_color_struct_new_struct_definition, _field_id_particle_property_color },
		FIELD_EXPLANATION("Alpha", "seperate from color, controls how the particle fades\nas a function of its input"),
		{ _field_struct, "alpha", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("Scale", "controls how the size of a particle changes as\na function of its input"),
		{ _field_struct, "scale", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("Rotation", "controls how the particle rotates. 0= 0 degrees, .5= 180 degrees, 1.0= 360 degrees"),
		{ _field_struct, "rotation", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("Frame index", "provides finer grain control over how the animation\nhappens.  a output of 0.25 means that when that input\nis fed in, the particle will be 25% of the way through\nits animation."),
		{ _field_struct, "frame index", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("Spawned Effects", "collision occurs when particle physics has collision, death spawned when particle dies"),
		{ _field_tag_reference, "collision effect", "effect, material effect or sound spawned when this particle collides with something", &effect_group_sound_group_material_effects_group_reference$2 },
		{ _field_tag_reference, "death effect", "effect, material effect or sound spawned when this particle dies", &effect_group_sound_group_material_effects_group_reference$2 },
		FIELD_EXPLANATION("Attached Particle Systems", "Locations:\nup - particles shoot straight up\ngravity - particles shoot straight down\nNONE - opposite of particle direction"),
		{ _field_block, "locations", &effect_locations_block },
		{ _field_block, "attached particle systems", &particle_system_definition_block_new_block },
		{ _field_block, "value", &shader_postprocess_definition_new_block },
		FIELD_PAD("value", 8),
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 16),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$35)
	{
		"spins",
		"random u mirror",
		"random v mirror",
		"frame animation one shot",
		"select random sequence",
		"disable frame blending",
		"can animate backwards",
		"receive lightmap lighting",
		"tint from diffuse texture",
		"dies at rest",
		"dies on structure collision",
		"dies in media",
		"dies in air",
		"bitmap authored vertically",
		"has sweetener"
	};
	STRING_LIST(unnamed_enum$35, unnamed_enum$35_strings, _countof(unnamed_enum$35_strings));

	STRINGS(unnamed_enum$36)
	{
		"screen facing",
		"parallel to direction",
		"perpendicular to direction",
		"vertical",
		"horizontal"
	};
	STRING_LIST(unnamed_enum$36, unnamed_enum$36_strings, _countof(unnamed_enum$36_strings));

	TAG_REFERENCE(shader_template_group_reference, SHADER_TEMPLATE_TAG);

	TAG_REFERENCE_GROUP(effect_group_sound_group_material_effects_group_reference$2)
	{
		EFFECT_TAG,
		SOUND_TAG,
		MATERIAL_EFFECTS_TAG,
		INVALID_TAG
	};

	TAG_STRUCT(
		particle_controller_parameters_struct_definition,
		"particle_controller_parameters",
		"particle_controller_parameters_struct_definition",
		"s_particle_controller_parameter",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "parameter id" },
		{ _field_struct, "property", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		{ _field_terminator }
	};

	TAG_STRUCT(
		particle_controller_struct_definition,
		"particle_controller",
		"particle_controller_struct_definition",
		"s_particle_controller",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$356 },
		FIELD_PAD("value", 2),
		{ _field_block, "parameters", &particle_controller_parameters_block },
		FIELD_PAD("value", 8),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$356)
	{
		"physics",
		"collider",
		"swarm",
		"wind"
	};
	STRING_LIST(unnamed_enum$356, unnamed_enum$356_strings, _countof(unnamed_enum$356_strings));

	TAG_STRUCT(
		particle_model_block_struct_definition,
		"particle_model_block",
		"particle_model_block_struct_definition",
		"s_particle_model_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$35 },
		{ _field_long_enum, "orientation", &unnamed_enum$36 },
		FIELD_PAD("value", 16),
		{ _field_tag_reference, "shader", &shader_group_reference },
		FIELD_EXPLANATION("SCALE X", "scale of model on x axis"),
		{ _field_struct, "scale x", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("SCALE Y", "scale of model on y axis"),
		{ _field_struct, "scale y", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("SCALE Z", "scale of model on z axis"),
		{ _field_struct, "scale z", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("ROTATION", "rotation where 0=0 degrees, 0.5=180 degrees, 1.0=360 degrees"),
		{ _field_struct, "rotation", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("Spawned Effects", "collision occurs when particle physics has collision, death spawned when particle dies"),
		{ _field_tag_reference, "collision effect", "effect, material effect or sound spawned when this particle collides with something", &effect_group_sound_group_material_effects_group_reference },
		{ _field_tag_reference, "death effect", "effect, material effect or sound spawned when this particle dies", &effect_group_sound_group_material_effects_group_reference },
		FIELD_EXPLANATION("Attached Particle Systems", "Locations:\nup - particles shoot straight up\ngravity - particles shoot straight down\nNONE - opposite of particle direction"),
		{ _field_block, "locations", &effect_locations_block },
		{ _field_block, "attached particle systems", &particle_system_definition_block_new_block },
		{ _field_block, "models", &particle_models_block },
		{ _field_block, "raw vertices", &particle_model_vertices_block },
		{ _field_block, "indices", &particle_model_indices_block },
		{ _field_block, "cached data", &cached_data_block$2 },
		{ _field_struct, "geometry section info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 8),
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(effect_group_sound_group_material_effects_group_reference)
	{
		EFFECT_TAG,
		SOUND_TAG,
		MATERIAL_EFFECTS_TAG,
		INVALID_TAG
	};

	TAG_STRUCT(
		particle_model_indices_block_struct_definition,
		"particle_model_indices_block",
		"particle_model_indices_block_struct_definition",
		"s_word$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		particle_model_vertices_block_struct_definition,
		"particle_model_vertices_block",
		"particle_model_vertices_block_struct_definition",
		"s_particle_model_vertex",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_real_vector_3d, "normal" },
		{ _field_real_vector_3d, "tangent" },
		{ _field_real_vector_3d, "binormal" },
		{ _field_real_point_2d, "texcoord" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		particle_models_block_struct_definition,
		"particle_models_block",
		"particle_models_block_struct_definition",
		"s_particle_model",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "model name" },
		{ _field_short_integer, "index start" },
		{ _field_short_integer, "index count" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		particle_physics_block_struct_definition,
		"particle_physics_block",
		"particle_physics_block_struct_definition",
		"s_particle_movement_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "template", &particle_physics_group_reference$2 },
		{ _field_long_flags, "flags", &unnamed_enum$355 },
		{ _field_block, "movements", &particle_controller_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(particle_physics_group_reference$2, PARTICLE_PHYSICS_TAG);

	STRINGS(unnamed_enum$355)
	{
		"physics",
		"collide with structure",
		"collide with media",
		"collide with scenery",
		"collide with vehicles",
		"collide with bipeds",
		"swarm",
		"wind"
	};
	STRING_LIST(unnamed_enum$355, unnamed_enum$355_strings, _countof(unnamed_enum$355_strings));

	TAG_STRUCT(
		particle_property_color_struct_new_struct_definition,
		"particle_property_color_struct_new",
		"particle_property_color_struct_new_struct_definition",
		"s_particle_property$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "Input Variable", &unnamed_enum$37, _field_id_function_input_scalar },
		{ _field_short_enum, "Range Variable", &unnamed_enum$37, _field_id_function_input_range },
		{ _field_short_enum, "Output Modifier", &unnamed_enum$38, _field_id_function_output_modifier },
		{ _field_short_enum, "Output Modifier Input", &unnamed_enum$37, _field_id_function_output_modifier_input },
		FIELD_CUSTOM("Mapping", _field_id_function_editor),
		{ _field_struct, "Mapping", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$37)
	{
		"particle age",
		"particle emit time",
		"particle random 1",
		"particle random 2",
		"emitter age",
		"emitter random 1",
		"emitter random 2",
		"system lod",
		"game time",
		"effect a scale",
		"effect b scale",
		"particle rotation",
		"explosion animation",
		"explosion rotation",
		"particle random 3",
		"particle random 4",
		"location random"
	};
	STRING_LIST(unnamed_enum$37, unnamed_enum$37_strings, _countof(unnamed_enum$37_strings));

	STRINGS(unnamed_enum$38)
	{
		" ",
		"Plus",
		"Times"
	};
	STRING_LIST(unnamed_enum$38, unnamed_enum$38_strings, _countof(unnamed_enum$38_strings));

	TAG_STRUCT(
		particle_property_scalar_struct_new_struct_definition,
		"particle_property_scalar_struct_new",
		"particle_property_scalar_struct_new_struct_definition",
		"s_particle_property",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "Input Variable", &unnamed_enum$37, _field_id_function_input_scalar },
		{ _field_short_enum, "Range Variable", &unnamed_enum$37, _field_id_function_input_range },
		{ _field_short_enum, "Output Modifier", &unnamed_enum$38, _field_id_function_output_modifier },
		{ _field_short_enum, "Output Modifier Input", &unnamed_enum$37, _field_id_function_output_modifier_input },
		FIELD_CUSTOM("Mapping", _field_id_function_editor),
		{ _field_struct, "Mapping", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		particle_system_definition_block_struct_definition,
		"particle_system_definition_block",
		"particle_system_definition_block_struct_definition",
		"s_particle_system_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 15 },
		{ _field_tag_reference, "particle", &particle_group_particle_model_group_reference },
		{ _field_long_block_index, "location" },
		{ _field_short_enum, "coordinate system", &unnamed_enum$39 },
		{ _field_short_enum, "environment", &unnamed_enum$40 },
		{ _field_short_enum, "disposition", &unnamed_enum$41 },
		{ _field_short_enum, "camera mode", &unnamed_enum$42 },
		{ _field_short_integer, "sort bias", "use values between -10 and 10 to move closer and farther from camera (positive is closer)" },
		{ _field_word_flags, "flags", &unnamed_enum$43 },
		{ _field_real, "LOD in distance", "defaults to 0.0" },
		{ _field_real, "LOD feather in delta", "defaults to 0.0" },
		FIELD_SKIP("value", 4),
		{ _field_real, "LOD out distance", "defaults to 30.0" },
		{ _field_real, "LOD feather out delta", "defaults to 10.0" },
		FIELD_SKIP("value", 4),
		{ _field_block, "emitters", &particle_system_emitter_definition_block },
		
		{ _struct_version_mode_equal, 0, 9 },
		{ _field_tag_reference, "particle", &particle_group_particle_model_group_reference },
		{ _field_long_block_index, "location" },
		{ _field_short_enum, "coordinate system", &unnamed_enum$39 },
		{ _field_short_enum, "environment", &unnamed_enum$40 },
		{ _field_short_enum, "disposition", &unnamed_enum$41 },
		{ _field_short_enum, "camera mode", &unnamed_enum$42 },
		{ _field_short_integer, "sort bias", "use values between -10 and 10 to move closer and farther from camera (positive is closer)" },
		{ _field_word_flags, "flags", &unnamed_enum$43 },
		{ _field_block, "emitters", &particle_system_emitter_definition_block },
		
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(particle_group_particle_model_group_reference)
	{
		PARTICLE_TAG,
		PARTICLE_MODEL_TAG,
		INVALID_TAG
	};

	STRINGS(unnamed_enum$39)
	{
		"world",
		"local",
		"parent"
	};
	STRING_LIST(unnamed_enum$39, unnamed_enum$39_strings, _countof(unnamed_enum$39_strings));

	STRINGS(unnamed_enum$42)
	{
		"independent of camera mode",
		"only in first person",
		"only in third person",
		"both first and third"
	};
	STRING_LIST(unnamed_enum$42, unnamed_enum$42_strings, _countof(unnamed_enum$42_strings));

	STRINGS(unnamed_enum$43)
	{
		"glow",
		"cinematics",
		"looping particle",
		"disabled for debugging",
		"inherit effect velocity",
		"don\'t render system",
		"render when zoomed",
		"spread between ticks",
		"persistent particle",
		"expensive visibility"
	};
	STRING_LIST(unnamed_enum$43, unnamed_enum$43_strings, _countof(unnamed_enum$43_strings));

	TAG_STRUCT(
		particle_system_emitter_definition_block_struct_definition,
		"particle_system_emitter_definition_block",
		"particle_system_emitter_definition_block_struct_definition",
		"s_particle_emitter_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "particle physics", &particle_physics_group_reference },
		FIELD_EXPLANATION("particle emission rate (particles/tick)", nullptr),
		{ _field_struct, "particle emission rate", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("particle lifespan(seconds)", nullptr),
		{ _field_struct, "particle lifespan", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("particle velocity(world units/second)", nullptr),
		{ _field_struct, "particle velocity", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("particle angular velocity(degrees/second)", nullptr),
		{ _field_struct, "particle angular velocity", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("particle size(world units)", nullptr),
		{ _field_struct, "particle size", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("particle tint", nullptr),
		{ _field_struct, "particle tint", &particle_property_color_struct_new_struct_definition, _field_id_particle_property_color },
		FIELD_EXPLANATION("particle alpha", nullptr),
		{ _field_struct, "particle alpha", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("EMISSION SETTINGS", nullptr),
		{ _field_long_enum, "emission shape", &unnamed_enum$44 },
		FIELD_EXPLANATION("emission radius(world units)", nullptr),
		{ _field_struct, "emission radius", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		FIELD_EXPLANATION("emission angle(degrees)", nullptr),
		{ _field_struct, "emission angle", &particle_property_scalar_struct_new_struct_definition, _field_id_particle_property_scalar },
		{ _field_real_point_3d, "translational offset" },
		{ _field_real_euler_angles_2d, "relative direction", "particle initial velocity direction relative to the location's forward" },
		FIELD_PAD("value", 8),
		{ _field_terminator }
	};

	TAG_REFERENCE(particle_physics_group_reference, PARTICLE_PHYSICS_TAG);

	STRINGS(unnamed_enum$44)
	{
		"sprayer",
		"disc",
		"globe",
		"implode",
		"tube",
		"halo",
		"impact contour",
		"impact area",
		"debris",
		"line"
	};
	STRING_LIST(unnamed_enum$44, unnamed_enum$44_strings, _countof(unnamed_enum$44_strings));

	TAG_STRUCT(
		particle_system_lite_data_block_struct_definition,
		"particle_system_lite_data_block",
		"particle_system_lite_data_block_struct_definition",
		"s_particle_system_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "particles render data", &particles_render_data_block },
		{ _field_block, "particles other data", &particles_update_data_block },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_STRUCT(
		particles_render_data_block_struct_definition,
		"particles_render_data_block",
		"particles_render_data_block_struct_definition",
		"s_particle_lite_render",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "position.x" },
		{ _field_real, "position.y" },
		{ _field_real, "position.z" },
		{ _field_real, "size" },
		{ _field_rgb_color, "color" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		particles_update_data_block_struct_definition,
		"particles_update_data_block",
		"particles_update_data_block_struct_definition",
		"s_particle_lite_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "velocity.x" },
		{ _field_real, "velocity.y" },
		{ _field_real, "velocity.z" },
		FIELD_PAD("value", 12),
		{ _field_real, "mass" },
		{ _field_real, "creation time stamp" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		patchy_fog_block_struct_definition,
		"patchy_fog_block",
		"patchy_fog_block_struct_definition",
		"s_patchy_fog_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("PATCHY FOG", "Use the separate_layer_depths flag carefully, it\'s expensive!"),
		{ _field_word_flags, "flags", &unnamed_enum$201 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 60),
		FIELD_EXPLANATION("MOVEMENT MODIFIERS", nullptr),
		{ _field_real_fraction, "rotation multiplier", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "strafing multiplier", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "zoom multiplier", nullptr, nullptr, "[0,1]" },
		FIELD_USELESS_PAD("value", 32),
		FIELD_EXPLANATION("NOISE MAP", nullptr),
		{ _field_real, "noise map scale", "0 defaults to 1" },
		{ _field_tag_reference, "noise map", &bitmap_group_reference },
		{ _field_real, "noise vertical scale forward", "0 defaults to 1" },
		{ _field_real, "noise vertical scale up", "0 defaults to 1" },
		{ _field_real, "noise opacity scale up", "0 defaults to 1" },
		FIELD_USELESS_PAD("value", 20),
		FIELD_EXPLANATION("ANIMATION", nullptr),
		{ _field_real, "animation period", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real_bounds, "wind velocity", nullptr, "world units per second" },
		{ _field_real_bounds, "wind period", "0 defaults to 1", "seconds" },
		{ _field_real_fraction, "wind acceleration weight", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "wind perpendicular weight", nullptr, nullptr, "[0,1]" },
		{ _field_real, "wind constant velocity x", nullptr, "world units per second" },
		{ _field_real, "wind constant velocity y", nullptr, "world units per second" },
		{ _field_real, "wind constant velocity z", nullptr, "world units per second" },
		FIELD_USELESS_PAD("value", 20),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$201)
	{
		"separate layer depths",
		"sort behind transparents"
	};
	STRING_LIST(unnamed_enum$201, unnamed_enum$201_strings, _countof(unnamed_enum$201_strings));

	TAG_STRUCT(
		pathfinding_data_block_struct_definition,
		"pathfinding_data_block",
		"pathfinding_data_block_struct_definition",
		"s_pathfinding_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "sectors", &sector_block },
		{ _field_block, "links", &sector_link_block },
		{ _field_block, "refs", &ref_block },
		{ _field_block, "bsp2d nodes", &sector_bsp2d_nodes_block },
		{ _field_block, "surface flags", &surface_flags_block },
		{ _field_block, "vertices", &sector_vertex_block },
		{ _field_block, "object refs", &environment_object_refs_block },
		{ _field_block, "pathfinding hints", &pathfinding_hints_block },
		{ _field_block, "instanced geometry refs", &instanced_geometry_reference_block },
		{ _field_long_integer, "structure checksum" },
		FIELD_PAD("value", 32),
		{ _field_block, "user-placed hints", &user_hint_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		pathfinding_object_index_list_block_struct_definition,
		"pathfinding_object_index_list_block",
		"pathfinding_object_index_list_block_struct_definition",
		"s_pathfinding_object_index_list",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "bsp index" },
		{ _field_short_integer, "pathfinding object index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		permutations_block_struct_definition,
		"permutations_block",
		"permutations_block_struct_definition",
		"s_physics_model_permutation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_block, "rigid bodies", &rigid_body_indices_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		persistent_background_animation_block_struct_definition,
		"persistent_background_animation_block",
		"persistent_background_animation_block_struct_definition",
		"s_persistant_animation_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 4),
		{ _field_long_integer, "animation period", nullptr, "milliseconds" },
		{ _field_block, "interpolated keyframes", &background_animation_keyframe_reference_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		phantom_type_struct_definition,
		"phantom_type",
		"phantom_type_struct_definition",
		"s_physics_model_phantom_type",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 22 },
		{ _field_long_flags, "flags", &unnamed_enum$343 },
		{ _field_char_enum, "minimum size", &unnamed_enum$344 },
		{ _field_char_enum, "maximum size", &unnamed_enum$344 },
		FIELD_PAD("value", 2),
		{ _field_string_id, "marker name", "you don't need this if you're just generating effects.  If empty it defaults to the up of the object" },
		{ _field_string_id, "alignment marker name", "you don't need this if you're just generating effects.  If empty it defaults to \"marker name\"" },
		FIELD_EXPLANATION("Linear Motion", "0 - means do nothing\nCENTER: motion towards marker position \nAXIS: motion towards marker axis, such that object is on the axis\nDIRECTION: motion along marker direction"),
		FIELD_PAD("value", 8),
		{ _field_real, "hookes law e", "0 if you don't want this to behave like spring.  1 is a good starting point if you do." },
		{ _field_real, "linear dead radius", "radius from linear motion origin in which acceleration is dead." },
		{ _field_real, "center acc" },
		{ _field_real, "center max vel" },
		{ _field_real, "axis acc" },
		{ _field_real, "axis max vel" },
		{ _field_real, "direction acc" },
		{ _field_real, "direction max vel" },
		FIELD_PAD("value", 28),
		FIELD_EXPLANATION("Angular Motion", "0 - means do nothing\nALIGNMENT: algin objects in the phantom with the marker\nSPIN: spin the object about the marker axis"),
		{ _field_real, "alignment hookes law e", "0 if you don't want this to behave like spring.  1 is a good starting point if you do." },
		{ _field_real, "alignment acc" },
		{ _field_real, "alignment max vel" },
		FIELD_PAD("value", 8),
		
		{ _struct_version_mode_equal, 0, 21 },
		{ _field_word_flags, "flags", &unnamed_enum$345 },
		{ _field_char_enum, "minimum size", &unnamed_enum$344 },
		{ _field_char_enum, "maximum size", &unnamed_enum$344 },
		{ _field_string_id, "marker name", "you don't need this if you're just generating effects.  If empty it defaults to the up of the object" },
		{ _field_string_id, "alignment marker name", "you don't need this if you're just generating effects.  If empty it defaults to \"marker name\"" },
		FIELD_PAD("value", 16),
		{ _field_real, "linear dead radius", "radius from linear motion origin in which acceleration is dead." },
		FIELD_EXPLANATION("Linear Motion", "0 - means do nothing\nCENTER: motion towards marker position \nAXIS: motion towards marker axis, such that object is on the axis\nDIRECTION: motion along marker direction"),
		{ _field_real, "center acc" },
		{ _field_real, "center max vel" },
		{ _field_real, "axis acc" },
		{ _field_real, "axis max vel" },
		{ _field_real, "direction acc" },
		{ _field_real, "direction max vel" },
		FIELD_PAD("value", 32),
		FIELD_EXPLANATION("Angular Motion", "0 - means do nothing\nALIGNMENT: algin objects in the phantom with the marker\nSPIN: spin the object about the marker axis"),
		FIELD_EXPLANATION("ANGULAR ACC NOT YET IMPLEMENTED", nullptr),
		{ _field_real, "alignment acc" },
		{ _field_real, "alignment max vel" },
		{ _field_real, "spin acc" },
		{ _field_real, "spin max vel" },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$343)
	{
		"generates effects",
		"use acc as force",
		"negates gravity",
		"ignores players",
		"ignores nonplayers",
		"ignores bipeds",
		"ignores vehicles",
		"ignores weapons",
		"ignores equipment",
		"ignores garbage",
		"ignores projectiles",
		"ignores scenery",
		"ignores machines",
		"ignores controls",
		"ignores light fixtures",
		"ignores sound scenery",
		"ignores crates",
		"ignores creatures",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"localizes physics",
		"disable linear damping",
		"disable angular damping",
		"ignores dead bipeds"
	};
	STRING_LIST(unnamed_enum$343, unnamed_enum$343_strings, _countof(unnamed_enum$343_strings));

	STRINGS(unnamed_enum$344)
	{
		"default",
		"tiny",
		"small",
		"medium",
		"large",
		"huge",
		"extra huge"
	};
	STRING_LIST(unnamed_enum$344, unnamed_enum$344_strings, _countof(unnamed_enum$344_strings));

	STRINGS(unnamed_enum$345)
	{
		"generates effects",
		"use acc as force",
		"negates gravity",
		"ignores players",
		"ignores bipeds"
	};
	STRING_LIST(unnamed_enum$345, unnamed_enum$345_strings, _countof(unnamed_enum$345_strings));

	TAG_STRUCT(
		phantoms_block_struct_definition,
		"phantoms_block",
		"phantoms_block_struct_definition",
		"s_physics_model_phantom",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "value" },
		{ _field_pointer, "value" },
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_terminator }
	};

	TAG_STRUCT(
		physics_block_struct_definition,
		"physics_block",
		"physics_block_struct_definition",
		"s_physics_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "radius", "positive uses old inferior physics, negative uses new improved physics" },
		{ _field_real_fraction, "moment scale" },
		{ _field_real, "mass" },
		{ _field_real_point_3d, "center of mass" },
		{ _field_real, "density" },
		{ _field_real, "gravity scale" },
		{ _field_real, "ground friction" },
		{ _field_real, "ground depth" },
		{ _field_real_fraction, "ground damp fraction" },
		{ _field_real, "ground normal k1" },
		{ _field_real, "ground normal k0" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "value" },
		{ _field_real, "water friction" },
		{ _field_real, "water depth" },
		{ _field_real, "water density" },
		FIELD_PAD("value", 4),
		{ _field_real_fraction, "air friction" },
		FIELD_PAD("value", 4),
		{ _field_real, "xx moment" },
		{ _field_real, "yy moment" },
		{ _field_real, "zz moment" },
		{ _field_block, "inertial matrix and inverse", &inertial_matrix_block },
		{ _field_block, "powered mass points", &powered_mass_point_block },
		{ _field_block, "mass points", &mass_point_block },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_terminator }
	};

	TAG_STRUCT(
		physics_model_constraint_edge_constraint_block_struct_definition,
		"physics_model_constraint_edge_constraint_block",
		"physics_model_constraint_edge_constraint_block_struct_definition",
		"s_physics_model_node_constraint_edge_constraint",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$346 },
		{ _field_short_block_index_custom_search, "index" },
		{ _field_long_flags, "flags", &unnamed_enum$347 },
		{ _field_real, "friction", "0 is the default (takes what it was set in max) anything else overrides that value" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$346)
	{
		"hinge",
		"limited hinge",
		"ragdoll",
		"stiff spring",
		"ball and socket",
		"prismatic"
	};
	STRING_LIST(unnamed_enum$346, unnamed_enum$346_strings, _countof(unnamed_enum$346_strings));

	STRINGS(unnamed_enum$347)
	{
		"is rigid#this constraint makes the edge rigid until it is loosened by damage",
		"disable effects#this constraint will not generate impact effects"
	};
	STRING_LIST(unnamed_enum$347, unnamed_enum$347_strings, _countof(unnamed_enum$347_strings));

	TAG_STRUCT(
		physics_model_node_constraint_edge_block_struct_definition,
		"physics_model_node_constraint_edge_block",
		"physics_model_node_constraint_edge_block_struct_definition",
		"s_physics_model_node_constraint_edge",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 4),
		{ _field_short_block_index, "node a" },
		{ _field_short_block_index, "node b" },
		{ _field_block, "constraints", &physics_model_constraint_edge_constraint_block },
		{ _field_string_id, "node a material", "if you don't fill this out we will pluck the material from the first primitive, of the first rigid body attached to node a", _field_id_sted },
		{ _field_string_id, "node b material", "if you don't fill this out we will pluck the material from the first primitive, of the first rigid body attached to node b, if node b is none we use whatever material a has", _field_id_sted },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		physics_model_struct_definition,
		"physics_model",
		"physics_model_struct_definition",
		"s_physics_model_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 35 },
		{ _field_long_flags, "flags", &unnamed_enum$342 },
		{ _field_real, "mass" },
		{ _field_real, "low freq. deactivation scale", "0 is default (1). LESS than 1 deactivates less aggressively. GREATER than 1 is more agressive." },
		{ _field_real, "high freq. deactivation scale", "0 is default (1). LESS than 1 deactivates less aggressively. GREATER than 1 is more agressive." },
		FIELD_PAD("value", 24),
		{ _field_block, "phantom types", &phantom_types_block },
		{ _field_block, "node edges", &physics_model_node_constraint_edge_block },
		{ _field_block, "rigid bodies", &rigid_bodies_block },
		{ _field_block, "materials", &materials_block$2 },
		{ _field_block, "spheres", &spheres_block },
		{ _field_block, "multi spheres", &multi_spheres_block },
		{ _field_block, "pills", &pills_block },
		{ _field_block, "boxes", &boxes_block },
		{ _field_block, "triangles", &triangles_block },
		{ _field_block, "polyhedra", &polyhedra_block },
		FIELD_EXPLANATION("ALL THESE WORLDS ARE YOURS, EXCEPT EUROPA...", "Attempt no landings there.  And you can\'t edit anything below this point, so why even look at it?"),
		{ _field_block, "polyhedron four vectors", &polyhedron_four_vectors_block },
		{ _field_block, "polyhedron plane equations", &polyhedron_plane_equations_block },
		{ _field_block, "mass distributions", &mass_distributions_block },
		{ _field_block, "lists", &lists_block },
		{ _field_block, "list shapes", &list_shapes_block },
		{ _field_block, "mopps", &mopps_block },
		{ _field_data, "mopp codes", &mopp_codes_data$2 },
		{ _field_block, "hinge constraints", &hinge_constraints_block },
		{ _field_block, "ragdoll constraints", &ragdoll_constraints_block },
		{ _field_block, "regions", &regions_block },
		{ _field_block, "nodes", &nodes_block },
		{ _field_block, "import info", &global_tag_import_info_block },
		{ _field_block, "errors", &global_error_report_categories_block },
		{ _field_block, "point to path curves", &point_to_path_curve_block },
		{ _field_block, "limited hinge constraints", &limited_hinge_constraints_block },
		{ _field_block, "ball and socket constraints", &ball_and_socket_constraints_block },
		{ _field_block, "stiff spring constraints", &stiff_spring_constraints_block },
		{ _field_block, "prismatic constraints", &prismatic_constraints_block },
		{ _field_block, "phantoms", &phantoms_block },
		
		{ _struct_version_mode_equal, 1, 35 },
		{ _field_long_flags, "flags", &unnamed_enum$342 },
		{ _field_real, "mass" },
		{ _field_real, "low freq. deactivation scale", "0 is default (1). LESS than 1 deactivates less aggressively. GREATER than 1 is more agressive." },
		{ _field_real, "high freq. deactivation scale", "0 is default (1). LESS than 1 deactivates less aggressively. GREATER than 1 is more agressive." },
		FIELD_PAD("value", 24),
		{ _field_block, "phantom types", &phantom_types_block },
		{ _field_block, "node edges", &physics_model_node_constraint_edge_block },
		{ _field_block, "rigid bodies", &rigid_bodies_block },
		{ _field_block, "materials", &materials_block$2 },
		{ _field_block, "spheres", &spheres_block },
		{ _field_block, "multi spheres", &multi_spheres_block },
		{ _field_block, "pills", &pills_block },
		{ _field_block, "boxes", &boxes_block },
		{ _field_block, "triangles", &triangles_block },
		{ _field_block, "polyhedra", &polyhedra_block },
		FIELD_EXPLANATION("ALL THESE WORLDS ARE YOURS, EXCEPT EUROPA...", "Attempt no landings there.  And you can\'t edit anything below this point, so why even look at it?"),
		{ _field_block, "polyhedron four vectors", &polyhedron_four_vectors_block },
		{ _field_block, "polyhedron plane equations", &polyhedron_plane_equations_block },
		{ _field_block, "mass distributions", &mass_distributions_block },
		{ _field_block, "lists", &lists_block },
		{ _field_block, "list shapes", &list_shapes_block },
		{ _field_block, "mopps", &mopps_block },
		{ _field_data, "mopp codes", &mopp_codes_data$2 },
		{ _field_block, "hinge constraints", &hinge_constraints_block },
		{ _field_block, "ragdoll constraints", &ragdoll_constraints_block },
		{ _field_block, "regions", &regions_block },
		{ _field_block, "nodes", &nodes_block },
		{ _field_block, "import info", &global_tag_import_info_block },
		{ _field_block, "errors", &global_error_report_categories_block },
		{ _field_block, "point to path curves", &point_to_path_curve_block },
		{ _field_block, "limited hinge constraints", &limited_hinge_constraints_block },
		{ _field_block, "ball and socket constraints", &ball_and_socket_constraints_block },
		{ _field_block, "stiff spring constraints", &stiff_spring_constraints_block },
		{ _field_block, "prismatic constraints", &prismatic_constraints_block },
		{ _field_block, "phantoms", &phantoms_block },
		
		{ _struct_version_mode_equal, 0, 24 },
		{ _field_long_flags, "flags", &unnamed_enum$342 },
		{ _field_real, "mass" },
		FIELD_PAD("value", 56),
		{ _field_block, "rigid bodies", &rigid_bodies_block },
		{ _field_block, "materials", &materials_block$2 },
		{ _field_block, "spheres", &spheres_block },
		{ _field_block, "pills", &pills_block },
		{ _field_block, "boxes", &boxes_block },
		{ _field_block, "triangles", &triangles_block },
		{ _field_block, "polyhedra", &polyhedra_block },
		FIELD_EXPLANATION("ALL THESE WORLDS ARE YOURS, EXCEPT EUROPA...", "Attempt no landings there.  And you can\'t edit anything below this point, so why even look at it?"),
		{ _field_block, "polyhedron four vectors", &polyhedron_four_vectors_block },
		{ _field_block, "polyhedron plane equations", &polyhedron_plane_equations_block },
		{ _field_block, "mass distributions", &mass_distributions_block },
		{ _field_block, "lists", &lists_block },
		{ _field_block, "list shapes", &list_shapes_block },
		{ _field_block, "mopps", &mopps_block },
		{ _field_data, "mopp codes", &mopp_codes_data$2 },
		{ _field_block, "hinge constraints", &hinge_constraints_block },
		{ _field_block, "ragdoll constraints", &ragdoll_constraints_block },
		{ _field_block, "regions", &regions_block },
		{ _field_block, "nodes", &nodes_block },
		{ _field_block, "import info", &global_tag_import_info_block },
		{ _field_block, "errors", &global_error_report_categories_block },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$342)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$342, unnamed_enum$342_strings, _countof(unnamed_enum$342_strings));

	TAG_STRUCT(
		pills_block_struct_definition,
		"pills_block",
		"pills_block_struct_definition",
		"s_physics_model_pill",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "material" },
		{ _field_word_flags, "flags", &unnamed_enum$118 },
		{ _field_real, "relative mass scale" },
		{ _field_real_fraction, "friction" },
		{ _field_real_fraction, "restitution" },
		{ _field_real, "volume " },
		{ _field_real, "mass" },
		FIELD_SKIP("value", 2),
		{ _field_short_block_index, "phantom" },
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_real, "radius" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_real_vector_3d, "bottom" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "top" },
		FIELD_SKIP("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		pixel32_block_struct_definition,
		"pixel32_block",
		"pixel32_block_struct_definition",
		"s_pixel32",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_argb_color, "color" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		pixel_shader_block_struct_definition,
		"pixel_shader_block",
		"pixel_shader_block_struct_definition",
		"s_pixel_shader_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_pointer, "value" },
		{ _field_data, "compiled_shader", &compiled_pixel_shader_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		pixel_shader_combiner_block_struct_definition,
		"pixel_shader_combiner_block",
		"pixel_shader_combiner_block_struct_definition",
		"s_pixel_shader_combiner",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 16),
		{ _field_argb_color, "constant color0" },
		{ _field_argb_color, "constant color1" },
		{ _field_char_integer, "color A register ptr index" },
		{ _field_char_integer, "color B register ptr index" },
		{ _field_char_integer, "color C register ptr index" },
		{ _field_char_integer, "color D register ptr index" },
		{ _field_char_integer, "alpha A register ptr index" },
		{ _field_char_integer, "alpha B register ptr index" },
		{ _field_char_integer, "alpha C register ptr index" },
		{ _field_char_integer, "alpha D register ptr index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		pixel_shader_constant_block_struct_definition,
		"pixel_shader_constant_block",
		"pixel_shader_constant_block_struct_definition",
		"s_pixel_shader_constant",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_enum, "parameter type", &unnamed_enum$365 },
		{ _field_char_integer, "combiner index" },
		{ _field_char_integer, "register index" },
		{ _field_char_enum, "component mask", &unnamed_enum$481 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 1),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$481)
	{
		"x (value)",
		"y (value)",
		"z (value)",
		"w (value)",
		"xyz/rgb (color)"
	};
	STRING_LIST(unnamed_enum$481, unnamed_enum$481_strings, _countof(unnamed_enum$481_strings));

	TAG_STRUCT(
		pixel_shader_extern_map_block_struct_definition,
		"pixel_shader_extern_map_block",
		"pixel_shader_extern_map_block_struct_definition",
		"s_pixel_shader_extern_map",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "switch parameter" },
		{ _field_char_integer, "case scalar" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		pixel_shader_fragment_block_struct_definition,
		"pixel_shader_fragment_block",
		"pixel_shader_fragment_block_struct_definition",
		"s_pixel_shader_fragment",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "switch parameter index" },
		{ _field_struct, "permutations index", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_terminator }
	};

	TAG_STRUCT(
		pixel_shader_index_block_struct_definition,
		"pixel_shader_index_block",
		"pixel_shader_index_block_struct_definition",
		"s_pixel_shader_index",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "pixel shader index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		pixel_shader_permutation_block_struct_definition,
		"pixel_shader_permutation_block",
		"pixel_shader_permutation_block_struct_definition",
		"s_pixel_shader_permutation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "enum index" },
		{ _field_word_flags, "flags", &unnamed_enum$480 },
		{ _field_struct, "constants", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "combiners", &tag_block_index_struct_struct_definition, _field_id_shtb },
		FIELD_SKIP("value", 4),
		FIELD_SKIP("value", 4),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$480)
	{
		"has final combiner"
	};
	STRING_LIST(unnamed_enum$480, unnamed_enum$480_strings, _countof(unnamed_enum$480_strings));

	TAG_STRUCT(
		pixel_shader_permutation_new_block_struct_definition,
		"pixel_shader_permutation_new_block",
		"pixel_shader_permutation_new_block_struct_definition",
		"s_pixel_shader_permutation_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "enum index" },
		{ _field_short_integer, "flags" },
		{ _field_struct, "combiners", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_terminator }
	};

	TAG_STRUCT(
		planar_fog_block_struct_definition,
		"planar_fog_block",
		"planar_fog_block_struct_definition",
		"s_planar_fog_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("PLANAR FOG", "Please don\'t use these flags unless you know what you\'re doing! Come talk to Bernie first."),
		{ _field_word_flags, "flags", &unnamed_enum$199 },
		{ _field_short_integer, "priority" },
		{ _field_string_id, "global material name", _field_id_sted },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 72),
		FIELD_EXPLANATION("DENSITY", nullptr),
		FIELD_USELESS_PAD("value", 4),
		{ _field_real_fraction, "maximum density", "planar fog density is clamped to this value", nullptr, "[0,1]" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "opaque distance", "the fog becomes opaque (maximum density) at this distance from the viewer", "world units" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "opaque depth", "the fog becomes opaque at this distance below fog plane", "world units" },
		FIELD_EXPLANATION("DENSITY (ADVANCED CONTROLS)", nullptr),
		{ _field_real_bounds, "atmospheric-planar depth", "distances above fog plane where atmospheric fog supercedes planar fog and visa-versa", "world units" },
		{ _field_real, "eye offset scale", "negative numbers are bad, mmmkay?", nullptr, "[-1,1]" },
		FIELD_USELESS_PAD("value", 32),
		FIELD_EXPLANATION("COLOR", nullptr),
		{ _field_real_rgb_color, "color" },
		FIELD_USELESS_PAD("value", 100),
		{ _field_block, "patchy fog", &planar_fog_patchy_fog_block },
		FIELD_EXPLANATION("SOUND", nullptr),
		{ _field_tag_reference, "background sound", &sound_looping_group_reference },
		{ _field_tag_reference, "sound environment", &sound_environment_group_reference$2 },
		{ _field_real, "environment damping factor", "scales the surrounding background sound by this much" },
		{ _field_real, "background sound gain", "scale for fog background sound" },
		{ _field_tag_reference, "enter sound", &sound_group_reference },
		{ _field_tag_reference, "exit sound", &sound_group_reference },
		FIELD_USELESS_PAD("value", 80),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$199)
	{
		"render only submerged geometry",
		"extend infinitely while visible",
		"don\'t floodfill",
		"aggressive floodfill",
		"do not render",
		"do not render unless submerged"
	};
	STRING_LIST(unnamed_enum$199, unnamed_enum$199_strings, _countof(unnamed_enum$199_strings));

	TAG_REFERENCE(sound_environment_group_reference$2, SOUND_ENVIRONMENT_TAG);

	TAG_STRUCT(
		planar_fog_patchy_fog_block_struct_definition,
		"planar_fog_patchy_fog_block",
		"planar_fog_patchy_fog_block_struct_definition",
		"s_planar_fog_patchy_fog",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_rgb_color, "color" },
		FIELD_PAD("value", 12),
		{ _field_real_fraction_bounds, "density", nullptr, nullptr, "[0,1]" },
		{ _field_real_bounds, "distance", nullptr, "world units" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real_fraction, "min depth fraction", "in range (0,max_depth) world units, where patchy fog starts fading in", nullptr, "[0,1]" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_tag_reference, "patchy fog", &patchy_fog_group_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(patchy_fog_group_reference$2, PATCHY_FOG_TAG);

	TAG_STRUCT(
		planes_block_struct_definition,
		"planes_block",
		"planes_block_struct_definition",
		"s_real_plane3d",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		{ _field_real_plane_3d, "plane" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		platform_sound_effect_block_struct_definition,
		"platform_sound_effect_block",
		"platform_sound_effect_block_struct_definition",
		"s_platform_sound_effect_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "function inputs", &platform_sound_effect_function_block },
		{ _field_block, "constant inputs", &platform_sound_effect_constant_block },
		{ _field_block, "template override descriptors", &platform_sound_effect_override_descriptor_block },
		{ _field_long_integer, "input overrides" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		platform_sound_effect_collection_block_struct_definition,
		"platform_sound_effect_collection_block",
		"platform_sound_effect_collection_block_struct_definition",
		"s_platform_sound_effect_collection",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "sound effects", &platform_sound_effect_block },
		{ _field_block, "low frequency input", &platform_sound_effect_function_block },
		{ _field_long_integer, "sound effect overrides" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		platform_sound_effect_constant_block_struct_definition,
		"platform_sound_effect_constant_block",
		"platform_sound_effect_constant_block_struct_definition",
		"s_real$8",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "constant value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		platform_sound_effect_function_block_struct_definition,
		"platform_sound_effect_function_block",
		"platform_sound_effect_function_block_struct_definition",
		"s_platform_sound_effect_function",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "input", &unnamed_enum$29, _field_id_function_input_scalar },
		{ _field_short_enum, "range", &unnamed_enum$29, _field_id_function_input_range },
		{ _field_struct, "function", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_real, "time period", nullptr, "seconds" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$29)
	{
		"zero",
		"time",
		"scale",
		"rolloff"
	};
	STRING_LIST(unnamed_enum$29, unnamed_enum$29_strings, _countof(unnamed_enum$29_strings));

	TAG_STRUCT(
		platform_sound_effect_override_descriptor_block_struct_definition,
		"platform_sound_effect_override_descriptor_block",
		"platform_sound_effect_override_descriptor_block_struct_definition",
		"s_platform_sound_effect_override_descriptor",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "override descriptor" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		platform_sound_effect_template_block_struct_definition,
		"platform_sound_effect_template_block",
		"platform_sound_effect_template_block_struct_definition",
		"s_platform_sound_effect_template",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "input dsp effect name" },
		FIELD_PAD("value", 12),
		{ _field_block, "components", &platform_sound_effect_template_component_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		platform_sound_effect_template_collection_block_struct_definition,
		"platform_sound_effect_template_collection_block",
		"platform_sound_effect_template_collection_block_struct_definition",
		"s_platform_sound_effect_template_collection",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "platform effect templates", &platform_sound_effect_template_block },
		{ _field_string_id, "input dsp effect name" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		platform_sound_effect_template_component_block_struct_definition,
		"platform_sound_effect_template_component_block",
		"platform_sound_effect_template_component_block_struct_definition",
		"s_platform_sound_effect_template_component",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_enum, "value type", &unnamed_enum$29 },
		{ _field_real, "default value" },
		{ _field_real, "minimum value" },
		{ _field_real, "maximum value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		platform_sound_filter_block_struct_definition,
		"platform_sound_filter_block",
		"platform_sound_filter_block_struct_definition",
		"s_platform_sound_source_filter",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("parameter description", "DLS2 filtering:\n    resonance gain range: [0, 22.5] dB\n\nparametric EQ:\n    gain range: [-64, 14] dB\n\nfor mono sounds:\n    the left filter controls the DLS 2 parameters\n    the right filter controls the Parametric EQ parameters\n\nfor stereo sounds:\n    both left and right channels must have the same filter\n    i.e., filter type both is invalid"),
		{ _field_long_enum, "filter type", &unnamed_enum$414 },
		{ _field_long_integer, "filter width", nullptr, nullptr, "[0,7]" },
		FIELD_EXPLANATION("left filter frequency", "in Hz [0,8000]"),
		{ _field_struct, "left filter frequency", &sound_playback_parameter_definition_struct_definition, _field_id_spl1 },
		FIELD_EXPLANATION("left filter gain", "in dB"),
		{ _field_struct, "left filter gain", &sound_playback_parameter_definition_struct_definition, _field_id_spl1 },
		FIELD_EXPLANATION("right filter frequency", "in Hz [0,8000]"),
		{ _field_struct, "right filter frequency", &sound_playback_parameter_definition_struct_definition, _field_id_spl1 },
		FIELD_EXPLANATION("right filter gain", "in dB"),
		{ _field_struct, "right filter gain", &sound_playback_parameter_definition_struct_definition, _field_id_spl1 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$414)
	{
		"parametric EQ",
		"DLS2",
		"both (only valid for mono)"
	};
	STRING_LIST(unnamed_enum$414, unnamed_enum$414_strings, _countof(unnamed_enum$414_strings));

	TAG_STRUCT(
		platform_sound_filter_lfo_block_struct_definition,
		"platform_sound_filter_lfo_block",
		"platform_sound_filter_lfo_block_struct_definition",
		"s_platform_sound_source_filter_lfo",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("delay", "in seconds"),
		{ _field_struct, "delay", &sound_playback_parameter_definition_struct_definition, _field_id_spl1 },
		FIELD_EXPLANATION("frequency", "in Hz[0,43.7]"),
		{ _field_struct, "frequency", &sound_playback_parameter_definition_struct_definition, _field_id_spl1 },
		FIELD_EXPLANATION("cutoff modulation", "octaves[-8,8]"),
		{ _field_struct, "cutoff modulation", &sound_playback_parameter_definition_struct_definition, _field_id_spl1 },
		FIELD_EXPLANATION("gain modulation", "dB[-16,16]"),
		{ _field_struct, "gain modulation", &sound_playback_parameter_definition_struct_definition, _field_id_spl1 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		platform_sound_override_mixbins_block_struct_definition,
		"platform_sound_override_mixbins_block",
		"platform_sound_override_mixbins_block_struct_definition",
		"s_platform_sound_mixbin",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_enum, "mixbin", &unnamed_enum$412 },
		{ _field_real, "gain", nullptr, "dB" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$412)
	{
		"front left",
		"front right",
		"back left",
		"back right",
		"center",
		"low frequency",
		"reverb",
		"3d front left",
		"3d front right",
		"3d back left",
		"3d back right",
		"default left speakers",
		"default right speakers"
	};
	STRING_LIST(unnamed_enum$412, unnamed_enum$412_strings, _countof(unnamed_enum$412_strings));

	TAG_STRUCT(
		platform_sound_pitch_lfo_block_struct_definition,
		"platform_sound_pitch_lfo_block",
		"platform_sound_pitch_lfo_block_struct_definition",
		"s_platform_sound_source_pitch_lfo",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("delay", "seconds"),
		{ _field_struct, "delay", &sound_playback_parameter_definition_struct_definition, _field_id_spl1 },
		FIELD_EXPLANATION("frequency", "Hz[0,43.7]"),
		{ _field_struct, "frequency", &sound_playback_parameter_definition_struct_definition, _field_id_spl1 },
		FIELD_EXPLANATION("pitch modulation", "octaves[-1,1]"),
		{ _field_struct, "pitch modulation", &sound_playback_parameter_definition_struct_definition, _field_id_spl1 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		platform_sound_playback_block_struct_definition,
		"platform_sound_playback_block",
		"platform_sound_playback_block_struct_definition",
		"s_platform_sound_playback_named_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_struct, "playback", &platform_sound_playback_struct_struct_definition, _field_id_plsn },
		{ _field_terminator }
	};

	TAG_STRUCT(
		platform_sound_playback_struct_struct_definition,
		"platform_sound_playback_struct",
		"platform_sound_playback_struct_struct_definition",
		"s_platform_sound_playback_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "value", &platform_sound_override_mixbins_block },
		{ _field_long_flags, "flags", &unnamed_enum$413 },
		FIELD_PAD("value", 8),
		{ _field_block, "filter", &platform_sound_filter_block },
		{ _field_block, "pitch lfo", &platform_sound_pitch_lfo_block },
		{ _field_block, "filter lfo", &platform_sound_filter_lfo_block },
		{ _field_block, "sound effect", &sound_effect_playback_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$413)
	{
		"use 3d radio hack"
	};
	STRING_LIST(unnamed_enum$413, unnamed_enum$413_strings, _countof(unnamed_enum$413_strings));

	TAG_STRUCT(
		player_block_reference_block_struct_definition,
		"player_block_reference_block",
		"player_block_reference_block_struct_definition",
		"s_player_block_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 4),
		{ _field_tag_reference, "skin", &user_interface_list_skin_definition_group_reference },
		{ _field_point_2d, "bottom-left" },
		{ _field_char_enum, "table order", &unnamed_enum$429 },
		{ _field_char_integer, "maximum player count" },
		{ _field_char_integer, "row count" },
		{ _field_char_integer, "column count" },
		{ _field_short_integer, "row height" },
		{ _field_short_integer, "column width" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$429)
	{
		"row major",
		"column major"
	};
	STRING_LIST(unnamed_enum$429, unnamed_enum$429_strings, _countof(unnamed_enum$429_strings));

	TAG_STRUCT(
		player_control_block_struct_definition,
		"player_control_block",
		"player_control_block_struct_definition",
		"s_game_globals_player_control",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_fraction, "magnetism friction", "how much the crosshair slows over enemies" },
		{ _field_real_fraction, "magnetism adhesion", "how much the crosshair sticks to enemies" },
		{ _field_real_fraction, "inconsequential target scale", "scales magnetism level for inconsequential targets like infection forms" },
		FIELD_PAD("value", 12),
		FIELD_EXPLANATION("crosshair", nullptr),
		{ _field_real_point_2d, "crosshair location", "-1..1, 0 is middle of the screen" },
		FIELD_EXPLANATION("sprinting", nullptr),
		{ _field_real, "seconds to start", "how long you must be pegged before you start sprinting" },
		{ _field_real, "seconds to full speed", "how long you must sprint before you reach top speed" },
		{ _field_real, "decay rate", "how fast being unpegged decays the timer (seconds per second)" },
		{ _field_real, "full speed multiplier", "how much faster we actually go when at full sprint" },
		{ _field_real, "pegged magnitude", "how far the stick needs to be pressed before being considered pegged" },
		{ _field_real, "pegged angular threshold", "how far off straight up (in degrees) we consider pegged" },
		FIELD_PAD("value", 8),
		FIELD_EXPLANATION("looking", nullptr),
		{ _field_real, "look default pitch rate", nullptr, "degrees" },
		{ _field_real, "look default yaw rate", nullptr, "degrees" },
		{ _field_real_fraction, "look peg threshold", "magnitude of yaw for pegged acceleration to kick in" },
		{ _field_real, "look yaw acceleration time", "time for a pegged look to reach maximum effect", "seconds" },
		{ _field_real, "look yaw acceleration scale", "maximum effect of a pegged look (scales last value in the look function below)" },
		{ _field_real, "look pitch acceleration time", "time for a pegged look to reach maximum effect", "seconds" },
		{ _field_real, "look pitch acceleration scale", "maximum effect of a pegged look (scales last value in the look function below)" },
		{ _field_real, "look autolevelling scale", "1 is fast, 0 is none, >1 will probably be really fast" },
		FIELD_PAD("value", 8),
		{ _field_real, "gravity_scale" },
		FIELD_PAD("value", 2),
		{ _field_short_integer, "minimum autolevelling ticks", "amount of time player needs to move and not look up or down for autolevelling to kick in" },
		{ _field_angle, "minimum angle for vehicle flipping", "0 means the vehicle's up vector is along the ground, 90 means the up vector is pointing straight up:degrees" },
		{ _field_block, "look function", &look_function_block },
		{ _field_real, "minimum action hold time", "time that player needs to press ACTION to register as a HOLD", "seconds" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		player_information_block_struct_definition,
		"player_information_block",
		"player_information_block_struct_definition",
		"s_game_globals_player_information",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "unused", &unit_group_reference$3 },
		FIELD_PAD("value", 28),
		{ _field_real, "walking speed", nullptr, "world units per second" },
		FIELD_PAD("value", 4),
		{ _field_real, "run forward", nullptr, "world units per second" },
		{ _field_real, "run backward", nullptr, "world units per second" },
		{ _field_real, "run sideways", nullptr, "world units per second" },
		{ _field_real, "run acceleration", nullptr, "world units per second squared" },
		{ _field_real, "sneak forward", nullptr, "world units per second" },
		{ _field_real, "sneak backward", nullptr, "world units per second" },
		{ _field_real, "sneak sideways", nullptr, "world units per second" },
		{ _field_real, "sneak acceleration", nullptr, "world units per second squared" },
		{ _field_real, "airborne acceleration", nullptr, "world units per second squared" },
		FIELD_PAD("value", 16),
		{ _field_real_point_3d, "grenade origin" },
		FIELD_PAD("value", 12),
		{ _field_real, "stun movement penalty", "1.0 prevents moving while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun turning penalty", "1.0 prevents turning while stunned", nullptr, "[0,1]" },
		{ _field_real, "stun jumping penalty", "1.0 prevents jumping while stunned", nullptr, "[0,1]" },
		{ _field_real, "minimum stun time", "all stunning damage will last for at least this long", "seconds" },
		{ _field_real, "maximum stun time", "no stunning damage will last for longer than this", "seconds" },
		FIELD_PAD("value", 8),
		{ _field_real_bounds, "first person idle time", nullptr, "seconds" },
		{ _field_real_fraction, "first person skip fraction", nullptr, nullptr, "[0,1]" },
		FIELD_PAD("value", 16),
		{ _field_tag_reference, "coop respawn effect", &effect_group_reference },
		{ _field_long_integer, "binoculars zoom count" },
		{ _field_real_bounds, "binoculars zoom range" },
		{ _field_tag_reference, "binoculars zoom in sound", &sound_group_reference },
		{ _field_tag_reference, "binoculars zoom out sound", &sound_group_reference },
		FIELD_PAD("value", 16),
		{ _field_tag_reference, "active camouflage on", &sound_group_reference },
		{ _field_tag_reference, "active camouflage off", &sound_group_reference },
		{ _field_tag_reference, "active camouflage error", &sound_group_reference },
		{ _field_tag_reference, "active camouflage ready", &sound_group_reference },
		{ _field_tag_reference, "flashlight on", &sound_group_reference },
		{ _field_tag_reference, "flashlight off", &sound_group_reference },
		{ _field_tag_reference, "ice cream", &sound_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		player_representation_block_struct_definition,
		"player_representation_block",
		"player_representation_block_struct_definition",
		"s_game_globals_player_representation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "first person hands", &render_model_group_reference$2 },
		{ _field_tag_reference, "first person body", &render_model_group_reference$2 },
		FIELD_PAD("value", 40),
		FIELD_PAD("value", 120),
		{ _field_tag_reference, "third person unit", &unit_group_reference$4 },
		{ _field_string_id, "third person variant" },
		{ _field_terminator }
	};

	TAG_REFERENCE(render_model_group_reference$2, RENDER_MODEL_TAG);

	TAG_REFERENCE(unit_group_reference$4, UNIT_TAG);

	TAG_STRUCT(
		player_training_entry_data_block_struct_definition,
		"player_training_entry_data_block",
		"player_training_entry_data_block_struct_definition",
		"s_player_training_entry_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "display string", "comes out of the HUD text globals" },
		{ _field_string_id, "display string2", "comes out of the HUD text globals, used for grouped prompt" },
		{ _field_string_id, "display string3", "comes out of the HUD text globals, used for ungrouped prompt" },
		{ _field_short_integer, "max display time", "how long the message can be on screen before being hidden" },
		{ _field_short_integer, "display count", "how many times a training message will get displayed (0-3 only!)" },
		{ _field_short_integer, "dissapear delay", "how long a displayed but untriggered message stays up" },
		{ _field_short_integer, "redisplay delay", "how long after display this message will stay hidden" },
		{ _field_real, "display delay (s)", "how long the event can be triggered before it's displayed" },
		{ _field_word_flags, "flags", &unnamed_enum$241 },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$241)
	{
		"not in multiplayer"
	};
	STRING_LIST(unnamed_enum$241, unnamed_enum$241_strings, _countof(unnamed_enum$241_strings));

	TAG_STRUCT(
		point_block_reference_block_struct_definition,
		"point_block_reference_block",
		"point_block_reference_block_struct_definition",
		"s_point_block_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_point_2d, "coordinates" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		point_physics_block_struct_definition,
		"point_physics_block",
		"point_physics_block_struct_definition",
		"s_point_physics_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$357 },
		FIELD_PAD("value", 28),
		{ _field_real, "density", nullptr, "g/mL" },
		{ _field_real, "air friction" },
		{ _field_real, "water friction" },
		{ _field_real, "surface friction", "when hitting the ground or interior, percentage of velocity lost in one collision" },
		{ _field_real, "elasticity", "0.0 is inelastic collisions (no bounce) 1.0 is perfectly elastic (reflected velocity equals incoming velocity)" },
		FIELD_PAD("value", 12),
		FIELD_EXPLANATION("Densities (g/mL)", "air        0.0011 (g/mL)\nsnow       0.128\ncork       0.24\ncedar      0.43\noak        0.866\nice        0.897\nwater      1.0\nsoil       1.1\ncotton     1.491\ndry earth  1.52\nsand       1.7\ngranite    2.4\nglass      2.5\niron       7.65\nsteel      7.77\nlead       11.37\nuranium    18.74\ngold       19.3\n"),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$357)
	{
		"UNUSED",
		"collides with structures",
		"collides with water surface",
		"uses simple wind#the wind on this point won\'t have high-frequency variations",
		"uses damped wind#the wind on this point will be artificially slow",
		"no gravity#the point is not affected by gravity"
	};
	STRING_LIST(unnamed_enum$357, unnamed_enum$357_strings, _countof(unnamed_enum$357_strings));

	TAG_STRUCT(
		point_to_path_curve_block_struct_definition,
		"point_to_path_curve_block",
		"point_to_path_curve_block_struct_definition",
		"s_physics_model_point_to_path_curve",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "node index" },
		FIELD_PAD("value", 2),
		{ _field_block, "points", &point_to_path_curve_point_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		point_to_path_curve_point_block_struct_definition,
		"point_to_path_curve_point_block",
		"point_to_path_curve_point_block_struct_definition",
		"s_physics_model_point_to_path_curve_point",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_real, "t value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		polyhedra_block_struct_definition,
		"polyhedra_block",
		"polyhedra_block_struct_definition",
		"s_physics_model_polyhedron",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "material" },
		{ _field_word_flags, "flags", &unnamed_enum$118 },
		{ _field_real, "relative mass scale" },
		{ _field_real_fraction, "friction" },
		{ _field_real_fraction, "restitution" },
		{ _field_real, "volume " },
		{ _field_real, "mass" },
		FIELD_SKIP("value", 2),
		{ _field_short_block_index, "phantom" },
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_real, "radius" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_real_vector_3d, "aabb half extents" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "aabb center" },
		FIELD_SKIP("value", 4),
		{ _field_pointer, "value" },
		{ _field_long_integer, "four vectors size" },
		{ _field_long_integer, "four vectors capacity" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd32),
		{ _field_array, "four vectors storage", &unnamed_array$45 },
		{ _field_long_integer, "num vertices" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "value" },
		{ _field_long_integer, "plane equations size" },
		{ _field_long_integer, "plane equations capacity" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 8, _field_id_pd64),
		{ _field_terminator }
	};

	TAG_STRUCT(
		polyhedron_four_vectors_block_struct_definition,
		"polyhedron_four_vectors_block",
		"polyhedron_four_vectors_block_struct_definition",
		"s_polyhedron_four_vectors_block",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		{ _field_real_vector_3d, "four vectors x" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "four vectors y" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "four vectors z" },
		FIELD_SKIP("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		polyhedron_plane_equations_block_struct_definition,
		"polyhedron_plane_equations_block",
		"polyhedron_plane_equations_block_struct_definition",
		"s_hkvector4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		FIELD_SKIP("value", 16),
		{ _field_terminator }
	};

	TAG_STRUCT(
		powered_mass_point_block_struct_definition,
		"powered_mass_point_block",
		"powered_mass_point_block_struct_definition",
		"s_powered_mass_point_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_long_flags, "flags", &unnamed_enum$352 },
		{ _field_real, "antigrav strength" },
		{ _field_real, "antigrav offset" },
		{ _field_real, "antigrav height" },
		{ _field_real, "antigrav damp fraction" },
		{ _field_real, "antigrav normal k1" },
		{ _field_real, "antigrav normal k0" },
		{ _field_string_id, "damage source region name" },
		FIELD_PAD("value", 64),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$352)
	{
		"ground friction",
		"water friction",
		"air friction",
		"water lift",
		"air lift",
		"thrust",
		"antigrav",
		"gets damage from region"
	};
	STRING_LIST(unnamed_enum$352, unnamed_enum$352_strings, _countof(unnamed_enum$352_strings));

	TAG_STRUCT(
		powered_seat_block_struct_definition,
		"powered_seat_block",
		"powered_seat_block_struct_definition",
		"s_powered_seat_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "driver powerup time", nullptr, "seconds" },
		{ _field_real, "driver powerdown time", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 56),
		{ _field_terminator }
	};

	TAG_STRUCT(
		powerup_block_struct_definition,
		"powerup_block",
		"powerup_block_struct_definition",
		"s_tag_reference$9",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "equipment", &equipment_group_reference$2 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		precache_list_block_struct_definition,
		"precache_list_block",
		"precache_list_block_struct_definition",
		"s_long",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "cache block index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		predicted_bitmaps_block_struct_definition,
		"predicted_bitmaps_block",
		"predicted_bitmaps_block_struct_definition",
		"s_tag_reference$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "bitmap", &bitmap_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		predicted_resource_block_struct_definition,
		"predicted_resource_block",
		"predicted_resource_block_struct_definition",
		"s_predicted_resource",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$105 },
		{ _field_short_integer, "resource index" },
		{ _field_long_integer, "tag index" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$105)
	{
		"bitmap",
		"sound",
		"render model geometry",
		"cluster geometry",
		"cluster instanced geometry",
		"lightmap geometry object buckets",
		"lightmap geometry instance buckets",
		"lightmap cluster bitmaps",
		"lightmap instance bitmaps"
	};
	STRING_LIST(unnamed_enum$105, unnamed_enum$105_strings, _countof(unnamed_enum$105_strings));

	VERSIONED_TAG_STRUCT(
		presearch_struct_definition,
		"presearch",
		"presearch_struct_definition",
		"s_character_presearch_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 6 },
		{ _field_long_flags, "Pre-search flags", &unnamed_enum$138 },
		{ _field_real_bounds, "min presearch time", "If the min presearch time expires and the target is (actually) outside the min-certainty radius, presearch turns off", "seconds" },
		{ _field_real_bounds, "max presearch time", "Presearch turns off after the given time", "seconds" },
		{ _field_real, "Min certainty radius" },
		{ _field_real, "Max uncover distance", nullptr, "DEPRECATED", FIELD_FLAG_UNKNOWN0 },
		{ _field_real_bounds, "min suppressing time", "if the min suppressing time expires and the target is outside the min-certainty radius, suppressing fire turns off" },
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_long_flags, "Pre-search flags", &unnamed_enum$138 },
		FIELD_USELESS_PAD("value", 24),
		{ _field_real_bounds, "Min/Max pre-search bounds", "If the min presearch time expires and the target is (actually) outside the min-certainty radius, presearch turns off" },
		{ _field_real, "Min certainty radius" },
		{ _field_real, "Max uncover distance" },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		primary_light_struct_struct_definition,
		"primary_light_struct",
		"primary_light_struct_struct_definition",
		"s_primary_light",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("Primary light", nullptr),
		{ _field_real_rgb_color, "Min lightmap color" },
		{ _field_real_rgb_color, "Max lightmap color" },
		{ _field_real, "exclusion angle from up", "degrees from up the direct light cannot be" },
		FIELD_EXPLANATION("Primary light function", "input: accuracy, output: primary light scale"),
		FIELD_CUSTOM("function", _field_id_function_editor),
		{ _field_struct, "function", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_terminator }
	};

	TAG_STRUCT(
		prismatic_constraints_block_struct_definition,
		"prismatic_constraints_block",
		"prismatic_constraints_block_struct_definition",
		"s_physics_model_prismatic_constraint",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "constraint bodies", &constraint_bodies_struct_struct_definition, _field_id_csbs },
		FIELD_PAD("value", 4),
		{ _field_real, "min_limit" },
		{ _field_real, "max_limit" },
		{ _field_real, "max_friction_force" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		projectile_material_response_block_struct_definition,
		"projectile_material_response_block",
		"projectile_material_response_block_struct_definition",
		"s_projectile_material_response_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$360 },
		FIELD_EXPLANATION("default result", "(if the potential result, below, fails to happen)"),
		{ _field_short_enum, "response", &unnamed_enum$361 },
		{ _field_tag_reference, "DO NOT USE (OLD effect)", &effect_group_reference },
		{ _field_string_id, "material name", _field_id_sted },
		FIELD_SKIP("value", 4),
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("potential result", nullptr),
		{ _field_short_enum, "response", &unnamed_enum$361 },
		{ _field_word_flags, "flags", &unnamed_enum$362 },
		{ _field_real_fraction, "chance fraction", nullptr, nullptr, "[0,1]" },
		{ _field_angle_bounds, "between", nullptr, "degrees" },
		{ _field_real_bounds, "and", nullptr, "world units per second" },
		{ _field_tag_reference, "DO NOT USE (OLD effect)", &effect_group_reference },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("misc", nullptr),
		{ _field_short_enum, "scale effects by", &unnamed_enum$363 },
		FIELD_PAD("value", 2),
		{ _field_angle, "angular noise", "the angle of incidence is randomly perturbed by at most this amount to simulate irregularity.", "degrees" },
		{ _field_real, "velocity noise", "the velocity is randomly perturbed by at most this amount to simulate irregularity.", "world units per second" },
		{ _field_tag_reference, "DO NOT USE (OLD detonation effect)", &effect_group_reference },
		FIELD_USELESS_PAD("value", 24),
		FIELD_EXPLANATION("penetration", nullptr),
		{ _field_real, "initial friction", "the fraction of the projectile's velocity lost on penetration" },
		{ _field_real, "maximum distance", "the maximum distance the projectile can travel through on object of this material" },
		FIELD_EXPLANATION("reflection", nullptr),
		{ _field_real, "parallel friction", "the fraction of the projectile's velocity parallel to the surface lost on impact" },
		{ _field_real, "perpendicular friction", "the fraction of the projectile's velocity perpendicular to the surface lost on impact" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$360)
	{
		"cannot be overpenetrated"
	};
	STRING_LIST(unnamed_enum$360, unnamed_enum$360_strings, _countof(unnamed_enum$360_strings));

	STRINGS(unnamed_enum$361)
	{
		"impact (detonate)",
		"fizzle",
		"overpenetrate",
		"attach",
		"bounce",
		"bounce (dud)",
		"fizzle (ricochet)"
	};
	STRING_LIST(unnamed_enum$361, unnamed_enum$361_strings, _countof(unnamed_enum$361_strings));

	STRINGS(unnamed_enum$362)
	{
		"only against units",
		"never against units"
	};
	STRING_LIST(unnamed_enum$362, unnamed_enum$362_strings, _countof(unnamed_enum$362_strings));

	STRINGS(unnamed_enum$363)
	{
		"damage",
		"angle"
	};
	STRING_LIST(unnamed_enum$363, unnamed_enum$363_strings, _countof(unnamed_enum$363_strings));

	VERSIONED_TAG_STRUCT(
		projectile_struct_definition,
		"projectile",
		"projectile_struct_definition",
		"s_projectile_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 95 },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ PROJECTILE $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$358 },
		{ _field_short_enum, "detonation timer starts", &unnamed_enum$359 },
		{ _field_short_enum, "impact noise", &unnamed_enum$108 },
		FIELD_USELESS_PAD("value", 8),
		{ _field_real, "AI perception radius", nullptr, "world units" },
		{ _field_real, "collision radius", nullptr, "world units" },
		FIELD_EXPLANATION("detonation", nullptr),
		{ _field_real, "arming time", "won't detonate before this time elapses", "seconds" },
		{ _field_real, "danger radius", nullptr, "world units" },
		{ _field_real_bounds, "timer", "detonation countdown (zero is untimed)", "seconds" },
		{ _field_real, "minimum velocity", "detonates when slowed below this velocity", "world units per second" },
		{ _field_real, "maximum range", "detonates after travelling this distance", "world units" },
		{ _field_short_enum, "detonation noise", &unnamed_enum$108 },
		{ _field_short_integer, "super det. projectile count" },
		{ _field_tag_reference, "detonation started", &effect_group_reference },
		{ _field_tag_reference, "detonation effect (airborne)", &effect_group_reference },
		{ _field_tag_reference, "detonation effect (ground)", &effect_group_reference },
		{ _field_tag_reference, "detonation damage", &damage_effect_group_reference },
		{ _field_tag_reference, "attached detonation damage", &damage_effect_group_reference },
		{ _field_tag_reference, "super detonation", &effect_group_reference },
		{ _field_struct, "your momma", &super_detonation_damage_struct_definition, _field_id_sd2s }, // structure_version:1
		{ _field_tag_reference, "detonation sound", &sound_group_reference },
		{ _field_char_enum, "damage reporting type", &unnamed_enum$228 },
		FIELD_PAD("value", 3),
		{ _field_tag_reference, "super attached detonation damage", &damage_effect_group_reference },
		FIELD_USELESS_PAD("value", 40),
		{ _field_real, "material effect radius", "radius within we will generate material effects" },
		FIELD_EXPLANATION("flyby/impact", nullptr),
		{ _field_tag_reference, "flyby sound", &sound_group_reference },
		{ _field_tag_reference, "impact effect", &effect_group_reference },
		{ _field_tag_reference, "impact damage", &damage_effect_group_reference },
		FIELD_EXPLANATION("boarding fields", nullptr),
		{ _field_real, "boarding detonation time" },
		{ _field_tag_reference, "boarding detonation damage", &damage_effect_group_reference },
		{ _field_tag_reference, "boarding attached detonation damage", &damage_effect_group_reference },
		FIELD_USELESS_PAD("value", 28),
		FIELD_EXPLANATION("physics", nullptr),
		{ _field_real, "air gravity scale", "the proportion of normal gravity applied to the projectile when in air." },
		{ _field_real_bounds, "air damage range", "the range over which damage is scaled when the projectile is in air.", "world units" },
		{ _field_real, "water gravity scale", "the proportion of normal gravity applied to the projectile when in water." },
		{ _field_real_bounds, "water damage range", "the range over which damage is scaled when the projectile is in water.", "world units" },
		{ _field_real, "initial velocity", "bullet's velocity when inflicting maximum damage", "world units per second" },
		{ _field_real, "final velocity", "bullet's velocity when inflicting minimum damage", "world units per second" },
		{ _field_struct, "blah", &angular_velocity_lower_bound_struct_definition, _field_id_avlb }, // structure_version:1
		{ _field_angle, "guided angular velocity (upper)", nullptr, "degrees per second" },
		{ _field_real_bounds, "acceleration range", "what distance range the projectile goes from initial velocity to final velocity", "world units" },
		FIELD_PAD("value", 4),
		{ _field_real_fraction, "targeted leading fraction" },
		FIELD_USELESS_PAD("value", 48),
		{ _field_block, "material responses", &projectile_material_response_block, _field_id_sort },
		
		{ _struct_version_mode_equal, 0, 81 },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ PROJECTILE $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$358 },
		{ _field_short_enum, "detonation timer starts", &unnamed_enum$359 },
		{ _field_short_enum, "impact noise", &unnamed_enum$108 },
		{ _field_short_enum, "old obsolete A in", &unnamed_enum$364 },
		{ _field_short_enum, "old obsolete B in", &unnamed_enum$364 },
		{ _field_short_enum, "old obsolete C in", &unnamed_enum$364 },
		{ _field_short_enum, "old obsolete D in", &unnamed_enum$364 },
		{ _field_tag_reference, "super detonation", &effect_group_reference },
		{ _field_real, "AI perception radius", nullptr, "world units" },
		{ _field_real, "collision radius", nullptr, "world units" },
		FIELD_EXPLANATION("detonation", nullptr),
		{ _field_real, "arming time", "won't detonate before this time elapses", "seconds" },
		{ _field_real, "danger radius", nullptr, "world units" },
		{ _field_tag_reference, "effect", &effect_group_reference },
		{ _field_real_bounds, "timer", "detonation countdown (zero is untimed)", "seconds" },
		{ _field_real, "minimum velocity", "detonates when slowed below this velocity", "world units per second" },
		{ _field_real, "maximum range", "detonates after travelling this distance", "world units" },
		FIELD_EXPLANATION("physics", nullptr),
		{ _field_real, "air gravity scale", "the proportion of normal gravity applied to the projectile when in air." },
		{ _field_real_bounds, "air damage range", "the range over which damage is scaled when the projectile is in air.", "world units" },
		{ _field_real, "water gravity scale", "the proportion of normal gravity applied to the projectile when in water." },
		{ _field_real_bounds, "water damage range", "the range over which damage is scaled when the projectile is in water.", "world units" },
		{ _field_real, "initial velocity", "bullet's velocity when inflicting maximum damage", "world units per second" },
		{ _field_real, "final velocity", "bullet's velocity when inflicting minimum damage", "world units per second" },
		{ _field_angle, "guided angular velocity", nullptr, "degrees per second" },
		{ _field_short_enum, "detonation noise", &unnamed_enum$108 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "detonation started", &effect_group_reference },
		{ _field_tag_reference, "flyby sound", &sound_group_reference },
		{ _field_tag_reference, "attached detonation damage", &damage_effect_group_reference },
		{ _field_tag_reference, "impact damage", &damage_effect_group_reference },
		FIELD_PAD("value", 12),
		{ _field_block, "material responses", &projectile_material_response_block, _field_id_sort },
		FIELD_EXPLANATION("New/unsorted fields", nullptr),
		{ _field_tag_reference, "impact effect", &effect_group_reference },
		{ _field_tag_reference, "detonation damage", &damage_effect_group_reference },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$358)
	{
		"oriented along velocity",
		"AI must use ballistic aiming",
		"detonation max time if attached",
		"has super combining explosion",
		"damage scales based on distance",
		"travels instantaneously",
		"steering adjusts orientation",
		"don\'t noise up steering",
		"can track behind itself",
		"ROBOTRON STEERING!",
		"faster when owned by player"
	};
	STRING_LIST(unnamed_enum$358, unnamed_enum$358_strings, _countof(unnamed_enum$358_strings));

	STRINGS(unnamed_enum$359)
	{
		"immediately",
		"after first bounce",
		"when at rest",
		"after first bounce off any surface"
	};
	STRING_LIST(unnamed_enum$359, unnamed_enum$359_strings, _countof(unnamed_enum$359_strings));

	STRINGS(unnamed_enum$364)
	{
		"none",
		"range remaining",
		"time remaining",
		"tracer",
		"acceleration_range",
		"projectile_attach"
	};
	STRING_LIST(unnamed_enum$364, unnamed_enum$364_strings, _countof(unnamed_enum$364_strings));

	TAG_STRUCT(
		prt_cluster_basis_block_struct_definition,
		"prt_cluster_basis_block",
		"prt_cluster_basis_block_struct_definition",
		"s_real$5",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "basis data" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		prt_info_block_struct_definition,
		"prt_info_block",
		"prt_info_block_struct_definition",
		"s_prt_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "SH Order" },
		{ _field_short_integer, "num of clusters" },
		{ _field_short_integer, "pca vectors per cluster" },
		{ _field_short_integer, "number of rays" },
		{ _field_short_integer, "number of bounces" },
		{ _field_short_integer, "mat index for sbsfc scattering" },
		{ _field_real, "length scale" },
		{ _field_short_integer, "number of lods in model" },
		FIELD_PAD("value", 2),
		{ _field_block, "lod info", &prt_lod_info_block },
		{ _field_block, "cluster basis", &prt_cluster_basis_block },
		{ _field_block, "raw_pca_data", &prt_raw_pca_data_block },
		{ _field_block, "vertex buffers", &prt_vertex_buffers_block },
		{ _field_struct, "geometry block info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		{ _field_terminator }
	};

	TAG_STRUCT(
		prt_lod_info_block_struct_definition,
		"prt_lod_info_block",
		"prt_lod_info_block_struct_definition",
		"s_prt_lod_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "cluster offset" },
		{ _field_block, "section info", &prt_section_info_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		prt_raw_pca_data_block_struct_definition,
		"prt_raw_pca_data_block",
		"prt_raw_pca_data_block_struct_definition",
		"s_real$6",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "raw pca data" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		prt_section_info_block_struct_definition,
		"prt_section_info_block",
		"prt_section_info_block_struct_definition",
		"s_prt_section_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "section index" },
		{ _field_long_integer, "pca data offset" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		prt_vertex_buffers_block_struct_definition,
		"prt_vertex_buffers_block",
		"prt_vertex_buffers_block_struct_definition",
		"s_rasterizer_vertex_buffer$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_vertex_buffer, "vertex buffer" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		quantized_orientation_struct_struct_definition,
		"quantized_orientation_struct",
		"quantized_orientation_struct_struct_definition",
		"s_quantized_orientation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "rotation x" },
		{ _field_short_integer, "rotation y" },
		{ _field_short_integer, "rotation z" },
		{ _field_short_integer, "rotation w" },
		{ _field_real_point_3d, "default translation" },
		{ _field_real, "default scale" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		ragdoll_constraints_block_struct_definition,
		"ragdoll_constraints_block",
		"ragdoll_constraints_block_struct_definition",
		"s_physics_model_ragdoll_constraint",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "constraint bodies", &constraint_bodies_struct_struct_definition, _field_id_csbs },
		FIELD_PAD("value", 4),
		{ _field_real, "min twist" },
		{ _field_real, "max twist" },
		{ _field_real, "min cone" },
		{ _field_real, "max cone" },
		{ _field_real, "min plane" },
		{ _field_real, "max plane" },
		{ _field_real, "max friciton torque" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		rasterizer_data_block_struct_definition,
		"rasterizer_data_block",
		"rasterizer_data_block_struct_definition",
		"s_game_globals_rasterizer_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("function textures", "Used internally by the rasterizer. (Do not change unless you know what you\'re doing!)"),
		{ _field_tag_reference, "distance attenuation", &bitmap_group_reference },
		{ _field_tag_reference, "vector normalization", &bitmap_group_reference },
		{ _field_tag_reference, "gradients", &bitmap_group_reference },
		{ _field_tag_reference, "UNUSED", &bitmap_group_reference },
		{ _field_tag_reference, "UNUSED", &bitmap_group_reference },
		{ _field_tag_reference, "UNUSED", &bitmap_group_reference },
		{ _field_tag_reference, "glow", &bitmap_group_reference },
		{ _field_tag_reference, "UNUSED", &bitmap_group_reference },
		{ _field_tag_reference, "UNUSED", &bitmap_group_reference },
		FIELD_PAD("value", 16),
		{ _field_block, "global vertex shaders", &vertex_shader_reference_block },
		FIELD_EXPLANATION("default textures", "Used internally by the rasterizer - additive, multiplicative, detail, vector. (Do not change ever, period.)"),
		{ _field_tag_reference, "default 2D", &bitmap_group_reference },
		{ _field_tag_reference, "default 3D", &bitmap_group_reference },
		{ _field_tag_reference, "default cube map", &bitmap_group_reference },
		FIELD_EXPLANATION("experimental textures", "Used internally by the rasterizer. (Used by Bernie\'s experimental shaders.)"),
		{ _field_tag_reference, "UNUSED", &bitmap_group_reference$4 },
		{ _field_tag_reference, "UNUSED", &bitmap_group_reference$4 },
		{ _field_tag_reference, "UNUSED", &bitmap_group_reference$4 },
		{ _field_tag_reference, "UNUSED", &bitmap_group_reference$4 },
		FIELD_EXPLANATION("video effect textures", "Used in cinematics."),
		{ _field_tag_reference, "UNUSED", &bitmap_group_reference },
		{ _field_tag_reference, "UNUSED", &bitmap_group_reference },
		FIELD_PAD("value", 36),
		FIELD_EXPLANATION("global shader", "Used for layers that need to do something for other layers to work correctly if the layer is disabled, also used for active-camo, etc."),
		{ _field_tag_reference, "global shader", &shader_group_reference },
		FIELD_EXPLANATION("active camouflage", nullptr),
		{ _field_word_flags, "flags", &unnamed_enum$302 },
		FIELD_PAD("value", 2),
		{ _field_real, "refraction amount", nullptr, "pixels" },
		{ _field_real, "distance falloff" },
		{ _field_real_rgb_color, "tint color" },
		{ _field_real, "hyper-stealth refraction", nullptr, "pixels" },
		{ _field_real, "hyper-stealth distance falloff" },
		{ _field_real_rgb_color, "hyper-stealth tint color" },
		FIELD_EXPLANATION("PC textures", "The PC can\'t use 3D textures, so we use this instead."),
		{ _field_tag_reference, "UNUSED", &bitmap_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(bitmap_group_reference$4, BITMAP_TAG);

	STRINGS(unnamed_enum$302)
	{
		"tint edge density"
	};
	STRING_LIST(unnamed_enum$302, unnamed_enum$302_strings, _countof(unnamed_enum$302_strings));

	TAG_STRUCT(
		rasterizer_screen_effect_convolution_block_struct_definition,
		"rasterizer_screen_effect_convolution_block",
		"rasterizer_screen_effect_convolution_block_struct_definition",
		"s_rasterizer_screen_effect_convolution",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("CONVOLUTION", "Convolution blurs the target of this pass reference to the SCREEN EFFECT CONVOLUTION buffer, which is accessible in the shader system through a texture extern. It is not cheap especially for large convolution amounts, so please use it sparingly!! Note that the resolution will be clamped to 64x64 minimum and 768000 pixels total maximum."),
		{ _field_word_flags, "flags", &unnamed_enum$196 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 64),
		{ _field_real, "convolution amount", nullptr, nullptr, "[0,+inf)" },
		{ _field_real, "filter scale" },
		{ _field_real_fraction, "filter box factor", nullptr, nullptr, "[0,1] not used for zoom" },
		{ _field_real, "zoom falloff radius" },
		{ _field_real, "zoom cutoff radius" },
		{ _field_real_fraction, "resolution scale", nullptr, nullptr, "[0,1]" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$196)
	{
		"only when primary is active",
		"only when secondary is active",
		"predator zoom"
	};
	STRING_LIST(unnamed_enum$196, unnamed_enum$196_strings, _countof(unnamed_enum$196_strings));

	TAG_STRUCT(
		rasterizer_screen_effect_pass_reference_block_struct_definition,
		"rasterizer_screen_effect_pass_reference_block",
		"rasterizer_screen_effect_pass_reference_block_struct_definition",
		"s_rasterizer_screen_effect_pass_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_data, "explanation", &rasterizer_screen_effect_text_definition },
		FIELD_EXPLANATION("IMPLEMENTATIONS", "Used to control which shader pass implementations are used depending on whether the primary and/or secondary external inputs are greater than zero. An implementation of -1 will not draw anything."),
		{ _field_short_integer, "layer pass index", nullptr, "leave as -1 unless debugging" },
		FIELD_PAD("value", 2),
		{ _field_char_integer, "primary=0 and secondary=0", nullptr, "implementation index" },
		{ _field_char_integer, "primary>0 and secondary=0", nullptr, "implementation index" },
		{ _field_char_integer, "primary=0 and secondary>0", nullptr, "implementation index" },
		{ _field_char_integer, "primary>0 and secondary>0", nullptr, "implementation index" },
		FIELD_PAD("value", 64),
		FIELD_EXPLANATION("TEXCOORD GENERATION", "* DEFAULT: Use for mask bitmaps that are mirrored and offset through the texcoords supplied to the screen effect (e.g. through the weapon HUD interface). The shader system must handle scaling.\n\n* VIEWPORT NORMALIZED: Use when copying from texaccum or some other buffer or when applying a texture that is not an interface mask (e.g. another kind of mask, a noise map, etc. which is not mirrored or offset through the weapon HUD interface). Texture coordinates will range from [0,1][0,1] within the viewport, and the shader system must handle scaling if the bitmap is a linear target or an interface bitmap.\n\n* VIEWPORT RELATIVE: Should not be used! This mode was necessary before we had he ability for the shader system to scale by texture resolution. Texture coordinates will range from [0,viewport_size_x][0,viewport_size_y] within the viewport.\n\n* FRAMEBUFFER RELATIVE: Use when copying from the framebuffer. Texture coordinates will range from [viewport_bounds.x0,viewport_bounds.x1][viewport_bounds.y0,viewport_bounds.y1] within the viewport. Let the shader system assume normalized [0,1] coordinate range.\n\n* ZERO: Use when doing dependent-z reads. Texture coordinates will be zero before applying offset (in advanced control block). Offset should be {1/(z_max-z_min), 0, -z_min/(z_max-z_min), 0} where z_min and z_max are in world units, and the \"xy scaled by z_far\" flag should be checked."),
		{ _field_short_enum, "stage 0 mode", &unnamed_enum$193 },
		{ _field_short_enum, "stage 1 mode", &unnamed_enum$193 },
		{ _field_short_enum, "stage 2 mode", &unnamed_enum$193 },
		{ _field_short_enum, "stage 3 mode", &unnamed_enum$193 },
		{ _field_block, "advanced control", &rasterizer_screen_effect_texcoord_generation_advanced_control_block },
		FIELD_EXPLANATION("TARGET", nullptr),
		{ _field_short_enum, "target", &unnamed_enum$195 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 64),
		{ _field_block, "convolution", &rasterizer_screen_effect_convolution_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$193)
	{
		"default",
		"viewport normalized",
		"viewport relative",
		"framebuffer relative",
		"zero"
	};
	STRING_LIST(unnamed_enum$193, unnamed_enum$193_strings, _countof(unnamed_enum$193_strings));

	STRINGS(unnamed_enum$195)
	{
		"framebuffer",
		"texaccum",
		"texaccum small",
		"texaccum tiny",
		"copy fb to texaccum"
	};
	STRING_LIST(unnamed_enum$195, unnamed_enum$195_strings, _countof(unnamed_enum$195_strings));

	TAG_STRUCT(
		rasterizer_screen_effect_texcoord_generation_advanced_control_block_struct_definition,
		"rasterizer_screen_effect_texcoord_generation_advanced_control_block",
		"rasterizer_screen_effect_texcoord_generation_advanced_control_block_struct_definition",
		"s_rasterizer_screen_effect_texcoord_generation_advanced_control",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "stage 0 flags", &unnamed_enum$194 },
		{ _field_word_flags, "stage 1 flags", &unnamed_enum$194 },
		{ _field_word_flags, "stage 2 flags", &unnamed_enum$194 },
		{ _field_word_flags, "stage 3 flags", &unnamed_enum$194 },
		{ _field_real_plane_3d, "stage 0 offset" },
		{ _field_real_plane_3d, "stage 1 offset" },
		{ _field_real_plane_3d, "stage 2 offset" },
		{ _field_real_plane_3d, "stage 3 offset" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$194)
	{
		"xy scaled by z_far"
	};
	STRING_LIST(unnamed_enum$194, unnamed_enum$194_strings, _countof(unnamed_enum$194_strings));

	TAG_STRUCT(
		real_block_struct_definition,
		"real_block",
		"real_block_struct_definition",
		"s_real",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "Value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		real_vector4d_block_struct_definition,
		"real_vector4d_block",
		"real_vector4d_block_struct_definition",
		"s_real_vector4d",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_vector_3d, "vector3" },
		{ _field_real, "w" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		recorded_animation_block_struct_definition,
		"recorded_animation_block",
		"recorded_animation_block_struct_definition",
		"s_recorded_animation_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_char_integer, "version" },
		{ _field_char_integer, "raw animation data" },
		{ _field_char_integer, "unit control data version" },
		FIELD_PAD("value", 1),
		{ _field_short_integer, "length of animation", nullptr, "ticks" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		{ _field_data, "recorded animation event stream", &recorded_animation_event_stream_data },
		{ _field_terminator }
	};

	TAG_STRUCT(
		ref_block_struct_definition,
		"ref_block",
		"ref_block_struct_definition",
		"s_bsp2d_ref",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "node ref or sector ref" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		regions_block_struct_definition,
		"regions_block",
		"regions_block_struct_definition",
		"s_physics_model_region",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_block, "permutations", &permutations_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_lighting_struct_struct_definition,
		"render_lighting_struct",
		"render_lighting_struct_struct_definition",
		"s_render_lighting",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_rgb_color, "ambient" },
		{ _field_real_vector_3d, "shadow direction" },
		{ _field_real, "lighting_accuracy" },
		{ _field_real, "shadow opacity" },
		{ _field_real_rgb_color, "primary direction color" },
		{ _field_real_vector_3d, "primary direction" },
		{ _field_real_rgb_color, "secondary direction color" },
		{ _field_real_vector_3d, "secondary direction" },
		{ _field_short_integer, "sh index" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_backward_shared_edge_block_struct_definition,
		"render_model_backward_shared_edge_block",
		"render_model_backward_shared_edge_block_struct_definition",
		"s_render_model_backward_shared_edge",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_array, "vertex indices", &unnamed_array$40 },
		{ _field_short_integer, "triangle index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_block_struct_definition,
		"render_model_block",
		"render_model_block_struct_definition",
		"s_render_model_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_old_string_id, "name" },
		{ _field_word_flags, "flags", &unnamed_enum$318 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		{ _field_block, "import info", &global_tag_import_info_block },
		{ _field_block, "compression info", &global_geometry_compression_info_block },
		{ _field_block, "regions", &render_model_region_block },
		{ _field_block, "sections", &render_model_section_block },
		{ _field_block, "invalid section pair bits", &render_model_invalid_section_pairs_block },
		{ _field_block, "section groups", &render_model_section_group_block },
		{ _field_char_integer, "L1 section group index", nullptr, "(super low)" },
		{ _field_char_integer, "L2 section group index", nullptr, "(low)" },
		{ _field_char_integer, "L3 section group index", nullptr, "(medium)" },
		{ _field_char_integer, "L4 section group index", nullptr, "(high)" },
		{ _field_char_integer, "L5 section group index", nullptr, "(super high)" },
		{ _field_char_integer, "L6 section group index", nullptr, "(hollywood)" },
		FIELD_PAD("value", 2),
		{ _field_long_integer, "node list checksum" },
		{ _field_block, "nodes", &render_model_node_block },
		{ _field_block, "node map (OLD)", &render_model_node_map_block_old_block },
		{ _field_block, "marker groups", &render_model_marker_group_block },
		{ _field_block, "materials", &global_geometry_material_block },
		{ _field_block, "errors", &global_error_report_categories_block },
		{ _field_real, "don't draw over camera cosine angle", "dont draw fp model when camera > this angle cosine (-1,1) Sugg. -0.2. 0 disables." },
		{ _field_block, "PRT info", &prt_info_block },
		{ _field_block, "section render leaves", &section_render_leaves_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$318)
	{
		"_render_model_force_third_person_bit",
		"force carmack-reverse",
		"force node maps",
		"geometry postprocessed"
	};
	STRING_LIST(unnamed_enum$318, unnamed_enum$318_strings, _countof(unnamed_enum$318_strings));

	TAG_STRUCT(
		render_model_compound_node_block_struct_definition,
		"render_model_compound_node_block",
		"render_model_compound_node_block_struct_definition",
		"s_render_model_compound_node",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_array, "node indices", &unnamed_array$42 },
		{ _field_array, "node weights", &unnamed_array$43 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_dsq_raw_vertex_block_struct_definition,
		"render_model_dsq_raw_vertex_block",
		"render_model_dsq_raw_vertex_block_struct_definition",
		"s_render_model_dsq_vertex",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_real_plane_3d, "plane" },
		{ _field_long_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_dsq_silhouette_quad_block_struct_definition,
		"render_model_dsq_silhouette_quad_block",
		"render_model_dsq_silhouette_quad_block_struct_definition",
		"s_render_model_dsq_silhouette_quad",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_array, "vertex indices", &unnamed_array$41 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_dsq_strip_index_block_struct_definition,
		"render_model_dsq_strip_index_block",
		"render_model_dsq_strip_index_block_struct_definition",
		"s_word$7",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "vertex index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_forward_shared_edge_block_struct_definition,
		"render_model_forward_shared_edge_block",
		"render_model_forward_shared_edge_block_struct_definition",
		"s_render_model_forward_shared_edge",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "triangle index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_invalid_section_pairs_block_struct_definition,
		"render_model_invalid_section_pairs_block",
		"render_model_invalid_section_pairs_block_struct_definition",
		"s_dword",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "bits" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_marker_block_struct_definition,
		"render_model_marker_block",
		"render_model_marker_block_struct_definition",
		"s_render_model_marker",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "region index" },
		{ _field_char_integer, "permutation index" },
		{ _field_char_integer, "node index" },
		FIELD_PAD("value", 1),
		{ _field_real_point_3d, "translation" },
		{ _field_real_quaternion, "rotation" },
		{ _field_real, "scale" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_marker_group_block_struct_definition,
		"render_model_marker_group_block",
		"render_model_marker_group_block_struct_definition",
		"s_render_model_marker_group",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_old_string_id, "name" },
		{ _field_block, "markers", &render_model_marker_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_node_block_struct_definition,
		"render_model_node_block",
		"render_model_node_block_struct_definition",
		"s_render_model_node",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_old_string_id, "name" },
		{ _field_short_block_index, "parent node" },
		{ _field_short_block_index, "first child node" },
		{ _field_short_block_index, "next sibling node" },
		{ _field_short_integer, "import node index" },
		{ _field_real_point_3d, "default translation" },
		{ _field_real_quaternion, "default rotation" },
		FIELD_EXPLANATION("Old Mistakes Die Hard", "Be aware that the displayed inverse matrix below is incorrect.\nThe inverse scale value should come before the inverse matrix. Currently the first value of the inverse matrix is the inverse scale and the inverse scale is the final value of the inverse position.\ni.e. The actual field order should have been:\n  *inverse scale\n  *inverse forward\n  *inverse left\n  *inverse up\n  *inverse position\n"),
		{ _field_real_vector_3d, "inverse forward" },
		{ _field_real_vector_3d, "inverse left" },
		{ _field_real_vector_3d, "inverse up" },
		{ _field_real_point_3d, "inverse position" },
		{ _field_real, "inverse scale" },
		{ _field_real, "distance from parent" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_node_map_block_old_struct_definition,
		"render_model_node_map_block_OLD",
		"render_model_node_map_block_OLD_struct_definition",
		"s_byte$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_node_map_block_struct_definition,
		"render_model_node_map_block",
		"render_model_node_map_block_struct_definition",
		"s_byte$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "node index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_permutation_block_struct_definition,
		"render_model_permutation_block",
		"render_model_permutation_block_struct_definition",
		"s_render_model_permutation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_old_string_id, "name" },
		{ _field_short_integer, "L1 section index", nullptr, "(super low)" },
		{ _field_short_integer, "L2 section index", nullptr, "(low)" },
		{ _field_short_integer, "L3 section index", nullptr, "(medium)" },
		{ _field_short_integer, "L4 section index", nullptr, "(high)" },
		{ _field_short_integer, "L5 section index", nullptr, "(super high)" },
		{ _field_short_integer, "L6 section index", nullptr, "(hollywood)" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_region_block_struct_definition,
		"render_model_region_block",
		"render_model_region_block_struct_definition",
		"s_render_model_region",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_old_string_id, "name" },
		{ _field_short_integer, "node map offset (OLD)" },
		{ _field_short_integer, "node map size (OLD)" },
		{ _field_block, "permutations", &render_model_permutation_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_section_block_struct_definition,
		"render_model_section_block",
		"render_model_section_block_struct_definition",
		"s_render_model_section",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "global_geometry_classification_enum_definition", &unnamed_enum$287 },
		FIELD_PAD("value", 2),
		{ _field_struct, "section info", &global_geometry_section_info_struct_struct_definition, _field_id_SINF },
		{ _field_short_block_index, "rigid node" },
		{ _field_word_flags, "flags", &unnamed_enum$319 },
		{ _field_block, "section data", &render_model_section_data_block },
		{ _field_struct, "geometry block info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$319)
	{
		"geometry postprocessed"
	};
	STRING_LIST(unnamed_enum$319, unnamed_enum$319_strings, _countof(unnamed_enum$319_strings));

	VERSIONED_TAG_STRUCT(
		render_model_section_data_tag_field_new_struct_definition,
		"render_model_section_data_tag_field_new",
		"render_model_section_data_tag_field_new_struct_definition",
		"s_render_model_section_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 5 },
		{ _field_struct, "section", &geometry_section_fieldset_new_struct_definition, _field_id_SECT }, // structure_version:1
		{ _field_struct, "point data", &global_geometry_point_data_struct_struct_definition, _field_id_PDAT },
		{ _field_block, "node map", &render_model_node_map_block },
		FIELD_PAD("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		
		{ _struct_version_mode_equal, 0, 17 },
		{ _field_struct, "section", &geometry_section_fieldset_new_struct_definition, _field_id_SECT }, // structure_version:1
		{ _field_struct, "point data", &global_geometry_point_data_struct_struct_definition, _field_id_PDAT },
		{ _field_block, "node map", &render_model_node_map_block },
		FIELD_EXPLANATION("ISQ INFO", nullptr),
		{ _field_struct, "isq info", &global_geometry_isq_info_struct_struct_definition, _field_id_ISQI },
		{ _field_block, "forward shared edges", &render_model_forward_shared_edge_block },
		{ _field_block, "forward shared edge groups", &render_model_shared_edge_group_block },
		{ _field_block, "backward shared edges", &render_model_backward_shared_edge_block },
		{ _field_block, "backward shared edge groups", &render_model_shared_edge_group_block },
		FIELD_EXPLANATION("DSQ INFO", nullptr),
		{ _field_block, "raw vertices", &render_model_dsq_raw_vertex_block },
		{ _field_block, "strip indices", &render_model_dsq_strip_index_block },
		{ _field_block, "silhouette quads", &render_model_dsq_silhouette_quad_block },
		{ _field_short_integer, "Carmack-silhouette quad count" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_model_section_group_block_struct_definition,
		"render_model_section_group_block",
		"render_model_section_group_block_struct_definition",
		"s_render_model_section_group",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "detail levels", &unnamed_enum$321 },
		FIELD_PAD("value", 2),
		{ _field_block, "compound nodes", &render_model_compound_node_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$321)
	{
		"L1 (super low)",
		"L2 (low)",
		"L3 (medium)",
		"L4 (high)",
		"L5 (super high)",
		"L6 (hollywood)"
	};
	STRING_LIST(unnamed_enum$321, unnamed_enum$321_strings, _countof(unnamed_enum$321_strings));

	TAG_STRUCT(
		render_model_shared_edge_group_block_struct_definition,
		"render_model_shared_edge_group_block",
		"render_model_shared_edge_group_block_struct_definition",
		"s_render_model_shared_edge_group",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "first shared edge index" },
		{ _field_short_integer, "shared edge count" },
		FIELD_PAD("value", 1),
		{ _field_char_integer, "adjacent region index" },
		FIELD_PAD("value", 1),
		{ _field_char_integer, "section set index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_state_block_struct_definition,
		"render_state_block",
		"render_state_block_struct_definition",
		"s_render_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "state index" },
		{ _field_long_integer, "state value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		render_state_parameter_block_struct_definition,
		"render_state_parameter_block",
		"render_state_parameter_block_struct_definition",
		"s_render_state_parameter",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "parameter index" },
		{ _field_char_integer, "parameter type" },
		{ _field_char_integer, "state index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		response_block_struct_definition,
		"response_block",
		"response_block_struct_definition",
		"s_response",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "vocalization name", _field_id_sted },
		{ _field_word_flags, "flags", &unnamed_enum$52 },
		{ _field_short_integer, "vocalization index (post process)" },
		{ _field_short_enum, "response type", &unnamed_enum$53 },
		{ _field_short_integer, "dialogue index (import)" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$52)
	{
		"nonexclusive",
		"trigger response"
	};
	STRING_LIST(unnamed_enum$52, unnamed_enum$52_strings, _countof(unnamed_enum$52_strings));

	STRINGS(unnamed_enum$53)
	{
		"friend",
		"enemy",
		"listener",
		"joint",
		"peer"
	};
	STRING_LIST(unnamed_enum$53, unnamed_enum$53_strings, _countof(unnamed_enum$53_strings));

	VERSIONED_TAG_STRUCT(
		rigid_bodies_block_struct_definition,
		"rigid_bodies_block",
		"rigid_bodies_block_struct_definition",
		"s_physics_model_rigid_body",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		{ _struct_version_mode_greater_or_equal, 1, 27 },
		{ _field_short_block_index, "node" },
		{ _field_short_block_index, "region" },
		{ _field_short_block_index_custom_search, "permutattion" },
		FIELD_PAD("value", 2),
		{ _field_real_point_3d, "bouding sphere offset" },
		{ _field_real, "bounding sphere radius" },
		{ _field_word_flags, "flags", &unnamed_enum$348 },
		{ _field_short_enum, "motion type", &unnamed_enum$349 },
		{ _field_short_block_index, "no phantom power alt" },
		{ _field_short_enum, "size", &unnamed_enum$344 },
		{ _field_real, "inertia tensor scale", "0.0 defaults to 1.0" },
		{ _field_real, "linear damping", "this goes from 0-10 (10 is really, really high)" },
		{ _field_real, "angular damping", "this goes from 0-10 (10 is really, really high)" },
		{ _field_real_vector_3d, "center off mass offset" },
		{ _field_pointer, "value" },
		{ _field_real, "mass", nullptr, "kg", FIELD_FLAG_READ_ONLY },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 12, _field_id_pd64),
		{ _field_real_vector_3d, "center of mass" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "intertia tensor x" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "intertia tensor y" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "intertia tensor z" },
		FIELD_SKIP("value", 4),
		{ _field_real, "bounding sphere pad", "the bounding sphere for this rigid body will be outset by this much" },
		FIELD_PAD("value", 12),
		
		{ _struct_version_mode_equal, 0, 21 },
		{ _field_short_block_index, "node" },
		{ _field_short_block_index, "region" },
		{ _field_short_block_index_custom_search, "permutation" },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$348 },
		{ _field_short_enum, "motion type", &unnamed_enum$349 },
		FIELD_PAD("value", 4),
		{ _field_real, "linear damping", "this goes from 0-10 (10 is really, really high)" },
		{ _field_real, "angular damping", "this goes from 0-10 (10 is really, really high)" },
		{ _field_pointer, "value" },
		{ _field_real, "mass", nullptr, "kg", FIELD_FLAG_READ_ONLY },
		{ _field_real_vector_3d, "center of mass" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "intertia tensor x" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "intertia tensor y" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "intertia tensor z" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "center off mass offset" },
		FIELD_PAD("value", 4),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$348)
	{
		"no collisions w/self",
		"only collide w/env",
		"disable effects#this rigid body will not generate impact effects unless it hits another dynamic rigid body that does",
		"does not interact w/environment#set this flag if this rigid bodies won\'t touch the environment, this allows us to open up some optimizations",
		"best early mover body# if you have either of the early mover flags set in the object definitoin this body will be choosen as the one to make every thing local to, otherwise I pick :-)",
		"has no phantom power version#don\'t check this flag without talking to eamon"
	};
	STRING_LIST(unnamed_enum$348, unnamed_enum$348_strings, _countof(unnamed_enum$348_strings));

	STRINGS(unnamed_enum$349)
	{
		"sphere",
		"stabilized sphere",
		"box",
		"stabilized box",
		"keyframed",
		"fixed"
	};
	STRING_LIST(unnamed_enum$349, unnamed_enum$349_strings, _countof(unnamed_enum$349_strings));

	TAG_STRUCT(
		rigid_body_indices_block_struct_definition,
		"rigid_body_indices_block",
		"rigid_body_indices_block_struct_definition",
		"s_short$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "rigid body" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		rules_block_struct_definition,
		"rules_block",
		"rules_block_struct_definition",
		"s_ca2d_rule",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_real_rgb_color, "tint color" },
		FIELD_PAD("value", 32),
		{ _field_block, "states", &states_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		runtime_campaign_level_block_struct_definition,
		"runtime_campaign_level_block",
		"runtime_campaign_level_block_struct_definition",
		"s_campaign_runtime_level_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "campaign id" },
		{ _field_long_integer, "map id" },
		{ _field_long_string, "path" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		runtime_levels_definition_block_struct_definition,
		"runtime_levels_definition_block",
		"runtime_levels_definition_block_struct_definition",
		"s_runtime_levels_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "campaign levels", &runtime_campaign_level_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		s_effect_event_struct_definition,
		"s_effect_event",
		"s_effect_event_struct_definition",
		"s_effect_event",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_short_block_index, "effect" },
		{ _field_short_integer, "frame" },
		
		{ _struct_version_mode_equal, 0, 3 },
		{ _field_short_block_index, "effect" },
		{ _field_short_integer, "frame" },
		{ _field_string_id, "marker name" },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		s_text_value_pair_blocks_block_unused_struct_definition,
		"s_text_value_pair_blocks_block_UNUSED",
		"s_text_value_pair_blocks_block_UNUSED_struct_definition",
		"s_text_value_pair_block_unused",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("OBSOLETE", "this is all obsolete"),
		{ _field_string, "name" },
		{ _field_block, "text value pairs", &s_text_value_pair_reference_block_unused_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		s_text_value_pair_reference_block_unused_struct_definition,
		"s_text_value_pair_reference_block_UNUSED",
		"s_text_value_pair_reference_block_UNUSED_struct_definition",
		"s_text_value_pair_reference_unused",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("OBSOLETE", "this is all obsolete"),
		{ _field_short_enum, "value type", &unnamed_enum$541 },
		FIELD_EXPLANATION("Value", "Enter the value in the box corresponding to the value type you specified above"),
		{ _field_short_enum, "boolean value", &unnamed_enum$542 },
		{ _field_long_integer, "integer value" },
		{ _field_real, "fp value" },
		{ _field_string_id, "text value string_id" },
		FIELD_EXPLANATION("Text Label", "This is text string associated with data when it has the value specified above.\nThe string comes from the screen\'s string list tag."),
		{ _field_string_id, "text label string_id" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$541)
	{
		"integer number",
		"floating point number",
		"boolean",
		"text string"
	};
	STRING_LIST(unnamed_enum$541, unnamed_enum$541_strings, _countof(unnamed_enum$541_strings));

	STRINGS(unnamed_enum$542)
	{
		"FALSE",
		"TRUE"
	};
	STRING_LIST(unnamed_enum$542, unnamed_enum$542_strings, _countof(unnamed_enum$542_strings));

	TAG_STRUCT(
		scalar_function_struct_struct_definition,
		"scalar_function_struct",
		"scalar_function_struct_struct_definition",
		"s_function_definition$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("function", _field_id_function_editor),
		{ _field_struct, "function", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_ai_resource_block_struct_definition,
		"scenario_ai_resource_block",
		"scenario_ai_resource_block_struct_definition",
		"s_scenario_ai_resource",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "style pallette", &style_palette_block },
		{ _field_block, "squad groups", &squad_groups_block },
		{ _field_block, "squads", &squads_block },
		{ _field_block, "zones", &zone_block },
		{ _field_block, "character palette", &character_palette_block },
		{ _field_block, "ai animation references", &ai_animation_reference_block },
		{ _field_block, "ai script references", &ai_script_reference_block },
		{ _field_block, "ai recording references", &ai_recording_reference_block },
		{ _field_block, "ai conversations", &ai_conversation_block },
		{ _field_block, "scripting data", &cs_script_data_block },
		{ _field_block, "Orders", &orders_block },
		{ _field_block, "Triggers", &triggers_block },
		{ _field_block, "bsp references", &scenario_structure_bsp_reference_block },
		{ _field_block, "weapon references", &scenario_weapon_palette_block },
		{ _field_block, "vehicle references", &scenario_vehicle_palette_block },
		{ _field_block, "vehicle datum references", &scenario_vehicle_block },
		{ _field_block, "mission dialogue scenes", &ai_scene_block },
		{ _field_block, "flocks", &flock_definition_block },
		{ _field_block, "trigger volume references", &scenario_trigger_volume_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_ai_resource_reference_block_struct_definition,
		"scenario_ai_resource_reference_block",
		"scenario_ai_resource_reference_block_struct_definition",
		"s_ai_resource_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "reference", &scenario_ai_resource_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(scenario_ai_resource_group_reference, SCENARIO_AI_RESOURCE_TAG, _tag_reference_flag_dont_resolve_in_editor);

	TAG_STRUCT(
		scenario_atmospheric_fog_mixer_block_struct_definition,
		"scenario_atmospheric_fog_mixer_block",
		"scenario_atmospheric_fog_mixer_block_struct_definition",
		"s_scenario_atmospheric_fog_mixer",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 4),
		{ _field_string_id, "atmospheric fog source", nullptr, "from scenario atmospheric fog palette" },
		{ _field_string_id, "interpolator", nullptr, "from scenario interpolators" },
		FIELD_SKIP("value", 2),
		FIELD_SKIP("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_atmospheric_fog_palette_struct_definition,
		"scenario_atmospheric_fog_palette",
		"scenario_atmospheric_fog_palette_struct_definition",
		"s_scenario_atmospheric_fog_palette_entry",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		FIELD_EXPLANATION("ATMOSPHERIC FOG", nullptr),
		{ _field_real_rgb_color, "color" },
		{ _field_real, "spread distance", "how far fog spreads into adjacent clusters - 0 defaults to 1", "world units" },
		FIELD_PAD("value", 4),
		{ _field_real_fraction, "maximum density", "fog density is clamped to this value", nullptr, "[0,1]" },
		{ _field_real, "start distance", "before this distance there is no fog", "world units" },
		{ _field_real, "opaque distance", "the fog becomes opaque (maximum density) at this distance from the viewer", "world units" },
		FIELD_EXPLANATION("SECONDARY FOG", nullptr),
		{ _field_real_rgb_color, "color" },
		FIELD_PAD("value", 4),
		{ _field_real_fraction, "maximum density", "fog density is clamped to this value", nullptr, "[0,1]" },
		{ _field_real, "start distance", "before this distance there is no fog", "world units" },
		{ _field_real, "opaque distance", "the fog becomes opaque (maximum density) at this distance from the viewer", "world units" },
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("PLANAR FOG OVERRIDE", "Planar fog, if present, is interpolated towards these values."),
		{ _field_real_rgb_color, "planar color" },
		{ _field_real_fraction, "planar max density", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "planar override amount", nullptr, nullptr, "[0,1]" },
		{ _field_real, "planar min distance bias", "don't ask", "world units" },
		FIELD_PAD("value", 44),
		FIELD_EXPLANATION("PATCHY FOG", nullptr),
		{ _field_real_rgb_color, "patchy color" },
		FIELD_PAD("value", 12),
		{ _field_real_fraction_bounds, "patchy density", nullptr, nullptr, "[0,1]" },
		{ _field_real_bounds, "patchy distance", nullptr, "world units" },
		FIELD_PAD("value", 32),
		{ _field_tag_reference, "patchy fog", &patchy_fog_group_reference },
		{ _field_block, "mixers", &scenario_atmospheric_fog_mixer_block },
		FIELD_EXPLANATION("BLOOM OVERRIDE", nullptr),
		{ _field_real_fraction, "amount", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "brightness", nullptr, nullptr, "[0,1]" },
		{ _field_real, "gamma power" },
		FIELD_EXPLANATION("CAMERA IMMERSION OVERRIDE", nullptr),
		{ _field_word_flags, "camera immersion flags", &unnamed_enum$155 },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_REFERENCE(patchy_fog_group_reference, PATCHY_FOG_TAG);

	STRINGS(unnamed_enum$155)
	{
		"disable atmospheric fog",
		"disable secondary fog",
		"disable planar fog",
		"invert planar fog priorities",
		"disable water"
	};
	STRING_LIST(unnamed_enum$155, unnamed_enum$155_strings, _countof(unnamed_enum$155_strings));

	TAG_STRUCT(
		scenario_biped_palette_block_struct_definition,
		"scenario_biped_palette_block",
		"scenario_biped_palette_block_struct_definition",
		"s_scenario_object_palette_entry$6",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "name", &biped_group_reference },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(biped_group_reference, BIPED_TAG);

	VERSIONED_TAG_STRUCT(
		scenario_biped_struct_definition,
		"scenario_biped",
		"scenario_biped_struct_definition",
		"s_scenario_biped",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct_struct_definition, _field_id_sper },
		{ _field_struct, "unit data", &scenario_unit_struct_struct_definition, _field_id_sunt },
		
		{ _struct_version_mode_equal, 1, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct_struct_definition, _field_id_sper },
		{ _field_struct, "unit data", &scenario_unit_struct_struct_definition, _field_id_sunt },
		
		{ _struct_version_mode_equal, 0, 12 },
		{ _field_short_block_index, "type", _field_id_type },
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_word_flags, "not placed", &unnamed_enum$4 },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _field_id_point },
		{ _field_real_euler_angles_3d, "rotation", _field_id_orientation },
		FIELD_PAD("value", 4),
		{ _field_long_block_index, "environment object reference" },
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 16),
		{ _field_struct, "unit data", &old_scenario_unit_struct_struct_definition, _field_id_sust },
		FIELD_PAD("value", 32),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_bipeds_resource_block_struct_definition,
		"scenario_bipeds_resource_block",
		"scenario_bipeds_resource_block_struct_definition",
		"s_scenario_objects_resource_definition$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "names", &scenario_object_names_block },
		{ _field_block, "value", &dont_use_me_scenario_environment_object_block },
		{ _field_block, "structure references", &scenario_structure_bsp_reference_block },
		{ _field_block, "palette", &scenario_biped_palette_block },
		{ _field_block, "objects", &scenario_biped_block },
		{ _field_long_integer, "next object id salt" },
		{ _field_block, "editor folders", &g_scenario_editor_folder_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_bsp_switch_transition_volume_block_struct_definition,
		"scenario_bsp_switch_transition_volume_block",
		"scenario_bsp_switch_transition_volume_block_struct_definition",
		"s_scenario_bsp_switch_transition_volume",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "bsp index key" },
		{ _field_short_block_index, "trigger volume" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_bsp_switch_trigger_volume_block_struct_definition,
		"scenario_bsp_switch_trigger_volume_block",
		"scenario_bsp_switch_trigger_volume_block_struct_definition",
		"s_scenario_bsp_switch_trigger_volume",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "trigger volume" },
		{ _field_short_block_index, "source" },
		{ _field_short_block_index, "destination" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_child_scenario_block_struct_definition,
		"scenario_child_scenario_block",
		"scenario_child_scenario_block_struct_definition",
		"s_scenario_child_scenario_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "child scenario", &scenario_group_reference$2 },
		FIELD_PAD("value", 16),
		{ _field_terminator }
	};

	TAG_REFERENCE(scenario_group_reference$2, SCENARIO_TAG);

	TAG_STRUCT(
		scenario_cinematics_resource_block_struct_definition,
		"scenario_cinematics_resource_block",
		"scenario_cinematics_resource_block_struct_definition",
		"s_scenario_cinematics_resource_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "flags", &scenario_cutscene_flag_block },
		{ _field_block, "camera points", &scenario_cutscene_camera_point_block },
		{ _field_block, "recorded animations", &recorded_animation_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_cluster_atmospheric_fog_properties_block_struct_definition,
		"scenario_cluster_atmospheric_fog_properties_block",
		"scenario_cluster_atmospheric_fog_properties_block_struct_definition",
		"s_scenario_cluster_property$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "type" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_cluster_background_sounds_block_struct_definition,
		"scenario_cluster_background_sounds_block",
		"scenario_cluster_background_sounds_block_struct_definition",
		"s_scenario_cluster_property",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "type" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_cluster_data_block_struct_definition,
		"scenario_cluster_data_block",
		"scenario_cluster_data_block_struct_definition",
		"s_scenario_cluster_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "bsp", &scenario_structure_bsp_group_reference },
		{ _field_block, "background sounds", &scenario_cluster_background_sounds_block },
		{ _field_block, "sound environments", &scenario_cluster_sound_environments_block },
		{ _field_long_integer, "bsp checksum" },
		{ _field_block, "cluster centroids", &scenario_cluster_points_block },
		{ _field_block, "weather properties", &scenario_cluster_weather_properties_block },
		{ _field_block, "atmospheric fog properties", &scenario_cluster_atmospheric_fog_properties_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(scenario_structure_bsp_group_reference, SCENARIO_STRUCTURE_BSP_TAG, _tag_reference_flag_dont_resolve_in_editor);

	TAG_STRUCT(
		scenario_cluster_data_resource_block_struct_definition,
		"scenario_cluster_data_resource_block",
		"scenario_cluster_data_resource_block_struct_definition",
		"s_scenario_cluster_data_resource",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "cluster data", &scenario_cluster_data_block },
		{ _field_block, "background sound palette", &structure_bsp_background_sound_palette_block },
		{ _field_block, "sound environment palette", &structure_bsp_sound_environment_palette_block },
		{ _field_block, "weather palette", &structure_bsp_weather_palette_block },
		{ _field_block, "atmospheric fog palette", &scenario_atmospheric_fog_palette_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_cluster_points_block_struct_definition,
		"scenario_cluster_points_block",
		"scenario_cluster_points_block_struct_definition",
		"s_real_point3d",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "centroid" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_cluster_sound_environments_block_struct_definition,
		"scenario_cluster_sound_environments_block",
		"scenario_cluster_sound_environments_block_struct_definition",
		"s_scenario_cluster_property$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "type" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_cluster_weather_properties_block_struct_definition,
		"scenario_cluster_weather_properties_block",
		"scenario_cluster_weather_properties_block_struct_definition",
		"s_scenario_cluster_property$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "type" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_comments_resource_block_struct_definition,
		"scenario_comments_resource_block",
		"scenario_comments_resource_block_struct_definition",
		"s_scenario_comment_flags_resource",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "comments", &editor_comment_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_control_palette_block_struct_definition,
		"scenario_control_palette_block",
		"scenario_control_palette_block_struct_definition",
		"s_scenario_object_palette_entry$11",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "name", &device_control_group_reference },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(device_control_group_reference, DEVICE_CONTROL_TAG);

	VERSIONED_TAG_STRUCT(
		scenario_control_struct_definition,
		"scenario_control",
		"scenario_control_struct_definition",
		"s_scenario_control",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "device data", &scenario_device_struct_struct_definition, _field_id_sdvt },
		{ _field_struct, "control data", &scenario_control_struct_struct_definition, _field_id_sctt },
		
		{ _struct_version_mode_equal, 1, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "device data", &scenario_device_struct_struct_definition, _field_id_sdvt },
		{ _field_struct, "control data", &scenario_control_struct_struct_definition, _field_id_sctt },
		
		{ _struct_version_mode_equal, 0, 14 },
		{ _field_short_block_index, "type", _field_id_type },
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_word_flags, "not placed", &unnamed_enum$4 },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _field_id_point },
		{ _field_real_euler_angles_3d, "rotation", _field_id_orientation },
		FIELD_PAD("value", 4),
		{ _field_long_block_index, "environment object reference" },
		{ _field_struct, "device data", &old_scenario_device_struct_struct_definition, _field_id_sdst },
		{ _field_long_flags, "flags", &unnamed_enum$186 },
		{ _field_short_integer, "*DON'T TOUCH THIS" },
		FIELD_CUSTOM("value", _field_id_unknown_ugh),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 8),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$186)
	{
		"usable from both sides"
	};
	STRING_LIST(unnamed_enum$186, unnamed_enum$186_strings, _countof(unnamed_enum$186_strings));

	TAG_STRUCT(
		scenario_control_struct_struct_definition,
		"scenario_control_struct",
		"scenario_control_struct_struct_definition",
		"s_scenario_control_datum",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$186 },
		{ _field_short_integer, "*DON'T TOUCH THIS", _field_id_unknown_ugh },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_crate_block_struct_definition,
		"scenario_crate_block",
		"scenario_crate_block_struct_definition",
		"s_scenario_crate",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct_struct_definition, _field_id_sper },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_crate_palette_block_struct_definition,
		"scenario_crate_palette_block",
		"scenario_crate_palette_block_struct_definition",
		"s_scenario_object_palette_entry$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "name", &crate_group_reference },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(crate_group_reference, CRATE_TAG);

	TAG_STRUCT(
		scenario_creature_block_struct_definition,
		"scenario_creature_block",
		"scenario_creature_block_struct_definition",
		"s_scenario_creature",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_creature_palette_block_struct_definition,
		"scenario_creature_palette_block",
		"scenario_creature_palette_block_struct_definition",
		"s_scenario_object_palette_entry$8",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "name", &creature_group_reference },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(creature_group_reference, CREATURE_TAG);

	TAG_STRUCT(
		scenario_creature_resource_block_struct_definition,
		"scenario_creature_resource_block",
		"scenario_creature_resource_block_struct_definition",
		"s_scenario_objects_resource_definition$6",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "names", &scenario_object_names_block },
		{ _field_block, "value", &dont_use_me_scenario_environment_object_block },
		{ _field_block, "structure references", &scenario_structure_bsp_reference_block },
		{ _field_block, "palette", &scenario_creature_palette_block },
		{ _field_block, "objects", &scenario_creature_block },
		{ _field_long_integer, "next object id salt" },
		{ _field_block, "editor folders", &g_scenario_editor_folder_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_cutscene_camera_point_block_struct_definition,
		"scenario_cutscene_camera_point_block",
		"scenario_cutscene_camera_point_block_struct_definition",
		"s_scenario_cutscene_camera_point",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$152 },
		{ _field_short_enum, "type", &unnamed_enum$153 },
		{ _field_string, "name" },
		FIELD_CUSTOM("value", _field_id_camera_matrix_editor),
		FIELD_PAD("value", 4),
		{ _field_real_point_3d, "position" },
		{ _field_real_euler_angles_3d, "orientation" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 36),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$152)
	{
		"edit as relative"
	};
	STRING_LIST(unnamed_enum$152, unnamed_enum$152_strings, _countof(unnamed_enum$152_strings));

	STRINGS(unnamed_enum$153)
	{
		"normal",
		"ignore target orientation",
		"dolly",
		"ignore target updates"
	};
	STRING_LIST(unnamed_enum$153, unnamed_enum$153_strings, _countof(unnamed_enum$153_strings));

	TAG_STRUCT(
		scenario_cutscene_flag_block_struct_definition,
		"scenario_cutscene_flag_block",
		"scenario_cutscene_flag_block_struct_definition",
		"s_scenario_cutscene_flag",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 4),
		{ _field_string, "name" },
		{ _field_real_point_3d, "position" },
		{ _field_real_euler_angles_2d, "facing" },
		FIELD_USELESS_PAD("value", 36),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_cutscene_title_block_struct_definition,
		"scenario_cutscene_title_block",
		"scenario_cutscene_title_block_struct_definition",
		"s_scenario_cutscene_title",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_rectangle_2d, "text bounds (on screen)" },
		{ _field_short_enum, "justification", &unnamed_enum$406 },
		{ _field_short_enum, "font", &unnamed_enum$407 },
		{ _field_rgb_color, "text color" },
		{ _field_rgb_color, "shadow color" },
		{ _field_real, "fade in time [seconds]" },
		{ _field_real, "up time [seconds]" },
		{ _field_real, "fade out time [seconds]" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$406)
	{
		"left",
		"right",
		"center",
		"custom_text_entry"
	};
	STRING_LIST(unnamed_enum$406, unnamed_enum$406_strings, _countof(unnamed_enum$406_strings));

	STRINGS(unnamed_enum$407)
	{
		"terminal font",
		"body text font",
		"title font",
		"super large font",
		"large body text font",
		"split screen hud message font",
		"full screen hud message font",
		"english body text font",
		"hud number font",
		"subtitle font",
		"main menu font",
		"text chat font"
	};
	STRING_LIST(unnamed_enum$407, unnamed_enum$407_strings, _countof(unnamed_enum$407_strings));

	TAG_STRUCT(
		scenario_decal_palette_block_struct_definition,
		"scenario_decal_palette_block",
		"scenario_decal_palette_block_struct_definition",
		"s_scenario_decal_palette_entry",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "reference", &decal_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(decal_group_reference, DECAL_TAG);

	TAG_STRUCT(
		scenario_decals_block_struct_definition,
		"scenario_decals_block",
		"scenario_decals_block_struct_definition",
		"s_scenario_decal",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "decal type" },
		{ _field_char_integer, "yaw" },
		{ _field_char_integer, "pitch" },
		{ _field_real_point_3d, "position" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_decals_resource_block_struct_definition,
		"scenario_decals_resource_block",
		"scenario_decals_resource_block_struct_definition",
		"s_scenario_decals_resource_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "palette", &scenario_decal_palette_block },
		{ _field_block, "decals", &scenario_decals_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_decorator_set_palette_entry_block_struct_definition,
		"scenario_decorator_set_palette_entry_block",
		"scenario_decorator_set_palette_entry_block_struct_definition",
		"s_scenario_decorator_palette_entry",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "decorator set", &decorator_set_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(decorator_set_group_reference, DECORATOR_SET_TAG);

	TAG_STRUCT(
		scenario_decorators_resource_block_struct_definition,
		"scenario_decorators_resource_block",
		"scenario_decorators_resource_block_struct_definition",
		"s_scenario_decorators_resource",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "decorator", &decorator_placement_definition_block },
		{ _field_block, "decorator palette", &scenario_decorator_set_palette_entry_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_description_block_struct_definition,
		"scenario_description_block",
		"scenario_description_block_struct_definition",
		"s_multiplayer_scenario_description_item",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("net map info", "these provide the info required by the UI to load a net map"),
		{ _field_tag_reference, "descriptive bitmap", &bitmap_group_reference },
		{ _field_tag_reference, "displayed map name", &multilingual_unicode_string_list_group_reference },
		{ _field_string, "scenario tag directory path", "this is the path to the directory containing the scenario tag file of the same name" },
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_detail_object_collection_palette_block_struct_definition,
		"scenario_detail_object_collection_palette_block",
		"scenario_detail_object_collection_palette_block_struct_definition",
		"s_scenario_detail_object_collection_palette_entry",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "name", &detail_object_collection_group_reference },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(detail_object_collection_group_reference, DETAIL_OBJECT_COLLECTION_TAG);

	TAG_STRUCT(
		scenario_device_struct_struct_definition,
		"scenario_device_struct",
		"scenario_device_struct_struct_definition",
		"s_scenario_device_datum",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "power group" },
		{ _field_short_block_index, "position group" },
		{ _field_long_flags, "flags", &unnamed_enum$17 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_devices_resource_block_struct_definition,
		"scenario_devices_resource_block",
		"scenario_devices_resource_block_struct_definition",
		"s_scenario_devices_resource_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "names", &scenario_object_names_block },
		{ _field_block, "value", &dont_use_me_scenario_environment_object_block },
		{ _field_block, "structure references", &scenario_structure_bsp_reference_block },
		{ _field_block, "device groups", &device_group_block$2 },
		{ _field_block, "machines", &scenario_machine_block },
		{ _field_block, "machine palette", &scenario_machine_palette_block },
		{ _field_block, "controls", &scenario_control_block },
		{ _field_block, "control palette", &scenario_control_palette_block },
		{ _field_block, "light fixtures", &scenario_light_fixture_block },
		{ _field_block, "light fixture palette", &scenario_light_fixture_palette_block },
		{ _field_long_integer, "next machine id salt" },
		{ _field_long_integer, "next control id salt" },
		{ _field_long_integer, "next light fixture id salt" },
		{ _field_block, "editor folders", &g_scenario_editor_folder_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_equipment_datum_struct_struct_definition,
		"scenario_equipment_datum_struct",
		"scenario_equipment_datum_struct_struct_definition",
		"s_scenario_equipment_datum",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "equipment flags", &unnamed_enum$22 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$22)
	{
		"initially at rest (doesn\'t fall)",
		"obsolete",
		"does accelerate (moves due to explosions)"
	};
	STRING_LIST(unnamed_enum$22, unnamed_enum$22_strings, _countof(unnamed_enum$22_strings));

	TAG_STRUCT(
		scenario_equipment_palette_block_struct_definition,
		"scenario_equipment_palette_block",
		"scenario_equipment_palette_block_struct_definition",
		"s_scenario_object_palette_entry$7",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "name", &equipment_group_reference },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(equipment_group_reference, EQUIPMENT_TAG);

	TAG_STRUCT(
		scenario_equipment_resource_block_struct_definition,
		"scenario_equipment_resource_block",
		"scenario_equipment_resource_block_struct_definition",
		"s_scenario_objects_resource_definition$5",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "names", &scenario_object_names_block },
		{ _field_block, "value", &dont_use_me_scenario_environment_object_block },
		{ _field_block, "structure references", &scenario_structure_bsp_reference_block },
		{ _field_block, "palette", &scenario_equipment_palette_block },
		{ _field_block, "objects", &scenario_equipment_block },
		{ _field_long_integer, "next object id salt" },
		{ _field_block, "editor folders", &g_scenario_editor_folder_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		scenario_equipment_struct_definition,
		"scenario_equipment",
		"scenario_equipment_struct_definition",
		"s_scenario_equipment",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 6 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "equipment data", &scenario_equipment_datum_struct_struct_definition, _field_id_seqt },
		
		{ _struct_version_mode_equal, 1, 6 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "equipment data", &scenario_equipment_datum_struct_struct_definition, _field_id_seqt },
		
		{ _struct_version_mode_equal, 0, 8 },
		{ _field_short_block_index, "type", _field_id_type },
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_word_flags, "not placed", &unnamed_enum$4 },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _field_id_point },
		{ _field_real_euler_angles_3d, "rotation", _field_id_orientation },
		FIELD_PAD("value", 4),
		{ _field_long_block_index, "environment object reference" },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_function_block_struct_definition,
		"scenario_function_block",
		"scenario_function_block_struct_definition",
		"s_scenario_function",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$395 },
		{ _field_string, "name" },
		{ _field_real, "period", "this is the period for the above function (lower values make the function oscillate quickly, higher values make it oscillate slowly)", "seconds" },
		{ _field_short_block_index, "scale period by", "multiply this function by the above period" },
		{ _field_short_enum, "function", &unnamed_enum$173 },
		{ _field_short_block_index, "scale function by", "multiply this function by the result of the above function" },
		{ _field_short_enum, "wobble function", "the curve used for the wobble", &unnamed_enum$173 },
		{ _field_real, "wobble period", "the length of time it takes for the magnitude of this function to complete a wobble", "seconds" },
		{ _field_real, "wobble magnitude", "the amount of random wobble in the magnitude", "percent" },
		{ _field_real_fraction, "square wave threshold", "if non-zero, all values above the square wave threshold are snapped to 1.0, and all values below it are snapped to 0.0 to create a square wave." },
		{ _field_short_integer, "step count", "the number of discrete values to snap to (e.g., a step count of 5 would snap the function to 0.00,0.25,0.50,0.75 or 1.00)" },
		{ _field_short_enum, "map to", &unnamed_enum$396 },
		{ _field_short_integer, "sawtooth count", "the number of times this function should repeat (e.g., a sawtooth count of 5 would give the function a value of 1.0 at each of 0.25,0.50,0.75 as well as at 1.0" },
		FIELD_PAD("value", 2),
		{ _field_short_block_index, "scale result by", "multiply this function (from a weapon, vehicle, etc.) final result of all of the above math" },
		{ _field_short_enum, "bounds mode", "controls how the bounds, below, are used", &unnamed_enum$397 },
		{ _field_real_fraction_bounds, "bounds" },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 2),
		{ _field_short_block_index, "turn off with", "if the specified function is off, so is this function" },
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 16),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$395)
	{
		"scripted#the level script will set this value; the other settings here will be ignored.",
		"invert#result of function is one minus actual result",
		"additive",
		"always active#function does not deactivate when at or below lower bound"
	};
	STRING_LIST(unnamed_enum$395, unnamed_enum$395_strings, _countof(unnamed_enum$395_strings));

	STRINGS(unnamed_enum$396)
	{
		"linear",
		"early",
		"very early",
		"late",
		"very late",
		"cosine",
		"one",
		"zero"
	};
	STRING_LIST(unnamed_enum$396, unnamed_enum$396_strings, _countof(unnamed_enum$396_strings));

	STRINGS(unnamed_enum$397)
	{
		"clip",
		"clip and normalize",
		"scale to fit"
	};
	STRING_LIST(unnamed_enum$397, unnamed_enum$397_strings, _countof(unnamed_enum$397_strings));

	TAG_STRUCT(
		scenario_hs_source_reference_block_struct_definition,
		"scenario_hs_source_reference_block",
		"scenario_hs_source_reference_block_struct_definition",
		"s_hs_source_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "reference", &scenario_hs_source_file_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(scenario_hs_source_file_group_reference, SCENARIO_HS_SOURCE_FILE_TAG);

	TAG_STRUCT(
		scenario_interpolator_block_struct_definition,
		"scenario_interpolator_block",
		"scenario_interpolator_block_struct_definition",
		"s_scenario_interpolator",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_string_id, "accelerator name", nullptr, "interpolator" },
		{ _field_string_id, "multiplier name", nullptr, "interpolator" },
		{ _field_struct, "function", &scalar_function_struct_struct_definition, _field_id_SCFN },
		FIELD_SKIP("value", 2),
		FIELD_SKIP("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_kill_trigger_volumes_block_struct_definition,
		"scenario_kill_trigger_volumes_block",
		"scenario_kill_trigger_volumes_block_struct_definition",
		"s_scenario_kill_trigger_volume",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "trigger volume" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_level_data_block_struct_definition,
		"scenario_level_data_block",
		"scenario_level_data_block_struct_definition",
		"s_scenario_level_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "level_strings", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "campaign level data", &global_ui_campaign_level_block },
		{ _field_block, "multiplayer level data", &global_ui_multiplayer_level_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_light_fixture_palette_block_struct_definition,
		"scenario_light_fixture_palette_block",
		"scenario_light_fixture_palette_block_struct_definition",
		"s_scenario_object_palette_entry$12",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "name", &device_light_fixture_group_reference },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(device_light_fixture_group_reference, DEVICE_LIGHT_FIXTURE_TAG);

	VERSIONED_TAG_STRUCT(
		scenario_light_fixture_struct_definition,
		"scenario_light_fixture",
		"scenario_light_fixture_struct_definition",
		"s_scenario_light_fixture",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "device data", &scenario_device_struct_struct_definition, _field_id_sdvt },
		{ _field_struct, "light_fixture data", &scenario_light_fixture_struct_struct_definition, _field_id_slft },
		
		{ _struct_version_mode_equal, 1, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "device data", &scenario_device_struct_struct_definition, _field_id_sdvt },
		{ _field_struct, "light_fixture data", &scenario_light_fixture_struct_struct_definition, _field_id_slft },
		
		{ _struct_version_mode_equal, 0, 14 },
		{ _field_short_block_index, "type", _field_id_type },
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_word_flags, "not placed", &unnamed_enum$4 },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _field_id_point },
		{ _field_real_euler_angles_3d, "rotation", _field_id_orientation },
		FIELD_PAD("value", 4),
		{ _field_long_block_index, "environment object reference" },
		{ _field_struct, "device data", &old_scenario_device_struct_struct_definition, _field_id_sdst },
		{ _field_real_rgb_color, "color" },
		{ _field_real, "intensity" },
		{ _field_angle, "falloff angle", nullptr, "degrees" },
		{ _field_angle, "cutoff angle", nullptr, "degrees" },
		FIELD_PAD("value", 16),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_light_fixture_struct_struct_definition,
		"scenario_light_fixture_struct",
		"scenario_light_fixture_struct_struct_definition",
		"s_scenario_light_fixture_datum",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_rgb_color, "color" },
		{ _field_real, "intensity" },
		{ _field_angle, "falloff angle", nullptr, "degrees" },
		{ _field_angle, "cutoff angle", nullptr, "degrees" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_light_palette_block_struct_definition,
		"scenario_light_palette_block",
		"scenario_light_palette_block_struct_definition",
		"s_scenario_object_palette_entry$5",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "name", &light_group_reference },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(light_group_reference, LIGHT_TAG);

	VERSIONED_TAG_STRUCT(
		scenario_light_struct_definition,
		"scenario_light",
		"scenario_light_struct_definition",
		"s_scenario_light",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 10 },
		FIELD_EXPLANATION("controls", "some descriptive text will go here... eventually. Narrator: except, that was a lie"),
		FIELD_CUSTOM("value", _field_id_lflg),
		FIELD_CUSTOM("value", _field_id_allg),
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "device data", &scenario_device_struct_struct_definition, _field_id_sdvt },
		{ _field_struct, "light data", &scenario_light_struct_struct_definition, _field_id_slit },
		
		{ _struct_version_mode_equal, 1, 10 },
		FIELD_EXPLANATION("controls", "some descriptive text will go here... eventually. Narrator: except, that was a lie"),
		FIELD_CUSTOM("value", _field_id_lflg),
		FIELD_CUSTOM("value", _field_id_allg),
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "device data", &scenario_device_struct_struct_definition, _field_id_sdvt },
		{ _field_struct, "light data", &scenario_light_struct_struct_definition, _field_id_slit },
		
		{ _struct_version_mode_equal, 0, 22 },
		{ _field_short_block_index, "type", _field_id_type },
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_word_flags, "not placed", &unnamed_enum$4 },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _field_id_point },
		{ _field_real_euler_angles_3d, "rotation", _field_id_orientation },
		FIELD_PAD("value", 4),
		{ _field_long_block_index, "environment object reference" },
		{ _field_short_enum, "type", &unnamed_enum$18 },
		{ _field_word_flags, "flags", &unnamed_enum$19 },
		{ _field_short_enum, "lightmap type", &unnamed_enum$20 },
		{ _field_word_flags, "lightmap flags", &unnamed_enum$21 },
		{ _field_real, "lightmap half life" },
		FIELD_PAD("value", 120),
		{ _field_real_point_3d, "target point" },
		{ _field_real, "width", nullptr, "world units", FIELD_FLAG_READ_ONLY },
		{ _field_real, "height scale", nullptr, "world units", FIELD_FLAG_READ_ONLY },
		{ _field_angle, "field of view", nullptr, "degrees", FIELD_FLAG_READ_ONLY },
		FIELD_PAD("value", 4),
		{ _field_real, "falloff distance", nullptr, "world units", FIELD_FLAG_READ_ONLY },
		{ _field_real, "cutoff distance", nullptr, "world units (from far plane)", FIELD_FLAG_READ_ONLY },
		FIELD_PAD("value", 128),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$19)
	{
		"custom geometry",
		"unused",
		"cinematic_only"
	};
	STRING_LIST(unnamed_enum$19, unnamed_enum$19_strings, _countof(unnamed_enum$19_strings));

	STRINGS(unnamed_enum$20)
	{
		"use light tag setting",
		"dynamic only",
		"dynamic with lightmaps",
		"lightmaps only"
	};
	STRING_LIST(unnamed_enum$20, unnamed_enum$20_strings, _countof(unnamed_enum$20_strings));

	STRINGS(unnamed_enum$21)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$21, unnamed_enum$21_strings, _countof(unnamed_enum$21_strings));

	TAG_STRUCT(
		scenario_light_struct_struct_definition,
		"scenario_light_struct",
		"scenario_light_struct_struct_definition",
		"s_scenario_light_datum",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$18 },
		{ _field_word_flags, "flags", &unnamed_enum$19 },
		{ _field_short_enum, "lightmap type", &unnamed_enum$20 },
		{ _field_word_flags, "lightmap flags", &unnamed_enum$21 },
		{ _field_real, "lightmap half life" },
		{ _field_real, "lightmap light scale" },
		FIELD_USELESS_PAD("value", 116),
		{ _field_real_point_3d, "target point" },
		{ _field_real, "width", nullptr, "world units", FIELD_FLAG_READ_ONLY },
		{ _field_real, "height scale", nullptr, "world units", FIELD_FLAG_READ_ONLY },
		{ _field_angle, "field of view", nullptr, "degrees", FIELD_FLAG_READ_ONLY },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "falloff distance", nullptr, "world units", FIELD_FLAG_READ_ONLY },
		{ _field_real, "cutoff distance", nullptr, "world units (from far plane)", FIELD_FLAG_READ_ONLY },
		FIELD_USELESS_PAD("value", 128),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_lights_resource_block_struct_definition,
		"scenario_lights_resource_block",
		"scenario_lights_resource_block_struct_definition",
		"s_scenario_objects_resource_definition$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "names", &scenario_object_names_block },
		{ _field_block, "value", &dont_use_me_scenario_environment_object_block },
		{ _field_block, "structure references", &scenario_structure_bsp_reference_block },
		{ _field_block, "palette", &scenario_light_palette_block },
		{ _field_block, "objects", &scenario_light_block },
		{ _field_long_integer, "next object id salt" },
		{ _field_block, "editor folders", &g_scenario_editor_folder_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_machine_palette_block_struct_definition,
		"scenario_machine_palette_block",
		"scenario_machine_palette_block_struct_definition",
		"s_scenario_object_palette_entry$10",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "name", &device_machine_group_reference },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(device_machine_group_reference, DEVICE_MACHINE_TAG);

	VERSIONED_TAG_STRUCT(
		scenario_machine_struct_definition,
		"scenario_machine",
		"scenario_machine_struct_definition",
		"s_scenario_machine",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 3, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "device data", &scenario_device_struct_struct_definition, _field_id_sdvt },
		{ _field_struct, "machine data", &scenario_machine_struct_v3_struct_definition, _field_id_smht },
		
		{ _struct_version_mode_equal, 2, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "device data", &scenario_device_struct_struct_definition, _field_id_sdvt },
		{ _field_struct, "machine data", &scenario_machine_struct_v2_struct_definition, _field_id_smht },
		
		{ _struct_version_mode_equal, 1, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "device data", &scenario_device_struct_struct_definition, _field_id_sdvt },
		{ _field_struct, "machine data", &scenario_machine_struct_v2_struct_definition, _field_id_smht },
		
		{ _struct_version_mode_equal, 0, 11 },
		{ _field_short_block_index, "type", _field_id_type },
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_word_flags, "not placed", &unnamed_enum$4 },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _field_id_point },
		{ _field_real_euler_angles_3d, "rotation", _field_id_orientation },
		FIELD_PAD("value", 4),
		{ _field_long_block_index, "environment object reference" },
		{ _field_struct, "device data", &old_scenario_device_struct_struct_definition, _field_id_sdst },
		{ _field_long_flags, "flags", &unnamed_enum$185 },
		FIELD_PAD("value", 12),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$185)
	{
		"does not operate automatically",
		"one-sided",
		"never appears locked",
		"opened by melee attack",
		"one-sided for player",
		"does not close automatically"
	};
	STRING_LIST(unnamed_enum$185, unnamed_enum$185_strings, _countof(unnamed_enum$185_strings));

	TAG_STRUCT(
		scenario_machine_struct_v2_struct_definition,
		"scenario_machine_struct_v2",
		"scenario_machine_struct_v2_struct_definition",
		"s_scenario_machine_datum_v2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$185 },
		FIELD_PAD("value", 12),
		{ _field_short_integer, "pathfinding object reference" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_machine_struct_v3_struct_definition,
		"scenario_machine_struct_v3",
		"scenario_machine_struct_v3_struct_definition",
		"s_scenario_machine_datum",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$185 },
		{ _field_block, "pathfinding references", &pathfinding_object_index_list_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_netgame_equipment_block_struct_definition,
		"scenario_netgame_equipment_block",
		"scenario_netgame_equipment_block_struct_definition",
		"s_scenario_netgame_equipment",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$400 },
		{ _field_short_enum, "type 0", &unnamed_enum$76 },
		{ _field_short_enum, "type 1", &unnamed_enum$76 },
		{ _field_short_enum, "type 2", &unnamed_enum$76 },
		{ _field_short_enum, "type 3", &unnamed_enum$76 },
		FIELD_PAD("value", 2),
		{ _field_short_integer, "spawn time (in seconds, 0 = default)" },
		{ _field_short_integer, "respawn on empty time", nullptr, "seconds" },
		{ _field_short_enum, "respawn timer starts", &unnamed_enum$401 },
		{ _field_char_enum, "classification", &unnamed_enum$402 },
		FIELD_PAD("value", 3),
		FIELD_PAD("value", 40),
		{ _field_real_point_3d, "position" },
		{ _field_struct, "orientation", &scenario_netgame_equipment_orientation_struct_struct_definition, _field_id_ntor },
		{ _field_tag_reference, "item/vehicle collection", &item_collection_group_vehicle_collection_group_reference },
		FIELD_PAD("value", 48),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$400)
	{
		"levitate",
		"destroy existing on new spawn"
	};
	STRING_LIST(unnamed_enum$400, unnamed_enum$400_strings, _countof(unnamed_enum$400_strings));

	STRINGS(unnamed_enum$76)
	{
		"none",
		"ctf",
		"slayer",
		"oddball",
		"king of the hill",
		"race",
		"headhunter",
		"juggernaut",
		"territories",
		"stub",
		"ignored3",
		"ignored4",
		"all games",
		"all except ctf",
		"all except race & ctf"
	};
	STRING_LIST(unnamed_enum$76, unnamed_enum$76_strings, _countof(unnamed_enum$76_strings));

	STRINGS(unnamed_enum$401)
	{
		"on pick up",
		"on body depletion"
	};
	STRING_LIST(unnamed_enum$401, unnamed_enum$401_strings, _countof(unnamed_enum$401_strings));

	STRINGS(unnamed_enum$402)
	{
		"weapon",
		"primary light land",
		"secondary light land",
		"primary heavy land",
		"primary flying",
		"secondary heavy land",
		"primary turret",
		"secondary turret",
		"grenade",
		"powerup"
	};
	STRING_LIST(unnamed_enum$402, unnamed_enum$402_strings, _countof(unnamed_enum$402_strings));

	TAG_REFERENCE_GROUP(item_collection_group_vehicle_collection_group_reference)
	{
		ITEM_COLLECTION_TAG,
		VEHICLE_COLLECTION_TAG,
		INVALID_TAG
	};

	TAG_STRUCT(
		scenario_netgame_equipment_orientation_struct_struct_definition,
		"scenario_netgame_equipment_orientation_struct",
		"scenario_netgame_equipment_orientation_struct_struct_definition",
		"s_real_euler_angles3d",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_euler_angles_3d, "orientation" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		scenario_netpoint_struct_definition,
		"scenario_netpoint",
		"scenario_netpoint_struct_definition",
		"s_scenario_netpoint",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 9 },
		{ _field_real_point_3d, "position" },
		{ _field_angle, "facing", nullptr, "degrees" },
		FIELD_CUSTOM("value", _field_id_filx),
		{ _field_short_enum, "type", &unnamed_enum$398 },
		{ _field_short_enum, "team designator", &unnamed_enum$75 },
		{ _field_short_integer, "identifier" },
		{ _field_word_flags, "flags", &unnamed_enum$399 },
		{ _field_string_id, "value" },
		{ _field_string_id, "value" },
		
		{ _struct_version_mode_equal, 0, 10 },
		{ _field_real_point_3d, "position" },
		{ _field_angle, "facing", nullptr, "degrees" },
		FIELD_CUSTOM("value", _field_id_filx),
		{ _field_short_enum, "type", &unnamed_enum$398 },
		{ _field_short_enum, "team designator", &unnamed_enum$75 },
		{ _field_tag_reference, "weapon group", &item_collection_group_reference$2 },
		{ _field_string_id, "spawn object name" },
		{ _field_string_id, "spawn marker name" },
		{ _field_string_id, "optional flag name" },
		FIELD_PAD("value", 100),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$398)
	{
		"CTF flag spawn",
		"CTF flag return",
		"Assault bomb spawn",
		"Assault bomb return",
		"Oddball spawn",
		"unused",
		"Race checkpoint",
		"Teleporter (src)",
		"Teleporter (dest)",
		"Headhunter bin",
		"Territories flag",
		"King Hill 0",
		"King Hill 1",
		"King Hill 2",
		"King Hill 3",
		"King Hill 4",
		"King Hill 5",
		"King Hill 6",
		"King Hill 7"
	};
	STRING_LIST(unnamed_enum$398, unnamed_enum$398_strings, _countof(unnamed_enum$398_strings));

	STRINGS(unnamed_enum$75)
	{
		"Alpha",
		"Bravo",
		"Charlie",
		"Delta",
		"Echo",
		"Foxtrot",
		"Golf",
		"Hotel",
		"NEUTRAL"
	};
	STRING_LIST(unnamed_enum$75, unnamed_enum$75_strings, _countof(unnamed_enum$75_strings));

	STRINGS(unnamed_enum$399)
	{
		"multi flag/bomb",
		"single flag/bomb",
		"neutral flag/bomb"
	};
	STRING_LIST(unnamed_enum$399, unnamed_enum$399_strings, _countof(unnamed_enum$399_strings));

	TAG_REFERENCE(item_collection_group_reference$2, ITEM_COLLECTION_TAG);

	TAG_STRUCT(
		scenario_object_id_struct_struct_definition,
		"scenario_object_id_struct",
		"scenario_object_id_struct_struct_definition",
		"s_object_identifier",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "unique id", _field_id_object_id },
		{ _field_short_block_index, "origin bsp index", _field_id_object_id },
		{ _field_char_enum, "type", &unnamed_enum$6, _field_id_object_id },
		{ _field_char_enum, "source", &unnamed_enum$7, _field_id_object_id },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$6)
	{
		"biped",
		"vehicle",
		"weapon",
		"equipment",
		"garbage",
		"projectile",
		"scenery",
		"machine",
		"control",
		"light_fixture",
		"sound_scenery",
		"crate",
		"creature"
	};
	STRING_LIST(unnamed_enum$6, unnamed_enum$6_strings, _countof(unnamed_enum$6_strings));

	STRINGS(unnamed_enum$7)
	{
		"structure",
		"editor",
		"dynamic",
		"legacy"
	};
	STRING_LIST(unnamed_enum$7, unnamed_enum$7_strings, _countof(unnamed_enum$7_strings));

	TAG_STRUCT(
		scenario_object_names_block_struct_definition,
		"scenario_object_names_block",
		"scenario_object_names_block_struct_definition",
		"s_scenario_object_name",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_short_block_index, "value" },
		{ _field_short_block_index_custom_search, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_object_permutation_struct_struct_definition,
		"scenario_object_permutation_struct",
		"scenario_object_permutation_struct_struct_definition",
		"s_scenario_object_permutation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "variant name", _field_id_object_variant },
		{ _field_long_flags, "active change colors", &unnamed_enum$9 },
		{ _field_rgb_color, "primary color" },
		{ _field_rgb_color, "secondary color" },
		{ _field_rgb_color, "tertiary color" },
		{ _field_rgb_color, "quaternary color" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$9)
	{
		"primary",
		"secondary",
		"tertiary",
		"quaternary"
	};
	STRING_LIST(unnamed_enum$9, unnamed_enum$9_strings, _countof(unnamed_enum$9_strings));

	TAG_STRUCT(
		scenario_planar_fog_palette_struct_definition,
		"scenario_planar_fog_palette",
		"scenario_planar_fog_palette_struct_definition",
		"s_scenario_planar_fog_palette_entry",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_tag_reference, "planar fog", &planar_fog_group_reference },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_REFERENCE(planar_fog_group_reference, PLANAR_FOG_TAG);

	TAG_STRUCT(
		scenario_players_block_struct_definition,
		"scenario_players_block",
		"scenario_players_block_struct_definition",
		"s_scenario_player",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("value", _field_id_cflt),
		{ _field_real_point_3d, "position" },
		{ _field_angle, "facing", nullptr, "degrees" },
		{ _field_short_enum, "team designator", &unnamed_enum$75 },
		{ _field_short_block_index, "bsp index" },
		{ _field_short_enum, "type 0", &unnamed_enum$76 },
		{ _field_short_enum, "type 1", &unnamed_enum$76 },
		{ _field_short_enum, "type 2", &unnamed_enum$76 },
		{ _field_short_enum, "type 3", &unnamed_enum$76 },
		{ _field_short_enum, "spawn type 0", &unnamed_enum$77 },
		{ _field_short_enum, "spawn type 1", &unnamed_enum$77 },
		{ _field_short_enum, "spawn type 2", &unnamed_enum$77 },
		{ _field_short_enum, "spawn type 3", &unnamed_enum$77 },
		{ _field_string_id, "value" },
		{ _field_string_id, "value" },
		{ _field_short_enum, "campaign player type", &unnamed_enum$78 },
		FIELD_PAD("value", 6),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$77)
	{
		"both",
		"initial spawn only",
		"respawn only"
	};
	STRING_LIST(unnamed_enum$77, unnamed_enum$77_strings, _countof(unnamed_enum$77_strings));

	STRINGS(unnamed_enum$78)
	{
		"masterchief",
		"dervish",
		"chief multiplayer",
		"elite multiplayer"
	};
	STRING_LIST(unnamed_enum$78, unnamed_enum$78_strings, _countof(unnamed_enum$78_strings));

	TAG_STRUCT(
		scenario_profiles_block_struct_definition,
		"scenario_profiles_block",
		"scenario_profiles_block_struct_definition",
		"s_scenario_starting_profile",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_real_fraction, "starting health damage", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "starting shield damage", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "primary weapon", &weapon_group_reference$6 },
		{ _field_short_integer, "rounds loaded" },
		{ _field_short_integer, "rounds total" },
		{ _field_tag_reference, "secondary weapon", &weapon_group_reference$6 },
		{ _field_short_integer, "rounds loaded" },
		{ _field_short_integer, "rounds total" },
		{ _field_char_integer, "starting fragmentation grenade count" },
		{ _field_char_integer, "starting plasma grenade count" },
		{ _field_char_integer, "starting <unknown2> grenade count" },
		{ _field_char_integer, "starting <unknown3> grenade count" },
		FIELD_USELESS_PAD("value", 20),
		{ _field_terminator }
	};

	TAG_REFERENCE(weapon_group_reference$6, WEAPON_TAG);

	TAG_STRUCT(
		scenario_resource_reference_block_struct_definition,
		"scenario_resource_reference_block",
		"scenario_resource_reference_block_struct_definition",
		"s_scenario_resource_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "reference", &_reference$6 },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference$6, INVALID_TAG);

	TAG_STRUCT(
		scenario_resources_block_struct_definition,
		"scenario_resources_block",
		"scenario_resources_block_struct_definition",
		"s_scenario_resources_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "references", &scenario_resource_reference_block },
		{ _field_block, "script source", &scenario_hs_source_reference_block },
		{ _field_block, "ai resources", &scenario_ai_resource_reference_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_scenery_datum_struct_v2_struct_definition,
		"scenario_scenery_datum_struct_v2",
		"scenario_scenery_datum_struct_v2_struct_definition",
		"s_scenario_scenery_datum_v3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "Pathfinding flags", &unnamed_enum$13 },
		{ _field_short_integer, "Pathfinding object index" },
		{ _field_long_block_index_custom_search, "Runtime scenery object" },
		{ _field_short_enum, "Pathfinding policy", &unnamed_enum$10 },
		{ _field_short_enum, "Lightmapping policy", &unnamed_enum$14 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$13)
	{
		"DEPRECATED",
		"DEPRECATED"
	};
	STRING_LIST(unnamed_enum$13, unnamed_enum$13_strings, _countof(unnamed_enum$13_strings));

	STRINGS(unnamed_enum$10)
	{
		"Tag Default",
		"Pathfinding DYNAMIC",
		"Pathfinding CUT-OUT",
		"Pathfinding STATIC",
		"Pathfinding NONE"
	};
	STRING_LIST(unnamed_enum$10, unnamed_enum$10_strings, _countof(unnamed_enum$10_strings));

	STRINGS(unnamed_enum$14)
	{
		"dynamic",
		"per-object (not implemented)",
		"per-vertex",
		"per-pixel"
	};
	STRING_LIST(unnamed_enum$14, unnamed_enum$14_strings, _countof(unnamed_enum$14_strings));

	TAG_STRUCT(
		scenario_scenery_datum_struct_v3_struct_definition,
		"scenario_scenery_datum_struct_v3",
		"scenario_scenery_datum_struct_v3_struct_definition",
		"s_scenario_scenery_datum_v3$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "value", &unnamed_enum$13 },
		{ _field_short_integer, "Pathfinding object index" },
		FIELD_PAD("value", 4),
		FIELD_CUSTOM("value", _field_id_pathfinding),
		{ _field_short_enum, "Pathfinding policy", &unnamed_enum$10 },
		{ _field_short_enum, "Lightmapping policy", &unnamed_enum$11 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$11)
	{
		"Tag Default",
		"Dynamic",
		"Per-Vertex"
	};
	STRING_LIST(unnamed_enum$11, unnamed_enum$11_strings, _countof(unnamed_enum$11_strings));

	TAG_STRUCT(
		scenario_scenery_datum_struct_v4_struct_definition,
		"scenario_scenery_datum_struct_v4",
		"scenario_scenery_datum_struct_v4_struct_definition",
		"s_scenario_scenery_datum",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("value", _field_id_pathfinding),
		{ _field_short_enum, "Pathfinding policy", &unnamed_enum$10 },
		{ _field_short_enum, "Lightmapping policy", &unnamed_enum$11 },
		{ _field_block, "pathfinding references", &pathfinding_object_index_list_block },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "valid multiplayer games", &unnamed_enum$12 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$12)
	{
		"ctf",
		"slayer",
		"oddball",
		"king",
		"juggernaut",
		"territories",
		"assault"
	};
	STRING_LIST(unnamed_enum$12, unnamed_enum$12_strings, _countof(unnamed_enum$12_strings));

	TAG_STRUCT(
		scenario_scenery_palette_block_struct_definition,
		"scenario_scenery_palette_block",
		"scenario_scenery_palette_block_struct_definition",
		"s_scenario_object_palette_entry",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "name", &scenery_group_reference },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(scenery_group_reference, SCENERY_TAG);

	TAG_STRUCT(
		scenario_scenery_resource_block_struct_definition,
		"scenario_scenery_resource_block",
		"scenario_scenery_resource_block_struct_definition",
		"s_scenario_scenery_resource_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "names", &scenario_object_names_block },
		{ _field_block, "value", &dont_use_me_scenario_environment_object_block },
		{ _field_block, "structure references", &scenario_structure_bsp_reference_block },
		{ _field_block, "palette", &scenario_scenery_palette_block },
		{ _field_block, "objects", &scenario_scenery_block },
		{ _field_long_integer, "next scenery object id salt" },
		{ _field_block, "palette", &scenario_crate_palette_block },
		{ _field_block, "objects", &scenario_crate_block },
		{ _field_long_integer, "next block object id salt" },
		{ _field_block, "editor folders", &g_scenario_editor_folder_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		scenario_scenery_struct_definition,
		"scenario_scenery",
		"scenario_scenery_struct_definition",
		"s_scenario_scenery",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 4, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct_struct_definition, _field_id_sper },
		{ _field_struct, "scenery data", &scenario_scenery_datum_struct_v4_struct_definition, _field_id_sct3 },
		
		{ _struct_version_mode_equal, 3, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct_struct_definition, _field_id_sper },
		{ _field_struct, "scenery data", &scenario_scenery_datum_struct_v3_struct_definition, _field_id_sct2 },
		
		{ _struct_version_mode_equal, 2, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct_struct_definition, _field_id_sper },
		{ _field_struct, "scenery data", &scenario_scenery_datum_struct_v3_struct_definition, _field_id_sct2 },
		
		{ _struct_version_mode_equal, 1, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct_struct_definition, _field_id_sper },
		{ _field_struct, "scenery data", &scenario_scenery_datum_struct_v2_struct_definition, _field_id_ssct },
		
		{ _struct_version_mode_equal, 0, 15 },
		{ _field_short_block_index, "type", _field_id_type },
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_word_flags, "not placed", &unnamed_enum$4 },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _field_id_point },
		{ _field_real_euler_angles_3d, "rotation", _field_id_orientation },
		FIELD_PAD("value", 4),
		{ _field_long_block_index, "environment object reference" },
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 16),
		{ _field_word_flags, "Pathfinding flags", &unnamed_enum$13 },
		{ _field_short_integer, "Pathfinding object index" },
		{ _field_long_integer, "Runtime scenery object" },
		{ _field_short_enum, "Pathfinding policy", &unnamed_enum$10 },
		{ _field_short_enum, "Lightmapping policy", &unnamed_enum$14 },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_screen_effect_reference_block_struct_definition,
		"scenario_screen_effect_reference_block",
		"scenario_screen_effect_reference_block_struct_definition",
		"s_scenario_screen_effect_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 16),
		{ _field_tag_reference, "screen effect", &screen_effect_group_reference },
		{ _field_string_id, "primary input", nullptr, "interpolator" },
		{ _field_string_id, "secondary input", nullptr, "interpolator" },
		FIELD_SKIP("value", 2),
		FIELD_SKIP("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_simulation_definition_table_block_struct_definition,
		"scenario_simulation_definition_table_block",
		"scenario_simulation_definition_table_block_struct_definition",
		"s_scenario_simulation_definition_table_element",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_SKIP("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_sky_reference_block_struct_definition,
		"scenario_sky_reference_block",
		"scenario_sky_reference_block_struct_definition",
		"s_tag_reference$13",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "sky", &sky_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(sky_group_reference, SKY_TAG);

	TAG_STRUCT(
		scenario_sound_scenery_palette_block_struct_definition,
		"scenario_sound_scenery_palette_block",
		"scenario_sound_scenery_palette_block_struct_definition",
		"s_scenario_object_palette_entry$9",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "name", &sound_scenery_group_reference },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(sound_scenery_group_reference, SOUND_SCENERY_TAG);

	TAG_STRUCT(
		scenario_sound_scenery_resource_block_struct_definition,
		"scenario_sound_scenery_resource_block",
		"scenario_sound_scenery_resource_block_struct_definition",
		"s_scenario_objects_resource_definition$7",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "names", &scenario_object_names_block },
		{ _field_block, "value", &dont_use_me_scenario_environment_object_block },
		{ _field_block, "structure references", &scenario_structure_bsp_reference_block },
		{ _field_block, "palette", &scenario_sound_scenery_palette_block },
		{ _field_block, "objects", &scenario_sound_scenery_block },
		{ _field_long_integer, "next object id salt" },
		{ _field_block, "editor folders", &g_scenario_editor_folder_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		scenario_sound_scenery_struct_definition,
		"scenario_sound_scenery",
		"scenario_sound_scenery_struct_definition",
		"s_scenario_sound_scenery",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 6 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "sound_scenery", &sound_scenery_datum_struct_struct_definition, _field_id__sc_ },
		
		{ _struct_version_mode_equal, 1, 6 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "sound_scenery", &sound_scenery_datum_struct_struct_definition, _field_id__sc_ },
		
		{ _struct_version_mode_equal, 0, 8 },
		{ _field_short_block_index, "type", _field_id_type },
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_word_flags, "not placed", &unnamed_enum$4 },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _field_id_point },
		{ _field_real_euler_angles_3d, "rotation", _field_id_orientation },
		FIELD_PAD("value", 4),
		{ _field_long_block_index, "environment object reference" },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_spawn_data_block_struct_definition,
		"scenario_spawn_data_block",
		"scenario_spawn_data_block_struct_definition",
		"s_scenario_spawn_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("dynamic spawn", "non-zero values here overload what appears in multiplayer_globals"),
		{ _field_real, "dynamic spawn lower height" },
		{ _field_real, "dynamic spawn upper height" },
		{ _field_real, "game object reset height" },
		FIELD_PAD("value", 60),
		{ _field_block, "dynamic spawn overloads", &dynamic_spawn_zone_overload_block },
		{ _field_block, "static respawn zones", &static_spawn_zone_block },
		{ _field_block, "static initial spawn zones", &static_spawn_zone_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_spherical_harmonic_lighting_point_struct_definition,
		"scenario_spherical_harmonic_lighting_point",
		"scenario_spherical_harmonic_lighting_point_struct_definition",
		"s_real_point3d$5",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_starting_equipment_block_struct_definition,
		"scenario_starting_equipment_block",
		"scenario_starting_equipment_block_struct_definition",
		"s_scenario_starting_equipment",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$403 },
		{ _field_short_enum, "type 0", &unnamed_enum$76 },
		{ _field_short_enum, "type 1", &unnamed_enum$76 },
		{ _field_short_enum, "type 2", &unnamed_enum$76 },
		{ _field_short_enum, "type 3", &unnamed_enum$76 },
		FIELD_PAD("value", 48),
		{ _field_tag_reference, "item collection 1", &item_collection_group_reference$2 },
		{ _field_tag_reference, "item collection 2", &item_collection_group_reference$2 },
		{ _field_tag_reference, "item collection 3", &item_collection_group_reference$2 },
		{ _field_tag_reference, "item collection 4", &item_collection_group_reference$2 },
		{ _field_tag_reference, "item collection 5", &item_collection_group_reference$2 },
		{ _field_tag_reference, "item collection 6", &item_collection_group_reference$2 },
		FIELD_PAD("value", 48),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$403)
	{
		"no grenades",
		"plasma grenades"
	};
	STRING_LIST(unnamed_enum$403, unnamed_enum$403_strings, _countof(unnamed_enum$403_strings));

	VERSIONED_TAG_STRUCT(
		scenario_struct_definition,
		"scenario",
		"scenario_struct_definition",
		"s_scenario",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 113 },
		{ _field_tag_reference, "DON'T USE", &scenario_structure_bsp_group_reference },
		{ _field_block, "skies", &scenario_sky_reference_block },
		{ _field_short_enum, "type", &unnamed_enum$393 },
		{ _field_word_flags, "flags", &unnamed_enum$394 },
		{ _field_block, "@child scenarios", &scenario_child_scenario_block },
		{ _field_angle, "local north" },
		{ _field_block, "predicted resources", &predicted_resource_block },
		{ _field_block, "functions", &scenario_function_block },
		{ _field_data, "editor scenario data", &editor_scenario_data_definition },
		{ _field_block, "comments", &editor_comment_block },
		{ _field_block, "environment objects", &dont_use_me_scenario_environment_object_block },
		{ _field_block, "object names", &scenario_object_names_block, _field_id_sort },
		{ _field_block, "scenery", &scenario_scenery_block },
		{ _field_block, "scenery palette", &scenario_scenery_palette_block, _field_id_sort },
		{ _field_block, "bipeds", &scenario_biped_block },
		{ _field_block, "biped palette", &scenario_biped_palette_block, _field_id_sort },
		{ _field_block, "vehicles", &scenario_vehicle_block },
		{ _field_block, "vehicle palette", &scenario_vehicle_palette_block, _field_id_sort },
		{ _field_block, "equipment", &scenario_equipment_block },
		{ _field_block, "equipment palette", &scenario_equipment_palette_block, _field_id_sort },
		{ _field_block, "weapons", &scenario_weapon_block },
		{ _field_block, "weapon palette", &scenario_weapon_palette_block, _field_id_sort },
		{ _field_block, "device groups", &device_group_block$2, _field_id_sort },
		{ _field_block, "machines", &scenario_machine_block },
		{ _field_block, "machine palette", &scenario_machine_palette_block, _field_id_sort },
		{ _field_block, "controls", &scenario_control_block },
		{ _field_block, "control palette", &scenario_control_palette_block, _field_id_sort },
		{ _field_block, "light fixtures", &scenario_light_fixture_block },
		{ _field_block, "light fixtures palette", &scenario_light_fixture_palette_block, _field_id_sort },
		{ _field_block, "sound scenery", &scenario_sound_scenery_block },
		{ _field_block, "sound scenery palette", &scenario_sound_scenery_palette_block, _field_id_sort },
		{ _field_block, "light volumes", &scenario_light_block },
		{ _field_block, "light volumes palette", &scenario_light_palette_block, _field_id_sort },
		{ _field_block, "player starting profile", &scenario_profiles_block },
		{ _field_block, "player starting locations", &scenario_players_block },
		{ _field_block, "trigger volumes", &scenario_trigger_volume_block },
		{ _field_block, "recorded animations", &recorded_animation_block },
		{ _field_block, "netgame flags", &scenario_netpoints_block },
		{ _field_block, "netgame equipment", &scenario_netgame_equipment_block },
		{ _field_block, "starting equipment", &scenario_starting_equipment_block },
		{ _field_block, "bsp switch trigger volumes", &scenario_bsp_switch_trigger_volume_block },
		{ _field_block, "decals", &scenario_decals_block },
		{ _field_block, "decal palette", &scenario_decal_palette_block, _field_id_sort },
		{ _field_block, "detail object collection palette", &scenario_detail_object_collection_palette_block },
		{ _field_block, "style pallette", &style_palette_block, _field_id_sort },
		{ _field_block, "squad groups", &squad_groups_block },
		{ _field_block, "squads", &squads_block },
		{ _field_block, "zones", &zone_block },
		{ _field_block, "mission scenes", &ai_scene_block },
		{ _field_block, "character palette", &character_palette_block, _field_id_sort },
		{ _field_block, "ai pathfinding data", &pathfinding_data_block },
		{ _field_block, "ai animation references", &ai_animation_reference_block },
		{ _field_block, "ai script references", &ai_script_reference_block },
		{ _field_block, "ai recording references", &ai_recording_reference_block },
		{ _field_block, "ai conversations", &ai_conversation_block },
		{ _field_data, "script syntax data", &hs_old_syntax_data_definition },
		{ _field_data, "script string data", &hs_string_data_definition },
		{ _field_block, "scripts", &hs_scripts_block },
		{ _field_block, "globals", &hs_globals_block },
		{ _field_block, "references", &hs_references_block },
		{ _field_block, "source files", &hs_source_files_group_block },
		{ _field_block, "scripting data", &cs_script_data_block },
		{ _field_block, "cutscene flags", &scenario_cutscene_flag_block },
		{ _field_block, "cutscene camera points", &scenario_cutscene_camera_point_block },
		{ _field_block, "cutscene titles", &scenario_cutscene_title_block },
		{ _field_tag_reference, "custom object names", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "chapter title text", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "hud messages", &hud_message_text_group_reference$2 },
		{ _field_block, "structure bsps", &scenario_structure_bsp_reference_block },
		{ _field_block, "scenario resources", &scenario_resources_block },
		{ _field_block, "OLD structure physics", &old_unused_strucure_physics_block },
		{ _field_block, "hs unit seats", &hs_unit_seat_block },
		{ _field_block, "scenario kill triggers", &scenario_kill_trigger_volumes_block },
		{ _field_block, "hs syntax datums", &syntax_datum_block },
		{ _field_block, "Orders", &orders_block },
		{ _field_block, "Triggers", &triggers_block },
		{ _field_block, "background sound palette", &structure_bsp_background_sound_palette_block, _field_id_sort },
		{ _field_block, "sound environment palette", &structure_bsp_sound_environment_palette_block, _field_id_sort },
		{ _field_block, "weather palette", &structure_bsp_weather_palette_block, _field_id_sort },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "scenario cluster data", &scenario_cluster_data_block },
		{ _field_array, "object_salts", &unnamed_array$48 },
		{ _field_block, "spawn data", &scenario_spawn_data_block },
		{ _field_tag_reference, "sound effect collection", &sound_effect_collection_group_reference },
		{ _field_block, "crates", &scenario_crate_block },
		{ _field_block, "crate palette", &scenario_crate_palette_block, _field_id_sort },
		FIELD_EXPLANATION("Global lighting override", nullptr),
		{ _field_tag_reference, "global lighting", &chocolate_mountain_group_reference },
		FIELD_EXPLANATION("WARNING", "Editing fog palette data will not behave as expected with split scenarios"),
		{ _field_block, "atmospheric fog palette", &scenario_atmospheric_fog_palette_block, _field_id_sort },
		{ _field_block, "planar fog palette", &scenario_planar_fog_palette_block },
		{ _field_block, "flocks", &flock_definition_block },
		{ _field_tag_reference, "subtitles", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "decorators", &decorator_placement_definition_block },
		{ _field_block, "creatures", &scenario_creature_block },
		{ _field_block, "creature palette", &scenario_creature_palette_block, _field_id_sort },
		{ _field_block, "decorator palette", &scenario_decorator_set_palette_entry_block },
		{ _field_block, "bsp transition volumes", &scenario_bsp_switch_transition_volume_block },
		{ _field_block, "structure bsp lighting", &scenario_structure_bsp_spherical_harmonic_lighting_block },
		{ _field_block, "editor folders", &g_scenario_editor_folder_block },
		{ _field_block, "level data", &scenario_level_data_block },
		{ _field_tag_reference, "game engine strings", &multilingual_unicode_string_list_group_reference },
		FIELD_PAD("value", 8),
		{ _field_block, "mission dialogue", &ai_scenario_mission_dialogue_block },
		{ _field_tag_reference, "objectives", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "interpolators", &scenario_interpolator_block },
		{ _field_block, "shared references", &hs_references_block },
		{ _field_block, "screen effect references", &scenario_screen_effect_reference_block },
		{ _field_block, "simulation definition table", &scenario_simulation_definition_table_block },
		
		{ _struct_version_mode_equal, 1, 113 },
		{ _field_tag_reference, "DON'T USE", &scenario_structure_bsp_group_reference },
		{ _field_block, "skies", &scenario_sky_reference_block },
		{ _field_short_enum, "type", &unnamed_enum$393 },
		{ _field_word_flags, "flags", &unnamed_enum$394 },
		{ _field_block, "@child scenarios", &scenario_child_scenario_block },
		{ _field_angle, "local north" },
		{ _field_block, "predicted resources", &predicted_resource_block },
		{ _field_block, "functions", &scenario_function_block },
		{ _field_data, "editor scenario data", &editor_scenario_data_definition },
		{ _field_block, "comments", &editor_comment_block },
		{ _field_block, "environment objects", &dont_use_me_scenario_environment_object_block },
		{ _field_block, "object names", &scenario_object_names_block, _field_id_sort },
		{ _field_block, "scenery", &scenario_scenery_block },
		{ _field_block, "scenery palette", &scenario_scenery_palette_block, _field_id_sort },
		{ _field_block, "bipeds", &scenario_biped_block },
		{ _field_block, "biped palette", &scenario_biped_palette_block, _field_id_sort },
		{ _field_block, "vehicles", &scenario_vehicle_block },
		{ _field_block, "vehicle palette", &scenario_vehicle_palette_block, _field_id_sort },
		{ _field_block, "equipment", &scenario_equipment_block },
		{ _field_block, "equipment palette", &scenario_equipment_palette_block, _field_id_sort },
		{ _field_block, "weapons", &scenario_weapon_block },
		{ _field_block, "weapon palette", &scenario_weapon_palette_block, _field_id_sort },
		{ _field_block, "device groups", &device_group_block$2, _field_id_sort },
		{ _field_block, "machines", &scenario_machine_block },
		{ _field_block, "machine palette", &scenario_machine_palette_block, _field_id_sort },
		{ _field_block, "controls", &scenario_control_block },
		{ _field_block, "control palette", &scenario_control_palette_block, _field_id_sort },
		{ _field_block, "light fixtures", &scenario_light_fixture_block },
		{ _field_block, "light fixtures palette", &scenario_light_fixture_palette_block, _field_id_sort },
		{ _field_block, "sound scenery", &scenario_sound_scenery_block },
		{ _field_block, "sound scenery palette", &scenario_sound_scenery_palette_block, _field_id_sort },
		{ _field_block, "light volumes", &scenario_light_block },
		{ _field_block, "light volumes palette", &scenario_light_palette_block, _field_id_sort },
		{ _field_block, "player starting profile", &scenario_profiles_block },
		{ _field_block, "player starting locations", &scenario_players_block },
		{ _field_block, "trigger volumes", &scenario_trigger_volume_block },
		{ _field_block, "recorded animations", &recorded_animation_block },
		{ _field_block, "netgame flags", &scenario_netpoints_block },
		{ _field_block, "netgame equipment", &scenario_netgame_equipment_block },
		{ _field_block, "starting equipment", &scenario_starting_equipment_block },
		{ _field_block, "bsp switch trigger volumes", &scenario_bsp_switch_trigger_volume_block },
		{ _field_block, "decals", &scenario_decals_block },
		{ _field_block, "decal palette", &scenario_decal_palette_block, _field_id_sort },
		{ _field_block, "detail object collection palette", &scenario_detail_object_collection_palette_block },
		{ _field_block, "style pallette", &style_palette_block, _field_id_sort },
		{ _field_block, "squad groups", &squad_groups_block },
		{ _field_block, "squads", &squads_block },
		{ _field_block, "zones", &zone_block },
		{ _field_block, "mission scenes", &ai_scene_block },
		{ _field_block, "character palette", &character_palette_block, _field_id_sort },
		{ _field_block, "ai pathfinding data", &pathfinding_data_block },
		{ _field_block, "ai animation references", &ai_animation_reference_block },
		{ _field_block, "ai script references", &ai_script_reference_block },
		{ _field_block, "ai recording references", &ai_recording_reference_block },
		{ _field_block, "ai conversations", &ai_conversation_block },
		{ _field_data, "script syntax data", &hs_old_syntax_data_definition },
		{ _field_data, "script string data", &hs_string_data_definition },
		{ _field_block, "scripts", &hs_scripts_block },
		{ _field_block, "globals", &hs_globals_block },
		{ _field_block, "references", &hs_references_block },
		{ _field_block, "source files", &hs_source_files_group_block },
		{ _field_block, "scripting data", &cs_script_data_block },
		{ _field_block, "cutscene flags", &scenario_cutscene_flag_block },
		{ _field_block, "cutscene camera points", &scenario_cutscene_camera_point_block },
		{ _field_block, "cutscene titles", &scenario_cutscene_title_block },
		{ _field_tag_reference, "custom object names", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "chapter title text", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "hud messages", &hud_message_text_group_reference$2 },
		{ _field_block, "structure bsps", &scenario_structure_bsp_reference_block },
		{ _field_block, "scenario resources", &scenario_resources_block },
		{ _field_block, "OLD structure physics", &old_unused_strucure_physics_block },
		{ _field_block, "hs unit seats", &hs_unit_seat_block },
		{ _field_block, "scenario kill triggers", &scenario_kill_trigger_volumes_block },
		{ _field_block, "hs syntax datums", &syntax_datum_block },
		{ _field_block, "Orders", &orders_block },
		{ _field_block, "Triggers", &triggers_block },
		{ _field_block, "background sound palette", &structure_bsp_background_sound_palette_block, _field_id_sort },
		{ _field_block, "sound environment palette", &structure_bsp_sound_environment_palette_block, _field_id_sort },
		{ _field_block, "weather palette", &structure_bsp_weather_palette_block, _field_id_sort },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "value", &g_null_block },
		{ _field_block, "scenario cluster data", &scenario_cluster_data_block },
		{ _field_array, "object_salts", &unnamed_array$48 },
		{ _field_block, "spawn data", &scenario_spawn_data_block },
		{ _field_tag_reference, "sound effect collection", &sound_effect_collection_group_reference },
		{ _field_block, "crates", &scenario_crate_block },
		{ _field_block, "crate palette", &scenario_crate_palette_block, _field_id_sort },
		FIELD_EXPLANATION("Global lighting override", nullptr),
		{ _field_tag_reference, "global lighting", &chocolate_mountain_group_reference },
		FIELD_EXPLANATION("WARNING", "Editing fog palette data will not behave as expected with split scenarios"),
		{ _field_block, "atmospheric fog palette", &scenario_atmospheric_fog_palette_block, _field_id_sort },
		{ _field_block, "planar fog palette", &scenario_planar_fog_palette_block },
		{ _field_block, "flocks", &flock_definition_block },
		{ _field_tag_reference, "subtitles", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "decorators", &decorator_placement_definition_block },
		{ _field_block, "creatures", &scenario_creature_block },
		{ _field_block, "creature palette", &scenario_creature_palette_block, _field_id_sort },
		{ _field_block, "decorator palette", &scenario_decorator_set_palette_entry_block },
		{ _field_block, "bsp transition volumes", &scenario_bsp_switch_transition_volume_block },
		{ _field_block, "structure bsp lighting", &scenario_structure_bsp_spherical_harmonic_lighting_block },
		{ _field_block, "editor folders", &g_scenario_editor_folder_block },
		{ _field_block, "level data", &scenario_level_data_block },
		{ _field_tag_reference, "game engine strings", &multilingual_unicode_string_list_group_reference },
		FIELD_PAD("value", 8),
		{ _field_block, "mission dialogue", &ai_scenario_mission_dialogue_block },
		{ _field_tag_reference, "objectives", &multilingual_unicode_string_list_group_reference },
		{ _field_block, "interpolators", &scenario_interpolator_block },
		{ _field_block, "shared references", &hs_references_block },
		{ _field_block, "screen effect references", &scenario_screen_effect_reference_block },
		{ _field_block, "simulation definition table", &scenario_simulation_definition_table_block },
		
		{ _struct_version_mode_equal, 0, 78 },
		{ _field_tag_reference, "DON'T USE", &scenario_structure_bsp_group_reference },
		{ _field_tag_reference, "WON'T USE", &scenario_structure_bsp_group_reference },
		{ _field_tag_reference, "CAN'T USE", "set me!! me!!!  i do something cool!!!  you'll be happy forever if there this tag reference is filled in!  don't believe the lies!!! LIESSSS!!!!!!!!  YESS, MY PRECIOUSSSSS, LIESSSS...", &sky_group_reference },
		{ _field_block, "skies", &scenario_sky_reference_block },
		{ _field_short_enum, "type", &unnamed_enum$393 },
		{ _field_word_flags, "flags", &unnamed_enum$394 },
		{ _field_block, "@child scenarios", &scenario_child_scenario_block },
		{ _field_angle, "local north" },
		FIELD_PAD("value", 20),
		FIELD_PAD("value", 136),
		{ _field_block, "predicted resources", &predicted_resource_block },
		{ _field_block, "functions", &scenario_function_block },
		{ _field_data, "editor scenario data", &editor_scenario_data_definition },
		{ _field_block, "comments", &editor_comment_block },
		{ _field_block, "value", &dont_use_me_scenario_environment_object_block },
		FIELD_PAD("value", 212),
		{ _field_block, "object names", &scenario_object_names_block },
		{ _field_block, "scenery", &scenario_scenery_block },
		{ _field_block, "scenery palette", &scenario_scenery_palette_block },
		{ _field_block, "bipeds", &scenario_biped_block },
		{ _field_block, "biped palette", &scenario_biped_palette_block },
		{ _field_block, "vehicles", &scenario_vehicle_block },
		{ _field_block, "vehicle palette", &scenario_vehicle_palette_block },
		{ _field_block, "equipment", &scenario_equipment_block },
		{ _field_block, "equipment palette", &scenario_equipment_palette_block },
		{ _field_block, "weapons", &scenario_weapon_block },
		{ _field_block, "weapon palette", &scenario_weapon_palette_block },
		{ _field_block, "device groups", &device_group_block$2 },
		{ _field_block, "machines", &scenario_machine_block },
		{ _field_block, "machine palette", &scenario_machine_palette_block },
		{ _field_block, "controls", &scenario_control_block },
		{ _field_block, "control palette", &scenario_control_palette_block },
		{ _field_block, "light fixtures", &scenario_light_fixture_block },
		{ _field_block, "light fixtures palette", &scenario_light_fixture_palette_block },
		{ _field_block, "sound scenery", &scenario_sound_scenery_block },
		{ _field_block, "sound scenery palette", &scenario_sound_scenery_palette_block },
		{ _field_block, "light volumes", &scenario_light_block },
		{ _field_block, "light volumes palette", &scenario_light_palette_block },
		FIELD_PAD("value", 60),
		{ _field_block, "player starting profile", &scenario_profiles_block },
		{ _field_block, "player starting locations", &scenario_players_block },
		{ _field_block, "trigger volumes", &scenario_trigger_volume_block },
		{ _field_block, "recorded animations", &recorded_animation_block },
		{ _field_block, "netgame flags", &scenario_netpoints_block },
		{ _field_block, "netgame equipment", &scenario_netgame_equipment_block },
		{ _field_block, "starting equipment", &scenario_starting_equipment_block },
		{ _field_block, "bsp switch trigger volumes", &scenario_bsp_switch_trigger_volume_block },
		{ _field_block, "decals", &scenario_decals_block },
		{ _field_block, "decal palette", &scenario_decal_palette_block },
		{ _field_block, "detail object collection palette", &scenario_detail_object_collection_palette_block },
		FIELD_PAD("value", 36),
		{ _field_block, "style pallette", &style_palette_block },
		{ _field_block, "squad groups", &squad_groups_block },
		{ _field_block, "squads", &squads_block },
		{ _field_block, "zones", &zone_block },
		{ _field_block, "actor palette", &actor_palette_block },
		{ _field_block, "character palette", &character_palette_block },
		{ _field_block, "ai pathfinding data", &pathfinding_data_block },
		{ _field_block, "ai animation references", &ai_animation_reference_block },
		{ _field_block, "ai script references", &ai_script_reference_block },
		{ _field_block, "ai recording references", &ai_recording_reference_block },
		{ _field_block, "ai conversations", &ai_conversation_block },
		{ _field_data, "script syntax data", &hs_old_syntax_data_definition },
		{ _field_data, "script string data", &hs_string_data_definition },
		{ _field_block, "scripts", &hs_scripts_block },
		{ _field_block, "globals", &hs_globals_block },
		{ _field_block, "references", &hs_references_block },
		{ _field_block, "source files", &hs_source_files_group_block },
		{ _field_block, "scripting data", &cs_script_data_block },
		FIELD_PAD("value", 12),
		{ _field_block, "cutscene flags", &scenario_cutscene_flag_block },
		{ _field_block, "cutscene camera points", &scenario_cutscene_camera_point_block },
		{ _field_block, "cutscene titles", &scenario_cutscene_title_block },
		FIELD_PAD("value", 108),
		{ _field_tag_reference, "custom object names", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "ingame help text", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "hud messages", &hud_message_text_group_reference$2 },
		{ _field_block, "structure bsps", &scenario_structure_bsp_reference_block },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$393)
	{
		"solo",
		"multiplayer",
		"main menu",
		"multiplayer shared",
		"single player shared"
	};
	STRING_LIST(unnamed_enum$393, unnamed_enum$393_strings, _countof(unnamed_enum$393_strings));

	STRINGS(unnamed_enum$394)
	{
		"cortana hack#sort cortana in front of other transparent geometry",
		"always draw sky#always draw sky 0, even if no +sky polygons are visible",
		"don\'t strip pathfinding#always leave pathfinding in, even for a multiplayer scenario",
		"symmetric multiplayer map",
		"quick loading (cinematic only) scenario",
		"characters use previous mission weapons",
		"lightmaps smooth palettes with neighbors",
		"snap to white at start"
	};
	STRING_LIST(unnamed_enum$394, unnamed_enum$394_strings, _countof(unnamed_enum$394_strings));

	TAG_REFERENCE(hud_message_text_group_reference$2, HUD_MESSAGE_TEXT_TAG);

	TAG_REFERENCE(sound_effect_collection_group_reference, SOUND_EFFECT_COLLECTION_TAG);

	TAG_STRUCT(
		scenario_structure_bsp_fieldset_old_struct_definition,
		"scenario_structure_bsp_fieldset_old",
		"scenario_structure_bsp_fieldset_old_struct_definition",
		"s_structure_bsp",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "import info", &global_tag_import_info_block },
		FIELD_PAD("value", 4),
		{ _field_block, "collision materials", &structure_collision_materials_block },
		{ _field_block, "collision bsp", &global_collision_bsp_block },
		{ _field_real, "vehicle floor", "height below which vehicles get pushed up by an unstoppable force", "world units" },
		{ _field_real, "vehicle ceiling", "height above which vehicles get pushed down by an unstoppable force", "world units" },
		{ _field_block, "UNUSED nodes", &unused_structure_bsp_node_block },
		{ _field_block, "leaves", &structure_bsp_leaf_block },
		{ _field_real_bounds, "world bounds x" },
		{ _field_real_bounds, "world bounds y" },
		{ _field_real_bounds, "world bounds z" },
		{ _field_block, "surface references", &structure_bsp_surface_reference_block },
		{ _field_data, "cluster data", &structure_bsp_cluster_data_definition },
		{ _field_block, "cluster portals", &structure_bsp_cluster_portal_block },
		{ _field_block, "fog planes", &structure_bsp_fog_plane_block },
		FIELD_PAD("value", 24),
		{ _field_block, "weather palette", &structure_bsp_weather_palette_block },
		{ _field_block, "weather polyhedra", &structure_bsp_weather_polyhedron_block },
		{ _field_block, "detail objects", &structure_bsp_detail_object_data_block },
		{ _field_block, "clusters", &structure_bsp_cluster_block },
		{ _field_block, "materials", &global_geometry_material_block },
		{ _field_block, "sky owner cluster", &structure_bsp_sky_owner_cluster_block },
		{ _field_block, "conveyor surfaces", &structure_bsp_conveyor_surface_block },
		{ _field_block, "breakable surfaces", &structure_bsp_breakable_surface_block },
		{ _field_block, "pathfinding data", &pathfinding_data_block },
		{ _field_block, "pathfinding edges", &structure_bsp_pathfinding_edges_block },
		{ _field_block, "background sound palette", &structure_bsp_background_sound_palette_block },
		{ _field_block, "sound environment palette", &structure_bsp_sound_environment_palette_block },
		{ _field_data, "sound PAS data", &structure_bsp_cluster_encoded_sound_data },
		{ _field_block, "markers", &structure_bsp_marker_block },
		{ _field_block, "runtime decals", &structure_bsp_runtime_decal_block },
		{ _field_block, "environment object palette", &structure_bsp_environment_object_palette_block },
		{ _field_block, "environment objects", &structure_bsp_environment_object_block },
		{ _field_block, "lightmaps", &structure_bsp_lightmap_data_block },
		FIELD_PAD("value", 4),
		{ _field_block, "leaf map leaves", &global_map_leaf_block },
		{ _field_block, "leaf map connections", &global_leaf_connection_block },
		{ _field_block, "errors", &global_error_report_categories_block },
		{ _field_block, "precomputed lighting", &structure_bsp_precomputed_lighting_block },
		{ _field_block, "instanced geometries definitions", &structure_bsp_instanced_geometry_definition_block },
		{ _field_block, "instanced geometry instances", &structure_bsp_instanced_geometry_instances_block },
		{ _field_block, "ambience sound clusters", &structure_bsp_sound_cluster_block },
		{ _field_block, "reverb sound clusters", &structure_bsp_sound_cluster_block },
		{ _field_block, "transparent planes", &transparent_planes_block },
		FIELD_PAD("value", 96),
		{ _field_real, "vehicle spherical limit radius", "distances this far from the limit origin and greater will pull you the fuck back in." },
		{ _field_real_point_3d, "vehicle spherical limit center", "center of the space in which the vehicle can move." },
		{ _field_block, "debug info", &structure_bsp_debug_info_block },
		{ _field_tag_reference, "decorators", &decorators_group_reference },
		{ _field_struct, "structure_physics", &structure_physics_struct_struct_definition, _field_id_spdf },
		{ _field_block, "water definitions", &global_water_definitions_block },
		{ _field_block, "portal=>device mapping", &structure_portal_device_mapping_block },
		{ _field_block, "audibility", &structure_bsp_audibility_block },
		{ _field_block, "object fake lightprobes", &structure_bsp_fake_lightprobes_block },
		{ _field_block, "decorators", &decorator_placement_definition_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(decorators_group_reference, DECORATORS_TAG);

	VERSIONED_TAG_STRUCT(
		scenario_structure_bsp_reference_struct_definition,
		"scenario_structure_bsp_reference",
		"scenario_structure_bsp_reference_struct_definition",
		"s_scenario_structure_bsp_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 13 },
		FIELD_PAD("value", 16),
		{ _field_tag_reference, "structure bsp", &scenario_structure_bsp_group_reference },
		{ _field_tag_reference, "structure lightmap", &scenario_structure_lightmap_group_reference },
		FIELD_PAD("value", 4),
		{ _field_real, "UNUSED radiance est. search distance" },
		FIELD_PAD("value", 4),
		{ _field_real, "UNUSED luminels per world unit" },
		{ _field_real, "UNUSED output white reference" },
		FIELD_PAD("value", 8),
		{ _field_word_flags, "flags", &unnamed_enum$3 },
		FIELD_PAD("value", 2),
		{ _field_short_block_index, "default sky" },
		FIELD_PAD("value", 2),
		
		{ _struct_version_mode_equal, 0, 2 },
		FIELD_PAD("value", 16),
		{ _field_tag_reference, "structure bsp", &scenario_structure_bsp_group_reference },
		
		{ _field_terminator }
	};

	TAG_REFERENCE(scenario_structure_lightmap_group_reference, SCENARIO_STRUCTURE_LIGHTMAP_TAG, _tag_reference_flag_dont_resolve_in_editor);

	STRINGS(unnamed_enum$3)
	{
		"default sky enabled"
	};
	STRING_LIST(unnamed_enum$3, unnamed_enum$3_strings, _countof(unnamed_enum$3_strings));

	TAG_STRUCT(
		scenario_structure_bsp_spherical_harmonic_lighting_block_struct_definition,
		"scenario_structure_bsp_spherical_harmonic_lighting_block",
		"scenario_structure_bsp_spherical_harmonic_lighting_block_struct_definition",
		"s_scenario_structure_bsp_spherical_harmonic_lighting",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "bsp", &scenario_structure_bsp_group_reference },
		{ _field_block, "lighting points", &scenario_spherical_harmonic_lighting_point_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_structure_lighting_resource_block_struct_definition,
		"scenario_structure_lighting_resource_block",
		"scenario_structure_lighting_resource_block_struct_definition",
		"s_scenario_structure_lighting_resource",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "structure lighting", &scenario_structure_bsp_spherical_harmonic_lighting_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_structure_lightmap_block_struct_definition,
		"scenario_structure_lightmap_block",
		"scenario_structure_lightmap_block_struct_definition",
		"s_structure_lightmap",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("lightmap options", "The following fields control the behavior of the lightmapper\n\nRADIANCE ESTIMATE SEARCH DISTANCE UPPER BOUND: the largest distance the code will look for photons. bigger levels need a bigger search radius.  Measured, in world units, 0.0 defaults to 1.0\n\nRADIANCE ESTIMATE SEARCH DISTANCE LOWER BOUND: the smallest distance the code will look for photons. bigger levels need a bigger search radius.  Measured, in world units, 0.0 defaults to 1.0\n\nLUMINELS PER WORLD UNIT: how many lightmap pixels there should be per world unit.  0.0 defaults to 3.0\n\nOUTPUT WHITE REFERENCE: for experimentation - what wattage the lightmapper considers \"white\" to be for output.  0.0 defaults to 1.0\n\nOUTPUT BLACK REFERENCE: for experimentation - what wattage the lightmapper considers \"black\" to be for output.  0.0 defaults to 0.0\n\nOUTPUT SCHLICK PARAMETER: controls the way midtones are mapped.  0.0 defaults to 4.5\n\nDIFFUSE MAP SCALE: controls how diffuse maps are scaled.  0.0 defaults to 1.5\n\nPRT SUN SCALE: 0.0 defaults to 100.0\n\nPRT SKY SCALE: 0.0 defaults to 1.0\n\nPRT INDIRECT SCALE: 0.0 defaults to 1.0\n\nPRT SCALE: you must set this value.\n\nPRT SURFACE LIGHT SCALE: 0.0 defaults to 1.0\n\nPRT SCENARIO LIGHT SCALE: 0.0 defaults to 1.0\n\nLIGHTPROBE INTERPOLATION OVERIDE(speed): overide the default sampling behavior"),
		{ _field_real, "search distance lower bound" },
		{ _field_real, "search distance upper bound" },
		{ _field_real, "luminels per world unit" },
		{ _field_real, "output white reference" },
		{ _field_real, "output black reference" },
		{ _field_real, "output schlick parameter" },
		{ _field_real, "diffuse map scale" },
		{ _field_real, "sun scale" },
		{ _field_real, "sky scale" },
		{ _field_real, "indirect scale" },
		{ _field_real, "prt scale" },
		{ _field_real, "surface light scale" },
		{ _field_real, "scenario light scale" },
		{ _field_real, "lightprobe interpolation override" },
		FIELD_PAD("value", 72),
		{ _field_block, "lightmap groups", &structure_lightmap_group_block },
		FIELD_PAD("value", 12),
		{ _field_block, "errors", &global_error_report_categories_block },
		FIELD_PAD("value", 104),
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		scenario_trigger_volume_struct_definition,
		"scenario_trigger_volume",
		"scenario_trigger_volume_struct_definition",
		"s_scenario_trigger_volume",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 11 },
		{ _field_string_id, "name" },
		{ _field_short_block_index, "object name" },
		FIELD_SKIP("value", 2),
		{ _field_string_id, "node name" },
		{ _field_real_vector_3d, "forward" },
		{ _field_real_vector_3d, "up" },
		{ _field_real_point_3d, "position" },
		{ _field_real_point_3d, "extents" },
		FIELD_PAD("value", 4),
		{ _field_short_block_index, "kill trigger volume" },
		FIELD_PAD("value", 2),
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_short_integer, "value" },
		FIELD_PAD("value", 2),
		{ _field_string, "name" },
		{ _field_array, "value", &unnamed_array$2 },
		FIELD_PAD("value", 4),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_trigger_volumes_resource_block_struct_definition,
		"scenario_trigger_volumes_resource_block",
		"scenario_trigger_volumes_resource_block_struct_definition",
		"s_scenario_trigger_volumes_resource_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "trigger volumes", &scenario_trigger_volume_block },
		{ _field_block, "object names", &scenario_object_names_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_unit_struct_struct_definition,
		"scenario_unit_struct",
		"scenario_unit_struct_struct_definition",
		"s_scenario_unit_datum",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "body vitality", nullptr, nullptr, "[0,1]" },
		{ _field_long_flags, "flags", &unnamed_enum$16 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_vehicle_palette_block_struct_definition,
		"scenario_vehicle_palette_block",
		"scenario_vehicle_palette_block_struct_definition",
		"s_scenario_object_palette_entry$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "name", &vehicle_group_reference },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(vehicle_group_reference, VEHICLE_TAG);

	VERSIONED_TAG_STRUCT(
		scenario_vehicle_struct_definition,
		"scenario_vehicle",
		"scenario_vehicle_struct_definition",
		"s_scenario_vehicle",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct_struct_definition, _field_id_sper },
		{ _field_struct, "unit data", &scenario_unit_struct_struct_definition, _field_id_sunt },
		
		{ _struct_version_mode_equal, 1, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct_struct_definition, _field_id_sper },
		{ _field_struct, "unit data", &scenario_unit_struct_struct_definition, _field_id_sunt },
		
		{ _struct_version_mode_equal, 0, 12 },
		{ _field_short_block_index, "type", _field_id_type },
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_word_flags, "not placed", &unnamed_enum$4 },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _field_id_point },
		{ _field_real_euler_angles_3d, "rotation", _field_id_orientation },
		FIELD_PAD("value", 4),
		{ _field_long_block_index, "environment object reference" },
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 16),
		{ _field_struct, "unit data", &old_scenario_unit_struct_struct_definition, _field_id_sust },
		FIELD_PAD("value", 32),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_vehicles_resource_block_struct_definition,
		"scenario_vehicles_resource_block",
		"scenario_vehicles_resource_block_struct_definition",
		"s_scenario_objects_resource_definition$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "names", &scenario_object_names_block },
		{ _field_block, "value", &dont_use_me_scenario_environment_object_block },
		{ _field_block, "structure references", &scenario_structure_bsp_reference_block },
		{ _field_block, "palette", &scenario_vehicle_palette_block },
		{ _field_block, "objects", &scenario_vehicle_block },
		{ _field_long_integer, "next object id salt" },
		{ _field_block, "editor folders", &g_scenario_editor_folder_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_weapon_datum_struct_struct_definition,
		"scenario_weapon_datum_struct",
		"scenario_weapon_datum_struct_struct_definition",
		"s_scenario_weapon_datum",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "rounds left" },
		{ _field_short_integer, "rounds loaded" },
		{ _field_long_flags, "flags", &unnamed_enum$15 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$15)
	{
		"initially at rest (doesn\'t fall)",
		"obsolete",
		"does accelerate (moves due to explosions)"
	};
	STRING_LIST(unnamed_enum$15, unnamed_enum$15_strings, _countof(unnamed_enum$15_strings));

	TAG_STRUCT(
		scenario_weapon_palette_block_struct_definition,
		"scenario_weapon_palette_block",
		"scenario_weapon_palette_block_struct_definition",
		"s_scenario_object_palette_entry$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "name", &weapon_group_reference },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	TAG_REFERENCE(weapon_group_reference, WEAPON_TAG);

	VERSIONED_TAG_STRUCT(
		scenario_weapon_struct_definition,
		"scenario_weapon",
		"scenario_weapon_struct_definition",
		"s_scenario_weapon",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct_struct_definition, _field_id_sper },
		{ _field_struct, "weapon data", &scenario_weapon_datum_struct_struct_definition, _field_id_swpt },
		
		{ _struct_version_mode_equal, 1, 7 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "type", _field_id_type },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_struct, "object data", &g_new_scenario_object_datum_struct_definition, _field_id_sobj }, // structure_version:1
		{ _field_struct, "permutation data", &scenario_object_permutation_struct_struct_definition, _field_id_sper },
		{ _field_struct, "weapon data", &scenario_weapon_datum_struct_struct_definition, _field_id_swpt },
		
		{ _struct_version_mode_equal, 0, 15 },
		{ _field_short_block_index, "type", _field_id_type },
		{ _field_short_block_index, "name", _field_id_name },
		{ _field_word_flags, "not placed", &unnamed_enum$4 },
		{ _field_short_integer, "desired permutation", "if non-zero, will try to use model permutations with names that end in that number, e.g. 7 would pick \"body-7\" and \"head-7\"" },
		{ _field_real_point_3d, "position", _field_id_point },
		{ _field_real_euler_angles_3d, "rotation", _field_id_orientation },
		FIELD_PAD("value", 4),
		{ _field_long_block_index, "environment object reference" },
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 16),
		{ _field_short_integer, "rounds left" },
		{ _field_short_integer, "rounds loaded" },
		{ _field_word_flags, "flags", &unnamed_enum$15 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 12),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		scenario_weapons_resource_block_struct_definition,
		"scenario_weapons_resource_block",
		"scenario_weapons_resource_block_struct_definition",
		"s_scenario_objects_resource_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "names", &scenario_object_names_block },
		{ _field_block, "value", &dont_use_me_scenario_environment_object_block },
		{ _field_block, "structure references", &scenario_structure_bsp_reference_block },
		{ _field_block, "palette", &scenario_weapon_palette_block },
		{ _field_block, "objects", &scenario_weapon_block },
		{ _field_long_integer, "next object id salt" },
		{ _field_block, "editor folders", &g_scenario_editor_folder_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		scenery_struct_definition,
		"scenery",
		"scenery_struct_definition",
		"s_scenery_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 51 },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("Pathfinding", "Indicate whether, by default, we should create pathfinding data for this type of scenery"),
		{ _field_short_enum, "pathfinding policy", &unnamed_enum$388 },
		{ _field_word_flags, "flags", &unnamed_enum$389 },
		FIELD_EXPLANATION("Lightmapping", "Indicate whether, by default, how we should lightmap this type of scenery"),
		{ _field_short_enum, "lightmapping policy", &unnamed_enum$390 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 120),
		
		{ _struct_version_mode_equal, 1, 51 },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("Pathfinding", "Indicate whether, by default, we should create pathfinding data for this type of scenery"),
		{ _field_short_enum, "pathfinding policy", &unnamed_enum$391 },
		{ _field_word_flags, "flags", &unnamed_enum$389 },
		FIELD_EXPLANATION("Lightmapping", "Indicate whether, by default, how we should lightmap this type of scenery"),
		{ _field_short_enum, "lightmapping policy", &unnamed_enum$390 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 120),
		
		{ _struct_version_mode_equal, 0, 49 },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		{ _field_short_enum, "pathfinding policy", &unnamed_enum$391 },
		{ _field_word_flags, "flags", &unnamed_enum$389 },
		{ _field_short_enum, "lightmapping policy", &unnamed_enum$392 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 120),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$388)
	{
		"Pathfinding CUT-OUT",
		"Pathfinding STATIC",
		"Pathfinding DYNAMIC",
		"Pathfinding NONE"
	};
	STRING_LIST(unnamed_enum$388, unnamed_enum$388_strings, _countof(unnamed_enum$388_strings));

	STRINGS(unnamed_enum$389)
	{
		"physically simulates#stimulates?"
	};
	STRING_LIST(unnamed_enum$389, unnamed_enum$389_strings, _countof(unnamed_enum$389_strings));

	STRINGS(unnamed_enum$390)
	{
		"Per-Vertex",
		"Per-Pixel (not implemented)",
		"Dynamic"
	};
	STRING_LIST(unnamed_enum$390, unnamed_enum$390_strings, _countof(unnamed_enum$390_strings));

	STRINGS(unnamed_enum$391)
	{
		"Pathfinding DYNAMIC",
		"Pathfinding CUT-OUT",
		"Pathfinding STATIC",
		"Pathfinding NONE"
	};
	STRING_LIST(unnamed_enum$391, unnamed_enum$391_strings, _countof(unnamed_enum$391_strings));

	STRINGS(unnamed_enum$392)
	{
		"Dynamic",
		"Per-Vertex"
	};
	STRING_LIST(unnamed_enum$392, unnamed_enum$392_strings, _countof(unnamed_enum$392_strings));

	TAG_STRUCT(
		screen_animation_keyframe_reference_block_struct_definition,
		"screen_animation_keyframe_reference_block",
		"screen_animation_keyframe_reference_block_struct_definition",
		"s_animation_keyframe_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 4),
		{ _field_real, "alpha" },
		{ _field_real_point_3d, "position" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		screen_effect_block_struct_definition,
		"screen_effect_block",
		"screen_effect_block_struct_definition",
		"s_rasterizer_screen_effect_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("SCREEN EFFECT", "A screen effect is essentially a collection of pass references, each one corresponding to a shader pass reference from the template. Note that only shader passes in the TRANSPARENT layer are considered during screen effect rendering."),
		FIELD_PAD("value", 64),
		{ _field_tag_reference, "shader", &shader_group_reference },
		FIELD_PAD("value", 64),
		{ _field_block, "pass references", &rasterizer_screen_effect_pass_reference_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		screen_effect_bonus_struct_definition,
		"screen_effect_bonus",
		"screen_effect_bonus_struct_definition",
		"s_tag_reference$11",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_tag_reference, "halfscreen screen effect", &screen_effect_group_reference },
		{ _field_tag_reference, "quarterscreen screen effect", &screen_effect_group_reference },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		screen_flash_definition_struct_struct_definition,
		"screen_flash_definition_struct",
		"screen_flash_definition_struct_struct_definition",
		"s_screen_flash_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$262 },
		{ _field_short_enum, "priority", &unnamed_enum$263 },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "duration", nullptr, "seconds" },
		{ _field_short_enum, "fade function", &unnamed_enum$264 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 8),
		{ _field_real_fraction, "maximum intensity", nullptr, nullptr, "[0,1]" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real_argb_color, "color" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		secondary_light_struct_struct_definition,
		"secondary_light_struct",
		"secondary_light_struct_struct_definition",
		"s_secondary_light",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("Secondary light", nullptr),
		{ _field_real_rgb_color, "Min lightmap color" },
		{ _field_real_rgb_color, "Max lightmap color" },
		{ _field_real_rgb_color, "Min diffuse sample" },
		{ _field_real_rgb_color, "Max diffuse sample" },
		{ _field_real, "z axis rotation", "degrees" },
		FIELD_EXPLANATION("Secondary light function", "input: accuracy, output: secondary light scale"),
		FIELD_CUSTOM("function", _field_id_function_editor),
		{ _field_struct, "function", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_terminator }
	};

	TAG_STRUCT(
		secondary_set_trigger_block_struct_definition,
		"secondary_set_trigger_block",
		"secondary_set_trigger_block_struct_definition",
		"s_secondary_set_triggers",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "combination rule", &unnamed_enum$82 },
		{ _field_short_enum, "dialogue type", "when this ending is triggered, launch a dialogue event of the given type", &unnamed_enum$83 },
		{ _field_block, "triggers", &trigger_references_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		section_render_leaves_block_struct_definition,
		"section_render_leaves_block",
		"section_render_leaves_block_struct_definition",
		"s_section_render_leaves",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "node render leaves", &node_render_leaves_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sector_bsp2d_nodes_block_struct_definition,
		"sector_bsp2d_nodes_block",
		"sector_bsp2d_nodes_block_struct_definition",
		"s_large_bsp2d_node$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_plane_2d, "plane" },
		{ _field_long_integer, "left child" },
		{ _field_long_integer, "right child" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sector_vertex_block_struct_definition,
		"sector_vertex_block",
		"sector_vertex_block_struct_definition",
		"s_sector_vertex",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "point" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		sectors_v3_struct_definition,
		"sectors_v3",
		"sectors_v3_struct_definition",
		"s_sector",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 3 },
		{ _field_word_flags, "Path-finding sector flags", &unnamed_enum$372 },
		{ _field_short_integer, "hint index" },
		{ _field_long_integer, "first link (do not set manually)" },
		
		{ _struct_version_mode_equal, 1, 4 },
		{ _field_word_flags, "Path-finding sector flags", &unnamed_enum$372 },
		{ _field_short_integer, "hint index" },
		{ _field_short_integer, "first link (do not set manually)" },
		FIELD_PAD("value", 2),
		
		{ _struct_version_mode_equal, 0, 4 },
		{ _field_word_flags, "Path-finding sector flags", &unnamed_enum$372 },
		{ _field_short_integer, "hint index" },
		{ _field_long_integer, "source object (do not set manually)" },
		{ _field_long_integer, "first link (do not set manually)" },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$372)
	{
		"sector walkable",
		"sector breakable",
		"sector mobile",
		"sector bsp source",
		"floor",
		"ceiling",
		"wall north",
		"wall south",
		"wall east",
		"wall west",
		"crouchable",
		"aligned",
		"sector step",
		"sector interior"
	};
	STRING_LIST(unnamed_enum$372, unnamed_enum$372_strings, _countof(unnamed_enum$372_strings));

	TAG_STRUCT(
		shader_animation_property_block_struct_definition,
		"shader_animation_property_block",
		"shader_animation_property_block_struct_definition",
		"s_shader_animation_property",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$366 },
		FIELD_PAD("value", 2),
		{ _field_string_id, "input name", _field_id_function_input_scalar },
		{ _field_string_id, "range name", _field_id_function_input_range },
		{ _field_real, "time period", nullptr, "seconds", _field_id_function_unknown },
		FIELD_EXPLANATION("FUNCTION", nullptr),
		FIELD_CUSTOM("animation function", _field_id_function_editor),
		{ _field_struct, "function", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$366)
	{
		"bitmap scale uniform",
		"bitmap scale x",
		"bitmap scale y",
		"bitmap scale z",
		"bitmap translation x",
		"bitmap translation y",
		"bitmap translation z",
		"bitmap rotation angle",
		"bitmap rotation axis x",
		"bitmap rotation axis y",
		"bitmap rotation axis z",
		"value",
		"color",
		"bitmap index"
	};
	STRING_LIST(unnamed_enum$366, unnamed_enum$366_strings, _countof(unnamed_enum$366_strings));

	TAG_STRUCT(
		shader_block_struct_definition,
		"shader_block",
		"shader_block_struct_definition",
		"s_shader_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "template", &shader_template_group_reference },
		{ _field_string_id, "material name", _field_id_sted },
		{ _field_block, "runtime properties", &shader_properties_block },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$416 },
		{ _field_block, "parameters", &global_shader_parameter_block },
		{ _field_block, "postprocess definition", &shader_postprocess_definition_new_block },
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 12),
		{ _field_block, "predicted resources", &predicted_resource_block },
		{ _field_tag_reference, "light response", &shader_light_response_group_reference },
		{ _field_short_enum, "shader LOD bias", &unnamed_enum$417 },
		{ _field_short_enum, "specular type", &unnamed_enum$418 },
		{ _field_short_enum, "lightmap type", &unnamed_enum$419 },
		FIELD_PAD("value", 2),
		{ _field_real, "lightmap specular brightness" },
		{ _field_real, "lightmap ambient bias", nullptr, nullptr, "[-1,1]" },
		{ _field_block, "postprocess properties", &long_block },
		{ _field_real, "Added depth bias offset" },
		{ _field_real, "Added depth bias slope scale" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$416)
	{
		"water",
		"sort first",
		"no active camo"
	};
	STRING_LIST(unnamed_enum$416, unnamed_enum$416_strings, _countof(unnamed_enum$416_strings));

	TAG_REFERENCE(shader_light_response_group_reference, SHADER_LIGHT_RESPONSE_TAG);

	STRINGS(unnamed_enum$417)
	{
		"none",
		"4 times size",
		"2 times size",
		"1/2 size",
		"1/4 size",
		"never",
		"cinematic",
		"lowest"
	};
	STRING_LIST(unnamed_enum$417, unnamed_enum$417_strings, _countof(unnamed_enum$417_strings));

	STRINGS(unnamed_enum$418)
	{
		"none",
		"default",
		"dull",
		"shiny"
	};
	STRING_LIST(unnamed_enum$418, unnamed_enum$418_strings, _countof(unnamed_enum$418_strings));

	STRINGS(unnamed_enum$419)
	{
		"diffuse",
		"default specular",
		"dull specular",
		"shiny specular"
	};
	STRING_LIST(unnamed_enum$419, unnamed_enum$419_strings, _countof(unnamed_enum$419_strings));

	TAG_STRUCT(
		shader_gpu_state_reference_struct_struct_definition,
		"shader_gpu_state_reference_struct",
		"shader_gpu_state_reference_struct_struct_definition",
		"s_shader_gpu_state_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "render states", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "texture stage states", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "render state parameters", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "texture stage parameters", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "textures", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "Vn constants", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "Cn constants", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_gpu_state_struct_struct_definition,
		"shader_gpu_state_struct",
		"shader_gpu_state_struct_struct_definition",
		"s_shader_gpu_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "render states", &render_state_block },
		{ _field_block, "texture stage states", &texture_stage_state_block },
		{ _field_block, "render state parameters", &render_state_parameter_block },
		{ _field_block, "texture stage parameters", &texture_stage_state_parameter_block },
		{ _field_block, "textures", &texture_block },
		{ _field_block, "Vn constants", &vertex_shader_constant_block },
		{ _field_block, "Cn constants", &vertex_shader_constant_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_light_response_block_struct_definition,
		"shader_light_response_block",
		"shader_light_response_block_struct_definition",
		"s_shader_light_response_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "categories", &shader_template_category_block },
		{ _field_block, "shader LODs", &shader_template_level_of_detail_block },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_pass_block_struct_definition,
		"shader_pass_block",
		"shader_pass_block_struct_definition",
		"s_shader_pass_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_data, "documentation", &shader_text_definition },
		{ _field_block, "parameters", &shader_pass_parameter_block },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_block, "implementations", &shader_pass_implementation_block },
		{ _field_block, "postprocess definition", &shader_pass_postprocess_definition_new_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_pass_implementation_block_struct_definition,
		"shader_pass_implementation_block",
		"shader_pass_implementation_block_struct_definition",
		"s_shader_pass_implementation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$449 },
		FIELD_PAD("value", 2),
		{ _field_block, "textures", &shader_pass_texture_block },
		FIELD_EXPLANATION("VERTEX SHADER", nullptr),
		{ _field_tag_reference, "vertex shader", &vertex_shader_group_reference$2 },
		{ _field_block, "vs constants", &shader_pass_vertex_shader_constant_block },
		FIELD_USELESS_PAD("value", 4),
		{ _field_data, "pixel shader code [NO LONGER USED]", &shader_text_definition },
		FIELD_USELESS_PAD("value", 12),
		FIELD_EXPLANATION("STATE", nullptr),
		{ _field_short_enum, "channels", &unnamed_enum$463 },
		{ _field_short_enum, "alpha-blend", &unnamed_enum$464 },
		{ _field_short_enum, "depth", &unnamed_enum$465 },
		FIELD_PAD("value", 2),
		{ _field_block, "channel state", &shader_state_channels_state_block },
		{ _field_block, "alpha-blend state", &shader_state_alpha_blend_state_block },
		{ _field_block, "alpha-test state", &shader_state_alpha_test_state_block },
		{ _field_block, "depth state", &shader_state_depth_state_block },
		{ _field_block, "cull state", &shader_state_cull_state_block },
		{ _field_block, "fill state", &shader_state_fill_state_block },
		{ _field_block, "misc state", &shader_state_misc_state_block },
		{ _field_block, "constants", &shader_state_constant_block },
		{ _field_tag_reference, "pixel shader", &pixel_shader_group_reference },
		FIELD_USELESS_PAD("value", 224),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$449)
	{
		"delete from cache file",
		"critical"
	};
	STRING_LIST(unnamed_enum$449, unnamed_enum$449_strings, _countof(unnamed_enum$449_strings));

	TAG_REFERENCE(vertex_shader_group_reference$2, VERTEX_SHADER_TAG);

	STRINGS(unnamed_enum$463)
	{
		"all",
		"color only",
		"alpha only",
		"custom"
	};
	STRING_LIST(unnamed_enum$463, unnamed_enum$463_strings, _countof(unnamed_enum$463_strings));

	STRINGS(unnamed_enum$464)
	{
		"disabled",
		"add",
		"multiply",
		"add src times dstalpha",
		"add src times srcalpha",
		"add dst times srcalpha inverse",
		"alpha blend",
		"custom"
	};
	STRING_LIST(unnamed_enum$464, unnamed_enum$464_strings, _countof(unnamed_enum$464_strings));

	STRINGS(unnamed_enum$465)
	{
		"disabled",
		"default opaque",
		"default opaque write",
		"default transparent",
		"custom"
	};
	STRING_LIST(unnamed_enum$465, unnamed_enum$465_strings, _countof(unnamed_enum$465_strings));

	TAG_REFERENCE(pixel_shader_group_reference, PIXEL_SHADER_TAG);

	TAG_STRUCT(
		shader_pass_parameter_block_struct_definition,
		"shader_pass_parameter_block",
		"shader_pass_parameter_block_struct_definition",
		"s_shader_pass_parameter",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_data, "explanation", &shader_text_definition },
		{ _field_short_enum, "type", &unnamed_enum$365 },
		{ _field_word_flags, "flags", &unnamed_enum$447 },
		{ _field_tag_reference, "default bitmap", &bitmap_group_reference },
		{ _field_real, "default const value" },
		{ _field_real_rgb_color, "default const color" },
		{ _field_short_enum, "source extern", &unnamed_enum$448 },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$447)
	{
		"no bitmap LOD",
		"required parameter"
	};
	STRING_LIST(unnamed_enum$447, unnamed_enum$447_strings, _countof(unnamed_enum$447_strings));

	STRINGS(unnamed_enum$448)
	{
		"none",
		"GLOBAL eye forward vector (Z)",
		"GLOBAL eye right vector (X)",
		"GLOBAL eye up vector (Y)",
		"OBJECT change color primary",
		"OBJECT change color secondary",
		"OBJECT function value",
		"LIGHT diffuse color",
		"LIGHT specular color",
		"LIGHT forward vector (Z)",
		"LIGHT right vector (X)",
		"LIGHT up vector (Y)",
		"LIGHT object-relative forward vector (Z)",
		"LIGHT object-relative right vector (X)",
		"LIGHT object-relative up vector (Y)",
		"LIGHT object falloff value",
		"LIGHT object gel color",
		"LIGHTMAP object ambient factor",
		"LIGHTMAP object direct vector",
		"LIGHTMAP object direct color",
		"LIGHTMAP object indirect vector",
		"LIGHTMAP object indirect color",
		"OLD_FOG atmospheric color",
		"OLD_FOG atmospheric max density",
		"OLD_FOG planar color",
		"OLD_FOG planar max density",
		"OLD_FOG atmospheric-planar blend value",
		"OLD_FOG object atmospheric density",
		"OLD_FOG object planar density",
		"OLD_FOG object color",
		"OLD_FOG object density",
		"OBJECT model alpha",
		"OBJECT shadow alpha",
		"LIGHT overbrighten diffuse shift",
		"LIGHT overbrighten specular shift",
		"LIGHT diffuse contrast",
		"LIGHT specular gel",
		"SHADER specular type",
		"pad3",
		"pad3-scale",
		"pad thai",
		"taco salad",
		"anisotropic binormal",
		"OBJECT LIGHT shadow fade",
		"LIGHT shadow fade",
		"OLD_FOG atmospheric density",
		"OLD_FOG planar density",
		"OLD_FOG planar density invert",
		"OBJECT change color tertiary",
		"OBJECT change color quaternary",
		"LIGHTMAP object specular color",
		"SHADER lightmap type",
		"LIGHTMAP object ambient color",
		"SHADER lightmap specular brightness",
		"GLOBAL lightmap shadow darkening",
		"LIGHTMAP object env brightness",
		"FOG atmospheric max density",
		"FOG atmospheric color",
		"FOG atmospheric color adj",
		"FOG atmospheric-planar blend",
		"FOG atmospheric-planar blend adj inv",
		"FOG atmospheric-planar blend adj",
		"FOG secondary max density",
		"FOG secondary color",
		"FOG secondary color adj",
		"FOG atmospheric-secondary blend",
		"FOG atmospheric-secondary blend adj inv",
		"FOG atmospheric-secondary blend adj",
		"FOG sky density",
		"FOG sky color",
		"FOG sky color adj",
		"FOG planar max density",
		"FOG planar color",
		"FOG planar color adj",
		"FOG planar eye density",
		"FOG planar eye density adj inv",
		"FOG planar eye density adj",
		"HUD waypoint primary color",
		"HUD waypoint secondary color",
		"LIGHTMAP object specular color times one half",
		"LIGHT specular enabled",
		"LIGHT definition specular enabled",
		"OBJECT active camo amount",
		"OBJECT super camo amount",
		"HUD custom color 1",
		"HUD custom color 2",
		"HUD custom color 3",
		"HUD custom color 4",
		"OBJECT active camo RGB",
		"FOG patchy plane n(xyz)",
		"FOG patchy plane d(w)",
		"HUD global fade",
		"SCREEN EFFECT primary",
		"SCREEN EFFECT secondary"
	};
	STRING_LIST(unnamed_enum$448, unnamed_enum$448_strings, _countof(unnamed_enum$448_strings));

	TAG_STRUCT(
		shader_pass_postprocess_constant_info_new_block_struct_definition,
		"shader_pass_postprocess_constant_info_new_block",
		"shader_pass_postprocess_constant_info_new_block_struct_definition",
		"s_shader_pass_postprocess_constant_info_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "parameter name" },
		FIELD_PAD("value", 3),
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_pass_postprocess_constant_new_block_struct_definition,
		"shader_pass_postprocess_constant_new_block",
		"shader_pass_postprocess_constant_new_block_struct_definition",
		"s_shader_pass_postprocess_constant_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "parameter name" },
		{ _field_char_integer, "component mask" },
		{ _field_char_integer, "scale by texture stage" },
		{ _field_char_integer, "function index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_pass_postprocess_definition_new_block_struct_definition,
		"shader_pass_postprocess_definition_new_block",
		"shader_pass_postprocess_definition_new_block_struct_definition",
		"s_shader_pass_postprocess_definition_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "implementations", &shader_pass_postprocess_implementation_new_block },
		{ _field_block, "textures", &shader_pass_postprocess_texture_new_block },
		{ _field_block, "render states", &render_state_block },
		{ _field_block, "texture states", &shader_pass_postprocess_texture_state_block },
		{ _field_block, "ps fragments", &pixel_shader_fragment_block },
		{ _field_block, "ps permutations", &pixel_shader_permutation_new_block },
		{ _field_block, "ps combiners", &pixel_shader_combiner_block },
		{ _field_block, "externs", &shader_pass_postprocess_extern_new_block },
		{ _field_block, "constants", &shader_pass_postprocess_constant_new_block },
		{ _field_block, "constant info", &shader_pass_postprocess_constant_info_new_block },
		{ _field_block, "old implementations", &shader_pass_postprocess_implementation_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_pass_postprocess_extern_new_block_struct_definition,
		"shader_pass_postprocess_extern_new_block",
		"shader_pass_postprocess_extern_new_block_struct_definition",
		"s_shader_pass_postprocess_extern_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_SKIP("value", 3),
		{ _field_char_integer, "extern index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_pass_postprocess_implementation_block_struct_definition,
		"shader_pass_postprocess_implementation_block",
		"shader_pass_postprocess_implementation_block_struct_definition",
		"s_shader_pass_postprocess_implementation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "GPU state", &shader_gpu_state_struct_struct_definition, _field_id_GPUS },
		{ _field_struct, "GPU constant state", &shader_gpu_state_reference_struct_struct_definition, _field_id_GPUR },
		{ _field_struct, "GPU volatile state", &shader_gpu_state_reference_struct_struct_definition, _field_id_GPUR },
		{ _field_struct, "GPU default state", &shader_gpu_state_reference_struct_struct_definition, _field_id_GPUR },
		{ _field_tag_reference, "vertex shader", &vertex_shader_group_reference$3 },
		FIELD_SKIP("value", 8),
		FIELD_SKIP("value", 8),
		FIELD_SKIP("value", 4),
		FIELD_SKIP("value", 4),
		{ _field_block, "value externs", &extern_reference_block },
		{ _field_block, "color externs", &extern_reference_block },
		{ _field_block, "switch externs", &extern_reference_block },
		{ _field_short_integer, "bitmap parameter count" },
		FIELD_PAD("value", 2),
		FIELD_SKIP("value", 240),
		{ _field_block, "pixel shader fragments", &pixel_shader_fragment_block },
		{ _field_block, "pixel shader permutations", &pixel_shader_permutation_block },
		{ _field_block, "pixel shader combiners", &pixel_shader_combiner_block },
		{ _field_block, "pixel shader constants", &pixel_shader_constant_block },
		FIELD_SKIP("value", 4),
		FIELD_SKIP("value", 4),
		{ _field_terminator }
	};

	TAG_REFERENCE(vertex_shader_group_reference$3, VERTEX_SHADER_TAG);

	TAG_STRUCT(
		shader_pass_postprocess_implementation_new_block_struct_definition,
		"shader_pass_postprocess_implementation_new_block",
		"shader_pass_postprocess_implementation_new_block_struct_definition",
		"s_shader_pass_postprocess_implementation_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "textures", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "render states", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "texture states", &tag_block_index_struct_struct_definition, _field_id_shtb },
		FIELD_SKIP("value", 240),
		{ _field_struct, "ps fragments", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "ps permutations", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "ps combiners", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_tag_reference, "vertex shader", &vertex_shader_group_reference$3 },
		FIELD_SKIP("value", 8),
		FIELD_SKIP("value", 8),
		FIELD_SKIP("value", 4),
		FIELD_SKIP("value", 4),
		{ _field_struct, "default render states", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "render state externs", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "texture state externs", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "pixel constant externs", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "vertex constant externs", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "ps constants", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "vs constants", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "pixel constant info", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "vertex constant info", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "render state info", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "texture state info", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_block, "pixel shader", &shader_postprocess_pixel_shader_block },
		{ _field_block, "pixel shader switch extern map", &pixel_shader_extern_map_block },
		{ _field_block, "pixel shader index block", &pixel_shader_index_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_pass_postprocess_texture_new_block_struct_definition,
		"shader_pass_postprocess_texture_new_block",
		"shader_pass_postprocess_texture_new_block_struct_definition",
		"s_shader_pass_postprocess_texture_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "bitmap parameter index" },
		{ _field_char_integer, "bitmap extern index" },
		{ _field_char_integer, "texture stage index" },
		{ _field_char_integer, "flags" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_pass_postprocess_texture_state_block_struct_definition,
		"shader_pass_postprocess_texture_state_block",
		"shader_pass_postprocess_texture_state_block_struct_definition",
		"s_shader_pass_postprocess_texture_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_SKIP("value", 24),
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_pass_texture_block_struct_definition,
		"shader_pass_texture_block",
		"shader_pass_texture_block_struct_definition",
		"s_shader_pass_texture",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "source parameter" },
		{ _field_short_enum, "source extern", &unnamed_enum$450 },
		FIELD_PAD("value", 2),
		FIELD_SKIP("value", 2),
		{ _field_short_enum, "mode", &unnamed_enum$451 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "dot mapping", &unnamed_enum$452 },
		{ _field_short_integer, "input stage", nullptr, nullptr, "[0,3]" },
		FIELD_PAD("value", 2),
		{ _field_block, "address state", &shader_texture_state_address_state_block },
		{ _field_block, "filter state", &shader_texture_state_filter_state_block },
		{ _field_block, "kill state", &shader_texture_state_kill_state_block },
		{ _field_block, "misc state", &shader_texture_state_misc_state_block },
		{ _field_block, "constants", &shader_texture_state_constant_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$450)
	{
		"none",
		"GLOBAL vector-normalization",
		"UNUSED",
		"GLOBAL target texaccum",
		"UNUSED",
		"GLOBAL target framebuffer",
		"GLOBAL target z",
		"UNUSED",
		"GLOBAL target shadow",
		"LIGHT falloff",
		"LIGHT gel",
		"LIGHTMAP",
		"UNUSED",
		"GLOBAL shadow buffer",
		"GLOBAL gradient separate",
		"GLOBAL gradient product",
		"HUD bitmap",
		"GLOBAL active camo",
		"GLOBAL texture camera",
		"GLOBAL water reflection",
		"GLOBAL water refraction",
		"GLOBAL aux1",
		"GLOBAL aux2",
		"GLOBAL particle distortion",
		"GLOBAL convolution1",
		"GLOBAL convolution2",
		"SHADER active camo bump",
		"FIRST-PERSON scope"
	};
	STRING_LIST(unnamed_enum$450, unnamed_enum$450_strings, _countof(unnamed_enum$450_strings));

	STRINGS(unnamed_enum$451)
	{
		"2D",
		"3D",
		"cube map",
		"passthrough",
		"texkill",
		"2D dependent AR",
		"2D dependent GB",
		"2D bumpenv",
		"2D bumpenv luminance",
		"3D BRDF",
		"dot product",
		"dot product 2D",
		"dot product 3D",
		"dot product cube map",
		"dot product ZW",
		"dot reflect diffuse",
		"dot reflect specular",
		"dot reflect specular const",
		"none"
	};
	STRING_LIST(unnamed_enum$451, unnamed_enum$451_strings, _countof(unnamed_enum$451_strings));

	STRINGS(unnamed_enum$452)
	{
		"zero to one",
		"signed D3D",
		"signed GL",
		"signed NV",
		"HILO zero to one",
		"HILO signed hemisphere D3D",
		"HILO signed hemisphere GL",
		"HILO signed hemisphere NV"
	};
	STRING_LIST(unnamed_enum$452, unnamed_enum$452_strings, _countof(unnamed_enum$452_strings));

	TAG_STRUCT(
		shader_pass_vertex_shader_constant_block_struct_definition,
		"shader_pass_vertex_shader_constant_block",
		"shader_pass_vertex_shader_constant_block_struct_definition",
		"s_shader_pass_constant",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "source parameter" },
		{ _field_short_enum, "scale by texture stage", &unnamed_enum$460 },
		{ _field_short_enum, "register bank", &unnamed_enum$461 },
		{ _field_short_integer, "register index" },
		{ _field_short_enum, "component mask", &unnamed_enum$462 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$460)
	{
		"none",
		"stage 0",
		"stage 1",
		"stage 2",
		"stage 3"
	};
	STRING_LIST(unnamed_enum$460, unnamed_enum$460_strings, _countof(unnamed_enum$460_strings));

	STRINGS(unnamed_enum$461)
	{
		"Vn [0,15]",
		"Cn [0,12]"
	};
	STRING_LIST(unnamed_enum$461, unnamed_enum$461_strings, _countof(unnamed_enum$461_strings));

	STRINGS(unnamed_enum$462)
	{
		"x (value)",
		"y (value)",
		"z (value)",
		"w (value)",
		"xyz/rgb (color)",
		"x (uniform scale)",
		"y (uniform scale)",
		"z (uniform scale)",
		"w (uniform scale)",
		"xy (2D scale)",
		"zw (2D scale)",
		"xy (2D translation)",
		"zw (2D translation)",
		"xyzw (2D simple xform)",
		"xyw row1 (2D affine xform)",
		"xyw row2 (2D affine xform)",
		"xyz (3D scale)",
		"xyz (3D translation)",
		"xyzw row1 (3D affine xform)",
		"xyzw row2 (3D affine xform)",
		"xyzw row3 (3D affine xform)"
	};
	STRING_LIST(unnamed_enum$462, unnamed_enum$462_strings, _countof(unnamed_enum$462_strings));

	TAG_STRUCT(
		shader_postprocess_animated_parameter_new_block_struct_definition,
		"shader_postprocess_animated_parameter_new_block",
		"shader_postprocess_animated_parameter_new_block_struct_definition",
		"s_shader_postprocess_animated_parameter",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "overlay references", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_animated_parameter_reference_new_block_struct_definition,
		"shader_postprocess_animated_parameter_reference_new_block",
		"shader_postprocess_animated_parameter_reference_new_block_struct_definition",
		"s_shader_postprocess_animated_parameter_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_SKIP("value", 3),
		{ _field_char_integer, "parameter index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_bitmap_block_struct_definition,
		"shader_postprocess_bitmap_block",
		"shader_postprocess_bitmap_block_struct_definition",
		"s_shader_postprocess_bitmap",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "parameter index" },
		{ _field_char_integer, "flags" },
		{ _field_long_integer, "bitmap group index" },
		{ _field_real, "log bitmap dimension" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_bitmap_new_block_struct_definition,
		"shader_postprocess_bitmap_new_block",
		"shader_postprocess_bitmap_new_block_struct_definition",
		"s_shader_postprocess_bitmap_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "bitmap group" },
		{ _field_long_integer, "bitmap index" },
		{ _field_real, "log bitmap dimension" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_bitmap_property_block_struct_definition,
		"shader_postprocess_bitmap_property_block",
		"shader_postprocess_bitmap_property_block_struct_definition",
		"s_shader_postprocess_bitmap_property",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "bitmap index" },
		{ _field_short_integer, "animated parameter index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_bitmap_transform_block_struct_definition,
		"shader_postprocess_bitmap_transform_block",
		"shader_postprocess_bitmap_transform_block_struct_definition",
		"s_shader_postprocess_bitmap_transform",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "parameter index" },
		{ _field_char_integer, "bitmap transform index" },
		{ _field_real, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_bitmap_transform_overlay_block_struct_definition,
		"shader_postprocess_bitmap_transform_overlay_block",
		"shader_postprocess_bitmap_transform_overlay_block_struct_definition",
		"s_shader_postprocess_bitmap_transform_overlay",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "parameter index" },
		{ _field_char_integer, "transform index" },
		{ _field_char_integer, "animation property type" },
		{ _field_string_id, "input name" },
		{ _field_string_id, "range name" },
		{ _field_real, "time period in seconds" },
		{ _field_struct, "function", &scalar_function_struct_struct_definition, _field_id_SCFN },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_color_block_struct_definition,
		"shader_postprocess_color_block",
		"shader_postprocess_color_block_struct_definition",
		"s_shader_postprocess_color",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "parameter index" },
		{ _field_real_rgb_color, "color" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_color_overlay_block_struct_definition,
		"shader_postprocess_color_overlay_block",
		"shader_postprocess_color_overlay_block_struct_definition",
		"s_shader_postprocess_color_overlay",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "parameter index" },
		{ _field_string_id, "input name" },
		{ _field_string_id, "range name" },
		{ _field_real, "time period in seconds" },
		{ _field_struct, "function", &color_function_struct_struct_definition, _field_id_CLFN },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_color_property_block_struct_definition,
		"shader_postprocess_color_property_block",
		"shader_postprocess_color_property_block_struct_definition",
		"s_shader_postprocess_color_property",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_rgb_color, "color" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_definition_new_block_struct_definition,
		"shader_postprocess_definition_new_block",
		"shader_postprocess_definition_new_block_struct_definition",
		"s_shader_postprocess_definition_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "shader template index" },
		{ _field_block, "bitmaps", &shader_postprocess_bitmap_new_block },
		{ _field_block, "pixel constants", &pixel32_block },
		{ _field_block, "vertex constants", &real_vector4d_block },
		{ _field_block, "levels of detail", &shader_postprocess_level_of_detail_new_block },
		{ _field_block, "layers", &tag_block_index_block },
		{ _field_block, "passes", &tag_block_index_block },
		{ _field_block, "implementations", &shader_postprocess_implementation_new_block },
		{ _field_block, "overlays", &shader_postprocess_overlay_new_block },
		{ _field_block, "overlay references", &shader_postprocess_overlay_reference_new_block },
		{ _field_block, "animated parameters", &shader_postprocess_animated_parameter_new_block },
		{ _field_block, "animated parameter references", &shader_postprocess_animated_parameter_reference_new_block },
		{ _field_block, "bitmap properties", &shader_postprocess_bitmap_property_block },
		{ _field_block, "color properties", &shader_postprocess_color_property_block },
		{ _field_block, "value properties", &shader_postprocess_value_property_block },
		{ _field_block, "old levels of detail", &shader_postprocess_level_of_detail_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_implementation_block_struct_definition,
		"shader_postprocess_implementation_block",
		"shader_postprocess_implementation_block_struct_definition",
		"s_shader_postprocess_implementation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "GPU constant state", &shader_gpu_state_reference_struct_struct_definition, _field_id_GPUR },
		{ _field_struct, "GPU volatile state", &shader_gpu_state_reference_struct_struct_definition, _field_id_GPUR },
		{ _field_struct, "bitmap parameters", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "bitmap transforms", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "value parameters", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "color parameters", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "bitmap transform overlays", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "value overlays", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "color overlays", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "vertex shader constants", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_implementation_new_block_struct_definition,
		"shader_postprocess_implementation_new_block",
		"shader_postprocess_implementation_new_block_struct_definition",
		"s_shader_postprocess_implementation_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "bitmap transforms", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "render states", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "texture states", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "pixel constants", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "vertex constants", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_layer_block_struct_definition,
		"shader_postprocess_layer_block",
		"shader_postprocess_layer_block_struct_definition",
		"s_shader_postprocess_layer",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "passes", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_level_of_detail_block_struct_definition,
		"shader_postprocess_level_of_detail_block",
		"shader_postprocess_level_of_detail_block_struct_definition",
		"s_shader_postprocess_level_of_detail",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "projected height percentage" },
		{ _field_long_integer, "available layers" },
		{ _field_block, "layers", &shader_postprocess_layer_block },
		{ _field_block, "passes", &shader_postprocess_pass_block },
		{ _field_block, "implementations", &shader_postprocess_implementation_block },
		{ _field_block, "bitmaps", &shader_postprocess_bitmap_block },
		{ _field_block, "bitmap transforms", &shader_postprocess_bitmap_transform_block },
		{ _field_block, "values", &shader_postprocess_value_block },
		{ _field_block, "colors", &shader_postprocess_color_block },
		{ _field_block, "bitmap transform overlays", &shader_postprocess_bitmap_transform_overlay_block },
		{ _field_block, "value overlays", &shader_postprocess_value_overlay_block },
		{ _field_block, "color overlays", &shader_postprocess_color_overlay_block },
		{ _field_block, "vertex shader constants", &shader_postprocess_vertex_shader_constant_block },
		{ _field_struct, "GPU state", &shader_gpu_state_struct_struct_definition, _field_id_GPUS },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_level_of_detail_new_block_struct_definition,
		"shader_postprocess_level_of_detail_new_block",
		"shader_postprocess_level_of_detail_new_block_struct_definition",
		"s_shader_postprocess_level_of_detail_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "available layer flags" },
		{ _field_struct, "layers", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_overlay_new_block_struct_definition,
		"shader_postprocess_overlay_new_block",
		"shader_postprocess_overlay_new_block_struct_definition",
		"s_shader_postprocess_overlay_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "input name" },
		{ _field_string_id, "range name" },
		{ _field_real, "time period in seconds" },
		{ _field_struct, "function", &scalar_function_struct_struct_definition, _field_id_SCFN },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_overlay_reference_new_block_struct_definition,
		"shader_postprocess_overlay_reference_new_block",
		"shader_postprocess_overlay_reference_new_block_struct_definition",
		"s_shader_postprocess_overlay_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "overlay index" },
		{ _field_short_integer, "transform index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_pass_block_struct_definition,
		"shader_postprocess_pass_block",
		"shader_postprocess_pass_block_struct_definition",
		"s_shader_postprocess_pass",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "shader pass", &shader_pass_group_reference },
		{ _field_struct, "implementations", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_terminator }
	};

	TAG_REFERENCE(shader_pass_group_reference, SHADER_PASS_TAG);

	TAG_STRUCT(
		shader_postprocess_pixel_shader_constant_defaults_struct_definition,
		"shader_postprocess_pixel_shader_constant_defaults",
		"shader_postprocess_pixel_shader_constant_defaults_struct_definition",
		"s_pixel_shader_constant_defaults",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "defaults" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_pixel_shader_struct_definition,
		"shader_postprocess_pixel_shader",
		"shader_postprocess_pixel_shader_struct_definition",
		"s_pixel_shader",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_pointer, "value" },
		{ _field_pointer, "value" },
		{ _field_pointer, "value" },
		{ _field_block, "constant register defaults", &shader_postprocess_pixel_shader_constant_defaults_block },
		{ _field_data, "compiled shader", &shader_postprocess_compiled_pixel_shader_data },
		{ _field_data, "compiled shader", &shader_postprocess_compiled_pixel_shader_data },
		{ _field_data, "compiled shader", &shader_postprocess_compiled_pixel_shader_data },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_value_block_struct_definition,
		"shader_postprocess_value_block",
		"shader_postprocess_value_block_struct_definition",
		"s_shader_postprocess_value",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "parameter index" },
		{ _field_real, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_value_overlay_block_struct_definition,
		"shader_postprocess_value_overlay_block",
		"shader_postprocess_value_overlay_block_struct_definition",
		"s_shader_postprocess_value_overlay",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "parameter index" },
		{ _field_string_id, "input name" },
		{ _field_string_id, "range name" },
		{ _field_real, "time period in seconds" },
		{ _field_struct, "function", &color_function_struct_struct_definition, _field_id_CLFN },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_value_property_block_struct_definition,
		"shader_postprocess_value_property_block",
		"shader_postprocess_value_property_block_struct_definition",
		"s_shader_postprocess_value_property",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_postprocess_vertex_shader_constant_block_struct_definition,
		"shader_postprocess_vertex_shader_constant_block",
		"shader_postprocess_vertex_shader_constant_block_struct_definition",
		"s_shader_vertex_shader_constant",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "register index" },
		{ _field_char_integer, "register bank" },
		{ _field_real, "data" },
		{ _field_real, "data" },
		{ _field_real, "data" },
		{ _field_real, "data" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_properties_block_struct_definition,
		"shader_properties_block",
		"shader_properties_block_struct_definition",
		"s_shader_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "diffuse map", &bitmap_group_reference },
		{ _field_tag_reference, "lightmap emissive map", &bitmap_group_reference },
		{ _field_real_rgb_color, "lightmap emissive color" },
		{ _field_real, "lightmap emissive power" },
		{ _field_real, "lightmap resolution scale" },
		{ _field_real, "lightmap half life" },
		{ _field_real, "lightmap diffuse scale" },
		{ _field_tag_reference, "alphatest map", &bitmap_group_reference },
		{ _field_tag_reference, "translucent map", &bitmap_group_reference },
		{ _field_real_rgb_color, "lightmap transparent color" },
		{ _field_real, "lightmap transparent alpha" },
		{ _field_real, "lightmap foliage scale" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_state_alpha_blend_state_block_struct_definition,
		"shader_state_alpha_blend_state_block",
		"shader_state_alpha_blend_state_block_struct_definition",
		"s_shader_state_alpha_blend_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "blend function", &unnamed_enum$467 },
		{ _field_short_enum, "blend src factor", &unnamed_enum$468 },
		{ _field_short_enum, "blend dst factor", &unnamed_enum$468 },
		FIELD_PAD("value", 2),
		{ _field_argb_color, "blend color" },
		{ _field_word_flags, "logic-op flags", &unnamed_enum$469 },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$467)
	{
		"add",
		"subtract",
		"reverse subtract",
		"min",
		"max",
		"add signed",
		"reverse subtract signed",
		"logic-op"
	};
	STRING_LIST(unnamed_enum$467, unnamed_enum$467_strings, _countof(unnamed_enum$467_strings));

	STRINGS(unnamed_enum$468)
	{
		"zero",
		"one",
		"srccolor",
		"srccolor inverse",
		"srcalpha",
		"srcalpha inverse",
		"dstcolor",
		"dstcolor inverse",
		"dstalpha",
		"dstalpha inverse",
		"srcalpha saturate",
		"constant color",
		"constant color inverse",
		"constant alpha",
		"constant alpha inverse"
	};
	STRING_LIST(unnamed_enum$468, unnamed_enum$468_strings, _countof(unnamed_enum$468_strings));

	STRINGS(unnamed_enum$469)
	{
		"src=0 dst=0",
		"src=0 dst=1",
		"src=1 dst=0",
		"src=1 dst=1"
	};
	STRING_LIST(unnamed_enum$469, unnamed_enum$469_strings, _countof(unnamed_enum$469_strings));

	TAG_STRUCT(
		shader_state_alpha_test_state_block_struct_definition,
		"shader_state_alpha_test_state_block",
		"shader_state_alpha_test_state_block_struct_definition",
		"s_shader_state_alpha_test_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$470 },
		{ _field_short_enum, "alpha compare function", &unnamed_enum$471 },
		{ _field_short_integer, "alpha-test ref", nullptr, nullptr, "[0,255]" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$470)
	{
		"alpha-test enabled",
		"sample-alpha to coverage",
		"sample-alpha to one"
	};
	STRING_LIST(unnamed_enum$470, unnamed_enum$470_strings, _countof(unnamed_enum$470_strings));

	STRINGS(unnamed_enum$471)
	{
		"never",
		"less",
		"equal",
		"less or equal",
		"greater",
		"not equal",
		"greater or equal",
		"always"
	};
	STRING_LIST(unnamed_enum$471, unnamed_enum$471_strings, _countof(unnamed_enum$471_strings));

	TAG_STRUCT(
		shader_state_channels_state_block_struct_definition,
		"shader_state_channels_state_block",
		"shader_state_channels_state_block_struct_definition",
		"s_shader_state_channels_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$466 },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$466)
	{
		"R",
		"G",
		"B",
		"A"
	};
	STRING_LIST(unnamed_enum$466, unnamed_enum$466_strings, _countof(unnamed_enum$466_strings));

	TAG_STRUCT(
		shader_state_constant_block_struct_definition,
		"shader_state_constant_block",
		"shader_state_constant_block_struct_definition",
		"s_shader_state_constant$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "source parameter" },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "constant", &unnamed_enum$479 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$479)
	{
		"constant blend color",
		"constant blend alpha (value)",
		"alpha-test ref (value)",
		"depth bias slope scale (value)",
		"depth bias (value)",
		"line width (value)",
		"fog color"
	};
	STRING_LIST(unnamed_enum$479, unnamed_enum$479_strings, _countof(unnamed_enum$479_strings));

	TAG_STRUCT(
		shader_state_cull_state_block_struct_definition,
		"shader_state_cull_state_block",
		"shader_state_cull_state_block_struct_definition",
		"s_shader_state_cull_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "mode", &unnamed_enum$474 },
		{ _field_short_enum, "front face", &unnamed_enum$475 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$474)
	{
		"none",
		"CW",
		"CCW"
	};
	STRING_LIST(unnamed_enum$474, unnamed_enum$474_strings, _countof(unnamed_enum$474_strings));

	STRINGS(unnamed_enum$475)
	{
		"CW",
		"CCW"
	};
	STRING_LIST(unnamed_enum$475, unnamed_enum$475_strings, _countof(unnamed_enum$475_strings));

	TAG_STRUCT(
		shader_state_depth_state_block_struct_definition,
		"shader_state_depth_state_block",
		"shader_state_depth_state_block_struct_definition",
		"s_shader_state_depth_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "mode", &unnamed_enum$472 },
		{ _field_short_enum, "depth compare function", &unnamed_enum$471 },
		{ _field_word_flags, "flags", &unnamed_enum$473 },
		FIELD_PAD("value", 2),
		{ _field_real, "depth bias slope scale" },
		{ _field_real, "depth bias" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$472)
	{
		"use Z",
		"use W"
	};
	STRING_LIST(unnamed_enum$472, unnamed_enum$472_strings, _countof(unnamed_enum$472_strings));

	STRINGS(unnamed_enum$473)
	{
		"depth write",
		"offset points",
		"offset lines",
		"offset triangles",
		"clip control don\'t cull primitive",
		"clip control clamp",
		"clip control ignore W sign"
	};
	STRING_LIST(unnamed_enum$473, unnamed_enum$473_strings, _countof(unnamed_enum$473_strings));

	TAG_STRUCT(
		shader_state_fill_state_block_struct_definition,
		"shader_state_fill_state_block",
		"shader_state_fill_state_block_struct_definition",
		"s_shader_state_fill_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$476 },
		{ _field_short_enum, "fill mode", &unnamed_enum$477 },
		{ _field_short_enum, "back fill mode", &unnamed_enum$477 },
		FIELD_PAD("value", 2),
		{ _field_real, "line width" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$476)
	{
		"flat shading",
		"edge antialiasing"
	};
	STRING_LIST(unnamed_enum$476, unnamed_enum$476_strings, _countof(unnamed_enum$476_strings));

	STRINGS(unnamed_enum$477)
	{
		"solid",
		"wireframe",
		"points"
	};
	STRING_LIST(unnamed_enum$477, unnamed_enum$477_strings, _countof(unnamed_enum$477_strings));

	TAG_STRUCT(
		shader_state_misc_state_block_struct_definition,
		"shader_state_misc_state_block",
		"shader_state_misc_state_block_struct_definition",
		"s_shader_state_misc_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$478 },
		FIELD_PAD("value", 2),
		{ _field_rgb_color, "fog color" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$478)
	{
		"YUV to RGB",
		"16-bit dither",
		"32-bit DXT1 noise"
	};
	STRING_LIST(unnamed_enum$478, unnamed_enum$478_strings, _countof(unnamed_enum$478_strings));

	TAG_STRUCT(
		shader_template_block_struct_definition,
		"shader_template_block",
		"shader_template_block_struct_definition",
		"s_shader_template_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_data, "documentation", &shader_text_definition },
		{ _field_string_id, "default material name", _field_id_sted },
		FIELD_EXPLANATION("FLAGS", "* Force active-camo: Should be used WITH CAUTION as this causes a backbuffer copy when this shader is rendered.\n* Water: ???\n* Foliage: Used with lightmapped foliage (two-sided lighting) shaders, affects importing but not rendering."),
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$482 },
		{ _field_block, "properties", &shader_template_property_block },
		{ _field_block, "categories", &shader_template_category_block },
		FIELD_EXPLANATION("LIGHT RESPONSE", "Not used anymore."),
		{ _field_tag_reference, "light response", &shader_light_response_group_reference },
		{ _field_block, "LODs", &shader_template_level_of_detail_block },
		{ _field_block, "value", &shader_template_runtime_external_light_response_index_block },
		{ _field_block, "value", &shader_template_runtime_external_light_response_index_block },
		FIELD_EXPLANATION("RECURSIVE RENDERING", "Really cool stuff, ask Bernie."),
		{ _field_tag_reference, "aux-1 shader", &shader_group_reference },
		{ _field_short_enum, "aux-1 layer", &unnamed_enum$435 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "aux-2 shader", &shader_group_reference },
		{ _field_short_enum, "aux-2 layer", &unnamed_enum$435 },
		FIELD_PAD("value", 2),
		{ _field_block, "postprocess definition", &shader_template_postprocess_definition_new_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$482)
	{
		"force active-camo",
		"water",
		"foliage",
		"hide standard parameters"
	};
	STRING_LIST(unnamed_enum$482, unnamed_enum$482_strings, _countof(unnamed_enum$482_strings));

	STRINGS(unnamed_enum$435)
	{
		"texaccum",
		"environment map",
		"self-illumination",
		"overlay",
		"transparent",
		"lightmap (indirect)",
		"diffuse",
		"specular",
		"shadow generate",
		"shadow apply",
		"bloom",
		"fog",
		"sh prt",
		"active camo",
		"water edge blend",
		"decal",
		"active camo stencil modulate",
		"hologram",
		"light albedo"
	};
	STRING_LIST(unnamed_enum$435, unnamed_enum$435_strings, _countof(unnamed_enum$435_strings));

	TAG_STRUCT(
		shader_template_category_block_struct_definition,
		"shader_template_category_block",
		"shader_template_category_block_struct_definition",
		"s_shader_template_category",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_block, "parameters", &shader_template_parameter_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_template_level_of_detail_block_struct_definition,
		"shader_template_level_of_detail_block",
		"shader_template_level_of_detail_block_struct_definition",
		"s_shader_template_level_of_detail",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "projected diameter", nullptr, "pixels" },
		{ _field_block, "pass", &shader_template_pass_reference_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_template_parameter_block_struct_definition,
		"shader_template_parameter_block",
		"shader_template_parameter_block_struct_definition",
		"s_shader_template_parameter",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_data, "explanation", &shader_text_definition },
		{ _field_short_enum, "type", &unnamed_enum$365 },
		{ _field_word_flags, "flags", &unnamed_enum$432 },
		{ _field_tag_reference, "default bitmap", &bitmap_group_reference },
		{ _field_real, "default const value" },
		{ _field_real_rgb_color, "default const color" },
		{ _field_short_enum, "bitmap type", &unnamed_enum$433 },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "bitmap animation flags", &unnamed_enum$434 },
		FIELD_PAD("value", 2),
		{ _field_real, "bitmap scale" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$432)
	{
		"animated",
		"hide bitmap reference"
	};
	STRING_LIST(unnamed_enum$432, unnamed_enum$432_strings, _countof(unnamed_enum$432_strings));

	STRINGS(unnamed_enum$433)
	{
		"2D",
		"3D",
		"cube map"
	};
	STRING_LIST(unnamed_enum$433, unnamed_enum$433_strings, _countof(unnamed_enum$433_strings));

	STRINGS(unnamed_enum$434)
	{
		"scale uniform",
		"scale",
		"translation",
		"rotation",
		"index"
	};
	STRING_LIST(unnamed_enum$434, unnamed_enum$434_strings, _countof(unnamed_enum$434_strings));

	TAG_STRUCT(
		shader_template_pass_reference_block_struct_definition,
		"shader_template_pass_reference_block",
		"shader_template_pass_reference_block_struct_definition",
		"s_shader_template_pass_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "layer", &unnamed_enum$435 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "pass", &shader_pass_group_reference$2 },
		FIELD_PAD("value", 12),
		{ _field_terminator }
	};

	TAG_REFERENCE(shader_pass_group_reference$2, SHADER_PASS_TAG);

	TAG_STRUCT(
		shader_template_postprocess_definition_new_block_struct_definition,
		"shader_template_postprocess_definition_new_block",
		"shader_template_postprocess_definition_new_block_struct_definition",
		"s_shader_template_postprocess_definition_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "levels of detail", &shader_template_postprocess_level_of_detail_new_block },
		{ _field_block, "layers", &tag_block_index_block },
		{ _field_block, "passes", &shader_template_postprocess_pass_new_block },
		{ _field_block, "implementations", &shader_template_postprocess_implementation_new_block },
		{ _field_block, "remappings", &shader_template_postprocess_remapping_new_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_template_postprocess_implementation_new_block_struct_definition,
		"shader_template_postprocess_implementation_new_block",
		"shader_template_postprocess_implementation_new_block_struct_definition",
		"s_shader_template_postprocess_implementation_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "bitmaps", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "pixel constants", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_struct, "vertex constants", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_template_postprocess_level_of_detail_new_block_struct_definition,
		"shader_template_postprocess_level_of_detail_new_block",
		"shader_template_postprocess_level_of_detail_new_block_struct_definition",
		"s_shader_template_postprocess_level_of_detail_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "layers", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_long_integer, "available layers" },
		{ _field_real, "projected height percentage" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_template_postprocess_pass_new_block_struct_definition,
		"shader_template_postprocess_pass_new_block",
		"shader_template_postprocess_pass_new_block_struct_definition",
		"s_shader_template_postprocess_pass_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "pass", &shader_pass_group_reference },
		{ _field_struct, "implementations", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_template_postprocess_remapping_new_block_struct_definition,
		"shader_template_postprocess_remapping_new_block",
		"shader_template_postprocess_remapping_new_block_struct_definition",
		"s_shader_template_postprocess_remapping_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_SKIP("value", 3),
		{ _field_char_integer, "source index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_template_property_block_struct_definition,
		"shader_template_property_block",
		"shader_template_property_block_struct_definition",
		"s_shader_template_property",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "property", &unnamed_enum$483 },
		FIELD_PAD("value", 2),
		{ _field_string_id, "parameter name" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$483)
	{
		"unused",
		"diffuse map",
		"lightmap emissive map",
		"lightmap emissive color",
		"lightmap emissive power",
		"lightmap resolution scale",
		"lightmap half life",
		"lightmap diffuse scale",
		"lightmap alphatest map",
		"lightmap translucent map",
		"lightmap translucent color",
		"lightmap translucent alpha",
		"active camo map",
		"lightmap foliage scale"
	};
	STRING_LIST(unnamed_enum$483, unnamed_enum$483_strings, _countof(unnamed_enum$483_strings));

	TAG_STRUCT(
		shader_template_runtime_external_light_response_index_block_struct_definition,
		"shader_template_runtime_external_light_response_index_block",
		"shader_template_runtime_external_light_response_index_block_struct_definition",
		"s_long$7",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		shader_texture_state_address_state_block_struct_definition,
		"shader_texture_state_address_state_block",
		"shader_texture_state_address_state_block_struct_definition",
		"s_shader_texture_state_address_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "U address mode", &unnamed_enum$453 },
		{ _field_short_enum, "V address mode", &unnamed_enum$453 },
		{ _field_short_enum, "W address mode", &unnamed_enum$453 },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$453)
	{
		"wrap",
		"mirror",
		"clamp",
		"border",
		"clamp to edge"
	};
	STRING_LIST(unnamed_enum$453, unnamed_enum$453_strings, _countof(unnamed_enum$453_strings));

	TAG_STRUCT(
		shader_texture_state_constant_block_struct_definition,
		"shader_texture_state_constant_block",
		"shader_texture_state_constant_block_struct_definition",
		"s_shader_state_constant",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "source parameter" },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "constant", &unnamed_enum$459 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$459)
	{
		"mipmap bias (value)",
		"colorkey color",
		"border color",
		"border alpha (value)",
		"bumpenv mat[0][0]",
		"bumpenv mat[0][1]",
		"bumpenv mat[1][0]",
		"bumpenv mat[1][1]",
		"bumpenv lum scale (value)",
		"bumpenv lum offset (value)"
	};
	STRING_LIST(unnamed_enum$459, unnamed_enum$459_strings, _countof(unnamed_enum$459_strings));

	TAG_STRUCT(
		shader_texture_state_filter_state_block_struct_definition,
		"shader_texture_state_filter_state_block",
		"shader_texture_state_filter_state_block_struct_definition",
		"s_shader_texture_state_filter_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "mag filter", &unnamed_enum$454 },
		{ _field_short_enum, "min filter", &unnamed_enum$454 },
		{ _field_short_enum, "mip filter", &unnamed_enum$454 },
		FIELD_PAD("value", 2),
		{ _field_real, "mipmap bias" },
		{ _field_short_integer, "max mipmap index", "0 means all mipmap levels are used" },
		{ _field_short_enum, "anisotropy", &unnamed_enum$455 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$454)
	{
		"none",
		"point sampled",
		"linear",
		"anisotropic",
		"quincunx",
		"gaussian cubic"
	};
	STRING_LIST(unnamed_enum$454, unnamed_enum$454_strings, _countof(unnamed_enum$454_strings));

	STRINGS(unnamed_enum$455)
	{
		"non anisotropic",
		"2-tap",
		"3-tap",
		"4-tap"
	};
	STRING_LIST(unnamed_enum$455, unnamed_enum$455_strings, _countof(unnamed_enum$455_strings));

	TAG_STRUCT(
		shader_texture_state_kill_state_block_struct_definition,
		"shader_texture_state_kill_state_block",
		"shader_texture_state_kill_state_block_struct_definition",
		"s_shader_texture_state_kill_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "flags", &unnamed_enum$456 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "colorkey mode", &unnamed_enum$457 },
		FIELD_PAD("value", 2),
		{ _field_rgb_color, "colorkey color" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$456)
	{
		"alpha kill"
	};
	STRING_LIST(unnamed_enum$456, unnamed_enum$456_strings, _countof(unnamed_enum$456_strings));

	STRINGS(unnamed_enum$457)
	{
		"disabled",
		"zero alpha",
		"zero ARGB",
		"kill"
	};
	STRING_LIST(unnamed_enum$457, unnamed_enum$457_strings, _countof(unnamed_enum$457_strings));

	TAG_STRUCT(
		shader_texture_state_misc_state_block_struct_definition,
		"shader_texture_state_misc_state_block",
		"shader_texture_state_misc_state_block_struct_definition",
		"s_shader_texture_state_misc_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "component sign flags", &unnamed_enum$458 },
		FIELD_PAD("value", 2),
		{ _field_argb_color, "border color" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$458)
	{
		"R signed",
		"G signed",
		"B signed",
		"A signed"
	};
	STRING_LIST(unnamed_enum$458, unnamed_enum$458_strings, _countof(unnamed_enum$458_strings));

	TAG_STRUCT(
		shape_block_reference_block_struct_definition,
		"shape_block_reference_block",
		"shape_block_reference_block_struct_definition",
		"s_shape_block_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$552 },
		{ _field_short_enum, "animation index", &unnamed_enum$424 },
		{ _field_short_integer, "intro animation delay milliseconds" },
		{ _field_real_argb_color, "color" },
		{ _field_block, "points", &point_block_reference_block },
		{ _field_short_integer, "render depth bias" },
		FIELD_PAD("value", 14),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$552)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$552, unnamed_enum$552_strings, _countof(unnamed_enum$552_strings));

	TAG_STRUCT(
		shape_group_reference_block_struct_definition,
		"shape_group_reference_block",
		"shape_group_reference_block_struct_definition",
		"s_shape_group_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("Unused Debug Geometry Shapes", "This is the old way"),
		{ _field_block, "shapes", &shape_block_reference_block },
		FIELD_EXPLANATION("Model-Light Groups", "Specify commonly used model/light groups here"),
		{ _field_block, "model scene blocks", &ui_model_scene_reference_block },
		FIELD_EXPLANATION("Bitmaps", "Specify more flavor bitmaps here"),
		{ _field_block, "bitmap blocks", &bitmap_block_reference_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		simple_platform_sound_playback_struct_struct_definition,
		"simple_platform_sound_playback_struct",
		"simple_platform_sound_playback_struct_struct_definition",
		"s_platform_sound_playback_definition$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "value", &platform_sound_override_mixbins_block },
		{ _field_long_flags, "flags", &unnamed_enum$413 },
		FIELD_PAD("value", 8),
		{ _field_block, "filter", &platform_sound_filter_block },
		{ _field_block, "pitch lfo", &platform_sound_pitch_lfo_block },
		{ _field_block, "filter lfo", &platform_sound_filter_lfo_block },
		{ _field_block, "sound effect", &sound_effect_playback_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		single_animation_reference_block_struct_definition,
		"single_animation_reference_block",
		"single_animation_reference_block_struct_definition",
		"s_single_animation_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$422 },
		{ _field_long_integer, "animation period", nullptr, "milliseconds" },
		{ _field_block, "keyframes", &screen_animation_keyframe_reference_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$422)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$422, unnamed_enum$422_strings, _countof(unnamed_enum$422_strings));

	TAG_STRUCT(
		skill_to_rank_mapping_block_struct_definition,
		"skill_to_rank_mapping_block",
		"skill_to_rank_mapping_block_struct_definition",
		"s_skill_to_rank_mapping",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer_bounds, "skill bounds" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sky_animation_block_struct_definition,
		"sky_animation_block",
		"sky_animation_block_struct_definition",
		"s_sky_animation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "animation index", "the index of the animation in the animation graph" },
		FIELD_PAD("value", 2),
		{ _field_real, "period", nullptr, "seconds" },
		FIELD_PAD("value", 28),
		{ _field_terminator }
	};

	TAG_STRUCT(
		sky_atmospheric_fog_block_struct_definition,
		"sky_atmospheric_fog_block",
		"sky_atmospheric_fog_block_struct_definition",
		"s_sky_atmospheric_fog",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_rgb_color, "color" },
		{ _field_real_fraction, "maximum density", "fog density is clamped to this value", nullptr, "[0,1]" },
		{ _field_real, "start distance", "before this distance there is no fog", "world units" },
		{ _field_real, "opaque distance", "the fog becomes opaque (maximum density) at this distance from the viewer", "world units" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sky_block_struct_definition,
		"sky_block",
		"sky_block_struct_definition",
		"s_sky_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "render model", &render_model_group_reference$4 },
		{ _field_tag_reference, "animation graph", &model_animation_graph_group_reference },
		{ _field_long_flags, "flags", &unnamed_enum$430 },
		{ _field_real, "render model scale", "multiplier to scale the model's geometry up or down by (zero defaults to 'standard', 0.03)" },
		{ _field_real, "movement scale", "how much the sky moves to remain centered on the player (zero defaults to 1.0, which means no parallax)" },
		{ _field_block, "cubemap", &sky_cubemap_block },
		FIELD_EXPLANATION("AMBIENT LIGHT", nullptr),
		{ _field_real_rgb_color, "indoor ambient color", "the indoor ambient light color" },
		FIELD_PAD("value", 4),
		{ _field_real_rgb_color, "outdoor ambient color", "the indoor ambient light color" },
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("FOG", nullptr),
		{ _field_real, "fog spread distance", "how far fog spreads into adjacent clusters", "world units" },
		{ _field_block, "atmospheric fog", &sky_atmospheric_fog_block },
		{ _field_block, "secondary fog", &sky_atmospheric_fog_block },
		{ _field_block, "sky fog", &sky_fog_block },
		{ _field_block, "patchy fog", &sky_patchy_fog_block },
		FIELD_EXPLANATION("BLOOM OVERRIDE", nullptr),
		{ _field_real_fraction, "amount", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "brightness", nullptr, nullptr, "[0,1]" },
		{ _field_real, "gamma power" },
		{ _field_block, "lights", &sky_light_block },
		FIELD_EXPLANATION("ROTATION", nullptr),
		{ _field_angle, "global sky rotation" },
		{ _field_block, "shader functions", &sky_shader_function_block },
		{ _field_block, "animations", &sky_animation_block },
		FIELD_PAD("value", 12),
		{ _field_real_rgb_color, "clear color" },
		{ _field_terminator }
	};

	TAG_REFERENCE(render_model_group_reference$4, RENDER_MODEL_TAG);

	STRINGS(unnamed_enum$430)
	{
		"fixed in worldspace",
		"depreciated",
		"sky casts light from below",
		"disable sky in lightmaps",
		"fog only affects containing clusters",
		"use clear color"
	};
	STRING_LIST(unnamed_enum$430, unnamed_enum$430_strings, _countof(unnamed_enum$430_strings));

	TAG_STRUCT(
		sky_cubemap_block_struct_definition,
		"sky_cubemap_block",
		"sky_cubemap_block_struct_definition",
		"s_sky_cubemap",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "cubemap reference", &bitmap_group_reference$7 },
		{ _field_real, "power scale", "0 defaults to 1" },
		{ _field_terminator }
	};

	TAG_REFERENCE(bitmap_group_reference$7, BITMAP_TAG);

	TAG_STRUCT(
		sky_fog_block_struct_definition,
		"sky_fog_block",
		"sky_fog_block_struct_definition",
		"s_sky_fog",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_rgb_color, "color" },
		{ _field_real_fraction, "density", "fog density is clamped to this value", nullptr, "[0,1]" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sky_light_block_struct_definition,
		"sky_light_block",
		"sky_light_block_struct_definition",
		"s_sky_light",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_vector_3d, "direction vector" },
		{ _field_real_euler_angles_2d, "direction" },
		{ _field_tag_reference, "lens flare", &lens_flare_group_reference$2 },
		{ _field_block, "fog", &sky_light_fog_block },
		{ _field_block, "fog opposite", "fog from the opposite direction", &sky_light_fog_block },
		{ _field_block, "radiosity", &sky_radiosity_light_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(lens_flare_group_reference$2, LENS_FLARE_TAG);

	TAG_STRUCT(
		sky_light_fog_block_struct_definition,
		"sky_light_fog_block",
		"sky_light_fog_block_struct_definition",
		"s_sky_light_fog",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_rgb_color, "color" },
		{ _field_real_fraction, "maximum density", "fog density is clamped to this value", nullptr, "[0,1]" },
		{ _field_real, "start distance", "before this distance there is no fog", "world units" },
		{ _field_real, "opaque distance", "the fog becomes opaque (maximum density) at this distance from the viewer", "world units" },
		FIELD_EXPLANATION("FOG INFLUENCES", nullptr),
		{ _field_angle_bounds, "cone", nullptr, "degrees" },
		{ _field_real_fraction, "atmospheric fog influence", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "secondary fog influence", nullptr, nullptr, "[0,1]" },
		{ _field_real_fraction, "sky fog influence", nullptr, nullptr, "[0,1]" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sky_patchy_fog_block_struct_definition,
		"sky_patchy_fog_block",
		"sky_patchy_fog_block_struct_definition",
		"s_sky_patchy_fog",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_rgb_color, "color" },
		FIELD_PAD("value", 12),
		{ _field_real_fraction_bounds, "density", nullptr, nullptr, "[0,1]" },
		{ _field_real_bounds, "distance", nullptr, "world units" },
		FIELD_PAD("value", 32),
		{ _field_tag_reference, "patchy fog", &patchy_fog_group_reference$3 },
		{ _field_terminator }
	};

	TAG_REFERENCE(patchy_fog_group_reference$3, PATCHY_FOG_TAG);

	TAG_STRUCT(
		sky_radiosity_light_block_struct_definition,
		"sky_radiosity_light_block",
		"sky_radiosity_light_block_struct_definition",
		"s_sky_radiosity_light",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$431 },
		{ _field_real_rgb_color, "color", "light color" },
		{ _field_real, "power", "light power from 0 to infinity", nullptr, "[0,+inf]" },
		{ _field_real, "test distance", "the length of the ray for shadow testing", "world units" },
		FIELD_PAD("value", 12),
		{ _field_angle, "diameter", "angular diameter of the light source in the sky", "degrees" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$431)
	{
		"affects exteriors",
		"affects interiors",
		"direct illumination in lightmaps",
		"indirect illumination in lightmaps"
	};
	STRING_LIST(unnamed_enum$431, unnamed_enum$431_strings, _countof(unnamed_enum$431_strings));

	TAG_STRUCT(
		sky_shader_function_block_struct_definition,
		"sky_shader_function_block",
		"sky_shader_function_block_struct_definition",
		"s_sky_shader_function",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 4),
		{ _field_string, "global function name", "the global function that controls this shader value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		small_bsp3d_nodes_block_struct_definition,
		"small_bsp3d_nodes_block",
		"small_bsp3d_nodes_block_struct_definition",
		"s_small_bsp3d_node",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		3)
	{
		{ _field_short_integer, "plane" },
		FIELD_PAD("value", 2),
		{ _field_short_integer, "back child" },
		{ _field_short_integer, "front child" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_block_struct_definition,
		"sound_block",
		"sound_block_struct_definition",
		"s_tag_reference$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "sound (OBSOLETE)", &_reference$3 },
		{ _field_terminator }
	};

	TAG_REFERENCE(_reference$3, INVALID_TAG);

	TAG_STRUCT(
		sound_cache_file_gestalt_block_struct_definition,
		"sound_cache_file_gestalt_block",
		"sound_cache_file_gestalt_block_struct_definition",
		"s_sound_cache_file_gestalt_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "codecs", &sound_gestalt_codec_block },
		{ _field_block, "playbacks", &sound_gestalt_playback_block },
		{ _field_block, "scales", &sound_gestalt_scale_block },
		{ _field_block, "import names", &sound_gestalt_import_names_block },
		{ _field_block, "pitch range parameters", &sound_gestalt_pitch_range_parameters_block },
		{ _field_block, "pitch ranges", &sound_gestalt_pitch_ranges_block },
		{ _field_block, "permutations", &sound_gestalt_permutations_block },
		{ _field_block, "custom playbacks", &sound_gestalt_custom_playback_block },
		{ _field_block, "reflections", &sound_gestalt_reflections_block },
		{ _field_block, "lowpass cut off parameters", &sound_gestalt_lowpass_block },
		{ _field_block, "remastered sound", &sound_gestalt_remastered_sound_references_block },
		{ _field_block, "runtime permutation flags", &sound_gestalt_runtime_permutation_bit_vector_block },
		{ _field_block, "language_chunks", &sound_gestalt_language_chunks_block },
		{ _field_block, "promotions", &sound_gestalt_promotions_block },
		{ _field_block, "extra infos", &sound_gestalt_extra_info_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		sound_class_block_v4_struct_definition,
		"sound_class_block_v4",
		"sound_class_block_v4_struct_definition",
		"s_sound_class_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 3, 31 },
		{ _field_short_integer, "max sounds per tag", "maximum number of sounds playing per individual sound tag" },
		{ _field_short_integer, "max sounds per object", "maximum number of sounds of this type playing on an object" },
		{ _field_long_integer, "preemption time", "replaces other instances after this many milliseconds", "ms" },
		{ _field_word_flags, "internal flags", &unnamed_enum$436 },
		{ _field_word_flags, "flags", &unnamed_enum$437 },
		{ _field_short_integer, "priority" },
		{ _field_short_enum, "cache miss mode", &unnamed_enum$438 },
		{ _field_real, "reverb gain", "how much reverb applies to this sound class", "dB", _field_id_decibels },
		{ _field_real, "override speaker gain", nullptr, "dB", _field_id_decibels },
		{ _field_real_bounds, "distance bounds" },
		FIELD_CUSTOM("Update gain bounds", _field_id_edit),
		{ _field_real_bounds, "gain bounds", nullptr, "dB", _field_id_decibels },
		{ _field_real, "cutscene ducking", nullptr, "dB", _field_id_decibels },
		{ _field_real, "cutscene ducking fade in time", nullptr, "seconds" },
		{ _field_real, "cutscene ducking sustain time", "how long this lasts after the cutscene ends", "seconds" },
		{ _field_real, "cutscene ducking fade out time", nullptr, "seconds" },
		{ _field_real, "scripted dialog ducking", nullptr, "dB", _field_id_decibels },
		{ _field_real, "scripted dialog ducking fade in time", nullptr, "seconds" },
		{ _field_real, "scripted dialog ducking sustain time", "how long this lasts after the scripted dialog ends", "seconds" },
		{ _field_real, "scripted dialog ducking fade out time", nullptr, "seconds" },
		{ _field_real, "doppler factor" },
		{ _field_char_enum, "stereo playback type", &unnamed_enum$439 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 2),
		{ _field_real, "transmission multiplier" },
		{ _field_real, "obstruction max bend" },
		{ _field_real, "occlusion max bend" },
		{ _field_real, "inner_silence_distance" },
		FIELD_EXPLANATION("low pass filter parameters", nullptr),
		{ _field_struct, "lowpass cut off parameters", &sound_lowpass_struct_struct_definition, _field_id_slpp },
		{ _field_block, "ext ducking", &sound_class_ducker_block_definition_block },
		
		{ _struct_version_mode_equal, 2, 30 },
		{ _field_short_integer, "max sounds per tag", "maximum number of sounds playing per individual sound tag" },
		{ _field_short_integer, "max sounds per object", "maximum number of sounds of this type playing on an object" },
		{ _field_long_integer, "preemption time", "replaces other instances after this many milliseconds", "ms" },
		{ _field_word_flags, "internal flags", &unnamed_enum$436 },
		{ _field_word_flags, "flags", &unnamed_enum$437 },
		{ _field_short_integer, "priority" },
		{ _field_short_enum, "cache miss mode", &unnamed_enum$438 },
		{ _field_real, "reverb gain", "how much reverb applies to this sound class", "dB", _field_id_decibels },
		{ _field_real, "override speaker gain", nullptr, "dB", _field_id_decibels },
		{ _field_real_bounds, "distance bounds" },
		FIELD_CUSTOM("Update gain bounds", _field_id_edit),
		{ _field_real_bounds, "gain bounds", nullptr, "dB", _field_id_decibels },
		{ _field_real, "cutscene ducking", nullptr, "dB", _field_id_decibels },
		{ _field_real, "cutscene ducking fade in time", nullptr, "seconds" },
		{ _field_real, "cutscene ducking sustain time", "how long this lasts after the cutscene ends", "seconds" },
		{ _field_real, "cutscene ducking fade out time", nullptr, "seconds" },
		{ _field_real, "scripted dialog ducking", nullptr, "dB", _field_id_decibels },
		{ _field_real, "scripted dialog ducking fade in time", nullptr, "seconds" },
		{ _field_real, "scripted dialog ducking sustain time", "how long this lasts after the scripted dialog ends", "seconds" },
		{ _field_real, "scripted dialog ducking fade out time", nullptr, "seconds" },
		{ _field_real, "doppler factor" },
		{ _field_char_enum, "stereo playback type", &unnamed_enum$439 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 2),
		{ _field_real, "transmission multiplier" },
		{ _field_real, "obstruction max bend" },
		{ _field_real, "occlusion max bend" },
		{ _field_real, "inner_silence_distance" },
		FIELD_EXPLANATION("low pass filter parameters", nullptr),
		{ _field_struct, "lowpass cut off parameters", &sound_lowpass_struct_struct_definition, _field_id_slpp },
		
		{ _struct_version_mode_equal, 1, 28 },
		{ _field_short_integer, "max sounds per tag", "maximum number of sounds playing per individual sound tag" },
		{ _field_short_integer, "max sounds per object", "maximum number of sounds of this type playing on an object" },
		{ _field_long_integer, "preemption time", "replaces other instances after this many milliseconds", "ms" },
		{ _field_word_flags, "internal flags", &unnamed_enum$436 },
		{ _field_word_flags, "flags", &unnamed_enum$437 },
		{ _field_short_integer, "priority" },
		{ _field_short_enum, "cache miss mode", &unnamed_enum$438 },
		{ _field_real, "reverb gain", "how much reverb applies to this sound class", "dB", _field_id_decibels },
		{ _field_real, "override speaker gain", nullptr, "dB", _field_id_decibels },
		{ _field_real_bounds, "distance bounds" },
		FIELD_CUSTOM("Update gain bounds", _field_id_edit),
		{ _field_real_bounds, "gain bounds", nullptr, "dB", _field_id_decibels },
		{ _field_real, "cutscene ducking", nullptr, "dB", _field_id_decibels },
		{ _field_real, "cutscene ducking fade in time", nullptr, "seconds" },
		{ _field_real, "cutscene ducking sustain time", "how long this lasts after the cutscene ends", "seconds" },
		{ _field_real, "cutscene ducking fade out time", nullptr, "seconds" },
		{ _field_real, "scripted dialog ducking", nullptr, "dB", _field_id_decibels },
		{ _field_real, "scripted dialog ducking fade in time", nullptr, "seconds" },
		{ _field_real, "scripted dialog ducking sustain time", "how long this lasts after the scripted dialog ends", "seconds" },
		{ _field_real, "scripted dialog ducking fade out time", nullptr, "seconds" },
		{ _field_real, "doppler factor" },
		{ _field_char_enum, "stereo playback type", &unnamed_enum$439 },
		FIELD_PAD("value", 1),
		{ _field_short_integer, "lowpass cut off frequency" },
		{ _field_real, "transmission multiplier" },
		{ _field_real, "obstruction max bend" },
		{ _field_real, "occlusion max bend" },
		{ _field_real, "inner_silence_distance" },
		
		{ _struct_version_mode_equal, 0, 1 },
		FIELD_PAD("value", 92),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$436)
	{
		"valid",
		"is speech",
		"scripted",
		"stops with object",
		"unused",
		"valid doppler factor",
		"valid obstruction factor",
		"multilingual"
	};
	STRING_LIST(unnamed_enum$436, unnamed_enum$436_strings, _countof(unnamed_enum$436_strings));

	STRINGS(unnamed_enum$437)
	{
		"plays during pause",
		"dry stereo mix",
		"no object obstruction",
		"use center speaker unspatialized",
		"send (mono) to lfe",
		"deterministic",
		"use huge transmission",
		"always use speakers",
		"don\'t strip from main menu",
		"ignore stereo headroom",
		"loop fade out is linear",
		"stop when object dies",
		"allow cache file editing",
		"bypass lfe"
	};
	STRING_LIST(unnamed_enum$437, unnamed_enum$437_strings, _countof(unnamed_enum$437_strings));

	STRINGS(unnamed_enum$438)
	{
		"discard",
		"postpone"
	};
	STRING_LIST(unnamed_enum$438, unnamed_enum$438_strings, _countof(unnamed_enum$438_strings));

	STRINGS(unnamed_enum$439)
	{
		"first person",
		"ambient"
	};
	STRING_LIST(unnamed_enum$439, unnamed_enum$439_strings, _countof(unnamed_enum$439_strings));

	TAG_STRUCT(
		sound_class_ducker_block_definition_struct_definition,
		"sound_class_ducker_block_definition",
		"sound_class_ducker_block_definition_struct_definition",
		"s_sound_class_ext_ducker",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_enum, "sound class", &unnamed_enum$440 },
		{ _field_real, "ducking", nullptr, "dB", _field_id_decibels },
		{ _field_real, "ducking fade in time", nullptr, "seconds" },
		{ _field_real, "ducking sustain time", "how long this lasts after the sound ends", "seconds" },
		{ _field_real, "ducking fade out time", nullptr, "seconds" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$440)
	{
		"projectile_impact",
		"projectile_detonation",
		"projectile_flyby",
		"unused",
		"weapon_fire",
		"weapon_ready",
		"weapon_reload",
		"weapon_empty",
		"weapon_charge",
		"weapon_overheat",
		"weapon_idle",
		"weapon_melee",
		"weapon_animation",
		"object_impacts",
		"particle_impacts",
		"weapon_fire_lod",
		"weapon_fire_lod_far",
		"lfe",
		"unit_footsteps",
		"unit_dialog",
		"unit_animation",
		"unused",
		"vehicle_collision",
		"vehicle_engine",
		"vehicle_animation",
		"unused",
		"device_door",
		"unused",
		"device_machinery",
		"device_stationary",
		"unused",
		"unused",
		"music",
		"ambient_nature",
		"ambient_machinery",
		"unused",
		"huge_ass",
		"object_looping",
		"cinematic_music",
		"reflection",
		"reflection_lod",
		"reflection_lod_far",
		"unused",
		"unused",
		"unused",
		"cortana_mission",
		"cortana_cinematic",
		"mission_dialog",
		"cinematic_dialog",
		"scripted_cinematic_foley",
		"game_event",
		"ui",
		"test",
		"multilingual_test"
	};
	STRING_LIST(unnamed_enum$440, unnamed_enum$440_strings, _countof(unnamed_enum$440_strings));

	VERSIONED_TAG_STRUCT(
		sound_class_struct_definition,
		"sound_class",
		"sound_class_struct_definition",
		"s_sound_classes_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_block, "sound classes", &sound_class_block },
		
		{ _struct_version_mode_equal, 0, 1 },
		{ _field_block, "sound classes", &sound_class_block },
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		sound_definition_struct_definition,
		"sound_definition",
		"sound_definition_struct_definition",
		"s_sound_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 7, 22 },
		{ _field_tag_reference, "remastered sound", &sound_group_reference },
		{ _field_long_flags, "flags", &unnamed_enum },
		{ _field_char_enum, "class", &unnamed_enum$2 },
		{ _field_char_enum, "sample rate", &unnamed_enum$441 },
		{ _field_char_enum, "value", &unnamed_enum$283 },
		{ _field_char_enum, "import type", &unnamed_enum$442 },
		{ _field_struct, "playback", &sound_playback_parameters_struct_struct_definition, _field_id_sound_player },
		{ _field_struct, "scale", &sound_scale_modifiers_struct_struct_definition, _field_id_snsc },
		FIELD_EXPLANATION("import properties", nullptr),
		FIELD_PAD("value", 2),
		{ _field_char_enum, "encoding", &unnamed_enum$444 },
		{ _field_char_enum, "compression", &unnamed_enum$445 },
		{ _field_struct, "promotion", &sound_promotion_parameter_struct_definition, _field_id_snpr }, // structure_version:1
		FIELD_PAD("value", 4),
		{ _field_real, "inner_silence_distance", "don't play below this distance" },
		FIELD_PAD("value", 4),
		{ _field_block, "pitch ranges", "pitch ranges allow multiple samples to represent the same sound at different pitches", &sound_pitch_range_block },
		{ _field_block, "platform parameters", &sound_platform_sound_playback_block },
		{ _field_block, "value", &sound_extra_info_block },
		{ _field_struct, "reflections", &sound_reflection_parameters_struct_struct_definition, _field_id_srpr },
		FIELD_EXPLANATION("low pass filter parameters", nullptr),
		{ _field_struct, "lowpass cut off parameters", &sound_lowpass_struct_struct_definition, _field_id_slpp },
		
		{ _struct_version_mode_equal, 6, 20 },
		{ _field_tag_reference, "remastered sound", &sound_group_reference },
		{ _field_long_flags, "flags", &unnamed_enum },
		{ _field_char_enum, "class", &unnamed_enum$2 },
		{ _field_char_enum, "sample rate", &unnamed_enum$441 },
		{ _field_char_enum, "value", &unnamed_enum$283 },
		{ _field_char_enum, "import type", &unnamed_enum$442 },
		{ _field_struct, "playback", &sound_playback_parameters_struct_struct_definition, _field_id_sound_player },
		{ _field_struct, "scale", &sound_scale_modifiers_struct_struct_definition, _field_id_snsc },
		FIELD_EXPLANATION("import properties", nullptr),
		FIELD_PAD("value", 2),
		{ _field_char_enum, "encoding", &unnamed_enum$444 },
		{ _field_char_enum, "compression", &unnamed_enum$445 },
		{ _field_struct, "promotion", &sound_promotion_parameter_struct_definition, _field_id_snpr }, // structure_version:1
		FIELD_PAD("value", 4),
		{ _field_real, "inner_silence_distance", "don't play below this distance" },
		FIELD_PAD("value", 4),
		{ _field_block, "pitch ranges", "pitch ranges allow multiple samples to represent the same sound at different pitches", &sound_pitch_range_block },
		{ _field_block, "platform parameters", &sound_platform_sound_playback_block },
		{ _field_block, "value", &sound_extra_info_block },
		{ _field_struct, "reflections", &sound_reflection_parameters_struct_struct_definition, _field_id_srpr },
		
		{ _struct_version_mode_equal, 5, 16 },
		{ _field_long_flags, "flags", &unnamed_enum },
		{ _field_char_enum, "class", &unnamed_enum$2 },
		{ _field_char_enum, "sample rate", &unnamed_enum$441 },
		{ _field_char_enum, "value", &unnamed_enum$283 },
		{ _field_char_enum, "import type", &unnamed_enum$442 },
		{ _field_struct, "playback", &sound_playback_parameters_struct_struct_definition, _field_id_sound_player },
		{ _field_struct, "scale", &sound_scale_modifiers_struct_struct_definition, _field_id_snsc },
		FIELD_EXPLANATION("import properties", nullptr),
		FIELD_PAD("value", 2),
		{ _field_char_enum, "encoding", &unnamed_enum$444 },
		{ _field_char_enum, "compression", &unnamed_enum$445 },
		{ _field_struct, "promotion", &sound_promotion_parameter_struct_definition, _field_id_snpr }, // structure_version:1
		FIELD_PAD("value", 12),
		{ _field_block, "pitch ranges", "pitch ranges allow multiple samples to represent the same sound at different pitches", &sound_pitch_range_block },
		{ _field_block, "platform parameters", &sound_platform_sound_playback_block },
		{ _field_block, "value", &sound_extra_info_block },
		
		{ _struct_version_mode_equal, 4, 15 },
		{ _field_long_flags, "flags", &unnamed_enum },
		{ _field_short_enum, "class", &unnamed_enum$2 },
		{ _field_short_enum, "sample rate", &unnamed_enum$441 },
		{ _field_short_enum, "output effect", &unnamed_enum$283 },
		{ _field_short_enum, "import type", &unnamed_enum$442 },
		{ _field_struct, "playback", &sound_playback_parameters_struct_struct_definition, _field_id_sound_player },
		{ _field_struct, "scale", &sound_scale_modifiers_struct_struct_definition, _field_id_snsc },
		FIELD_EXPLANATION("import properties", nullptr),
		{ _field_short_enum, "encoding", &unnamed_enum$444 },
		{ _field_short_enum, "compression", &unnamed_enum$445 },
		{ _field_struct, "promotion", &sound_promotion_parameter_struct_definition, _field_id_snpr }, // structure_version:1
		FIELD_PAD("value", 12),
		{ _field_block, "pitch ranges", "pitch ranges allow multiple samples to represent the same sound at different pitches", &sound_pitch_range_block },
		{ _field_block, "platform parameters", &sound_platform_sound_playback_block },
		{ _field_block, "value", &sound_extra_info_block },
		
		{ _struct_version_mode_equal, 3, 15 },
		FIELD_CUSTOM("value", _field_id_sply),
		{ _field_long_flags, "flags", &unnamed_enum },
		{ _field_short_enum, "class", &unnamed_enum$2 },
		{ _field_short_enum, "sample rate", &unnamed_enum$441 },
		{ _field_short_enum, "output effect", &unnamed_enum$283 },
		{ _field_short_enum, "import type", &unnamed_enum$442 },
		{ _field_struct, "playback", &large_sound_playback_parameters_struct_definition, _field_id_sound_player }, // structure_version:1
		{ _field_struct, "scale", &large_sound_scale_modifiers_struct_struct_definition, _field_id_snsc },
		FIELD_EXPLANATION("import properties", nullptr),
		{ _field_short_enum, "encoding", &unnamed_enum$444 },
		{ _field_short_enum, "compression", &unnamed_enum$445 },
		{ _field_struct, "promotion", &sound_promotion_parameter_struct_definition, _field_id_snpr }, // structure_version:1
		FIELD_PAD("value", 12),
		{ _field_block, "pitch ranges", "pitch ranges allow multiple samples to represent the same sound at different pitches", &large_sound_pitch_range_block },
		{ _field_block, "platform parameters", &sound_platform_sound_playback_block },
		
		{ _struct_version_mode_equal, 2, 15 },
		FIELD_CUSTOM("value", _field_id_sply),
		{ _field_long_flags, "flags", &unnamed_enum },
		{ _field_short_enum, "class", &unnamed_enum$2 },
		{ _field_short_enum, "sample rate", &unnamed_enum$441 },
		{ _field_short_enum, "output effect", &unnamed_enum$283 },
		{ _field_short_enum, "import type", &unnamed_enum$442 },
		{ _field_struct, "playback", &large_sound_playback_parameters_struct_definition, _field_id_sound_player }, // structure_version:1
		{ _field_struct, "scale", &large_sound_scale_modifiers_struct_struct_definition, _field_id_snsc },
		FIELD_EXPLANATION("import properties", nullptr),
		{ _field_short_enum, "encoding", &unnamed_enum$444 },
		{ _field_short_enum, "compression", &unnamed_enum$445 },
		{ _field_struct, "promotion", &sound_promotion_parameter_struct_definition, _field_id_snpr }, // structure_version:1
		FIELD_PAD("value", 12),
		{ _field_block, "pitch ranges", "pitch ranges allow multiple samples to represent the same sound at different pitches", &large_sound_pitch_range_block },
		{ _field_block, "platform parameters", &sound_platform_sound_playback_block },
		
		{ _struct_version_mode_equal, 1, 15 },
		FIELD_CUSTOM("value", _field_id_sply),
		{ _field_long_flags, "flags", &unnamed_enum },
		{ _field_short_enum, "class", &unnamed_enum$2 },
		{ _field_short_enum, "sample rate", &unnamed_enum$441 },
		{ _field_short_enum, "output effect", &unnamed_enum$283 },
		{ _field_short_enum, "import type", &unnamed_enum$442 },
		{ _field_struct, "playback", &large_sound_playback_parameters_struct_definition, _field_id_sound_player }, // structure_version:1
		{ _field_struct, "scale", &large_sound_scale_modifiers_struct_struct_definition, _field_id_snsc },
		FIELD_EXPLANATION("import properties", nullptr),
		{ _field_short_enum, "encoding", &unnamed_enum$444 },
		{ _field_short_enum, "compression", &unnamed_enum$445 },
		{ _field_struct, "promotion", &sound_promotion_parameter_struct_definition, _field_id_snpr }, // structure_version:1
		FIELD_PAD("value", 12),
		{ _field_block, "pitch ranges", "pitch ranges allow multiple samples to represent the same sound at different pitches", &large_sound_pitch_range_block },
		{ _field_block, "platform parameters", &sound_platform_sound_playback_block },
		
		{ _struct_version_mode_equal, 0, 30 },
		{ _field_long_flags, "flags", &unnamed_enum },
		{ _field_short_enum, "class", &unnamed_enum$2 },
		{ _field_short_enum, "sample rate", &unnamed_enum$441 },
		{ _field_real, "minimum distance", "the distance below which this sound no longer gets louder", "world units" },
		{ _field_real, "maximum distance", "the distance beyond which this sound is no longer audible", "world units" },
		{ _field_real_fraction, "skip fraction", "fraction of requests to play this sound that will be ignored (0 means always play.)" },
		{ _field_real_bounds, "random pitch bounds", "the sound's pitch will be modulated randomly within this range.", "cents" },
		{ _field_angle, "inner cone angle", "within the cone defined by this angle and the sound's direction, the sound plays with a gain of 1.0.", "degrees" },
		{ _field_angle, "outer cone angle", "outside the cone defined by this angle and the sound's direction, the sound plays with a gain of OUTER CONE GAIN. (0 means the sound does not attenuate with direction.)", "degrees" },
		{ _field_real, "outer cone gain", "the gain to use when the sound is directed away from the listener", "dB" },
		{ _field_real, "gain modifier", nullptr, "dB" },
		{ _field_real, "maximum bend per second", nullptr, "cents" },
		{ _field_short_enum, "output effect", &unnamed_enum$283 },
		{ _field_short_enum, "import type", &unnamed_enum$442 },
		FIELD_PAD("value", 8),
		{ _field_real_fraction, "skip fraction modifier" },
		{ _field_real, "gain modifier", nullptr, "dB" },
		{ _field_real, "pitch modifier", nullptr, "cents" },
		FIELD_PAD("value", 12),
		{ _field_real_fraction, "skip fraction modifier" },
		{ _field_real, "gain modifier", nullptr, "dB" },
		{ _field_real, "pitch modifier", nullptr, "cents" },
		FIELD_PAD("value", 12),
		{ _field_short_enum, "encoding", &unnamed_enum$444 },
		{ _field_short_enum, "compression", &unnamed_enum$445 },
		{ _field_tag_reference, "promotion sound", &sound_group_reference },
		{ _field_short_integer, "promotion count", "when there are this many instances of the sound, promote to the new sound." },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_block, "pitch ranges", "pitch ranges allow multiple samples to represent the same sound at different pitches", &old_sound_pitch_range_block },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$441)
	{
		"22kHz",
		"44kHz",
		"32kHz",
		"48kHz"
	};
	STRING_LIST(unnamed_enum$441, unnamed_enum$441_strings, _countof(unnamed_enum$441_strings));

	STRINGS(unnamed_enum$442)
	{
		"unknown",
		"single-shot",
		"single-layer",
		"multi-layer"
	};
	STRING_LIST(unnamed_enum$442, unnamed_enum$442_strings, _countof(unnamed_enum$442_strings));

	STRINGS(unnamed_enum$444)
	{
		"mono",
		"stereo",
		"codec",
		"quad"
	};
	STRING_LIST(unnamed_enum$444, unnamed_enum$444_strings, _countof(unnamed_enum$444_strings));

	TAG_STRUCT(
		sound_dialogue_constants_block_struct_definition,
		"sound_dialogue_constants_block",
		"sound_dialogue_constants_block_struct_definition",
		"s_sound_dialogue_constants_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("named playing fractions", "these values correspond to the named play fractions in the dialogue editor (It\'s really skip fractions, but who cares?)"),
		{ _field_real, "almost never" },
		{ _field_real, "rarely" },
		{ _field_real, "somewhat" },
		{ _field_real, "often" },
		FIELD_PAD("value", 24),
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_effect_collection_block_struct_definition,
		"sound_effect_collection_block",
		"sound_effect_collection_block_struct_definition",
		"s_platform_sound_playback_collection",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "sound effects", &platform_sound_playback_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_effect_component_block_struct_definition,
		"sound_effect_component_block",
		"sound_effect_component_block_struct_definition",
		"s_sound_effect_component_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "sound", &sound_looping_group_sound_group_reference },
		{ _field_real, "gain", "additional attenuation to sound", "dB", _field_id_decibels },
		{ _field_long_flags, "flags", &unnamed_enum$415 },
		{ _field_terminator }
	};

	TAG_REFERENCE_GROUP(sound_looping_group_sound_group_reference)
	{
		SOUND_LOOPING_TAG,
		SOUND_TAG,
		INVALID_TAG
	};

	STRINGS(unnamed_enum$415)
	{
		"don\'t play at start",
		"play on stop",
		"unused",
		"play alternate",
		"unused",
		"sync with origin looping sound"
	};
	STRING_LIST(unnamed_enum$415, unnamed_enum$415_strings, _countof(unnamed_enum$415_strings));

	TAG_STRUCT(
		sound_effect_overrides_block_struct_definition,
		"sound_effect_overrides_block",
		"sound_effect_overrides_block_struct_definition",
		"s_sound_effect_override_collection",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_block, "overrides", &sound_effect_override_parameters_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_effect_playback_block_struct_definition,
		"sound_effect_playback_block",
		"sound_effect_playback_block_struct_definition",
		"s_sound_effect_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "sound effect struct", &sound_effect_struct_definition_struct_definition, _field_id_ssfx },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_effect_struct_definition_struct_definition,
		"sound_effect_struct_definition",
		"sound_effect_struct_definition_struct_definition",
		"s_sound_effect_definition$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("sound effect", _field_id_shader_template),
		{ _field_tag_reference, "value", &sound_effect_template_group_reference },
		{ _field_block, "components", &sound_effect_component_block },
		{ _field_block, "value", &sound_effect_overrides_block },
		{ _field_data, "value", &sound_effect_hardware_format_data_definition },
		{ _field_block, "value", &platform_sound_effect_collection_block },
		{ _field_terminator }
	};

	TAG_REFERENCE(sound_effect_template_group_reference, SOUND_EFFECT_TEMPLATE_TAG);

	TAG_STRUCT(
		sound_effect_template_additional_sound_input_block_struct_definition,
		"sound_effect_template_additional_sound_input_block",
		"sound_effect_template_additional_sound_input_block_struct_definition",
		"s_sound_effect_template_sound_input_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "dsp effect" },
		FIELD_CUSTOM("low frequency sound", _field_id_function_editor),
		{ _field_struct, "low frequency sound", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_real, "time period", nullptr, "seconds", _field_id_function_unknown },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_effect_template_parameter_block_struct_definition,
		"sound_effect_template_parameter_block",
		"sound_effect_template_parameter_block_struct_definition",
		"s_sound_effect_template_parameter_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_short_enum, "type", &unnamed_enum$26 },
		{ _field_word_flags, "flags", &unnamed_enum$27 },
		{ _field_long_integer, "hardware offset" },
		{ _field_long_integer, "default enum integer value" },
		{ _field_real, "default scalar value" },
		FIELD_CUSTOM("default function", _field_id_function_editor),
		{ _field_struct, "default function", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_real, "minimum scalar value" },
		{ _field_real, "maximum scalar value" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$26)
	{
		"integer",
		"real",
		"filter type"
	};
	STRING_LIST(unnamed_enum$26, unnamed_enum$26_strings, _countof(unnamed_enum$26_strings));

	STRINGS(unnamed_enum$27)
	{
		"expose as function"
	};
	STRING_LIST(unnamed_enum$27, unnamed_enum$27_strings, _countof(unnamed_enum$27_strings));

	TAG_STRUCT(
		sound_encoded_dialogue_section_block_struct_definition,
		"sound_encoded_dialogue_section_block",
		"sound_encoded_dialogue_section_block_struct_definition",
		"s_sound_encoded_dialogue_section",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_data, "encoded data", &generic_tag_data },
		{ _field_block, "sound dialogue info", &sound_permutation_dialogue_info_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		sound_environment_definition_struct_definition,
		"sound_environment_definition",
		"sound_environment_definition_struct_definition",
		"s_sound_environment",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 17 },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "priority", "when multiple listeners are in different sound environments in split screen, the combined environment will be the one with the highest priority." },
		FIELD_PAD("value", 2),
		{ _field_real, "room intensity", "intensity of the room effect", "dB", _field_id_decibels },
		{ _field_real, "room intensity hf", "intensity of the room effect above the reference high frequency", "dB", _field_id_decibels },
		{ _field_real, "room rolloff (0 to 10)", "how quickly the room effect rolls off, from 0.0 to 10.0", _field_id_auds },
		{ _field_real, "decay time (.1 to 20)", nullptr, "seconds", _field_id_auds },
		{ _field_real, "decay hf ratio (.1 to 2)", _field_id_auds },
		{ _field_real, "reflections intensity", nullptr, "dB", "[-100,10]", _field_id_decibels },
		{ _field_real, "reflections delay (0 to .3)", nullptr, "seconds", _field_id_auds },
		{ _field_real, "reverb intensity", nullptr, "dB", "[-100,20]", _field_id_decibels },
		{ _field_real, "reverb delay (0 to .1)", nullptr, "seconds", _field_id_auds },
		{ _field_real, "diffusion", _field_id_auds },
		{ _field_real, "density", _field_id_auds },
		{ _field_real, "hf reference(20 to 20,000)", "for hf values, what frequency defines hf, from 20 to 20,000", "Hz", _field_id_auds },
		{ _field_string_id, "reflection type", "for creating reflection sounds" },
		FIELD_PAD("value", 12),
		
		{ _struct_version_mode_equal, 0, 17 },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "priority", "when multiple listeners are in different sound environments in split screen, the combined environment will be the one with the highest priority." },
		FIELD_PAD("value", 2),
		{ _field_real, "room intensity", "intensity of the room effect", "dB", _field_id_decibels },
		{ _field_real, "room intensity hf", "intensity of the room effect above the reference high frequency", "dB", _field_id_decibels },
		{ _field_real, "room rolloff (0 to 10)", "how quickly the room effect rolls off, from 0.0 to 10.0", _field_id_auds },
		{ _field_real, "decay time (.1 to 20)", nullptr, "seconds", _field_id_auds },
		{ _field_real, "decay hf ratio (.1 to 2)", _field_id_auds },
		{ _field_real, "reflections intensity", nullptr, "dB", "[-100,10]", _field_id_decibels },
		{ _field_real, "reflections delay (0 to .3)", nullptr, "seconds", _field_id_auds },
		{ _field_real, "reverb intensity", nullptr, "dB", "[-100,20]", _field_id_decibels },
		{ _field_real, "reverb delay (0 to .1)", nullptr, "seconds", _field_id_auds },
		{ _field_real, "diffusion", _field_id_auds },
		{ _field_real, "density", _field_id_auds },
		{ _field_real, "hf reference(20 to 20,000)", "for hf values, what frequency defines hf, from 20 to 20,000", "Hz", _field_id_auds },
		{ _field_string_id, "reflection type", "for creating reflection sounds" },
		FIELD_PAD("value", 12),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_extra_info_block_struct_definition,
		"sound_extra_info_block",
		"sound_extra_info_block_struct_definition",
		"s_sound_definition_extra_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "language permutation info", &sound_definition_language_permutation_info_block },
		{ _field_block, "encoded permutation section", &sound_encoded_dialogue_section_block },
		{ _field_struct, "geometry block info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_codec_block_struct_definition,
		"sound_gestalt_codec_block",
		"sound_gestalt_codec_block_struct_definition",
		"s_cache_file_sound_codec",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_enum, "sample rate", &unnamed_enum$441 },
		{ _field_char_enum, "encoding", &unnamed_enum$444 },
		{ _field_char_enum, "compression", &unnamed_enum$445 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_custom_playback_block_struct_definition,
		"sound_gestalt_custom_playback_block",
		"sound_gestalt_custom_playback_block_struct_definition",
		"s_platform_sound_playback_definition$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "playback definition", &simple_platform_sound_playback_struct_struct_definition, _field_id_plsn },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_extra_info_block_struct_definition,
		"sound_gestalt_extra_info_block",
		"sound_gestalt_extra_info_block_struct_definition",
		"s_cache_file_sound_definition_extra_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "encoded permutation section", &sound_encoded_dialogue_section_block },
		{ _field_array, "localized geometry block info", &unnamed_array$49 },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_import_names_block_struct_definition,
		"sound_gestalt_import_names_block",
		"sound_gestalt_import_names_block_struct_definition",
		"s_string_id$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "import name" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_language_chunks_block_struct_definition,
		"sound_gestalt_language_chunks_block",
		"sound_gestalt_language_chunks_block_struct_definition",
		"s_sound_cache_file_gestalt_language_chunks",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "chunks", &sound_permutation_chunk_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_lowpass_block_struct_definition,
		"sound_gestalt_lowpass_block",
		"sound_gestalt_lowpass_block_struct_definition",
		"s_sound_lowpass_parameters$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "lowpass cut off parameters", &sound_lowpass_struct_struct_definition, _field_id_slpp },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_permutation_language_data_block_struct_definition,
		"sound_gestalt_permutation_language_data_block",
		"sound_gestalt_permutation_language_data_block_struct_definition",
		"s_cache_file_sound_permutation_language_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "sample size" },
		{ _field_short_integer, "first index of chunk for a language" },
		{ _field_short_integer, "number of chunks" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_permutations_block_struct_definition,
		"sound_gestalt_permutations_block",
		"sound_gestalt_permutations_block_struct_definition",
		"s_cache_file_sound_permutation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "name" },
		{ _field_short_integer, "encoded skip fraction" },
		{ _field_char_integer, "encoded gain", nullptr, "dB" },
		{ _field_char_integer, "permutation info index" },
		{ _field_short_integer, "language neutral time", nullptr, "ms" },
		{ _field_block, "localized chunks info", &sound_gestalt_permutation_language_data_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_pitch_range_parameters_block_struct_definition,
		"sound_gestalt_pitch_range_parameters_block",
		"sound_gestalt_pitch_range_parameters_block_struct_definition",
		"s_cache_file_sound_pitch_range_parameters",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "natural pitch", nullptr, "cents" },
		{ _field_short_integer_bounds, "bend bounds", "the range of pitches that will be represented using this sample.", "cents" },
		{ _field_short_integer_bounds, "max gain pitch bounds", nullptr, "cents" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_pitch_ranges_block_struct_definition,
		"sound_gestalt_pitch_ranges_block",
		"sound_gestalt_pitch_ranges_block_struct_definition",
		"s_cache_file_sound_pitch_range",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "name" },
		{ _field_short_block_index, "parameters" },
		{ _field_short_integer, "encoded permutation data" },
		{ _field_short_integer, "first runtime permutation flag index" },
		{ _field_short_block_index, "first permutation" },
		{ _field_short_integer, "permutation count" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_playback_block_struct_definition,
		"sound_gestalt_playback_block",
		"sound_gestalt_playback_block_struct_definition",
		"s_sound_definition_playback_parameters$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "playback", &sound_playback_parameters_struct_struct_definition, _field_id_sound_player },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_promotions_block_struct_definition,
		"sound_gestalt_promotions_block",
		"sound_gestalt_promotions_block_struct_definition",
		"s_sound_promotion_parameters$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "runtime promotion storage", &sound_promotion_parameter_struct_definition, _field_id_snpr }, // structure_version:1
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_reflections_block_struct_definition,
		"sound_gestalt_reflections_block",
		"sound_gestalt_reflections_block_struct_definition",
		"s_sound_reflection$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "reflection type", "type which is compared with type in current sound_environment tag" },
		{ _field_tag_reference, "reflection sound", &sound_group_reference },
		{ _field_long_integer, "reflection sound", nullptr, "ms" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_remastered_sound_references_block_struct_definition,
		"sound_gestalt_remastered_sound_references_block",
		"sound_gestalt_remastered_sound_references_block_struct_definition",
		"s_tag_reference$14",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "remastered sound", &sound_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_runtime_permutation_bit_vector_block_struct_definition,
		"sound_gestalt_runtime_permutation_bit_vector_block",
		"sound_gestalt_runtime_permutation_bit_vector_block_struct_definition",
		"s_char$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "runtime permutation bit vector" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_gestalt_scale_block_struct_definition,
		"sound_gestalt_scale_block",
		"sound_gestalt_scale_block_struct_definition",
		"s_sound_definition_scale_modifiers$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "scale", &sound_scale_modifiers_struct_struct_definition, _field_id_snsc },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_global_mix_struct_struct_definition,
		"sound_global_mix_struct",
		"sound_global_mix_struct_struct_definition",
		"s_sound_global_mix_configuration",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "mono unspatialized gain", nullptr, "dB" },
		{ _field_real, "stereo to 3d gain", nullptr, "dB" },
		{ _field_real, "rear surround to front stereo gain", nullptr, "dB" },
		FIELD_EXPLANATION("surround center mix", "for sounds that use the center speaker"),
		{ _field_real, "front speaker gain", nullptr, "dB" },
		{ _field_real, "center speaker gain", nullptr, "dB" },
		FIELD_EXPLANATION("stereo center mix", "for sounds that use the center speaker"),
		{ _field_real, "front speaker gain", nullptr, "dB" },
		{ _field_real, "center speaker gain", nullptr, "dB" },
		FIELD_EXPLANATION("more sound lovin'", "for sounds that use the center speaker"),
		{ _field_real, "stereo unspatialized gain", nullptr, "dB" },
		FIELD_EXPLANATION("last minute values", nullptr),
		{ _field_real, "solo player fade out delay", nullptr, "seconds" },
		{ _field_real, "solo player fade out time", nullptr, "seconds" },
		{ _field_real, "solo player fade in time", nullptr, "seconds" },
		{ _field_real, "game music fade out time", nullptr, "seconds" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		sound_globals_struct_definition,
		"sound_globals",
		"sound_globals_struct_definition",
		"s_sound_globals_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 6 },
		{ _field_tag_reference, "remastered sound classes", &sound_classes_group_reference },
		{ _field_tag_reference, "legacy sound classes", &sound_classes_group_reference },
		{ _field_tag_reference, "sound effects", &sound_effect_collection_group_reference },
		{ _field_tag_reference, "sound mix", &sound_mix_group_reference },
		{ _field_tag_reference, "sound combat dialogue constants", &sound_dialogue_constants_group_reference },
		{ _field_long_integer, "value" },
		
		{ _struct_version_mode_equal, 1, 5 },
		{ _field_tag_reference, "sound classes", &sound_classes_group_reference },
		{ _field_tag_reference, "sound effects", &sound_effect_collection_group_reference },
		{ _field_tag_reference, "sound mix", &sound_mix_group_reference },
		{ _field_tag_reference, "sound combat dialogue constants", &sound_dialogue_constants_group_reference },
		{ _field_long_integer, "value" },
		
		{ _struct_version_mode_equal, 0, 17 },
		{ _field_tag_reference, "sound classes", &sound_classes_group_reference },
		{ _field_tag_reference, "sound effects", &sound_effect_collection_group_reference },
		FIELD_EXPLANATION("first person left side mix", "for first person sounds to the left of you"),
		{ _field_real, "left stereo gain", nullptr, "dB" },
		{ _field_real, "right stereo gain", nullptr, "dB" },
		FIELD_EXPLANATION("first person middle mix", "for first person sounds between your ears"),
		{ _field_real, "left stereo gain", nullptr, "dB" },
		{ _field_real, "right stereo gain", nullptr, "dB" },
		FIELD_EXPLANATION("first person right side mix", "for first person sounds to the right of you"),
		{ _field_real, "left stereo gain", nullptr, "dB" },
		{ _field_real, "right stereo gain", nullptr, "dB" },
		FIELD_EXPLANATION("first person stereo mix", nullptr),
		{ _field_real, "front speaker gain", nullptr, "dB" },
		{ _field_real, "rear speaker gain", nullptr, "dB" },
		FIELD_EXPLANATION("ambient stereo mix", nullptr),
		{ _field_real, "front speaker gain", nullptr, "dB" },
		{ _field_real, "rear speaker gain", nullptr, "dB" },
		
		{ _field_terminator }
	};

	TAG_REFERENCE(sound_classes_group_reference, SOUND_CLASSES_TAG);

	TAG_REFERENCE(sound_mix_group_reference, SOUND_MIX_TAG);

	TAG_REFERENCE(sound_dialogue_constants_group_reference, SOUND_DIALOGUE_CONSTANTS_TAG);

	TAG_STRUCT(
		sound_lowpass_struct_struct_definition,
		"sound_lowpass_struct",
		"sound_lowpass_struct_struct_definition",
		"s_sound_lowpass_parameters",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "low pass minimum distance" },
		{ _field_real, "low pass maximum distance" },
		FIELD_CUSTOM("Mapping", _field_id_function_editor),
		{ _field_struct, "Mapping", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_mix_block_struct_definition,
		"sound_mix_block",
		"sound_mix_block_struct_definition",
		"s_sound_mix_configuration_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("first person left side mix", "for first person sounds to the left of you"),
		{ _field_real, "left stereo gain", nullptr, "dB" },
		{ _field_real, "right stereo gain", nullptr, "dB" },
		FIELD_EXPLANATION("first person middle mix", "for first person sounds between your ears"),
		{ _field_real, "left stereo gain", nullptr, "dB" },
		{ _field_real, "right stereo gain", nullptr, "dB" },
		FIELD_EXPLANATION("first person right side mix", "for first person sounds to the right of you"),
		{ _field_real, "left stereo gain", nullptr, "dB" },
		{ _field_real, "right stereo gain", nullptr, "dB" },
		FIELD_EXPLANATION("first person stereo mix", nullptr),
		{ _field_real, "front speaker gain", nullptr, "dB" },
		{ _field_real, "rear speaker gain", nullptr, "dB" },
		FIELD_EXPLANATION("ambient stereo mix", nullptr),
		{ _field_real, "front speaker gain", nullptr, "dB" },
		{ _field_real, "rear speaker gain", nullptr, "dB" },
		FIELD_EXPLANATION("global mix", nullptr),
		{ _field_struct, "global mix", &sound_global_mix_struct_struct_definition, _field_id_sngl },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_permutation_dialogue_info_block_struct_definition,
		"sound_permutation_dialogue_info_block",
		"sound_permutation_dialogue_info_block_struct_definition",
		"s_sound_permutation_dialogue_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "mouth data offset" },
		{ _field_long_integer, "mouth data length" },
		{ _field_long_integer, "lipsync data offset" },
		{ _field_long_integer, "lipsync data length" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		sound_permutation_language_info_struct_definition,
		"sound_permutation_language_info",
		"sound_permutation_language_info_struct_definition",
		"s_sound_definition_language_permutation_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 1 },
		{ _field_block, "raw info block v3", &sound_permutation_raw_info_block },
		
		{ _struct_version_mode_equal, 1, 1 },
		{ _field_block, "raw info block", &sound_permutation_raw_info_block_old_block },
		
		{ _struct_version_mode_equal, 0, 9 },
		FIELD_CUSTOM("value", _field_id_sound_player),
		{ _field_string_id, "skip fraction name" },
		{ _field_data, "value", &sound_samples },
		{ _field_data, "value", &sound_mouth_data },
		{ _field_data, "value", &sound_lipsync_data },
		{ _field_block, "value", &sound_permutation_marker_block },
		{ _field_short_enum, "compression", &unnamed_enum$445 },
		{ _field_char_enum, "language", &unnamed_enum$446 },
		FIELD_PAD("value", 1),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$446)
	{
		"english",
		"japanese",
		"german",
		"french",
		"spanish",
		"italian",
		"korean",
		"chinese",
		"portuguese"
	};
	STRING_LIST(unnamed_enum$446, unnamed_enum$446_strings, _countof(unnamed_enum$446_strings));

	TAG_STRUCT(
		sound_permutation_marker_block_struct_definition,
		"sound_permutation_marker_block",
		"sound_permutation_marker_block_struct_definition",
		"s_sound_permutation_marker",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "marker id" },
		{ _field_string_id, "name" },
		{ _field_long_integer, "sample offset" },
		FIELD_CUSTOM("value", _field_id_unknown_player),
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_permutation_raw_info_block_old_struct_definition$2,
		"sound_permutation_raw_info_block_old",
		"sound_permutation_raw_info_block_old_struct_definition",
		"s_sound_permutation_raw_info_old$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("value", _field_id_sound_player),
		{ _field_string_id, "skip fraction name" },
		{ _field_data, "value", &sound_samples },
		{ _field_data, "value", &sound_mouth_data },
		{ _field_data, "value", &sound_lipsync_data },
		{ _field_block, "value", &sound_permutation_marker_block },
		{ _field_short_enum, "compression", &unnamed_enum$445 },
		{ _field_char_enum, "language", &unnamed_enum$446 },
		FIELD_PAD("value", 1),
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_permutation_raw_info_block_struct_definition,
		"sound_permutation_raw_info_block",
		"sound_permutation_raw_info_block_struct_definition",
		"s_sound_permutation_raw_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("value", _field_id_sound_player),
		{ _field_string_id, "skip fraction name" },
		{ _field_data, "value", &sound_samples },
		{ _field_data, "value", &sound_mouth_data },
		{ _field_data, "value", &sound_lipsync_data },
		{ _field_block, "value", &sound_permutation_marker_block },
		{ _field_short_enum, "compression", &unnamed_enum$445 },
		{ _field_char_enum, "language", &unnamed_enum$446 },
		FIELD_PAD("value", 1),
		{ _field_block, "value", &sound_permutation_chunk_block },
		{ _field_long_integer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_permutations_block_struct_definition,
		"sound_permutations_block",
		"sound_permutations_block_struct_definition",
		"s_sound_permutation",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("value", _field_id_sound_player),
		{ _field_string_id, "name", "name of the file from which this sample was imported" },
		FIELD_CUSTOM("Update skip fraction", _field_id_edit),
		{ _field_real_fraction, "skip fraction", "fraction of requests to play this permutation that are ignored (a different permutation is selected.)" },
		FIELD_CUSTOM("Update gain", _field_id_edit),
		{ _field_real, "gain", "additional attenuation when played", "dB", _field_id_decibels },
		{ _field_long_integer, "value" },
		{ _field_short_block_index_custom_search, "value" },
		{ _field_short_integer, "value" },
		{ _field_block, "value", &sound_permutation_chunk_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_pitch_range_block_struct_definition,
		"sound_pitch_range_block",
		"sound_pitch_range_block_struct_definition",
		"s_sound_pitch_range",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name", "the name of the imported pitch range directory" },
		FIELD_EXPLANATION("pitch control", "these settings control what pitches this set of samples represents. if there is only one pitch range, all three values are ignored."),
		{ _field_short_integer, "natural pitch", "the apparent pitch when these samples are played at their recorded pitch.", "cents" },
		FIELD_PAD("value", 2),
		{ _field_short_integer_bounds, "bend bounds", "the range of pitches that will be represented using this sample.", "cents" },
		{ _field_short_integer_bounds, "value", _field_id_function_unknown },
		FIELD_PAD("value", 4),
		{ _field_block, "permutations", "permutations represent equivalent variations of this sound.", &sound_permutations_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_platform_sound_playback_block_struct_definition,
		"sound_platform_sound_playback_block",
		"sound_platform_sound_playback_block_struct_definition",
		"s_sound_definition_custom_playback_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "playback definition", &simple_platform_sound_playback_struct_struct_definition, _field_id_plsn },
		{ _field_block, "value", &g_null_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_playback_parameter_definition_struct_definition,
		"sound_playback_parameter_definition",
		"sound_playback_parameter_definition_struct_definition",
		"s_sound_playback_parameter",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_bounds, "scale bounds" },
		{ _field_real_bounds, "random base and variance" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_playback_parameters_struct_struct_definition,
		"sound_playback_parameters_struct",
		"sound_playback_parameters_struct_struct_definition",
		"s_sound_definition_playback_parameters",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("Clear distances", _field_id_edit),
		FIELD_CUSTOM("Reset distances", _field_id_edit),
		{ _field_real, "minimum distance", "the distance below which this sound no longer gets louder", "world units" },
		{ _field_real, "maximum distance", "the distance beyond which this sound is no longer audible", "world units" },
		{ _field_real_fraction, "skip fraction", "fraction of requests to play this sound that will be ignored (0 means always play.)" },
		{ _field_real, "maximum bend per second", nullptr, "cents", _field_id_cents },
		FIELD_EXPLANATION("randomization", "these settings control random variation of volume and pitch.\n the second parameter gets clipped to the first."),
		FIELD_CUSTOM("Update gain bounds", _field_id_edit),
		{ _field_real, "gain base", "sound's random gain will start here", "dB", _field_id_decibels },
		{ _field_real, "gain variance", "sound's gain will be randomly modulated within this range", "dB", _field_id_decibels },
		{ _field_short_integer_bounds, "random pitch bounds", "the sound's pitch will be modulated randomly within this range.", "cents" },
		FIELD_EXPLANATION("directional sounds", "these settings allow sounds to be directional, fading as they turn away from the listener"),
		{ _field_angle, "inner cone angle", "within the cone defined by this angle and the sound's direction, the sound plays with a gain of 1.0.", "degrees" },
		{ _field_angle, "outer cone angle", "outside the cone defined by this angle and the sound's direction, the sound plays with a gain of OUTER CONE GAIN. (0 means the sound does not attenuate with direction.)", "degrees" },
		{ _field_real, "outer cone gain", "the gain to use when the sound is directed away from the listener", "dB", _field_id_decibels },
		FIELD_EXPLANATION("SCRIPTED LOCATION OVERRIDE", "NOTE: this will only apply when the sound is started via script\nazimuth:\n    0 => front\n    90 => left\n    180 => back\n    270 => right\n"),
		FIELD_CUSTOM("Update location", _field_id_edit),
		{ _field_long_flags, "flags", &unnamed_enum$443 },
		{ _field_angle, "azimuth" },
		{ _field_real, "positional gain", nullptr, "dB" },
		{ _field_real, "first person gain", nullptr, "dB" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		sound_promotion_parameter_struct_definition,
		"sound_promotion_parameter",
		"sound_promotion_parameter_struct_definition",
		"s_sound_promotion_parameters",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 5 },
		{ _field_block, "promotion rules", &sound_promotion_rule_block },
		{ _field_block, "runtime timers", &sound_promotion_runtime_timer_block },
		{ _field_long_integer, "runtime active promotion index" },
		{ _field_long_integer, "runtime last promotion time" },
		{ _field_long_integer, "runtime suppression timeout" },
		
		{ _struct_version_mode_equal, 0, 4 },
		{ _field_tag_reference, "promotion sound", &sound_group_reference },
		{ _field_short_integer, "promotion count", "when there are this many instances of the sound, promote to the new sound." },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 8),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_promotion_rule_block_struct_definition,
		"sound_promotion_rule_block",
		"sound_promotion_rule_block_struct_definition",
		"s_sound_promotion_rule",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index_custom_search, "pitch range" },
		{ _field_short_integer, "maximum playing count" },
		{ _field_real, "suppression time", "time from when first permutation plays to when another sound from an equal or lower promotion can play", "seconds" },
		FIELD_PAD("value", 8),
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_promotion_runtime_timer_block_struct_definition,
		"sound_promotion_runtime_timer_block",
		"sound_promotion_runtime_timer_block_struct_definition",
		"s_long$6",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_reflection_block_struct_definition,
		"sound_reflection_block",
		"sound_reflection_block_struct_definition",
		"s_sound_reflection",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "reflection type", "type which is compared with type in current sound_environment tag" },
		{ _field_tag_reference, "reflection sound", &sound_group_reference },
		{ _field_long_integer, "reflection sound", nullptr, "ms" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_reflection_parameters_struct_struct_definition,
		"sound_reflection_parameters_struct",
		"sound_reflection_parameters_struct_struct_definition",
		"s_sound_reflection_parameters",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "reflections", &sound_reflection_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_response_definition_block_struct_definition,
		"sound_response_definition_block",
		"sound_response_definition_block_struct_definition",
		"s_multiplayer_event_sound_response_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "sound flags", &unnamed_enum$307 },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "english sound", &sound_group_reference },
		{ _field_struct, "extra sounds", &sound_response_extra_sounds_struct_definition, _field_id_masd }, // structure_version:1
		{ _field_real, "probability" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		sound_response_extra_sounds_struct_definition,
		"sound_response_extra_sounds",
		"sound_response_extra_sounds_struct_definition",
		"s_tag_reference$5",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 8 },
		{ _field_tag_reference, "japanese sound", &sound_group_reference },
		{ _field_tag_reference, "german sound", &sound_group_reference },
		{ _field_tag_reference, "french sound", &sound_group_reference },
		{ _field_tag_reference, "spanish sound", &sound_group_reference },
		{ _field_tag_reference, "italian sound", &sound_group_reference },
		{ _field_tag_reference, "korean sound", &sound_group_reference },
		{ _field_tag_reference, "chinese sound", &sound_group_reference },
		{ _field_tag_reference, "portuguese sound", &sound_group_reference },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_scale_modifiers_struct_struct_definition,
		"sound_scale_modifiers_struct",
		"sound_scale_modifiers_struct_struct_definition",
		"s_sound_definition_scale_modifiers",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("scale modifiers", "as the sound\'s input scale changes from zero to one, these modifiers move between the two values specified here. the sound will play using the current scale modifier multiplied by the values specified above. (0 values are ignored.)"),
		{ _field_real_bounds, "gain modifier", nullptr, "dB", _field_id_decibels },
		{ _field_short_integer_bounds, "pitch modifier", nullptr, "cents" },
		{ _field_real_fraction_bounds, "skip fraction modifier" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_scenery_block_struct_definition,
		"sound_scenery_block",
		"sound_scenery_block_struct_definition",
		"s_sound_scenery_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_PAD("value", 16),
		FIELD_USELESS_PAD("value", 112),
		{ _field_terminator }
	};

	TAG_STRUCT(
		sound_scenery_datum_struct_struct_definition,
		"sound_scenery_datum_struct",
		"sound_scenery_datum_struct_struct_definition",
		"s_scenario_sound_scenery_datum",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_enum, "volume type", &unnamed_enum$23 },
		{ _field_real, "height" },
		{ _field_real_bounds, "override distance bounds" },
		{ _field_angle_bounds, "override cone angle bounds" },
		{ _field_real, "override outer cone gain", nullptr, "dB" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$23)
	{
		"sphere",
		"vertical cylinder"
	};
	STRING_LIST(unnamed_enum$23, unnamed_enum$23_strings, _countof(unnamed_enum$23_strings));

	TAG_STRUCT(
		sounds_block_struct_definition,
		"sounds_block",
		"sounds_block_struct_definition",
		"s_game_globals_tag_reference$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		sounds_block_struct_definition$2,
		"sounds_block",
		"sounds_block_struct_definition",
		"s_tag_reference$10",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "sound", &sound_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		special_movement_block_struct_definition,
		"special_movement_block",
		"special_movement_block_struct_definition",
		"s_special_movement_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "Special movement 1", &unnamed_enum$85 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$85)
	{
		"jump",
		"climb",
		"vault",
		"mount",
		"hoist",
		"wall jump",
		"n/a"
	};
	STRING_LIST(unnamed_enum$85, unnamed_enum$85_strings, _countof(unnamed_enum$85_strings));

	TAG_STRUCT(
		spheres_block_struct_definition,
		"spheres_block",
		"spheres_block_struct_definition",
		"s_physics_model_sphere",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "material" },
		{ _field_word_flags, "flags", &unnamed_enum$118 },
		{ _field_real, "relative mass scale" },
		{ _field_real_fraction, "friction" },
		{ _field_real_fraction, "restitution" },
		{ _field_real, "volume " },
		{ _field_real, "mass" },
		FIELD_SKIP("value", 2),
		{ _field_short_block_index, "phantom" },
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_real, "radius" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "value" },
		{ _field_real_vector_3d, "rotation i" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "rotation j" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "rotation k" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "translation" },
		FIELD_SKIP("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		sprite_vertices_block_struct_definition,
		"sprite_vertices_block",
		"sprite_vertices_block_struct_definition",
		"s_rasterizer_vertex_decorator_sprite",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "position" },
		{ _field_real_vector_3d, "offset" },
		{ _field_real_vector_3d, "axis" },
		{ _field_real_point_2d, "texcoord" },
		{ _field_rgb_color, "color" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		squad_groups_block_struct_definition,
		"squad_groups_block",
		"squad_groups_block_struct_definition",
		"s_squad_group_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		FIELD_USELESS_PAD("value", 48),
		{ _field_short_block_index, "parent", _field_id_squad_template },
		{ _field_short_block_index, "initial orders" },
		FIELD_USELESS_PAD("value", 48),
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		squads_v3_struct_definition,
		"squads_v3",
		"squads_v3_struct_definition",
		"s_squad_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 26 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_string, "name" },
		{ _field_long_flags, "flags", &unnamed_enum$65 },
		{ _field_short_enum, "team", &unnamed_enum$66 },
		{ _field_short_block_index, "parent", _field_id_squad_template },
		{ _field_real, "squad delay time", nullptr, "seconds" },
		{ _field_short_integer, "normal diff count", "initial number of actors on normal difficulty" },
		{ _field_short_integer, "insane diff count", "initial number of actors on insane difficulty (hard difficulty is midway between normal and insane)" },
		{ _field_short_enum, "major upgrade", &unnamed_enum$67 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 12),
		FIELD_EXPLANATION("Actor defaults", "The following default values are used for spawned actors"),
		{ _field_short_block_index, "vehicle type" },
		{ _field_short_block_index, "character type" },
		{ _field_short_block_index, "initial zone" },
		FIELD_PAD("value", 2),
		{ _field_short_block_index, "initial weapon" },
		{ _field_short_block_index, "initial secondary weapon" },
		{ _field_short_enum, "grenade type", &unnamed_enum$68 },
		{ _field_short_block_index, "initial order" },
		{ _field_string_id, "vehicle variant" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_block, "starting locations", &actor_starting_locations_block },
		{ _field_string, "Placement script", _field_id_halo_script_block },
		FIELD_SKIP("value", 2),
		FIELD_PAD("value", 2),
		
		{ _struct_version_mode_equal, 1, 24 },
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_string, "name" },
		{ _field_long_flags, "flags", &unnamed_enum$65 },
		{ _field_short_enum, "team", &unnamed_enum$66 },
		{ _field_short_block_index, "parent", _field_id_squad_template },
		FIELD_PAD("value", 12),
		{ _field_real, "squad delay time", nullptr, "seconds" },
		FIELD_PAD("value", 12),
		{ _field_short_integer, "normal diff count", "initial number of actors on normal difficulty" },
		{ _field_short_integer, "insane diff count", "initial number of actors on insane difficulty (hard difficulty is midway between normal and insane)" },
		{ _field_short_enum, "major upgrade", &unnamed_enum$67 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 12),
		FIELD_EXPLANATION("Actor defaults", "The following default values are used for spawned actors"),
		{ _field_short_block_index, "vehicle type" },
		{ _field_short_block_index, "character type" },
		{ _field_short_block_index, "initial zone" },
		{ _field_short_block_index, "initial weapon" },
		{ _field_short_enum, "grenade type", &unnamed_enum$68 },
		{ _field_short_block_index, "initial order" },
		{ _field_string_id, "vehicle variant" },
		FIELD_PAD("value", 8),
		{ _field_block, "starting locations", &actor_starting_locations_block },
		FIELD_PAD("value", 12),
		
		{ _struct_version_mode_equal, 0, 28 },
		{ _field_string, "name" },
		FIELD_PAD("value", 8),
		{ _field_long_flags, "flags", &unnamed_enum$65 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "team", &unnamed_enum$66 },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 20),
		{ _field_short_block_index, "parent" },
		{ _field_short_block_index, "maneuver to squad" },
		{ _field_real, "squad delay time", nullptr, "seconds" },
		FIELD_PAD("value", 40),
		{ _field_short_integer, "normal diff count", "initial number of actors on normal difficulty" },
		{ _field_short_integer, "insane diff count", "initial number of actors on insane difficulty (hard difficulty is midway between normal and insane)" },
		{ _field_short_enum, "major upgrade", &unnamed_enum$67 },
		FIELD_PAD("value", 6),
		{ _field_short_block_index, "character type" },
		{ _field_short_block_index, "initial zone" },
		{ _field_short_block_index, "initial weapon" },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "initial weapon (DO NOT USE)", &weapon_group_reference$2 },
		FIELD_PAD("value", 8),
		{ _field_short_enum, "grenade type", &unnamed_enum$68 },
		{ _field_short_block_index, "initial order" },
		FIELD_PAD("value", 24),
		{ _field_block, "move positions", &move_positions_block },
		{ _field_block, "starting locations", &actor_starting_locations_block },
		{ _field_block, "value", &g_null_block },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$65)
	{
		"unused",
		"never search",
		"start timer immediately",
		"no timer, delay forever",
		"magic sight after timer",
		"automatic migration",
		"DEPRECATED",
		"respawn enabled",
		"blind",
		"deaf",
		"braindead",
		"3d_firing_positions",
		"initially placed",
		"units not enterable by player"
	};
	STRING_LIST(unnamed_enum$65, unnamed_enum$65_strings, _countof(unnamed_enum$65_strings));

	STRINGS(unnamed_enum$66)
	{
		"default",
		"player",
		"human",
		"covenant",
		"flood",
		"sentinel",
		"heretic",
		"prophet",
		"unused8",
		"unused9",
		"unused10",
		"unused11",
		"unused12",
		"unused13",
		"unused14",
		"unused15"
	};
	STRING_LIST(unnamed_enum$66, unnamed_enum$66_strings, _countof(unnamed_enum$66_strings));

	STRINGS(unnamed_enum$67)
	{
		"normal",
		"few",
		"many",
		"none",
		"all"
	};
	STRING_LIST(unnamed_enum$67, unnamed_enum$67_strings, _countof(unnamed_enum$67_strings));

	TAG_STRUCT(
		states_block_struct_definition,
		"states_block",
		"states_block_struct_definition",
		"s_ca2d_rule_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_real_rgb_color, "color" },
		{ _field_short_integer, "counts as", nullptr, "neighbors" },
		FIELD_PAD("value", 2),
		{ _field_real, "initial placement weight" },
		FIELD_PAD("value", 24),
		{ _field_short_block_index, "zero" },
		{ _field_short_block_index, "one" },
		{ _field_short_block_index, "two" },
		{ _field_short_block_index, "three" },
		{ _field_short_block_index, "four" },
		{ _field_short_block_index, "five" },
		{ _field_short_block_index, "six" },
		{ _field_short_block_index, "seven" },
		{ _field_short_block_index, "eight" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		static_spawn_zone_block_struct_definition,
		"static_spawn_zone_block",
		"static_spawn_zone_block_struct_definition",
		"s_static_spawn_zone",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("value", _field_id_cflt),
		FIELD_EXPLANATION("static spawn zones", "lower and upper height can be left at zero, in which case they\nuse the defaults.  leaving relevant teams empty means all teams,\nleaving all games empty means all games"),
		{ _field_struct, "data", &static_spawn_zone_data_struct_struct_definition, _field_id_sszd },
		{ _field_real_point_3d, "position" },
		{ _field_real, "lower height" },
		{ _field_real, "upper height" },
		{ _field_real, "inner radius" },
		{ _field_real, "outer radius" },
		{ _field_real, "weight" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		static_spawn_zone_data_struct_struct_definition,
		"static_spawn_zone_data_struct",
		"static_spawn_zone_data_struct_struct_definition",
		"s_static_spawn_zone_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		{ _field_long_flags, "relevant team", &unnamed_enum$409 },
		FIELD_CUSTOM("value", _field_id_filx),
		{ _field_long_flags, "relevant games", &unnamed_enum$410 },
		{ _field_long_flags, "flags", &unnamed_enum$411 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$409)
	{
		"Alpha team",
		"Bravo team",
		"Charlie team",
		"Delta team",
		"Echo team",
		"Foxtrot team",
		"Golf team",
		"Hotel team",
		"Neutral"
	};
	STRING_LIST(unnamed_enum$409, unnamed_enum$409_strings, _countof(unnamed_enum$409_strings));

	STRINGS(unnamed_enum$410)
	{
		"all slayer",
		"all oddball",
		"all king",
		"all ctf",
		"all race",
		"all headhunter",
		"all juggernaut",
		"all territories"
	};
	STRING_LIST(unnamed_enum$410, unnamed_enum$410_strings, _countof(unnamed_enum$410_strings));

	STRINGS(unnamed_enum$411)
	{
		"disabled if flag home",
		"disabled if flag away",
		"disabled if bomb home",
		"disabled if bomb away"
	};
	STRING_LIST(unnamed_enum$411, unnamed_enum$411_strings, _countof(unnamed_enum$411_strings));

	TAG_STRUCT(
		stereo_system_block_struct_definition,
		"stereo_system_block",
		"stereo_system_block_struct_definition",
		"s_stereo_system_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "unused" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		stiff_spring_constraints_block_struct_definition,
		"stiff_spring_constraints_block",
		"stiff_spring_constraints_block_struct_definition",
		"s_physics_model_stiff_spring_constraint",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "constraint bodies", &constraint_bodies_struct_struct_definition, _field_id_csbs },
		FIELD_PAD("value", 4),
		{ _field_real, "spring_length" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_audibility_block_struct_definition,
		"structure_bsp_audibility_block",
		"structure_bsp_audibility_block_struct_definition",
		"s_structure_audibility",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "door portal count" },
		{ _field_real_bounds, "cluster distance bounds" },
		{ _field_block, "encoded door pas", &door_encoded_pas_block },
		{ _field_block, "cluster door portal encoded pas", &cluster_door_portal_encoded_pas_block },
		{ _field_block, "ai deafening pas", &ai_deafening_encoded_pas_block },
		{ _field_block, "cluster distances", &encoded_cluster_distances_block },
		{ _field_block, "machine door mapping", &occluder_to_machine_door_mapping_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_background_sound_palette_block_struct_definition,
		"structure_bsp_background_sound_palette_block",
		"structure_bsp_background_sound_palette_block_struct_definition",
		"s_structure_background_sound_palette_entry",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_tag_reference, "background sound", &sound_looping_group_reference },
		{ _field_tag_reference, "inside cluster sound", "play this only when the player is inside the cluster", &sound_looping_group_reference },
		FIELD_PAD("value", 20),
		{ _field_real, "cutoff distance" },
		{ _field_long_flags, "scale flags", &unnamed_enum$154 },
		{ _field_real_fraction, "interior scale" },
		{ _field_real_fraction, "portal scale" },
		{ _field_real_fraction, "exterior scale" },
		{ _field_real, "interpolation speed", nullptr, "1/sec" },
		FIELD_PAD("value", 8),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$154)
	{
		"override default scale",
		"use adjacent cluster as portal scale",
		"use adjacent cluster as exterior scale",
		"scale with weather intensity"
	};
	STRING_LIST(unnamed_enum$154, unnamed_enum$154_strings, _countof(unnamed_enum$154_strings));

	TAG_STRUCT(
		structure_bsp_breakable_surface_block_struct_definition,
		"structure_bsp_breakable_surface_block",
		"structure_bsp_breakable_surface_block_struct_definition",
		"s_structure_breakable_surface",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_block_index, "instanced geometry instance" },
		{ _field_short_integer, "breakable surface index" },
		{ _field_real_point_3d, "centroid" },
		{ _field_real, "radius" },
		{ _field_long_integer, "collision surface index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_cluster_data_block_new_struct_definition,
		"structure_bsp_cluster_data_block_new",
		"structure_bsp_cluster_data_block_new_struct_definition",
		"s_structure_cluster_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "section", &geometry_section_fieldset_new_struct_definition, _field_id_SECT }, // structure_version:1
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_cluster_data_block_struct_definition,
		"structure_bsp_cluster_data_block",
		"structure_bsp_cluster_data_block_struct_definition",
		"s_structure_cluster_data_old",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "section", &geometry_section_fieldset_new_struct_definition, _field_id_SECT }, // structure_version:1
		{ _field_block, "strip segments", &structure_indices_segment_block },
		{ _field_block, "strip segment references", &structure_indices_segment_reference_block },
		FIELD_EXPLANATION("ISQ INFO", nullptr),
		{ _field_struct, "isq info", &global_geometry_isq_info_struct_struct_definition, _field_id_ISQI },
		{ _field_block, "forward edges", &structure_shared_edge_block },
		{ _field_block, "forward edge groups", &structure_shared_edge_group_block },
		{ _field_block, "backward edges", &structure_shared_edge_block },
		{ _field_block, "backward edge groups", &structure_shared_edge_group_block },
		{ _field_block, "subcluster boundaries", &structure_subcluster_boundary_block },
		{ _field_block, "first triangle indices", &structure_strip_segment_first_triangle_index_block },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "runtime_dx9_index_buffer", _field_id_zero_data },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_cluster_debug_info_block_struct_definition,
		"structure_bsp_cluster_debug_info_block",
		"structure_bsp_cluster_debug_info_block_struct_definition",
		"s_structure_cluster_debug_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "errors", &unnamed_enum$385 },
		{ _field_word_flags, "warnings", &unnamed_enum$386 },
		FIELD_PAD("value", 28),
		{ _field_block, "lines", &structure_bsp_debug_info_render_line_block },
		{ _field_block, "fog plane indices", &structure_bsp_debug_info_indices_block },
		{ _field_block, "visible fog plane indices", &structure_bsp_debug_info_indices_block },
		{ _field_block, "vis-fog omission cluster indices", &structure_bsp_debug_info_indices_block },
		{ _field_block, "containing fog zone indices", &structure_bsp_debug_info_indices_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$385)
	{
		"multiple fog planes",
		"fog zone collision",
		"fog zone immersion"
	};
	STRING_LIST(unnamed_enum$385, unnamed_enum$385_strings, _countof(unnamed_enum$385_strings));

	STRINGS(unnamed_enum$386)
	{
		"multiple visible fog planes",
		"visible fog cluster omission",
		"fog plane missed render-bsp"
	};
	STRING_LIST(unnamed_enum$386, unnamed_enum$386_strings, _countof(unnamed_enum$386_strings));

	TAG_STRUCT(
		structure_bsp_cluster_havok_shape_struct_definition,
		"structure_bsp_cluster_havok_shape",
		"structure_bsp_cluster_havok_shape_struct_definition",
		"s_hkshapecollection",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 24),
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_cluster_instanced_geometry_index_block_struct_definition,
		"structure_bsp_cluster_instanced_geometry_index_block",
		"structure_bsp_cluster_instanced_geometry_index_block_struct_definition",
		"s_word$8",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "instanced geometry index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_cluster_lightmap_data_block_struct_definition,
		"structure_bsp_cluster_lightmap_data_block",
		"structure_bsp_cluster_lightmap_data_block_struct_definition",
		"s_structure_cluster_lightmap_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$370 },
		{ _field_word_flags, "flags", &unnamed_enum$371 },
		{ _field_long_integer, "lightmap group index" },
		{ _field_long_integer, "lightmap group index" },
		{ _field_block, "indices", &structure_bsp_cluster_lightmap_index_block },
		{ _field_block, "texture coordinates", &structure_bsp_cluster_lightmap_texture_coordinate_block },
		{ _field_block, "duplicate indices", &structure_bsp_cluster_lightmap_duplicate_index_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$370)
	{
		"single texture"
	};
	STRING_LIST(unnamed_enum$370, unnamed_enum$370_strings, _countof(unnamed_enum$370_strings));

	STRINGS(unnamed_enum$371)
	{
		"use cluster vertex buffer"
	};
	STRING_LIST(unnamed_enum$371, unnamed_enum$371_strings, _countof(unnamed_enum$371_strings));

	TAG_STRUCT(
		structure_bsp_cluster_lightmap_duplicate_index_block_struct_definition,
		"structure_bsp_cluster_lightmap_duplicate_index_block",
		"structure_bsp_cluster_lightmap_duplicate_index_block_struct_definition",
		"s_long$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "duplicate vertex index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_cluster_lightmap_index_block_struct_definition,
		"structure_bsp_cluster_lightmap_index_block",
		"structure_bsp_cluster_lightmap_index_block_struct_definition",
		"s_word$10",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "triangle index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_cluster_lightmap_texture_coordinate_block_struct_definition,
		"structure_bsp_cluster_lightmap_texture_coordinate_block",
		"structure_bsp_cluster_lightmap_texture_coordinate_block_struct_definition",
		"s_real_point2d",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_2d, "texture coordinate" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_cluster_mopp_shape_struct_definition,
		"structure_bsp_cluster_mopp_shape",
		"structure_bsp_cluster_mopp_shape_struct_definition",
		"s_cluster_mopp_shape",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 20),
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_cluster_portal_block_struct_definition,
		"structure_bsp_cluster_portal_block",
		"structure_bsp_cluster_portal_block_struct_definition",
		"s_cluster_portal",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "back cluster" },
		{ _field_short_integer, "front cluster" },
		{ _field_long_integer, "plane index" },
		{ _field_real_point_3d, "centroid" },
		{ _field_real, "bounding radius" },
		{ _field_long_flags, "flags", &unnamed_enum$367 },
		{ _field_block, "vertices", &structure_bsp_cluster_portal_vertex_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$367)
	{
		"ai can\'t hear through this shit",
		"one-way",
		"door",
		"no-way",
		"one-way-reversed",
		"no one can hear through this"
	};
	STRING_LIST(unnamed_enum$367, unnamed_enum$367_strings, _countof(unnamed_enum$367_strings));

	TAG_STRUCT(
		structure_bsp_cluster_portal_index_block_struct_definition,
		"structure_bsp_cluster_portal_index_block",
		"structure_bsp_cluster_portal_index_block_struct_definition",
		"s_short$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "portal index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_cluster_portal_vertex_block_struct_definition,
		"structure_bsp_cluster_portal_vertex_block",
		"structure_bsp_cluster_portal_vertex_block_struct_definition",
		"s_real_point3d$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "point" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		structure_bsp_cluster_struct_definition,
		"structure_bsp_cluster",
		"structure_bsp_cluster_struct_definition",
		"s_structure_cluster",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 27 },
		{ _field_struct, "section info", &global_geometry_section_info_struct_struct_definition, _field_id_SINF },
		{ _field_struct, "geometry block info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		{ _field_block, "cluster data", &structure_bsp_cluster_data_block_new_block },
		FIELD_EXPLANATION("CLUSTER INFO", nullptr),
		{ _field_real_bounds, "bounds x" },
		{ _field_real_bounds, "bounds y" },
		{ _field_real_bounds, "bounds z" },
		{ _field_char_integer, "scenario sky index" },
		{ _field_char_integer, "media index" },
		{ _field_char_integer, "scenario visible sky index" },
		{ _field_char_integer, "scenario atmospheric fog index" },
		{ _field_char_integer, "planar fog designator" },
		{ _field_char_integer, "visible fog plane index" },
		{ _field_short_block_index, "background sound" },
		{ _field_short_block_index, "sound environment" },
		{ _field_short_block_index, "weather" },
		{ _field_short_integer, "transition structure bsp" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		{ _field_word_flags, "flags", &unnamed_enum$369 },
		FIELD_PAD("value", 2),
		{ _field_block, "predicted resources", &predicted_resource_block },
		{ _field_block, "portals", &structure_bsp_cluster_portal_index_block },
		{ _field_long_integer, "checksum from structure" },
		{ _field_block, "instanced geometry indices", &structure_bsp_cluster_instanced_geometry_index_block },
		{ _field_block, "index reorder table", &global_geometry_section_strip_index_block },
		{ _field_data, "collision mopp code", &cluster_mopp_code_data },
		
		{ _struct_version_mode_equal, 1, 32 },
		{ _field_struct, "section info", &global_geometry_section_info_struct_struct_definition, _field_id_SINF },
		{ _field_struct, "geometry block info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		{ _field_block, "cluster data", &structure_bsp_cluster_data_block },
		FIELD_EXPLANATION("CLUSTER INFO", nullptr),
		{ _field_real_bounds, "bounds x" },
		{ _field_real_bounds, "bounds y" },
		{ _field_real_bounds, "bounds z" },
		{ _field_char_integer, "scenario sky index" },
		{ _field_char_integer, "media index" },
		{ _field_char_integer, "scenario visible sky index" },
		{ _field_char_integer, "scenario atmospheric fog index" },
		{ _field_char_integer, "planar fog designator" },
		{ _field_char_integer, "visible fog plane index" },
		{ _field_short_block_index, "background sound" },
		{ _field_short_block_index, "sound environment" },
		{ _field_short_block_index, "weather" },
		{ _field_short_integer, "transition structure bsp" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		{ _field_word_flags, "flags", &unnamed_enum$369 },
		FIELD_PAD("value", 2),
		{ _field_block, "subclusters", &structure_subcluster_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		{ _field_block, "portals", &structure_bsp_cluster_portal_index_block },
		{ _field_long_integer, "checksum from structure" },
		{ _field_data, "visibility mopp code", &structure_bsp_cluster_visibility_mopp_code_data },
		{ _field_struct, "mopp shape", &structure_bsp_cluster_mopp_shape_struct_definition, _field_id_scms },
		{ _field_block, "visibility mopp leaves", &structure_bsp_cluster_visibility_mopp_leaf_block },
		{ _field_data, "visibility subcluster bitvector", &structure_bsp_cluster_visibility_subcluster_bitvector },
		{ _field_struct, "cluster mopp shape", &structure_bsp_cluster_havok_shape_struct_definition, _field_id_schs },
		{ _field_block, "instanced geometry indices", &structure_bsp_cluster_instanced_geometry_index_block },
		{ _field_block, "visibility mopp reorder table", &visibility_mopp_reorder_table_block },
		
		{ _struct_version_mode_equal, 0, 33 },
		{ _field_struct, "section", &geometry_section_fieldset_new_struct_definition, _field_id_SECT }, // structure_version:1
		{ _field_struct, "section info", &global_geometry_section_info_struct_struct_definition, _field_id_SINF },
		FIELD_EXPLANATION("CLUSTER INFO", nullptr),
		{ _field_real_bounds, "bounds x" },
		{ _field_real_bounds, "bounds y" },
		{ _field_real_bounds, "bounds z" },
		{ _field_short_integer, "sky index" },
		{ _field_short_integer, "visible sky index" },
		{ _field_short_integer, "planar fog designator" },
		{ _field_short_block_index, "background sound" },
		{ _field_short_block_index, "sound environment" },
		{ _field_short_block_index, "weather" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 4),
		{ _field_block, "strip segments", &structure_indices_segment_block },
		{ _field_block, "strip segment references", &structure_indices_segment_reference_block },
		{ _field_block, "subclusters", &structure_subcluster_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		{ _field_block, "portals", &structure_bsp_cluster_portal_index_block },
		FIELD_EXPLANATION("ISQ INFO", nullptr),
		{ _field_struct, "isq info", &global_geometry_isq_info_struct_struct_definition, _field_id_ISQI },
		{ _field_block, "forward edges", &structure_shared_edge_block },
		{ _field_block, "forward edge groups", &structure_shared_edge_group_block },
		{ _field_block, "backward edges", &structure_shared_edge_block },
		{ _field_block, "backward edge groups", &structure_shared_edge_group_block },
		{ _field_block, "subcluster boundaries", &structure_subcluster_boundary_block },
		{ _field_block, "first triangle indices", &structure_strip_segment_first_triangle_index_block },
		{ _field_block, "lightmap fragments", &structure_bsp_cluster_lightmap_data_block },
		{ _field_block, "lightmap sampling info", &structure_lightmap_sampling_info_block },
		{ _field_long_integer, "checksum from structure" },
		{ _field_pointer, "runtime_dx9_index_buffer", _field_id_zero_data },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$369)
	{
		"one way portal",
		"door portal",
		"postprocessed geometry",
		"is the sky"
	};
	STRING_LIST(unnamed_enum$369, unnamed_enum$369_strings, _countof(unnamed_enum$369_strings));

	TAG_STRUCT(
		structure_bsp_cluster_visibility_mopp_leaf_block_struct_definition,
		"structure_bsp_cluster_visibility_mopp_leaf_block",
		"structure_bsp_cluster_visibility_mopp_leaf_block_struct_definition",
		"s_structure_cluster_visibility_mopp_leaf",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "identifier" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_conveyor_surface_block_struct_definition,
		"structure_bsp_conveyor_surface_block",
		"structure_bsp_conveyor_surface_block_struct_definition",
		"s_structure_conveyor_surface",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_vector_3d, "u" },
		{ _field_real_vector_3d, "v" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_debug_info_block_struct_definition,
		"structure_bsp_debug_info_block",
		"structure_bsp_debug_info_block_struct_definition",
		"s_structure_debug_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 64),
		{ _field_block, "clusters", &structure_bsp_cluster_debug_info_block },
		{ _field_block, "fog planes", &structure_bsp_fog_plane_debug_info_block },
		{ _field_block, "fog zones", &structure_bsp_fog_zone_debug_info_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_debug_info_indices_block_struct_definition,
		"structure_bsp_debug_info_indices_block",
		"structure_bsp_debug_info_indices_block_struct_definition",
		"s_long$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_debug_info_render_line_block_struct_definition,
		"structure_bsp_debug_info_render_line_block",
		"structure_bsp_debug_info_render_line_block_struct_definition",
		"s_structure_debug_info_render_line",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$387 },
		{ _field_short_integer, "code" },
		{ _field_short_integer, "pad thai" },
		FIELD_PAD("value", 2),
		{ _field_real_point_3d, "point 0" },
		{ _field_real_point_3d, "point 1" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$387)
	{
		"fog plane boundary edge",
		"fog plane internal edge",
		"fog zone floodfill",
		"fog zone cluster centroid",
		"fog zone cluster geometry",
		"fog zone portal centroid",
		"fog zone portal geometry"
	};
	STRING_LIST(unnamed_enum$387, unnamed_enum$387_strings, _countof(unnamed_enum$387_strings));

	TAG_STRUCT(
		structure_bsp_detail_object_data_block_struct_definition,
		"structure_bsp_detail_object_data_block",
		"structure_bsp_detail_object_data_block_struct_definition",
		"s_structure_detail_object_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "cells", &global_detail_object_cells_block },
		{ _field_block, "instances", &global_detail_object_block },
		{ _field_block, "counts", &global_detail_object_counts_block },
		{ _field_block, "z reference vectors", &global_z_reference_vector_block },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 3),
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_environment_object_block_struct_definition,
		"structure_bsp_environment_object_block",
		"structure_bsp_environment_object_block_struct_definition",
		"s_structure_environment_object",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_real_quaternion, "rotation" },
		{ _field_real_point_3d, "translation" },
		{ _field_short_block_index, "palette_index" },
		FIELD_PAD("value", 2),
		{ _field_long_integer, "unique id" },
		{ _field_tag, "exported object type" },
		{ _field_string, "scenario object name" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_environment_object_palette_block_struct_definition,
		"structure_bsp_environment_object_palette_block",
		"structure_bsp_environment_object_palette_block_struct_definition",
		"s_structure_environment_object_palette_entry",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "definition", &scenery_group_reference$2 },
		{ _field_tag_reference, "model", &render_model_group_reference$3 },
		FIELD_PAD("value", 4),
		{ _field_terminator }
	};

	TAG_REFERENCE(scenery_group_reference$2, SCENERY_TAG, _tag_reference_flag_dont_resolve_in_editor);

	TAG_REFERENCE(render_model_group_reference$3, RENDER_MODEL_TAG, _tag_reference_flag_dont_resolve_in_editor);

	TAG_STRUCT(
		structure_bsp_fake_lightprobes_block_struct_definition,
		"structure_bsp_fake_lightprobes_block",
		"structure_bsp_fake_lightprobes_block_struct_definition",
		"s_object_fake_lightprobe",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "object identifier", &scenario_object_id_struct_struct_definition, _field_id_object_id },
		{ _field_struct, "render lighting", &render_lighting_struct_struct_definition, _field_id_rnli },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_fog_plane_block_struct_definition,
		"structure_bsp_fog_plane_block",
		"structure_bsp_fog_plane_block_struct_definition",
		"s_structure_fog_plane",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "scenario planar fog index" },
		FIELD_PAD("value", 2),
		{ _field_real_plane_3d, "plane" },
		{ _field_word_flags, "flags", &unnamed_enum$368 },
		{ _field_short_integer, "priority" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$368)
	{
		"extend infinitely while visible",
		"don\'t floodfill",
		"aggressive floodfill"
	};
	STRING_LIST(unnamed_enum$368, unnamed_enum$368_strings, _countof(unnamed_enum$368_strings));

	TAG_STRUCT(
		structure_bsp_fog_plane_debug_info_block_struct_definition,
		"structure_bsp_fog_plane_debug_info_block",
		"structure_bsp_fog_plane_debug_info_block_struct_definition",
		"s_structure_fog_plane_debug_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "fog zone index" },
		FIELD_PAD("value", 24),
		{ _field_long_integer, "connected plane designator" },
		{ _field_block, "lines", &structure_bsp_debug_info_render_line_block },
		{ _field_block, "intersected cluster indices", &structure_bsp_debug_info_indices_block },
		{ _field_block, "inf. extent cluster indices", &structure_bsp_debug_info_indices_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_fog_zone_debug_info_block_struct_definition,
		"structure_bsp_fog_zone_debug_info_block",
		"structure_bsp_fog_zone_debug_info_block_struct_definition",
		"s_structure_fog_zone_debug_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "media index", nullptr, "scenario fog plane", FIELD_FLAG_READ_ONLY },
		{ _field_long_integer, "base fog plane index" },
		FIELD_PAD("value", 24),
		{ _field_block, "lines", &structure_bsp_debug_info_render_line_block },
		{ _field_block, "immersed cluster indices", &structure_bsp_debug_info_indices_block },
		{ _field_block, "bounding fog plane indices", &structure_bsp_debug_info_indices_block },
		{ _field_block, "collision fog plane indices", &structure_bsp_debug_info_indices_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_instanced_geometry_definition_block_struct_definition,
		"structure_bsp_instanced_geometry_definition_block",
		"structure_bsp_instanced_geometry_definition_block_struct_definition",
		"s_structure_instanced_geometry_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "render info", &structure_instanced_geometry_render_info_struct_definition, _field_id_igri }, // structure_version:1
		{ _field_long_integer, "checksum" },
		{ _field_real_point_3d, "bounding sphere center" },
		{ _field_real, "bounding sphere radius" },
		{ _field_struct, "collision info", &collision_bsp_struct_definition, _field_id_cbsp }, // structure_version:2
		{ _field_block, "bsp_physics", &collision_bsp_physics_block },
		{ _field_block, "render leaves", &structure_bsp_leaf_block },
		{ _field_block, "surface references", &structure_bsp_surface_reference_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		structure_bsp_leaf_struct_definition,
		"structure_bsp_leaf",
		"structure_bsp_leaf_struct_definition",
		"s_structure_leaf$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 3 },
		{ _field_short_integer, "cluster" },
		{ _field_short_integer, "surface reference count" },
		{ _field_long_integer, "first surface reference index" },
		
		{ _struct_version_mode_equal, 0, 5 },
		FIELD_SKIP("value", 6),
		FIELD_PAD("value", 2),
		{ _field_short_integer, "cluster" },
		{ _field_short_integer, "surface reference count" },
		{ _field_long_integer, "first surface reference index" },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_lightmap_data_block_struct_definition,
		"structure_bsp_lightmap_data_block",
		"structure_bsp_lightmap_data_block_struct_definition",
		"s_structure_lightmap_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "bitmap group", &bitmap_group_reference$6 },
		{ _field_terminator }
	};

	TAG_REFERENCE(bitmap_group_reference$6, BITMAP_TAG);

	TAG_STRUCT(
		structure_bsp_marker_block_struct_definition,
		"structure_bsp_marker_block",
		"structure_bsp_marker_block_struct_definition",
		"s_structure_marker",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_real_quaternion, "rotation" },
		{ _field_real_point_3d, "position" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_pathfinding_edges_block_struct_definition,
		"structure_bsp_pathfinding_edges_block",
		"structure_bsp_pathfinding_edges_block_struct_definition",
		"s_byte$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "midpoint" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_precomputed_lighting_block_struct_definition,
		"structure_bsp_precomputed_lighting_block",
		"structure_bsp_precomputed_lighting_block_struct_definition",
		"s_structure_precomputed_lighting",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "index" },
		{ _field_short_enum, "light type", &unnamed_enum$381 },
		{ _field_char_integer, "attachment index" },
		{ _field_char_integer, "object type" },
		{ _field_struct, "visibility", &visibility_struct_struct_definition, _field_id_svis },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$381)
	{
		"free standing",
		"attached to editor object",
		"attached to structure object"
	};
	STRING_LIST(unnamed_enum$381, unnamed_enum$381_strings, _countof(unnamed_enum$381_strings));

	TAG_STRUCT(
		structure_bsp_runtime_decal_block_struct_definition,
		"structure_bsp_runtime_decal_block",
		"structure_bsp_runtime_decal_block_struct_definition",
		"s_structure_runtime_decal",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_SKIP("value", 16),
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_sky_owner_cluster_block_struct_definition,
		"structure_bsp_sky_owner_cluster_block",
		"structure_bsp_sky_owner_cluster_block_struct_definition",
		"s_short$4",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "cluster owner" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_sound_cluster_block_struct_definition,
		"structure_bsp_sound_cluster_block",
		"structure_bsp_sound_cluster_block_struct_definition",
		"s_structure_sound_cluster",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_block, "enclosing portal designators", &structure_sound_cluster_portal_designators_block },
		{ _field_block, "interior cluster indices", &structure_sound_cluster_interior_cluster_indices_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_sound_environment_palette_block_struct_definition,
		"structure_bsp_sound_environment_palette_block",
		"structure_bsp_sound_environment_palette_block_struct_definition",
		"s_structure_sound_environment_palette_entry",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_tag_reference, "sound environment", &sound_environment_group_reference },
		{ _field_real, "cutoff distance" },
		{ _field_real, "interpolation speed", nullptr, "1/sec" },
		FIELD_PAD("value", 24),
		{ _field_terminator }
	};

	TAG_REFERENCE(sound_environment_group_reference, SOUND_ENVIRONMENT_TAG);

	VERSIONED_TAG_STRUCT(
		structure_bsp_surface_reference_struct_definition,
		"structure_bsp_surface_reference",
		"structure_bsp_surface_reference_struct_definition",
		"s_structure_surface_reference$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 3 },
		{ _field_short_integer, "strip index" },
		{ _field_short_integer, "lightmap triangle index" },
		{ _field_long_integer, "bsp node index" },
		
		{ _struct_version_mode_equal, 0, 4 },
		{ _field_long_integer, "strip index" },
		{ _field_long_integer, "bsp node index" },
		{ _field_long_integer, "lightmap triangle index" },
		FIELD_PAD("value", 12),
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_weather_palette_block_struct_definition,
		"structure_bsp_weather_palette_block",
		"structure_bsp_weather_palette_block_struct_definition",
		"s_structure_weather_palette_entry",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_tag_reference, "weather system", &weather_system_group_reference },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 32),
		{ _field_tag_reference, "wind", &wind_group_reference },
		{ _field_real_vector_3d, "wind direction" },
		{ _field_real, "wind magnitude" },
		FIELD_PAD("value", 4),
		{ _field_string, "wind scale function" },
		{ _field_terminator }
	};

	TAG_REFERENCE(weather_system_group_reference, WEATHER_SYSTEM_TAG);

	TAG_REFERENCE(wind_group_reference, WIND_TAG);

	TAG_STRUCT(
		structure_bsp_weather_polyhedron_block_struct_definition,
		"structure_bsp_weather_polyhedron_block",
		"structure_bsp_weather_polyhedron_block_struct_definition",
		"s_structure_weather_polyhedron",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "bounding sphere center" },
		{ _field_real, "bounding sphere radius" },
		{ _field_block, "planes", &structure_bsp_weather_polyhedron_plane_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_bsp_weather_polyhedron_plane_block_struct_definition,
		"structure_bsp_weather_polyhedron_plane_block",
		"structure_bsp_weather_polyhedron_plane_block_struct_definition",
		"s_real_plane3d$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_plane_3d, "plane" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_collision_materials_block_struct_definition,
		"structure_collision_materials_block",
		"structure_collision_materials_block_struct_definition",
		"s_structure_collision_material",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "old shader", &shader_group_reference },
		FIELD_PAD("value", 2),
		{ _field_short_block_index, "conveyor surface index" },
		{ _field_tag_reference, "new shader", &shader_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_device_portal_association_block_struct_definition,
		"structure_device_portal_association_block",
		"structure_device_portal_association_block_struct_definition",
		"s_structure_portal_device_machine_association",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "device id", &scenario_object_id_struct_struct_definition, _field_id_object_id },
		{ _field_short_integer, "first game portal index" },
		{ _field_short_integer, "game portal count" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_indices_segment_block_struct_definition,
		"structure_indices_segment_block",
		"structure_indices_segment_block_struct_definition",
		"s_structure_indices_segment",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "strip start index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_indices_segment_reference_block_struct_definition,
		"structure_indices_segment_reference_block",
		"structure_indices_segment_reference_block_struct_definition",
		"s_structure_indices_segment_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "strip segment index" },
		{ _field_char_integer, "part index" },
		{ _field_char_integer, "lightmap fragment index" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		structure_instanced_geometry_render_info_struct_definition,
		"structure_instanced_geometry_render_info",
		"structure_instanced_geometry_render_info_struct_definition",
		"s_structure_instanced_geometry_render_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 4 },
		{ _field_struct, "section info", &global_geometry_section_info_struct_struct_definition, _field_id_SINF },
		{ _field_struct, "geometry block info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		{ _field_block, "render data", &structure_bsp_cluster_data_block_new_block },
		{ _field_block, "index reorder table", &global_geometry_section_strip_index_block },
		
		{ _struct_version_mode_equal, 0, 4 },
		{ _field_struct, "section info", &global_geometry_section_info_struct_struct_definition, _field_id_SINF },
		{ _field_struct, "geometry block info", &global_geometry_block_info_struct_struct_definition, _field_id_BLOK },
		{ _field_block, "render data", &structure_bsp_cluster_data_block },
		{ _field_block, "instance definition subclusters", &structure_subcluster_block },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_lightmap_bsp_leaf_block_struct_definition,
		"structure_lightmap_bsp_leaf_block",
		"structure_lightmap_bsp_leaf_block_struct_definition",
		"s_structure_lightmap_bsp_leaf",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "bounds min x" },
		{ _field_char_integer, "bounds min y" },
		{ _field_char_integer, "bounds min z" },
		{ _field_char_integer, "bounds max x" },
		{ _field_char_integer, "bounds max y" },
		{ _field_char_integer, "bounds max z" },
		{ _field_short_integer, "first surface index" },
		{ _field_short_integer, "surface count" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_lightmap_group_block_struct_definition,
		"structure_lightmap_group_block",
		"structure_lightmap_group_block_struct_definition",
		"s_structure_lightmap_group",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$285 },
		{ _field_word_flags, "flags", &unnamed_enum$286 },
		{ _field_long_integer, "structure checksum" },
		{ _field_block, "section palette", &structure_lightmap_palette_color_block },
		{ _field_block, "writable palettes", &structure_lightmap_palette_color_block },
		{ _field_tag_reference, "bitmap group", &bitmap_group_reference$3 },
		{ _field_block, "clusters", &lightmap_geometry_section_block },
		{ _field_block, "cluster render info", &lightmap_geometry_render_info_block },
		{ _field_block, "poop definitions", &lightmap_geometry_section_block },
		{ _field_block, "lighting environments", &structure_lightmap_lighting_environment_block },
		{ _field_block, "geometry buckets", &lightmap_vertex_buffer_bucket_block },
		{ _field_block, "instance render info", &lightmap_geometry_render_info_block },
		{ _field_block, "instance bucket refs", &lightmap_instance_bucket_reference_block },
		{ _field_block, "scenery object info", &lightmap_scenery_object_info_block },
		{ _field_block, "scenery object bucket refs", &lightmap_instance_bucket_reference_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$285)
	{
		"normal"
	};
	STRING_LIST(unnamed_enum$285, unnamed_enum$285_strings, _countof(unnamed_enum$285_strings));

	STRINGS(unnamed_enum$286)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$286, unnamed_enum$286_strings, _countof(unnamed_enum$286_strings));

	TAG_REFERENCE(bitmap_group_reference$3, BITMAP_TAG);

	TAG_STRUCT(
		structure_lightmap_lighting_environment_block_struct_definition,
		"structure_lightmap_lighting_environment_block",
		"structure_lightmap_lighting_environment_block_struct_definition",
		"s_structure_lightmap_lighting_environment",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_point_3d, "sample_point" },
		{ _field_array, "red coefficients", &unnamed_array$32 },
		{ _field_array, "green coefficients", &unnamed_array$33 },
		{ _field_array, "blue coefficients", &unnamed_array$34 },
		{ _field_real_vector_3d, "mean incoming light direction" },
		{ _field_real_point_3d, "incoming light intensity" },
		{ _field_long_integer, "specular bitmap index" },
		{ _field_real_vector_3d, "rotation axis" },
		{ _field_real, "rotation speed" },
		{ _field_real_vector_3d, "bump direction" },
		{ _field_real_rgb_color, "color tint" },
		{ _field_short_enum, "procedural override", &unnamed_enum$294 },
		{ _field_word_flags, "flags", &unnamed_enum$295 },
		{ _field_real_vector_3d, "procedural param0" },
		{ _field_real_vector_3d, "procedural param1.xyz" },
		{ _field_real, "procedural param1.w" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$294)
	{
		"no overide",
		"CIE clear sky",
		"CIE partly cloudy",
		"CIE cloudy",
		"directional light",
		"cone light",
		"sphere light",
		"hemisphere light"
	};
	STRING_LIST(unnamed_enum$294, unnamed_enum$294_strings, _countof(unnamed_enum$294_strings));

	STRINGS(unnamed_enum$295)
	{
		"lock values"
	};
	STRING_LIST(unnamed_enum$295, unnamed_enum$295_strings, _countof(unnamed_enum$295_strings));

	TAG_STRUCT(
		structure_lightmap_palette_color_block_struct_definition,
		"structure_lightmap_palette_color_block",
		"structure_lightmap_palette_color_block_struct_definition",
		"s_structure_lightmap_palette_color_block",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		6)
	{
		{ _field_long_integer, "FIRST palette color" },
		FIELD_SKIP("value", 1020),
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_lightmap_sampling_info_block_struct_definition,
		"structure_lightmap_sampling_info_block",
		"structure_lightmap_sampling_info_block_struct_definition",
		"s_structure_lightmap_sampling_info",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "leaves", &structure_lightmap_bsp_leaf_block },
		{ _field_block, "surfaces", &structure_lightmap_surface_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_lightmap_surface_block_struct_definition,
		"structure_lightmap_surface_block",
		"structure_lightmap_surface_block_struct_definition",
		"s_structure_lightmap_surface",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "plane designator" },
		{ _field_short_integer, "strip segment reference index" },
		{ _field_short_integer, "strip triangle index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_physics_struct_struct_definition,
		"structure_physics_struct",
		"structure_physics_struct_struct_definition",
		"s_structure_physics",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_data, "*mopp code", &mopp_code_data },
		FIELD_PAD("value", 4),
		{ _field_real_point_3d, "*mopp bounds min" },
		{ _field_real_point_3d, "*mopp bounds max" },
		{ _field_data, "*breakable surfaces mopp code", &mopp_code_data },
		{ _field_block, "breakable surfaace key table", &breakable_surface_key_table_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_portal_device_mapping_block_struct_definition,
		"structure_portal_device_mapping_block",
		"structure_portal_device_mapping_block_struct_definition",
		"s_structure_portal_device_map",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "device portal associations", &structure_device_portal_association_block },
		{ _field_block, "game portal to portal map", &game_portal_to_portal_mapping_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_shared_edge_block_struct_definition,
		"structure_shared_edge_block",
		"structure_shared_edge_block_struct_definition",
		"s_structure_shared_edge",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_array, "vertex indices", &unnamed_array$47 },
		{ _field_short_integer, "triangle index" },
		{ _field_short_integer, "adjacent cluster shared edge index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_shared_edge_group_block_struct_definition,
		"structure_shared_edge_group_block",
		"structure_shared_edge_group_block_struct_definition",
		"s_structure_shared_edge_group",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "first shared edge index" },
		{ _field_short_integer, "shared edge count" },
		{ _field_short_integer, "adjacent cluster index" },
		{ _field_short_integer, "subcluster index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_sound_cluster_interior_cluster_indices_struct_definition,
		"structure_sound_cluster_interior_cluster_indices",
		"structure_sound_cluster_interior_cluster_indices_struct_definition",
		"s_short$6",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "interior cluster index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_sound_cluster_portal_designators_struct_definition,
		"structure_sound_cluster_portal_designators",
		"structure_sound_cluster_portal_designators_struct_definition",
		"s_short$5",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "portal designator" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_strip_segment_first_triangle_index_block_struct_definition,
		"structure_strip_segment_first_triangle_index_block",
		"structure_strip_segment_first_triangle_index_block_struct_definition",
		"s_word$9",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "triangle index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_subcluster_block_struct_definition,
		"structure_subcluster_block",
		"structure_subcluster_block_struct_definition",
		"s_structure_subcluster",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_bounds, "bounds x" },
		{ _field_real_bounds, "bounds y" },
		{ _field_real_bounds, "bounds z" },
		{ _field_short_integer, "first strip reference index" },
		{ _field_short_integer, "strip reference count" },
		{ _field_short_integer, "first explicit edge index" },
		{ _field_short_integer, "explicit edge count" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		structure_subcluster_boundary_block_struct_definition,
		"structure_subcluster_boundary_block",
		"structure_subcluster_boundary_block_struct_definition",
		"s_structure_subcluster_boundary",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "lower subcluster index" },
		{ _field_short_integer, "upper subcluster index" },
		{ _field_short_integer, "first explicit edge index" },
		{ _field_short_integer, "explicit edge count" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		style_block_struct_definition,
		"style_block",
		"style_block_struct_definition",
		"s_style_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		FIELD_EXPLANATION("Combat status decay options", "Controls how combat status is allowed to be automatically reduced in the absence of combat stimuli. \'Latch at X\' means that once the level of x is attained (and/or surpassed) the combat status never falls below it"),
		{ _field_short_enum, "Combat status decay options", &unnamed_enum$484 },
		FIELD_PAD("value", 2),
		FIELD_EXPLANATION("Atittude", "Indicates general stance for style. This matches the property blocks in the character definition (e.g. defense properties)"),
		{ _field_short_enum, "Attitude", &unnamed_enum$60 },
		FIELD_PAD("value", 2),
		{ _field_char_enum, "engage attitude", &unnamed_enum$485 },
		{ _field_char_enum, "evasion attitude", &unnamed_enum$485 },
		{ _field_char_enum, "cover attitude", &unnamed_enum$485 },
		{ _field_char_enum, "search attitude", &unnamed_enum$485 },
		{ _field_char_enum, "presearch attitude", &unnamed_enum$485 },
		{ _field_char_enum, "retreat attitude", &unnamed_enum$485 },
		{ _field_char_enum, "charge attitude", &unnamed_enum$485 },
		{ _field_char_enum, "ready attitude", &unnamed_enum$485 },
		{ _field_char_enum, "idle attitude", &unnamed_enum$485 },
		{ _field_char_enum, "weapon attitude", &unnamed_enum$485 },
		{ _field_char_enum, "swarm attitude", &unnamed_enum$485 },
		FIELD_PAD("value", 1),
		FIELD_USELESS_PAD("value", 24),
		FIELD_EXPLANATION("Style Behavior Control", "Check the appropriate box to turn on/off the given behavior"),
		{ _field_long_flags, "Style control", &unnamed_enum$486 },
		{ _field_long_flags, "Behaviors1", &unnamed_enum$487 },
		{ _field_long_flags, "Behaviors2", &unnamed_enum$488 },
		{ _field_long_flags, "Behaviors3", &unnamed_enum$489 },
		{ _field_long_flags, "Behaviors4", &unnamed_enum$490 },
		{ _field_long_flags, "Behaviors5", &unnamed_enum$491 },
		FIELD_USELESS_PAD("value", 12),
		{ _field_block, "Special movement", &special_movement_block },
		FIELD_USELESS_PAD("value", 60),
		{ _field_block, "Behavior list", &behavior_names_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$484)
	{
		"Latch at Idle",
		"Latch at Alert",
		"Latch at Combat"
	};
	STRING_LIST(unnamed_enum$484, unnamed_enum$484_strings, _countof(unnamed_enum$484_strings));

	STRINGS(unnamed_enum$60)
	{
		"Normal",
		"Timid",
		"Aggressive"
	};
	STRING_LIST(unnamed_enum$60, unnamed_enum$60_strings, _countof(unnamed_enum$60_strings));

	STRINGS(unnamed_enum$485)
	{
		"Default",
		"Normal",
		"Timid",
		"Aggressive"
	};
	STRING_LIST(unnamed_enum$485, unnamed_enum$485_strings, _countof(unnamed_enum$485_strings));

	STRINGS(unnamed_enum$486)
	{
		"New behaviors default to ON"
	};
	STRING_LIST(unnamed_enum$486, unnamed_enum$486_strings, _countof(unnamed_enum$486_strings));

	STRINGS(unnamed_enum$487)
	{
		"------GENERAL------",
		"root",
		"null",
		"null_discrete",
		"obey",
		"guard",
		"follow behavior",
		"ready",
		"smash_obstacle",
		"destroy_obstacle",
		"perch",
		"cover_friend",
		"blind_panic",
		"------ENGAGE------",
		"engage",
		"fight",
		"melee_charge",
		"melee_leaping_charge",
		"surprise",
		"grenade_impulse",
		"anti_vehicle_grenade",
		"stalk",
		"berserk_wander_impulse",
		"------BERSERK------",
		"last_man_berserk",
		"stuck_with_grenade_berserk",
		"------PRESEARCH------",
		"presearch",
		"presearch uncover",
		"destroy_cover",
		"suppressing fire",
		"grenade_uncover"
	};
	STRING_LIST(unnamed_enum$487, unnamed_enum$487_strings, _countof(unnamed_enum$487_strings));

	STRINGS(unnamed_enum$488)
	{
		"leap_on_cover",
		"------SEARCH------",
		"search",
		"uncover",
		"investigate",
		"pursuit_sync",
		"pursuit",
		"postsearch",
		"coverme_investigate",
		"------SELF-DEFENSE------",
		"self_preservation",
		"cover",
		"cover peek",
		"avoid",
		"evasion_impulse",
		"dive_impulse",
		"danger cover impulse",
		"danger crouch impulse",
		"proximity_melee",
		"proximity_self_preservation",
		"unreachable_enemy_cover",
		"scary_target_cover",
		"group_emerge",
		"------RETREAT------",
		"retreat",
		"retreat_grenade",
		"flee",
		"cower",
		"low_shield_retreat",
		"scary_target_retreat",
		"leader_dead_retreat",
		"peer_dead_retreat"
	};
	STRING_LIST(unnamed_enum$488, unnamed_enum$488_strings, _countof(unnamed_enum$488_strings));

	STRINGS(unnamed_enum$489)
	{
		"danger_retreat",
		"proximity_retreat",
		"charge when cornered",
		"surprise_retreat",
		"overheated_weapon_retreat",
		"------AMBUSH------",
		"ambush",
		"coordinated_ambush",
		"proximity_ambush",
		"vulnerable_enemy_ambush",
		"nowhere_to_run_ambush",
		"------VEHICLE------",
		"vehicle",
		"enter_friendly_vehicle",
		"re-enter_flipped_vehicle",
		"vehicle_entry_engage_impulse",
		"vehicle_board",
		"vehicle_fight",
		"vehicle_charge",
		"vehicle_ram_behavior",
		"vehicle_cover",
		"damage_vehicle_cover",
		"exposed_rear_cover_impulse",
		"player_endagered_cover_impulse",
		"vehicle_avoid",
		"vehicle_pickup",
		"vehicle_player_pickup",
		"vehicle_exit_impulse",
		"danger_vehicle_exit_impulse",
		"vehicle_flip",
		"vehicle_turtle",
		"vehicle_engage_patrol_impulse"
	};
	STRING_LIST(unnamed_enum$489, unnamed_enum$489_strings, _countof(unnamed_enum$489_strings));

	STRINGS(unnamed_enum$490)
	{
		"vehicle_engage_wander_impulse",
		"------POSTCOMBAT------",
		"postcombat",
		"post_postcombat",
		"check_friend",
		"shoot_corpse",
		"postcombat_approach",
		"------ALERT------",
		"alert",
		"------IDLE------",
		"idle",
		"wander behavior",
		"flight_wander",
		"patrol",
		"fall_sleep",
		"------BUGGERS------",
		"bugger_ground_uncover",
		"------SWARMS------",
		"swarm_root",
		"swarm_attack",
		"support_attack",
		"infect",
		"scatter",
		"eject parasite",
		"flood_self_preservation",
		"juggernaut flurry",
		"------SENTINELS------",
		"enforcer weapon control",
		"grapple",
		"------SPECIAL------",
		"formation",
		"grunt scared by elite"
	};
	STRING_LIST(unnamed_enum$490, unnamed_enum$490_strings, _countof(unnamed_enum$490_strings));

	STRINGS(unnamed_enum$491)
	{
		"stunned",
		"cure_isolation",
		"deploy_turret",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused"
	};
	STRING_LIST(unnamed_enum$491, unnamed_enum$491_strings, _countof(unnamed_enum$491_strings));

	TAG_STRUCT(
		style_palette_block_struct_definition,
		"style_palette_block",
		"style_palette_block_struct_definition",
		"s_style_palette_entry",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "reference", &style_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(style_group_reference, STYLE_TAG);

	VERSIONED_TAG_STRUCT(
		super_detonation_damage_struct_definition,
		"super_detonation_damage",
		"super_detonation_damage_struct_definition",
		"s_tag_reference$12",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_tag_reference, "super detonation damage", &damage_effect_group_reference },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		surface_flags_block_struct_definition,
		"surface_flags_block",
		"surface_flags_block_struct_definition",
		"s_long_surface_flags",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "flags" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		surfaces_block_struct_definition,
		"surfaces_block",
		"surfaces_block_struct_definition",
		"s_collision_surface",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		3)
	{
		{ _field_short_integer, "plane" },
		{ _field_short_integer, "first edge" },
		{ _field_byte_flags, "flags", &unnamed_enum$162 },
		{ _field_char_integer, "breakable surface" },
		{ _field_short_integer, "material" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		syntax_datum_block_struct_definition,
		"syntax_datum_block",
		"syntax_datum_block_struct_definition",
		"s_hs_syntax_node",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "datum header" },
		{ _field_short_integer, "script index/function index/constant type union" },
		{ _field_short_integer, "type" },
		{ _field_short_integer, "flags" },
		{ _field_long_integer, "next node index" },
		{ _field_long_integer, "data" },
		{ _field_long_integer, "source_offset" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		table_view_list_item_reference_block_struct_definition,
		"table_view_list_item_reference_block",
		"table_view_list_item_reference_block_struct_definition",
		"s_table_view_list_cell_reference_obsolete",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "text flags", &unnamed_enum$423 },
		{ _field_short_integer, "cell width" },
		FIELD_PAD("value", 2),
		{ _field_point_2d, "bitmap top-left", nullptr, "if there is a bitmap" },
		{ _field_tag_reference, "bitmap tag", &bitmap_group_reference },
		{ _field_string_id, "string id" },
		{ _field_short_integer, "render depth bias" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		table_view_list_reference_block_struct_definition,
		"table_view_list_reference_block",
		"table_view_list_reference_block_struct_definition",
		"s_table_view_list_reference_obsolete",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$543 },
		{ _field_short_enum, "animation index", &unnamed_enum$424 },
		{ _field_short_integer, "intro animation delay milliseconds" },
		{ _field_short_enum, "custom font", &unnamed_enum$425 },
		FIELD_PAD("value", 2),
		{ _field_real_argb_color, "text color" },
		{ _field_point_2d, "top-left" },
		{ _field_block, "table rows", &table_view_list_row_reference_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$543)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$543, unnamed_enum$543_strings, _countof(unnamed_enum$543_strings));

	TAG_STRUCT(
		table_view_list_row_reference_block_struct_definition,
		"table_view_list_row_reference_block",
		"table_view_list_row_reference_block_struct_definition",
		"s_table_view_list_row_reference_obsolete",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$544 },
		{ _field_short_integer, "row height" },
		FIELD_PAD("value", 2),
		{ _field_block, "row cells", &table_view_list_item_reference_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$544)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$544, unnamed_enum$544_strings, _countof(unnamed_enum$544_strings));

	TAG_STRUCT(
		tag_block_index_block_struct_definition,
		"tag_block_index_block",
		"tag_block_index_block_struct_definition",
		"s_tag_block_index$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "indices", &tag_block_index_struct_struct_definition, _field_id_shtb },
		{ _field_terminator }
	};

	TAG_STRUCT(
		tag_block_index_struct_struct_definition,
		"tag_block_index_struct",
		"tag_block_index_struct_struct_definition",
		"s_tag_block_index",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "block index data" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		tag_import_file_block_struct_definition,
		"tag_import_file_block",
		"tag_import_file_block_struct_definition",
		"s_tag_import_file",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_string, "path" },
		{ _field_string, "modification date" },
		FIELD_SKIP("value", 8),
		FIELD_PAD("value", 88),
		{ _field_long_integer, "checksum", nullptr, "crc32" },
		{ _field_long_integer, "size", nullptr, "bytes" },
		{ _field_data, "zipped data", &tag_import_file_zipped_data_definition },
		FIELD_PAD("value", 128),
		{ _field_terminator }
	};

	TAG_STRUCT(
		text_block_reference_block_struct_definition,
		"text_block_reference_block",
		"text_block_reference_block_struct_definition",
		"s_text_block_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "text flags", &unnamed_enum$423 },
		{ _field_short_enum, "animation index", &unnamed_enum$424 },
		{ _field_short_integer, "intro animation delay milliseconds" },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "custom font", &unnamed_enum$425 },
		{ _field_real_argb_color, "text color" },
		{ _field_rectangle_2d, "text bounds" },
		{ _field_string_id, "string id" },
		{ _field_short_integer, "render depth bias" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		text_value_pair_block_struct_definition,
		"text_value_pair_block",
		"text_value_pair_block_struct_definition",
		"s_text_value_pair_tag_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "value pairs", &text_value_pair_definition_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(text_value_pair_definition_group_reference, TEXT_VALUE_PAIR_DEFINITION_TAG);

	TAG_STRUCT(
		text_value_pair_definition_block_struct_definition,
		"text_value_pair_definition_block",
		"text_value_pair_definition_block_struct_definition",
		"s_text_value_pair_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_enum, "parameter", &unnamed_enum$205 },
		FIELD_PAD("value", 4),
		{ _field_tag_reference, "string list", &multilingual_unicode_string_list_group_reference },
		{ _field_string_id, "title text" },
		{ _field_string_id, "header text" },
		{ _field_string_id, "description text" },
		{ _field_block, "text value pairs", &text_value_pair_reference_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		text_value_pair_reference_block_struct_definition,
		"text_value_pair_reference_block",
		"text_value_pair_reference_block_struct_definition",
		"s_text_value_pair_reference_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$420 },
		{ _field_long_integer, "value" },
		{ _field_string_id, "label string id" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$420)
	{
		"default setting"
	};
	STRING_LIST(unnamed_enum$420, unnamed_enum$420_strings, _countof(unnamed_enum$420_strings));

	TAG_STRUCT(
		texture_block_struct_definition,
		"texture_block",
		"texture_block_struct_definition",
		"s_texture",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "stage index" },
		{ _field_char_integer, "parameter index" },
		{ _field_char_integer, "global texture index" },
		{ _field_char_integer, "flags" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		texture_stage_state_block_struct_definition,
		"texture_stage_state_block",
		"texture_stage_state_block_struct_definition",
		"s_texture_stage_state",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "state index" },
		{ _field_char_integer, "stage index" },
		{ _field_long_integer, "state value" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		texture_stage_state_parameter_block_struct_definition,
		"texture_stage_state_parameter_block",
		"texture_stage_state_parameter_block_struct_definition",
		"s_texture_stage_state_parameter",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "parameter index" },
		{ _field_char_integer, "parameter type" },
		{ _field_char_integer, "state index" },
		{ _field_char_integer, "stage index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		torque_curve_struct_struct_definition,
		"torque_curve_struct",
		"torque_curve_struct_struct_definition",
		"s_toruqe_curve",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "min torque" },
		{ _field_real, "max torque" },
		{ _field_real, "peak torque scale" },
		{ _field_real, "past peak torque exponent" },
		{ _field_real, "torque at max angular velocity", "generally 0 for loading torque and something less than max torque for cruising torque" },
		{ _field_real, "torque at 2x max angular velocity" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_terminator }
	};

	TAG_STRUCT(
		transparent_planes_block_struct_definition,
		"transparent_planes_block",
		"transparent_planes_block_struct_definition",
		"s_transparent_plane",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "section index" },
		{ _field_short_integer, "part index" },
		{ _field_real_plane_3d, "plane" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		triangles_block_struct_definition,
		"triangles_block",
		"triangles_block_struct_definition",
		"s_physics_model_triangle",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		{ _field_string_id, "name" },
		{ _field_short_block_index, "material" },
		{ _field_word_flags, "flags", &unnamed_enum$118 },
		{ _field_real, "relative mass scale" },
		{ _field_real_fraction, "friction" },
		{ _field_real_fraction, "restitution" },
		{ _field_real, "volume " },
		{ _field_real, "mass" },
		FIELD_SKIP("value", 2),
		{ _field_short_block_index, "phantom" },
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_real, "radius" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_real_vector_3d, "point a" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "point b" },
		FIELD_SKIP("value", 4),
		{ _field_real_vector_3d, "point c" },
		FIELD_SKIP("value", 4),
		{ _field_terminator }
	};

	TAG_STRUCT(
		trigger_references_struct_definition,
		"trigger_references",
		"trigger_references_struct_definition",
		"s_order_trigger_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "Trigger flags", &unnamed_enum$84 },
		{ _field_short_block_index, "trigger" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$84)
	{
		"not"
	};
	STRING_LIST(unnamed_enum$84, unnamed_enum$84_strings, _countof(unnamed_enum$84_strings));

	TAG_STRUCT(
		triggers_block_struct_definition,
		"triggers_block",
		"triggers_block_struct_definition",
		"s_trigger_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("value", _field_id_filter),
		{ _field_string, "name" },
		{ _field_long_flags, "trigger flags", &unnamed_enum$92 },
		{ _field_short_enum, "combination rule", &unnamed_enum$82 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "conditions", &order_completion_condition_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$92)
	{
		"Latch ON when triggered"
	};
	STRING_LIST(unnamed_enum$92, unnamed_enum$92_strings, _countof(unnamed_enum$92_strings));

	TAG_STRUCT(
		ui_campaign_block_struct_definition,
		"ui_campaign_block",
		"ui_campaign_block_struct_definition",
		"s_campaign_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_integer, "campaign id" },
		FIELD_SKIP("value", 576),
		FIELD_SKIP("value", 2304),
		{ _field_terminator }
	};

	TAG_STRUCT(
		ui_error_block_struct_definition,
		"ui_error_block",
		"ui_error_block_struct_definition",
		"s_ui_error",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_enum, "error", &unnamed_enum$549 },
		{ _field_word_flags, "flags", &unnamed_enum$547 },
		{ _field_char_enum, "default button", &unnamed_enum$548 },
		FIELD_PAD("value", 1),
		{ _field_string_id, "title" },
		{ _field_string_id, "message" },
		{ _field_string_id, "ok" },
		{ _field_string_id, "cancel" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$549)
	{
		"error_unknown",
		"error_generic",
		"error_generic_networking",
		"error_system_link_generic_join_failure",
		"error_system_link_no_network_connection",
		"error_system_link_connection_lost",
		"error_network_game_oos",
		"error_xbox_live_sign_out_confirmation",
		"error_confirm_revert_to_last_save",
		"error_confirm_quit_without_save",
		"error_confirm_delete_player_profile",
		"error_confirm_delete_variant_file",
		"error_player_profile_creation_failed",
		"error_variant_profile_creation_failed",
		"error_playlist_creation_failed",
		"error_core_file_load_failed",
		"error_mu_removed_during_player_profile_save",
		"error_mu_removed_during_variant_save",
		"error_mu_removed_during_playlist_save",
		"error_message_saving_to_mu",
		"error_message_saving_file",
		"error_message_creating_player_profile",
		"error_message_creating_variant_profile",
		"error_message_saving_checkpoint",
		"error_failed_to_load_player_profile",
		"error_failed_to_load_variant",
		"error_failed_to_load_playlist",
		"error_failed_to_load_save_game",
		"error_controller1_removed",
		"error_controller2_removed",
		"error_controller3_removed",
		"error_controller4_removed",
		"error_need_more_free_blocks_to_save",
		"error_maximum_saved_game_files_already_exist",
		"error_dirty_disk",
		"error_xblive_cannot_access_service",
		"error_xblive_title_update_required",
		"error_xblive_servers_too_busy",
		"error_xblive_duplicate_logon",
		"error_xblive_account_management_required",
		"error_warning_xblive_recommended_messages_available",
		"error_xblive_invalid_match_session",
		"error_warning_xblive_poor_network_performance",
		"error_not_enough_open_slots_to_join_match_session",
		"error_xblive_corrupt_download_content",
		"error_confirm_xblive_corrupt_saved_game_file_removal",
		"error_xblive_invalid_user_account",
		"error_confirm_boot_clan_member",
		"error_confirm_controller_sign_out",
		"error_beta_xblive_service_qos_report",
		"error_beta_feature_disabled",
		"error_beta_network_connection_required",
		"error_confirm_friend_removal",
		"error_confirm_boot_to_dash",
		"error_confirm_launch_xdemos",
		"error_confirm_exit_game_session",
		"error_xblive_connection_to_xbox_live_lost",
		"error_xblive_message_send_failure",
		"error_network_link_lost",
		"error_network_link_required",
		"error_xblive_invalid_passcode",
		"error_join_aborted",
		"error_join_session_not_found",
		"error_join_qos_failure",
		"error_join_data_decode_failure",
		"error_join_game_full",
		"error_join_game_closed",
		"error_join_version_mismatch",
		"error_join_failed_unknown_reason",
		"error_join_failed_friend_in_matchmade_game",
		"error_player_profile_name_must_be_unique",
		"error_variant_name_must_be_unique",
		"error_playlist_name_must_be_unique",
		"error_saved_film_name_must_be_unique",
		"error_no_free_slots_player_profile",
		"error_no_free_slots_variant",
		"error_no_free_slots_playlist",
		"error_no_free_slots_saved_film",
		"error_need_more_space_for_player_profile",
		"error_need_more_space_for_variant",
		"error_need_more_space_for_playlist",
		"error_need_more_space_for_saved_film",
		"error_cannot_set_privileges_on_member_whose_data_not_known",
		"error_cant_delete_default_profile",
		"error_cant_delete_default_variant",
		"error_cant_delete_default_playlist",
		"error_cant_delete_default_saved_film",
		"error_cant_delete_profile_in_use",
		"error_player_profile_name_must_have_alphanumeric_characters",
		"error_variant_name_must_have_alphanumeric_characters",
		"error_playlist_name_must_have_alphanumeric_characters",
		"error_saved_film_name_must_have_alphanumeric_characters",
		"error_teams_not_a_member",
		"error_teams_insufficient_privileges",
		"error_teams_server_busy",
		"error_teams_team_full",
		"error_teams_member_pending",
		"error_teams_too_many_requests",
		"error_teams_user_already_exists",
		"error_teams_user_not_found",
		"error_teams_user_teams_full",
		"error_teams_no_task",
		"error_teams_too_many_teams",
		"error_teams_team_already_exists",
		"error_teams_team_not_found",
		"error_teams_name_contains_bad_words",
		"error_teams_description_contains_bad_words",
		"error_teams_motto_contains_bad_words",
		"error_teams_url_contains_bad_words",
		"error_teams_no_admin",
		"error_teams_cannot_set_privileges_on_member_whose_data_not_known",
		"error_live_unknown",
		"error confirm_delete_profile",
		"error confirm_delete_playlist",
		"error confirm_delete_saved_film",
		"error confirm_live_sign_out",
		"error confirm_confirm_friend_removal",
		"error confirm_promotion_to_superuser",
		"error warn_no_more_clan_superusers",
		"error confirm_corrupt_profile",
		"error confirm_xbox_live_sign_out",
		"error confirm_corrupt_game_variant",
		"error confirm_leave_clan",
		"error confirm_corrupt_playlist",
		"error_cant_join_gameinvite_without_signon",
		"error confirm_proceed_to_crossgame_invite",
		"error confirm_decline_crossgame_invite",
		"error warn_insert_cd_for_crossgame_invite",
		"error need more space for saved game",
		"error saved game cannot be loaded",
		"error confirm controller signout with guests",
		"error warning party closed",
		"error warning party required",
		"error warning party full",
		"error warning player in mm game",
		"error xblive failed to sign in",
		"error cant sign out master with guests",
		"error obsolete dot command",
		"error not unlocked",
		"confirm leave lobby",
		"error confirm party leader leave matchmaking",
		"error confirm single box leave matchmaking",
		"error invalid clan name",
		"error player list full",
		"error blocked by player",
		"error friend pending",
		"error too many requests",
		"error player already in list",
		"error gamertag not found",
		"error cannot message self",
		"error warning last overlord cant leave clan",
		"error confirm boot player",
		"error confirm party member leave pcr",
		"error cannot sign in during countdown",
		"error xbl invalid user",
		"error xbl user not authorized",
		"OBSOLETE",
		"OBSOLETE2",
		"error xbl banned xbox",
		"error xbl banned user",
		"error xbl banned title",
		"error confirm exit game session leader",
		"error message objectionable content",
		"error confirm enter downloader",
		"error confirm block user",
		"error confirm negative feedback",
		"error confirm change clan member level",
		"error blank gamertag",
		"confirm save & quit game",
		"error cant join during matchmaking",
		"error confirm restart level",
		"matchmaking failure generic",
		"matchmaking failure missing content",
		"matchmaking failure aborted",
		"matchmaking failure membership changed",
		"confirm end game session",
		"confirm exit game session only player",
		"confirm exit game session xbox live ranked leader",
		"confirm exit game session xbox live ranked",
		"confirm exit game session xbox live leader",
		"confirm exit game session xbox live only player",
		"confirm exit game session xbox live",
		"recipient\'s list full",
		"confirm quit campaign (no save)",
		"xblive connection to xbox live lost save and quit",
		"booted from session",
		"confirm_exit_game_session_xbox_live_guest",
		"confirm_exit_game_session_xbox_live_ranked_only_player",
		"confirm_exit_game_session_xbox_live_unranked_only_player",
		"confirm_exit_game_session_xbox_live_unranked_leader",
		"confirm_exit_game_session_xbox_live_unranked",
		"cant join friend while in matchmade game",
		"map load failure",
		"confirm campaign without achievements",
		"no live menu branch without signin",
		"map out of hard disk space",
		"device not supported",
		"error_achievements_interrupted",
		"confirm_lose_progress",
		"error_beta_achievements_disabled",
		"error_cannot_connect_versions_wrong",
		"confirm_booted_from_session",
		"confirm_boot_player_from_squad",
		"confirm_leave_system_link_lobby",
		"confirm_party_member_leave_matchmaking",
		"confirm_quit_single_player",
		"error_controller_removed",
		"error_download_in_progress",
		"error_download_fail",
		"error_failed_to_load_map",
		"error_feature_requires_gold",
		"error_keyboard_mapping",
		"error_keyboard_removed",
		"error_live_game_unavailable",
		"error_map_missing",
		"error_matchmaking_failed_generic",
		"error_matchmaking_failed_missing_content",
		"error_mouse_removed",
		"error_party_not_all_on_live",
		"error_party_subnet_not_shared",
		"error_required_game_update",
		"error_saved_game_cannot_be_saved",
		"error_sound_microphone_not_supported",
		"error_system_link_direct_IP",
		"error_text_chat_muted",
		"error_text_chat_parental_controls",
		"error_update_start",
		"error_update_fail",
		"error_update_fail_blocks",
		"error_update_exists",
		"error_insert_original",
		"error_update_fail_network_lost",
		"error_update_mp_out_of_sync",
		"error_update_must_upgrade",
		"error_voice_gold_required",
		"error_voice_parental_controls",
		"error_warning_xblive_poor_network_perofrmance",
		"error_you_missing_map",
		"error_someone_missing_map",
		"error_tnp_no_source",
		"error_tnp_disk_read",
		"error_tnp_no_engine_running",
		"error_tnp_signature_verification",
		"error_tnp_drive_removed",
		"error_tnp_disk_full",
		"error_tnp_permissions",
		"error_tnp_unknown",
		"continue_install",
		"cancel_install",
		"error_confirm_upsell_gold",
		"error_add_to_favorites",
		"error_remove_from_favorites",
		"error_updating_favorites",
		"choose existing checkpoint location",
		"choose new checkpoint location (checkpoints exist on live and local)",
		"choose new checkpoint location (checkpoints exist on live)",
		"choose new checkpoint location (checkpoints exist locally)",
		"error_download_map",
		"error_want_to_download_map",
		"error_ok_download_map",
		"dont_download_map",
		"not_gold_no_map_download",
		"error_map_download_connection_lost",
		"error_map_download_collision",
		"error_map_download_disk_write_error",
		"error_matchmaking_failed_no_games",
		"error_matchmaking_failed_timeout",
		"error_live_checkpoint_connection_dropped",
		"error_live_checkpoint_hash_mismatch",
		"error_join_gold_game_not_allowed",
		"error_join_locked_game_not_allowed",
		"error_system_link_port_in_use",
		"error_invite_requires_signin",
		"error_overwrite_custom_keyboard_mappings",
		"error_profile_version_mismatch",
		"error_profane_map_name",
		"error_profane_variant_name",
		"demo_version_no_more_for_you",
		"error_no_fullscreen_res",
		"error_install_not_complete",
		"error_lan_fail_download_map",
		"error_locater_service_failed",
		"error_double_mapping_actions",
		"error_no_multiplayer_achievements_for_silver",
		"error_map_download_in_game",
		"error_locator_service_timed_out",
		"error_connection_to_host_lost",
		"error_map_download_profane_name"
	};
	STRING_LIST(unnamed_enum$549, unnamed_enum$549_strings, _countof(unnamed_enum$549_strings));

	STRINGS(unnamed_enum$547)
	{
		"use large dialog"
	};
	STRING_LIST(unnamed_enum$547, unnamed_enum$547_strings, _countof(unnamed_enum$547_strings));

	STRINGS(unnamed_enum$548)
	{
		"no default",
		"default ok",
		"default cancel"
	};
	STRING_LIST(unnamed_enum$548, unnamed_enum$548_strings, _countof(unnamed_enum$548_strings));

	TAG_STRUCT(
		ui_error_category_block_struct_definition,
		"ui_error_category_block",
		"ui_error_category_block_struct_definition",
		"s_ui_error_category",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "category name" },
		{ _field_word_flags, "flags", &unnamed_enum$547 },
		{ _field_char_enum, "default button", &unnamed_enum$548 },
		FIELD_PAD("value", 1),
		{ _field_tag_reference, "string tag", &multilingual_unicode_string_list_group_reference },
		{ _field_string_id, "default title" },
		{ _field_string_id, "default message" },
		{ _field_string_id, "default ok" },
		{ _field_string_id, "default cancel" },
		{ _field_block, "error block", &ui_error_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		ui_levels_definition_block_struct_definition,
		"ui_levels_definition_block",
		"ui_levels_definition_block_struct_definition",
		"s_ui_levels_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "campaigns", &ui_campaign_block },
		{ _field_block, "campaign levels", &global_ui_campaign_level_block },
		{ _field_block, "multiplayer levels", &global_ui_multiplayer_level_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		ui_light_reference_block_struct_definition,
		"ui_light_reference_block",
		"ui_light_reference_block_struct_definition",
		"s_ui_light_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		ui_model_scene_reference_block_struct_definition,
		"ui_model_scene_reference_block",
		"ui_model_scene_reference_block_struct_definition",
		"s_ui_model_scene_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("NOTE on coordinate systems", "Halo y-axis=ui z-axis, and Halo z-axis=ui y-axis.\nAs a convention, let\'s always place objects in the ui scenario such that\nthey are facing in the \'-y\' direction, and the camera such that is is\nfacing the \'+y\' direction. This way the ui animation for models (which\ngets applied to the camera) will always be consisitent."),
		{ _field_long_flags, "flags", &unnamed_enum$545 },
		{ _field_short_enum, "animation index", &unnamed_enum$424 },
		{ _field_short_integer, "intro animation delay milliseconds" },
		{ _field_short_integer, "render depth bias" },
		FIELD_PAD("value", 2),
		{ _field_block, "objects", &ui_object_reference_block },
		{ _field_block, "lights", &ui_light_reference_block },
		{ _field_real_vector_3d, "animation scale factor" },
		{ _field_real_point_3d, "camera position" },
		FIELD_USELESS_PAD("value", 24),
		{ _field_real, "fov degress" },
		{ _field_rectangle_2d, "ui viewport" },
		{ _field_string_id, "UNUSED intro anim" },
		{ _field_string_id, "UNUSED outro anim" },
		{ _field_string_id, "UNUSED ambient anim" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$545)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$545, unnamed_enum$545_strings, _countof(unnamed_enum$545_strings));

	TAG_STRUCT(
		ui_object_reference_block_struct_definition,
		"ui_object_reference_block",
		"ui_object_reference_block_struct_definition",
		"s_ui_object_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string, "name" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		unit_additional_node_names_struct_definition,
		"unit_additional_node_names",
		"unit_additional_node_names_struct_definition",
		"s_unit_additional_node_names",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_string_id, "preferred_gun_node", "if found, use this gun marker" },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		unit_block_struct_definition,
		"unit_block",
		"unit_block_struct_definition",
		"s_unit_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("$$$ UNIT $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$106 },
		{ _field_short_enum, "default team", &unnamed_enum$107 },
		{ _field_short_enum, "constant sound volume", &unnamed_enum$108 },
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "integrated light toggle", &effect_group_reference },
		FIELD_USELESS_PAD("value", 8),
		{ _field_angle, "camera field of view", nullptr, "degrees" },
		{ _field_real, "camera stiffness" },
		{ _field_struct, "unit camera", &unit_camera_struct_struct_definition, _field_id_uncs },
		{ _field_struct, "acceleration", &unit_seat_acceleration_struct_struct_definition, _field_id_usas },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "soft ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "soft ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "hard ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death time", nullptr, "seconds" },
		{ _field_real, "distance of evade anim", "this must be set to tell the AI how far it should expect our evade animation to move us", "world units" },
		{ _field_real, "distance of dive anim", "this must be set to tell the AI how far it should expect our dive animation to move us", "world units" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "stunned movement threshold", "if we take this much damage in a short space of time we will play our 'stunned movement' animations", nullptr, "[0,1]" },
		{ _field_real, "feign death chance", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign repeat chance", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "spawned turret character", "automatically created character when this unit is driven", &character_group_reference$2 },
		{ _field_short_integer_bounds, "spawned actor count", "number of actors which we spawn" },
		{ _field_real, "spawned velocity", "velocity at which we throw spawned actors" },
		{ _field_angle, "aiming velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "aiming acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual aiming modifier", nullptr, nullptr, "[0,1]" },
		{ _field_angle, "looking velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "looking acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_string_id, "right_hand_node", "where the primary weapon is attached" },
		{ _field_string_id, "left_hand_node", "where the seconday weapon is attached (for dual-pistol modes)" },
		{ _field_struct, "more damn nodes", &unit_additional_node_names_struct_definition, _field_id_uHnd }, // structure_version:1
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "melee damage", &damage_effect_group_reference },
		{ _field_struct, "your momma", &unit_boarding_melee_struct_definition, _field_id_ubms }, // structure_version:1
		{ _field_short_enum, "motion sensor blip size", &unnamed_enum$109 },
		{ _field_struct, "campaign metagame bucket", &campaign_metagame_bucket_block_struct_definition, _field_id_cmtb },
		{ _field_block, "postures", &unit_postures_block },
		{ _field_block, "NEW HUD INTERFACES", &unit_hud_reference_block },
		{ _field_block, "dialogue variants", &dialogue_variant_block },
		{ _field_real, "grenade velocity", nullptr, "world units per second" },
		{ _field_short_enum, "grenade type", &unnamed_enum$112 },
		{ _field_short_integer, "grenade count" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_block, "powered seats", &powered_seat_block },
		{ _field_block, "weapons", &unit_weapon_block },
		{ _field_block, "seats", &unit_seat_block },
		FIELD_EXPLANATION("Boost", nullptr),
		{ _field_struct, "boost", &unit_boost_struct_struct_definition, _field_id_unknown },
		FIELD_EXPLANATION("Lipsync", nullptr),
		{ _field_struct, "lipsync", &unit_lipsync_scales_struct_definition, _field_id_ulYc }, // structure_version:1
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		unit_boarding_melee_struct_definition,
		"unit_boarding_melee",
		"unit_boarding_melee_struct_definition",
		"s_tag_references",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 5 },
		{ _field_tag_reference, "boarding melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "boarding melee response", &damage_effect_group_reference },
		{ _field_tag_reference, "landing melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "flurry melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "obstacle smash damage", &damage_effect_group_reference },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		unit_boost_struct_struct_definition,
		"unit_boost_struct",
		"unit_boost_struct_struct_definition",
		"s_real$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "boost peak power" },
		{ _field_real, "boost rise power" },
		{ _field_real, "boost peak time" },
		{ _field_real, "boost fall power" },
		{ _field_real, "dead time" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		unit_camera_struct_struct_definition,
		"unit_camera_struct",
		"unit_camera_struct_struct_definition",
		"s_unit_camera",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_old_string_id, "camera marker name" },
		{ _field_old_string_id, "camera submerged marker name" },
		{ _field_angle, "pitch auto-level" },
		{ _field_angle_bounds, "pitch range" },
		{ _field_block, "camera tracks", &unit_camera_track_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		unit_camera_track_block_struct_definition,
		"unit_camera_track_block",
		"unit_camera_track_block_struct_definition",
		"s_unit_camera_track",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "track", &camera_track_group_reference },
		FIELD_USELESS_PAD("value", 12),
		{ _field_terminator }
	};

	TAG_STRUCT(
		unit_hud_auxilary_overlay_block_struct_definition,
		"unit_hud_auxilary_overlay_block",
		"unit_hud_auxilary_overlay_block_struct_definition",
		"s_auxilary_overlay_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "interface bitmap", &bitmap_group_reference },
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "sequence index" },
		FIELD_PAD("value", 2),
		{ _field_block, "multitex overlay", &global_hud_multitexture_overlay_definition_block },
		FIELD_PAD("value", 4),
		{ _field_short_enum, "type", &unnamed_enum$500 },
		{ _field_word_flags, "flags", &unnamed_enum$501 },
		FIELD_PAD("value", 24),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$500)
	{
		"team icon"
	};
	STRING_LIST(unnamed_enum$500, unnamed_enum$500_strings, _countof(unnamed_enum$500_strings));

	STRINGS(unnamed_enum$501)
	{
		"use team color"
	};
	STRING_LIST(unnamed_enum$501, unnamed_enum$501_strings, _countof(unnamed_enum$501_strings));

	TAG_STRUCT(
		unit_hud_auxilary_panel_block_struct_definition,
		"unit_hud_auxilary_panel_block",
		"unit_hud_auxilary_panel_block_struct_definition",
		"s_auxilary_meter_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$503 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("BACKGROUND", nullptr),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "interface bitmap", &bitmap_group_reference },
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "sequence index" },
		FIELD_PAD("value", 2),
		{ _field_block, "multitex overlay", &global_hud_multitexture_overlay_definition_block },
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("METER", nullptr),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "meter bitmap", &bitmap_group_reference },
		{ _field_rgb_color, "color at meter minimum" },
		{ _field_rgb_color, "color at meter maximum" },
		{ _field_rgb_color, "flash color" },
		{ _field_argb_color, "empty color" },
		{ _field_byte_flags, "flags", &unnamed_enum$499 },
		{ _field_char_integer, "minumum meter value" },
		{ _field_short_integer, "sequence index" },
		{ _field_char_integer, "alpha multiplier" },
		{ _field_char_integer, "alpha bias" },
		{ _field_short_integer, "value scale", "used for non-integral values, i.e. health and shields" },
		{ _field_real, "opacity" },
		{ _field_real, "translucency" },
		{ _field_argb_color, "disabled color" },
		{ _field_block, "value", &g_null_block },
		FIELD_PAD("value", 4),
		{ _field_real, "minimum fraction cutoff" },
		{ _field_long_flags, "flags", &unnamed_enum$504 },
		FIELD_PAD("value", 24),
		FIELD_PAD("value", 64),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$503)
	{
		"integrated light"
	};
	STRING_LIST(unnamed_enum$503, unnamed_enum$503_strings, _countof(unnamed_enum$503_strings));

	STRINGS(unnamed_enum$499)
	{
		"use min/max for state changes",
		"interpolate between min/max flash colors as state changes",
		"interpolate color along hsv space",
		"...more colors for hsv interpolation",
		"invert interpolation"
	};
	STRING_LIST(unnamed_enum$499, unnamed_enum$499_strings, _countof(unnamed_enum$499_strings));

	STRINGS(unnamed_enum$504)
	{
		"show only when active",
		"flash once if activated while disabled"
	};
	STRING_LIST(unnamed_enum$504, unnamed_enum$504_strings, _countof(unnamed_enum$504_strings));

	TAG_STRUCT(
		unit_hud_interface_block_struct_definition,
		"unit_hud_interface_block",
		"unit_hud_interface_block_struct_definition",
		"s_unit_hud_interface_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_CUSTOM("value", _field_id_uhis),
		FIELD_EXPLANATION("Weapon hud screen alignment", nullptr),
		{ _field_short_enum, "anchor", &unnamed_enum$206 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 32),
		FIELD_EXPLANATION("Unit hud background", nullptr),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "interface bitmap", &bitmap_group_reference },
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "sequence index" },
		FIELD_PAD("value", 2),
		{ _field_block, "multitex overlay", &global_hud_multitexture_overlay_definition_block },
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("Shield panel background", nullptr),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "interface bitmap", &bitmap_group_reference },
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "sequence index" },
		FIELD_PAD("value", 2),
		{ _field_block, "multitex overlay", &global_hud_multitexture_overlay_definition_block },
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("Shield panel meter", nullptr),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "meter bitmap", &bitmap_group_reference },
		{ _field_rgb_color, "color at meter minimum" },
		{ _field_rgb_color, "color at meter maximum" },
		{ _field_rgb_color, "flash color" },
		{ _field_argb_color, "empty color" },
		{ _field_byte_flags, "flags", &unnamed_enum$499 },
		{ _field_char_integer, "minumum meter value" },
		{ _field_short_integer, "sequence index" },
		{ _field_char_integer, "alpha multiplier" },
		{ _field_char_integer, "alpha bias" },
		{ _field_short_integer, "value scale", "used for non-integral values, i.e. health and shields" },
		{ _field_real, "opacity" },
		{ _field_real, "translucency" },
		{ _field_argb_color, "disabled color" },
		{ _field_block, "value", &g_null_block },
		FIELD_PAD("value", 4),
		{ _field_rgb_color, "overcharge minimum color" },
		{ _field_rgb_color, "overcharge maximum color" },
		{ _field_rgb_color, "overcharge flash color" },
		{ _field_rgb_color, "overcharge empty color" },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("Health panel background", nullptr),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "interface bitmap", &bitmap_group_reference },
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "sequence index" },
		FIELD_PAD("value", 2),
		{ _field_block, "multitex overlay", &global_hud_multitexture_overlay_definition_block },
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("Health panel meter", nullptr),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "meter bitmap", &bitmap_group_reference },
		{ _field_rgb_color, "color at meter minimum" },
		{ _field_rgb_color, "color at meter maximum" },
		{ _field_rgb_color, "flash color" },
		{ _field_argb_color, "empty color" },
		{ _field_byte_flags, "flags", &unnamed_enum$499 },
		{ _field_char_integer, "minumum meter value" },
		{ _field_short_integer, "sequence index" },
		{ _field_char_integer, "alpha multiplier" },
		{ _field_char_integer, "alpha bias" },
		{ _field_short_integer, "value scale", "used for non-integral values, i.e. health and shields" },
		{ _field_real, "opacity" },
		{ _field_real, "translucency" },
		{ _field_argb_color, "disabled color" },
		{ _field_block, "value", &g_null_block },
		FIELD_PAD("value", 4),
		{ _field_rgb_color, "medium health left color" },
		{ _field_real, "max color health fraction cutoff" },
		{ _field_real, "min color health fraction cutoff" },
		FIELD_PAD("value", 20),
		FIELD_EXPLANATION("Motion sensor background", nullptr),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "interface bitmap", &bitmap_group_reference },
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "sequence index" },
		FIELD_PAD("value", 2),
		{ _field_block, "multitex overlay", &global_hud_multitexture_overlay_definition_block },
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("Motion sensor foreground", nullptr),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "interface bitmap", &bitmap_group_reference },
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "sequence index" },
		FIELD_PAD("value", 2),
		{ _field_block, "multitex overlay", &global_hud_multitexture_overlay_definition_block },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 32),
		FIELD_EXPLANATION("Motion sensor center", "The blips use this as a reference point"),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		FIELD_EXPLANATION("Auxilary overlays", nullptr),
		{ _field_short_enum, "anchor", &unnamed_enum$206 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 32),
		{ _field_block, "overlays", &unit_hud_auxilary_overlay_block },
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("Hud warning sounds", nullptr),
		{ _field_block, "sounds", &unit_hud_sound_block },
		FIELD_EXPLANATION("Auxilary hud meters", nullptr),
		{ _field_block, "meters", &unit_hud_auxilary_panel_block },
		FIELD_EXPLANATION("NEW hud", nullptr),
		{ _field_tag_reference, "new hud", &new_hud_definition_group_reference },
		FIELD_PAD("value", 356),
		FIELD_PAD("value", 48),
		{ _field_terminator }
	};

	TAG_STRUCT(
		unit_hud_reference_block_struct_definition,
		"unit_hud_reference_block",
		"unit_hud_reference_block_struct_definition",
		"s_unit_hud_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "new unit hud interface", &new_hud_definition_group_reference },
		FIELD_USELESS_PAD("value", 16),
		{ _field_terminator }
	};

	TAG_STRUCT(
		unit_hud_sound_block_struct_definition,
		"unit_hud_sound_block",
		"unit_hud_sound_block_struct_definition",
		"s_sound_hud_element_definition$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "sound", &sound_group_sound_looping_group_reference$2 },
		{ _field_long_flags, "latched to", &unnamed_enum$502 },
		{ _field_real, "scale" },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$502)
	{
		"shield recharging",
		"shield damaged",
		"shield low",
		"shield empty",
		"health low",
		"health empty",
		"health minor damage",
		"health major damage"
	};
	STRING_LIST(unnamed_enum$502, unnamed_enum$502_strings, _countof(unnamed_enum$502_strings));

	VERSIONED_TAG_STRUCT(
		unit_lipsync_scales_struct_definition,
		"unit_lipsync_scales",
		"unit_lipsync_scales_struct_definition",
		"s_unit_lipsync_scales",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_real_fraction, "attack weight" },
		{ _field_real_fraction, "decay weight" },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		unit_postures_block_struct_definition,
		"unit_postures_block",
		"unit_postures_block_struct_definition",
		"s_posture_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "name" },
		FIELD_USELESS_PAD("value", 24),
		{ _field_real_vector_3d, "pill offset" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		unit_seat_acceleration_struct_struct_definition,
		"unit_seat_acceleration_struct",
		"unit_seat_acceleration_struct_struct_definition",
		"s_unit_seat_acceleration",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_vector_3d, "acceleration range", nullptr, "world units per second squared" },
		{ _field_real, "accel action scale", nullptr, "actions fail ", "[0,1+]" },
		{ _field_real, "accel attach scale", nullptr, "detach unit ", "[0,1+]" },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		unit_seat_struct_definition,
		"unit_seat",
		"unit_seat_struct_definition",
		"s_unit_seat",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 3, 39 },
		{ _field_long_flags, "flags", &unnamed_enum$113 },
		{ _field_old_string_id, "label" },
		{ _field_old_string_id, "marker name" },
		{ _field_string_id, "entry marker(s) name" },
		{ _field_string_id, "boarding grenade marker" },
		{ _field_string_id, "boarding grenade string" },
		{ _field_string_id, "boarding melee string" },
		{ _field_real_fraction, "ping scale", "nathan is too lazy to make pings for each seat." },
		FIELD_USELESS_PAD("value", 8),
		{ _field_real, "turnover time", "how much time it takes to evict a rider from a flipped vehicle", "seconds" },
		{ _field_struct, "acceleration", &unit_seat_acceleration_struct_struct_definition, _field_id_usas },
		{ _field_real, "AI scariness" },
		{ _field_short_enum, "ai seat type", &unnamed_enum$114 },
		{ _field_short_block_index, "boarding seat" },
		{ _field_real_fraction, "listener interpolation factor", "how far to interpolate listener position from camera to occupant's head" },
		FIELD_EXPLANATION("speed dependant turn rates", "when the unit velocity is 0, the yaw/pitch rates are the left values\nat [max speed reference], the yaw/pitch rates are the right values.\nthe max speed reference is what the code uses to generate a clamped speed from 0..1\nthe exponent controls how midrange speeds are interpreted."),
		{ _field_real_bounds, "yaw rate bounds", nullptr, "degrees per second" },
		{ _field_real_bounds, "pitch rate bounds", nullptr, "degrees per second" },
		{ _field_real, "min speed reference" },
		{ _field_real, "max speed reference" },
		{ _field_real, "speed exponent" },
		FIELD_USELESS_PAD("value", 12),
		FIELD_EXPLANATION("camera fields", nullptr),
		{ _field_struct, "unit camera", &unit_camera_struct_struct_definition, _field_id_uncs },
		{ _field_block, "unit hud interface", &unit_hud_reference_block },
		{ _field_string_id, "enter seat string" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_angle, "yaw minimum" },
		{ _field_angle, "yaw maximum" },
		{ _field_tag_reference, "built-in gunner", &character_group_reference$2 },
		FIELD_USELESS_PAD("value", 20),
		FIELD_EXPLANATION("entry fields", "note: the entry radius shouldn\'t exceed 3 world units, \nas that is as far as the player will search for a vehicle\nto enter."),
		{ _field_real, "entry radius", "how close to the entry marker a unit must be" },
		{ _field_angle, "entry marker cone angle", "angle from marker forward the unit must be" },
		{ _field_angle, "entry marker facing angle", "angle from unit facing the marker must be" },
		{ _field_real, "maximum relative velocity" },
		FIELD_USELESS_PAD("value", 20),
		{ _field_string_id, "invisible seat region" },
		{ _field_long_integer, "runtime invisible seat region index" },
		
		{ _struct_version_mode_equal, 2, 35 },
		{ _field_long_flags, "flags", &unnamed_enum$113 },
		{ _field_old_string_id, "label" },
		{ _field_old_string_id, "marker name" },
		{ _field_string_id, "entry marker(s) name" },
		{ _field_string_id, "boarding grenade marker" },
		FIELD_PAD("value", 20),
		{ _field_real, "turnover time", "how much time it takes to evict a rider from a flipped vehicle", "seconds" },
		{ _field_real_vector_3d, "acceleration scale" },
		{ _field_real, "AI scariness" },
		{ _field_short_enum, "ai seat type", &unnamed_enum$114 },
		{ _field_short_block_index, "boarding seat" },
		{ _field_real_fraction, "listener interpolation factor", "how far to interpolate listener position from camera to occupant's head" },
		FIELD_EXPLANATION("speed dependant turn rates", "when the unit velocity is 0, the yaw/pitch rates are the left values\nat [max speed reference], the yaw/pitch rates are the right values.\nthe max speed reference is what the code uses to generate a clamped speed from 0..1\nthe exponent controls how midrange speeds are interpreted."),
		{ _field_real_bounds, "yaw rate bounds", nullptr, "degrees per second" },
		{ _field_real_bounds, "pitch rate bounds", nullptr, "degrees per second" },
		{ _field_real, "min speed reference" },
		{ _field_real, "max speed reference" },
		{ _field_real, "speed exponent" },
		FIELD_PAD("value", 12),
		FIELD_EXPLANATION("camera fields", nullptr),
		{ _field_struct, "unit camera", &unit_camera_struct_struct_definition, _field_id_uncs },
		{ _field_block, "unit hud interface", &unit_hud_reference_block },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_angle, "yaw minimum" },
		{ _field_angle, "yaw maximum" },
		{ _field_tag_reference, "built-in gunner", &character_group_reference$2 },
		FIELD_PAD("value", 20),
		FIELD_EXPLANATION("entry fields", "note: the entry radius shouldn\'t exceed 3 world units, \nas that is as far as the player will search for a vehicle\nto enter."),
		{ _field_real, "entry radius", "how close to the entry marker a unit must be" },
		{ _field_angle, "entry marker cone angle", "angle from marker forward the unit must be" },
		{ _field_angle, "entry marker facing angle", "angle from unit facing the marker must be" },
		{ _field_real, "maximum relative velocity" },
		FIELD_PAD("value", 20),
		
		{ _struct_version_mode_equal, 1, 22 },
		{ _field_long_flags, "flags", &unnamed_enum$113 },
		{ _field_old_string_id, "label" },
		{ _field_old_string_id, "marker name" },
		FIELD_PAD("value", 32),
		{ _field_real_vector_3d, "acceleration scale" },
		{ _field_real, "AI scariness" },
		{ _field_short_enum, "ai seat type", &unnamed_enum$114 },
		{ _field_short_block_index, "boarding seat" },
		{ _field_real_fraction, "listener interpolation factor", "how far to interpolate listener position from camera to occupant's head" },
		{ _field_real_bounds, "yaw rate bounds", nullptr, "degrees per second" },
		{ _field_real_bounds, "pitch rate bounds", nullptr, "degrees per second" },
		{ _field_real, "max speed reference" },
		{ _field_real, "speed exponent" },
		{ _field_struct, "unit camera", &unit_camera_struct_struct_definition, _field_id_uncs },
		{ _field_block, "unit hud interface", &unit_hud_reference_block },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_angle, "yaw minimum" },
		{ _field_angle, "yaw maximum" },
		{ _field_tag_reference, "built-in gunner", &character_group_reference$2 },
		FIELD_PAD("value", 20),
		
		{ _struct_version_mode_equal, 0, 20 },
		{ _field_long_flags, "flags", &unnamed_enum$113 },
		{ _field_old_string_id, "label" },
		{ _field_old_string_id, "marker name" },
		FIELD_PAD("value", 32),
		{ _field_real_vector_3d, "acceleration scale" },
		{ _field_real, "AI scariness" },
		{ _field_short_enum, "ai seat type", &unnamed_enum$114 },
		{ _field_short_block_index, "boarding seat" },
		{ _field_real_fraction, "listener interpolation factor", "how far to interpolate listener position from camera to occupant's head" },
		{ _field_real, "yaw rate", nullptr, "degrees per second" },
		{ _field_real, "pitch rate", nullptr, "degrees per second" },
		{ _field_struct, "unit camera", &unit_camera_struct_struct_definition, _field_id_uncs },
		{ _field_block, "unit hud interface", &unit_hud_reference_block },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_angle, "yaw minimum" },
		{ _field_angle, "yaw maximum" },
		{ _field_tag_reference, "built-in gunner", &character_group_reference$2 },
		FIELD_PAD("value", 20),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$113)
	{
		"invisible",
		"locked",
		"driver",
		"gunner",
		"third person camera",
		"allows weapons",
		"third person on enter",
		"first person camera slaved to gun.",
		"allow vehicle communication animations",
		"not valid without driver",
		"allow AI noncombatants",
		"boarding seat",
		"ai firing disabled by max acceleration",
		"boarding enters seat",
		"boarding need any passenger",
		"controls open and close",
		"invalid for player",
		"invalid for non-player",
		"gunner (player only)",
		"invisible under major damage"
	};
	STRING_LIST(unnamed_enum$113, unnamed_enum$113_strings, _countof(unnamed_enum$113_strings));

	STRINGS(unnamed_enum$114)
	{
		"NONE",
		"passenger",
		"gunner",
		"small cargo",
		"large cargo",
		"driver"
	};
	STRING_LIST(unnamed_enum$114, unnamed_enum$114_strings, _countof(unnamed_enum$114_strings));

	TAG_STRUCT(
		unit_weapon_block_struct_definition,
		"unit_weapon_block",
		"unit_weapon_block_struct_definition",
		"s_unit_initial_weapon",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "weapon", &weapon_group_reference$3 },
		FIELD_USELESS_PAD("value", 20),
		{ _field_terminator }
	};

	TAG_REFERENCE(weapon_group_reference$3, WEAPON_TAG);

	TAG_STRUCT(
		user_hint_block_struct_definition,
		"user_hint_block",
		"user_hint_block_struct_definition",
		"s_user_hint_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_USELESS_PAD("value", 48),
		{ _field_block, "point geometry", &user_hint_point_block },
		{ _field_block, "ray geometry", &user_hint_ray_block },
		{ _field_block, "line segment geometry", &user_hint_line_segment_block },
		{ _field_block, "parallelogram geometry", &user_hint_parallelogram_block },
		{ _field_block, "polygon geometry", &user_hint_polygon_block },
		FIELD_USELESS_PAD("value", 48),
		{ _field_block, "jump hints", &user_hint_jump_block },
		{ _field_block, "climb hints", &user_hint_climb_block },
		{ _field_block, "well hints", &user_hint_well_block },
		{ _field_block, "flight hints", &user_hint_flight_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		user_hint_climb_block_struct_definition,
		"user_hint_climb_block",
		"user_hint_climb_block_struct_definition",
		"s_user_hint_climb",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "Flags", &unnamed_enum$377 },
		{ _field_short_block_index, "geometry index" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$377)
	{
		"bidirectional",
		"closed"
	};
	STRING_LIST(unnamed_enum$377, unnamed_enum$377_strings, _countof(unnamed_enum$377_strings));

	TAG_STRUCT(
		user_hint_flight_block_struct_definition,
		"user_hint_flight_block",
		"user_hint_flight_block_struct_definition",
		"s_user_flight_hint",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_USELESS_PAD("value", 4),
		{ _field_block, "points", &user_hint_flight_point_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		user_hint_flight_point_block_struct_definition,
		"user_hint_flight_point_block",
		"user_hint_flight_point_block_struct_definition",
		"s_user_hint_flight_point",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_vector_3d, "point" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		user_hint_jump_block_struct_definition,
		"user_hint_jump_block",
		"user_hint_jump_block_struct_definition",
		"s_user_hint_jump",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_word_flags, "Flags", &unnamed_enum$377 },
		{ _field_short_block_index, "geometry index" },
		{ _field_short_enum, "force jump height", &unnamed_enum$101 },
		{ _field_word_flags, "control flags", &unnamed_enum$378 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$378)
	{
		"magic lift"
	};
	STRING_LIST(unnamed_enum$378, unnamed_enum$378_strings, _countof(unnamed_enum$378_strings));

	VERSIONED_TAG_STRUCT(
		user_hint_line_segment_struct_definition,
		"user_hint_line_segment",
		"user_hint_line_segment_struct_definition",
		"s_user_hint_line_segment",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 7 },
		{ _field_long_flags, "Flags", &unnamed_enum$377 },
		{ _field_real_point_3d, "Point 0" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		{ _field_real_point_3d, "Point 1" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		
		{ _struct_version_mode_equal, 0, 3 },
		{ _field_long_flags, "Flags", &unnamed_enum$377 },
		{ _field_real_point_3d, "Point 0" },
		{ _field_real_point_3d, "Point 1" },
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		user_hint_parallelogram_struct_definition,
		"user_hint_parallelogram",
		"user_hint_parallelogram_struct_definition",
		"s_user_hint_parallelogram",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 13 },
		{ _field_long_flags, "Flags", &unnamed_enum$377 },
		{ _field_real_point_3d, "Point 0" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		{ _field_real_point_3d, "Point 1" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		{ _field_real_point_3d, "Point 2" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		{ _field_real_point_3d, "Point 3" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		
		{ _struct_version_mode_equal, 0, 5 },
		{ _field_long_flags, "Flags", &unnamed_enum$377 },
		{ _field_real_point_3d, "Point 0" },
		{ _field_real_point_3d, "Point 1" },
		{ _field_real_point_3d, "Point 2" },
		{ _field_real_point_3d, "Point 3" },
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		user_hint_point_struct_definition,
		"user_hint_point",
		"user_hint_point_struct_definition",
		"s_user_hint_point",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 3 },
		{ _field_real_point_3d, "Point" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		
		{ _struct_version_mode_equal, 0, 1 },
		{ _field_real_point_3d, "Point" },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		user_hint_polygon_block_struct_definition,
		"user_hint_polygon_block",
		"user_hint_polygon_block_struct_definition",
		"s_user_hint_polygon",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "Flags", &unnamed_enum$377 },
		{ _field_block, "Points", &user_hint_point_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		user_hint_ray_struct_definition,
		"user_hint_ray",
		"user_hint_ray_struct_definition",
		"s_user_hint_ray",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 4 },
		{ _field_real_point_3d, "Point" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		{ _field_real_vector_3d, "Vector" },
		
		{ _struct_version_mode_equal, 0, 2 },
		{ _field_real_point_3d, "Point" },
		{ _field_real_vector_3d, "Vector" },
		
		{ _field_terminator }
	};

	TAG_STRUCT(
		user_hint_well_block_struct_definition,
		"user_hint_well_block",
		"user_hint_well_block_struct_definition",
		"s_user_hint_well",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$379 },
		{ _field_block, "points", &user_hint_well_point_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$379)
	{
		"bidirectional"
	};
	STRING_LIST(unnamed_enum$379, unnamed_enum$379_strings, _countof(unnamed_enum$379_strings));

	TAG_STRUCT(
		user_hint_well_point_block_struct_definition,
		"user_hint_well_point_block",
		"user_hint_well_point_block_struct_definition",
		"s_user_hint_well_point",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "type", &unnamed_enum$380 },
		FIELD_PAD("value", 2),
		{ _field_real_vector_3d, "point" },
		{ _field_short_integer, "reference frame" },
		FIELD_PAD("value", 2),
		{ _field_long_integer, "sector index" },
		{ _field_real_euler_angles_2d, "normal" },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$380)
	{
		"jump",
		"climb",
		"hoist"
	};
	STRING_LIST(unnamed_enum$380, unnamed_enum$380_strings, _countof(unnamed_enum$380_strings));

	TAG_STRUCT(
		user_interface_globals_definition_block_struct_definition,
		"user_interface_globals_definition_block",
		"user_interface_globals_definition_block_struct_definition",
		"s_user_interface_tag_globals",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("Shared Globals", "This is a reference to the ui shared globals tag"),
		{ _field_tag_reference, "shared globals", &user_interface_shared_globals_definition_group_reference },
		FIELD_EXPLANATION("Screen Widgets", "These are the screen widgets"),
		{ _field_block, "screen widgets", &user_interface_widget_reference_block },
		FIELD_EXPLANATION("Multiplayer Variant Settings Interface", "This blob defines the ui for setting multiplayer game variant parameters"),
		{ _field_tag_reference, "mp variant settings ui", &multiplayer_variant_settings_interface_definition_group_reference },
		FIELD_EXPLANATION("Game Hopper Localization Strings", "This is for the loc game hopper strings"),
		{ _field_tag_reference, "game hopper descriptions", &multilingual_unicode_string_list_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(user_interface_shared_globals_definition_group_reference, USER_INTERFACE_SHARED_GLOBALS_DEFINITION_TAG);

	TAG_REFERENCE(multiplayer_variant_settings_interface_definition_group_reference, MULTIPLAYER_VARIANT_SETTINGS_INTERFACE_DEFINITION_TAG);

	TAG_STRUCT(
		user_interface_list_skin_definition_block_struct_definition,
		"user_interface_list_skin_definition_block",
		"user_interface_list_skin_definition_block_struct_definition",
		"s_list_item_skin_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "list flags", &unnamed_enum$421 },
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "arrows bitmap", &bitmap_group_reference },
		{ _field_point_2d, "up-arrows offset", nullptr, "from bot-left of 1st item" },
		{ _field_point_2d, "down-arrows offset", nullptr, "from bot-left of 1st item" },
		FIELD_USELESS_PAD("value", 32),
		FIELD_EXPLANATION("Item Animations", "Animations ordered as follows:\n0) list item focused\n1) list item unfocused\n2) list item ambient\n3) list item hovered\n4) list item unhovered\n5) list item clicked (hovered->focused)\n6) list item unfocused back to hovered state (focused->hovered)\n"),
		{ _field_block, "item animations", &single_animation_reference_block },
		{ _field_block, "text blocks", &text_block_reference_block },
		FIELD_EXPLANATION("NOTE", "the bitmap block top-left is actually bottom-left here in list skin land!"),
		{ _field_block, "bitmap blocks", &bitmap_block_reference_block },
		{ _field_block, "hud blocks", &hud_block_reference_block },
		{ _field_block, "player blocks", &player_block_reference_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$421)
	{
		"unused"
	};
	STRING_LIST(unnamed_enum$421, unnamed_enum$421_strings, _countof(unnamed_enum$421_strings));

	TAG_STRUCT(
		user_interface_screen_widget_definition_block_struct_definition,
		"user_interface_screen_widget_definition_block",
		"user_interface_screen_widget_definition_block_struct_definition",
		"s_user_interface_screen_widget_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("Notes on screen widgets", "- the widget coordinate system is a left-handed system (+x to the right, +y up, +z into the screen)\n  with the origin centered in the display (regardless of display size)\n- for widget component placement, all coordinates you define in the tag specifiy the object\'s\n  placement prior to the application of any animation\n- all coordinates you define are local to that object\n- all text specific to objects in the screen comes from the screen\'s string list tag\n  all of the string indices you may need to specify will refer to the screen\'s string list tag\n- a pane may contain either buttons OR a list OR a table-view, but never a combination of those\n  (widget won\'t function correctly if you try that)\n- all text is centered unless you specify otherwise"),
		FIELD_EXPLANATION("Flags", "Set misc. screen behavior here"),
		{ _field_long_flags, "flags", &unnamed_enum$535 },
		{ _field_short_enum, "screen ID", &unnamed_enum$536 },
		FIELD_USELESS_PAD("value", 2),
		FIELD_USELESS_PAD("value", 2),
		FIELD_EXPLANATION("Button Key", "The labels here are just a guide; the actual string used comes from the Nth position\nof this button key entry as found in the ui globals button key string list tag"),
		{ _field_short_enum, "button key type", &unnamed_enum$537 },
		FIELD_EXPLANATION("Default Text Color", "Any ui elements that don\'t explicitly set a text color will use this color"),
		{ _field_real_argb_color, "text color" },
		FIELD_EXPLANATION("Screen Text", "All text specific to this screen"),
		{ _field_tag_reference, "string list tag", &multilingual_unicode_string_list_group_reference },
		FIELD_EXPLANATION("Panes", "Define the screen\'s panes here (normal screens have 1 pane, tab-view screens have 2+ panes)"),
		{ _field_block, "panes", &window_pane_reference_block },
		FIELD_EXPLANATION("Shape Group", "If the screen is to have a shape group, specify it here (references group in user interface globals tag)"),
		{ _field_short_enum, "shape group", &unnamed_enum$546 },
		FIELD_PAD("value", 2),
		FIELD_EXPLANATION("More Screen Parameters", "These are down here because they got added on later. Have a nice day."),
		{ _field_string_id, "header string id" },
		FIELD_EXPLANATION("Local strings", "String IDs here allow defining new string ids that are visible only to this screen."),
		{ _field_block, "local strings", &local_string_id_list_section_reference_block },
		FIELD_EXPLANATION("Local bitmaps", "Bitmaps here allow adding a bitmap that\'s accessible in code for use in this screen."),
		{ _field_block, "local bitmaps", &local_bitmap_reference_block },
		FIELD_EXPLANATION("LEVEL LOAD PROGRESS FIELDS", "These are used only for level load progress bitmaps"),
		{ _field_real_rgb_color, "source color" },
		{ _field_real_rgb_color, "destination color" },
		{ _field_real, "accumulate zoom scale x" },
		{ _field_real, "accumulate zoom scale y" },
		{ _field_real, "refraction scale x" },
		{ _field_real, "refraction scale y" },
		FIELD_EXPLANATION("Mouse cursors", "The mouse cursor definition for this screen."),
		{ _field_tag_reference, "mouse cursor definition", &mouse_cursor_definition_group_reference },
		FIELD_USELESS_PAD("value", 40),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$535)
	{
		"1/4 screen dialog",
		"multiple panes are for list flavor items",
		"no header text",
		"1/2 screen dialog",
		"large dialog",
		"disable overlay effect"
	};
	STRING_LIST(unnamed_enum$535, unnamed_enum$535_strings, _countof(unnamed_enum$535_strings));

	STRINGS(unnamed_enum$536)
	{
		"Test #1",
		"Test #2",
		"Test #3",
		"Test #4",
		"Test #5",
		"Game Shell Background",
		"Main Menu",
		"Error Dialog OK Cancel",
		"Error Dialog OK",
		"Press Start Intro",
		"Player Profile Select",
		"SP Level Select",
		"SP Difficulty Select",
		"Network Squad Browser",
		"MP Pregame Lobby",
		"Custom Game Menu",
		"Postgame Stats",
		"MP Map Select",
		"SP Pause Game",
		"Settings",
		"Gamertag Select",
		"Gamertag Passcode Entry",
		"Multiplayer Protocol",
		"Squad Settings",
		"Squad Game Settings",
		"Squad Privacy Settings",
		"Y Menu-Gameshell",
		"Y Menu-Gameshell Collapsed",
		"Y Menu-InGame",
		"Y Menu-InGame Collapsed",
		"4way join screen",
		"Y Menu-Player Selected Options",
		"Player Selected Options",
		"Confirmation Dialog",
		"Live Feedback Menu Dialog",
		"Live Message Type Dialog",
		"Voice Msg Dialog",
		"Stereo Faceplate",
		"Player Profile Edit Menu",
		"PP Controller Settings",
		"PP Button Settings",
		"PP Thumbstick Settings",
		"PP Look Sensitivity Settings",
		"PP Invert Look Settings",
		"PP Autolevel Settings",
		"PP Handicap Settings",
		"PP High Score Rec Settings",
		"PP Multiplayer Settings Menu",
		"PP Profile Delete Confirmation Dlg",
		"PP Choose Foreground Emblem",
		"PP Choose Primary Color",
		"PP Choose Secondary Color",
		"PP Choose Model",
		"PP Voice Settings Menu",
		"PP Choose Voice Mask",
		"PP Voice thru TV",
		"PP Edit Rotation List",
		"PP XBL Status Menu",
		"PP Appear Offline",
		"PP Auto-Offline",
		"Game Engine Category Listing",
		"Edit Slayer Menu",
		"Edit KOTH Menu",
		"Edit Race Menu",
		"Edit Oddball Menu",
		"Edit Juggernaut Menu",
		"Edit Headhunter Menu",
		"Edit CTF Menu",
		"Edit Assault Menu",
		"Edit Slayer Score to Win",
		"Edit Slayer Time Limit",
		"Edit Slayer Teams",
		"Edit Slayer Score 4 Killing",
		"Edit Slayer Kill in Order",
		"Edit Slayer Death Pt Loss",
		"Edit Slayer Suicide Pt Loss",
		"Edit Slayer Dmg After Kill",
		"Edit Slayer Dmg After Death",
		"Edit Slayer Speed After Kill",
		"Edit Slayer Speed After Death",
		"Edit KOTH Score to Win",
		"Edit KOTH Time Limit",
		"Edit KOTH Teams",
		"Edit KOTH Moving Hills",
		"Edit KOTH Uncontesed Control",
		"Edit KOTH Xtra Dmg",
		"Edit Race Laps to Win",
		"Edit Race Time Limit",
		"Edit Race Teams",
		"Edit Race Team Scoring",
		"Edit Race Type",
		"Edit Race Flag Order",
		"Edit Race Game End Condition",
		"Edit Race Dmg with Laps",
		"Edit Race Speed with Laps",
		"Edit Oddball Time to Win",
		"Edit Oddball Time Limit",
		"Edit Oddball Teams",
		"Edit Oddball Ball Spawn Count",
		"Edit Oddball Ball Waypoints",
		"Edit Oddball Damage with Ball",
		"Edit Oddball Speed with Ball",
		"Edit Oddball Invisibility with Ball",
		"Edit Jug Score to Win",
		"Edit Jug Time Limit",
		"Edit Jug Pts for Killing Jugger",
		"Edit Jug Count",
		"Edit Jug Species",
		"Edit Jug Starting Equip",
		"Edit Jug Damage",
		"Edit Jug Health",
		"Edit Jug Speed",
		"Edit Jug Regeneration",
		"Edit Jug Waypoints",
		"Edit HH Score to Win",
		"Edit HH Time Limit",
		"Edit HH Teams",
		"Edit HH Death Pt Loss",
		"Edit HH Suicide Pt Loss",
		"Edit HH Speed with Token",
		"Edit HH Dropped Token Lifetime",
		"Edit HH Score Multiplier",
		"Edit CTF Score to Win",
		"Edit CTF Time Limit",
		"Edit CTF Tie Resolution",
		"Edit CTF Single Flag",
		"Edit CTF Role Swapping",
		"Edit CTF Flag at Home to Score",
		"Edit CTF Flag Must Reset",
		"Edit CTF Dmg with Flag",
		"Edit CTF Speed with Flag",
		"Edit Assault Score to Win",
		"Edit Assault Time Limit",
		"Edit Assault Tie Resolution",
		"Edit Assault Single Flag",
		"Edit Assault Role Swapping",
		"Edit Assault Enemy Flag at Home to Score",
		"Edit Assault Flag Must Reset",
		"Edit Assault Dmg with Flag",
		"Edit Assault Speed with Flag",
		"Edit Player Number of Lives",
		"Edit Player Max Health",
		"Edit Player Shields",
		"Edit Player Respawn Time",
		"Edit Player Count",
		"Edit Player Invisibility",
		"Edit Player Suicide Penalty",
		"Edit Player Friendly Fire",
		"Edit Item Respawn Grenades",
		"Edit Item Powerups",
		"Edit Item Weapon Set",
		"Edit Item Starting Equipment",
		"Edit Item Warthogs",
		"Edit Item Ghosts",
		"Edit Item Scorpions",
		"Edit Item Banshees",
		"Edit Item Mongeese",
		"Edit Item Shadows",
		"Edit Item Wraiths",
		"Edit Indicator Objectives",
		"Edit Indicator Players on Motion Sensor",
		"Edit Indicator Invisible Players on Motion Sensor",
		"Edit Indicator Friends",
		"Edit Indicator Enemies",
		"Edit Player Options",
		"Edit Item Options",
		"Edit Indicator Options",
		"Virtual Keyboard",
		"Custom Game Menu",
		"Slayer Quick Options",
		"KOTH Quick Options",
		"Race Quick Options",
		"Oddball Quick Options",
		"Jugger Quick Options",
		"HH Quick Options",
		"CTF Quick Options",
		"Assault Quick Options",
		"Pick New Squad Leader",
		"Variant Editing Options Menu",
		"Playlist List-Settings",
		"Playlist Contents",
		"Playlist Selected Options",
		"Xbox Live Task Progress",
		"PP Vibration Settings",
		"Boot Player Dialog",
		"Postgame Stats-Lobby",
		"XBox Live Main Menu",
		"Edit Terries Menu",
		"Edit Terries Score to Win",
		"Edit Terries Time Limit",
		"Edit Terries Teams",
		"Terries Quick Options",
		"XBox Live Notification Beeper",
		"Player Profile Select-Fancy",
		"Saved Game File Actions Dialog",
		"MP Start Menu",
		"MP Start Player Settings",
		"MP Start Handicap Settings",
		"MP Start Change Teams",
		"MP Start Admin Settings",
		"MP Start Controller Settings",
		"MP Start Voice Settings",
		"MP Start Online Status",
		"MPAlpha Legal Warning",
		"Squad Join Progress Dialog",
		"MP Alpha Postgame Legal Warning",
		"MP Map Select-Lobby",
		"MP Variant Type-Lobby",
		"MP Variant List-Lobby",
		"Loading Progress",
		"Matchmaking Progress",
		"Live Message Display",
		"Fade-in From Black",
		"Live Player Profile",
		"Live Clan Profile",
		"Live Message Send",
		"Friends Options Dialog",
		"Clan Options Dialog",
		"Campaign Options Dialog",
		"Optimatch Hoppers Fullscreen",
		"Playlist List-dialog",
		"Variant Editing Format",
		"Variant Quick Options Format",
		"Variant Param Setting Format",
		"Vehicle Options",
		"Match Options",
		"Player Options",
		"Team Options",
		"Game Options",
		"Equipment Options",
		"Multiple Choice Dialog",
		"Network Transition Progress",
		"Xbox Live Stats",
		"PP Choose Background Emblem",
		"PP Buttons Qtr",
		"PP Stix Qtr",
		"Clan Member Privs",
		"Optimatch Hoppers Lobby",
		"Saved game file dialog",
		"XYZZY",
		"Error OK Cancel Large",
		"YZZYX",
		"Subtitle Display",
		"PP Keyboard Settings",
		"PP Keyboard Settings Qtr",
		"PP Invert Dual Wield",
		"System Settings",
		"Bungie News",
		"Filter Select",
		"Live Game Browser",
		"Game Details",
		"MP Custom Map Select",
		"MP All Maps Select",
		"PP Advanced Keyboard Settings",
		"PP Advanced Keyboard Settings Qtr",
		"PP Restore Default Controller Settings",
		"Video Settings",
		"Audio Settings",
		"PP Keyboard Settings Menu",
		"Pause Settings",
		"MP Start Keyboard Settings",
		"MP Start Video Settings",
		"MP Start Audio Settings",
		"Volume Settings",
		"Sound Quality Setting",
		"EAX Setting",
		"3D Audio Setting",
		"Speaker Configuration",
		"Restore Audio Defaults",
		"Resolution Settings",
		"Aspect Ratio Settings",
		"Display Mode Settings",
		"Brightness Level Settings",
		"Gamma Settings",
		"Anti-Aliasing Settings",
		"HUD Size Settings",
		"Restore Video Defaults",
		"Search Option Maps",
		"Search Option Gametype",
		"Search Option Variant",
		"Search Option Gold Only",
		"Search Option Dedicated Server",
		"Search Option Max Players",
		"Search Option Favorites",
		"Search Option Show Full Games",
		"Safe Area Settings",
		"Find Game Menu",
		"Search Options",
		"Live checkpoint dropped connection",
		"Live checkpoint hash mismatch",
		"Level Of Detail Settings",
		"Refresh Rate",
		"ESRB Warning",
		"Confirm Resolution Change",
		"Invert Keyboard Look",
		"Restore Keyboard Defaults",
		"Network Adapter Settings",
		"About Dialog"
	};
	STRING_LIST(unnamed_enum$536, unnamed_enum$536_strings, _countof(unnamed_enum$536_strings));

	STRINGS(unnamed_enum$537)
	{
		"NONE",
		"A=SELECT B=BACK",
		"A=SELECT B=CANCEL",
		"A=ENTER B=CANCEL",
		"Y=XBOX LIVE PLAYERS",
		"X=FRIENDS OPTIONS",
		"X=CLAN OPTIONS",
		"X=RECENT PLAYERS OPTIONS",
		"X=OPTIONS",
		"A=SELECT",
		"X=SETTINGS A=SELECT B=BACK",
		"X=DELETE A=SELECT B=DONE",
		"A=ACCEPT",
		"B=CANCEL",
		"Y=XBOX_LIVE_PLAYERS A=SELECT B=BACK",
		"Y=XBOX_LIVE_PLAYERS A=SELECT B=CANCEL",
		"Y=XBOX_LIVE_PLAYERS A=ENTER B=CANCEL",
		"Y=XBOX_LIVE_PLAYERS A=SELECT",
		"Y=XBOX_LIVE_PLAYERS A=SELECT B=DONE",
		"Y=XBOX_LIVE_PLAYERS A=ACCEPT",
		"Y=XBOX_LIVE_PLAYERS B=CANCEL",
		"X=DELETE A=SELECT B=BACK",
		"A=OK",
		"A=EDIT B=DONE",
		"A=SELECT B=BACK Y=REFRESH",
		"A=ACCEPT B=CANCEL"
	};
	STRING_LIST(unnamed_enum$537, unnamed_enum$537_strings, _countof(unnamed_enum$537_strings));

	STRINGS(unnamed_enum$546)
	{
		"NONE",
		"00",
		"01",
		"02",
		"03",
		"04",
		"05",
		"06",
		"07",
		"08",
		"09",
		"10",
		"11",
		"12",
		"13",
		"14",
		"15",
		"16",
		"17",
		"18",
		"19",
		"20",
		"21",
		"22",
		"23",
		"24",
		"25",
		"26",
		"27",
		"28",
		"29",
		"30",
		"31"
	};
	STRING_LIST(unnamed_enum$546, unnamed_enum$546_strings, _countof(unnamed_enum$546_strings));

	TAG_REFERENCE(mouse_cursor_definition_group_reference, MOUSE_CURSOR_DEFINITION_TAG);

	TAG_STRUCT(
		user_interface_shared_globals_definition_block_struct_definition,
		"user_interface_shared_globals_definition_block",
		"user_interface_shared_globals_definition_block_struct_definition",
		"s_user_interface_shared_globals",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 8),
		FIELD_PAD("value", 8),
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 8),
		FIELD_PAD("value", 8),
		FIELD_EXPLANATION("UI Rendering Globals", "miscellaneous rendering globals, more below..."),
		{ _field_real, "overlayed screen alpha mod" },
		{ _field_short_integer, "inc. text update period", nullptr, "milliseconds" },
		{ _field_short_integer, "inc. text block character", nullptr, "ASCII code" },
		{ _field_real, "callout text scale" },
		{ _field_real_argb_color, "progress bar color" },
		{ _field_real, "near clip plane distance", nullptr, "objects closer than this are not drawn" },
		{ _field_real, "projection plane distance", nullptr, "distance at which objects are rendered when z=0 (normal size)" },
		{ _field_real, "far clip plane distance", nullptr, "objects farther than this are not drawn" },
		FIELD_EXPLANATION("Overlayed UI Color", "This is the color of the overlayed ui effect; the alpha component is the maximum opacity"),
		{ _field_real_argb_color, "overlayed interface color" },
		FIELD_PAD("value", 12),
		FIELD_EXPLANATION("Displayed Errors", "For each error condition displayed in the UI, set the title and description string ids here"),
		{ _field_block, "errors", &ui_error_category_block },
		FIELD_EXPLANATION("Cursor Sound", "This is the sound that plays as you tab through items"),
		{ _field_tag_reference, "sound tag", &sound_group_reference },
		FIELD_EXPLANATION("Selection Sound", "This is the sound that plays when an item is selected"),
		{ _field_tag_reference, "sound tag", &sound_group_reference },
		FIELD_EXPLANATION("Error Sound", "This is the sound that plays to alert the user that something went wrong"),
		{ _field_tag_reference, "sound tag", &sound_group_reference },
		FIELD_EXPLANATION("Advancing Sound", "This is the sound that plays when advancing to a new screen"),
		{ _field_tag_reference, "sound tag", &sound_group_reference },
		FIELD_EXPLANATION("Retreating Sound", "This is the sound that plays when retreating to a previous screen"),
		{ _field_tag_reference, "sound tag", &sound_group_reference },
		FIELD_EXPLANATION("Initial Login Sound", "This is the sound that plays when advancing past the initial login screen"),
		{ _field_tag_reference, "sound tag", &sound_group_reference },
		FIELD_EXPLANATION("VKBD Cursor Sound", "This is the sound that plays when cursoring in the vkeyboard"),
		{ _field_tag_reference, "sound tag", &sound_group_reference },
		FIELD_EXPLANATION("VKBD Character Insertion Sound", "This is the sound that plays when selecting buttons in the vkeyboard"),
		{ _field_tag_reference, "sound tag", &sound_group_reference },
		FIELD_EXPLANATION("Online Notification Sound", "This is the sound that plays when you receive an online notification"),
		{ _field_tag_reference, "sound tag", &sound_group_reference },
		FIELD_EXPLANATION("Tabbed View Pane Tabbing Sound", "This is the sound that plays when tabbing thru views in a tabbed view pane (eg, online menu)"),
		{ _field_tag_reference, "sound tag", &sound_group_reference },
		FIELD_EXPLANATION("Pregame Countdown Timer Sound", "This is the sound that plays as the countdown timer progresses"),
		{ _field_tag_reference, "sound tag", &sound_group_reference },
		{ _field_tag_reference, "value", &sound_group_reference },
		FIELD_EXPLANATION("Matchmaking Advance Sound", "This is the sound that plays as matchmaking enters the final stage"),
		{ _field_tag_reference, "sound tag", &sound_group_reference },
		{ _field_tag_reference, "value", &sound_group_reference },
		{ _field_tag_reference, "value", &sound_group_reference },
		{ _field_tag_reference, "value", &sound_group_reference },
		FIELD_EXPLANATION("Global Bitmaps", "Sprite sequences for global ui bitmaps, as follows:\n1) vkeyboard cursor\n"),
		{ _field_tag_reference, "global bitmaps tag", &bitmap_group_reference },
		FIELD_EXPLANATION("Global Text Strings", "Global UI Text goes here"),
		{ _field_tag_reference, "unicode string list tag", &multilingual_unicode_string_list_group_reference },
		FIELD_EXPLANATION("Screen Animations", "Animations used by screen definitions for transitions and ambient animating"),
		{ _field_block, "screen animations", &animation_reference_block },
		FIELD_EXPLANATION("Polygonal Shape Groups", "Define the various groups of shape-objects for use on any ui screens here"),
		{ _field_block, "shape groups", &shape_group_reference_block },
		FIELD_EXPLANATION("Persistant Background Animations", "These are the animations used by elements that live in the persistant background"),
		{ _field_block, "animations", &persistent_background_animation_block },
		FIELD_EXPLANATION("List Skins", "These define the visual appearances (skins) available for UI lists\nThey are expected to be entered in the following order:\n0) default\n1) squad lobby player list\n2) settings list\n3) playlist entry list\n4) variants list\n5) game browser list\n6) online player menu\n7) game setup menu\n8) playlist contents display\n9) profile picker\n10) mp map list\n11) main menu\n"),
		{ _field_block, "list item skins", &list_skin_reference_block },
		FIELD_EXPLANATION("Additional UI Strings", "These are for specific purposes as noted"),
		{ _field_tag_reference, "button key type strings", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "game type strings", &multilingual_unicode_string_list_group_reference },
		{ _field_tag_reference, "value", &_reference$4 },
		FIELD_EXPLANATION("Skill to rank mapping table", nullptr),
		{ _field_block, "skill mappings", &skill_to_rank_mapping_block },
		FIELD_EXPLANATION("WINDOW PARAMETERS", "Various settings for different sized UI windows"),
		{ _field_short_enum, "full screen header text font", &unnamed_enum$425 },
		{ _field_short_enum, "large dialog header text font", &unnamed_enum$425 },
		{ _field_short_enum, "half dialog header text font", &unnamed_enum$425 },
		{ _field_short_enum, "qtr dialog header text font", &unnamed_enum$425 },
		{ _field_real_argb_color, "default text color" },
		{ _field_rectangle_2d, "full screen header text bounds" },
		{ _field_rectangle_2d, "full screen button key text bounds" },
		{ _field_rectangle_2d, "large dialog header text bounds" },
		{ _field_rectangle_2d, "large dialog button key text bounds" },
		{ _field_rectangle_2d, "half dialog header text bounds" },
		{ _field_rectangle_2d, "half dialog button key text bounds" },
		{ _field_rectangle_2d, "qtr dialog header text bounds" },
		{ _field_rectangle_2d, "qtr dialog button key text bounds" },
		FIELD_EXPLANATION("Main menu music", "Looping sound that plays while the main menu is active"),
		{ _field_tag_reference, "main menu music", &sound_looping_group_reference },
		{ _field_long_integer, "music fade time", nullptr, "milliseconds" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		user_interface_widget_reference_block_struct_definition,
		"user_interface_widget_reference_block",
		"user_interface_widget_reference_block_struct_definition",
		"s_user_interface_widget_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "widget tag", &user_interface_screen_widget_definition_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		variant_setting_edit_reference_block_struct_definition,
		"variant_setting_edit_reference_block",
		"variant_setting_edit_reference_block_struct_definition",
		"s_variant_setting_edit_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_enum, "setting category", &unnamed_enum$203 },
		FIELD_PAD("value", 4),
		{ _field_block, "options", &text_value_pair_block },
		{ _field_block, "value", &null_block },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$203)
	{
		"match-ctf",
		"match-slayer",
		"match-oddball",
		"match-king",
		"match-race",
		"match-headhunter",
		"match-juggernaut",
		"match-territories",
		"match-assault",
		"players",
		"OBSOLETE",
		"vehicles",
		"equipment",
		"game-ctf",
		"game-slayer",
		"game-oddball",
		"game-king",
		"game-race",
		"game-headhunter",
		"game-juggernaut",
		"game-territories",
		"game-assault",
		"quick options-ctf",
		"quick options-slayer",
		"quick options-oddball",
		"quick options-king",
		"quick options-race",
		"quick options-headhunter",
		"quick options-juggernaut",
		"quick options-territories",
		"quick options-assault",
		"team-ctf",
		"team-slayer",
		"team-oddball",
		"team-king",
		"team-race",
		"team-headhunter",
		"team-juggernaut",
		"team-territories",
		"team-assault",
		"skulls"
	};
	STRING_LIST(unnamed_enum$203, unnamed_enum$203_strings, _countof(unnamed_enum$203_strings));

	TAG_STRUCT(
		vehicle_block_struct_definition,
		"vehicle_block",
		"vehicle_block_struct_definition",
		"s_vehicle_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ UNIT $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$106 },
		{ _field_short_enum, "default team", &unnamed_enum$107 },
		{ _field_short_enum, "constant sound volume", &unnamed_enum$108 },
		FIELD_USELESS_PAD("value", 4),
		{ _field_tag_reference, "integrated light toggle", &effect_group_reference },
		FIELD_USELESS_PAD("value", 8),
		{ _field_angle, "camera field of view", nullptr, "degrees" },
		{ _field_real, "camera stiffness" },
		{ _field_struct, "unit camera", &unit_camera_struct_struct_definition, _field_id_uncs },
		{ _field_struct, "acceleration", &unit_seat_acceleration_struct_struct_definition, _field_id_usas },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "soft ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "soft ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard ping threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "hard ping interrupt time", nullptr, "seconds" },
		{ _field_real, "hard death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death threshold", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign death time", nullptr, "seconds" },
		{ _field_real, "distance of evade anim", "this must be set to tell the AI how far it should expect our evade animation to move us", "world units" },
		{ _field_real, "distance of dive anim", "this must be set to tell the AI how far it should expect our dive animation to move us", "world units" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "stunned movement threshold", "if we take this much damage in a short space of time we will play our 'stunned movement' animations", nullptr, "[0,1]" },
		{ _field_real, "feign death chance", nullptr, nullptr, "[0,1]" },
		{ _field_real, "feign repeat chance", nullptr, nullptr, "[0,1]" },
		{ _field_tag_reference, "spawned turret character", "automatically created character when this unit is driven", &character_group_reference$2 },
		{ _field_short_integer_bounds, "spawned actor count", "number of actors which we spawn" },
		{ _field_real, "spawned velocity", "velocity at which we throw spawned actors" },
		{ _field_angle, "aiming velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "aiming acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_real_fraction, "casual aiming modifier", nullptr, nullptr, "[0,1]" },
		{ _field_angle, "looking velocity maximum", nullptr, "degrees per second" },
		{ _field_angle, "looking acceleration maximum", nullptr, "degrees per second squared" },
		{ _field_string_id, "right_hand_node", "where the primary weapon is attached" },
		{ _field_string_id, "left_hand_node", "where the seconday weapon is attached (for dual-pistol modes)" },
		{ _field_struct, "more damn nodes", &unit_additional_node_names_struct_definition, _field_id_uHnd }, // structure_version:1
		FIELD_USELESS_PAD("value", 8),
		{ _field_tag_reference, "melee damage", &damage_effect_group_reference },
		{ _field_struct, "your momma", &unit_boarding_melee_struct_definition, _field_id_ubms }, // structure_version:1
		{ _field_short_enum, "motion sensor blip size", &unnamed_enum$109 },
		{ _field_struct, "campaign metagame bucket", &campaign_metagame_bucket_block_struct_definition, _field_id_cmtb },
		{ _field_block, "postures", &unit_postures_block },
		{ _field_block, "NEW HUD INTERFACES", &unit_hud_reference_block },
		{ _field_block, "dialogue variants", &dialogue_variant_block },
		{ _field_real, "grenade velocity", nullptr, "world units per second" },
		{ _field_short_enum, "grenade type", &unnamed_enum$112 },
		{ _field_short_integer, "grenade count" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_block, "powered seats", &powered_seat_block },
		{ _field_block, "weapons", &unit_weapon_block },
		{ _field_block, "seats", &unit_seat_block },
		FIELD_EXPLANATION("Boost", nullptr),
		{ _field_struct, "boost", &unit_boost_struct_struct_definition, _field_id_unknown },
		FIELD_EXPLANATION("Lipsync", nullptr),
		{ _field_struct, "lipsync", &unit_lipsync_scales_struct_definition, _field_id_ulYc }, // structure_version:1
		FIELD_EXPLANATION("$$$ VEHICLE $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$505 },
		{ _field_short_enum, "type", &unnamed_enum$506 },
		{ _field_short_enum, "control", &unnamed_enum$507 },
		{ _field_real, "maximum forward speed" },
		{ _field_real, "maximum reverse speed" },
		{ _field_real, "speed acceleration" },
		{ _field_real, "speed deceleration" },
		{ _field_real, "maximum left turn" },
		{ _field_real, "maximum right turn (negative)" },
		{ _field_real, "wheel circumference" },
		{ _field_real, "turn rate" },
		{ _field_real, "blur speed" },
		{ _field_short_enum, "specific type", "if your type corresponds to something in this list choose it", &unnamed_enum$508 },
		{ _field_short_enum, "player training vehicle type", &unnamed_enum$509 },
		{ _field_string_id, "flip message" },
		{ _field_real, "turn scale" },
		{ _field_real, "speed turn penalty power (0.5 .. 2)" },
		{ _field_real, "speed turn penalty (0 = none, 1 = can't turn at top speed)" },
		{ _field_real, "maximum left slide" },
		{ _field_real, "maximum right slide" },
		{ _field_real, "slide acceleration" },
		{ _field_real, "slide deceleration" },
		{ _field_real, "minimum flipping angular velocity" },
		{ _field_real, "maximum flipping angular velocity" },
		{ _field_short_enum, "vehicle size", "The size determine what kind of seats in larger vehicles it may occupy (i.e. small or large cargo seats)", &unnamed_enum$510 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 20),
		{ _field_real, "fixed gun yaw" },
		{ _field_real, "fixed gun pitch" },
		FIELD_EXPLANATION("steering overdampening", "when the steering is off by more than the cusp angle\nthe steering will overcompensate more and more.  when it\nis less, it overcompensates less and less.  the exponent\nshould be something in the neighborhood of 2.0\n"),
		{ _field_real, "overdampen cusp angle", nullptr, "degrees" },
		{ _field_real, "overdampen exponent" },
		{ _field_real, "crouch transition time", nullptr, "seconds" },
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("engine", nullptr),
		{ _field_real, "engine moment", "higher moments make engine spin up slower" },
		{ _field_real, "engine max angular velocity", "higher moments make engine spin up slower" },
		{ _field_block, "gears", &gear_block },
		{ _field_real, "flying torque scale", "big vehicles need to scale this down.  0 defaults to 1, which is generally a good value.  This is used with alien fighter physics" },
		{ _field_real, "seat enterance acceleration scale", "how much do we scale the force the biped the applies down on the seat when he enters. 0 == no acceleration" },
		{ _field_real, "seat exit accelersation scale", "how much do we scale the force the biped the applies down on the seat when he exits. 0 == no acceleration" },
		FIELD_USELESS_PAD("value", 16),
		{ _field_real, "air friction deceleration", "human plane physics only. 0 is nothing.  1 is like thowing the engine to full reverse" },
		{ _field_real, "thrust scale", "human plane physics only. 0 is default (1)" },
		FIELD_EXPLANATION("sounds and effects", nullptr),
		{ _field_tag_reference, "suspension sound", &sound_group_reference },
		{ _field_tag_reference, "crash sound", &sound_group_reference },
		{ _field_tag_reference, "UNUSED", &material_effects_group_reference },
		{ _field_tag_reference, "special effect", &effect_group_reference },
		{ _field_tag_reference, "unused effect", &effect_group_reference },
		FIELD_EXPLANATION("physics", nullptr),
		{ _field_struct, "havok vehicle physics", &havok_vehicle_physics_struct_definition, _field_id_HVPH },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$505)
	{
		"speed wakes physics",
		"turn wakes physics",
		"driver power wakes physics",
		"gunner power wakes physics",
		"control opposite speed sets brake",
		"slide wakes physics",
		"kills riders at terminal velocity",
		"causes collision damage",
		"ai weapon cannot rotate",
		"ai does not require driver",
		"ai unused",
		"ai driver enable",
		"ai driver flying",
		"ai driver can-sidestep",
		"ai driver hovering",
		"vehicle steers directly",
		"unused",
		"has e-brake",
		"noncombat vehicle",
		"no friction w/driver",
		"can trigger automatic opening doors",
		"autoaim when teamless"
	};
	STRING_LIST(unnamed_enum$505, unnamed_enum$505_strings, _countof(unnamed_enum$505_strings));

	STRINGS(unnamed_enum$506)
	{
		"human tank",
		"human jeep",
		"human boat",
		"human plane",
		"alien scout",
		"alien fighter",
		"turret"
	};
	STRING_LIST(unnamed_enum$506, unnamed_enum$506_strings, _countof(unnamed_enum$506_strings));

	STRINGS(unnamed_enum$507)
	{
		"vehicle control normal",
		"vehicle control unused",
		"vehicle control tank"
	};
	STRING_LIST(unnamed_enum$507, unnamed_enum$507_strings, _countof(unnamed_enum$507_strings));

	STRINGS(unnamed_enum$508)
	{
		"none",
		"ghost",
		"wraith",
		"spectre",
		"sentinel enforcer"
	};
	STRING_LIST(unnamed_enum$508, unnamed_enum$508_strings, _countof(unnamed_enum$508_strings));

	STRINGS(unnamed_enum$509)
	{
		"none",
		"warthog",
		"warthog turret",
		"ghost",
		"banshee",
		"tank",
		"wraith"
	};
	STRING_LIST(unnamed_enum$509, unnamed_enum$509_strings, _countof(unnamed_enum$509_strings));

	STRINGS(unnamed_enum$510)
	{
		"small",
		"large"
	};
	STRING_LIST(unnamed_enum$510, unnamed_enum$510_strings, _countof(unnamed_enum$510_strings));

	TAG_STRUCT(
		vehicle_collection_block_struct_definition,
		"vehicle_collection_block",
		"vehicle_collection_block_struct_definition",
		"s_vehicle_collection_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "vehicle permutations", &vehicle_permutation_block },
		{ _field_short_integer, "spawn time (in seconds, 0 = default)" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		vehicle_permutation_struct_definition,
		"vehicle_permutation",
		"vehicle_permutation_struct_definition",
		"s_vehicle_permutation_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "weight", "relatively how likely this vehicle will be chosen" },
		{ _field_tag_reference, "vehicle", "which vehicle to ", &vehicle_group_reference$4 },
		{ _field_string_id, "variant name" },
		{ _field_terminator }
	};

	TAG_REFERENCE(vehicle_group_reference$4, VEHICLE_TAG);

	TAG_STRUCT(
		vehicle_phantom_shape_block_struct_definition,
		"vehicle_phantom_shape_block",
		"vehicle_phantom_shape_block_struct_definition",
		"s_vehicle_phantom_shape_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		{ _field_pointer, "value" },
		{ _field_short_integer, "size" },
		{ _field_short_integer, "count" },
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		FIELD_SKIP("value", 4),
		FIELD_PAD_EX("value", nullptr, FIELD_FLAG_NONE, 4, _field_id_pd64),
		{ _field_pointer, "value" },
		{ _field_long_integer, "child shapes size" },
		{ _field_long_integer, "child shapes capacity" },
		{ _field_array, "child shapes storage", &unnamed_array$50 },
		{ _field_long_integer, "multisphere count" },
		{ _field_long_flags, "flags", &unnamed_enum$515 },
		FIELD_PAD("value", 8),
		{ _field_real, "x0" },
		{ _field_real, "x1" },
		{ _field_real, "y0" },
		{ _field_real, "y1" },
		{ _field_real, "z0" },
		{ _field_real, "z1" },
		{ _field_array, "multispheres", &unnamed_array$52 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$515)
	{
		"has aabb phantom",
		"unused"
	};
	STRING_LIST(unnamed_enum$515, unnamed_enum$515_strings, _countof(unnamed_enum$515_strings));

	VERSIONED_TAG_STRUCT(
		vehicle_struct_definition,
		"vehicle",
		"vehicle_struct_definition",
		"s_character_vehicle_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 59 },
		{ _field_tag_reference, "unit", &unit_group_reference$2 },
		{ _field_tag_reference, "style", &style_group_reference$2 },
		FIELD_USELESS_PAD("value", 32),
		{ _field_long_flags, "vehicle flags", &unnamed_enum$151 },
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("Pathfinding", nullptr),
		{ _field_real, "ai pathfinding radius", nullptr, "world units (Ground vehicles)" },
		{ _field_real, "ai destination radius", "Distance within which goal is considered reached", "world units (All vehicles)" },
		{ _field_real, "ai deceleration distance", "Distance from goal at which AI starts to decelerate", "world units: (All vehicles)" },
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("Turning", nullptr),
		{ _field_real, "ai turning radius", "Idealized average turning radius (should reflect actual vehicle physics)", "world units (Warthog, Pelican, Ghost)" },
		{ _field_real, "ai inner turning radius (< tr)", "Idealized minimum turning radius (should reflect actual vehicle physics)", "(Warthogs)" },
		{ _field_real, "ai ideal turning radius (> tr)", "Ideal turning radius for rounding turns (barring obstacles, etc.)", "(Warthogs, ghosts)" },
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("Steering", nullptr),
		{ _field_angle, "ai banshee steering maximum", nullptr, "(banshees)" },
		{ _field_real, "ai max steering angle", "Maximum steering angle from forward (ultimately controls turning speed)", "degrees (warthogs, ghosts, wraiths)" },
		{ _field_real, "ai max steering delta", "Maximum delta in steering angle from one tick to the next (ultimately controls turn acceleration)", "degrees (warthogs, dropships, ghosts, wraiths)" },
		{ _field_real, "ai oversteering scale", nullptr, "(warthogs, ghosts, wraiths)" },
		{ _field_angle_bounds, "ai oversteering bounds", "Angle to goal at which AI will oversteer", "(banshees)" },
		{ _field_real, "ai sideslip distance", "Distance within which AI will strafe to target (as opposed to turning)", "(ghosts, dropships)" },
		{ _field_real, "ai avoidance distance", "Look-ahead distance for obstacle avoidance", "world units:(banshees)" },
		{ _field_real, "ai min urgency", "The minimum urgency with which a turn can be made (urgency = percent of maximum steering delta)", nullptr, "[0-1] (Banshees)" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_EXPLANATION("Throttle", nullptr),
		{ _field_real, "ai throttle maximum", nullptr, "(0 - 1) (all vehicles)" },
		{ _field_real, "ai goal min throttle scale", "scale on throttle when within 'ai deceleration distance' of goal (0...1)", "(warthogs, dropships, ghosts)" },
		{ _field_real, "ai turn min throttle scale", "Scale on throttle due to nearness to a turn (0...1)", "(warthogs, dropships, ghosts)" },
		{ _field_real, "ai direction min throttle scale", "Scale on throttle due to facing away from intended direction (0...1)", "(warthogs, dropships, ghosts)" },
		{ _field_real, "ai acceleration scale", "The maximum allowable change in throttle between ticks", "(0-1): (warthogs, ghosts)" },
		{ _field_real, "ai throttle blend", "The degree of throttle blending between one tick and the next (0 = no blending)", "(0-1): (dropships, sentinels)" },
		{ _field_real, "theoretical max speed", "About how fast I can go.", "wu/s (warthogs, dropships, ghosts)" },
		{ _field_real, "error scale", "scale on the difference between desired and actual speed, applied to throttle", "(warthogs, dropships)" },
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("Combat", nullptr),
		{ _field_angle, "ai allowable aim deviation angle" },
		FIELD_USELESS_PAD("value", 12),
		FIELD_EXPLANATION("Behavior", nullptr),
		{ _field_real, "ai charge tight angle distance", "The distance at which the tight angle criterion is used for deciding to vehicle charge", "(all vehicles)" },
		{ _field_real, "ai charge tight angle", "Angle cosine within which the target must be when target is closer than tight angle distance in order to charge", nullptr, "[0-1] (all vehicles)" },
		{ _field_real, "ai charge repeat timeout", "Time delay between vehicle charges", "(all vehicles)" },
		{ _field_real, "ai charge look-ahead time", "In deciding when to abort vehicle charge, look ahead these many seconds to predict time of contact", "(all vehicles)" },
		{ _field_real, "ai charge consider distance", "Consider charging the target when it is within this range (0 = infinite distance)", "(all vehicles)" },
		{ _field_real, "ai charge abort distance", "Abort the charge when the target get more than this far away (0 = never abort)", "(all vehicles)" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "vehicle ram timeout", "The ram behavior stops after a maximum of the given number of seconds" },
		{ _field_real, "ram paralysis time", "The ram behavior freezes the vehicle for a given number of seconds after performing the ram" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "ai cover damage threshold", "Trigger a cover when recent damage is above given threshold (damage_vehicle_cover impulse)", "(all vehicles)" },
		{ _field_real, "ai cover min distance", "When executing vehicle-cover, minimum distance from the target to flee to", "(all vehicles)" },
		{ _field_real, "ai cover time", "How long to stay away from the target", "(all vehicles)" },
		{ _field_real, "ai cover min boost distance", "Boosting allowed when distance to cover destination is greater then this.", "(all vehicles)" },
		{ _field_real, "turtling recent damage threshold", "If vehicle turtling behavior is enabled, turtling is initiated if 'recent damage' surpasses the given threshold", "%" },
		{ _field_real, "turtling min time", "If the vehicle turtling behavior is enabled, turtling occurs for at least the given time", "seconds" },
		{ _field_real, "turtling timeout", "The turtled state times out after the given number of seconds", "seconds" },
		FIELD_USELESS_PAD("value", 8),
		{ _field_short_enum, "obstacle ignore size", &unnamed_enum$140 },
		FIELD_PAD("I", 2),
		
		{ _struct_version_mode_equal, 0, 41 },
		{ _field_tag_reference, "unit", &unit_group_reference$2 },
		{ _field_long_flags, "vehicle flags", &unnamed_enum$138 },
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("Pathfinding", nullptr),
		{ _field_real, "ai pathfinding radius", "(Ground vehicles)", "world units" },
		{ _field_real, "ai destination radius", "(All vehicles) Distance within which goal is considered reached", "world units" },
		{ _field_real, "ai deceleration distance", "(All vehicles)Distance from goal at which AI starts to decelerate", "world units" },
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("Turning", nullptr),
		{ _field_real, "ai turning radius", "(Warthog, Pelican) Idealized average turning radius (should reflect actual vehicle physics)" },
		{ _field_real, "ai inner turning radius (< tr)", "(Warthog-type) Idealized minimum turning radius (should reflect actual vehicle physics)" },
		{ _field_real, "ai ideal turning radius (> tr)", "(Warthogs, ghosts) Ideal turning radius for rounding turns (barring obstacles, etc.)" },
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("Steering", nullptr),
		{ _field_angle, "ai banshee steering maximum", "(Banshee)" },
		{ _field_real, "ai max steering angle", "(Warthog, ghosts, wraiths)Maximum steering angle from forward (ultimately controls turning speed)", "degrees" },
		{ _field_real, "ai max steering delta", "(pelicans, dropships, ghosts, wraiths)Maximum delta in steering angle from one tick to the next (ultimately controls turn acceleration)", "degrees" },
		{ _field_real, "ai oversteering scale", "(Warthog, ghosts, wraiths)" },
		{ _field_angle_bounds, "ai oversteering bounds", "(Banshee) Angle to goal at which AI will oversteer" },
		{ _field_real, "ai sideslip distance", "(Ghosts, Dropships) Distance within which AI will strafe to target (as opposed to turning)" },
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("Throttle", nullptr),
		{ _field_real, "ai throttle maximum", "(All vehicles)", "(0 - 1)" },
		{ _field_real, "ai goal min throttle scale", "(Warthogs, Dropships, ghosts)scale on throttle when within 'ai deceleration distance' of goal (0...1)" },
		{ _field_real, "ai turn min throttle scale", "(Warthogs, ghosts) Scale on throttle due to nearness to a turn (0...1)" },
		{ _field_real, "ai direction min throttle scale", "(Warthogs, ghosts) Scale on throttle due to facing away from intended direction (0...1)" },
		{ _field_real, "ai acceleration scale", "(warthogs, ghosts) The maximum allowable change in throttle between ticks", "(0-1)" },
		FIELD_USELESS_PAD("value", 8),
		FIELD_EXPLANATION("Behavior", nullptr),
		{ _field_real, "ai charge repeat timeout", "(All vehicles) Time delay between vehicle charges" },
		{ _field_real, "DEPRECATED (ai strafing abort range)", "(All vehicles) Distance at which charge will be aborted", FIELD_FLAG_UNKNOWN0 },
		{ _field_real, "ai avoidance distance", "(Banshee, Sentinels, Dropships) Look-ahead distance for obstacle avoidance", "world units" },
		{ _field_real, "ai charge look-ahead time", "(All vehicles) In deciding when to abort vehicle charge, look ahead these many seconds to predict time of contact" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_angle, "ai allowable aim deviation angle" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "ai cover min distance", "(All vehicles) When executing vehicle-cover, minimum distance from the target to flee to" },
		{ _field_real, "ai cover time", "(All vehicles) How long to stay away from the target" },
		FIELD_USELESS_PAD("value", 20),
		{ _field_real, "ai charge consider distance", "Consider charging the target when it is within this range (0 = infinite distance)" },
		{ _field_real, "ai charge abort distance", "Abort the charge when the target get more than this far away (0 = never abort)" },
		
		{ _field_terminator }
	};

	TAG_REFERENCE(unit_group_reference$2, UNIT_TAG, _tag_reference_flag_dont_resolve_in_editor);

	STRINGS(unnamed_enum$151)
	{
		"passengers adopt original squad"
	};
	STRING_LIST(unnamed_enum$151, unnamed_enum$151_strings, _countof(unnamed_enum$151_strings));

	TAG_STRUCT(
		vehicle_suspension_block_struct_definition,
		"vehicle_suspension_block",
		"vehicle_suspension_block_struct_definition",
		"s_vehicle_suspension",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "label" },
		{ _field_struct, "animation", &animation_index_struct_struct_definition, _field_id_ANII },
		{ _field_string_id, "marker name" },
		{ _field_real, "mass point offset" },
		{ _field_real, "full extension ground_depth" },
		{ _field_real, "full compression ground_depth" },
		FIELD_EXPLANATION("Destroyed Suspension", "Only Necessary for suspensions with a destroyed state"),
		{ _field_string_id, "region name" },
		{ _field_real, "destroyed mass point offset" },
		{ _field_real, "destroyed full extension ground_depth" },
		{ _field_real, "destroyed full compression ground_depth" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		vehicles_block_struct_definition,
		"vehicles_block",
		"vehicles_block_struct_definition",
		"s_game_globals_tag_reference$3",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "vehicle", &vehicle_group_reference$2 },
		{ _field_terminator }
	};

	TAG_REFERENCE(vehicle_group_reference$2, VEHICLE_TAG);

	TAG_STRUCT(
		vehicles_block_struct_definition$2,
		"vehicles_block",
		"vehicles_block_struct_definition",
		"s_tag_reference$7",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "vehicle", &vehicle_group_reference$3 },
		{ _field_terminator }
	};

	TAG_REFERENCE(vehicle_group_reference$3, VEHICLE_TAG);

	TAG_STRUCT(
		vertex_shader_block_struct_definition,
		"vertex_shader_block",
		"vertex_shader_block_struct_definition",
		"s_vertex_shader_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "geometry classifications dx11", &vertex_shader_classification_block },
		{ _field_block, "geometry classifications dx9", &vertex_shader_classification_block },
		{ _field_block, "geometry classifications xbox1", &vertex_shader_classification_block },
		{ _field_long_integer, "output swizzles dx11" },
		{ _field_long_integer, "output swizzles dx9" },
		{ _field_long_integer, "output swizzles xbox1" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		vertex_shader_classification_block_struct_definition,
		"vertex_shader_classification_block",
		"vertex_shader_classification_block_struct_definition",
		"s_vertex_shader_classification",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_pointer, "value" },
		{ _field_data, "compiled shader", &compiled_shader_block },
		{ _field_data, "code", &code_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		vertex_shader_constant_block_struct_definition,
		"vertex_shader_constant_block",
		"vertex_shader_constant_block_struct_definition",
		"s_vertex_shader_constant",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_char_integer, "register index" },
		{ _field_char_integer, "parameter index" },
		{ _field_char_integer, "destination mask" },
		{ _field_char_integer, "scale by texture stage" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		vertex_shader_reference_block_struct_definition,
		"vertex_shader_reference_block",
		"vertex_shader_reference_block_struct_definition",
		"s_vertex_shader_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "vertex shader", &vertex_shader_group_reference },
		{ _field_terminator }
	};

	TAG_REFERENCE(vertex_shader_group_reference, VERTEX_SHADER_TAG);

	TAG_STRUCT(
		vertices_block_struct_definition,
		"vertices_block",
		"vertices_block_struct_definition",
		"s_collision_vertex",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY,
		4)
	{
		{ _field_real_point_3d, "point" },
		{ _field_short_integer, "first edge" },
		FIELD_PAD("value", 2),
		{ _field_terminator }
	};

	TAG_STRUCT(
		vibration_definition_struct_struct_definition,
		"vibration_definition_struct",
		"vibration_definition_struct_struct_definition",
		"s_vibration_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("low frequency vibration", nullptr),
		{ _field_struct, "low frequency vibration", &vibration_frequency_definition_struct_struct_definition, _field_id_RFDS },
		FIELD_EXPLANATION("high frequency vibration", nullptr),
		{ _field_struct, "high frequency vibration", &vibration_frequency_definition_struct_struct_definition, _field_id_RFDS },
		FIELD_USELESS_PAD("value", 16),
		{ _field_terminator }
	};

	TAG_STRUCT(
		vibration_frequency_definition_struct_struct_definition,
		"vibration_frequency_definition_struct",
		"vibration_frequency_definition_struct_struct_definition",
		"s_vibration_frequency_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real, "duration", nullptr, "seconds" },
		FIELD_CUSTOM("whore function", _field_id_function_editor),
		{ _field_struct, "dirty whore", &function_definition_struct_definition, _field_id_MAPP }, // structure_version:1
		FIELD_USELESS_PAD("value", 16),
		{ _field_terminator }
	};

	TAG_STRUCT(
		visibility_mopp_reorder_table_block_struct_definition,
		"visibility_mopp_reorder_table_block",
		"visibility_mopp_reorder_table_block_struct_definition",
		"s_word$11",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "mopp leaf index" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		visibility_struct_struct_definition,
		"visibility_struct",
		"visibility_struct_struct_definition",
		"s_structure_precomputed_lighting_visiblity",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_integer, "projection count" },
		{ _field_short_integer, "cluster count" },
		{ _field_short_integer, "volume count" },
		FIELD_PAD("value", 2),
		{ _field_data, "projections", &projection_tag_data_definition },
		{ _field_data, "visibility clusters", &visibility_clusters_tag_data_definition },
		{ _field_data, "cluster remap table", &cluster_remap_table_tag_data_definition },
		{ _field_data, "visibility volumes", &visibility_volumes_table_tag_data_definition },
		{ _field_terminator }
	};

	TAG_STRUCT(
		vocalization_patterns_block_struct_definition,
		"vocalization_patterns_block",
		"vocalization_patterns_block_struct_definition",
		"s_vocalization_pattern",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "dialogue type", &unnamed_enum$54 },
		{ _field_short_integer, "vocalization index" },
		{ _field_string_id, "vocalization name", _field_id_sted },
		{ _field_short_enum, "speaker type", &unnamed_enum$55 },
		{ _field_word_flags, "flags", &unnamed_enum$56 },
		{ _field_short_enum, "listener/target", "who/what am I speaking to/of?", &unnamed_enum$55 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 4),
		{ _field_short_enum, "hostility", "The relationship between the subject and the cause", &unnamed_enum$57 },
		{ _field_short_enum, "damage type", &unnamed_enum$58 },
		{ _field_short_enum, "danger level", "Speaker must have danger level of at least this much", &unnamed_enum$59 },
		{ _field_short_enum, "attitude", &unnamed_enum$60 },
		FIELD_PAD("value", 4),
		{ _field_short_enum, "subject actor type", &unnamed_enum$61 },
		{ _field_short_enum, "cause actor type", &unnamed_enum$61 },
		{ _field_short_enum, "cause type", &unnamed_enum$62 },
		{ _field_short_enum, "subject type", &unnamed_enum$62 },
		{ _field_string_id, "cause ai type name" },
		{ _field_short_enum, "spatial relation", "with respect to the subject, the cause is ...", &unnamed_enum$63 },
		FIELD_PAD("value", 2),
		{ _field_string_id, "subject ai type name" },
		FIELD_PAD("value", 8),
		{ _field_long_flags, "Conditions", &unnamed_enum$64 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$54)
	{
		"death",
		"unused",
		"unused",
		"damage",
		"damage unused 1",
		"damage unused 2",
		"sighted_new",
		"sighted_new major",
		"unused",
		"sighted_old",
		"sighted_first",
		"sighted_special",
		"unused",
		"heard_new",
		"unused",
		"heard_old",
		"unused",
		"unused",
		"unused",
		"acknowledge_multiple",
		"unused",
		"unused",
		"unused",
		"found_unit",
		"found_unit_presearch",
		"found_unit_pursuit",
		"found_unit_self_preserving",
		"found_unit_retreating",
		"throwing_grenade",
		"noticed_grenade",
		"fighting",
		"charging",
		"suppressing_fire",
		"grenade_uncover",
		"unused",
		"unused",
		"dive",
		"evade",
		"avoid",
		"surprised",
		"unused",
		"unused",
		"presearch",
		"presearch_start",
		"search",
		"search_start",
		"investigate_failed",
		"uncover_failed",
		"pursuit_failed",
		"investigate_start",
		"abandoned_search_space",
		"abandoned_search_time",
		"presearch_failed",
		"abandoned_search_restricted",
		"investigate_pursuit_start",
		"postcombat_inspect_body",
		"vehicle_slow_down",
		"vehicle_get_in",
		"idle",
		"taunt",
		"taunt_reply",
		"retreat",
		"retreat_from_scary_target",
		"retreat_from_dead_leader",
		"retreat_from_proximity",
		"retreat_from_low_shield",
		"flee",
		"cowering",
		"unused",
		"unused",
		"unused",
		"cover",
		"covered",
		"unused",
		"unused",
		"unused",
		"pursuit_start",
		"pursuit_sync_start",
		"pursuit_sync_join",
		"pursuit_sync_quorum",
		"melee",
		"unused",
		"unused",
		"unused",
		"vehicle_falling",
		"vehicle_woohoo",
		"vehicle_scared",
		"vehicle_crazy",
		"unused",
		"unused",
		"leap",
		"unused",
		"unused",
		"postcombat_win",
		"postcombat_lose",
		"postcombat_neutral",
		"shoot_corpse",
		"postcombat start",
		"inspect_body_start",
		"postcombat_status",
		"unused",
		"vehicle_entry_start_driver",
		"vehicle_enter",
		"vehicle_entry_start_gun",
		"vehicle_entry_start_passenger",
		"vehicle_exit",
		"evict_driver",
		"evict_gunner",
		"evict_passenger",
		"unused",
		"unused",
		"new_order_advance",
		"new_order_charge",
		"new_order_fallback",
		"new_order_retreat",
		"new_order_moveon",
		"new_order_arrival",
		"new_order_entervcl",
		"new_order_exitvcl",
		"new_order_fllplr",
		"new_order_leaveplr",
		"new_order_support",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"emerge",
		"unused",
		"unused",
		"unused",
		"curse",
		"unused",
		"unused",
		"unused",
		"threaten",
		"unused",
		"unused",
		"unused",
		"cover_friend",
		"unused",
		"unused",
		"unused",
		"strike",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"unused",
		"gloat",
		"unused",
		"unused",
		"unused",
		"greet",
		"unused",
		"unused",
		"unused",
		"unused",
		"player_look",
		"player_look_longtime",
		"unused",
		"unused",
		"unused",
		"unused",
		"panic_grenade_attached",
		"unused",
		"unused",
		"unused",
		"unused",
		"help response",
		"unused",
		"unused",
		"unused",
		"remind",
		"unused",
		"unused",
		"unused",
		"unused",
		"weapon_trade_better",
		"weapon_trade_worse",
		"weapon_reade_equal",
		"unused",
		"unused",
		"unused",
		"betray",
		"unused",
		"forgive",
		"unused",
		"reanimate",
		"unused"
	};
	STRING_LIST(unnamed_enum$54, unnamed_enum$54_strings, _countof(unnamed_enum$54_strings));

	STRINGS(unnamed_enum$55)
	{
		"subject",
		"cause",
		"friend",
		"target",
		"enemy",
		"vehicle",
		"joint",
		"squad",
		"leader",
		"joint_leader",
		"clump",
		"peer"
	};
	STRING_LIST(unnamed_enum$55, unnamed_enum$55_strings, _countof(unnamed_enum$55_strings));

	STRINGS(unnamed_enum$56)
	{
		"subject visible",
		"cause visible",
		"friends present",
		"subject is speaker\'s target",
		"cause is speaker\'s target",
		"cause is player or speaker is player ally",
		"speaker is searching",
		"speaker is following player",
		"cause is primary player ally"
	};
	STRING_LIST(unnamed_enum$56, unnamed_enum$56_strings, _countof(unnamed_enum$56_strings));

	STRINGS(unnamed_enum$57)
	{
		"NONE",
		"self",
		"neutral",
		"friend",
		"enemy",
		"traitor"
	};
	STRING_LIST(unnamed_enum$57, unnamed_enum$57_strings, _countof(unnamed_enum$57_strings));

	STRINGS(unnamed_enum$58)
	{
		"NONE",
		"falling",
		"bullet",
		"grenade",
		"explosive",
		"sniper",
		"melee",
		"flame",
		"mounted weapon",
		"vehicle",
		"plasma",
		"needle",
		"shotgun"
	};
	STRING_LIST(unnamed_enum$58, unnamed_enum$58_strings, _countof(unnamed_enum$58_strings));

	STRINGS(unnamed_enum$59)
	{
		"NONE",
		"broadly facing",
		"shooting near",
		"shooting at",
		"extremely close",
		"shield damage",
		"shield extended damage",
		"body damage",
		"body extended damage"
	};
	STRING_LIST(unnamed_enum$59, unnamed_enum$59_strings, _countof(unnamed_enum$59_strings));

	STRINGS(unnamed_enum$61)
	{
		"NONE",
		"elite",
		"jackal",
		"grunt",
		"hunter",
		"engineer",
		"assassin",
		"player",
		"marine",
		"crew",
		"combat form",
		"infection form",
		"carrier form",
		"monitor",
		"sentinel",
		"none",
		"mounted weapon",
		"brute",
		"prophet",
		"bugger",
		"juggernaut"
	};
	STRING_LIST(unnamed_enum$61, unnamed_enum$61_strings, _countof(unnamed_enum$61_strings));

	STRINGS(unnamed_enum$62)
	{
		"NONE",
		"player",
		"actor",
		"biped",
		"body",
		"vehicle",
		"projectile",
		"actor or player",
		"turret",
		"unit in vehicle",
		"unit in turret",
		"driver",
		"gunner",
		"passenger",
		"postcombat",
		"postcombat_won",
		"postcombat_lost",
		"player masterchief",
		"player dervish",
		"heretic",
		"majorly scary",
		"last man in vehicle",
		"male",
		"female",
		"grenade"
	};
	STRING_LIST(unnamed_enum$62, unnamed_enum$62_strings, _countof(unnamed_enum$62_strings));

	STRINGS(unnamed_enum$63)
	{
		"none",
		"very near (<1wu)",
		"near (<2.5wus)",
		"medium range (<5wus)",
		"far (<10wus)",
		"very far (>10wus)",
		"in front of",
		"behind",
		"above (delta>1 wu)",
		"below (delta>1 wu)"
	};
	STRING_LIST(unnamed_enum$63, unnamed_enum$63_strings, _countof(unnamed_enum$63_strings));

	STRINGS(unnamed_enum$64)
	{
		"asleep",
		"idle",
		"alert",
		"active",
		"uninspected orphan",
		"definite orphan",
		"certain orphan",
		"visible enemy",
		"clear los enemy",
		"dangerous enemy",
		"no vehicle",
		"vehicle driver",
		"vehicle passenger"
	};
	STRING_LIST(unnamed_enum$64, unnamed_enum$64_strings, _countof(unnamed_enum$64_strings));

	TAG_STRUCT(
		water_geometry_section_block_struct_definition,
		"water_geometry_section_block",
		"water_geometry_section_block_struct_definition",
		"s_water_geometry_data",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_struct, "section", &geometry_section_fieldset_new_struct_definition, _field_id_SECT }, // structure_version:1
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		weapon_ammunition_object_struct_definition,
		"weapon_ammunition_object",
		"weapon_ammunition_object_struct_definition",
		"s_weapon_ammunition_object",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 3 },
		{ _field_short_integer, "rounds" },
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "equipment", &equipment_group_reference$2 },
		
		{ _struct_version_mode_equal, 0, 3 },
		{ _field_short_integer, "rounds" },
		FIELD_PAD("value", 10),
		{ _field_tag_reference, "equipment", &equipment_group_reference$2 },
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		weapon_barrel_damage_effect_struct_definition,
		"weapon_barrel_damage_effect",
		"weapon_barrel_damage_effect_struct_definition",
		"s_tag_reference$16",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 1 },
		{ _field_tag_reference, "damage effect", &damage_effect_group_reference },
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		weapon_barrel_definition_struct_definition,
		"weapon_barrel_definition",
		"weapon_barrel_definition_struct_definition",
		"s_weapon_barrel_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 2, 55 },
		{ _field_long_flags, "flags", &unnamed_enum$529 },
		FIELD_EXPLANATION("firing", nullptr),
		{ _field_real_bounds, "rounds per second", "the number of firing effects created per second" },
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final rounds per second", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return from its final rounds per second to its initial", "seconds" },
		{ _field_real_fraction, "barrel spin scale", "scale the barrel spin speed by this amount" },
		{ _field_real_fraction, "blurred rate of fire", "a percentage between 0 and 1 which controls how soon in its firing animation the weapon blurs" },
		{ _field_short_integer_bounds, "shots per fire", "allows designer caps to the shots you can fire from one firing action" },
		{ _field_real, "fire recovery time", "how long after a set of shots it takes before the barrel can fire again", "seconds" },
		{ _field_real_fraction, "soft recovery fraction", "how much of the recovery allows shots to be queued" },
		{ _field_short_block_index, "magazine", "the magazine from which this trigger draws its ammunition" },
		{ _field_short_integer, "rounds per shot", "the number of rounds expended to create a single firing effect" },
		{ _field_short_integer, "minimum rounds loaded", "the minimum number of rounds necessary to fire the weapon" },
		{ _field_short_integer, "rounds between tracers", "the number of non-tracer rounds fired between tracers" },
		{ _field_string_id, "optional barrel marker name" },
		FIELD_EXPLANATION("prediction properties", "what the behavior of this barrel is in a predicted network game"),
		{ _field_short_enum, "prediction type", &unnamed_enum$530 },
		{ _field_short_enum, "firing noise", "how loud this weapon appears to the AI", &unnamed_enum$108 },
		FIELD_EXPLANATION("error", nullptr),
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final error", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial error", "seconds" },
		{ _field_real_bounds, "damage error", "the range of angles (in degrees) that a damaged weapon will skew fire" },
		FIELD_EXPLANATION("dual weapon error", nullptr),
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final error", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial error", "seconds" },
		FIELD_PAD("value", 8),
		{ _field_angle, "minimum error", nullptr, "degrees" },
		{ _field_angle_bounds, "error angle", nullptr, "degrees" },
		{ _field_real_fraction, "dual wield damage scale" },
		FIELD_EXPLANATION("projectile", nullptr),
		{ _field_short_enum, "distribution function", &unnamed_enum$531 },
		{ _field_short_integer, "projectiles per shot" },
		{ _field_real, "distribution angle", nullptr, "degrees" },
		{ _field_angle, "minimum error", nullptr, "degrees" },
		{ _field_angle_bounds, "error angle", nullptr, "degrees" },
		{ _field_real_point_3d, "first person offset", "+x is forward, +z is up, +y is left", "world units" },
		{ _field_char_enum, "damage effect reporting type", &unnamed_enum$228 },
		FIELD_PAD("value", 3),
		{ _field_tag_reference, "projectile", &projectile_group_reference },
		{ _field_struct, "eh", &weapon_barrel_damage_effect_struct_definition, _field_id_wbde }, // structure_version:1
		FIELD_EXPLANATION("misc", nullptr),
		{ _field_real, "ejection port recovery time", "the amount of time (in seconds) it takes for the ejection port to transition from 1.0 (open) to 0.0 (closed) after a shot has been fired" },
		{ _field_real, "illumination recovery time", "the amount of time (in seconds) it takes the illumination function to transition from 1.0 (bright) to 0.0 (dark) after a shot has been fired" },
		{ _field_real_fraction, "heat generated per round", "the amount of heat generated each time the trigger is fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "age generated per round", "the amount the weapon ages each time the trigger is fired", nullptr, "[0,1]" },
		{ _field_real, "overload time", "the next trigger fires this often while holding down this trigger", "seconds" },
		FIELD_EXPLANATION("angle change (recoil)", nullptr),
		{ _field_angle_bounds, "angle change per shot", "angle change per shot of the weapon during firing" },
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final angle change per shot", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial angle change per shot", "seconds" },
		{ _field_short_enum, "angle change function", "function used to scale between initial and final angle change per shot", &unnamed_enum$396 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 8),
		FIELD_PAD("value", 24),
		{ _field_block, "firing effects", "firing effects determine what happens when this trigger is fired", &barrel_firing_effect_block },
		
		{ _struct_version_mode_equal, 1, 54 },
		{ _field_long_flags, "flags", &unnamed_enum$529 },
		FIELD_EXPLANATION("firing", nullptr),
		{ _field_real_bounds, "rounds per second", "the number of firing effects created per second" },
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final rounds per second", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return from its final rounds per second to its initial", "seconds" },
		{ _field_real_fraction, "blurred rate of fire", "a percentage between 0 and 1 which controls how soon in its firing animation the weapon blurs" },
		{ _field_short_integer_bounds, "shots per fire", "allows designer caps to the shots you can fire from one firing action" },
		{ _field_real, "fire recovery time", "how long after a set of shots it takes before the barrel can fire again", "seconds" },
		{ _field_real_fraction, "soft recovery fraction", "how much of the recovery allows shots to be queued" },
		{ _field_short_block_index, "magazine", "the magazine from which this trigger draws its ammunition" },
		{ _field_short_integer, "rounds per shot", "the number of rounds expended to create a single firing effect" },
		{ _field_short_integer, "minimum rounds loaded", "the minimum number of rounds necessary to fire the weapon" },
		{ _field_short_integer, "rounds between tracers", "the number of non-tracer rounds fired between tracers" },
		{ _field_string_id, "optional barrel marker name" },
		FIELD_EXPLANATION("prediction properties", "what the behavior of this barrel is in a predicted network game"),
		{ _field_short_enum, "prediction type", &unnamed_enum$530 },
		{ _field_short_enum, "firing noise", "how loud this weapon appears to the AI", &unnamed_enum$108 },
		FIELD_EXPLANATION("error", nullptr),
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final error", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial error", "seconds" },
		{ _field_real_bounds, "damage error", "the range of angles (in degrees) that a damaged weapon will skew fire" },
		FIELD_EXPLANATION("dual weapon error", nullptr),
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final error", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial error", "seconds" },
		FIELD_PAD("value", 8),
		{ _field_angle, "minimum error", nullptr, "degrees" },
		{ _field_angle_bounds, "error angle", nullptr, "degrees" },
		{ _field_real_fraction, "dual wield damage scale" },
		FIELD_EXPLANATION("projectile", nullptr),
		{ _field_short_enum, "distribution function", &unnamed_enum$531 },
		{ _field_short_integer, "projectiles per shot" },
		{ _field_real, "distribution angle", nullptr, "degrees" },
		{ _field_angle, "minimum error", nullptr, "degrees" },
		{ _field_angle_bounds, "error angle", nullptr, "degrees" },
		{ _field_real_point_3d, "first person offset", "+x is forward, +z is up, +y is left", "world units" },
		{ _field_char_enum, "damage effect reporting type", &unnamed_enum$228 },
		FIELD_PAD("value", 3),
		{ _field_tag_reference, "projectile", &projectile_group_reference },
		{ _field_struct, "eh", &weapon_barrel_damage_effect_struct_definition, _field_id_wbde }, // structure_version:1
		FIELD_EXPLANATION("misc", nullptr),
		{ _field_real, "ejection port recovery time", "the amount of time (in seconds) it takes for the ejection port to transition from 1.0 (open) to 0.0 (closed) after a shot has been fired" },
		{ _field_real, "illumination recovery time", "the amount of time (in seconds) it takes the illumination function to transition from 1.0 (bright) to 0.0 (dark) after a shot has been fired" },
		{ _field_real_fraction, "heat generated per round", "the amount of heat generated each time the trigger is fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "age generated per round", "the amount the weapon ages each time the trigger is fired", nullptr, "[0,1]" },
		{ _field_real, "overload time", "the next trigger fires this often while holding down this trigger", "seconds" },
		FIELD_EXPLANATION("angle change (recoil)", nullptr),
		{ _field_angle_bounds, "angle change per shot", "angle change per shot of the weapon during firing" },
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final angle change per shot", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial angle change per shot", "seconds" },
		{ _field_short_enum, "angle change function", "function used to scale between initial and final angle change per shot", &unnamed_enum$396 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 8),
		FIELD_PAD("value", 24),
		{ _field_block, "firing effects", "firing effects determine what happens when this trigger is fired", &barrel_firing_effect_block },
		
		{ _struct_version_mode_equal, 0, 55 },
		{ _field_long_flags, "flags", &unnamed_enum$529 },
		{ _field_real_bounds, "rounds per second", "the number of firing effects created per second" },
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final rounds per second", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return from its final rounds per second to its initial", "seconds" },
		{ _field_real_fraction, "blurred rate of fire", "a percentage between 0 and 1 which controls how soon in its firing animation the weapon blurs" },
		{ _field_short_integer_bounds, "shots per fire", "allows designer caps to the shots you can fire from one firing action" },
		{ _field_real, "fire recovery time", "how long after a set of shots it takes before the barrel can fire again", "seconds" },
		{ _field_real_fraction, "soft recovery fraction", "how much of the recovery allows shots to be queued" },
		{ _field_short_block_index, "magazine", "the magazine from which this trigger draws its ammunition" },
		{ _field_short_integer, "rounds per shot", "the number of rounds expended to create a single firing effect" },
		{ _field_short_integer, "minimum rounds loaded", "the minimum number of rounds necessary to fire the weapon" },
		{ _field_short_integer, "rounds between tracers", "the number of non-tracer rounds fired between tracers" },
		{ _field_string_id, "optional barrel marker name" },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "firing noise", "how loud this weapon appears to the AI", &unnamed_enum$108 },
		FIELD_PAD("value", 8),
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final error", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial error", "seconds" },
		{ _field_real_bounds, "damage error", "the range of angles (in degrees) that a damaged weapon will skew fire" },
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final error", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial error", "seconds" },
		FIELD_PAD("value", 8),
		{ _field_angle, "minimum error", nullptr, "degrees" },
		{ _field_angle_bounds, "error angle", nullptr, "degrees" },
		{ _field_real_fraction, "dual wield damage scale" },
		FIELD_PAD("value", 20),
		{ _field_short_enum, "distribution function", &unnamed_enum$531 },
		{ _field_short_integer, "projectiles per shot" },
		{ _field_real, "distribution angle", nullptr, "degrees" },
		FIELD_PAD("value", 4),
		{ _field_angle, "minimum error", nullptr, "degrees" },
		{ _field_angle_bounds, "error angle", nullptr, "degrees" },
		{ _field_real_point_3d, "first person offset", "+x is forward, +z is up, +y is left", "world units" },
		{ _field_char_enum, "damage effect reporting type", &unnamed_enum$228 },
		FIELD_PAD("value", 3),
		{ _field_tag_reference, "projectile", &projectile_group_reference },
		{ _field_struct, "eh", &weapon_barrel_damage_effect_struct_definition, _field_id_wbde }, // structure_version:1
		{ _field_real, "ejection port recovery time", "the amount of time (in seconds) it takes for the ejection port to transition from 1.0 (open) to 0.0 (closed) after a shot has been fired" },
		{ _field_real, "illumination recovery time", "the amount of time (in seconds) it takes the illumination function to transition from 1.0 (bright) to 0.0 (dark) after a shot has been fired" },
		FIELD_PAD("value", 12),
		{ _field_real_fraction, "heat generated per round", "the amount of heat generated each time the trigger is fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "age generated per round", "the amount the weapon ages each time the trigger is fired", nullptr, "[0,1]" },
		FIELD_PAD("value", 4),
		{ _field_real, "overload time", "the next trigger fires this often while holding down this trigger", "seconds" },
		FIELD_PAD("value", 8),
		{ _field_angle_bounds, "angle change per shot", "angle change per shot of the weapon during firing" },
		{ _field_real, "acceleration time", "the continuous firing time it takes for the weapon to achieve its final angle change per shot", "seconds" },
		{ _field_real, "deceleration time", "the continuous idle time it takes for the weapon to return to its initial angle change per shot", "seconds" },
		{ _field_short_enum, "angle change function", "function used to scale between initial and final angle change per shot", &unnamed_enum$396 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 8),
		{ _field_short_enum, "prediction type", &unnamed_enum$530 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 24),
		{ _field_block, "firing effects", "firing effects determine what happens when this trigger is fired", &barrel_firing_effect_block },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$529)
	{
		"tracks fired projectile#poo poo ca ca pee pee",
		"random firing effects#rather than being chosen sequentially, firing effects are picked randomly",
		"can fire with partial ammo#allows a weapon to be fired as long as there is a non-zero amount of ammunition loaded",
		"projectiles use weapon origin#instead of coming out of the magic first person camera origin, the projectiles for this weapon actually come out of the gun",
		"ejects during chamber#this trigger\'s ejection port is started during the key frame of its chamber animation",
		"use error when unzoomed",
		"projectile vector cannot be adjusted#projectiles fired by this weapon cannot have their direction adjusted by the AI to hit the target",
		"projectiles have identical error",
		"projectiles fire parallel#If there are multiple guns for this trigger, the projectiles emerge in parallel beams (rather than independant aiming)",
		"cant fire when others firing",
		"cant fire when others recovering",
		"don\'t clear fire bit after recovering",
		"stagger fire across multiple markers",
		"fires locked projectiles",
		"can fire at maximum age"
	};
	STRING_LIST(unnamed_enum$529, unnamed_enum$529_strings, _countof(unnamed_enum$529_strings));

	STRINGS(unnamed_enum$530)
	{
		"none",
		"continuous",
		"instant"
	};
	STRING_LIST(unnamed_enum$530, unnamed_enum$530_strings, _countof(unnamed_enum$530_strings));

	STRINGS(unnamed_enum$531)
	{
		"point",
		"horizontal fan"
	};
	STRING_LIST(unnamed_enum$531, unnamed_enum$531_strings, _countof(unnamed_enum$531_strings));

	TAG_STRUCT(
		weapon_class_block_struct_definition,
		"weapon_class_block",
		"weapon_class_block_struct_definition",
		"s_weapon_class",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "label" },
		{ _field_block, "weapon type", &weapon_type_block },
		{ _field_block, "weapon ik", &animation_ik_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		weapon_class_lookup_block_struct_definition,
		"weapon_class_lookup_block",
		"weapon_class_lookup_block_struct_definition",
		"s_weapon_class_listing",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "weapon name" },
		{ _field_string_id, "weapon class" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		weapon_first_person_interface_block_struct_definition,
		"weapon_first_person_interface_block",
		"weapon_first_person_interface_block_struct_definition",
		"s_weapon_first_person_interface_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "first person model", &render_model_group_reference$5 },
		{ _field_tag_reference, "first person animations", &model_animation_graph_group_reference$3 },
		{ _field_terminator }
	};

	TAG_REFERENCE(render_model_group_reference$5, RENDER_MODEL_TAG, _tag_reference_flag_dont_resolve_in_editor);

	TAG_REFERENCE(model_animation_graph_group_reference$3, MODEL_ANIMATION_GRAPH_TAG, _tag_reference_flag_dont_resolve_in_editor);

	TAG_STRUCT(
		weapon_hud_crosshair_block_struct_definition,
		"weapon_hud_crosshair_block",
		"weapon_hud_crosshair_block_struct_definition",
		"s_weapon_hud_crosshairs_element",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "crosshair type", &unnamed_enum$557 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "can use on map type", &unnamed_enum$555 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 28),
		{ _field_tag_reference, "Crosshair bitmap", &bitmap_group_reference },
		{ _field_block, "Crosshair overlays", &weapon_hud_crosshair_item_block },
		FIELD_PAD("value", 40),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$557)
	{
		"aim",
		"zoom",
		"charge",
		"should reload",
		"flash heat",
		"flash inventory ammo",
		"flash battery",
		"reload/overheat",
		"flash when firing and no ammo",
		"flash when throwing and no grenade",
		"low ammo and none left to reload",
		"should reload secondary trigger",
		"flash secondary inventory ammo",
		"flash secondary reload",
		"flash when firing secondary trigger with no ammo",
		"low secondary ammo and none left to reload",
		"primary trigger ready",
		"secondary trigger ready",
		"flash when firing with depleted battery"
	};
	STRING_LIST(unnamed_enum$557, unnamed_enum$557_strings, _countof(unnamed_enum$557_strings));

	STRINGS(unnamed_enum$555)
	{
		"any",
		"solo",
		"multiplayer"
	};
	STRING_LIST(unnamed_enum$555, unnamed_enum$555_strings, _countof(unnamed_enum$555_strings));

	TAG_STRUCT(
		weapon_hud_crosshair_item_block_struct_definition,
		"weapon_hud_crosshair_item_block",
		"weapon_hud_crosshair_item_block_struct_definition",
		"s_weapon_hud_crosshair_item",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "frame rate" },
		{ _field_short_integer, "sequence index" },
		{ _field_long_flags, "flags", &unnamed_enum$558 },
		FIELD_PAD("value", 32),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$558)
	{
		"flashes when active",
		"not a sprite",
		"show only when zoomed",
		"show sniper data",
		"hide area outside reticle",
		"one zoom level",
		"don\'t show when zoomed"
	};
	STRING_LIST(unnamed_enum$558, unnamed_enum$558_strings, _countof(unnamed_enum$558_strings));

	TAG_STRUCT(
		weapon_hud_interface_block_struct_definition,
		"weapon_hud_interface_block",
		"weapon_hud_interface_block_struct_definition",
		"s_weapon_hud_interface_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "child hud", &weapon_hud_interface_group_reference },
		FIELD_EXPLANATION("Flash cutoffs", nullptr),
		{ _field_word_flags, "flags", &unnamed_enum$553 },
		FIELD_PAD("value", 2),
		{ _field_short_integer, "inventory ammo cutoff" },
		{ _field_short_integer, "loaded ammo cutoff" },
		{ _field_short_integer, "heat cutoff" },
		{ _field_short_integer, "age cutoff" },
		FIELD_PAD("value", 32),
		FIELD_EXPLANATION("Weapon hud screen alignment", nullptr),
		{ _field_short_enum, "anchor", &unnamed_enum$206 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 32),
		{ _field_block, "static elements", &weapon_hud_static_block },
		{ _field_block, "meter elements", &weapon_hud_meter_block },
		{ _field_block, "number elements", &weapon_hud_number_block },
		FIELD_EXPLANATION("Crosshairs", "Crosshairs always go in the center of the screen.\nCrosshairs can be attached to one of four different states:\n\n* Aim: Default crosshair. Frame 0 is the default state, frame 1 is the auto-aim state (frame rate ignored)\n* Zoom: Zoom overlay. Each zoom level has a corresponding frame (frame rate ignored)\n* Charge: Charging overlay. If you wish to display an animation for charging, put it here.\n* Flash: Similar to charging, but for low ammo/batter/heat states\n* Reload/Overheat: Similar to charging, but for reloading/overheating\n"),
		{ _field_block, "crosshairs", &weapon_hud_crosshair_block },
		{ _field_block, "overlay elements", &weapon_hud_overlays_block },
		FIELD_PAD("value", 4),
		{ _field_block, "value", &g_null_block },
		{ _field_block, "screen effect", &global_hud_screen_effect_definition_block },
		FIELD_PAD("value", 132),
		FIELD_EXPLANATION("Messaging information", nullptr),
		{ _field_short_integer, "sequence index", "sequence index into the global hud icon bitmap" },
		{ _field_short_integer, "width offset", "extra spacing beyond bitmap width for text alignment" },
		{ _field_point_2d, "offset from reference corner" },
		{ _field_argb_color, "override icon color" },
		{ _field_char_integer, "frame rate" },
		{ _field_byte_flags, "flags", &unnamed_enum$219 },
		{ _field_short_integer, "text index" },
		FIELD_PAD("value", 48),
		{ _field_terminator }
	};

	TAG_REFERENCE(weapon_hud_interface_group_reference, WEAPON_HUD_INTERFACE_TAG);

	STRINGS(unnamed_enum$553)
	{
		"use parent hud flashing parameters"
	};
	STRING_LIST(unnamed_enum$553, unnamed_enum$553_strings, _countof(unnamed_enum$553_strings));

	TAG_STRUCT(
		weapon_hud_meter_block_struct_definition,
		"weapon_hud_meter_block",
		"weapon_hud_meter_block_struct_definition",
		"s_weapon_hud_meter_element",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "state attached to", &unnamed_enum$554 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "can use on map type", &unnamed_enum$555 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 28),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "meter bitmap", &bitmap_group_reference },
		{ _field_rgb_color, "color at meter minimum" },
		{ _field_rgb_color, "color at meter maximum" },
		{ _field_rgb_color, "flash color" },
		{ _field_argb_color, "empty color" },
		{ _field_byte_flags, "flags", &unnamed_enum$499 },
		{ _field_char_integer, "minumum meter value" },
		{ _field_short_integer, "sequence index" },
		{ _field_char_integer, "alpha multiplier" },
		{ _field_char_integer, "alpha bias" },
		{ _field_short_integer, "value scale", "used for non-integral values, i.e. health and shields" },
		{ _field_real, "opacity" },
		{ _field_real, "translucency" },
		{ _field_argb_color, "disabled color" },
		{ _field_block, "value", &g_null_block },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 40),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$554)
	{
		"inventory ammo",
		"loaded ammo",
		"heat",
		"age",
		"secondary weapon inventory ammo",
		"secondary weapon loaded ammo",
		"distance to target",
		"elevation to target"
	};
	STRING_LIST(unnamed_enum$554, unnamed_enum$554_strings, _countof(unnamed_enum$554_strings));

	TAG_STRUCT(
		weapon_hud_number_block_struct_definition,
		"weapon_hud_number_block",
		"weapon_hud_number_block_struct_definition",
		"s_weapon_hud_number_element",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "state attached to", &unnamed_enum$554 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "can use on map type", &unnamed_enum$555 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 28),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_char_integer, "maximum number of digits" },
		{ _field_byte_flags, "flags", &unnamed_enum$215 },
		{ _field_char_integer, "number of fractional digits" },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 12),
		{ _field_word_flags, "weapon specific flags", &unnamed_enum$556 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 36),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$556)
	{
		"divide number by clip size"
	};
	STRING_LIST(unnamed_enum$556, unnamed_enum$556_strings, _countof(unnamed_enum$556_strings));

	TAG_STRUCT(
		weapon_hud_overlay_block_struct_definition,
		"weapon_hud_overlay_block",
		"weapon_hud_overlay_block_struct_definition",
		"s_weapon_hud_overlay_item$2",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "frame rate" },
		FIELD_PAD("value", 2),
		{ _field_short_integer, "sequence index" },
		{ _field_word_flags, "type", &unnamed_enum$559 },
		{ _field_long_flags, "flags", &unnamed_enum$217 },
		FIELD_PAD("value", 16),
		FIELD_PAD("value", 40),
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$559)
	{
		"show on flashing",
		"show on empty",
		"show on reload/overheating",
		"show on default",
		"show always"
	};
	STRING_LIST(unnamed_enum$559, unnamed_enum$559_strings, _countof(unnamed_enum$559_strings));

	TAG_STRUCT(
		weapon_hud_overlays_block_struct_definition,
		"weapon_hud_overlays_block",
		"weapon_hud_overlays_block_struct_definition",
		"s_weapon_hud_overlays_element",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "state attached to", &unnamed_enum$554 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "can use on map type", &unnamed_enum$555 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 28),
		{ _field_tag_reference, "Overlay bitmap", &bitmap_group_reference },
		{ _field_block, "Overlays", &weapon_hud_overlay_block },
		FIELD_PAD("value", 40),
		{ _field_terminator }
	};

	TAG_STRUCT(
		weapon_hud_static_block_struct_definition,
		"weapon_hud_static_block",
		"weapon_hud_static_block_struct_definition",
		"s_weapon_hud_static_element",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_short_enum, "state attached to", &unnamed_enum$554 },
		FIELD_PAD("value", 2),
		{ _field_short_enum, "can use on map type", &unnamed_enum$555 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 28),
		{ _field_point_2d, "anchor offset" },
		{ _field_real, "width scale" },
		{ _field_real, "height scale" },
		{ _field_word_flags, "scaling flags", &unnamed_enum$207 },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 20),
		{ _field_tag_reference, "interface bitmap", &bitmap_group_reference },
		{ _field_argb_color, "default color" },
		{ _field_argb_color, "flashing color" },
		{ _field_real, "flash period" },
		{ _field_real, "flash delay", "time between flashes" },
		{ _field_short_integer, "number of flashes" },
		{ _field_word_flags, "flash flags", &unnamed_enum$208 },
		{ _field_real, "flash length", "time of each flash" },
		{ _field_argb_color, "disabled color" },
		FIELD_PAD("value", 4),
		{ _field_short_integer, "sequence index" },
		FIELD_PAD("value", 2),
		{ _field_block, "multitex overlay", &global_hud_multitexture_overlay_definition_block },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 40),
		{ _field_terminator }
	};

	TAG_STRUCT(
		weapon_interface_struct_struct_definition,
		"weapon_interface_struct",
		"weapon_interface_struct_struct_definition",
		"s_weapon_interface_definition_new",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("interface", nullptr),
		{ _field_struct, "shared interface", &weapon_shared_interface_struct_struct_definition, _field_id_wSiS },
		{ _field_block, "first person", &weapon_first_person_interface_block },
		{ _field_tag_reference, "new hud interface", &new_hud_definition_group_reference },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		weapon_magazine_struct_definition,
		"weapon_magazine",
		"weapon_magazine_struct_definition",
		"s_weapon_magazine_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 19 },
		{ _field_long_flags, "flags", &unnamed_enum$522 },
		{ _field_short_integer, "rounds recharged", nullptr, "per second" },
		{ _field_short_integer, "rounds total initial" },
		{ _field_short_integer, "rounds total maximum" },
		{ _field_short_integer, "rounds loaded maximum" },
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "reload time", "the length of time it takes to load a single magazine into the weapon", "seconds" },
		{ _field_short_integer, "rounds reloaded" },
		FIELD_PAD("value", 2),
		{ _field_real, "chamber time", "the length of time it takes to chamber the next round", "seconds" },
		FIELD_PAD("value", 8),
		FIELD_PAD("value", 16),
		{ _field_tag_reference, "reloading effect", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "reloading damage effect", &damage_effect_group_reference },
		{ _field_tag_reference, "chambering effect", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "chambering damage effect", &damage_effect_group_reference },
		FIELD_USELESS_PAD("value", 12),
		{ _field_block, "magazines", &magazine_objects_block },
		
		{ _struct_version_mode_equal, 0, 16 },
		{ _field_long_flags, "flags", &unnamed_enum$522 },
		{ _field_short_integer, "rounds recharged", nullptr, "per second" },
		{ _field_short_integer, "rounds total initial" },
		{ _field_short_integer, "rounds total maximum" },
		{ _field_short_integer, "rounds loaded maximum" },
		FIELD_PAD("value", 8),
		{ _field_real, "reload time", "the length of time it takes to load a single magazine into the weapon", "seconds" },
		{ _field_short_integer, "rounds reloaded" },
		FIELD_PAD("value", 2),
		{ _field_real, "chamber time", "the length of time it takes to chamber the next round", "seconds" },
		FIELD_PAD("value", 8),
		FIELD_PAD("value", 16),
		{ _field_tag_reference, "reloading effect", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "chambering effect", &sound_group_effect_group_reference$2 },
		FIELD_PAD("value", 12),
		{ _field_block, "magazines", &magazine_objects_block },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$522)
	{
		"wastes rounds when reloaded",
		"every round must be chambered"
	};
	STRING_LIST(unnamed_enum$522, unnamed_enum$522_strings, _countof(unnamed_enum$522_strings));

	TAG_STRUCT(
		weapon_shared_interface_struct_struct_definition,
		"weapon_shared_interface_struct",
		"weapon_shared_interface_struct_struct_definition",
		"s_tag_reference$15",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 16),
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		weapon_struct_definition$3,
		"weapon",
		"weapon_struct_definition",
		"s_weapon_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 3, 152 },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ ITEM $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$197 },
		{ _field_short_integer, "OLD message index" },
		{ _field_short_integer, "sort order" },
		{ _field_real, "multiplayer on-ground scale" },
		{ _field_real, "campaign on-ground scale" },
		FIELD_EXPLANATION("NEW hud messages", "everything you need to display stuff"),
		{ _field_string_id, "pickup message" },
		{ _field_string_id, "swap message" },
		{ _field_string_id, "pickup or dual msg" },
		{ _field_string_id, "swap or dual msg" },
		{ _field_string_id, "dual-only msg" },
		{ _field_string_id, "picked up msg" },
		{ _field_string_id, "singluar quantity msg" },
		{ _field_string_id, "plural quantity msg" },
		{ _field_string_id, "switch-to msg" },
		{ _field_string_id, "switch-to from ai msg" },
		FIELD_USELESS_PAD("value", 148),
		{ _field_tag_reference, "UNUSED", &material_effects_group_reference },
		{ _field_tag_reference, "collision sound", &sound_group_reference },
		{ _field_block, "predicted bitmaps", &predicted_bitmaps_block },
		FIELD_USELESS_PAD("value", 92),
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_reference },
		{ _field_real_bounds, "detonation delay", nullptr, "seconds" },
		{ _field_tag_reference, "detonating effect", &effect_group_reference },
		{ _field_tag_reference, "detonation effect", &effect_group_reference },
		FIELD_EXPLANATION("$$$ WEAPON $$$", "All weapons should have \'primary trigger\' and \'secondary trigger\' markers as appropriate.\nBlurred permutations are called \'$primary-blur\' and \'$secondary-blur\'."),
		{ _field_long_flags, "flags", &unnamed_enum$516 },
		{ _field_old_string_id, "value" },
		{ _field_short_enum, "secondary trigger mode", &unnamed_enum$517 },
		{ _field_short_integer, "maximum alternate shots loaded", "if the second trigger loads alternate ammunition, this is the maximum number of shots that can be loaded at a time" },
		{ _field_real, "turn on time", "how long after being readied it takes this weapon to switch its 'turned_on' attachment to 1.0" },
		FIELD_EXPLANATION("old obsolete export to functions", nullptr),
		{ _field_real, "ready time", nullptr, "seconds" },
		{ _field_tag_reference, "ready effect", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "ready damage effect", &damage_effect_group_reference },
		FIELD_EXPLANATION("heat", nullptr),
		{ _field_real_fraction, "heat recovery threshold", "the heat value a weapon must return to before leaving the overheated state, once it has become overheated in the first place", nullptr, "[0,1]" },
		{ _field_real_fraction, "overheated threshold", "the heat value over which a weapon first becomes overheated (should be greater than the heat recovery threshold)", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat detonation threshold", "the heat value above which the weapon has a chance of exploding each time it is fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat detonation fraction", "the percent chance (between 0.0 and 1.0) the weapon will explode when fired over the heat detonation threshold", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat loss per second", "the amount of heat lost each second when the weapon is not being fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat illumination", "the amount of illumination given off when the weapon is overheated", nullptr, "[0,1]" },
		{ _field_real_fraction, "overheated heat loss per second", "the amount of heat lost each second when the weapon is not being fired", nullptr, "[0,1]" },
		{ _field_tag_reference, "overheated", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "overheated damage effect", &damage_effect_group_reference },
		{ _field_tag_reference, "detonation", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_reference },
		{ _field_tag_reference, "player melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "player melee response", &damage_effect_group_reference },
		FIELD_EXPLANATION("melee aim assist", "magnetism angle: the maximum angle that magnetism works at full strength\nmagnetism range: the maximum distance that magnetism works at full strength\nthrottle magnitude: additional throttle to apply towards target when melee-ing w/ magnetism\nthrottle minimum distance: minimum distance to target that throttle magnetism kicks in\nthrottle maximum adjustment angle: maximum angle throttle magnetism will have an effect, relative to the players movement throttle\n"),
		{ _field_struct, "melee aim assist", &melee_aim_assist_struct_definition, _field_id_masd }, // structure_version:1
		FIELD_EXPLANATION("melee damage parameters", "damage pyramid angles: defines the frustum from the camera that the melee-attack uses to find targets\ndamage pyramid depth: how far the melee attack searches for a target"),
		{ _field_struct, "melee damage parameters", &melee_damage_parameters_struct_definition, _field_id_mdps }, // structure_version:1
		{ _field_char_enum, "melee damage reporting type", &unnamed_enum$228 },
		FIELD_PAD("value", 1),
		FIELD_EXPLANATION("zoom", nullptr),
		{ _field_short_integer, "magnification levels", "the number of magnification levels this weapon allows" },
		{ _field_real_bounds, "magnification range" },
		FIELD_EXPLANATION("weapon aim assist", nullptr),
		{ _field_struct, "weapon aim assist", &aim_assist_struct_struct_definition, _field_id_easd },
		FIELD_EXPLANATION("movement", nullptr),
		{ _field_short_enum, "movement penalized", &unnamed_enum$518 },
		FIELD_PAD("value", 2),
		{ _field_real_fraction, "forward movement penalty", "percent slowdown to forward movement for units carrying this weapon" },
		{ _field_real_fraction, "sideways movement penalty", "percent slowdown to sideways and backward movement for units carrying this weapon" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_EXPLANATION("AI targeting parameters", nullptr),
		{ _field_real, "AI scariness" },
		FIELD_EXPLANATION("miscellaneous", nullptr),
		{ _field_real, "weapon power-on time", nullptr, "seconds" },
		{ _field_real, "weapon power-off time", nullptr, "seconds" },
		{ _field_tag_reference, "weapon power-on effect", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "weapon power-off effect", &sound_group_effect_group_reference$2 },
		{ _field_real, "age heat recovery penalty", "how much the weapon's heat recovery is penalized as it ages" },
		{ _field_real, "age rate of fire penalty", "how much the weapon's rate of fire is penalized as it ages" },
		{ _field_real_fraction, "age misfire start", "the age threshold when the weapon begins to misfire", nullptr, "[0,1]" },
		{ _field_real_fraction, "age misfire chance", "at age 1.0, the misfire chance per shot", nullptr, "[0,1]" },
		{ _field_tag_reference, "pickup sound", &sound_group_reference },
		{ _field_tag_reference, "zoom-in sound", &sound_group_reference },
		{ _field_tag_reference, "zoom-out sound", &sound_group_reference },
		{ _field_real, "active camo ding", "how much to decrease active camo when a round is fired" },
		{ _field_real, "active camo regrowth rate", "how fast to increase active camo (per tick) when a round is fired" },
		{ _field_string_id, "handle node", "the node that get's attached to the unit's hand" },
		FIELD_EXPLANATION("weapon labels", nullptr),
		{ _field_string_id, "weapon class" },
		{ _field_string_id, "weapon name" },
		{ _field_short_enum, "multiplayer weapon type", &unnamed_enum$519 },
		FIELD_EXPLANATION("more miscellaneous", nullptr),
		{ _field_short_enum, "weapon type", &unnamed_enum$520 },
		{ _field_struct, "tracking", &weapon_tracking_struct_definition, _field_id_wtsf }, // structure_version:1
		{ _field_struct, "player interface", &weapon_interface_struct_struct_definition, _field_id_wItS },
		{ _field_block, "predicted resources", &predicted_resource_block },
		{ _field_block, "magazines", &magazines_block },
		{ _field_block, "new triggers", &weapon_triggers_block },
		{ _field_block, "barrels", &weapon_barrels_block },
		FIELD_PAD("value", 8),
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("first-person movement control", nullptr),
		{ _field_real, "max movement acceleration" },
		{ _field_real, "max movement velocity" },
		{ _field_real, "max turning acceleration" },
		{ _field_real, "max turning velocity" },
		{ _field_tag_reference, "deployed vehicle", &vehicle_group_reference$5 },
		{ _field_tag_reference, "age effect", &effect_group_reference },
		{ _field_tag_reference, "aged weapon", &weapon_group_reference$7 },
		{ _field_real_vector_3d, "first person weapon offset" },
		{ _field_real_vector_2d, "first person scope size" },
		
		{ _struct_version_mode_equal, 2, 158 },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ ITEM $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$197 },
		{ _field_short_integer, "OLD message index" },
		{ _field_short_integer, "sort order" },
		{ _field_real, "multiplayer on-ground scale" },
		{ _field_real, "campaign on-ground scale" },
		FIELD_EXPLANATION("NEW hud messages", "everything you need to display stuff"),
		{ _field_string_id, "pickup message" },
		{ _field_string_id, "swap message" },
		{ _field_string_id, "pickup or dual msg" },
		{ _field_string_id, "swap or dual msg" },
		{ _field_string_id, "dual-only msg" },
		{ _field_string_id, "picked up msg" },
		{ _field_string_id, "singluar quantity msg" },
		{ _field_string_id, "plural quantity msg" },
		{ _field_string_id, "switch-to msg" },
		{ _field_string_id, "switch-to from ai msg" },
		FIELD_USELESS_PAD("value", 148),
		{ _field_tag_reference, "UNUSED", &material_effects_group_reference },
		{ _field_tag_reference, "collision sound", &sound_group_reference },
		{ _field_block, "predicted bitmaps", &predicted_bitmaps_block },
		FIELD_USELESS_PAD("value", 92),
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_reference },
		{ _field_real_bounds, "detonation delay", nullptr, "seconds" },
		{ _field_tag_reference, "detonating effect", &effect_group_reference },
		{ _field_tag_reference, "detonation effect", &effect_group_reference },
		FIELD_EXPLANATION("$$$ WEAPON $$$", "All weapons should have \'primary trigger\' and \'secondary trigger\' markers as appropriate.\nBlurred permutations are called \'$primary-blur\' and \'$secondary-blur\'."),
		{ _field_long_flags, "flags", &unnamed_enum$516 },
		{ _field_old_string_id, "value" },
		{ _field_short_enum, "secondary trigger mode", &unnamed_enum$517 },
		{ _field_short_integer, "maximum alternate shots loaded", "if the second trigger loads alternate ammunition, this is the maximum number of shots that can be loaded at a time" },
		{ _field_real, "turn on time", "how long after being readied it takes this weapon to switch its 'turned_on' attachment to 1.0" },
		FIELD_EXPLANATION("old obsolete export to functions", nullptr),
		FIELD_PAD("value", 4),
		{ _field_real, "ready time", nullptr, "seconds" },
		{ _field_tag_reference, "ready effect", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "ready damage effect", &damage_effect_group_reference },
		FIELD_EXPLANATION("heat", nullptr),
		{ _field_real_fraction, "heat recovery threshold", "the heat value a weapon must return to before leaving the overheated state, once it has become overheated in the first place", nullptr, "[0,1]" },
		{ _field_real_fraction, "overheated threshold", "the heat value over which a weapon first becomes overheated (should be greater than the heat recovery threshold)", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat detonation threshold", "the heat value above which the weapon has a chance of exploding each time it is fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat detonation fraction", "the percent chance (between 0.0 and 1.0) the weapon will explode when fired over the heat detonation threshold", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat loss per second", "the amount of heat lost each second when the weapon is not being fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat illumination", "the amount of illumination given off when the weapon is overheated", nullptr, "[0,1]" },
		{ _field_real_fraction, "overheated heat loss per second", "the amount of heat lost each second when the weapon is not being fired", nullptr, "[0,1]" },
		FIELD_PAD("value", 12),
		{ _field_tag_reference, "overheated", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "overheated damage effect", &damage_effect_group_reference },
		{ _field_tag_reference, "detonation", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_reference },
		{ _field_tag_reference, "player melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "player melee response", &damage_effect_group_reference },
		FIELD_EXPLANATION("melee aim assist", "magnetism angle: the maximum angle that magnetism works at full strength\nmagnetism range: the maximum distance that magnetism works at full strength\nthrottle magnitude: additional throttle to apply towards target when melee-ing w/ magnetism\nthrottle minimum distance: minimum distance to target that throttle magnetism kicks in\nthrottle maximum adjustment angle: maximum angle throttle magnetism will have an effect, relative to the players movement throttle\n"),
		{ _field_struct, "melee aim assist", &melee_aim_assist_struct_definition, _field_id_masd }, // structure_version:1
		FIELD_EXPLANATION("melee damage parameters", "damage pyramid angles: defines the frustum from the camera that the melee-attack uses to find targets\ndamage pyramid depth: how far the melee attack searches for a target"),
		{ _field_struct, "melee damage parameters", &melee_damage_parameters_struct_definition, _field_id_mdps }, // structure_version:1
		{ _field_char_enum, "melee damage reporting type", &unnamed_enum$228 },
		FIELD_PAD("value", 3),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_EXPLANATION("zoom", nullptr),
		FIELD_PAD("value", 2),
		{ _field_short_integer, "magnification levels", "the number of magnification levels this weapon allows" },
		{ _field_real_bounds, "magnification range" },
		FIELD_EXPLANATION("weapon aim assist", nullptr),
		{ _field_struct, "weapon aim assist", &aim_assist_struct_struct_definition, _field_id_easd },
		FIELD_EXPLANATION("movement", nullptr),
		{ _field_short_enum, "movement penalized", &unnamed_enum$518 },
		FIELD_PAD("value", 2),
		{ _field_real_fraction, "forward movement penalty", "percent slowdown to forward movement for units carrying this weapon" },
		{ _field_real_fraction, "sideways movement penalty", "percent slowdown to sideways and backward movement for units carrying this weapon" },
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("AI targeting parameters", nullptr),
		FIELD_PAD("value", 8),
		{ _field_real, "AI scariness" },
		FIELD_EXPLANATION("miscellaneous", nullptr),
		{ _field_real, "weapon power-on time", nullptr, "seconds" },
		{ _field_real, "weapon power-off time", nullptr, "seconds" },
		{ _field_tag_reference, "weapon power-on effect", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "weapon power-off effect", &sound_group_effect_group_reference$2 },
		FIELD_PAD("value", 32),
		{ _field_real, "age heat recovery penalty", "how much the weapon's heat recovery is penalized as it ages" },
		{ _field_real, "age rate of fire penalty", "how much the weapon's rate of fire is penalized as it ages" },
		{ _field_real_fraction, "age misfire start", "the age threshold when the weapon begins to misfire", nullptr, "[0,1]" },
		{ _field_real_fraction, "age misfire chance", "at age 1.0, the misfire chance per shot", nullptr, "[0,1]" },
		FIELD_PAD("value", 12),
		{ _field_tag_reference, "pickup sound", &sound_group_reference },
		{ _field_tag_reference, "zoom-in sound", &sound_group_reference },
		{ _field_tag_reference, "zoom-out sound", &sound_group_reference },
		{ _field_real, "active camo ding", "how much to decrease active camo when a round is fired" },
		{ _field_real, "active camo regrowth rate", "how fast to increase active camo (per tick) when a round is fired" },
		{ _field_string_id, "handle node", "the node that get's attached to the unit's hand" },
		FIELD_EXPLANATION("weapon labels", nullptr),
		{ _field_string_id, "weapon class" },
		{ _field_string_id, "weapon name" },
		{ _field_short_enum, "multiplayer weapon type", &unnamed_enum$519 },
		FIELD_EXPLANATION("more miscellaneous", nullptr),
		{ _field_short_enum, "weapon type", &unnamed_enum$520 },
		{ _field_struct, "tracking", &weapon_tracking_struct_definition, _field_id_wtsf }, // structure_version:1
		{ _field_struct, "player interface", &weapon_interface_struct_struct_definition, _field_id_wItS },
		{ _field_block, "predicted resources", &predicted_resource_block },
		{ _field_block, "magazines", &magazines_block },
		FIELD_PAD("value", 12),
		{ _field_block, "new triggers", &weapon_triggers_block },
		{ _field_block, "barrels", &weapon_barrels_block },
		FIELD_PAD("value", 8),
		FIELD_PAD("value", 16),
		FIELD_EXPLANATION("first-person movement control", nullptr),
		{ _field_real, "max movement acceleration" },
		{ _field_real, "max movement velocity" },
		{ _field_real, "max turning acceleration" },
		{ _field_real, "max turning velocity" },
		FIELD_PAD("value", 16),
		{ _field_tag_reference, "deployed vehicle", &vehicle_group_reference$5 },
		
		{ _struct_version_mode_equal, 1, 153 },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ ITEM $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$197 },
		{ _field_short_integer, "OLD message index" },
		{ _field_short_integer, "sort order" },
		{ _field_real, "multiplayer on-ground scale" },
		{ _field_real, "campaign on-ground scale" },
		FIELD_EXPLANATION("NEW hud messages", "everything you need to display stuff"),
		{ _field_string_id, "pickup message" },
		{ _field_string_id, "swap message" },
		{ _field_string_id, "pickup or dual msg" },
		{ _field_string_id, "swap or dual msg" },
		{ _field_string_id, "dual-only msg" },
		{ _field_string_id, "picked up msg" },
		{ _field_string_id, "singluar quantity msg" },
		{ _field_string_id, "plural quantity msg" },
		{ _field_string_id, "switch-to msg" },
		{ _field_string_id, "switch-to from ai msg" },
		FIELD_USELESS_PAD("value", 148),
		{ _field_tag_reference, "UNUSED", &material_effects_group_reference },
		{ _field_tag_reference, "collision sound", &sound_group_reference },
		{ _field_block, "predicted bitmaps", &predicted_bitmaps_block },
		FIELD_USELESS_PAD("value", 92),
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_reference },
		{ _field_real_bounds, "detonation delay", nullptr, "seconds" },
		{ _field_tag_reference, "detonating effect", &effect_group_reference },
		{ _field_tag_reference, "detonation effect", &effect_group_reference },
		FIELD_EXPLANATION("$$$ WEAPON $$$", "All weapons should have \'primary trigger\' and \'secondary trigger\' markers as appropriate.\nBlurred permutations are called \'$primary-blur\' and \'$secondary-blur\'."),
		{ _field_long_flags, "flags", &unnamed_enum$516 },
		{ _field_old_string_id, "value" },
		{ _field_short_enum, "secondary trigger mode", &unnamed_enum$517 },
		{ _field_short_integer, "maximum alternate shots loaded", "if the second trigger loads alternate ammunition, this is the maximum number of shots that can be loaded at a time" },
		FIELD_EXPLANATION("old obsolete export to functions", nullptr),
		FIELD_PAD("value", 8),
		{ _field_real, "ready time", nullptr, "seconds" },
		{ _field_tag_reference, "ready effect", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "ready damage effect", &damage_effect_group_reference },
		FIELD_EXPLANATION("heat", nullptr),
		{ _field_real_fraction, "heat recovery threshold", "the heat value a weapon must return to before leaving the overheated state, once it has become overheated in the first place", nullptr, "[0,1]" },
		{ _field_real_fraction, "overheated threshold", "the heat value over which a weapon first becomes overheated (should be greater than the heat recovery threshold)", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat detonation threshold", "the heat value above which the weapon has a chance of exploding each time it is fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat detonation fraction", "the percent chance (between 0.0 and 1.0) the weapon will explode when fired over the heat detonation threshold", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat loss per second", "the amount of heat lost each second when the weapon is not being fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat illumination", "the amount of illumination given off when the weapon is overheated", nullptr, "[0,1]" },
		{ _field_real_fraction, "overheated heat loss per second", "the amount of heat lost each second when the weapon is not being fired", nullptr, "[0,1]" },
		FIELD_PAD("value", 12),
		{ _field_tag_reference, "overheated", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "overheated damage effect", &damage_effect_group_reference },
		{ _field_tag_reference, "detonation", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_reference },
		{ _field_tag_reference, "player melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "player melee response", &damage_effect_group_reference },
		FIELD_EXPLANATION("melee aim assist", "magnetism angle: the maximum angle that magnetism works at full strength\nmagnetism range: the maximum distance that magnetism works at full strength\nthrottle magnitude: additional throttle to apply towards target when melee-ing w/ magnetism\nthrottle minimum distance: minimum distance to target that throttle magnetism kicks in\nthrottle maximum adjustment angle: maximum angle throttle magnetism will have an effect, relative to the players movement throttle\n"),
		{ _field_struct, "melee aim assist", &melee_aim_assist_struct_definition, _field_id_masd }, // structure_version:1
		FIELD_EXPLANATION("melee damage parameters", "damage pyramid angles: defines the frustum from the camera that the melee-attack uses to find targets\ndamage pyramid depth: how far the melee attack searches for a target"),
		{ _field_struct, "melee damage parameters", &melee_damage_parameters_struct_definition, _field_id_mdps }, // structure_version:1
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		FIELD_EXPLANATION("zoom", nullptr),
		FIELD_PAD("value", 2),
		{ _field_short_integer, "magnification levels", "the number of magnification levels this weapon allows" },
		{ _field_real_bounds, "magnification range" },
		FIELD_EXPLANATION("weapon aim assist", nullptr),
		{ _field_struct, "weapon aim assist", &aim_assist_struct_struct_definition, _field_id_easd },
		FIELD_EXPLANATION("movement", nullptr),
		{ _field_short_enum, "movement penalized", &unnamed_enum$518 },
		FIELD_PAD("value", 2),
		{ _field_real_fraction, "forward movement penalty", "percent slowdown to forward movement for units carrying this weapon" },
		{ _field_real_fraction, "sideways movement penalty", "percent slowdown to sideways and backward movement for units carrying this weapon" },
		FIELD_PAD("value", 4),
		FIELD_EXPLANATION("AI targeting parameters", nullptr),
		FIELD_PAD("value", 8),
		{ _field_real, "AI scariness" },
		FIELD_EXPLANATION("miscellaneous", nullptr),
		{ _field_real, "weapon power-on time", nullptr, "seconds" },
		{ _field_real, "weapon power-off time", nullptr, "seconds" },
		{ _field_tag_reference, "weapon power-on effect", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "weapon power-off effect", &sound_group_effect_group_reference$2 },
		FIELD_PAD("value", 32),
		{ _field_real, "age heat recovery penalty", "how much the weapon's heat recovery is penalized as it ages" },
		{ _field_real, "age rate of fire penalty", "how much the weapon's rate of fire is penalized as it ages" },
		{ _field_real_fraction, "age misfire start", "the age threshold when the weapon begins to misfire", nullptr, "[0,1]" },
		{ _field_real_fraction, "age misfire chance", "at age 1.0, the misfire chance per shot", nullptr, "[0,1]" },
		FIELD_PAD("value", 12),
		FIELD_EXPLANATION("interface", nullptr),
		{ _field_tag_reference, "first person model", &render_model_group_reference$6 },
		{ _field_tag_reference, "first person animations", &model_animation_graph_group_reference },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 16),
		{ _field_tag_reference, "pickup sound", &sound_group_reference },
		{ _field_tag_reference, "zoom-in sound", &sound_group_reference },
		{ _field_tag_reference, "zoom-out sound", &sound_group_reference },
		FIELD_PAD("value", 12),
		{ _field_real, "active camo ding", "how much to decrease active camo when a round is fired" },
		{ _field_real, "active camo regrowth rate", "how fast to increase active camo (per tick) when a round is fired" },
		{ _field_string_id, "handle node", "the node that get's attached to the unit's hand" },
		FIELD_EXPLANATION("weapon labels", nullptr),
		{ _field_string_id, "weapon class" },
		{ _field_string_id, "weapon name" },
		{ _field_short_enum, "multiplayer weapon type", &unnamed_enum$519 },
		FIELD_EXPLANATION("more miscellaneous", nullptr),
		{ _field_short_enum, "weapon type", &unnamed_enum$520 },
		{ _field_struct, "tracking", &weapon_tracking_struct_definition, _field_id_wtsf }, // structure_version:1
		{ _field_block, "predicted resources", &predicted_resource_block },
		{ _field_block, "magazines", &magazines_block },
		FIELD_PAD("value", 12),
		{ _field_block, "new triggers", &weapon_triggers_block },
		{ _field_block, "barrels", &weapon_barrels_block },
		FIELD_PAD("value", 8),
		
		{ _struct_version_mode_equal, 0, 138 },
		FIELD_PAD("value", 2),
		{ _field_word_flags, "flags", &unnamed_enum$96 },
		{ _field_real, "bounding radius", nullptr, "world units" },
		{ _field_real_point_3d, "bounding offset" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real, "acceleration scale", "marine 1.0, grunt 1.4, elite 0.9, hunter 0.5, etc.", nullptr, "[0,+inf]" },
		{ _field_short_enum, "lightmap shadow mode", &unnamed_enum$97 },
		{ _field_char_enum, "sweetener size", &unnamed_enum$98 },
		FIELD_PAD("value", 1),
		FIELD_PAD("value", 4),
		FIELD_USELESS_PAD("value", 32),
		{ _field_real, "dynamic light sphere radius", "sphere to use for dynamic lights and shadows. only used if not 0" },
		{ _field_real_point_3d, "dynamic light sphere offset", "only used if radius not 0" },
		{ _field_string_id, "default model variant" },
		{ _field_tag_reference, "model", &model_group_reference },
		{ _field_tag_reference, "crate object", &crate_group_reference$2 },
		FIELD_USELESS_PAD("value", 16),
		{ _field_tag_reference, "modifier shader", &shader_group_reference },
		{ _field_tag_reference, "creation effect", &effect_group_reference },
		{ _field_tag_reference, "material effects", &material_effects_group_reference },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "ai properties", &object_ai_properties_block },
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "functions", &object_function_block },
		FIELD_USELESS_PAD("value", 16),
		FIELD_EXPLANATION("Applying collision damage", "for things that want to cause more or less collision damage"),
		{ _field_real, "Apply collision damage scale", "0 means 1.  1 is standard scale.  Some things may want to apply more damage" },
		FIELD_EXPLANATION("Game collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min game acc (default)", "0-oo" },
		{ _field_real, "max game acc (default)", "0-oo" },
		{ _field_real, "min game scale (default)", "0-1" },
		{ _field_real, "max game scale (default)", "0-1" },
		FIELD_EXPLANATION("Absolute collision damage parameters", "0 - means take default value from globals.globals"),
		{ _field_real, "min abs acc (default)", "0-oo" },
		{ _field_real, "max abs acc (default)", "0-oo" },
		{ _field_real, "min abs scale (default)", "0-1" },
		{ _field_real, "max abs scale (default)", "0-1" },
		{ _field_short_integer, "hud text message index" },
		FIELD_PAD("value", 2),
		{ _field_block, "attachments", &object_attachment_block },
		{ _field_block, "widgets", &object_widget_block },
		{ _field_block, "old functions", &old_object_function_block },
		{ _field_block, "change colors", &object_change_colors_block },
		{ _field_block, "predicted resources", &predicted_resource_block },
		FIELD_EXPLANATION("$$$ ITEM $$$", nullptr),
		{ _field_long_flags, "flags", &unnamed_enum$197 },
		{ _field_short_integer, "OLD message index" },
		{ _field_short_integer, "sort order" },
		{ _field_real, "multiplayer on-ground scale" },
		{ _field_real, "campaign on-ground scale" },
		FIELD_EXPLANATION("NEW hud messages", "everything you need to display stuff"),
		{ _field_string_id, "pickup message" },
		{ _field_string_id, "swap message" },
		{ _field_string_id, "pickup or dual msg" },
		{ _field_string_id, "swap or dual msg" },
		{ _field_string_id, "dual-only msg" },
		{ _field_string_id, "picked up msg" },
		{ _field_string_id, "singluar quantity msg" },
		{ _field_string_id, "plural quantity msg" },
		{ _field_string_id, "switch-to msg" },
		{ _field_string_id, "switch-to from ai msg" },
		FIELD_USELESS_PAD("value", 148),
		{ _field_tag_reference, "UNUSED", &material_effects_group_reference },
		{ _field_tag_reference, "collision sound", &sound_group_reference },
		{ _field_block, "predicted bitmaps", &predicted_bitmaps_block },
		FIELD_USELESS_PAD("value", 92),
		{ _field_tag_reference, "detonation damage effect", &damage_effect_group_reference },
		{ _field_real_bounds, "detonation delay", nullptr, "seconds" },
		{ _field_tag_reference, "detonating effect", &effect_group_reference },
		{ _field_tag_reference, "detonation effect", &effect_group_reference },
		{ _field_long_flags, "flags", &unnamed_enum$516 },
		{ _field_old_string_id, "value" },
		{ _field_short_enum, "secondary trigger mode", &unnamed_enum$517 },
		{ _field_short_integer, "maximum alternate shots loaded", "if the second trigger loads alternate ammunition, this is the maximum number of shots that can be loaded at a time" },
		FIELD_PAD("value", 8),
		{ _field_real, "ready time", nullptr, "seconds" },
		{ _field_tag_reference, "ready effect", &sound_group_effect_group_reference$2 },
		{ _field_real_fraction, "heat recovery threshold", "the heat value a weapon must return to before leaving the overheated state, once it has become overheated in the first place", nullptr, "[0,1]" },
		{ _field_real_fraction, "overheated threshold", "the heat value over which a weapon first becomes overheated (should be greater than the heat recovery threshold)", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat detonation threshold", "the heat value above which the weapon has a chance of exploding each time it is fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat detonation fraction", "the percent chance (between 0.0 and 1.0) the weapon will explode when fired over the heat detonation threshold", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat loss per second", "the amount of heat lost each second when the weapon is not being fired", nullptr, "[0,1]" },
		{ _field_real_fraction, "heat illumination", "the amount of illumination given off when the weapon is overheated", nullptr, "[0,1]" },
		{ _field_real_fraction, "overheated heat loss per second", "the amount of heat lost each second when the weapon is not being fired", nullptr, "[0,1]" },
		FIELD_PAD("value", 12),
		{ _field_tag_reference, "overheated", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "detonation", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "player melee damage", &damage_effect_group_reference },
		{ _field_tag_reference, "player melee response", &damage_effect_group_reference },
		{ _field_struct, "melee aim assist", &melee_aim_assist_struct_definition, _field_id_masd }, // structure_version:1
		{ _field_struct, "melee damage parameters", &melee_damage_parameters_struct_definition, _field_id_mdps }, // structure_version:1
		{ _field_char_enum, "melee damage reporting type", &unnamed_enum$228 },
		FIELD_PAD("value", 3),
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 2),
		{ _field_tag_reference, "actor firing parameters", &character_group_reference$6 },
		{ _field_real, "near reticle range", "the range at which the closer of the two static target reticles will be drawn", "world units" },
		{ _field_real, "far reticle range", "the range at which the farther of the two static target reticles will be drawn", "world units" },
		{ _field_real, "intersection reticle range", "the maximum range at which the dynamic target reticle will be drawn" },
		FIELD_PAD("value", 2),
		{ _field_short_integer, "magnification levels", "the number of magnification levels this weapon allows" },
		{ _field_real_bounds, "magnification range" },
		{ _field_struct, "weapon aim assist", &aim_assist_struct_struct_definition, _field_id_easd },
		{ _field_short_enum, "movement penalized", &unnamed_enum$518 },
		FIELD_PAD("value", 2),
		{ _field_real_fraction, "forward movement penalty", "percent slowdown to forward movement for units carrying this weapon" },
		{ _field_real_fraction, "sideways movement penalty", "percent slowdown to sideways and backward movement for units carrying this weapon" },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 8),
		{ _field_real, "AI scariness" },
		{ _field_real, "light power-on time", nullptr, "seconds" },
		{ _field_real, "light power-off time", nullptr, "seconds" },
		{ _field_tag_reference, "light power-on effect", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "light power-off effect", &sound_group_effect_group_reference$2 },
		{ _field_real, "age heat recovery penalty", "how much the weapon's heat recovery is penalized as it ages" },
		{ _field_real, "age rate of fire penalty", "how much the weapon's rate of fire is penalized as it ages" },
		{ _field_real_fraction, "age misfire start", "the age threshold when the weapon begins to misfire", nullptr, "[0,1]" },
		{ _field_real_fraction, "age misfire chance", "at age 1.0, the misfire chance per shot", nullptr, "[0,1]" },
		FIELD_PAD("value", 12),
		FIELD_EXPLANATION("interface", nullptr),
		{ _field_tag_reference, "first person model", &render_model_group_reference$6 },
		{ _field_tag_reference, "first person animations", &model_animation_graph_group_reference },
		FIELD_PAD("value", 4),
		FIELD_PAD("value", 16),
		{ _field_tag_reference, "pickup sound", &sound_group_reference },
		{ _field_tag_reference, "zoom-in sound", &sound_group_reference },
		{ _field_tag_reference, "zoom-out sound", &sound_group_reference },
		{ _field_block, "value", &g_null_block },
		{ _field_real, "active camo ding", "how much to decrease active camo when a round is fired" },
		{ _field_real, "active camo regrowth rate", "how fast to increase active camo (per tick) when a round is fired" },
		{ _field_string_id, "handle node", "the node that get's attached to the unit's hand" },
		{ _field_string_id, "weapon class" },
		{ _field_string_id, "weapon name" },
		{ _field_short_enum, "multiplayer weapon type", &unnamed_enum$519 },
		{ _field_short_enum, "weapon type", &unnamed_enum$520 },
		{ _field_block, "predicted resources", &predicted_resource_block },
		{ _field_block, "magazines", &magazines_block },
		FIELD_PAD("value", 12),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$516)
	{
		"vertical heat display",
		"mutually exclusive triggers",
		"attacks automatically on bump",
		"must be readied",
		"doesn\'t count toward maximum",
		"aim assists only when zoomed",
		"prevents grenade throwing",
		"must be picked up",
		"holds triggers when dropped",
		"prevents melee attack",
		"detonates when dropped",
		"cannot fire at maximum age",
		"secondary trigger overrides grenades",
		"(OBSOLETE)does not depower active camo in multilplayer",
		"enables integrated night vision",
		"AIs use weapon melee damage",
		"forces no binoculars",
		"loop fp firing animation",
		"prevents sprinting",
		"cannot fire while boosting",
		"prevents driving",
		"prevents gunning",
		"can be dual wielded",
		"can only be dual wielded",
		"melee only",
		"cant fire if parent dead",
		"weapon ages with each kill",
		"weapon uses old dual fire error code",
		"primary trigger melee attacks",
		"cannot be used by player"
	};
	STRING_LIST(unnamed_enum$516, unnamed_enum$516_strings, _countof(unnamed_enum$516_strings));

	STRINGS(unnamed_enum$517)
	{
		"normal",
		"slaved to primary",
		"inhibits primary",
		"loads alterate ammunition",
		"loads multiple primary ammunition"
	};
	STRING_LIST(unnamed_enum$517, unnamed_enum$517_strings, _countof(unnamed_enum$517_strings));

	STRINGS(unnamed_enum$518)
	{
		"always",
		"when zoomed",
		"when zoomed or reloading"
	};
	STRING_LIST(unnamed_enum$518, unnamed_enum$518_strings, _countof(unnamed_enum$518_strings));

	STRINGS(unnamed_enum$519)
	{
		"none",
		"ctf flag",
		"oddball ball",
		"headhunter head",
		"juggernaut powerup"
	};
	STRING_LIST(unnamed_enum$519, unnamed_enum$519_strings, _countof(unnamed_enum$519_strings));

	STRINGS(unnamed_enum$520)
	{
		"undefined",
		"shotgun",
		"needler",
		"plasma pistol",
		"plasma rifle",
		"rocket launcher"
	};
	STRING_LIST(unnamed_enum$520, unnamed_enum$520_strings, _countof(unnamed_enum$520_strings));

	TAG_REFERENCE(vehicle_group_reference$5, VEHICLE_TAG);

	TAG_REFERENCE(weapon_group_reference$7, WEAPON_TAG);

	TAG_REFERENCE(render_model_group_reference$6, RENDER_MODEL_TAG);

	TAG_REFERENCE(character_group_reference$6, CHARACTER_TAG, _tag_reference_flag_dont_resolve_in_editor);

	VERSIONED_TAG_STRUCT(
		weapon_struct_definition,
		"weapon",
		"weapon_struct_definition",
		"s_character_weapon_properties",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 51 },
		{ _field_long_flags, "weapons flags", &unnamed_enum$147 },
		{ _field_tag_reference, "weapon", &weapon_group_reference$5 },
		FIELD_USELESS_PAD("value", 24),
		FIELD_EXPLANATION("Combat ranges", nullptr),
		{ _field_real, "maximum firing range", "we can only fire our weapon at targets within this distance", "world units" },
		{ _field_real, "minimum firing range", "weapon will not be fired at target closer than given distance" },
		{ _field_real_bounds, "normal combat range", nullptr, "world units" },
		{ _field_real, "bombardment range", "we offset our burst targets randomly by this range when firing at non-visible enemies (zero = never)" },
		{ _field_real, "Max special target distance", "Specific target regions on a vehicle or unit will be fired upon only under the given distance", "world units" },
		{ _field_real_bounds, "timid combat range", nullptr, "world units" },
		{ _field_real_bounds, "aggressive combat range", nullptr, "world units" },
		FIELD_EXPLANATION("Ballistic Firing", nullptr),
		{ _field_real, "super-ballistic range", "we try to aim our shots super-ballistically if target is outside this range (zero = never)" },
		{ _field_real_bounds, "Ballistic firing bounds", "At the min range, the min ballistic fraction is used, at the max, the max ballistic fraction is used", "world units" },
		{ _field_real_bounds, "Ballistic fraction bounds", "Controls speed and degree of arc. 0 = high, slow, 1 = low, fast", nullptr, "[0-1]" },
		FIELD_USELESS_PAD("value", 24),
		FIELD_EXPLANATION("Behavior", nullptr),
		{ _field_real_bounds, "first burst delay time", nullptr, "seconds" },
		{ _field_real, "surprise delay time", nullptr, "seconds" },
		{ _field_real, "surprise fire-wildly time", nullptr, "seconds" },
		{ _field_real, "death fire-wildly chance", nullptr, nullptr, "[0,1]" },
		{ _field_real, "death fire-wildly time", nullptr, "seconds" },
		FIELD_USELESS_PAD("value", 12),
		{ _field_real_vector_3d, "custom stand gun offset", "custom standing gun offset for overriding the default in the base actor" },
		{ _field_real_vector_3d, "custom crouch gun offset", "custom crouching gun offset for overriding the default in the base actor" },
		FIELD_USELESS_PAD("value", 12),
		FIELD_EXPLANATION("special-case firing properties", nullptr),
		{ _field_short_enum, "special-fire mode", "the type of special weapon fire that we can use", &unnamed_enum$148 },
		{ _field_short_enum, "special-fire situation", "when we will decide to use our special weapon fire mode", &unnamed_enum$149 },
		{ _field_real, "special-fire chance", "how likely we are to use our special weapon fire mode", nullptr, "[0,1]" },
		{ _field_real, "special-fire delay", "how long we must wait between uses of our special weapon fire mode", "seconds" },
		{ _field_real, "special damage modifier", "damage modifier for special weapon fire (applied in addition to the normal damage modifier. zero = no change)", nullptr, "[0,1]" },
		{ _field_angle, "special projectile error", "projectile error angle for special weapon fire (applied in addition to the normal error)", "degrees" },
		FIELD_USELESS_PAD("value", 24),
		FIELD_EXPLANATION("Weapon drop when killed", nullptr),
		{ _field_real_bounds, "drop weapon loaded", "amount of ammo loaded into the weapon that we drop (in fractions of a clip, e.g. 0.3 to 0.5)" },
		{ _field_short_integer_bounds, "drop weapon ammo", "total number of rounds in the weapon that we drop (ignored for energy weapons)" },
		FIELD_USELESS_PAD("value", 24),
		FIELD_EXPLANATION("Accuracy", "Parameters control how accuracy changes over the duration of a series of bursts\nAccuracy is an analog value between 0 and 1. At zero, the parameters of the first\nfiring-pattern block is used. At 1, the parameters in the second block is used. In\nbetween, all the values are linearly interpolated"),
		{ _field_real_bounds, "normal accuracy bounds", "Indicates starting and ending accuracies at normal difficulty" },
		{ _field_real, "normal accuracy time", "The amount of time it takes the accuracy to go from starting to ending" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real_bounds, "heroic accuracy bounds", "Indicates starting and ending accuracies at heroic difficulty" },
		{ _field_real, "heroic accuracy time", "The amount of time it takes the accuracy to go from starting to ending" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real_bounds, "legendary accuracy bounds", "Indicates starting and ending accuracies at legendary difficulty" },
		{ _field_real, "legendary accuracy time", "The amount of time it takes the accuracy to go from starting to ending" },
		FIELD_USELESS_PAD("value", 4),
		FIELD_USELESS_PAD("value", 48),
		{ _field_block, "firing patterns", &character_firing_pattern_block },
		{ _field_tag_reference, "weapon melee damage", &damage_effect_group_reference$2 },
		
		{ _struct_version_mode_equal, 0, 45 },
		{ _field_long_flags, "weapons flags", &unnamed_enum$147 },
		{ _field_tag_reference, "weapon", &weapon_group_reference$5 },
		{ _field_real, "maximum firing distance", "we can only fire our weapon at targets within this distance", "world units" },
		{ _field_real, "rate of fire", "how many times per second we pull the trigger (zero = continuously held down)" },
		{ _field_angle, "projectile error", "error added to every projectile we fire", "degrees" },
		{ _field_real_bounds, "first burst delay time", nullptr, "seconds" },
		{ _field_real, "surprise delay time", nullptr, "seconds" },
		{ _field_real, "surprise fire-wildly time", nullptr, "seconds" },
		{ _field_real, "death fire-wildly chance", nullptr, nullptr, "[0,1]" },
		{ _field_real, "death fire-wildly time", nullptr, "seconds" },
		{ _field_real_bounds, "desired combat range", nullptr, "world units" },
		{ _field_real_vector_3d, "custom stand gun offset", "custom standing gun offset for overriding the default in the base actor" },
		{ _field_real_vector_3d, "custom crouch gun offset", "custom crouching gun offset for overriding the default in the base actor" },
		{ _field_real, "target tracking", "how well our bursts track moving targets. 0.0= fire at the position they were standing when we started the burst. 1.0= fire at current position", nullptr, "[0,1]" },
		{ _field_real, "target leading", "how much we lead moving targets. 0.0= no prediction. 1.0= predict completely.", nullptr, "[0,1]" },
		{ _field_real, "weapon damage modifier", "what fraction of its normal damage our weapon inflicts (zero = no modifier)" },
		{ _field_real, "minimum firing range", "weapon will not be fired at target closer than given distance" },
		FIELD_EXPLANATION("burst geometry", "at the start of every burst we pick a random point near the target to fire at, on either the left or the right side.\nthe burst origin angle controls whether this error is exactly horizontal or might have some vertical component.\n\nover the course of the burst we move our projectiles back in the opposite direction towards the target. this return motion is also controlled by an angle that specifies how close to the horizontal it is.\n\nfor example if the burst origin angle and the burst return angle were both zero, and the return length was the same as the burst length, every burst would start the same amount away from the target (on either the left or right) and move back to exactly over the target at the end of the burst."),
		{ _field_real, "burst origin radius", "how far away from the target the starting point is", "world units" },
		{ _field_angle, "burst origin angle", "the range from the horizontal that our starting error can be", "degrees" },
		{ _field_real_bounds, "burst return length", "how far the burst point moves back towards the target (could be negative)", "world units" },
		{ _field_angle, "burst return angle", "the range from the horizontal that the return direction can be", "degrees" },
		{ _field_real_bounds, "burst duration", "how long each burst we fire is", "seconds" },
		{ _field_real_bounds, "burst separation", "how long we wait between bursts", "seconds" },
		{ _field_angle, "burst angular velocity", "the maximum rate at which we can sweep our fire (zero = unlimited)", "degrees per second" },
		FIELD_USELESS_PAD("value", 4),
		{ _field_real, "special damage modifier", "damage modifier for special weapon fire (applied in addition to the normal damage modifier. zero = no change)", nullptr, "[0,1]" },
		{ _field_angle, "special projectile error", "projectile error angle for special weapon fire (applied in addition to the normal error)", "degrees" },
		FIELD_EXPLANATION("special-case firing properties", nullptr),
		{ _field_real, "super-ballistic range", "we try to aim our shots super-ballistically if target is outside this range (zero = never)" },
		{ _field_real, "bombardment range", "we offset our burst targets randomly by this range when firing at non-visible enemies (zero = never)" },
		{ _field_short_enum, "special-fire mode", "the type of special weapon fire that we can use", &unnamed_enum$148 },
		{ _field_short_enum, "special-fire situation", "when we will decide to use our special weapon fire mode", &unnamed_enum$149 },
		{ _field_real, "special-fire chance", "how likely we are to use our special weapon fire mode", nullptr, "[0,1]" },
		{ _field_real, "special-fire delay", "how long we must wait between uses of our special weapon fire mode", "seconds" },
		FIELD_USELESS_PAD("value", 24),
		FIELD_EXPLANATION("Weapon drop when killed", nullptr),
		{ _field_real_bounds, "drop weapon loaded", "amount of ammo loaded into the weapon that we drop (in fractions of a clip, e.g. 0.3 to 0.5)" },
		{ _field_short_integer_bounds, "drop weapon ammo", "total number of rounds in the weapon that we drop (ignored for energy weapons)" },
		FIELD_USELESS_PAD("value", 12),
		FIELD_EXPLANATION("Special Targeting", nullptr),
		{ _field_real, "Max special target distance", "Specific target regions on a vehicle or unit will be fired upon only under the given distance", "world units" },
		FIELD_EXPLANATION("Ballistic firing", nullptr),
		{ _field_real_bounds, "Ballistic firing bounds", "At the min range, the min ballistic fraction is used, at the max, the max ballistic fraction is used", "world units" },
		{ _field_real_bounds, "Ballistic fraction bounds", "Controls speed and degree of arc. 0 = high, slow, 1 = low, fast", nullptr, "[0-1]" },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$147)
	{
		"bursting inhibits movement",
		"must crouch to shoot",
		"use extended safe-to-save range"
	};
	STRING_LIST(unnamed_enum$147, unnamed_enum$147_strings, _countof(unnamed_enum$147_strings));

	STRINGS(unnamed_enum$148)
	{
		"none",
		"overcharge",
		"secondary trigger"
	};
	STRING_LIST(unnamed_enum$148, unnamed_enum$148_strings, _countof(unnamed_enum$148_strings));

	STRINGS(unnamed_enum$149)
	{
		"never",
		"enemy visible",
		"enemy out of sight",
		"strafing"
	};
	STRING_LIST(unnamed_enum$149, unnamed_enum$149_strings, _countof(unnamed_enum$149_strings));

	TAG_REFERENCE(damage_effect_group_reference$2, DAMAGE_EFFECT_TAG);

	VERSIONED_TAG_STRUCT(
		weapon_tracking_struct_definition,
		"weapon_tracking",
		"weapon_tracking_struct_definition",
		"s_word$12",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 2 },
		{ _field_short_enum, "tracking type", &unnamed_enum$521 },
		FIELD_PAD("value", 2),
		
		{ _struct_version_mode_equal, 0, 0 },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$521)
	{
		"no tracking",
		"human tracking",
		"plasma tracking"
	};
	STRING_LIST(unnamed_enum$521, unnamed_enum$521_strings, _countof(unnamed_enum$521_strings));

	TAG_STRUCT(
		weapon_trigger_autofire_struct_struct_definition,
		"weapon_trigger_autofire_struct",
		"weapon_trigger_autofire_struct_struct_definition",
		"s_weapon_trigger_definitions_autofire_fields",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("AUTOFIRE", nullptr),
		{ _field_real, "autofire time" },
		{ _field_real, "autofire throw" },
		{ _field_short_enum, "secondary action", &unnamed_enum$527 },
		{ _field_short_enum, "primary action", &unnamed_enum$527 },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$527)
	{
		"fire",
		"charge",
		"track",
		"fire other"
	};
	STRING_LIST(unnamed_enum$527, unnamed_enum$527_strings, _countof(unnamed_enum$527_strings));

	TAG_STRUCT(
		weapon_trigger_charging_struct_struct_definition,
		"weapon_trigger_charging_struct",
		"weapon_trigger_charging_struct_struct_definition",
		"s_weapon_trigger_definitions_charging_fields",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_EXPLANATION("CHARGING", nullptr),
		{ _field_real, "charging time", "the amount of time it takes for this trigger to become fully charged", "seconds" },
		{ _field_real, "charged time", "the amount of time this trigger can be charged before becoming overcharged", "seconds" },
		{ _field_short_enum, "overcharged action", &unnamed_enum$528 },
		FIELD_PAD("value", 2),
		{ _field_real, "charged illumination", "the amount of illumination given off when the weapon is fully charged", nullptr, "[0,1]" },
		{ _field_real, "spew time", "length of time the weapon will spew (fire continuously) while discharging", "seconds" },
		{ _field_tag_reference, "charging effect", "the charging effect is created once when the trigger begins to charge", &sound_group_effect_group_reference$2 },
		{ _field_tag_reference, "charging damage effect", "the charging effect is created once when the trigger begins to charge", &damage_effect_group_reference },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$528)
	{
		"none",
		"explode",
		"discharge"
	};
	STRING_LIST(unnamed_enum$528, unnamed_enum$528_strings, _countof(unnamed_enum$528_strings));

	TAG_STRUCT(
		weapon_triggers_struct_definition,
		"weapon_triggers",
		"weapon_triggers_struct_definition",
		"s_weapon_trigger_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_long_flags, "flags", &unnamed_enum$523 },
		{ _field_short_enum, "input", &unnamed_enum$524 },
		{ _field_short_enum, "behavior", &unnamed_enum$525 },
		{ _field_short_block_index, "primary barrel" },
		{ _field_short_block_index, "secondary barrel" },
		{ _field_short_enum, "prediction", &unnamed_enum$526 },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 28),
		{ _field_struct, "autofire", &weapon_trigger_autofire_struct_struct_definition, _field_id_wtas },
		{ _field_struct, "charging", &weapon_trigger_charging_struct_struct_definition, _field_id_wtcs },
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$523)
	{
		"autofire single action only"
	};
	STRING_LIST(unnamed_enum$523, unnamed_enum$523_strings, _countof(unnamed_enum$523_strings));

	STRINGS(unnamed_enum$524)
	{
		"right trigger",
		"left trigger",
		"melee attack"
	};
	STRING_LIST(unnamed_enum$524, unnamed_enum$524_strings, _countof(unnamed_enum$524_strings));

	STRINGS(unnamed_enum$525)
	{
		"spew",
		"latch",
		"latch-autofire",
		"charge",
		"latch-zoom",
		"latch-rocketlauncher"
	};
	STRING_LIST(unnamed_enum$525, unnamed_enum$525_strings, _countof(unnamed_enum$525_strings));

	STRINGS(unnamed_enum$526)
	{
		"none",
		"spew",
		"charge"
	};
	STRING_LIST(unnamed_enum$526, unnamed_enum$526_strings, _countof(unnamed_enum$526_strings));

	TAG_STRUCT(
		weapon_type_block_struct_definition,
		"weapon_type_block",
		"weapon_type_block_struct_definition",
		"s_weapon_type",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_string_id, "label" },
		{ _field_block, "actions", &animation_entry_block },
		{ _field_block, "overlays", &animation_entry_block },
		{ _field_block, "death and damage", &damage_animation_block },
		{ _field_block, "transitions", &animation_transition_block },
		{ _field_block, "high precache", &precache_list_block },
		{ _field_block, "low precache", &precache_list_block },
		{ _field_terminator }
	};

	TAG_STRUCT(
		weapons_block_struct_definition,
		"weapons_block",
		"weapons_block_struct_definition",
		"s_tag_reference$6",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_tag_reference, "weapon", &item_group_reference },
		{ _field_terminator }
	};

	TAG_STRUCT(
		weather_system_block_struct_definition,
		"weather_system_block",
		"weather_system_block_struct_definition",
		"s_weather_system",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_block, "particle system", &global_particle_system_lite_block },
		{ _field_block, "background plates", &global_weather_background_plate_block },
		{ _field_struct, "wind model", &global_wind_model_struct_struct_definition, _field_id_WNDM },
		{ _field_real, "fade radius" },
		{ _field_terminator }
	};

	TAG_STRUCT(
		wind_block_struct_definition,
		"wind_block",
		"wind_block_struct_definition",
		"s_wind_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _field_real_bounds, "velocity", "the wind magnitude in the weather region scales the wind between these bounds", "world units" },
		{ _field_real_euler_angles_2d, "variation area", "the wind direction varies inside a box defined by these angles on either side of the direction from the weather region." },
		{ _field_real, "local variation weight" },
		{ _field_real, "local variation rate" },
		{ _field_real, "damping" },
		FIELD_PAD("value", 36),
		{ _field_terminator }
	};

	TAG_STRUCT(
		window_pane_reference_block_struct_definition,
		"window_pane_reference_block",
		"window_pane_reference_block_struct_definition",
		"s_window_pane_reference",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		FIELD_PAD("value", 2),
		{ _field_short_enum, "animation index", &unnamed_enum$424 },
		FIELD_EXPLANATION("Button Definitions", "If the pane contains buttons, define them here"),
		{ _field_block, "buttons", &button_widget_reference_block },
		FIELD_EXPLANATION("List Definition", "If the pane contains a list, define it here"),
		{ _field_block, "list block", &list_reference_block },
		FIELD_EXPLANATION("OBSOLETE Table View Definition", "If the pane contains a table-view, define it here"),
		{ _field_block, "table view", &table_view_list_reference_block },
		FIELD_EXPLANATION("Flavor Item Blocks", "Define additional flavor items here"),
		{ _field_block, "text blocks", &text_block_reference_block },
		{ _field_block, "bitmap blocks", &bitmap_block_reference_block },
		{ _field_block, "model scene blocks", &ui_model_scene_reference_block },
		FIELD_EXPLANATION("UNUSED", "these are all OBSOLETE"),
		{ _field_block, "text-value blocks", &s_text_value_pair_blocks_block_unused_block },
		{ _field_block, "hud blocks", &hud_block_reference_block },
		{ _field_block, "player blocks", &player_block_reference_block },
		{ _field_terminator }
	};

	VERSIONED_TAG_STRUCT(
		zone_set_struct_definition,
		"zone_set",
		"zone_set_struct_definition",
		"s_orders_area_reference_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 4 },
		{ _field_short_enum, "area type", &unnamed_enum$81 },
		FIELD_PAD("value", 2),
		{ _field_short_block_index, "zone" },
		{ _field_short_block_index_custom_search, "area" },
		
		{ _struct_version_mode_equal, 0, 3 },
		{ _field_long_integer, "flags" },
		{ _field_short_block_index, "zone" },
		{ _field_short_block_index_custom_search, "area" },
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$81)
	{
		"deault",
		"search",
		"goal"
	};
	STRING_LIST(unnamed_enum$81, unnamed_enum$81_strings, _countof(unnamed_enum$81_strings));

	VERSIONED_TAG_STRUCT(
		zone_v2_struct_definition,
		"zone_v2",
		"zone_v2_struct_definition",
		"s_zone_definition",
		SET_DEFAULT,
		TAG_MEMORY_ATTRIBUTES(MEMORY_ALLOCATION_DEFAULT, TAG_MEMORY_USAGE_READ_ONLY),
		PERSISTENT_ID_EMPTY)
	{
		{ _struct_version_mode_greater_or_equal, 1, 7 },
		{ _field_string, "name" },
		{ _field_long_flags, "flags", &unnamed_enum$72 },
		{ _field_short_block_index, "manual bsp" },
		FIELD_PAD("value", 2),
		FIELD_USELESS_PAD("value", 24),
		{ _field_block, "firing positions", &firing_positions_block },
		{ _field_block, "areas", &areas_block },
		
		{ _struct_version_mode_equal, 0, 11 },
		{ _field_string, "name" },
		{ _field_long_flags, "flags", &unnamed_enum$72 },
		{ _field_short_integer, "manual bsp index" },
		FIELD_PAD("value", 2),
		FIELD_PAD("value", 40),
		{ _field_block, "firing positions", &firing_positions_block },
		{ _field_block, "player starting locations", &scenario_players_block },
		{ _field_block, "areas", &areas_block },
		{ _field_block, "orders", &orders_block },
		{ _field_block, "starting locations", &actor_starting_locations_block },
		FIELD_PAD("value", 88),
		
		{ _field_terminator }
	};

	STRINGS(unnamed_enum$72)
	{
		"manual bsp index"
	};
	STRING_LIST(unnamed_enum$72, unnamed_enum$72_strings, _countof(unnamed_enum$72_strings));

	TAG_DATA(
		aligned_animation_data_definition,
		"aligned_animation_data_definition",
		0,
		4,
		34516486,
		k_max_animation_data_size);

	TAG_DATA(
		animation_data_definition,
		"animation_data_definition",
		0,
		0,
		34516486,
		k_max_animation_data_size);

	TAG_DATA(
		bitmap_pixel_data,
		"bitmap_pixel_data",
		0,
		0,
		1073741824,
		MAXIMUM_BITMAP_PIXELS_SIZE);

	TAG_DATA(
		cluster_mopp_code_data,
		"cluster_mopp_code_data",
		0,
		4,
		1048576,
		k_meg);

	TAG_DATA(
		cluster_remap_table_tag_data_definition,
		"cluster_remap_table_tag_data_definition",
		0,
		0,
		512,
		sizeof(long)*MAXIMUM_CLUSTERS_PER_VISIBILITY_REGION);

	TAG_DATA(
		code_block,
		"code_block",
		6,
		0,
		65535,
		UNSIGNED_SHORT_MAX);

	TAG_DATA(
		color_plate_data,
		"color_plate_data",
		1,
		0,
		1073741824,
		MAXIMUM_BITMAP_PIXELS_SIZE);

	TAG_DATA(
		compiled_pixel_shader_block,
		"compiled_pixel_shader_block",
		0,
		0,
		4096,
		c_pixel_shader_definition::k_maximum_pixel_shader_size);

	TAG_DATA(
		compiled_shader_block,
		"compiled_shader_block",
		0,
		0,
		131072,
		c_vertex_shader_classification::k_maximum_vertex_shader_size);

	TAG_DATA(
		editor_scenario_data_definition,
		"editor_scenario_data_definition",
		4,
		0,
		65536,
		MAXIMUM_EDITOR_SCENARIO_DATA_SIZE);

	TAG_DATA(
		error_report_string_data$2,
		"error_report_string_data",
		2,
		0,
		131072,
		k_max_error_string_length);

	TAG_DATA(
		error_report_string_data,
		"error_report_string_data",
		2,
		0,
		8192,
		MAXIMUM_ERROR_REPORT_STRING_LENGTH+1);

	TAG_DATA(
		generic_tag_data,
		"generic_tag_data",
		0,
		0,
		301989888,
		MAX(MAXIMUM_SOUND_MOUTH_DATA_SIZE, MAXIMUM_SOUND_LIPSYNC_DATA_SIZE)*MAXIMUM_PITCH_RANGES_PER_SOUND*MAXIMUM_PERMUTATIONS_PER_PITCH_RANGE);

	TAG_DATA(
		global_geometry_runtime_plane_data_definition,
		"global_geometry_runtime_plane_data_definition",
		0,
		4,
		2097120,
		MAXIMUM_BYTES_PER_GEOMETRY_RUNTIME_ISQ_PLANE_DATA);

	TAG_DATA(
		global_geometry_runtime_point_data_definition,
		"global_geometry_runtime_point_data_definition",
		0,
		0,
		1048544,
		MAXIMUM_BYTES_PER_GEOMETRY_RUNTIME_POINT_DATA);

	TAG_DATA(
		global_section_mopp_code_data,
		"global_section_mopp_code_data",
		0,
		4,
		393216,
		k_maximum_structure_bsp_cluster_visibility_mopp_size);

	TAG_DATA(
		hs_old_syntax_data_definition,
		"hs_old_syntax_data_definition",
		0,
		0,
		737356,
		(sizeof(s_data_array)+k_maximum_hs_syntax_nodes_per_scenario*sizeof(struct hs_syntax_node)));

	TAG_DATA(
		hs_source_data_definition,
		"hs_source_data_definition",
		2,
		0,
		1048576,
		k_maximum_hs_source_data_per_file);

	TAG_DATA(
		hs_string_data_definition,
		"hs_string_data_definition",
		0,
		0,
		819200,
		k_maximum_hs_string_data_per_scenario);

	TAG_DATA(
		large_permutation_sound_samples,
		"large_permutation_sound_samples",
		1,
		0,
		134217728,
		MAXIMUM_SOUND_DATA_SIZE);

	TAG_DATA(
		meter_stencil_data_definition,
		"meter_stencil_data_definition",
		0,
		0,
		65536,
		MAXIMUM_METER_DEFINITION_ENCODED_STENCIL_SIZE);

	TAG_DATA(
		mopp_code_data,
		"mopp_code_data",
		0,
		4,
		1048576,
		k_maximum_mopp_code_size);

	TAG_DATA(
		mopp_codes_data,
		"mopp_codes_data",
		0,
		4,
		1048576,
		k_maximum_mopp_codes_size);

	TAG_DATA(
		mopp_codes_data$2,
		"mopp_codes_data",
		0,
		4,
		1048576,
		k_maximum_mopp_codes_size);

	TAG_DATA(
		old_sound_samples,
		"old_sound_samples",
		1,
		0,
		134217728,
		MAXIMUM_SOUND_DATA_SIZE);

	TAG_DATA(
		old_unused_mopp_code_data,
		"old_unused_mopp_code_data",
		0,
		4,
		1048576,
		k_maximum_mopp_code_size);

	TAG_DATA(
		parameters_text_definition,
		"parameters_text_definition",
		6,
		0,
		65535,
		UNSIGNED_SHORT_MAX);

	TAG_DATA(
		projection_tag_data_definition,
		"projection_tag_data_definition",
		0,
		0,
		2664,
		sizeof(struct visibility_projection)*MAXIMUM_PROJECTIONS_PER_VISIBILITY_REGION);

	TAG_DATA(
		rasterizer_screen_effect_text_definition,
		"rasterizer_screen_effect_text_definition",
		6,
		0,
		65535,
		UNSIGNED_SHORT_MAX);

	TAG_DATA(
		recorded_animation_event_stream_data,
		"recorded_animation_event_stream_data",
		0,
		0,
		2097152,
		MAXIMUM_RECORDED_ANIMATION_DATA_SIZE);

	TAG_DATA(
		shader_postprocess_compiled_pixel_shader_data,
		"shader_postprocess_compiled_pixel_shader_data",
		0,
		0,
		98304,
		k_max_ps_code_size);

	TAG_DATA(
		shader_text_definition,
		"shader_text_definition",
		6,
		0,
		65535,
		UNSIGNED_SHORT_MAX);

	TAG_DATA(
		sound_effect_hardware_format_data_definition,
		"sound_effect_hardware_format_data_definition",
		0,
		2,
		1024,
		k_maximum_sound_effect_hardware_format_size);

	TAG_DATA(
		sound_effect_template_explanation,
		"sound_effect_template_explanation",
		6,
		0,
		65536,
		64*k_kilo);

	TAG_DATA(
		sound_lipsync_data,
		"sound_lipsync_data",
		0,
		0,
		1048576,
		MAXIMUM_SOUND_LIPSYNC_DATA_SIZE);

	TAG_DATA(
		sound_mouth_data,
		"sound_mouth_data",
		0,
		0,
		8192,
		MAXIMUM_SOUND_MOUTH_DATA_SIZE);

	TAG_DATA(
		sound_samples,
		"sound_samples",
		1,
		0,
		134217728,
		MAXIMUM_SOUND_DATA_SIZE);

	TAG_DATA(
		sound_subtitle_data,
		"sound_subtitle_data",
		0,
		0,
		512,
		MAXIMUM_SOUND_SUBTITLE_DATA_SIZE);

	TAG_DATA(
		string_data_definition,
		"string_data_definition",
		2,
		0,
		65536,
		MAXIMUM_MESSAGE_STRING_DATA_SIZE);

	TAG_DATA(
		structure_bsp_cluster_data_definition,
		"structure_bsp_cluster_data_definition",
		0,
		0,
		65536,
		MAXIMUM_CLUSTER_DATA_SIZE);

	TAG_DATA(
		structure_bsp_cluster_encoded_sound_data,
		"structure_bsp_cluster_encoded_sound_data",
		0,
		0,
		131072,
		(MAXIMUM_CLUSTERS_PER_STRUCTURE*MAXIMUM_CLUSTERS_PER_STRUCTURE/2)*sizeof(byte));

	TAG_DATA(
		structure_bsp_cluster_visibility_mopp_code_data,
		"structure_bsp_cluster_visibility_mopp_code_data",
		0,
		4,
		393216,
		k_maximum_structure_bsp_cluster_visibility_mopp_size);

	TAG_DATA(
		structure_bsp_cluster_visibility_subcluster_bitvector,
		"structure_bsp_cluster_visibility_subcluster_bitvector",
		0,
		0,
		1024,
		BIT_VECTOR_SIZE_IN_LONGS(k_maximum_structure_bsp_subclusters_per_cluster));

	TAG_DATA(
		tag_import_file_zipped_data_definition,
		"tag_import_file_zipped_data_definition",
		5,
		0,
		134217728,
		MAXIMUM_TAG_IMPORT_FILE_ZIPPED_DATA_SIZE_IN_BYTES);

	TAG_DATA(
		utf8_string_data,
		"utf8_string_data",
		2,
		0,
		18874368,
		k_maximum_multilingual_unicode_strings_per_string_list * k_normal_text_count * 4);

	TAG_DATA(
		visibility_clusters_tag_data_definition,
		"visibility_clusters_tag_data_definition",
		0,
		0,
		3328,
		sizeof(struct visibility_cluster)*MAXIMUM_CLUSTERS_PER_VISIBILITY_REGION);

	TAG_DATA(
		visibility_volumes_table_tag_data_definition,
		"visibility_volumes_table_tag_data_definition",
		0,
		0,
		135168,
		sizeof(struct visibility_volume)*MAXIMUM_VOLUMES_PER_VISIBILITY_REGION);

}
