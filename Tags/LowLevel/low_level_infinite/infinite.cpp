#include <lowlevel-infinite-private-pch.h>



template<> void byteswap<blofeld::infinite::s_s_anytagguts>(blofeld::infinite::s_s_anytagguts& value)
{
	byteswap(value.global_tag_id);
}

template<> void byteswap<blofeld::infinite::s_anytag_struct_definition>(blofeld::infinite::s_anytag_struct_definition& value)
{
	byteswap(value.vtable_space);
	byteswap(value.internal_struct);
}

template<> void byteswap<blofeld::infinite::s_s_object_meta_label>(blofeld::infinite::s_s_object_meta_label& value)
{
	byteswap(value.meta_label);
}

template<> void byteswap<blofeld::infinite::s_ambientactioninfo>(blofeld::infinite::s_ambientactioninfo& value)
{
	byteswap(value.desire_type);
	byteswap(value.action);
	byteswap(value.animation_token_override);
	byteswap(value.time_playing_animation);
	byteswap(value.cooldown_time);
	byteswap(value.composition_name);
	byteswap(value.composition_definition);
	byteswap(value.max_distance_agents_will_consider_this_opp_from);
	byteswap(value.ambient_meta_labels_block);
	byteswap(value.exclusion_meta_labels_block);
	byteswap(value.min_danger_to_activate);
	byteswap(value.max_danger_to_activate);
	byteswap(value.abort_danger_level);
	byteswap(value.chance_per_second);
	byteswap(value.min_enemy_target_distance);
	byteswap(value.max_enemy_target_distance);
	byteswap(value.max_height_difference);
}

template<> void byteswap<blofeld::infinite::s_ambientactionpointdefinition>(blofeld::infinite::s_ambientactionpointdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.ambient_info_block);
}

template<> void byteswap<blofeld::infinite::s_abcarchivepointer>(blofeld::infinite::s_abcarchivepointer& value)
{
	byteswap(value.archive_read_pointer);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_abcstat>(blofeld::infinite::s_abcstat& value)
{
	byteswap(value.name);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_abcsourcefiletag>(blofeld::infinite::s_abcsourcefiletag& value)
{
	byteswap(value.anytag);
	byteswap(value.ptr);
	byteswap(value.dccsourcepath);
	byteswap(value.asset);
	byteswap(value.dcc_instance_name);
	byteswap(value.dcc_start_frame);
	byteswap(value.frame_count);
	byteswap(value.frames_per_second);
	byteswap(value.statistics_block);
}

template<> void byteswap<blofeld::infinite::s_assetentry>(blofeld::infinite::s_assetentry& value)
{
	byteswap(value.asset);
}

template<> void byteswap<blofeld::infinite::s_keywordqueryentry>(blofeld::infinite::s_keywordqueryentry& value)
{
	byteswap(value.query);
}

template<> void byteswap<blofeld::infinite::s_assetcollectiontag>(blofeld::infinite::s_assetcollectiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.assets_block);
	byteswap(value.querymode);
	byteswap(value.keyword_queries_block);
}

template<> void byteswap<blofeld::infinite::s_i343aisquadconstructionactorcellentry>(blofeld::infinite::s_i343aisquadconstructionactorcellentry& value)
{
	byteswap(value.anytag);
	byteswap(value.character);
	byteswap(value.primary_weapon);
	byteswap(value.secondary_weapon);
}

template<> void byteswap<blofeld::infinite::s_i343contenttagsteammatechatter>(blofeld::infinite::s_i343contenttagsteammatechatter& value)
{
	byteswap(value.chatter_dialogue);
}

template<> void byteswap<blofeld::infinite::s_assetdialoguetag>(blofeld::infinite::s_assetdialoguetag& value)
{
	byteswap(value.anytag);
	byteswap(value.teammate_male_chatter_block);
	byteswap(value.teammate_female_chatter_block);
}

template<> void byteswap<blofeld::infinite::s_defaultstimulussuppressorparam>(blofeld::infinite::s_defaultstimulussuppressorparam& value)
{
	byteswap(value.stimulus);
}

template<> void byteswap<blofeld::infinite::s_dialoguesystemdatatagreference>(blofeld::infinite::s_dialoguesystemdatatagreference& value)
{
	byteswap(value.dialogue_system_data_tag);
}

template<> void byteswap<blofeld::infinite::s_ai_dialogue_definitions>(blofeld::infinite::s_ai_dialogue_definitions& value)
{
	byteswap(value.anytag);
	byteswap(value.strike_delay_bounds);
	byteswap(value.remind_delay);
	byteswap(value.post_combat_results_wait_time);
	byteswap(value.grapple_hook_pull_delay_time);
	byteswap(value.player_shoot_min_interval);
	byteswap(value.actor_shoot_min_interval);
	byteswap(value.cover_curse_chance);
	byteswap(value.player_look_max_distance);
	byteswap(value.player_look);
	byteswap(value.player_look_long_time);
	byteswap(value.spartan_nearby_search_distance$2);
	byteswap(value.face_friendly_player_distance$2);
	byteswap(value.space_dialogue_effect$2);
	byteswap(value.max_respond_distance);
	byteswap(value.max_respond_distance_in_space);
	byteswap(value.speaker_max_delta);
	byteswap(value.pattern_max_delta);
	byteswap(value.player_shield_damage_threshold);
	byteswap(value.player_body_damage_threshold);
	byteswap(value.max_player_distance);
	byteswap(value.default_stimulus_suppressors_block);
	byteswap(value.dsd_tags_block);
	byteswap(value.runtime_dialogue_system_data);
}

template<> void byteswap<blofeld::infinite::s_i343aiairdropairdropsystemglobalsdefinition>(blofeld::infinite::s_i343aiairdropairdropsystemglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.default_flight_path_kit);
}

template<> void byteswap<blofeld::infinite::s_namedhlodsettings>(blofeld::infinite::s_namedhlodsettings& value)
{
	byteswap(value.hlod_settings_preset_list);
	byteswap(value.hlod_settings_name);
}

template<> void byteswap<blofeld::infinite::s_autohlodlevelsettings>(blofeld::infinite::s_autohlodlevelsettings& value)
{
	byteswap(value.hlod_settings);
	byteswap(value.switch_distance);
	byteswap(value.maximum_lod);
}

template<> void byteswap<blofeld::infinite::s_autohlodsettings>(blofeld::infinite::s_autohlodsettings& value)
{
	byteswap(value.anytag);
	byteswap(value.x_splits);
	byteswap(value.y_splits);
	byteswap(value.z_splits);
	byteswap(value.bsp_hlod_settings);
	byteswap(value.bsp_cell_hlod_settings);
}

template<> void byteswap<blofeld::infinite::s_i343damagedamagesourcedefinition>(blofeld::infinite::s_i343damagedamagesourcedefinition& value)
{
	byteswap(value.damage_source_name);
}

template<> void byteswap<blofeld::infinite::s_s_ai_globals_gravemind_definition>(blofeld::infinite::s_s_ai_globals_gravemind_definition& value)
{
	byteswap(value.min_retreat_time);
	byteswap(value.ideal_retreat_time);
	byteswap(value.max_retreat_time);
}

template<> void byteswap<blofeld::infinite::s_s_ai_globals_formation_definition>(blofeld::infinite::s_s_ai_globals_formation_definition& value)
{
	byteswap(value.formation);
}

template<> void byteswap<blofeld::infinite::s_s_ai_globals_squad_template_definition>(blofeld::infinite::s_s_ai_globals_squad_template_definition& value)
{
	byteswap(value.squad_template);
}

template<> void byteswap<blofeld::infinite::s_s_ai_globals_squad_template_sub_folder_definition>(blofeld::infinite::s_s_ai_globals_squad_template_sub_folder_definition& value)
{
	byteswap(value.sub_folder_name);
	byteswap(value.templates_block);
}

template<> void byteswap<blofeld::infinite::s_s_ai_globals_squad_template_folder_definition>(blofeld::infinite::s_s_ai_globals_squad_template_folder_definition& value)
{
	byteswap(value.folder_name);
	byteswap(value.sub_folders_block);
	byteswap(value.templates_block);
}

template<> void byteswap<blofeld::infinite::s_s_ai_globals_custom_stimulus_definition>(blofeld::infinite::s_s_ai_globals_custom_stimulus_definition& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_s_ai_globals_trait_vision_definition>(blofeld::infinite::s_s_ai_globals_trait_vision_definition& value)
{
	byteswap(value.vision_distance_scale);
	byteswap(value.vision_angle_scale);
}

template<> void byteswap<blofeld::infinite::s_s_ai_globals_trait_sound_definition>(blofeld::infinite::s_s_ai_globals_trait_sound_definition& value)
{
	byteswap(value.hearing_distance_scale);
}

template<> void byteswap<blofeld::infinite::s_s_ai_globals_trait_luck_definition>(blofeld::infinite::s_s_ai_globals_trait_luck_definition& value)
{
	byteswap(value.evasion_chance_scale);
	byteswap(value.grenade_dive_chance_scale);
	byteswap(value.broken_kamikaze_chance_scale);
	byteswap(value.leader_dead_retreat_chance_scale);
	byteswap(value.dive_retreat_chance_scale);
	byteswap(value.shield_depleted_berserk_chance_scale);
	byteswap(value.leader_abandoned_berserk_chance_scale);
	byteswap(value.melee_attack_delay_timer_scale);
	byteswap(value.melee_chance_scale);
	byteswap(value.melee_leap_delay_timer_scale);
	byteswap(value.throw_grenade_delay_scale);
}

template<> void byteswap<blofeld::infinite::s_s_ai_globals_trait_grenade_definition>(blofeld::infinite::s_s_ai_globals_trait_grenade_definition& value)
{
	byteswap(value.velocity_scale);
	byteswap(value.throw_grenade_delay_scale);
	byteswap(value.dont_drop_grenades_chance_scale);
	byteswap(value.grenade_uncover_chance_scale);
	byteswap(value.retreat_throw_grenade_chance_scale);
	byteswap(value.anti_vehicle_grenade_chance_scale);
	byteswap(value.throw_grenade_chance_scale);
}

template<> void byteswap<blofeld::infinite::s_functiondefinition>(blofeld::infinite::s_functiondefinition& value)
{
	byteswap(value.data);
}

template<> void byteswap<blofeld::infinite::s_scalarfunctionname>(blofeld::infinite::s_scalarfunctionname& value)
{
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_i343aiaimarkupfilter>(blofeld::infinite::s_i343aiaimarkupfilter& value)
{
	byteswap(value.actor_type);
}

template<> void byteswap<blofeld::infinite::s_friendlysquadproperties>(blofeld::infinite::s_friendlysquadproperties& value)
{
	byteswap(value.follow_actor_types_block);
	byteswap(value.encounter_zone_exit_threshold);
	byteswap(value.dynamic_encounter_radius);
	byteswap(value.follow_radius);
	byteswap(value.area_refresh_distance);
	byteswap(value.maximum_follow_path_length);
	byteswap(value.waiting_distance_threshold);
	byteswap(value.minimum_waiting_time);
	byteswap(value.area_refresh_time);
	byteswap(value.new_vehicle_distance);
	byteswap(value.non_turret_passenger_exit_time);
	byteswap(value.turret_passenger_exit_time);
	byteswap(value.turret_passenger_exit_distance);
	byteswap(value.arrival_dialogue_event_min_delay_time);
	byteswap(value.arrival_dialogue_event_min_travel_distance);
}

template<> void byteswap<blofeld::infinite::s_pathingcostmodifiers>(blofeld::infinite::s_pathingcostmodifiers& value)
{
	byteswap(value.damage_area);
	byteswap(value.no_drive_zone);
	byteswap(value.avoid_area);
}

template<> void byteswap<blofeld::infinite::s_s_ai_globals_data>(blofeld::infinite::s_s_ai_globals_data& value)
{
	byteswap(value.ai_infantry_on_ai_weapon_damage_scale);
	byteswap(value.ai_vehicle_on_ai_weapon_damage_scale);
	byteswap(value.ai_player_vehicle_on_ai_weapon_damage_scale);
	byteswap(value.absolute_maximum_ai_hearing_distance_);
	byteswap(value.absolute_maximum_ai_speech_distance_);
	byteswap(value.maximum_individual_prop_perceived_danger);
	byteswap(value.quiet_perception_distance_fraction);
	byteswap(value.medium_perception_distance_fraction);
	byteswap(value.shout_perception_distance_fraction);
	byteswap(value.aisuicidedamagesource);
	byteswap(value.danger_broadly_facing);
	byteswap(value.danger_shooting_near);
	byteswap(value.danger_shooting_at);
	byteswap(value.danger_extremely_close);
	byteswap(value.danger_shield_damage);
	byteswap(value.danger_exetended_shield_damage);
	byteswap(value.danger_body_damage);
	byteswap(value.danger_extended_body_damage);
	byteswap(value.global_dialogue_tag);
	byteswap(value.default_mission_dialogue_sound_effect);
	byteswap(value.jump_velocity___very_short);
	byteswap(value.jump_velocity___short);
	byteswap(value.jump_velocity___medium_short);
	byteswap(value.jump_velocity___medium_long);
	byteswap(value.jump_velocity___long);
	byteswap(value.jump_velocity___very_long);
	byteswap(value.max_jump_down_height___very_short);
	byteswap(value.max_jump_down_height___short);
	byteswap(value.max_jump_down_height___medium_short);
	byteswap(value.max_jump_down_height___medium_long);
	byteswap(value.max_jump_down_height___long);
	byteswap(value.max_jump_down_height___very_long);
	byteswap(value.hoist_step);
	byteswap(value.hoist_crouch);
	byteswap(value.hoist_stand);
	byteswap(value.vault_step);
	byteswap(value.vault_crouch);
	byteswap(value.search_range_infantry);
	byteswap(value.search_range_flying);
	byteswap(value.search_range_vehicle);
	byteswap(value.search_range_giant);
	byteswap(value.ai_seat_cooldown);
	byteswap(value.alert_stagger_delay_max);
	byteswap(value.berserk_animation_suppress_radius);
	byteswap(value.gravemind_properties_block);
	byteswap(value.scary_target_threhold);
	byteswap(value.scary_weapon_threhold);
	byteswap(value.player_scariness);
	byteswap(value.player_desires_healing_health_threshold);
	byteswap(value.player_desires_healing_shield_threshold);
	byteswap(value.berserking_actor_scariness);
	byteswap(value.kamikazeing_actor_scariness);
	byteswap(value.min_death_time);
	byteswap(value.projectile_distance);
	byteswap(value.idle_clump_distance);
	byteswap(value.dangerous_clump_distance);
	byteswap(value.cover_search_duration);
	byteswap(value.task_direction_search_duration);
	byteswap(value.time_unseen_before_teleport_allowed);
	byteswap(value.time_isolated_before_exiting_vehicle);
	byteswap(value.time_isolated_before_can_attempt_kill);
	byteswap(value.time_unseen_before_kill_allowed);
	byteswap(value.time_isolated_before_force_killed);
	byteswap(value.spawn_formations_block);
	byteswap(value.squad_template_folders_block);
	byteswap(value.custom_stimuli_block);
	byteswap(value.stop_dist);
	byteswap(value.resume_dist);
	byteswap(value.min_dist);
	byteswap(value.max_dist);
	byteswap(value.min_scale);
	byteswap(value.passthrough_chance);
	byteswap(value.search_phase_skip_chance);
	byteswap(value.patrol_transition_timeout);
	byteswap(value.patrol_maneuver_timeout);
	byteswap(value.patrol_search_firing_point_time);
	byteswap(value.patrol_isolation_distance);
	byteswap(value.patrol_isolation_time);
	byteswap(value.kungfu_deactivation_delay);
	byteswap(value.suppressing_fire_count);
	byteswap(value.uncover_count);
	byteswap(value.leap_on_cover_count);
	byteswap(value.destroy_cover_count);
	byteswap(value.guard_count);
	byteswap(value.investigate_count);
	byteswap(value.search_by_fire_count);
	byteswap(value.vision_traits_block);
	byteswap(value.sound_traits_block);
	byteswap(value.luck_traits_block);
	byteswap(value.grenade_traits_block);
	byteswap(value.max_decay_time);
	byteswap(value.decay_time_ping);
	byteswap(value.search_pattern_radius);
	byteswap(value.search_pattern_shell_count);
	byteswap(value.search_pattern_cells_per_shell_range);
	byteswap(value.playfight_burst_duration_mod);
	byteswap(value.playfight_burst_error_mod);
	byteswap(value.playfight_burst_error_bonus);
	byteswap(value.playfight_burst_radius_mod);
	byteswap(value.playfight_grenade_miss_distance);
	byteswap(value.playfight_damage_mod);
	byteswap(value.playfight_distance_thresholds);
	byteswap(value.distance_function);
	byteswap(value.position_discrepancy_below_which_throttle_fixups_are_used_exclusively);
	byteswap(value.positional_discrepancy_below_which_throttle_fixups_are_not_used_if_authority_is_stopped);
	byteswap(value.predict_ahead_time);
	byteswap(value.simulation_interpolation_parameters);
	byteswap(value.action_simulation_interpolation_parameters);
	byteswap(value.jump_takeoff_warp_threshold);
	byteswap(value.default_max_active_camouflage);
	byteswap(value.max_player_lof_crouch_distance);
	byteswap(value.player_lof_crouch_time);
	byteswap(value.player_lof_stand_time);
	byteswap(value.vehicle_exit_after_player_delay_time);
	byteswap(value.slip_space_spawning_effect);
	byteswap(value.ambient_info_block);
	byteswap(value.friendly_squad_properties_block);
	byteswap(value.pathing_cost_modifiers_block);
}

template<> void byteswap<blofeld::infinite::s_s_ai_globals_definition>(blofeld::infinite::s_s_ai_globals_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.data_block);
}

template<> void byteswap<blofeld::infinite::s_attachedlightcone>(blofeld::infinite::s_attachedlightcone& value)
{
	byteswap(value.anytag);
	byteswap(value.light_cone_definition);
	byteswap(value.color);
	byteswap(value.intensity);
	byteswap(value.length);
	byteswap(value.width);
	byteswap(value.camera_fade_near);
	byteswap(value.camera_fade_far);
	byteswap(value.lengthwise_offset_percentage);
}

template<> void byteswap<blofeld::infinite::s_animatedmesh>(blofeld::infinite::s_animatedmesh& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.version);
	byteswap(value.authored_fps);
	byteswap(value.resource_frame_count);
	byteswap(value.perframe_rigid_body_resources);
}

template<> void byteswap<blofeld::infinite::s_physicsunsafeobjectfunctionentry>(blofeld::infinite::s_physicsunsafeobjectfunctionentry& value)
{
	byteswap(value.object_function_name);
}

template<> void byteswap<blofeld::infinite::s_animglobals>(blofeld::infinite::s_animglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.physics_unsafe_object_functions_block);
}

template<> void byteswap<blofeld::infinite::s_subgraphreferenceexportedanimnodegraph>(blofeld::infinite::s_subgraphreferenceexportedanimnodegraph& value)
{
	byteswap(value.anim_subgraph);
}

template<> void byteswap<blofeld::infinite::s_subgraphreferenceanimstategraph>(blofeld::infinite::s_subgraphreferenceanimstategraph& value)
{
	byteswap(value.state_subgraph);
}

template<> void byteswap<blofeld::infinite::s_i343animationcontrolparameter>(blofeld::infinite::s_i343animationcontrolparameter& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_i343animationlocalcontrolparametersdefinition>(blofeld::infinite::s_i343animationlocalcontrolparametersdefinition& value)
{
	byteswap(value.int_control_parameters_block);
	byteswap(value.float_control_parameters_block);
	byteswap(value.vector_control_parameters_block);
	byteswap(value.bool_control_parameters_block);
	byteswap(value.string_control_parameters_block);
}

template<> void byteswap<blofeld::infinite::s_blackboardentrydescriptor>(blofeld::infinite::s_blackboardentrydescriptor& value)
{
	byteswap(value.data_type);
	byteswap(value.blackboard_id);
}

template<> void byteswap<blofeld::infinite::s_animgraphconnection>(blofeld::infinite::s_animgraphconnection& value)
{
	byteswap(value.source_node_type);
	byteswap(value.source_node_index);
	byteswap(value.source_pin_index);
	byteswap(value.destination_node_type);
	byteswap(value.destination_node_index);
	byteswap(value.destination_pin_index);
}

template<> void byteswap<blofeld::infinite::s_animationtokennode>(blofeld::infinite::s_animationtokennode& value)
{
	byteswap(value.animation_name);
	byteswap(value.group_name);
	byteswap(value.mode);
	byteswap(value.playback_rate);
	byteswap(value.animation_token_flags);
}

template<> void byteswap<blofeld::infinite::s_animationexistsnode>(blofeld::infinite::s_animationexistsnode& value)
{
	byteswap(value.anim_set_name);
	byteswap(value.animation_name);
	byteswap(value.variation_index);
}

template<> void byteswap<blofeld::infinite::s_animsetexistsnode>(blofeld::infinite::s_animsetexistsnode& value)
{
	byteswap(value.anim_set_name);
}

template<> void byteswap<blofeld::infinite::s_posenode>(blofeld::infinite::s_posenode& value)
{
	byteswap(value.animation_name);
	byteswap(value.frame);
}

template<> void byteswap<blofeld::infinite::s_selectionnodepose>(blofeld::infinite::s_selectionnodepose& value)
{
	byteswap(value.pose_connection);
}

template<> void byteswap<blofeld::infinite::s_selectionnode>(blofeld::infinite::s_selectionnode& value)
{
	byteswap(value.default_selection);
	byteswap(value.selection_node_flags);
	byteswap(value.pose_connections_block);
}

template<> void byteswap<blofeld::infinite::s_layernodelayer>(blofeld::infinite::s_layernodelayer& value)
{
	byteswap(value.index);
	byteswap(value.mode);
	byteswap(value.alpha);
	byteswap(value.pose_connection);
	byteswap(value.alpha_connection);
	byteswap(value.layer_token_flags);
	byteswap(value.correction_pose_bone);
	byteswap(value.replacement_anim_correction_pose_connection);
}

template<> void byteswap<blofeld::infinite::s_layernode>(blofeld::infinite::s_layernode& value)
{
	byteswap(value.layers_block);
}

template<> void byteswap<blofeld::infinite::s_autospeedtoken>(blofeld::infinite::s_autospeedtoken& value)
{
	byteswap(value.animation_token);
	byteswap(value.weight);
	byteswap(value.subgraph_reference);
}

template<> void byteswap<blofeld::infinite::s_blendspacenode>(blofeld::infinite::s_blendspacenode& value)
{
	byteswap(value.blend_type);
	byteswap(value.blend_graph);
	byteswap(value.anim_name);
	byteswap(value.auto_speed_tokens_block);
	byteswap(value.auto_turn_rate_tokens_block);
	byteswap(value.min_alpha);
	byteswap(value.max_alpha);
	byteswap(value.radius);
	byteswap(value.partition_count);
	byteswap(value.group_name);
	byteswap(value.label);
	byteswap(value.flags);
	byteswap(value.channel_1);
	byteswap(value.channel_2);
	byteswap(value.channel_3);
	byteswap(value.input_smoothing_traversal_time);
}

template<> void byteswap<blofeld::infinite::s_statemachinenode>(blofeld::infinite::s_statemachinenode& value)
{
	byteswap(value.animation_state_machine);
}

template<> void byteswap<blofeld::infinite::s_controlparameternode>(blofeld::infinite::s_controlparameternode& value)
{
	byteswap(value.parameter_name);
	byteswap(value.type);
}

template<> void byteswap<blofeld::infinite::s_subanimgraphnode>(blofeld::infinite::s_subanimgraphnode& value)
{
	byteswap(value.animation_graph);
}

template<> void byteswap<blofeld::infinite::s_transitiondatanode>(blofeld::infinite::s_transitiondatanode& value)
{
	byteswap(value.data_type);
}

template<> void byteswap<blofeld::infinite::s_objectfunctionnode>(blofeld::infinite::s_objectfunctionnode& value)
{
	byteswap(value.function_name);
}

template<> void byteswap<blofeld::infinite::s_editablenumbernode>(blofeld::infinite::s_editablenumbernode& value)
{
	byteswap(value.property_name);
	byteswap(value.data_type);
	byteswap(value.float_value);
	byteswap(value.float_min_value);
	byteswap(value.float_max_value);
	byteswap(value.int_value);
	byteswap(value.bool_value);
	byteswap(value.vector_value);
}

template<> void byteswap<blofeld::infinite::s_booleanlogicnode>(blofeld::infinite::s_booleanlogicnode& value)
{
	byteswap(value.operation_type);
}

template<> void byteswap<blofeld::infinite::s_floatlogicnode>(blofeld::infinite::s_floatlogicnode& value)
{
	byteswap(value.condition);
}

template<> void byteswap<blofeld::infinite::s_floatoperatornode>(blofeld::infinite::s_floatoperatornode& value)
{
	byteswap(value.operation_type);
}

template<> void byteswap<blofeld::infinite::s_intlogicnode>(blofeld::infinite::s_intlogicnode& value)
{
	byteswap(value.condition);
}

template<> void byteswap<blofeld::infinite::s_intoperatornode>(blofeld::infinite::s_intoperatornode& value)
{
	byteswap(value.operation_type);
}

template<> void byteswap<blofeld::infinite::s_trignode>(blofeld::infinite::s_trignode& value)
{
	byteswap(value.operation_type);
}

template<> void byteswap<blofeld::infinite::s_blackboardnode>(blofeld::infinite::s_blackboardnode& value)
{
	byteswap(value.operation_type);
	byteswap(value.blackboard_entry_descriptor);
}

template<> void byteswap<blofeld::infinite::s_valueconversionnode>(blofeld::infinite::s_valueconversionnode& value)
{
	byteswap(value.conversion_type);
}

template<> void byteswap<blofeld::infinite::s_interpolationnode>(blofeld::infinite::s_interpolationnode& value)
{
	byteswap(value.interpolation_type);
}

template<> void byteswap<blofeld::infinite::s_constantfloatnode>(blofeld::infinite::s_constantfloatnode& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_constantintnode>(blofeld::infinite::s_constantintnode& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_constantint64node>(blofeld::infinite::s_constantint64node& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_constantuint64node>(blofeld::infinite::s_constantuint64node& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_constantstringnode>(blofeld::infinite::s_constantstringnode& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_constantboolnode>(blofeld::infinite::s_constantboolnode& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_unitparameternode>(blofeld::infinite::s_unitparameternode& value)
{
	byteswap(value.parameter_type);
	byteswap(value.angle_lock_range);
}

template<> void byteswap<blofeld::infinite::s_endofanimationnode>(blofeld::infinite::s_endofanimationnode& value)
{
	byteswap(value.node_type);
	byteswap(value.group_name);
	byteswap(value.offset_time);
}

template<> void byteswap<blofeld::infinite::s_bonemasknode>(blofeld::infinite::s_bonemasknode& value)
{
	byteswap(value.bone_mask_id);
}

template<> void byteswap<blofeld::infinite::s_iknodetag>(blofeld::infinite::s_iknodetag& value)
{
	byteswap(value.weight);
	byteswap(value.source_marker_name);
	byteswap(value.target_marker_name);
	byteswap(value.preferred_ik_chain_name);
	byteswap(value.blend_rate);
	byteswap(value.ik_type);
	byteswap(value.priority);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_groundiknodetag>(blofeld::infinite::s_groundiknodetag& value)
{
	byteswap(value.weight);
	byteswap(value.source_marker_name);
	byteswap(value.preferred_ik_chain_name);
	byteswap(value.blend_rate);
	byteswap(value.priority);
}

template<> void byteswap<blofeld::infinite::s_lookiknodetag>(blofeld::infinite::s_lookiknodetag& value)
{
	byteswap(value.weight);
	byteswap(value.blend_rate);
	byteswap(value.priority);
	byteswap(value.relative_forward_marker);
	byteswap(value.yaw);
	byteswap(value.pitch);
	byteswap(value.yaw_min);
	byteswap(value.yaw_max);
	byteswap(value.pitch_min);
	byteswap(value.pitch_max);
	byteswap(value.yaw_pose_contribution);
	byteswap(value.pitch_pose_contribution);
	byteswap(value.relative_forward_mode);
}

template<> void byteswap<blofeld::infinite::s_concatenatestring>(blofeld::infinite::s_concatenatestring& value)
{
	byteswap(value.index);
	byteswap(value._string);
}

template<> void byteswap<blofeld::infinite::s_concatenatenode>(blofeld::infinite::s_concatenatenode& value)
{
	byteswap(value.strings_block);
}

template<> void byteswap<blofeld::infinite::s_animsetpushnode>(blofeld::infinite::s_animsetpushnode& value)
{
	byteswap(value.type);
	byteswap(value._string);
	byteswap(value.push_order);
}

template<> void byteswap<blofeld::infinite::s_switchintinputvalue>(blofeld::infinite::s_switchintinputvalue& value)
{
	byteswap(value.int_value);
}

template<> void byteswap<blofeld::infinite::s_switchstringinputvalue>(blofeld::infinite::s_switchstringinputvalue& value)
{
	byteswap(value.string_value);
}

template<> void byteswap<blofeld::infinite::s_switchnode>(blofeld::infinite::s_switchnode& value)
{
	byteswap(value.int_input_values_block);
	byteswap(value.string_input_values_block);
	byteswap(value.default_pin_index);
}

template<> void byteswap<blofeld::infinite::s_switchonassetinputvalue>(blofeld::infinite::s_switchonassetinputvalue& value)
{
	byteswap(value.asset_reference);
	byteswap(value.is_asset_category);
}

template<> void byteswap<blofeld::infinite::s_switchonassetnode>(blofeld::infinite::s_switchonassetnode& value)
{
	byteswap(value.inputs_block);
}

template<> void byteswap<blofeld::infinite::s_aimscreennode>(blofeld::infinite::s_aimscreennode& value)
{
	byteswap(value.yaw);
	byteswap(value.pitch);
	byteswap(value.yaw_connection);
	byteswap(value.pitch_connection);
	byteswap(value.aim_animation_name);
	byteswap(value.label);
	byteswap(value.flags);
	byteswap(value.input_smoothing_traversal_time);
}

template<> void byteswap<blofeld::infinite::s_accspacenode>(blofeld::infinite::s_accspacenode& value)
{
	byteswap(value.acceleration_animation_name);
}

template<> void byteswap<blofeld::infinite::s_animationextractnode>(blofeld::infinite::s_animationextractnode& value)
{
	byteswap(value.pose_connection);
	byteswap(value.joint_name);
}

template<> void byteswap<blofeld::infinite::s_animationgetlocaloffsetnode>(blofeld::infinite::s_animationgetlocaloffsetnode& value)
{
	byteswap(value.joint_name_1);
	byteswap(value.joint_name_2);
	byteswap(value.animation_get_local_offset_flags);
}

template<> void byteswap<blofeld::infinite::s_animationgetvaluesnode>(blofeld::infinite::s_animationgetvaluesnode& value)
{
	byteswap(value.pose_connection);
	byteswap(value.joint_name);
	byteswap(value.animation_get_values_node_flags);
}

template<> void byteswap<blofeld::infinite::s_animationfkjointnames>(blofeld::infinite::s_animationfkjointnames& value)
{
	byteswap(value.joint_name);
}

template<> void byteswap<blofeld::infinite::s_animationfknode>(blofeld::infinite::s_animationfknode& value)
{
	byteswap(value.pose_connection);
	byteswap(value.joint_names_block);
	byteswap(value.translation);
	byteswap(value.rotation);
	byteswap(value.scale);
	byteswap(value.animation_fk_node_flags);
	byteswap(value.pivot_pose_connection);
	byteswap(value.pivot_joint_name);
}

template<> void byteswap<blofeld::infinite::s_animationconstraintnode>(blofeld::infinite::s_animationconstraintnode& value)
{
	byteswap(value.joint_name);
	byteswap(value.target_joint_name);
	byteswap(value.offset_joint_name);
	byteswap(value.animation_constraint_node_flags);
}

template<> void byteswap<blofeld::infinite::s_voiceoveranimationnode>(blofeld::infinite::s_voiceoveranimationnode& value)
{
	byteswap(value.voiceover_animation_data_types);
}

template<> void byteswap<blofeld::infinite::s_nativeexpressionnode>(blofeld::infinite::s_nativeexpressionnode& value)
{
	byteswap(value.type);
	byteswap(value.native_graph_name);
	byteswap(value.use_native_graph);
}

template<> void byteswap<blofeld::infinite::s_exportedanimnodegraph>(blofeld::infinite::s_exportedanimnodegraph& value)
{
	byteswap(value.anytag);
	byteswap(value.source_graph);
	byteswap(value.anim_node_subgraphs_block);
	byteswap(value.anim_state_subgraphs_block);
	byteswap(value.control_parameters_definitions);
	byteswap(value.blackboard_entries_block);
	byteswap(value.connections_block);
	byteswap(value.animation_tokens_block);
	byteswap(value.animation_exists_nodes_block);
	byteswap(value.anim_set_exists_nodes_block);
	byteswap(value.blend_node_count);
	byteswap(value.overlay_node_count);
	byteswap(value.dummy_pose_node_count);
	byteswap(value.branch_node_count);
	byteswap(value.pose_nodes_block);
	byteswap(value.selection_nodes_block);
	byteswap(value.layer_nodes_block);
	byteswap(value.blend_space_nodes_block);
	byteswap(value.state_machine_nodes_block);
	byteswap(value.control_parameters_block);
	byteswap(value.sub_anim_graphs_block);
	byteswap(value.transition_data_nodes_block);
	byteswap(value.object_function_nodes_block);
	byteswap(value.editable_number_nodes_block);
	byteswap(value.boolean_logic_nodes_block);
	byteswap(value.float_logic_nodes_block);
	byteswap(value.float_operator_nodes_block);
	byteswap(value.int_logic_nodes_block);
	byteswap(value.int_operator_nodes_block);
	byteswap(value.trig_nodes_block);
	byteswap(value.blackboard_nodes_block);
	byteswap(value.valueconversion_nodes_block);
	byteswap(value.interpolation_nodes_block);
	byteswap(value.constant_float_nodes_block);
	byteswap(value.constant_int_nodes_block);
	byteswap(value.constant_int64_nodes_block);
	byteswap(value.constant_uint64_nodes_block);
	byteswap(value.constant_string_nodes_block);
	byteswap(value.constant_bool_nodes_block);
	byteswap(value.unit_parameter_nodes_block);
	byteswap(value.end_of_animation_nodes_block);
	byteswap(value.bone_mask_nodes_block);
	byteswap(value.ik_nodes_block);
	byteswap(value.ground_ik_nodes_block);
	byteswap(value.look_ik_nodes_block);
	byteswap(value.concatenate_nodes_block);
	byteswap(value.anim_set_push_nodes_block);
	byteswap(value.switch_nodes_block);
	byteswap(value.switchonasset_nodes_block);
	byteswap(value.aim_screen_nodes_block);
	byteswap(value.acc_space_nodes_block);
	byteswap(value.animation_extract_nodes_block);
	byteswap(value.animation_get_local_offset_nodes_block);
	byteswap(value.animation_get_values_nodes_block);
	byteswap(value.animation_fk_nodes_block);
	byteswap(value.animation_constraint_nodes_block);
	byteswap(value.voiceover_animation_nodes_block);
	byteswap(value.native_expression_nodes_block);
	byteswap(value.final_pose_node_type);
	byteswap(value.final_pose_node_index);
	byteswap(value.final_pose_pin_index);
}

template<> void byteswap<blofeld::infinite::s_animentry>(blofeld::infinite::s_animentry& value)
{
	byteswap(value.token);
	byteswap(value.uniqueid);
	byteswap(value.legacyname);
	byteswap(value.animationsource);
	byteswap(value.type);
	byteswap(value.compression);
	byteswap(value.generatedmodelanimation);
	byteswap(value.weight);
	byteswap(value.autoweight);
	byteswap(value.flags);
	byteswap(value.loop_frame_index);
	byteswap(value.legacy_user_flags);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetcompositeentry>(blofeld::infinite::s_legacyanimsetcompositeentry& value)
{
	byteswap(value.name);
	byteswap(value.source_xml);
	byteswap(value.type);
}

template<> void byteswap<blofeld::infinite::s_animsettag>(blofeld::infinite::s_animsettag& value)
{
	byteswap(value.anytag);
	byteswap(value.channel);
	byteswap(value.parent);
	byteswap(value.asset);
	byteswap(value.animation_frame_events);
	byteswap(value.audio_frame_events);
	byteswap(value.effect_frame_events);
	byteswap(value.animations_block);
	byteswap(value.reference_to_generated_anim_pool_tag);
	byteswap(value.composites_block);
}

template<> void byteswap<blofeld::infinite::s_subgraphreferencetransitionlogicgraph>(blofeld::infinite::s_subgraphreferencetransitionlogicgraph& value)
{
	byteswap(value.transition_logic_subgraph);
}

template<> void byteswap<blofeld::infinite::s_animstatenode>(blofeld::infinite::s_animstatenode& value)
{
	byteswap(value.name);
	byteswap(value.animation_sub_graph);
	byteswap(value.state_flags);
}

template<> void byteswap<blofeld::infinite::s_animstateconnection>(blofeld::infinite::s_animstateconnection& value)
{
	byteswap(value.start_state);
	byteswap(value.end_state);
	byteswap(value.condition_graph);
	byteswap(value.transition_blend);
	byteswap(value.priority);
	byteswap(value.duration);
	byteswap(value.inertialize);
	byteswap(value.process_events_from_both_states);
}

template<> void byteswap<blofeld::infinite::s_animdefaultstateconnection>(blofeld::infinite::s_animdefaultstateconnection& value)
{
	byteswap(value.state);
	byteswap(value.condition_graph);
}

template<> void byteswap<blofeld::infinite::s_animstategraph>(blofeld::infinite::s_animstategraph& value)
{
	byteswap(value.anytag);
	byteswap(value.source_graph);
	byteswap(value.anim_node_subgraphs_block);
	byteswap(value.transition_logic_subgraphs_block);
	byteswap(value.states_block);
	byteswap(value.connections_block);
	byteswap(value.start_transitions_block);
	byteswap(value.transition_blend);
}

template<> void byteswap<blofeld::infinite::s_antenna_vertex>(blofeld::infinite::s_antenna_vertex& value)
{
	byteswap(value.angles);
	byteswap(value.length);
	byteswap(value.sequence_index);
	byteswap(value.color);
	byteswap(value.lod_color);
	byteswap(value.hermite_t);
	byteswap(value.vector_to_next);
}

template<> void byteswap<blofeld::infinite::s_antenna_definition>(blofeld::infinite::s_antenna_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.attachment_marker_name);
	byteswap(value.bitmaps);
	byteswap(value.physics);
	byteswap(value.spring_strength_coefficient);
	byteswap(value.texel_to_world_width_scale);
	byteswap(value.falloff_pixels);
	byteswap(value.cutoff_pixels);
	byteswap(value.point_of_bend);
	byteswap(value.starting_bend);
	byteswap(value.ending_bend);
	byteswap(value.runtime_total_length);
	byteswap(value.vertices_block);
}

template<> void byteswap<blofeld::infinite::s_i343actionsystemactionprioritydatadefinitionexistingentry>(blofeld::infinite::s_i343actionsystemactionprioritydatadefinitionexistingentry& value)
{
	byteswap(value.this_action);
	byteswap(value.combined_result);
}

template<> void byteswap<blofeld::infinite::s_i343actionsystemactionprioritydatadefinitionincomingentry>(blofeld::infinite::s_i343actionsystemactionprioritydatadefinitionincomingentry& value)
{
	byteswap(value.this_action);
	byteswap(value.existing_actions_block);
}

template<> void byteswap<blofeld::infinite::s_i343actionsystemactionprioritydatadefinition>(blofeld::infinite::s_i343actionsystemactionprioritydatadefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.incoming_actions_block);
}

template<> void byteswap<blofeld::infinite::s_visualregionnameblock>(blofeld::infinite::s_visualregionnameblock& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_propertyregion>(blofeld::infinite::s_propertyregion& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.static_geometry_merge_mode);
	byteswap(value.number_of_sides);
	byteswap(value.lightmapping_policy);
	byteswap(value.probe_grid_capture_offset);
	byteswap(value.physics_material_name);
	byteswap(value.damage_section);
	byteswap(value.tension_backing_data);
	byteswap(value.prune_threshold);
	byteswap(value.recomputed_normal_blend_mode);
	byteswap(value.emblem_layer_depth);
}

template<> void byteswap<blofeld::infinite::s_relativesourcepath>(blofeld::infinite::s_relativesourcepath& value)
{
	byteswap(value.path);
}

template<> void byteswap<blofeld::infinite::s_damagestateblock>(blofeld::infinite::s_damagestateblock& value)
{
	byteswap(value.state);
	byteswap(value.geometry_name);
}

template<> void byteswap<blofeld::infinite::s_contenttagblock>(blofeld::infinite::s_contenttagblock& value)
{
	byteswap(value.name);
	byteswap(value.groupname);
	byteswap(value.reference);
	byteswap(value.relative_source_paths_block);
	byteswap(value.damage_states_block);
}

template<> void byteswap<blofeld::infinite::s_skeletonblock>(blofeld::infinite::s_skeletonblock& value)
{
	byteswap(value.reference);
	byteswap(value.alembic_source_path);
}

template<> void byteswap<blofeld::infinite::s_additionalcontentpath>(blofeld::infinite::s_additionalcontentpath& value)
{
	byteswap(value.name);
	byteswap(value.path);
}

template<> void byteswap<blofeld::infinite::s_markerblock>(blofeld::infinite::s_markerblock& value)
{
	byteswap(value.name);
	byteswap(value.groupname);
	byteswap(value.reference);
}

template<> void byteswap<blofeld::infinite::s_lodtransitiondistancesblock>(blofeld::infinite::s_lodtransitiondistancesblock& value)
{
	byteswap(value.transition_distance);
}

template<> void byteswap<blofeld::infinite::s_visualregionoverrideentry>(blofeld::infinite::s_visualregionoverrideentry& value)
{
	byteswap(value.region_name);
	byteswap(value.geometry_name);
}

template<> void byteswap<blofeld::infinite::s_materialoverrideentry>(blofeld::infinite::s_materialoverrideentry& value)
{
	byteswap(value.original_material_ref);
	byteswap(value.override_material_ref);
}

template<> void byteswap<blofeld::infinite::s_assetchildobject>(blofeld::infinite::s_assetchildobject& value)
{
	byteswap(value.parent_marker);
	byteswap(value.child_marker);
	byteswap(value.child_variant_name);
	byteswap(value.child_object);
	byteswap(value.child_configuration);
	byteswap(value.damage_section);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_mutedjointentry>(blofeld::infinite::s_mutedjointentry& value)
{
	byteswap(value.joint_name);
}

template<> void byteswap<blofeld::infinite::s_i343objectsobjectnodegraphdefinition>(blofeld::infinite::s_i343objectsobjectnodegraphdefinition& value)
{
	byteswap(value.name);
	byteswap(value.exported_node_graph);
	byteswap(value.flags);
	byteswap(value.enable_node_graph);
}

template<> void byteswap<blofeld::infinite::s_assetvariant>(blofeld::infinite::s_assetvariant& value)
{
	byteswap(value.name);
	byteswap(value.style);
	byteswap(value.damage_style_index);
	byteswap(value.all_visual_region);
	byteswap(value.visual_region_overrides_block);
	byteswap(value.material_overrides_block);
	byteswap(value.child_objects_block);
	byteswap(value.muted_joints_block);
	byteswap(value.object_node_graphs_overrides_block);
	byteswap(value.reference_to_material_palette_tag);
	byteswap(value.reference_to_generated_vector_art);
	byteswap(value.reference_round_trip_abc_tag_from_a_render_model);
	byteswap(value.reference_round_trip_abc_tag_from_a_runtimegeo);
}

template<> void byteswap<blofeld::infinite::s_uniqueassetgeometryvariant>(blofeld::infinite::s_uniqueassetgeometryvariant& value)
{
	byteswap(value.uuid);
	byteswap(value.explicit_visual_region_list_block);
	byteswap(value.reference_to_generated_prefab);
	byteswap(value.reference_to_raw_triangle_data);
	byteswap(value.reference_to_generated_static_collision_geometry);
	byteswap(value.reference_to_generated_lightweight_fixed_depth_quadtree);
}

template<> void byteswap<blofeld::infinite::s_validationcomment>(blofeld::infinite::s_validationcomment& value)
{
	byteswap(value.comment);
	byteswap(value.status);
}

template<> void byteswap<blofeld::infinite::s_validation>(blofeld::infinite::s_validation& value)
{
	byteswap(value.test_name);
	byteswap(value.test_status);
	byteswap(value.comments_block);
}

template<> void byteswap<blofeld::infinite::s_contentvalidationgroup>(blofeld::infinite::s_contentvalidationgroup& value)
{
	byteswap(value.group_name);
	byteswap(value.group_id);
	byteswap(value.validation_status);
	byteswap(value.validation_tests_block);
}

template<> void byteswap<blofeld::infinite::s_contentvalidationblockdata>(blofeld::infinite::s_contentvalidationblockdata& value)
{
	byteswap(value.validation_status);
	byteswap(value.validation_test_batteries_block);
}

template<> void byteswap<blofeld::infinite::s_assettag>(blofeld::infinite::s_assettag& value)
{
	byteswap(value.anytag);
	byteswap(value.visual_region_names_block);
	byteswap(value.property_regions_block);
	byteswap(value.geometry_tags_block);
	byteswap(value.skeleton_block);
	byteswap(value.additional_content_paths_block);
	byteswap(value.marker_tags_block);
	byteswap(value.asset_physics_tag);
	byteswap(value.damage_tag);
	byteswap(value.legacy_animset_tag);
	byteswap(value.asset_sound_tag);
	byteswap(value.asset_dialogue_tag);
	byteswap(value.asset_category);
	byteswap(value.lod_settings_tag);
	byteswap(value.lod_settings_name);
	byteswap(value.lod_distance_bias);
	byteswap(value.lod_transition_distances_block);
	byteswap(value.lod_fade_out_after_distance);
	byteswap(value.hlod_policy);
	byteswap(value.default_variant_name);
	byteswap(value.asset_variants_block);
	byteswap(value.unique_geometry_block);
	byteswap(value.default_load_variant_policy);
	byteswap(value.static_collision_build_policy);
	byteswap(value.static_collision_decals_policy);
	byteswap(value.convert_collision_to_shadow_geometry);
	byteswap(value.converted_bullet_collision_lod_flags);
	byteswap(value.converted_play_collision_lod_flags);
	byteswap(value.model_tag);
	byteswap(value.render_model_tag);
	byteswap(value.physics_model_tag);
	byteswap(value.collision_model_tag);
	byteswap(value.legacy_model_animation_graph_tag);
	byteswap(value.impostor_tag);
	byteswap(value.validation);
}

template<> void byteswap<blofeld::infinite::s_s_animation_graph_node>(blofeld::infinite::s_s_animation_graph_node& value)
{
	byteswap(value.name);
	byteswap(value.next_sibling_node_index);
	byteswap(value.first_child_node_index);
	byteswap(value.parent_node_index);
	byteswap(value.model_flags);
	byteswap(value.z_pos);
	byteswap(value.frame_id1);
	byteswap(value.frame_id2);
}

template<> void byteswap<blofeld::infinite::s_s_animation_node_usage_entry>(blofeld::infinite::s_s_animation_node_usage_entry& value)
{
	byteswap(value.usage);
	byteswap(value.node_to_use);
}

template<> void byteswap<blofeld::infinite::s_s_animation_node_mask_entry>(blofeld::infinite::s_s_animation_node_mask_entry& value)
{
	byteswap(value.node);
}

template<> void byteswap<blofeld::infinite::s_nodeflagstoragearray>(blofeld::infinite::s_nodeflagstoragearray& value)
{
	byteswap(value.flag_data);
}

template<> void byteswap<blofeld::infinite::s_s_animation_node_mask>(blofeld::infinite::s_s_animation_node_mask& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.chain_start);
	byteswap(value.chain_ends_block);
	byteswap(value.nodes_block);
	byteswap(value.add_nodes);
	byteswap(value.remove_nodes);
	byteswap(value.node_flags);
}

template<> void byteswap<blofeld::infinite::s_animationgraphuserparameter>(blofeld::infinite::s_animationgraphuserparameter& value)
{
	byteswap(value.name);
	byteswap(value.default_value);
}

template<> void byteswap<blofeld::infinite::s_animationgraphskeleton>(blofeld::infinite::s_animationgraphskeleton& value)
{
	byteswap(value.skeleton_checksum);
	byteswap(value.skeleton_bones_block);
	byteswap(value.bone_usage_block);
	byteswap(value.bone_masks_block);
	byteswap(value.user_parameters_block);
}

template<> void byteswap<blofeld::infinite::s_animationikjunction>(blofeld::infinite::s_animationikjunction& value)
{
	byteswap(value.name);
	byteswap(value.pivot_node);
	byteswap(value.parent_junction);
	byteswap(value.supporting_chain);
	byteswap(value.supporting_node);
	byteswap(value.pull_passthrough);
}

template<> void byteswap<blofeld::infinite::s_animationikjoint>(blofeld::infinite::s_animationikjoint& value)
{
	byteswap(value.joint_index);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_animation_ik_chain>(blofeld::infinite::s_s_animation_ik_chain& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value.start_node);
	byteswap(value.effector_node);
	byteswap(value.parent_junction);
	byteswap(value.rank);
	byteswap(value.antecedents);
	byteswap(value.special_joints_block);
	byteswap(value.native_pull_strength);
	byteswap(value.native_push_strength);
	byteswap(value.over_extent_pull_strength);
	byteswap(value.under_extent_push_strength);
	byteswap(value.effector_cone_limit_power);
	byteswap(value.pitch_bounds);
	byteswap(value.yaw_bounds);
	byteswap(value.offset_bounds);
	byteswap(value.full_joint_chain_block);
	byteswap(value.spline_reversal_strength);
}

template<> void byteswap<blofeld::infinite::s_s_animation_ik_leg_definition>(blofeld::infinite::s_s_animation_ik_leg_definition& value)
{
	byteswap(value.leg_ik_chain);
	byteswap(value.standing_compression_limit);
	byteswap(value.crouching_compression_limit);
	byteswap(value.foot_pitch_limits);
	byteswap(value.foot_yaw_limits);
}

template<> void byteswap<blofeld::infinite::s_s_animation_ik_arm_definition>(blofeld::infinite::s_s_animation_ik_arm_definition& value)
{
	byteswap(value.arm_ik_chain);
	byteswap(value.wrist_break_threshold);
	byteswap(value.fixup_axis_marker);
	byteswap(value.ik_wrist_break_acceptable_min_angle);
}

template<> void byteswap<blofeld::infinite::s_s_animation_ik_point>(blofeld::infinite::s_s_animation_ik_point& value)
{
	byteswap(value.name);
	byteswap(value.source_marker);
	byteswap(value.attach_to);
	byteswap(value.destination_marker);
	byteswap(value.pole_marker);
	byteswap(value.chain_to_use);
	byteswap(value.weight_source_object_function);
	byteswap(value.priority_source_object_function);
}

template<> void byteswap<blofeld::infinite::s_s_animation_ik_set_item>(blofeld::infinite::s_s_animation_ik_set_item& value)
{
	byteswap(value.ik_point);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_animation_ik_set>(blofeld::infinite::s_s_animation_ik_set& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.ik_points_block);
}

template<> void byteswap<blofeld::infinite::s_i343animationikgroundfittingchain>(blofeld::infinite::s_i343animationikgroundfittingchain& value)
{
	byteswap(value.start_junction);
	byteswap(value.end_junction);
	byteswap(value.probe_distance);
	byteswap(value.angle_threshold);
	byteswap(value.maximum_rate);
}

template<> void byteswap<blofeld::infinite::s_animationgraphik>(blofeld::infinite::s_animationgraphik& value)
{
	byteswap(value.ik_junctions_block);
	byteswap(value.ik_chains_block);
	byteswap(value.ik_leg_definitions_block);
	byteswap(value.ik_arm_definitions_block);
	byteswap(value.ik_point_block);
	byteswap(value.ik_sets_block);
	byteswap(value.groundfit_ik_chains_block);
}

template<> void byteswap<blofeld::infinite::s_animation_skeleton>(blofeld::infinite::s_animation_skeleton& value)
{
	byteswap(value.anytag);
	byteswap(value.skeleton);
	byteswap(value.ik);
}

template<> void byteswap<blofeld::infinite::s_i343contenttagsvariantmodelhittype>(blofeld::infinite::s_i343contenttagsvariantmodelhittype& value)
{
	byteswap(value.variant_name);
	byteswap(value.use_model_hit_override);
}

template<> void byteswap<blofeld::infinite::s_assetsoundtag>(blofeld::infinite::s_assetsoundtag& value)
{
	byteswap(value.anytag);
	byteswap(value.use_model_hit);
	byteswap(value.per_variant_model_hit_block);
}

template<> void byteswap<blofeld::infinite::s_assetcategorysettingpersku>(blofeld::infinite::s_assetcategorysettingpersku& value)
{
	byteswap(value.lod_distance_multiplier);
	byteswap(value.lod___2_player_splitscreen);
	byteswap(value.lod___3_player_splitscreen);
	byteswap(value.lod___4_player_splitscreen);
	byteswap(value.number_of_lods_to_skip);
	byteswap(value.hide_after_distance_multiplier);
	byteswap(value.had___2_player_splitscreen);
	byteswap(value.had___3_player_splitscreen);
	byteswap(value.had___4_player_splitscreen);
	byteswap(value.static_io_shadow_casting_maximum_distance);
	byteswap(value.dynamic_object_shadow_casting_maximum_distance);
	byteswap(value.dynamic_object_cast_shadow_outside_of_camera_frustum_distance);
}

template<> void byteswap<blofeld::infinite::s_assetcategorysetting>(blofeld::infinite::s_assetcategorysetting& value)
{
	byteswap(value.name);
	byteswap(value.editor_group);
	byteswap(value.low_setting);
	byteswap(value.medium_setting);
	byteswap(value.high_setting);
	byteswap(value.ultra_setting);
	byteswap(value.shadow_casting);
	byteswap(value.shadow_distance);
	byteswap(value.exclude_from_ddgi);
	byteswap(value.exclude_from_dxr);
}

template<> void byteswap<blofeld::infinite::s_assetcategoryglobalstag>(blofeld::infinite::s_assetcategoryglobalstag& value)
{
	byteswap(value.anytag);
	byteswap(value.asset_category_globals_block);
}

template<> void byteswap<blofeld::infinite::s_functiondefinitiondefaultone>(blofeld::infinite::s_functiondefinitiondefaultone& value)
{
	byteswap(value.data);
}

template<> void byteswap<blofeld::infinite::s_scalarfunctionnamedefaultone>(blofeld::infinite::s_scalarfunctionnamedefaultone& value)
{
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_volumetexturefogglobals>(blofeld::infinite::s_volumetexturefogglobals& value)
{
	byteswap(value.fog_bitmap);
	byteswap(value.texture_repeat_rate);
	byteswap(value.distance_between_sheets);
	byteswap(value.depth_fade_factor);
	byteswap(value.transparent_sort_distance);
	byteswap(value.transparent_sort_layer);
	byteswap(value.flags);
	byteswap(value.wind_strength_across_distance);
}

template<> void byteswap<blofeld::infinite::s_s_atmosphere_globals>(blofeld::infinite::s_s_atmosphere_globals& value)
{
	byteswap(value.anytag);
	byteswap(value.volume_texture_fog_globals);
}

template<> void byteswap<blofeld::infinite::s_animchannelentry>(blofeld::infinite::s_animchannelentry& value)
{
	byteswap(value.channel);
}

template<> void byteswap<blofeld::infinite::s_animtokenglobalstag>(blofeld::infinite::s_animtokenglobalstag& value)
{
	byteswap(value.anytag);
	byteswap(value.channels_block);
	byteswap(value.internal_stringeditorproxy);
	byteswap(value.internal_intcontrolparameternamestringeditorproxy);
	byteswap(value.internal_floatcontrolparameternamestringeditorproxy);
	byteswap(value.internal_boolcontrolparameternamestringeditorproxy);
	byteswap(value.internal_stringcontrolparameternamestringeditorproxy);
	byteswap(value.internal_vectorcontrolparameternamestringeditorproxy);
}

template<> void byteswap<blofeld::infinite::s_audiogamebucketthreatsetup>(blofeld::infinite::s_audiogamebucketthreatsetup& value)
{
	byteswap(value.min_threat_value);
	byteswap(value.character_count);
}

template<> void byteswap<blofeld::infinite::s_audiogamecontextualthreatsetup>(blofeld::infinite::s_audiogamecontextualthreatsetup& value)
{
	byteswap(value.min);
	byteswap(value.max);
	byteswap(value.weight);
	byteswap(value.time);
	byteswap(value.flags);
	byteswap(value.context);
}

template<> void byteswap<blofeld::infinite::s_audiogamethreatlogicinstance>(blofeld::infinite::s_audiogamethreatlogicinstance& value)
{
	byteswap(value.rtpc_name);
	byteswap(value.multiplayer_rtpc_name);
	byteswap(value.btb_rtpc_name);
	byteswap(value.buckets_block);
	byteswap(value.damage_block);
	byteswap(value.distance_block);
	byteswap(value.aiming_block);
	byteswap(value.allegiance_block);
	byteswap(value.targeting_block);
	byteswap(value.scariness_block);
	byteswap(value.min_threat_value);
	byteswap(value.default_bucket);
}

template<> void byteswap<blofeld::infinite::s_audiogameaudiothreatglobalsdefinition>(blofeld::infinite::s_audiogameaudiothreatglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.audio_threats_block);
}

template<> void byteswap<blofeld::infinite::s_deathdamageregion>(blofeld::infinite::s_deathdamageregion& value)
{
	byteswap(value.damaged_region);
}

template<> void byteswap<blofeld::infinite::s_ragdolldeathblendfunction>(blofeld::infinite::s_ragdolldeathblendfunction& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.blend_function);
	byteswap(value.ragdoll_subgroup);
}

template<> void byteswap<blofeld::infinite::s_s_death_program_selector_velocity_gate>(blofeld::infinite::s_s_death_program_selector_velocity_gate& value)
{
	byteswap(value.minimum_velocity);
	byteswap(value.death_program);
	byteswap(value.death_program_scale);
	byteswap(value.acceleration_direction_adjust_z);
	byteswap(value.fallback_death_program_scale);
	byteswap(value.fallback_acceleration_direction_adjust_z);
	byteswap(value.powered_ragdoll_impact_radius);
	byteswap(value.death_animation_stance);
	byteswap(value.flags);
	byteswap(value.ragdoll_animation_bypass_angle);
	byteswap(value.blend_duration);
	byteswap(value.blend_functions_block);
	byteswap(value.keyframe_threshold);
	byteswap(value.explosion_radius);
	byteswap(value.explosion_impulse_curve);
}

template<> void byteswap<blofeld::infinite::s_s_death_program_selector_damage_type>(blofeld::infinite::s_s_death_program_selector_damage_type& value)
{
	byteswap(value.damagesource);
	byteswap(value.damage_regions_block);
	byteswap(value.velocity_block);
}

template<> void byteswap<blofeld::infinite::s_s_death_program_selector_special>(blofeld::infinite::s_s_death_program_selector_special& value)
{
	byteswap(value.special_type);
	byteswap(value.damage_type_block);
}

template<> void byteswap<blofeld::infinite::s_s_death_program_selector>(blofeld::infinite::s_s_death_program_selector& value)
{
	byteswap(value.anytag);
	byteswap(value.parent);
	byteswap(value.special_type_block);
}

template<> void byteswap<blofeld::infinite::s_behaviornodesettings>(blofeld::infinite::s_behaviornodesettings& value)
{
	byteswap(value.behavior);
	byteswap(value.override);
	byteswap(value.type);
	byteswap(value.timer);
	byteswap(value.stimulus);
	byteswap(value.seconds);
	byteswap(value.valid_args);
	byteswap(value.short_0);
	byteswap(value.short_1);
	byteswap(value.real_0);
}

template<> void byteswap<blofeld::infinite::s_behaviornodechildindex>(blofeld::infinite::s_behaviornodechildindex& value)
{
	byteswap(value.child);
}

template<> void byteswap<blofeld::infinite::s_behaviornodedefinition>(blofeld::infinite::s_behaviornodedefinition& value)
{
	byteswap(value.sub_tree);
	byteswap(value.settings);
	byteswap(value.children_block);
}

template<> void byteswap<blofeld::infinite::s_behaviortreedefinition>(blofeld::infinite::s_behaviortreedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.nodes_block);
}

template<> void byteswap<blofeld::infinite::s_s_bink_definition>(blofeld::infinite::s_s_bink_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.frame_count);
}

template<> void byteswap<blofeld::infinite::s_bitmapdictionaryentrydefinition>(blofeld::infinite::s_bitmapdictionaryentrydefinition& value)
{
	byteswap(value.identifier);
	byteswap(value.bitmap);
	byteswap(value.bitmap_index);
}

template<> void byteswap<blofeld::infinite::s_bitmapdictionarymultiactionsetdefinition>(blofeld::infinite::s_bitmapdictionarymultiactionsetdefinition& value)
{
	byteswap(value.identifier);
	byteswap(value.action_1);
	byteswap(value.action_2);
	byteswap(value.action_3);
	byteswap(value.action_4);
	byteswap(value.invalidation_flags);
}

template<> void byteswap<blofeld::infinite::s_bitmapdictionarycombinedbitmapdefiniton>(blofeld::infinite::s_bitmapdictionarycombinedbitmapdefiniton& value)
{
	byteswap(value.bitmap_1);
	byteswap(value.bitmap_2);
	byteswap(value.bitmap_3);
	byteswap(value.bitmap_4);
	byteswap(value.combined);
}

template<> void byteswap<blofeld::infinite::s_bitmapdictionarydefinition>(blofeld::infinite::s_bitmapdictionarydefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.entries_block);
	byteswap(value.multi_actions_block);
	byteswap(value.combined_bitmaps_block);
}

template<> void byteswap<blofeld::infinite::s_bitmapusage>(blofeld::infinite::s_bitmapusage& value)
{
	byteswap(value.name);
	byteswap(value.editor_group);
	byteswap(value.source_gamma);
	byteswap(value.bitmap_curve);
	byteswap(value.flags);
	byteswap(value.slicer);
	byteswap(value.dicer_flags);
	byteswap(value.packer);
	byteswap(value.packer_flags);
	byteswap(value.type);
	byteswap(value.mipmap_limit);
	byteswap(value.smallest_mip);
	byteswap(value.downsample_filter);
	byteswap(value.filter_radius_bias);
	byteswap(value.downsample_flags);
	byteswap(value.sprite_background_color);
	byteswap(value.swizzle_red);
	byteswap(value.swizzle_green);
	byteswap(value.swizzle_blue);
	byteswap(value.swizzle_alpha);
	byteswap(value.bitmap_format);
	byteswap(value.source_color_space);
	byteswap(value.target_color_space);
}

template<> void byteswap<blofeld::infinite::s_bitmapgroupsprite>(blofeld::infinite::s_bitmapgroupsprite& value)
{
	byteswap(value.bitmap_index);
	byteswap(value.left);
	byteswap(value.right);
	byteswap(value.top);
	byteswap(value.bottom);
	byteswap(value.registration_point);
}

template<> void byteswap<blofeld::infinite::s_bitmapgroupsequence>(blofeld::infinite::s_bitmapgroupsequence& value)
{
	byteswap(value.name);
	byteswap(value.first_bitmap_index);
	byteswap(value.bitmap_count);
	byteswap(value.sprites_block);
}

template<> void byteswap<blofeld::infinite::s_bitmapsourcefile>(blofeld::infinite::s_bitmapsourcefile& value)
{
	byteswap(value.path);
}

template<> void byteswap<blofeld::infinite::s_sourcepaths>(blofeld::infinite::s_sourcepaths& value)
{
	byteswap(value.source_path);
	byteswap(value.intermediate_paths_block);
}

template<> void byteswap<blofeld::infinite::s_bitmapdata>(blofeld::infinite::s_bitmapdata& value)
{
	byteswap(value.width);
	byteswap(value.height);
	byteswap(value.depth);
	byteswap(value.type);
	byteswap(value.format);
	byteswap(value.flags);
	byteswap(value.mipmap_count);
	byteswap(value.curve);
	byteswap(value.streaming_scale);
	byteswap(value.sourcewidth);
	byteswap(value.sourceheight);
	byteswap(value.bitmap_resource_handle);
}

template<> void byteswap<blofeld::infinite::s_bitmapgroup>(blofeld::infinite::s_bitmapgroup& value)
{
	byteswap(value.anytag);
	byteswap(value.usage);
	byteswap(value.usageid);
	byteswap(value.package);
	byteswap(value.texture_group);
	byteswap(value.flags);
	byteswap(value.sprite_spacing);
	byteswap(value.mip_sample_count);
	byteswap(value.bump_map_height);
	byteswap(value.fade_factor);
	byteswap(value.blur);
	byteswap(value.mip_map_blur);
	byteswap(value.curve_mode);
	byteswap(value.max_mipmap_level);
	byteswap(value.max_resolution);
	byteswap(value.force_bitmap_format);
	byteswap(value.sdf_generation);
	byteswap(value.target_platform);
	byteswap(value.spread_factor);
	byteswap(value.usage_override_block);
	byteswap(value.manual_sequences_block);
	byteswap(value.source_data);
	byteswap(value.source_paths_block);
	byteswap(value.source_checksum);
	byteswap(value.min_color);
	byteswap(value.max_color);
	byteswap(value.sequences_block);
	byteswap(value.bitmaps_block);
}

template<> void byteswap<blofeld::infinite::s_bitmapusagetablebitmapsuffixes>(blofeld::infinite::s_bitmapusagetablebitmapsuffixes& value)
{
	byteswap(value.suffix);
	byteswap(value.usage);
}

template<> void byteswap<blofeld::infinite::s_bitmapusagetablebackcompatusage>(blofeld::infinite::s_bitmapusagetablebackcompatusage& value)
{
	byteswap(value.usage_enum);
	byteswap(value.usage);
}

template<> void byteswap<blofeld::infinite::s_bitmapusagetable>(blofeld::infinite::s_bitmapusagetable& value)
{
	byteswap(value.anytag);
	byteswap(value.bitmap_usage_definitions_block);
	byteswap(value.bitmap_suffixes_block);
	byteswap(value.usage_backcompat_block);
}

template<> void byteswap<blofeld::infinite::s_s_real_sector_point_generic_volume>(blofeld::infinite::s_s_real_sector_point_generic_volume& value)
{
	byteswap(value.position);
}

template<> void byteswap<blofeld::infinite::s_genericvolumenativepoint2d>(blofeld::infinite::s_genericvolumenativepoint2d& value)
{
	byteswap(value.point);
}

template<> void byteswap<blofeld::infinite::s_genericvolume>(blofeld::infinite::s_genericvolume& value)
{
	byteswap(value.points_block);
	byteswap(value.height);
	byteswap(value.sink);
	byteswap(value.center_point);
	byteswap(value.trivial_cull_radius_squared);
	byteswap(value.aabbcenter);
	byteswap(value.aabbextents);
	byteswap(value.nativepoints2d_block);
}

template<> void byteswap<blofeld::infinite::s_editormetadata>(blofeld::infinite::s_editormetadata& value)
{
	byteswap(value.folder_name);
	byteswap(value.local_space_pivot_point_position);
}

template<> void byteswap<blofeld::infinite::s_lightmappriorityvolume>(blofeld::infinite::s_lightmappriorityvolume& value)
{
	byteswap(value.name);
	byteswap(value.volume);
	byteswap(value.volume_priority);
	byteswap(value.lightmap_priority);
	byteswap(value.exclude_shadow_geometry);
	byteswap(value.exclude_per_pixel_lighting);
	byteswap(value.exclude_analytic_sun_contribution);
	byteswap(value.exclude_analytic_light_contribution);
	byteswap(value.editormetadata_block);
	byteswap(value.owner_bsp);
	byteswap(value.owner_variant);
	byteswap(value.runtime_bsp_index);
	byteswap(value.runtime_variant_index);
}

template<> void byteswap<blofeld::infinite::s_airprobedensityvolume>(blofeld::infinite::s_airprobedensityvolume& value)
{
	byteswap(value.name);
	byteswap(value.volume);
	byteswap(value.air_probe_density);
	byteswap(value.editormetadata_block);
	byteswap(value.owner_bsp);
	byteswap(value.owner_variant);
	byteswap(value.runtime_bsp_index);
	byteswap(value.runtime_variant_index);
}

template<> void byteswap<blofeld::infinite::s_airproberegionvolume>(blofeld::infinite::s_airproberegionvolume& value)
{
	byteswap(value.name);
	byteswap(value.volume);
	byteswap(value.editormetadata_block);
	byteswap(value.owner_bsp);
	byteswap(value.owner_variant);
	byteswap(value.runtime_bsp_index);
	byteswap(value.runtime_variant_index);
	byteswap(value.probe_xy_spacing);
	byteswap(value.probe_z_spacing);
	byteswap(value.volume_priority);
	byteswap(value.blend_radius_xy);
	byteswap(value.blend_radius_z);
	byteswap(value.flags);
	byteswap(value.probe_offset_above_ground);
	byteswap(value.number_of_z_layers);
}

template<> void byteswap<blofeld::infinite::s_s_dumpling_sector_point>(blofeld::infinite::s_s_dumpling_sector_point& value)
{
	byteswap(value.position);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_dumpling>(blofeld::infinite::s_s_scenario_dumpling& value)
{
	byteswap(value.inner_points_block);
	byteswap(value.outer_points_block);
	byteswap(value.height);
	byteswap(value.sink);
	byteswap(value.inner_value);
	byteswap(value.outer_value);
	byteswap(value.center_point);
	byteswap(value.trivial_cull_radius_squared);
	byteswap(value.bound_volume);
}

template<> void byteswap<blofeld::infinite::s_cubemapvolume>(blofeld::infinite::s_cubemapvolume& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.dumpling);
	byteswap(value.cubemap_bitmap);
	byteswap(value.enable_parallax_correction);
	byteswap(value.cubemap_volume_priority);
	byteswap(value.cubemap_origin);
	byteswap(value.depth_positive);
	byteswap(value.depth_negative);
	byteswap(value.active_volume);
	byteswap(value.maximum_cubemap_size);
	byteswap(value.intensity);
	byteswap(value.self_illum_scale_down);
	byteswap(value.editormetadata_block);
	byteswap(value.owner_bsp);
	byteswap(value.owner_variant);
	byteswap(value.runtime_bsp_index);
	byteswap(value.runtime_variant_index);
	byteswap(value.blend_distance);
	byteswap(value.cubemap_volume_type);
	byteswap(value.orientation);
	byteswap(value.cubemap_depth_bitmap);
	byteswap(value.depth_blend_range);
	byteswap(value.intensity_scale);
	byteswap(value.tintable);
}

template<> void byteswap<blofeld::infinite::s_bsplightingvolumes>(blofeld::infinite::s_bsplightingvolumes& value)
{
	byteswap(value.anytag);
	byteswap(value.lightmap_priority_volumes_block);
	byteswap(value.air_probe_density_volumes_block);
	byteswap(value.air_probe_region_volumes_block);
	byteswap(value.cubemap_volumes_block);
}

template<> void byteswap<blofeld::infinite::s_i343benchmarkbenchmarkcompositioninfo>(blofeld::infinite::s_i343benchmarkbenchmarkcompositioninfo& value)
{
	byteswap(value.display_name);
	byteswap(value.composition_id);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343benchmarkbenchmarkmap>(blofeld::infinite::s_i343benchmarkbenchmarkmap& value)
{
	byteswap(value.map);
	byteswap(value.benchmark_compositions_block);
}

template<> void byteswap<blofeld::infinite::s_i343benchmarkbenchmarkdefinition>(blofeld::infinite::s_i343benchmarkbenchmarkdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.benchmarks_block);
}

template<> void byteswap<blofeld::infinite::s_boost>(blofeld::infinite::s_boost& value)
{
	byteswap(value.boost_collision_damage);
	byteswap(value.flags);
	byteswap(value.boost_peak_power);
	byteswap(value.boost_rise_time);
	byteswap(value.boost_fall_time);
	byteswap(value.boost_power_per_second);
	byteswap(value.boost_low_warning_threshold);
	byteswap(value.recharge_rate);
	byteswap(value.recharge_delay);
	byteswap(value.post_boost_weapon_delay);
	byteswap(value.trigger_to_boost);
	byteswap(value.tutorial_id);
}

template<> void byteswap<blofeld::infinite::s_i343unitsboostdefinition>(blofeld::infinite::s_i343unitsboostdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.boost);
}

template<> void byteswap<blofeld::infinite::s_botbackfilltuningdefinition>(blofeld::infinite::s_botbackfilltuningdefinition& value)
{
	byteswap(value.mmr_threshold_for_recruit);
	byteswap(value.mmr_threshold_for_marine);
	byteswap(value.mmr_threshold_for_odst);
	byteswap(value.mmr_threshold_for_spartan);
}

template<> void byteswap<blofeld::infinite::s_bothysteresistuningdefinition>(blofeld::infinite::s_bothysteresistuningdefinition& value)
{
	byteswap(value.hysteresis_max_amount);
	byteswap(value.hysteresis_timeout_seconds);
}

template<> void byteswap<blofeld::infinite::s_bottraversalpropertiesdefinition>(blofeld::infinite::s_bottraversalpropertiesdefinition& value)
{
	byteswap(value.destination_evaluation_tolerance);
	byteswap(value.random_neighbor_selection_chance);
	byteswap(value.start_sprint_evaluation_tolerance);
	byteswap(value.stop_sprint_evaluation_tolerance);
	byteswap(value.bot_angular_turn_velocity);
	byteswap(value.bot_angular_turn_acceleration);
	byteswap(value.bot_stuck_time_timeout);
	byteswap(value.bot_end_of_path_tolerance_distance_sq);
	byteswap(value.wrong_path_direction_timeout);
	byteswap(value.ledge_fall_distance_sq);
	byteswap(value.waypoint_path_distance);
	byteswap(value.jump_hint_facing_threshold_no_clamber);
}

template<> void byteswap<blofeld::infinite::s_botmeleetuningdefinition>(blofeld::infinite::s_botmeleetuningdefinition& value)
{
	byteswap(value.melee_min_delay_time);
	byteswap(value.melee_max_delay_time);
	byteswap(value.melee_striking_distance_no_melee_weapon);
	byteswap(value.melee_striking_distance_with_melee_weapon);
	byteswap(value.minimum_melee_distance);
	byteswap(value.max_melee_distance_no_equipment);
	byteswap(value.max_melee_distance_with_objective);
	byteswap(value.min_melee_grapple_distance);
	byteswap(value.max_melee_distance_with_grapple_hook);
	byteswap(value.max_enemy_health_for_unarmed_grapple);
	byteswap(value.restrict_melee_knockback_weapon_desirability_min);
	byteswap(value.target_low_shield_vitality_threshold);
	byteswap(value.low_confidence_threshold);
	byteswap(value.target_is_facing_away_angle_threshold);
}

template<> void byteswap<blofeld::infinite::s_botcombattuningdefinition>(blofeld::infinite::s_botcombattuningdefinition& value)
{
	byteswap(value.melee);
	byteswap(value.strafe_min_time);
	byteswap(value.strafe_max_time);
	byteswap(value.halt_strafe_chance);
	byteswap(value.halt_strafe_min_time);
	byteswap(value.halt_strafe_max_time);
	byteswap(value.halt_strafe_min_time_initial);
	byteswap(value.halt_strafe_max_time_initial);
	byteswap(value.vertical_movement_min_delay_time);
	byteswap(value.vertical_movement_max_delay_time);
	byteswap(value.vertical_movement_crouch_chance);
	byteswap(value.crouch_hold_time);
	byteswap(value.vertical_movement_jump_check_height);
	byteswap(value.target_is_aiming_check_threshold);
	byteswap(value.avoid_dangerous_object_jump_chance);
	byteswap(value.grenade_delay_min_time);
	byteswap(value.grenade_delay_noise_time);
	byteswap(value.grenade_min_target_distance);
	byteswap(value.grenade_max_target_distance);
	byteswap(value.grenade_distance_in_front_of_target_feet);
	byteswap(value.low_ground_height_threshold);
	byteswap(value.disengage_confidence_threshold);
	byteswap(value.evade_min_delay_time);
	byteswap(value.evade_max_delay_time);
	byteswap(value.combat_error_magnitude);
	byteswap(value.minimum_error_magnitude);
	byteswap(value.target_velocity_max_noise_threshhold_sq);
	byteswap(value.targeting_error_from_velocity_weight);
	byteswap(value.targeting_error_recalculation_time_min);
	byteswap(value.targeting_error_recalculation_time_max);
	byteswap(value.desired_vs_actual_aiming_differential_allowance);
	byteswap(value.predictability_velocity_magnitude_change_threshold);
	byteswap(value.predictability_velocity_direction_change_threshhold);
	byteswap(value.predictability_error_gain_rate);
	byteswap(value.predictability_error_decay_rate);
	byteswap(value.maximum_aiming_offset);
	byteswap(value.combat_weapon_switch_desirability_delta);
	byteswap(value.combat_weapon_switch_distance_delta);
	byteswap(value.initial_hide_point_search_radius);
	byteswap(value.location_sensor_activation_distance_sq);
	byteswap(value.disengage_max_jump_height);
}

template<> void byteswap<blofeld::infinite::s_bottargetpriorityinputdefinition>(blofeld::infinite::s_bottargetpriorityinputdefinition& value)
{
	byteswap(value.input);
	byteswap(value.weight);
}

template<> void byteswap<blofeld::infinite::s_botawarenesstuningdefinition>(blofeld::infinite::s_botawarenesstuningdefinition& value)
{
	byteswap(value.max_ground_awareness_distance);
	byteswap(value.max_air_awareness_distance);
	byteswap(value.fov_degrees);
	byteswap(value.threat_sensor_awareness_distance);
	byteswap(value.active_camo_invisibility_threshold);
	byteswap(value.danger_decay_rate_per_second);
	byteswap(value.clairvoyance_max_time);
	byteswap(value.clairvoyance_max_distance);
	byteswap(value.dangerous_object_awareness_distance);
	byteswap(value.dangerous_object_max_time_to_damage);
	byteswap(value.dangerous_object_approaching_bot_angle);
	byteswap(value.moving_dangerous_object_min_speed);
	byteswap(value.chance_to_notice_new_dangerous_objects_per_second);
	byteswap(value.dangerous_object_danger_radius_scalar);
	byteswap(value.target_hysteresis_max_amount);
	byteswap(value.target_hysteresis_timeout_seconds);
	byteswap(value.target_priority_calculation_inputs_block);
}

template<> void byteswap<blofeld::infinite::s_botguardbehaviortuningdefinition>(blofeld::infinite::s_botguardbehaviortuningdefinition& value)
{
	byteswap(value.min_guard_look_time);
	byteswap(value.max_guard_look_time);
	byteswap(value.min_guard_look_rotation_angle);
	byteswap(value.max_guard_look_rotation_angle);
	byteswap(value.guard_volume_boundary_width);
	byteswap(value.max_patrol_time);
	byteswap(value.min_patrol_pause_time);
	byteswap(value.max_patrol_pause_time);
	byteswap(value.min_guard_distance);
}

template<> void byteswap<blofeld::infinite::s_botpickuptuningdefinition>(blofeld::infinite::s_botpickuptuningdefinition& value)
{
	byteswap(value.pickup_distance_sq);
	byteswap(value.pathless_distance_sq);
	byteswap(value.item_pickup_delay);
	byteswap(value.weapon_pickup_cooldown);
	byteswap(value.item_observation_radius);
}

template<> void byteswap<blofeld::infinite::s_botweapondeftagblock>(blofeld::infinite::s_botweapondeftagblock& value)
{
	byteswap(value.approved_weapon_definition_tag);
	byteswap(value.weapon_usage_flags);
	byteswap(value.error_magnitude);
	byteswap(value.minimum_error_magnitude);
	byteswap(value.error_max_velocity_sq_threshold);
	byteswap(value.desirability);
	byteswap(value.min_distance_sq);
	byteswap(value.max_distance_sq);
}

template<> void byteswap<blofeld::infinite::s_botdifficultyleveltuningdefinition>(blofeld::infinite::s_botdifficultyleveltuningdefinition& value)
{
	byteswap(value.difficulty_level);
	byteswap(value.difficulty_specific_flags);
	byteswap(value.hysteresis);
	byteswap(value.traversal_tuning);
	byteswap(value.combat_tuning);
	byteswap(value.awareness_tuning);
	byteswap(value.guard_behavior_tuning);
	byteswap(value.pickup_tuning);
	byteswap(value.weapon_tuning_block);
}

template<> void byteswap<blofeld::infinite::s_botequipmentdeftagblock>(blofeld::infinite::s_botequipmentdeftagblock& value)
{
	byteswap(value.approved_equipment_definition_tag);
}

template<> void byteswap<blofeld::infinite::s_botadaptivetuningdefinition>(blofeld::infinite::s_botadaptivetuningdefinition& value)
{
	byteswap(value.player_health_shooting_threshold);
	byteswap(value.max_movement);
	byteswap(value.max_aiming);
	byteswap(value.aiming_coefficient);
	byteswap(value.position_coefficient);
	byteswap(value.engagement_constant);
}

template<> void byteswap<blofeld::infinite::s_botglobals>(blofeld::infinite::s_botglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.bot_backfill);
	byteswap(value.difficulty_specific_tuning_block);
	byteswap(value.approved_bot_equipment_block);
	byteswap(value.adaptive_difficulty_tuning_block);
}

template<> void byteswap<blofeld::infinite::s_bitmappackagesettings>(blofeld::infinite::s_bitmappackagesettings& value)
{
	byteswap(value.name);
	byteswap(value.editor_group);
	byteswap(value.flags);
	byteswap(value.reduction_rate);
	byteswap(value.minimum_texture_size);
}

template<> void byteswap<blofeld::infinite::s_bitmappackagetexturegroup>(blofeld::infinite::s_bitmappackagetexturegroup& value)
{
	byteswap(value.name);
	byteswap(value.package);
}

template<> void byteswap<blofeld::infinite::s_bitmappackagesettingstable>(blofeld::infinite::s_bitmappackagesettingstable& value)
{
	byteswap(value.anytag);
	byteswap(value.settings_block);
	byteswap(value.texture_groups_block);
}

template<> void byteswap<blofeld::infinite::s_scenariobakedpvsvolume>(blofeld::infinite::s_scenariobakedpvsvolume& value)
{
	byteswap(value.name);
	byteswap(value.volume);
	byteswap(value.use_vertical_beam_count_override);
	byteswap(value.use_beam_height_overrides);
	byteswap(value.pin_the_beams_to_the_top_of_the_volume);
	byteswap(value.add_beams_even_if_there_is_no_collision);
	byteswap(value.vertical_beam_count_override);
	byteswap(value.beam_1_height_override);
	byteswap(value.beam_2_height_override);
	byteswap(value.beam_3_height_override);
	byteswap(value.beam_4_and_above_height_override);
	byteswap(value.volume_importance_override_value);
	byteswap(value.editormetadata_block);
	byteswap(value.owner_bsp);
	byteswap(value.runtime_bsp_index);
}

template<> void byteswap<blofeld::infinite::s_bspvolumes>(blofeld::infinite::s_bspvolumes& value)
{
	byteswap(value.anytag);
	byteswap(value.baked_pvs_volumes_block);
}

template<> void byteswap<blofeld::infinite::s_i343cagesystemcagepoint>(blofeld::infinite::s_i343cagesystemcagepoint& value)
{
	byteswap(value.flags);
	byteswap(value.name);
	byteswap(value.offsettype);
	byteswap(value.offsetposition);
	byteswap(value.offsetrotation);
	byteswap(value.locationtype);
	byteswap(value.locationname);
}

template<> void byteswap<blofeld::infinite::s_i343cagesystemcagedefinitiontag>(blofeld::infinite::s_i343cagesystemcagedefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.points_block);
}

template<> void byteswap<blofeld::infinite::s_i343cagesystemcagepointdefault>(blofeld::infinite::s_i343cagesystemcagepointdefault& value)
{
	byteswap(value.name);
	byteswap(value.cage_definition);
	byteswap(value.point_name);
}

template<> void byteswap<blofeld::infinite::s_i343curvecurvereference>(blofeld::infinite::s_i343curvecurvereference& value)
{
	byteswap(value.curve_type);
	byteswap(value.curve_definition);
	byteswap(value.curve_name);
}

template<> void byteswap<blofeld::infinite::s_i343cagesystemcagetransitioncurve>(blofeld::infinite::s_i343cagesystemcagetransitioncurve& value)
{
	byteswap(value.animation_curve);
	byteswap(value.transform_curve_name);
	byteswap(value.focal_length_curve_name);
	byteswap(value.focus_distance_curve_name);
	byteswap(value.f_stop_curve_name);
	byteswap(value.perspective_curve_name);
	byteswap(value.variant_curve_name);
	byteswap(value.variant_name);
	byteswap(value.animation_time);
	byteswap(value.animation_playback_scalar);
}

template<> void byteswap<blofeld::infinite::s_i343cagesystemcageglobalsdefinitiontag>(blofeld::infinite::s_i343cagesystemcageglobalsdefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.global_default_cage_points_block);
	byteswap(value.default_cage_definition);
	byteswap(value.default_position_point);
	byteswap(value.default_collision_resolution_point);
	byteswap(value.default_orbit_center_point);
	byteswap(value.default_fps_point);
	byteswap(value.default_blend_in_time);
	byteswap(value.default_blend_out_time);
	byteswap(value.default_gaze_distance);
	byteswap(value.default_gaze_outer_angle);
	byteswap(value.default_gaze_inner_angle);
	byteswap(value.default_gaze_velocity);
	byteswap(value.default_gaze_velocity_curve);
	byteswap(value.default_blend_curve_transform);
	byteswap(value.default_blend_curve_properties);
	byteswap(value.from_gameplay_transition);
	byteswap(value.to_gameplay_transition);
	byteswap(value.default_focal_length);
	byteswap(value.default_focus_distance);
	byteswap(value.default_f_stop);
}

template<> void byteswap<blofeld::infinite::s_cameratrackcontrolpoint>(blofeld::infinite::s_cameratrackcontrolpoint& value)
{
	byteswap(value.position);
	byteswap(value.orientation);
}

template<> void byteswap<blofeld::infinite::s_cameratracklens>(blofeld::infinite::s_cameratracklens& value)
{
	byteswap(value.flags);
	byteswap(value.focal_length);
	byteswap(value.focus_distance);
	byteswap(value.fstop);
	byteswap(value.bokeh_side_count);
}

template<> void byteswap<blofeld::infinite::s_cameratrack>(blofeld::infinite::s_cameratrack& value)
{
	byteswap(value.flags);
	byteswap(value.control_points_block);
	byteswap(value.lenses_block);
}

template<> void byteswap<blofeld::infinite::s_cameratrackanimation>(blofeld::infinite::s_cameratrackanimation& value)
{
	byteswap(value.name);
	byteswap(value.track);
	byteswap(value.authored_fps);
}

template<> void byteswap<blofeld::infinite::s_cameraanimationgraph>(blofeld::infinite::s_cameraanimationgraph& value)
{
	byteswap(value.anytag);
	byteswap(value.animations_block);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuicamerapresetsettings>(blofeld::infinite::s_interfacecustomizationuicamerapresetsettings& value)
{
	byteswap(value.core_focus_mode);
	byteswap(value.camera_offset);
	byteswap(value.camera_position_offset);
	byteswap(value.camera_facing);
	byteswap(value.dof_flags);
	byteswap(value.dof_focal_length);
	byteswap(value.dof_focal_distance);
	byteswap(value.dof_fstop);
	byteswap(value.composer_scene_name);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuicamerapreset>(blofeld::infinite::s_interfacecustomizationuicamerapreset& value)
{
	byteswap(value.preset_name);
	byteswap(value.core_type);
	byteswap(value.item_type);
	byteswap(value.camera_settings_block);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuicamerascenepreset>(blofeld::infinite::s_interfacecustomizationuicamerascenepreset& value)
{
	byteswap(value.scene_type);
	byteswap(value.camera_presets_settings_block);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuicamerapresetstag>(blofeld::infinite::s_interfacecustomizationuicamerapresetstag& value)
{
	byteswap(value.anytag);
	byteswap(value.camera_presets_settings_block);
	byteswap(value.camera_scene_presets_settings_block);
}

template<> void byteswap<blofeld::infinite::s_collisiondamagefunction>(blofeld::infinite::s_collisiondamagefunction& value)
{
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_collisiondamagestruct>(blofeld::infinite::s_collisiondamagestruct& value)
{
	byteswap(value.flags);
	byteswap(value.minimum_velocity_for_lethal_collision);
	byteswap(value.game_collision_damage$2);
	byteswap(value.game_acceleration);
	byteswap(value.minimum_velocity_for_game_damage);
	byteswap(value.apply_collision_damage_scale);
	byteswap(value.friendly_apply_collision_damage_scale);
	byteswap(value.game_collision_damage_normal_threshold);
	byteswap(value.absolute_collision_damage$2);
	byteswap(value.absolute_acceleration);
	byteswap(value.minimum_velocity_for_absolute_damage);
	byteswap(value.apply_absolute_collision_damage_scale);
	byteswap(value.friendly_apply_absolute_collision_damage_scale);
	byteswap(value.absolute_collision_damage_normal_threshold);
	byteswap(value.alternative_damage_effect$2);
}

template<> void byteswap<blofeld::infinite::s_collisiondamagedefinition>(blofeld::infinite::s_collisiondamagedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.damagestruct);
}

template<> void byteswap<blofeld::infinite::s_i343physicscollisiontypename>(blofeld::infinite::s_i343physicscollisiontypename& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_i343physicscollisionlayerdata>(blofeld::infinite::s_i343physicscollisionlayerdata& value)
{
	byteswap(value.collision);
}

template<> void byteswap<blofeld::infinite::s_i343physicscollisionfilterdefinition>(blofeld::infinite::s_i343physicscollisionfilterdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.types_block);
	byteswap(value.layers_block);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingss_real_exposure_parameter>(blofeld::infinite::s_camera_fx_settingss_real_exposure_parameter& value)
{
	byteswap(value.flags);
	byteswap(value.exposure$2);
	byteswap(value.maximum_change);
	byteswap(value.blend_speed_0_1);
	byteswap(value.minimum);
	byteswap(value.maximum);
	byteswap(value.auto_exposure_screen_brightness);
	byteswap(value.exposure_offset);
	byteswap(value.sky_exposure_offset_stops);
	byteswap(value.prevent_fluctuation_time_range);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingscamerafxexposuresensitivity>(blofeld::infinite::s_camera_fx_settingscamerafxexposuresensitivity& value)
{
	byteswap(value.flags);
	byteswap(value.sensitivity_0_1);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingscamerafxexposurepitchinfluence>(blofeld::infinite::s_camera_fx_settingscamerafxexposurepitchinfluence& value)
{
	byteswap(value.flags);
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingscamerafxexposurecompensation>(blofeld::infinite::s_camera_fx_settingscamerafxexposurecompensation& value)
{
	byteswap(value.flags);
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingscamerafxbloomhighlight>(blofeld::infinite::s_camera_fx_settingscamerafxbloomhighlight& value)
{
	byteswap(value.flags);
	byteswap(value.highlight_bloom$2);
	byteswap(value.maximum_change);
	byteswap(value.blend_speed_0_1);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingscamerafxbloomhighlightthreshold>(blofeld::infinite::s_camera_fx_settingscamerafxbloomhighlightthreshold& value)
{
	byteswap(value.flags);
	byteswap(value.highlight_bloom_threshold$2);
	byteswap(value.maximum_change);
	byteswap(value.blend_speed_0_1);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingscamerafxbloominherent>(blofeld::infinite::s_camera_fx_settingscamerafxbloominherent& value)
{
	byteswap(value.flags);
	byteswap(value.ambient_bloom$2);
	byteswap(value.maximum_change);
	byteswap(value.blend_speed_0_1);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingscamerafxbloomintensity>(blofeld::infinite::s_camera_fx_settingscamerafxbloomintensity& value)
{
	byteswap(value.flags);
	byteswap(value.bloom_intensity$2);
	byteswap(value.maximum_change);
	byteswap(value.blend_speed_0_1);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingscamerafxbloomlayerintensity>(blofeld::infinite::s_camera_fx_settingscamerafxbloomlayerintensity& value)
{
	byteswap(value.flags);
	byteswap(value.large_layer_intensity);
	byteswap(value.medium_layer_intensity);
	byteswap(value.small_layer_intensity);
	byteswap(value.maximum_change);
	byteswap(value.blend_speed_0_1);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingscamerafxbloomtintcolor>(blofeld::infinite::s_camera_fx_settingscamerafxbloomtintcolor& value)
{
	byteswap(value.flags);
	byteswap(value.tint_color);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingscamerafxselfillumexposuresettings>(blofeld::infinite::s_camera_fx_settingscamerafxselfillumexposuresettings& value)
{
	byteswap(value.flags);
	byteswap(value.preferred_exposure);
	byteswap(value.maximum_change);
	byteswap(value.blend_speed_0_1);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingscamerafxselfillumscale>(blofeld::infinite::s_camera_fx_settingscamerafxselfillumscale& value)
{
	byteswap(value.flags);
	byteswap(value.exposure_change);
	byteswap(value.maximum_change);
	byteswap(value.blend_speed_0_1);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingscamerafxselfillumscaleperrace>(blofeld::infinite::s_camera_fx_settingscamerafxselfillumscaleperrace& value)
{
	byteswap(value.flags);
	byteswap(value.parameter_value);
	byteswap(value.maximum_change);
	byteswap(value.blend_speed_0_1);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingss_color_grading_parameter>(blofeld::infinite::s_camera_fx_settingss_color_grading_parameter& value)
{
	byteswap(value.flags);
	byteswap(value.color_grading_texture);
	byteswap(value.hdr_color_grading_texture);
	byteswap(value.blend_time);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingss_ssao_parameter>(blofeld::infinite::s_camera_fx_settingss_ssao_parameter& value)
{
	byteswap(value.flags);
	byteswap(value.ssao_flags);
	byteswap(value.radius);
	byteswap(value.step_size);
	byteswap(value.angle_bias);
	byteswap(value.strength);
	byteswap(value.power_exponent);
	byteswap(value.blur_radius);
	byteswap(value.blur_sharpness);
	byteswap(value.decorator_apply_darkening_scaler);
	byteswap(value.hemi_rejection_falloff);
	byteswap(value.gtao_intensity);
	byteswap(value.sun_ao);
	byteswap(value.spot_light_ao);
	byteswap(value.omni_light_ao);
}

template<> void byteswap<blofeld::infinite::s_speccontrolnodeint>(blofeld::infinite::s_speccontrolnodeint& value)
{
	byteswap(value.type);
	byteswap(value.flags);
	byteswap(value.input);
	byteswap(value.very_low);
	byteswap(value.low);
	byteswap(value.medium);
	byteswap(value.high);
	byteswap(value.ultra);
	byteswap(value.splitscreen_logic);
	byteswap(value._2_player_splitscreen);
	byteswap(value._3_player_splitscreen);
	byteswap(value._4_player_splitscreen);
}

template<> void byteswap<blofeld::infinite::s_speccontrolnodefloat>(blofeld::infinite::s_speccontrolnodefloat& value)
{
	byteswap(value.type);
	byteswap(value.flags);
	byteswap(value.input);
	byteswap(value.very_low);
	byteswap(value.low);
	byteswap(value.medium);
	byteswap(value.high);
	byteswap(value.ultra);
	byteswap(value.splitscreen_logic);
	byteswap(value._2_player_splitscreen);
	byteswap(value._3_player_splitscreen);
	byteswap(value._4_player_splitscreen);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingsdeferredreflectionsparameter>(blofeld::infinite::s_camera_fx_settingsdeferredreflectionsparameter& value)
{
	byteswap(value.flags);
	byteswap(value.deferred_reflection_flags);
	byteswap(value.intensity);
	byteswap(value.intensity_first_person);
	byteswap(value.fade_to_cubemap);
	byteswap(value.border_fade_size);
	byteswap(value.ray_steps);
	byteswap(value.mip_blur_distance_scale);
	byteswap(value.depth_thickness);
	byteswap(value.ssr_near_fade_distance);
	byteswap(value.ssr_far_fade_distance);
	byteswap(value.ssr_roughness_threshold);
	byteswap(value.ssr_tonemap_strength);
	byteswap(value.ssr_tonemap_clamp);
	byteswap(value.resolution);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingss_camera_lens_dirt_parameter>(blofeld::infinite::s_camera_fx_settingss_camera_lens_dirt_parameter& value)
{
	byteswap(value.flags);
	byteswap(value.intensity);
	byteswap(value.dirt_texture);
	byteswap(value.dirt_type);
}

template<> void byteswap<blofeld::infinite::s_speccontrolnodebool>(blofeld::infinite::s_speccontrolnodebool& value)
{
	byteswap(value.type);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_camera_fx_settingscontactshadowsparameter>(blofeld::infinite::s_camera_fx_settingscontactshadowsparameter& value)
{
	byteswap(value.flags);
	byteswap(value.contact_shadow_flags);
	byteswap(value.enabled);
	byteswap(value.ray_steps);
	byteswap(value.ray_steps_first_person_scalar);
	byteswap(value.maximum_shadow_ray_length);
	byteswap(value.maximum_shadow_ray_length_first_person_scalar);
	byteswap(value.ray_pixel_stride);
	byteswap(value.first_person_pixel_stride_first_person_scalar);
	byteswap(value.average_occluder_thickness);
	byteswap(value.average_occluder_thickness_first_person);
	byteswap(value.shadow_softness_scale);
	byteswap(value.shadow_softness_scale_first_person);
	byteswap(value.shadow_fade_start_distance);
	byteswap(value.shadow_fade_end_distance);
	byteswap(value.global_opacity);
	byteswap(value.global_opacity_first_person);
	byteswap(value.ray_start_bias);
	byteswap(value.ray_start_bias_far_distance);
	byteswap(value.ray_start_bias_offset_at_far_distance);
	byteswap(value.ray_start_bias_first_person);
	byteswap(value.first_person_transition_scalar);
}

template<> void byteswap<blofeld::infinite::s_c_camera_fx_settings>(blofeld::infinite::s_c_camera_fx_settings& value)
{
	byteswap(value.anytag);
	byteswap(value.exposure);
	byteswap(value.auto_exposure_sensitivity);
	byteswap(value.exposure_pitch_influence);
	byteswap(value.exposure_compensation);
	byteswap(value.bloom_highlight);
	byteswap(value.bloom_highlight_threshold);
	byteswap(value.bloom_inherent);
	byteswap(value.bloom_intensity);
	byteswap(value.bloom_layer_intensity);
	byteswap(value.bloom_tint_color);
	byteswap(value.self_illum_exposure_settings);
	byteswap(value.self_illum_scale);
	byteswap(value.self_illum_scale_unsc);
	byteswap(value.self_illum_scale_covenant);
	byteswap(value.self_illum_scale_forerunner);
	byteswap(value.effect_exposure_override$2);
	byteswap(value.color_grading);
	byteswap(value.ssao_settings);
	byteswap(value.deferred_reflections_settings);
	byteswap(value.camera_lens_dirt);
	byteswap(value.contact_shadows);
}

template<> void byteswap<blofeld::infinite::s_s_character_voice_region_permutation_filter>(blofeld::infinite::s_s_character_voice_region_permutation_filter& value)
{
	byteswap(value.permutation_name);
}

template<> void byteswap<blofeld::infinite::s_s_character_voice_region_filter>(blofeld::infinite::s_s_character_voice_region_filter& value)
{
	byteswap(value.region_name);
	byteswap(value.permutation_filters_block);
}

template<> void byteswap<blofeld::infinite::s_s_character_voice>(blofeld::infinite::s_s_character_voice& value)
{
	byteswap(value.dialogue);
	byteswap(value.designator);
	byteswap(value.weight);
	byteswap(value.region_filters_block);
}

template<> void byteswap<blofeld::infinite::s_character_variant>(blofeld::infinite::s_character_variant& value)
{
	byteswap(value.variant_name);
	byteswap(value.variant_index);
	byteswap(value.style_id);
	byteswap(value.voices_block);
}

template<> void byteswap<blofeld::infinite::s_c_character_voice_properties_internal>(blofeld::infinite::s_c_character_voice_properties_internal& value)
{
	byteswap(value.voices_block);
}

template<> void byteswap<blofeld::infinite::s_c_character_development_status_properties_internal>(blofeld::infinite::s_c_character_development_status_properties_internal& value)
{
	byteswap(value.stage);
}

template<> void byteswap<blofeld::infinite::s_s_disallowed_weapons_from_trading>(blofeld::infinite::s_s_disallowed_weapons_from_trading& value)
{
	byteswap(value.weapon);
}

template<> void byteswap<blofeld::infinite::s_c_character_general_properties_internal>(blofeld::infinite::s_c_character_general_properties_internal& value)
{
	byteswap(value.general_flags);
	byteswap(value.type);
	byteswap(value.rank);
	byteswap(value.prototype_script);
	byteswap(value.max_leader_dist);
	byteswap(value.absolute_max_leader_dist);
	byteswap(value.max_player_dialogue_dist);
	byteswap(value.scariness);
	byteswap(value.default_grenade_type);
	byteswap(value.behavior_tree_root);
	byteswap(value.data_behavior_tree);
	byteswap(value.disallowed_weapons_from_trading_block);
	byteswap(value.initial_primary_weapon_);
	byteswap(value.primary_weapon_configuration);
	byteswap(value.initial_secondary_weapon_);
	byteswap(value.secondary_weapon_configuration);
	byteswap(value.initial_equipment_);
	byteswap(value.shield_frame_attachment);
	byteswap(value.token_priority);
	byteswap(value.designer_metadata_block);
	byteswap(value.dialogue_system_metadata_block);
}

template<> void byteswap<blofeld::infinite::s_c_character_proto_spawn_properties_internal>(blofeld::infinite::s_c_character_proto_spawn_properties_internal& value)
{
	byteswap(value.proto_spawn_type_);
}

template<> void byteswap<blofeld::infinite::s_c_character_interact_properties_internal>(blofeld::infinite::s_c_character_interact_properties_internal& value)
{
	byteswap(value.interact_flags);
	byteswap(value.default_maximum_object_interact_range);
}

template<> void byteswap<blofeld::infinite::s_s_ai_character_emotion_situational_danger_properties>(blofeld::infinite::s_s_ai_character_emotion_situational_danger_properties& value)
{
	byteswap(value.highest_prop_class);
	byteswap(value.situational_danger);
}

template<> void byteswap<blofeld::infinite::s_c_character_emotions_properties_internal>(blofeld::infinite::s_c_character_emotions_properties_internal& value)
{
	byteswap(value.situational_danger_block);
	byteswap(value.perceived_danger_increase_half_life);
	byteswap(value.perceived_danger_decay_half_life);
	byteswap(value.perceived_danger_alert_threshold);
	byteswap(value.perceived_danger_combat_threshold);
}

template<> void byteswap<blofeld::infinite::s_c_character_vitality_properties_internal>(blofeld::infinite::s_c_character_vitality_properties_internal& value)
{
	byteswap(value.vitality_flags);
	byteswap(value.normal_body_vitality);
	byteswap(value.normal_shield_vitality);
	byteswap(value.legendary_body_vitality);
	byteswap(value.legendary_shield_vitality);
	byteswap(value.body_recharge_fraction);
	byteswap(value.soft_ping_threshold_with_shields);
	byteswap(value.soft_ping_threshold_no_shields);
	byteswap(value.medium_ping_threshold_with_shields);
	byteswap(value.medium_ping_threshold_no_shields);
	byteswap(value.medium_ping_cooldown_time);
	byteswap(value.hard_ping_threshold_with_shields);
	byteswap(value.hard_ping_threshold_no_shields);
	byteswap(value.hard_ping_cooldown_time);
	byteswap(value.body_recharge_delay_time);
	byteswap(value.body_recharge_time);
	byteswap(value.shield_recharge_delay_time);
	byteswap(value.shield_recharge_time);
	byteswap(value.extended_shield_damage_threshold);
	byteswap(value.extended_body_damage_threshold);
	byteswap(value.runtime_body_recharge_velocity);
	byteswap(value.runtime_shield_recharge_velocity);
	byteswap(value.resurrect_weapon);
	byteswap(value.player_damage_scale);
	byteswap(value.collision_damage_override);
	byteswap(value.knockback_collision_damage_override);
	byteswap(value.stun_threshold_easy);
	byteswap(value.stun_threshold_normal);
	byteswap(value.stun_threshold_heroic);
	byteswap(value.stun_threshold_legendary);
	byteswap(value.stun_time_scale_easy);
	byteswap(value.stun_time_scale_normal);
	byteswap(value.stun_time_scale_heroic);
	byteswap(value.stun_time_scale_legendary);
	byteswap(value.stun_cooldown_easy);
	byteswap(value.stun_cooldown_normal);
	byteswap(value.stun_cooldown_heroic);
	byteswap(value.stun_cooldown_legendary);
}

template<> void byteswap<blofeld::infinite::s_c_character_placement_properties_internal>(blofeld::infinite::s_c_character_placement_properties_internal& value)
{
	byteswap(value.few_upgrade_chance_easy);
	byteswap(value.few_upgrade_chance_normal);
	byteswap(value.few_upgrade_chance_heroic);
	byteswap(value.few_upgrade_chance_legendary);
	byteswap(value.normal_upgrade_chance_easy);
	byteswap(value.normal_upgrade_chance_normal);
	byteswap(value.normal_upgrade_chance_heroic);
	byteswap(value.normal_upgrade_chance_legendary);
	byteswap(value.many_upgrade_chance_easy);
	byteswap(value.many_upgrade_chance_normal);
	byteswap(value.many_upgrade_chance_heroic);
	byteswap(value.many_upgrade_chance_legendary);
}

template<> void byteswap<blofeld::infinite::s_c_character_base_perception_properties_internal>(blofeld::infinite::s_c_character_base_perception_properties_internal& value)
{
	byteswap(value.flags);
	byteswap(value.silent_movement_speed_threshold);
	byteswap(value.perception_decay_delay);
	byteswap(value.moving_perception_decay_delay);
	byteswap(value.perception_begin_to_forget_time);
	byteswap(value.perception_forget_time);
	byteswap(value.combat_status_alert_cooldown);
	byteswap(value.combat_status_active_cooldown);
	byteswap(value.postcombat_clump_state_time);
	byteswap(value.weapon_impact_danger_impulse);
	byteswap(value.bullet_impact_danger_impulse);
	byteswap(value.spartan_abilitiy_impact_danger_impulse);
	byteswap(value.footsteps_danger_impulse);
	byteswap(value.jump_landing_impact_danger_impulse);
}

template<> void byteswap<blofeld::infinite::s_s_active_camo_perception_properties>(blofeld::infinite::s_s_active_camo_perception_properties& value)
{
	byteswap(value.partial_invisibility_amount);
	byteswap(value.partial_invisibility_vision_distance);
	byteswap(value.full_invisibility_amount);
	byteswap(value.full_invisibility_vision_distance);
}

template<> void byteswap<blofeld::infinite::s_c_character_perception_properties_internal>(blofeld::infinite::s_c_character_perception_properties_internal& value)
{
	byteswap(value.perception_mode);
	byteswap(value.flags);
	byteswap(value.maximum_vision_distance);
	byteswap(value.reliable_vision_distance);
	byteswap(value.maximum_peripheral_vision_distance);
	byteswap(value.reliable_peripheral_vision_distance);
	byteswap(value.max_peripheral_vision_distance_at_peripheral_vision_angle);
	byteswap(value.max_reliable_peripheral_vision_distance_at_peripheral_vision_angle);
	byteswap(value.maximum_unmistakable_distance);
	byteswap(value.surprise_distance);
	byteswap(value.min_distance_from_last_known_position_to_surprise);
	byteswap(value.min_time_from_last_clump_surprise);
	byteswap(value.min_time_from_last_seen_to_surprise);
	byteswap(value.surprise_lerp_distance_range);
	byteswap(value.surprise_angle_range);
	byteswap(value.focus_interior_angle);
	byteswap(value.focus_exterior_angle);
	byteswap(value.peripheral_vision_angle);
	byteswap(value.vertical_exterior_up_angle);
	byteswap(value.vertical_exterior_down_angle);
	byteswap(value.hearing_distance);
	byteswap(value.max_propagation_time);
	byteswap(value.partial_perception_awareness_delay);
	byteswap(value.full_perception_awareness_delay);
	byteswap(value.unmistakable_perception_awareness_delay);
	byteswap(value.partial_perception_acknowledgement_delay);
	byteswap(value.full_perception_acknowledgement_delay);
	byteswap(value.unmistakable_perception_acknowledgement_delay);
	byteswap(value.awareness_glance_level);
	byteswap(value.identify_hologram_chance);
	byteswap(value.hologram_ignore_timer);
	byteswap(value.hologram_ignore_timer_shot_penalty);
	byteswap(value.mapping);
	byteswap(value.normal_active_camo_perception);
	byteswap(value.legendary_active_camo_perception);
}

template<> void byteswap<blofeld::infinite::s_c_character_target_properties_internal>(blofeld::infinite::s_c_character_target_properties_internal& value)
{
	byteswap(value.player_preference);
}

template<> void byteswap<blofeld::infinite::s_c_character_look_properties_internal>(blofeld::infinite::s_c_character_look_properties_internal& value)
{
	byteswap(value.maximum_aiming_deviation);
	byteswap(value.maximum_looking_deviation);
	byteswap(value.runtime_aiming_deviation_cosines);
	byteswap(value.runtime_looking_deviation_cosines);
	byteswap(value.noncombat_look_delta_l);
	byteswap(value.noncombat_look_delta_r);
	byteswap(value.combat_look_delta_l);
	byteswap(value.combat_look_delta_r);
	byteswap(value.noncombat_idle_looking);
	byteswap(value.noncombat_idle_aiming);
	byteswap(value.combat_idle_looking);
	byteswap(value.combat_idle_aiming);
}

template<> void byteswap<blofeld::infinite::s_characterhopdefinition>(blofeld::infinite::s_characterhopdefinition& value)
{
	byteswap(value.min_hop_distance);
	byteswap(value.min_hop_distance_to_path_end);
	byteswap(value.hop_wait_timer_min_max);
	byteswap(value.max_hop_distance);
	byteswap(value.pad);
}

template<> void byteswap<blofeld::infinite::s_characterhopdefinitionset>(blofeld::infinite::s_characterhopdefinitionset& value)
{
	byteswap(value._default);
	byteswap(value.passive);
	byteswap(value.aggressive);
}

template<> void byteswap<blofeld::infinite::s_c_character_hopping_properties_internal>(blofeld::infinite::s_c_character_hopping_properties_internal& value)
{
	byteswap(value.hopping_flags);
	byteswap(value.hopping_definition_block);
}

template<> void byteswap<blofeld::infinite::s_characterwarpdefinition>(blofeld::infinite::s_characterwarpdefinition& value)
{
	byteswap(value.min_warp_distance);
	byteswap(value.max_warp_distance);
	byteswap(value.warp_speed);
	byteswap(value.run_up_distance);
	byteswap(value.linear_distance_until_cooldown);
	byteswap(value.cooldown_duration);
	byteswap(value.min_jump_distance);
}

template<> void byteswap<blofeld::infinite::s_characterwarpdefinitionset>(blofeld::infinite::s_characterwarpdefinitionset& value)
{
	byteswap(value._default);
	byteswap(value.passive);
	byteswap(value.aggressive);
}

template<> void byteswap<blofeld::infinite::s_c_character_warp_properties_internal>(blofeld::infinite::s_c_character_warp_properties_internal& value)
{
	byteswap(value.warp_definition_block);
	byteswap(value.intro_effect);
	byteswap(value.travel_effect);
	byteswap(value.outro_effect);
}

template<> void byteswap<blofeld::infinite::s_s_character_movement_stationary_pause_settings>(blofeld::infinite::s_s_character_movement_stationary_pause_settings& value)
{
	byteswap(value.direction_change_angle);
	byteswap(value.stationary_change);
}

template<> void byteswap<blofeld::infinite::s_s_character_movement_throttle_control_settings>(blofeld::infinite::s_s_character_movement_throttle_control_settings& value)
{
	byteswap(value.distance);
	byteswap(value.throttle_scale);
}

template<> void byteswap<blofeld::infinite::s_s_character_movement_throttle_per_combat_status_settings>(blofeld::infinite::s_s_character_movement_throttle_per_combat_status_settings& value)
{
	byteswap(value.combat_status);
	byteswap(value.throttle_settings_block);
}

template<> void byteswap<blofeld::infinite::s_characterlocomotionsettings>(blofeld::infinite::s_characterlocomotionsettings& value)
{
	byteswap(value.sharp_turn_throttle);
	byteswap(value.sharp_turn_angle);
	byteswap(value.max_accel_time);
	byteswap(value.max_decel_time);
}

template<> void byteswap<blofeld::infinite::s_c_character_movement_properties_internal>(blofeld::infinite::s_c_character_movement_properties_internal& value)
{
	byteswap(value.movement_flags);
	byteswap(value.pathfinding_radius);
	byteswap(value.avoidance_radius);
	byteswap(value.destination_radius);
	byteswap(value.friendly_outer_radius);
	byteswap(value.friendly_inner_radius);
	byteswap(value.friendly_player_outer_radius);
	byteswap(value.friendly_player_inner_radius);
	byteswap(value.obstacle_leap_min_size);
	byteswap(value.obstacle_leap_max_size);
	byteswap(value.obstacle_ignore_size);
	byteswap(value.obstacle_smashable_size);
	byteswap(value.clearance_cache_bucket_size);
	byteswap(value.max_jump_height);
	byteswap(value.max_jump_distance);
	byteswap(value.maximum_leap_height);
	byteswap(value.leap_proximity_fraction);
	byteswap(value.maximum_hoist_height);
	byteswap(value.obstacle_smash_strength);
	byteswap(value.movement_hints);
	byteswap(value.change_direction_pause_block);
	byteswap(value.maximum_throttle);
	byteswap(value.minimum_throttle);
	byteswap(value.throttle_smoothing_rate);
	byteswap(value.movement_throttle_control_block);
	byteswap(value.minimum_juke_throttle);
	byteswap(value.minimum_direction_change_juke_angle);
	byteswap(value.non_direction_change_juke_probability);
	byteswap(value.non_direction_change_juke_timeout);
	byteswap(value.minimum_post_juke_movement_ticks);
	byteswap(value.stationary_turn_radius);
	byteswap(value.move_distance);
	byteswap(value.phase_chance);
	byteswap(value.phase_delay_seconds);
	byteswap(value.maximum_deviation_angle);
	byteswap(value.locomotion_settings);
	byteswap(value.wall_climb_cost_multiplier_);
	byteswap(value.air_nav_firing_point_position);
}

template<> void byteswap<blofeld::infinite::s_c_character_aimingfacing_properties_internal>(blofeld::infinite::s_c_character_aimingfacing_properties_internal& value)
{
	byteswap(value.flags);
	byteswap(value.default_facing_mode);
	byteswap(value.strafe_to_run_rate);
	byteswap(value.run_to_strafe_rate);
	byteswap(value.start_distance_threshold);
	byteswap(value.end_distance_threshold);
	byteswap(value.path_minimum_length);
	byteswap(value.minimum_distance_to_target);
}

template<> void byteswap<blofeld::infinite::s_c_character_deceleratedturns_properties_internal>(blofeld::infinite::s_c_character_deceleratedturns_properties_internal& value)
{
	byteswap(value.turn_slerp_blend_table);
	byteswap(value.turn_anticipation_blend_table);
	byteswap(value.turn_reaction_blend_table);
	byteswap(value.turn_reaction_cosine_power);
	byteswap(value.turn_reaction_cosine_factor);
}

template<> void byteswap<blofeld::infinite::s_i343bipedmodespecificlocomotionscaledefinition>(blofeld::infinite::s_i343bipedmodespecificlocomotionscaledefinition& value)
{
	byteswap(value.mode_name);
	byteswap(value.speed_scale);
	byteswap(value.acceleration_scale);
	byteswap(value.locomotion_turn_rate_scale);
}

template<> void byteswap<blofeld::infinite::s_i343bipedlocomotionpropertiesdefinition>(blofeld::infinite::s_i343bipedlocomotionpropertiesdefinition& value)
{
	byteswap(value.walking_speed);
	byteswap(value.ai_sprinting_speed);
	byteswap(value.running_forward_speed);
	byteswap(value.running_backward_speed);
	byteswap(value.running_sideways_speed);
	byteswap(value.crouching_forward_speed);
	byteswap(value.crouching_backward_speed);
	byteswap(value.crouching_sideways_speed);
	byteswap(value.maximum_run_acceleration);
	byteswap(value.maximum_run_deceleration);
	byteswap(value.maximum_crouch_acceleration);
	byteswap(value.maximum_crouch_deceleration);
	byteswap(value.maximum_airborne_acceleration);
	byteswap(value.maximum_airborne_deceleration);
	byteswap(value.low_speed_threshold);
	byteswap(value.high_speed_threshold);
	byteswap(value.acceleration);
	byteswap(value.stationary_turn_trigger_range_factor);
	byteswap(value.stationary_turn_max_anim_playback_speed_up_factor);
	byteswap(value.min_stationary_turn_angle);
	byteswap(value.stationary_turn_max_speed_threshold);
	byteswap(value.stationary_turn_min_yaw_threshold);
	byteswap(value.stationary_turn_max_speed_yaw);
	byteswap(value.min_stationary_turn_speed);
	byteswap(value.max_stationary_turn_speed);
	byteswap(value.stationary_turn_acceleration_rate);
	byteswap(value.stationary_turn_decceleration_rate);
	byteswap(value.max_angular_velocity_clamp);
	byteswap(value.turn_accel_decel_rate);
	byteswap(value.mode_specific_scaling_block);
}

template<> void byteswap<blofeld::infinite::s_c_character_locomotionoverrides_properties_internal>(blofeld::infinite::s_c_character_locomotionoverrides_properties_internal& value)
{
	byteswap(value.locomotion_overrides);
}

template<> void byteswap<blofeld::infinite::s_c_character_movementtweak_properties_internal>(blofeld::infinite::s_c_character_movementtweak_properties_internal& value)
{
	byteswap(value.dive_grenade_chance);
	byteswap(value.brace_grenade_chance);
	byteswap(value.dive_vehicle_chance);
	byteswap(value.brace_vehicle_chance);
	byteswap(value.stand_ground_chance);
	byteswap(value.stand_ground_anticipation_time);
	byteswap(value.brace_for_grenade_time);
	byteswap(value.brace_for_vehicle_impact_time);
	byteswap(value.brace_for_vehicle_impact_prediction_time);
	byteswap(value.brace_for_vehicle_impact_velocity_threshold);
	byteswap(value.jump_height);
}

template<> void byteswap<blofeld::infinite::s_c_character_throttle_style_properties_internal>(blofeld::infinite::s_c_character_throttle_style_properties_internal& value)
{
	byteswap(value.style_name);
	byteswap(value.desired_throttle);
	byteswap(value.acceleration_time);
	byteswap(value.acceleration_function);
	byteswap(value.deceleration_distance);
	byteswap(value.deceleration_function);
	byteswap(value.stance);
}

template<> void byteswap<blofeld::infinite::s_character_movement_mapping>(blofeld::infinite::s_character_movement_mapping& value)
{
	byteswap(value.chance);
	byteswap(value.idle);
	byteswap(value.alert);
	byteswap(value.engage);
	byteswap(value.self_preserve);
	byteswap(value.search);
	byteswap(value.retreat);
	byteswap(value.panic);
	byteswap(value.flank);
	byteswap(value._protected);
	byteswap(value.stunned);
	byteswap(value.post_combat);
	byteswap(value.hurry);
	byteswap(value.custom_1);
	byteswap(value.custom_2);
	byteswap(value.custom_3);
	byteswap(value.custom_4);
}

template<> void byteswap<blofeld::infinite::s_character_movement_set>(blofeld::infinite::s_character_movement_set& value)
{
	byteswap(value.name);
	byteswap(value.variants_block);
}

template<> void byteswap<blofeld::infinite::s_c_character_flocking_properties_internal>(blofeld::infinite::s_c_character_flocking_properties_internal& value)
{
	byteswap(value.deceleration_distance);
	byteswap(value.normalized_speed);
	byteswap(value.buffer_distance);
	byteswap(value.throttle_threshold_bounds);
	byteswap(value.deceleration_stop_time);
}

template<> void byteswap<blofeld::infinite::s_c_character_swarm_properties_internal>(blofeld::infinite::s_c_character_swarm_properties_internal& value)
{
	byteswap(value.scatter_killed_count);
	byteswap(value.scatter_radius);
	byteswap(value.scatter_time);
	byteswap(value.hound_min_distance);
	byteswap(value.hound_max_distance);
	byteswap(value.perlin_offset_scale);
	byteswap(value.offset_period);
	byteswap(value.perlin_idle_movement_threshold);
	byteswap(value.perlin_combat_movement_threshold);
	byteswap(value.stuck_time);
	byteswap(value.stuck_distance);
}

template<> void byteswap<blofeld::infinite::s_c_character_ready_properties_internal>(blofeld::infinite::s_c_character_ready_properties_internal& value)
{
	byteswap(value.ready_time_bounds);
}

template<> void byteswap<blofeld::infinite::s_animationexception>(blofeld::infinite::s_animationexception& value)
{
	byteswap(value.animation_exception_name);
}

template<> void byteswap<blofeld::infinite::s_c_character_engage_properties_internal>(blofeld::infinite::s_c_character_engage_properties_internal& value)
{
	byteswap(value.flags);
	byteswap(value.reposition_bounds);
	byteswap(value.bunkering_reposition_bounds);
	byteswap(value.crouch_danger_threshold);
	byteswap(value.crouch_max_path_distance);
	byteswap(value.stand_danger_threshold);
	byteswap(value.fight_danger_move_threshold);
	byteswap(value.fight_danger_move_threshold_cooldown);
	byteswap(value.override_grenade_projectile);
	byteswap(value.default_combat_range);
	byteswap(value.default_firing_range);
	byteswap(value.preferred_engage_fraction_);
	byteswap(value.active_shield_fire_cutoff_delay);
	byteswap(value.friendly_avoid_distance);
	byteswap(value.friendly_close_avoid_distance);
	byteswap(value.teamlead_flocking_distance);
	byteswap(value.enemy_avoid_distance);
	byteswap(value.scary_enemy_avoid_distance);
	byteswap(value.full_body_animation_exceptions_for_firing_reset_block);
	byteswap(value.max_angle_from_level);
}

template<> void byteswap<blofeld::infinite::s_kamikazeattachmentmarkers>(blofeld::infinite::s_kamikazeattachmentmarkers& value)
{
	byteswap(value.attachment_marker);
}

template<> void byteswap<blofeld::infinite::s_character_charge_difficulty_limits>(blofeld::infinite::s_character_charge_difficulty_limits& value)
{
	byteswap(value.max_kamikaze_count);
	byteswap(value.max_berserk_count);
	byteswap(value.min_berserk_count);
}

template<> void byteswap<blofeld::infinite::s_c_character_berserk_properties_internal>(blofeld::infinite::s_c_character_berserk_properties_internal& value)
{
	byteswap(value.flags);
	byteswap(value.berserk_weapon);
	byteswap(value.timeout);
	byteswap(value.shield_down_chance);
	byteswap(value.shield_down_range);
	byteswap(value.friendly_killed_distance);
	byteswap(value.peer_killed_chance);
	byteswap(value.leader_killed_chance);
	byteswap(value.chance_to_play_berserk_anim);
	byteswap(value.chance_to_play_berserk_anim_when_stuck);
	byteswap(value.proximity_chance);
	byteswap(value.proximity_check_cooldown);
	byteswap(value.proximity_abort_distance);
	byteswap(value.broken_kamikaze_chance);
	byteswap(value.surprise_kamikaze_chance);
	byteswap(value.kamikaze_attachment_markers_block);
	byteswap(value.broken_kamikaze_stuck_delay);
	byteswap(value.max_kamikaze_time);
	byteswap(value.last_man_trigger_distance);
	byteswap(value.difficulty_limits_block);
}

template<> void byteswap<blofeld::infinite::s_c_character_weaponpickup_properties_internal>(blofeld::infinite::s_c_character_weaponpickup_properties_internal& value)
{
	byteswap(value.search_range);
	byteswap(value.minimum_target_range);
	byteswap(value.desired_target_range);
	byteswap(value.search_chance);
	byteswap(value.range_threshold);
	byteswap(value.vehicle_threshold);
	byteswap(value.search_delay_min);
	byteswap(value.search_delay_max);
	byteswap(value.bias);
	byteswap(value.danger_threshold);
}

template<> void byteswap<blofeld::infinite::s_c_character_evasion_properties_internal>(blofeld::infinite::s_c_character_evasion_properties_internal& value)
{
	byteswap(value.evasion_danger_threshold);
	byteswap(value.evasion_delay_timer);
	byteswap(value.evasion_chance);
	byteswap(value.evasion_proximity_threshold);
	byteswap(value.dive_retreat_chance);
}

template<> void byteswap<blofeld::infinite::s_c_character_dodge_properties_internal>(blofeld::infinite::s_c_character_dodge_properties_internal& value)
{
	byteswap(value.danger_threshold);
	byteswap(value.cooldown);
	byteswap(value.chance);
	byteswap(value.stop_proximity);
}

template<> void byteswap<blofeld::infinite::s_characterrunawayfromvehiclepropertiesinternal>(blofeld::infinite::s_characterrunawayfromvehiclepropertiesinternal& value)
{
	byteswap(value.chance);
	byteswap(value.minimum_time_to_flee);
	byteswap(value.time_to_flee);
	byteswap(value.time_to_keep_path);
}

template<> void byteswap<blofeld::infinite::s_c_character_cover_properties_internal>(blofeld::infinite::s_c_character_cover_properties_internal& value)
{
	byteswap(value.cover_flags);
	byteswap(value.hide_behind_cover_time);
	byteswap(value.cover_shield_fraction);
	byteswap(value.cover_vitality_threshold);
	byteswap(value.cover_danger_threshold);
	byteswap(value.leave_cover_danger_threshold);
	byteswap(value.minimum_defensive_distance_from_target);
	byteswap(value.minimum_defensive_distance_from_cover);
	byteswap(value.always_defensive_scary_threshold);
	byteswap(value.cover_check_delay);
	byteswap(value.cover_pinned_down_check_delay);
	byteswap(value.emerge_from_cover_when_shield_fraction_reaches_threshold);
	byteswap(value.body_vitality_exit_threshold);
	byteswap(value.proximity_self_preserve);
	byteswap(value.unreachable_enemy_danger_threshold);
	byteswap(value.scary_target_threshold);
	byteswap(value.minimum_enemy_distance);
}

template<> void byteswap<blofeld::infinite::s_c_character_retreat_properties_internal>(blofeld::infinite::s_c_character_retreat_properties_internal& value)
{
	byteswap(value.retreat_flags);
	byteswap(value.shield_threshold);
	byteswap(value.scary_target_threshold);
	byteswap(value.danger_threshold);
	byteswap(value.proximity_threshold);
	byteswap(value.min_max_forced_cower_time_bounds);
	byteswap(value.min_max_cower_timeout_bounds);
	byteswap(value.proximity_ambush_threshold);
	byteswap(value.awareness_ambush_threshold);
	byteswap(value.leader_dead_retreat_chance);
	byteswap(value.peer_dead_retreat_chance);
	byteswap(value.second_peer_dead_retreat_chance);
	byteswap(value.flee_timeout);
	byteswap(value.zig_zag_angle);
	byteswap(value.zig_zag_period);
	byteswap(value.retreat_grenade_chance);
}

template<> void byteswap<blofeld::infinite::s_c_character_search_properties_internal>(blofeld::infinite::s_c_character_search_properties_internal& value)
{
	byteswap(value.search_flags);
	byteswap(value.search_time);
	byteswap(value.search_distance);
	byteswap(value.max_searcher_count_);
	byteswap(value.uncover_distance_bounds);
	byteswap(value.vocalization_time);
}

template<> void byteswap<blofeld::infinite::s_c_character_presearch_properties_internal>(blofeld::infinite::s_c_character_presearch_properties_internal& value)
{
	byteswap(value.pre_search_flags);
	byteswap(value.min_presearch_time);
	byteswap(value.max_presearch_time);
	byteswap(value.peek_time);
	byteswap(value.max_certainty_radius);
	byteswap(value.max_presearcher_count_);
	byteswap(value.max_suppressing_count);
	byteswap(value.max_uncover_count);
	byteswap(value.max_destroy_cover_count);
	byteswap(value.max_suppress_time);
	byteswap(value.fire_to_uncover_chance_);
	byteswap(value.max_destroy_cover_time);
	byteswap(value.suppressing_fire_weight);
	byteswap(value.uncover_weight);
	byteswap(value.leap_on_cover_weight);
	byteswap(value.destroy_cover_weight);
	byteswap(value.guard_weight);
	byteswap(value.investigate_weight);
	byteswap(value.search_by_fire_weight);
}

template<> void byteswap<blofeld::infinite::s_characterrecognizingpropertiesinternal>(blofeld::infinite::s_characterrecognizingpropertiesinternal& value)
{
	byteswap(value.recognize_min_time);
	byteswap(value.recognize_max_time);
}

template<> void byteswap<blofeld::infinite::s_c_character_idle_properties_internal>(blofeld::infinite::s_c_character_idle_properties_internal& value)
{
	byteswap(value.idle_pose_delay_time);
	byteswap(value.wander_delay_time);
}

template<> void byteswap<blofeld::infinite::s_systematicrecreationsettings>(blofeld::infinite::s_systematicrecreationsettings& value)
{
	byteswap(value.required_weapon_class);
	byteswap(value.cooldown);
	byteswap(value.duration);
}

template<> void byteswap<blofeld::infinite::s_c_character_precombat_properties_internal>(blofeld::infinite::s_c_character_precombat_properties_internal& value)
{
	byteswap(value.systematic_recreation_settings_block);
}

template<> void byteswap<blofeld::infinite::s_c_character_vocalization_properties_internal>(blofeld::infinite::s_c_character_vocalization_properties_internal& value)
{
	byteswap(value.character_skip_fraction);
	byteswap(value.speaker_weight_bonus);
	byteswap(value.look_trigger_distance);
	byteswap(value.look_cooldown_time);
	byteswap(value.look_comment_time);
	byteswap(value.look_long_comment_time);
	byteswap(value.look_respond_max_time);
	byteswap(value.look_respond_early_out_time);
}

template<> void byteswap<blofeld::infinite::s_s_character_vehicle_boarding_properties>(blofeld::infinite::s_s_character_vehicle_boarding_properties& value)
{
	byteswap(value.vehicle);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_charactervehicleboardingpullproperties>(blofeld::infinite::s_charactervehicleboardingpullproperties& value)
{
	byteswap(value.vehicle);
	byteswap(value.max_pull);
	byteswap(value.min_linear_acceleration);
	byteswap(value.pull_history_factor);
}

template<> void byteswap<blofeld::infinite::s_c_character_boarding_properties_internal>(blofeld::infinite::s_c_character_boarding_properties_internal& value)
{
	byteswap(value.rule_name);
	byteswap(value.flags);
	byteswap(value.boarding_distance);
	byteswap(value.abort_distance);
	byteswap(value.minimum_entry_distance);
	byteswap(value.maximum_entry_distance);
	byteswap(value.max_speed);
	byteswap(value.board_time);
	byteswap(value.boarding_timeout);
	byteswap(value.vehicle_specific_properties_block);
	byteswap(value.vehicle_specific_pull_properties_block);
	byteswap(value.max_danger);
	byteswap(value.max_pull);
	byteswap(value.min_linear_acceleration);
	byteswap(value.pull_history_factor);
	byteswap(value.ejection_knockback_time);
	byteswap(value.entry_timeout);
	byteswap(value.boarding_chance);
	byteswap(value.hijack_max_wait_time);
	byteswap(value.min_vehicle_vitality);
	byteswap(value.melee_cooldown);
}

template<> void byteswap<blofeld::infinite::s_c_character_kungfu_properties_internal>(blofeld::infinite::s_c_character_kungfu_properties_internal& value)
{
	byteswap(value.kungfu_override_distance);
	byteswap(value.kungfu_cover_danger_threshold);
	byteswap(value.min_allowed_time);
	byteswap(value.min_disallowed_time);
}

template<> void byteswap<blofeld::infinite::s_s_bunker_timings>(blofeld::infinite::s_s_bunker_timings& value)
{
	byteswap(value.open_time);
	byteswap(value.closed_min_time);
	byteswap(value.close_danger_level);
	byteswap(value.open_chance);
	byteswap(value.peek_chance);
}

template<> void byteswap<blofeld::infinite::s_c_character_bunker_properties_internal>(blofeld::infinite::s_c_character_bunker_properties_internal& value)
{
	byteswap(value.flags);
	byteswap(value._default);
	byteswap(value.fight);
	byteswap(value.cover);
	byteswap(value.guard);
}

template<> void byteswap<blofeld::infinite::s_i343aiformationdescription>(blofeld::infinite::s_i343aiformationdescription& value)
{
	byteswap(value.shape);
	byteswap(value.yaw);
	byteswap(value.spacing);
	byteswap(value.max_rectangle_width);
	byteswap(value.formation_reference);
	byteswap(value.max_speed);
	byteswap(value.max_yaw_rate);
}

template<> void byteswap<blofeld::infinite::s_c_character_shield_wall_properties_internal>(blofeld::infinite::s_c_character_shield_wall_properties_internal& value)
{
	byteswap(value.raise_shield_delay);
	byteswap(value.relocate_delay);
	byteswap(value.max_leader_protect_distance);
	byteswap(value.formation_description);
}

template<> void byteswap<blofeld::infinite::s_c_character_firing_wall_properties_internal>(blofeld::infinite::s_c_character_firing_wall_properties_internal& value)
{
	byteswap(value.activation_chance_easy);
	byteswap(value.activation_chance_normal);
	byteswap(value.activation_chance_heroic);
	byteswap(value.activation_chance_legendary);
	byteswap(value.max_distance);
	byteswap(value.min_member_count);
	byteswap(value.max_member_count);
	byteswap(value.fire_time);
	byteswap(value.cooldown);
	byteswap(value.warp_in_time);
	byteswap(value.min_arrival_time_variation);
	byteswap(value.max_arrival_time_variation);
	byteswap(value.warp_out_time);
	byteswap(value.min_departure_time_variation);
	byteswap(value.max_departure_time_variation);
	byteswap(value.max_angle_between_formation_and_target);
	byteswap(value.formation_description);
}

template<> void byteswap<blofeld::infinite::s_characterinterposerequestpropertiesinternal>(blofeld::infinite::s_characterinterposerequestpropertiesinternal& value)
{
	byteswap(value.danger_level);
	byteswap(value.wait_time);
	byteswap(value.cooldown);
}

template<> void byteswap<blofeld::infinite::s_characterinterposepropertiesinternal>(blofeld::infinite::s_characterinterposepropertiesinternal& value)
{
	byteswap(value.protect_time);
	byteswap(value.distance_from_protect);
	byteswap(value.firing_style);
}

template<> void byteswap<blofeld::infinite::s_c_character_bounding_properties_internal>(blofeld::infinite::s_c_character_bounding_properties_internal& value)
{
	byteswap(value.max_wait_time);
	byteswap(value.advance_time);
	byteswap(value.reposition_search_range);
	byteswap(value.max_destination_age);
	byteswap(value.max_cover_agents);
}

template<> void byteswap<blofeld::infinite::s_projectiledeflectionzone>(blofeld::infinite::s_projectiledeflectionzone& value)
{
	byteswap(value.time_to_target_window);
	byteswap(value.target_offset);
	byteswap(value.target_radius);
	byteswap(value.max_incoming_angle);
	byteswap(value.animation_name);
}

template<> void byteswap<blofeld::infinite::s_c_character_deflection_properties_internal>(blofeld::infinite::s_c_character_deflection_properties_internal& value)
{
	byteswap(value.target_areas_block);
}

template<> void byteswap<blofeld::infinite::s_c_character_bot_properties_internal>(blofeld::infinite::s_c_character_bot_properties_internal& value)
{
	byteswap(value.movement_flags);
	byteswap(value.crouch_time);
	byteswap(value.crouch_low_shield_threshold);
	byteswap(value.jump_chance);
	byteswap(value.evade_low_shield_threshold);
	byteswap(value.strafing_influence_vector_radius);
	byteswap(value.strafing_influence_vector_weight);
	byteswap(value.firing_point_refresh_distance);
	byteswap(value.influence_rejection_radius);
	byteswap(value.movement_cooldown_min);
	byteswap(value.movement_cooldown_max);
	byteswap(value.min_reload_chance);
	byteswap(value.max_reload_chance);
}

template<> void byteswap<blofeld::infinite::s_c_character_evasivefight_properties_internal>(blofeld::infinite::s_c_character_evasivefight_properties_internal& value)
{
	byteswap(value.engage_fraction);
	byteswap(value.stationary_time);
	byteswap(value.move_danger_threshold);
	byteswap(value.shield_threshold);
	byteswap(value.dive_cooldown);
	byteswap(value.dive_shield_threshold);
	byteswap(value.dive_danger_threshold);
}

template<> void byteswap<blofeld::infinite::s_c_character_aggressivefight_properties_internal>(blofeld::infinite::s_c_character_aggressivefight_properties_internal& value)
{
	byteswap(value.flags);
	byteswap(value.engage_fraction);
	byteswap(value.stationary_time);
	byteswap(value.move_danger_threshold);
	byteswap(value.max_speed_percent);
}

template<> void byteswap<blofeld::infinite::s_c_character_linearadvancefight_properties_internal>(blofeld::infinite::s_c_character_linearadvancefight_properties_internal& value)
{
	byteswap(value.stationary_time);
	byteswap(value.advance_distance);
}

template<> void byteswap<blofeld::infinite::s_characterstaticfightpropertiesinternal>(blofeld::infinite::s_characterstaticfightpropertiesinternal& value)
{
	byteswap(value.stationary_time);
	byteswap(value.danger_move_threshold);
}

template<> void byteswap<blofeld::infinite::s_characterstandgroundpropertiesinternal>(blofeld::infinite::s_characterstandgroundpropertiesinternal& value)
{
	byteswap(value.target_distance);
	byteswap(value.ally_distance);
	byteswap(value.ally_attacker_distance);
	byteswap(value.behavior_linger_time);
}

template<> void byteswap<blofeld::infinite::s_charactergrenadefightpropertiesinternal>(blofeld::infinite::s_charactergrenadefightpropertiesinternal& value)
{
	byteswap(value.stationary_time);
	byteswap(value.minimum_movement);
	byteswap(value.ideal_fraction);
}

template<> void byteswap<blofeld::infinite::s_c_character_coversequence_properties_internal>(blofeld::infinite::s_c_character_coversequence_properties_internal& value)
{
	byteswap(value.shield_start_threshold);
	byteswap(value.shield_end_threshold);
	byteswap(value.danger_start_threshold);
	byteswap(value.danger_end_threshold);
	byteswap(value.minimum_hide_duration);
}

template<> void byteswap<blofeld::infinite::s_c_character_covermove_properties_internal>(blofeld::infinite::s_c_character_covermove_properties_internal& value)
{
	byteswap(value.flags);
	byteswap(value.cover_failed_duration);
}

template<> void byteswap<blofeld::infinite::s_c_character_coverhide_properties_internal>(blofeld::infinite::s_c_character_coverhide_properties_internal& value)
{
	byteswap(value.minimum_hide_duration);
}

template<> void byteswap<blofeld::infinite::s_c_character_longrangeattack_properties_internal>(blofeld::infinite::s_c_character_longrangeattack_properties_internal& value)
{
	byteswap(value.flags);
	byteswap(value.potshot_duration);
	byteswap(value.peek_duration);
	byteswap(value.time_between_potshots);
}

template<> void byteswap<blofeld::infinite::s_c_character_hoistattack_properties_internal>(blofeld::infinite::s_c_character_hoistattack_properties_internal& value)
{
	byteswap(value.max_danger_threshold);
	byteswap(value.hoist_attack_chance);
}

template<> void byteswap<blofeld::infinite::s_c_character_hunkerdown_properties_internal>(blofeld::infinite::s_c_character_hunkerdown_properties_internal& value)
{
	byteswap(value.danger_start_threshold);
	byteswap(value.distance_abort_threshold);
	byteswap(value.shield_health_threshold);
	byteswap(value.hunker_time);
}

template<> void byteswap<blofeld::infinite::s_c_character_shieldraise_properties_internal>(blofeld::infinite::s_c_character_shieldraise_properties_internal& value)
{
	byteswap(value.danger_threshold);
}

template<> void byteswap<blofeld::infinite::s_sharedvehiclefightproperties>(blofeld::infinite::s_sharedvehiclefightproperties& value)
{
	byteswap(value.engage_fraction);
	byteswap(value.max_speed_percent);
}

template<> void byteswap<blofeld::infinite::s_c_character_vehicleaggressivefight_properties_internal>(blofeld::infinite::s_c_character_vehicleaggressivefight_properties_internal& value)
{
	byteswap(value.fight_properties);
	byteswap(value.flags);
	byteswap(value.max_danger_to_boost);
}

template<> void byteswap<blofeld::infinite::s_c_character_vehicledefensivefight_properties_internal>(blofeld::infinite::s_c_character_vehicledefensivefight_properties_internal& value)
{
	byteswap(value.fight_properties);
}

template<> void byteswap<blofeld::infinite::s_c_character_engineer_properties_internal>(blofeld::infinite::s_c_character_engineer_properties_internal& value)
{
	byteswap(value.death_height);
	byteswap(value.death_rise_time);
	byteswap(value.death_detonation_time);
	byteswap(value.shield_boost_radius_max);
	byteswap(value.shield_boost_period);
	byteswap(value.shield_boost_damage_section_name);
	byteswap(value.detonation_shield_threshold);
	byteswap(value.detonation_body_vitality);
	byteswap(value.proximity_radius);
	byteswap(value.proximity_detonation_chance);
	byteswap(value.proximity_equipment);
}

template<> void byteswap<blofeld::infinite::s_c_character_inspect_properties_internal>(blofeld::infinite::s_c_character_inspect_properties_internal& value)
{
	byteswap(value.stop_distance);
	byteswap(value.inspect_time);
	byteswap(value.search_range);
}

template<> void byteswap<blofeld::infinite::s_c_character_vehicleentranceexit_properties_internal>(blofeld::infinite::s_c_character_vehicleentranceexit_properties_internal& value)
{
	byteswap(value.max_distance_from_actor);
	byteswap(value.minimum_distance_from_player);
	byteswap(value.minimum_distance_from_vehicle);
	byteswap(value.perceived_danger_threshold);
	byteswap(value.minimum_health_to_enter);
	byteswap(value.health_percentage_to_exit);
	byteswap(value.threshold_to_enter);
	byteswap(value.threshold_to_exit);
	byteswap(value.chance_to_exit_vehicle);
	byteswap(value.vehicle_exit_impulse_timer);
}

template<> void byteswap<blofeld::infinite::s_characterweaponpreferences>(blofeld::infinite::s_characterweaponpreferences& value)
{
	byteswap(value.tier_category);
	byteswap(value.weight);
	byteswap(value.multi_tier_multiplier);
}

template<> void byteswap<blofeld::infinite::s_characterweaponmodeselector>(blofeld::infinite::s_characterweaponmodeselector& value)
{
	byteswap(value.initiators);
	byteswap(value.required_conditions);
	byteswap(value.cluster_radius);
	byteswap(value.min_cluster_count);
	byteswap(value.target_range_bounds);
	byteswap(value.danger_bounds);
	byteswap(value.activation_chance);
	byteswap(value.activation_check_delay);
	byteswap(value.projectile_error);
	byteswap(value.lifetime);
	byteswap(value.max_burst_count);
	byteswap(value.trigger_behavior);
}

template<> void byteswap<blofeld::infinite::s_characterfiringprogram>(blofeld::infinite::s_characterfiringprogram& value)
{
	byteswap(value.tracking);
	byteswap(value.matching_fraction);
	byteswap(value.matching_spring_force);
	byteswap(value.leading);
	byteswap(value.error_distance);
	byteswap(value.error_angle);
	byteswap(value.error_max_angle);
	byteswap(value.burst_line_style);
	byteswap(value.burst_line_angle);
	byteswap(value.burst_origin_radius);
	byteswap(value.burst_origin_angle);
	byteswap(value.burst_return_length_min);
	byteswap(value.burst_return_length_max);
	byteswap(value.burst_return_angle);
	byteswap(value.burst_maximum_angular_vel);
	byteswap(value.burst_maximum_error_angle);
	byteswap(value.rate_of_fire);
	byteswap(value.weapon_damage_mod);
	byteswap(value.duration_min);
	byteswap(value.duration_max);
	byteswap(value.separation_min);
	byteswap(value.separation_max);
	byteswap(value.amount);
	byteswap(value.min_period);
	byteswap(value.max_period);
}

template<> void byteswap<blofeld::infinite::s_vehiclevelocitytargeting>(blofeld::infinite::s_vehiclevelocitytargeting& value)
{
	byteswap(value.vehicle_velocity_override_preference);
	byteswap(value.velocity_threshold);
}

template<> void byteswap<blofeld::infinite::s_characterweaponunittargeting>(blofeld::infinite::s_characterweaponunittargeting& value)
{
	byteswap(value.category);
	byteswap(value.preference);
	byteswap(value.vehicle_velocity_based_targeting_block);
}

template<> void byteswap<blofeld::infinite::s_characterweaponmodeprefirebeam>(blofeld::infinite::s_characterweaponmodeprefirebeam& value)
{
	byteswap(value.initial_error_angle);
	byteswap(value.radius_decay_function);
	byteswap(value.beam_spin_function);
	byteswap(value.beam_effect);
	byteswap(value.full_screen_effect);
	byteswap(value.start_marker);
	byteswap(value.fallback_marker);
}

template<> void byteswap<blofeld::infinite::s_characterweaponmode>(blofeld::infinite::s_characterweaponmode& value)
{
	byteswap(value.mode_name);
	byteswap(value.weapons_flags);
	byteswap(value.maximum_firing_range);
	byteswap(value.minimum_firing_range);
	byteswap(value.normal_combat_range);
	byteswap(value.bombardment_range);
	byteswap(value.max_special_target_distance);
	byteswap(value.max_extreme_target_distance);
	byteswap(value.lower_bound_option);
	byteswap(value.ballistic_firing_bounds);
	byteswap(value.ballistic_fraction_bounds);
	byteswap(value.favored_ranges);
	byteswap(value.range_ratings);
	byteswap(value.anti_vehicle_rating_);
	byteswap(value.scariness_threshold);
	byteswap(value.first_burst_delay_time);
	byteswap(value.death_fire_wildly_chance);
	byteswap(value.death_fire_wildly_time);
	byteswap(value.heat_vent_min_percent);
	byteswap(value.ammo_reload_min_percent);
	byteswap(value.reload_chance_if_not_empty);
	byteswap(value.heat_vent_cooldown);
	byteswap(value.custom_stand_gun_offset);
	byteswap(value.custom_crouch_gun_offset);
	byteswap(value.blocked_shot_count);
	byteswap(value.max_pre_fire_time_normal);
	byteswap(value.max_pre_fire_time_heroic);
	byteswap(value.max_pre_fire_time_legendary);
	byteswap(value.selection_properties_block);
	byteswap(value.threat_level);
	byteswap(value.effectiveness_token_close_player_distance);
	byteswap(value.firing_program_block);
	byteswap(value.unit_target_preference_block);
	byteswap(value.prefire_beam_block);
}

template<> void byteswap<blofeld::infinite::s_characterprototypeweaponpropertiesinternal>(blofeld::infinite::s_characterprototypeweaponpropertiesinternal& value)
{
	byteswap(value.weapon);
	byteswap(value.drop_weapon_loaded);
	byteswap(value.drop_weapon_ammo);
	byteswap(value.weapon_melee_damage);
	byteswap(value.normal_accuracy_bounds);
	byteswap(value.normal_accuracy_time);
	byteswap(value.heroic_accuracy_bounds);
	byteswap(value.heroic_accuracy_time);
	byteswap(value.legendary_accuracy_bounds);
	byteswap(value.legendary_accuracy_time);
	byteswap(value.weapon_preferences_block);
	byteswap(value.weapon_modes_block);
}

template<> void byteswap<blofeld::infinite::s_prototypecharacterstyle>(blofeld::infinite::s_prototypecharacterstyle& value)
{
	byteswap(value.style_name);
	byteswap(value.precision);
	byteswap(value.hostility);
	byteswap(value.precision_range);
	byteswap(value.hostility_range);
}

template<> void byteswap<blofeld::infinite::s_c_character_grenade_properties_internal>(blofeld::infinite::s_c_character_grenade_properties_internal& value)
{
	byteswap(value.grenades_flags);
	byteswap(value.grenade_type);
	byteswap(value.trajectory_type);
	byteswap(value.minimum_enemy_count);
	byteswap(value.enemy_radius);
	byteswap(value.throw_error_easy);
	byteswap(value.throw_error_normal);
	byteswap(value.throw_error_heroic);
	byteswap(value.throw_error_legendary);
	byteswap(value.damage_modifier_easy);
	byteswap(value.damage_modifier_normal);
	byteswap(value.damage_modifier_heroic);
	byteswap(value.damage_modifier_legendary);
	byteswap(value.grenade_ideal_velocity);
	byteswap(value.grenade_velocity);
	byteswap(value.grenade_ranges);
	byteswap(value.collateral_damage_radius);
	byteswap(value.grenade_chance);
	byteswap(value.active_shield_modifier);
	byteswap(value.grenade_throw_delay);
	byteswap(value.global_grenade_delay);
	byteswap(value.grenade_uncover_chance);
	byteswap(value.anti_vehicle_grenade_chance);
	byteswap(value.grenade_count);
	byteswap(value.dont_drop_grenades_chance);
}

template<> void byteswap<blofeld::infinite::s_vehiclestrafingproperties>(blofeld::infinite::s_vehiclestrafingproperties& value)
{
	byteswap(value.strafe_min_distance);
	byteswap(value.strafe_abort_distance);
	byteswap(value.defensive_strafe_abort_distance);
}

template<> void byteswap<blofeld::infinite::s_vehicleflyingholdingpatternproperties>(blofeld::infinite::s_vehicleflyingholdingpatternproperties& value)
{
	byteswap(value.holding_pattern_elevation);
	byteswap(value.holding_pattern_speed_percentage);
	byteswap(value.holding_pattern_radius);
	byteswap(value.max_turn_angle_percentage);
}

template<> void byteswap<blofeld::infinite::s_vehicleflyingpreengageproperties>(blofeld::infinite::s_vehicleflyingpreengageproperties& value)
{
	byteswap(value.pre_engage_time);
	byteswap(value.pre_engage_elevation);
	byteswap(value.pre_engage_radius);
}

template<> void byteswap<blofeld::infinite::s_vehicleflyingsuppressedproperties>(blofeld::infinite::s_vehicleflyingsuppressedproperties& value)
{
	byteswap(value.suppressed_time);
	byteswap(value.suppressed_damage_threshold);
	byteswap(value.suppressed_retreat_distance);
	byteswap(value.suppressed_elevation);
	byteswap(value.suppressed_radius);
}

template<> void byteswap<blofeld::infinite::s_vehicleflyingaggressiveengageproperties>(blofeld::infinite::s_vehicleflyingaggressiveengageproperties& value)
{
	byteswap(value.aggressive_loops);
}

template<> void byteswap<blofeld::infinite::s_vehicleflyingdefensiveengageproperties>(blofeld::infinite::s_vehicleflyingdefensiveengageproperties& value)
{
	byteswap(value.defensive_time);
}

template<> void byteswap<blofeld::infinite::s_vehicleflyingfallbackproperties>(blofeld::infinite::s_vehicleflyingfallbackproperties& value)
{
	byteswap(value.combat_elevation);
	byteswap(value.fallback_minimum_distance);
	byteswap(value.flyby_distance);
}

template<> void byteswap<blofeld::infinite::s_c_character_vehicle_properties_internal>(blofeld::infinite::s_c_character_vehicle_properties_internal& value)
{
	byteswap(value.unit);
	byteswap(value.style);
	byteswap(value.behavior_tree);
	byteswap(value.nondriver_behavior_tree);
	byteswap(value.lookahead_time);
	byteswap(value.roll_change_magnitude);
	byteswap(value.roll_decay_multiplier);
	byteswap(value.throttle_grace_period);
	byteswap(value.minimum_throttle);
	byteswap(value.vehicle_flags$2);
	byteswap(value.hover_deceleration_distance);
	byteswap(value.hover_offset_distance);
	byteswap(value.hover_allow_perturbation_speed);
	byteswap(value.hover_random_x_axis_period);
	byteswap(value.hover_random_y_axis_period);
	byteswap(value.hover_random_z_axis_period);
	byteswap(value.hover_random_radius);
	byteswap(value.hover_anchor_approach_speed_limit);
	byteswap(value.hover_anchor_throttle_scale_distance);
	byteswap(value.hover_anchor_xy_throttle_scale);
	byteswap(value.hover_anchor_z_throttle_scale);
	byteswap(value.hover_throttle_min_z);
	byteswap(value.ai_pathfinding_radius);
	byteswap(value.ai_avoidance_radius);
	byteswap(value.ai_destination_radius);
	byteswap(value.ai_deceleration_distance);
	byteswap(value.roughly_the_time_it_would_take_this_vehicle_to_stop_default_is_2_seconds);
	byteswap(value.ai_turning_radius);
	byteswap(value.ai_banshee_steering_maximum);
	byteswap(value.ai_max_steering_angle);
	byteswap(value.ai_max_steering_delta);
	byteswap(value.ai_oversteering_scale);
	byteswap(value.ai_sideslip_distance_combat);
	byteswap(value.ai_sideslip_distance_non_combat);
	byteswap(value.ai_avoidance_distance);
	byteswap(value.ai_min_urgency);
	byteswap(value.destination_behind_angle);
	byteswap(value.skid_scale);
	byteswap(value.aiming_velocity_maximum);
	byteswap(value.aiming_acceleration_maximum);
	byteswap(value.ai_throttle_maximum);
	byteswap(value.ai_reverse_throttle_maximum);
	byteswap(value.ai_goal_min_throttle_scale);
	byteswap(value.ai_turn_min_throttle_scale);
	byteswap(value.ai_direction_min_throttle_scale);
	byteswap(value.ai_skid_min_throttle_scale);
	byteswap(value.skid_attentuation_max_angle);
	byteswap(value.ai_acceleration_scale);
	byteswap(value.ai_throttle_blend);
	byteswap(value.theoretical_max_speed);
	byteswap(value.error_scale);
	byteswap(value.throttle_ramp_step);
	byteswap(value.target_speed);
	byteswap(value.ai_boost_forward_facing_angle);
	byteswap(value.ai_min_throttle_to_boost);
	byteswap(value.ai_allowable_aim_deviation_angle);
	byteswap(value.melee_cooldown);
	byteswap(value.ai_charge_tight_angle_distance);
	byteswap(value.ai_charge_tight_angle);
	byteswap(value.ai_charge_repeat_timeout);
	byteswap(value.ai_charge_look_ahead_time);
	byteswap(value.ai_charge_consider_distance);
	byteswap(value.ai_charge_abort_distance);
	byteswap(value.ai_charge_abort_close_distance);
	byteswap(value.ai_charge_max_out_of_area_distance);
	byteswap(value.vehicle_ram_timeout);
	byteswap(value.ram_paralysis_time);
	byteswap(value.ai_cover_damage_threshold);
	byteswap(value.ai_cover_shield_damage_threshold);
	byteswap(value.ai_cover_min_distance);
	byteswap(value.ai_cover_time);
	byteswap(value.ai_cover_min_boost_distance);
	byteswap(value.turtling_recent_damage_threshold);
	byteswap(value.turtling_min_time);
	byteswap(value.turtling_timeout);
	byteswap(value.vehicle_strafing_properties_block);
	byteswap(value.vehicle_flying_holding_pattern_properties_block);
	byteswap(value.vehicle_flying_preengage_properties_block);
	byteswap(value.vehicle_flying_suppressed_properties_block);
	byteswap(value.vehicle_flying_aggressive_engage_properties_block);
	byteswap(value.vehicle_flying_defensive_engage_properties_block);
	byteswap(value.vehicle_flying_fallback_properties_block);
	byteswap(value.obstacle_ignore_size);
}

template<> void byteswap<blofeld::infinite::s_c_character_flying_movement_properties_internal>(blofeld::infinite::s_c_character_flying_movement_properties_internal& value)
{
	byteswap(value.vehicle);
	byteswap(value.facing);
	byteswap(value.perturbation);
	byteswap(value.volume_avoidance);
	byteswap(value.volume_perturbation);
	byteswap(value.volume_cover);
	byteswap(value.flocking);
	byteswap(value.target);
	byteswap(value.target_tail);
	byteswap(value.area_reselect_time);
	byteswap(value.idle_time);
	byteswap(value.unsafe_cover_reselect_time);
	byteswap(value.cover_heading_reselect_time);
	byteswap(value.max_cover_search_distance);
	byteswap(value.max_cover_impulse_distance);
	byteswap(value.spline_cooldown_time);
	byteswap(value.volume_influence_distance);
	byteswap(value.volume_perturbation_phase);
	byteswap(value.volume_bounding_distance);
	byteswap(value.volume_approach_distance);
	byteswap(value.volume_break_off_distance);
	byteswap(value.minimum_approach_distance);
	byteswap(value.collision_avoidance_range);
	byteswap(value.evade_time);
	byteswap(value.evade_body_damage_threshold);
	byteswap(value.evade_shield_damage_threshold);
	byteswap(value.bogey_retreat_time);
	byteswap(value.bogey_retreat_distance);
	byteswap(value.flock_radius);
	byteswap(value.forward_follow_angle);
	byteswap(value.behind_follow_angle);
	byteswap(value.min_tailing_time);
	byteswap(value.tailing_radius);
	byteswap(value.tailing_cone_angle);
	byteswap(value.volume_strafe_distance);
	byteswap(value.strafe_min_distance);
	byteswap(value.strafe_above_distance);
	byteswap(value.strafe_abort_distance);
	byteswap(value.strafe_timeout);
	byteswap(value.max_descend_angle);
	byteswap(value.max_ascend_angle);
	byteswap(value.shooting_cone_angle);
	byteswap(value.missile_dodge_change);
	byteswap(value.ideal_missile_dodge_distance);
	byteswap(value.dodge_timeout);
}

template<> void byteswap<blofeld::infinite::s_characterequipmentuseconditions>(blofeld::infinite::s_characterequipmentuseconditions& value)
{
	byteswap(value.use_when);
	byteswap(value.health_shield_use_threshold);
}

template<> void byteswap<blofeld::infinite::s_characterequipmentusage>(blofeld::infinite::s_characterequipmentusage& value)
{
	byteswap(value.use_conditions_block);
	byteswap(value.use_how);
	byteswap(value.easy_normal);
	byteswap(value.legendary);
	byteswap(value.chance_per_second);
}

template<> void byteswap<blofeld::infinite::s_character_equipment_definition>(blofeld::infinite::s_character_equipment_definition& value)
{
	byteswap(value.equipment$2);
	byteswap(value.flags);
	byteswap(value.relative_drop_chance);
	byteswap(value.animation);
	byteswap(value.equipment_use_block);
}

template<> void byteswap<blofeld::infinite::s_s_character_stimuli_response_definition>(blofeld::infinite::s_s_character_stimuli_response_definition& value)
{
	byteswap(value.stimulus_name);
	byteswap(value.override_character);
}

template<> void byteswap<blofeld::infinite::s_s_campaign_metagame_bucket>(blofeld::infinite::s_s_campaign_metagame_bucket& value)
{
	byteswap(value.flags);
	byteswap(value.type);
	byteswap(value._class);
	byteswap(value.point_count);
}

template<> void byteswap<blofeld::infinite::s_character_activity_objects>(blofeld::infinite::s_character_activity_objects& value)
{
	byteswap(value.activity_name);
	byteswap(value.crate);
	byteswap(value.crate_marker_name);
	byteswap(value.unit_marker_name);
}

template<> void byteswap<blofeld::infinite::s_c_character_pain_screen_properties_internal>(blofeld::infinite::s_c_character_pain_screen_properties_internal& value)
{
	byteswap(value.pain_screen_duration);
	byteswap(value.pain_screen_region_fade_out_duration);
	byteswap(value.pain_screen_region_fade_out_weight_threshold);
	byteswap(value.pain_screen_angle_tolerance);
	byteswap(value.pain_screen_angle_randomness);
	byteswap(value.defensive_screen_duration);
	byteswap(value.defensive_screen_scrub_fallback_fraction);
}

template<> void byteswap<blofeld::infinite::s_charactermeleeanimationscalingpropertiesinternal>(blofeld::infinite::s_charactermeleeanimationscalingpropertiesinternal& value)
{
	byteswap(value.easy_windup_scaling);
	byteswap(value.easy_recovery_scaling);
	byteswap(value.normal_windup_scaling);
	byteswap(value.normal_recovery_scaling);
	byteswap(value.heroic_windup_scaling);
	byteswap(value.heroic_recovery_scaling);
	byteswap(value.legendary_windup_scaling);
	byteswap(value.legendary_recovery_scaling);
}

template<> void byteswap<blofeld::infinite::s_c_character_closequartersdefenseblast_properties_internal>(blofeld::infinite::s_c_character_closequartersdefenseblast_properties_internal& value)
{
	byteswap(value.activation_chance_easy);
	byteswap(value.activation_chance_normal);
	byteswap(value.activation_chance_heroic);
	byteswap(value.activation_chance_legendary);
	byteswap(value.cooldown);
	byteswap(value.attack_range);
	byteswap(value.marker);
	byteswap(value.damage_effect);
	byteswap(value.effect);
}

template<> void byteswap<blofeld::infinite::s_c_character_bishop_properties_internal>(blofeld::infinite::s_c_character_bishop_properties_internal& value)
{
	byteswap(value.repair_beam_effect);
	byteswap(value.min_follow_distance_);
	byteswap(value.resurrection_initiation_delay_time_seconds_);
	byteswap(value.resurrection_charge_up_time_seconds_);
	byteswap(value.resurrection_give_up_time_seconds_);
	byteswap(value.resurrection_ground_effect_);
	byteswap(value.res_area_scan_start_effect_);
	byteswap(value.res_area_scan_success_effect_);
	byteswap(value.res_area_scan_failure_effect_);
	byteswap(value.shard_spawn_ground_effect_);
	byteswap(value.shard_creation_delay_seconds_);
	byteswap(value.spawn_delay_seconds_);
	byteswap(value.healing_time);
}

template<> void byteswap<blofeld::infinite::s_characterhealingpropertiesinternal>(blofeld::infinite::s_characterhealingpropertiesinternal& value)
{
	byteswap(value.healing_delay_time);
	byteswap(value.healing_standby_time);
}

template<> void byteswap<blofeld::infinite::s_c_character_packmaster_properties_internal>(blofeld::infinite::s_c_character_packmaster_properties_internal& value)
{
	byteswap(value.pack_character_ancestor_);
	byteswap(value.command_radius);
	byteswap(value.group_fire_min_count);
	byteswap(value.group_fire_max_count);
	byteswap(value.group_fire_chance_easy);
	byteswap(value.group_fire_chance_normal);
	byteswap(value.group_fire_chance_heroic);
	byteswap(value.group_fire_chance_legendary);
	byteswap(value.group_fire_burst_time);
	byteswap(value.group_fire_cooldown_time);
	byteswap(value.group_fire_burst_count);
	byteswap(value.group_fire_burst_delay);
	byteswap(value.group_fire_target_range);
	byteswap(value.lion_charge_max_range);
	byteswap(value.lion_charge_chance);
	byteswap(value.lion_charge_melee_range);
	byteswap(value.lion_charge_fire_duration);
	byteswap(value.lion_charge_throttle_override);
	byteswap(value.lion_charge_abort_range);
	byteswap(value.pack_charge_distance);
	byteswap(value.pack_charge_cooldown);
}

template<> void byteswap<blofeld::infinite::s_c_character_dynamic_task_properties_internal>(blofeld::infinite::s_c_character_dynamic_task_properties_internal& value)
{
	byteswap(value.agent_filter_flags_);
	byteswap(value.task_generation_flags_);
	byteswap(value.protect_request_shield_level_);
	byteswap(value.protect_request_body_level_);
	byteswap(value.resurrection_req_chance_);
	byteswap(value.shield_task_priority_);
	byteswap(value.protect_task_priorities_min_health___max_health_);
	byteswap(value.resurrection_task_priority_);
	byteswap(value.shield_during_resurrection_task_priority_);
	byteswap(value.shield_crate_override_);
	byteswap(value.heal_request_shield_level_);
	byteswap(value.heal_request_body_level_);
}

template<> void byteswap<blofeld::infinite::s_slowadvance>(blofeld::infinite::s_slowadvance& value)
{
	byteswap(value.slow_range);
	byteswap(value.slow_throttle_style);
	byteswap(value.exit_range);
}

template<> void byteswap<blofeld::infinite::s_genericadvanceattack>(blofeld::infinite::s_genericadvanceattack& value)
{
	byteswap(value.flags);
	byteswap(value.range);
	byteswap(value.max_scariness);
	byteswap(value.threat_level);
	byteswap(value.activation_chance_easy);
	byteswap(value.activation_chance_normal);
	byteswap(value.activation_chance_heroic);
	byteswap(value.activation_chance_legendary);
	byteswap(value.attack_timeout);
	byteswap(value.melee_range);
	byteswap(value.shield_down_threshold);
	byteswap(value.abort_danger_threshold);
	byteswap(value.abort_distance);
	byteswap(value.outside_area_range);
	byteswap(value.berserk_abort_distance);
	byteswap(value.cooldown);
	byteswap(value.tell_animation_chance);
	byteswap(value.tell_animation_cooldown);
	byteswap(value.throttle_style);
	byteswap(value.slow_advance);
}

template<> void byteswap<blofeld::infinite::s_meleeattackdefinition>(blofeld::infinite::s_meleeattackdefinition& value)
{
	byteswap(value.direction_flags);
	byteswap(value.animation_name);
	byteswap(value.damage_override);
}

template<> void byteswap<blofeld::infinite::s_meleecombodefinition>(blofeld::infinite::s_meleecombodefinition& value)
{
	byteswap(value.combo_flags);
	byteswap(value.weight_modifier);
	byteswap(value.attacks_block);
}

template<> void byteswap<blofeld::infinite::s_c_character_rushattack_properties_internal>(blofeld::infinite::s_c_character_rushattack_properties_internal& value)
{
	byteswap(value.generic_advance_attack);
	byteswap(value.rush_flags);
	byteswap(value.leader_abandoned_chance);
	byteswap(value.berserk_chance);
	byteswap(value.berserk_recheck_cooldown);
	byteswap(value.min_abort_time);
	byteswap(value.min_abort_dist_travelled);
	byteswap(value.zig_zag_chance);
	byteswap(value.zig_zag_angle);
	byteswap(value.zig_zag_period);
	byteswap(value.tackle_angle);
	byteswap(value.tackle_wait);
	byteswap(value.combo_definitions_block);
	byteswap(value.taunt_animation_name);
}

template<> void byteswap<blofeld::infinite::s_c_character_leapattack_properties_internal>(blofeld::infinite::s_c_character_leapattack_properties_internal& value)
{
	byteswap(value.generic_advance_attack);
	byteswap(value.leap_flags);
	byteswap(value.ideal_leap_speed);
	byteswap(value.max_leap_speed);
	byteswap(value.ballistic_fraction);
	byteswap(value.prediction_percent);
	byteswap(value.shortfall);
	byteswap(value.swoop_accel_rate);
	byteswap(value.swoop_accel_time);
	byteswap(value.swoop_max_deviation);
}

template<> void byteswap<blofeld::infinite::s_c_character_teleportattack_properties_internal>(blofeld::infinite::s_c_character_teleportattack_properties_internal& value)
{
	byteswap(value.generic_advance_attack);
	byteswap(value.destination_distance);
	byteswap(value.side_step_distance);
	byteswap(value.forward_distance);
	byteswap(value.tracking_distance);
	byteswap(value.runup_time);
	byteswap(value.position_pause);
	byteswap(value.escape_cooldown);
	byteswap(value.lock_distance);
	byteswap(value.launch_effect);
	byteswap(value.land_effect);
}

template<> void byteswap<blofeld::infinite::s_characterjinkandshootpropertiesinternal>(blofeld::infinite::s_characterjinkandshootpropertiesinternal& value)
{
	byteswap(value.start_distance);
	byteswap(value.start_max_offset_angle);
	byteswap(value.min_start_teleport_distance);
	byteswap(value.number_of_intermediate_teleports);
	byteswap(value.max_offset_angle);
	byteswap(value.side_step_distance);
	byteswap(value.forward_distance);
	byteswap(value.launch_effect);
	byteswap(value.land_effect);
	byteswap(value.effect_marker);
	byteswap(value.jink_and_shoot_weapon);
}

template<> void byteswap<blofeld::infinite::s_characterteleportandtacklepropertiesinternal>(blofeld::infinite::s_characterteleportandtacklepropertiesinternal& value)
{
	byteswap(value.destination_distance);
	byteswap(value.max_offset_angle);
	byteswap(value.duration_to_align);
	byteswap(value.min_teleport_distance);
	byteswap(value.launch_effect);
	byteswap(value.land_effect);
	byteswap(value.effect_marker);
	byteswap(value.teleport_and_tackle_weapon);
}

template<> void byteswap<blofeld::infinite::s_characterteleportandtauntpropertiesinternal>(blofeld::infinite::s_characterteleportandtauntpropertiesinternal& value)
{
	byteswap(value.custom_animation_name);
	byteswap(value.taunt_frequency);
	byteswap(value.taunt_chance);
	byteswap(value.destination_distance);
	byteswap(value.max_offset_angle);
	byteswap(value.min_teleport_distance);
	byteswap(value.launch_effect);
	byteswap(value.land_effect);
	byteswap(value.effect_marker);
}

template<> void byteswap<blofeld::infinite::s_c_character_desperationrush_properties_internal>(blofeld::infinite::s_c_character_desperationrush_properties_internal& value)
{
	byteswap(value.properties);
	byteswap(value.range);
}

template<> void byteswap<blofeld::infinite::s_characterproximitymeleepropertiesinternal>(blofeld::infinite::s_characterproximitymeleepropertiesinternal& value)
{
	byteswap(value.range);
	byteswap(value.cooldown);
	byteswap(value.outside_area_range);
}

template<> void byteswap<blofeld::infinite::s_characterdivebombkamikazepropertiesinternal>(blofeld::infinite::s_characterdivebombkamikazepropertiesinternal& value)
{
	byteswap(value.ally_target_chance);
	byteswap(value.enemy_target_chance);
	byteswap(value.travel_distance);
	byteswap(value.travel_time_before_exploding);
	byteswap(value.impact_detonation_projectile);
	byteswap(value.target_error_range);
	byteswap(value.behavior_flags);
	byteswap(value.kamikaze_below_health_percentage);
	byteswap(value.chance_to_kamikaze_at_low_health_per_second);
	byteswap(value.chance_to_kamikaze_when_last_man_per_second);
	byteswap(value.a_pause_between_kamikaze_anim_and_dive_bomb_actiondefault_2_seconds);
}

template<> void byteswap<blofeld::infinite::s_characterpostcombatpropertiesinternal>(blofeld::infinite::s_characterpostcombatpropertiesinternal& value)
{
	byteswap(value.shoot_corpse_chance);
	byteswap(value.postcombat_phase_1_time);
}

template<> void byteswap<blofeld::infinite::s_c_character_pack_stalk_properties_internal>(blofeld::infinite::s_c_character_pack_stalk_properties_internal& value)
{
	byteswap(value.min_wander_distance_);
	byteswap(value.outside_area_border_);
	byteswap(value.position_update_delay_);
	byteswap(value.throttle_in_cover_);
}

template<> void byteswap<blofeld::infinite::s_c_character_fight_circle_properties_internal>(blofeld::infinite::s_c_character_fight_circle_properties_internal& value)
{
	byteswap(value.strafe_time_);
	byteswap(value.extra_firing_time_);
	byteswap(value.target_patience_time_);
	byteswap(value.max_angle_from_threataxis_);
	byteswap(value.nearby_inner_angle_);
	byteswap(value.nearby_outer_angle_);
	byteswap(value.strafe_throttle_style_);
	byteswap(value.move_throttle_style_);
}

template<> void byteswap<blofeld::infinite::s_c_character_hamstring_charge_properties_internal>(blofeld::infinite::s_c_character_hamstring_charge_properties_internal& value)
{
	byteswap(value.flank_angle_);
	byteswap(value.flank_distance_);
	byteswap(value.outer_engage_distance_);
	byteswap(value.hamstring_delay_);
	byteswap(value.initiate_chance_);
	byteswap(value.max_rush_time_);
	byteswap(value.melee_attack_time_min_);
	byteswap(value.melee_attack_time_max_);
	byteswap(value.max_charge_range);
}

template<> void byteswap<blofeld::infinite::s_c_character_forerunner_properties_internal>(blofeld::infinite::s_c_character_forerunner_properties_internal& value)
{
	byteswap(value.forerunner_flags);
	byteswap(value.order_minion_charge_chance_);
	byteswap(value.order_minion_charge_radius_);
	byteswap(value.minion_charge_min_time_);
	byteswap(value.minion_charge_max_time_);
	byteswap(value.phase_to_position_distance_bounds_);
	byteswap(value.phase_to_position_probability_range_);
}

template<> void byteswap<blofeld::infinite::s_c_character_gravity_jump_properties_internal>(blofeld::infinite::s_c_character_gravity_jump_properties_internal& value)
{
	byteswap(value.activation_chance_easy);
	byteswap(value.activation_chance_normal);
	byteswap(value.activation_chance_heroic);
	byteswap(value.activation_chance_legendary);
	byteswap(value.float_time_);
	byteswap(value.float_gravity_scale);
	byteswap(value.descendgravityscalefunction);
	byteswap(value.slow_descend_time_);
	byteswap(value.jump_target_height_);
	byteswap(value.cooldown_);
	byteswap(value.trigger_distance_);
}

template<> void byteswap<blofeld::infinite::s_c_character_coop_modifier_properties_internal>(blofeld::infinite::s_c_character_coop_modifier_properties_internal& value)
{
	byteswap(value.body_vitality_scale_for_2_3_players);
	byteswap(value.body_vitality_scale_for_4_players);
	byteswap(value.shield_vitality_scale_for_2_3_players);
	byteswap(value.shield_vitality_scale_for_4_players);
}

template<> void byteswap<blofeld::infinite::s_charactermultitargettrackedattackpropertiesinternal>(blofeld::infinite::s_charactermultitargettrackedattackpropertiesinternal& value)
{
	byteswap(value.activation_chance_easy);
	byteswap(value.activation_chance_normal);
	byteswap(value.activation_chance_heroic);
	byteswap(value.activation_chance_legendary);
	byteswap(value.targeting_angle);
	byteswap(value.activation_range);
	byteswap(value.min_targets_in_range);
	byteswap(value.bursts);
	byteswap(value.trigger);
	byteswap(value.cooldown);
}

template<> void byteswap<blofeld::infinite::s_dropobject>(blofeld::infinite::s_dropobject& value)
{
	byteswap(value.easy_normal_drop_chance);
	byteswap(value.heroic_drop_chance);
	byteswap(value.legendary_drop_chance);
	byteswap(value.drop_object);
}

template<> void byteswap<blofeld::infinite::s_c_character_drop_objects_properties_internal>(blofeld::infinite::s_c_character_drop_objects_properties_internal& value)
{
	byteswap(value.number_of_rolls);
	byteswap(value.min_item_launch_velocity);
	byteswap(value.max_item_launch_velocity);
	byteswap(value.max_trajectory_radius);
	byteswap(value.drop_objects_block);
}

template<> void byteswap<blofeld::infinite::s_thresholdscript>(blofeld::infinite::s_thresholdscript& value)
{
	byteswap(value.flags);
	byteswap(value.tracked_attribute);
	byteswap(value.trigger_when);
	byteswap(value.threshold_value);
	byteswap(value.recheck_buffer);
	byteswap(value.recheck_cooldown);
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_c_character_customscript_properties_internal>(blofeld::infinite::s_c_character_customscript_properties_internal& value)
{
	byteswap(value.scripted_threshold_block);
}

template<> void byteswap<blofeld::infinite::s_character_definition>(blofeld::infinite::s_character_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.character_flags);
	byteswap(value.parent_character);
	byteswap(value.unit);
	byteswap(value.creature);
	byteswap(value.style);
	byteswap(value.major_character);
	byteswap(value.mythic_skull_character);
	byteswap(value.variants_block);
	byteswap(value.voice_block);
	byteswap(value.development_status_block);
	byteswap(value.general_properties_block);
	byteswap(value.proto_spawn_properties_block);
	byteswap(value.interact_properties_block);
	byteswap(value.emotion_properties_block);
	byteswap(value.vitality_properties_block);
	byteswap(value.placement_properties_block);
	byteswap(value.base_perception_properties_block);
	byteswap(value.perception_properties_block);
	byteswap(value.target_properties_block);
	byteswap(value.look_properties_block);
	byteswap(value.hopping_properties_block);
	byteswap(value.warp_properties_block);
	byteswap(value.movement_properties_block);
	byteswap(value.aiming_facing_properties_block);
	byteswap(value.decelerated_turns_properties_block);
	byteswap(value.locomotion_overrides_block);
	byteswap(value.movement_tweak_properties_block);
	byteswap(value.throttle_styles_block);
	byteswap(value.movement_sets_block);
	byteswap(value.flocking_properties_block);
	byteswap(value.swarm_properties_block);
	byteswap(value.ready_properties_block);
	byteswap(value.engage_properties_block);
	byteswap(value.berserk_properties_block);
	byteswap(value.weapon_pickup_properties_block);
	byteswap(value.evasion_properties_block);
	byteswap(value.dodge_properties_block);
	byteswap(value.run_away_from_vehicle_properties_block);
	byteswap(value.cover_properties_block);
	byteswap(value.retreat_properties_block);
	byteswap(value.search_properties_block);
	byteswap(value.pre_search_properties_block);
	byteswap(value.recognizing_properties_block);
	byteswap(value.idle_properties_block);
	byteswap(value.precombat_properties_block);
	byteswap(value.vocalization_properties_block);
	byteswap(value.boarding_properties_block);
	byteswap(value.kungfu_properties_block);
	byteswap(value.bunker_properties_block);
	byteswap(value.shield_wall_properties_block);
	byteswap(value.firing_wall_properties_block);
	byteswap(value.interpose_request_properties_block);
	byteswap(value.interpose_properties_block);
	byteswap(value.bounding_properties_block);
	byteswap(value.projectile_deflection_properties_block);
	byteswap(value.bot_properties_block);
	byteswap(value.evasive_fight_properties_block);
	byteswap(value.aggressive_fight_properties_block);
	byteswap(value.linear_advance_fight_properties_block);
	byteswap(value.static_fight_properties_block);
	byteswap(value.stand_ground_properties_block);
	byteswap(value.grenade_fight_properties_block);
	byteswap(value.cover_sequence_properties_block);
	byteswap(value.cover_move_properties_block);
	byteswap(value.cover_hide_properties_block);
	byteswap(value.long_range_attack_properties_block);
	byteswap(value.hoist_attack_properties_block);
	byteswap(value.hunker_down_properties_block);
	byteswap(value.shield_raise_properties_block);
	byteswap(value.vehicle_aggressive_fight_properties_block);
	byteswap(value.vehicle_defensive_fight_properties_block);
	byteswap(value.engineer_properties_block);
	byteswap(value.inspect_properties_block);
	byteswap(value.vehicle_entrance_properties_block);
	byteswap(value.test_only_weapons_properties_block);
	byteswap(value.firing_styles_block);
	byteswap(value.grenades_properties_block);
	byteswap(value.vehicle_properties_block);
	byteswap(value.flying_movement_properties_block);
	byteswap(value.equipment_definitions_block);
	byteswap(value.stimuli_responses_block);
	byteswap(value.campaign_metagame_bucket_block);
	byteswap(value.activity_objects_block);
	byteswap(value.pain_screen_properties_block);
	byteswap(value.melee_animation_scaling_properties_block);
	byteswap(value.close_quarters_defense_blast_block);
	byteswap(value.bishop_properties_block);
	byteswap(value.healing_properties_block);
	byteswap(value.packmaster_properties_block);
	byteswap(value.dynamic_task_block);
	byteswap(value.rush_attack_block);
	byteswap(value.leap_attack_block);
	byteswap(value.teleport_attack_block);
	byteswap(value.jink_and_shoot_block);
	byteswap(value.teleport_and_tackle_block);
	byteswap(value.teleport_and_taunt_animation_block);
	byteswap(value.desperation_rush_block);
	byteswap(value.proximity_melee_block);
	byteswap(value.dive_bomb_kamikaze_block);
	byteswap(value.post_combat_block);
	byteswap(value.pack_stalk_block);
	byteswap(value.fight_circle_block);
	byteswap(value.hamstring_block);
	byteswap(value.forerunner_block);
	byteswap(value.gravity_jump_block);
	byteswap(value.co_op_modifiers_block);
	byteswap(value.multi_target_tracked_attack_block);
	byteswap(value.drop_objects_block);
	byteswap(value.custom_scripting_block);
}

template<> void byteswap<blofeld::infinite::s_chromaeventdevicefiles>(blofeld::infinite::s_chromaeventdevicefiles& value)
{
	byteswap(value.keyboard_file);
	byteswap(value.mouse_file);
	byteswap(value.headset_file);
	byteswap(value.keypad_file);
	byteswap(value.mousepad_file);
	byteswap(value.chromalink_file);
}

template<> void byteswap<blofeld::infinite::s_chromaeventanimation>(blofeld::infinite::s_chromaeventanimation& value)
{
	byteswap(value.event);
	byteswap(value.layering);
	byteswap(value.priority);
	byteswap(value.event_files);
}

template<> void byteswap<blofeld::infinite::s_chromaanimationsdefinition>(blofeld::infinite::s_chromaanimationsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.event_animations);
}

template<> void byteswap<blofeld::infinite::s_chromafiletag>(blofeld::infinite::s_chromafiletag& value)
{
	byteswap(value.anytag);
	byteswap(value.file_data);
}

template<> void byteswap<blofeld::infinite::s_i343physicscollisionlayerauditconfigstring>(blofeld::infinite::s_i343physicscollisionlayerauditconfigstring& value)
{
	byteswap(value._string);
}

template<> void byteswap<blofeld::infinite::s_i343physicscollisionlayerauditconfigurationtag>(blofeld::infinite::s_i343physicscollisionlayerauditconfigurationtag& value)
{
	byteswap(value.anytag);
	byteswap(value.ignored_directories_block);
	byteswap(value.ignored_files_block);
}

template<> void byteswap<blofeld::infinite::s_animtranslation>(blofeld::infinite::s_animtranslation& value)
{
	byteswap(value.beginframe);
	byteswap(value.endframe);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_animrotation>(blofeld::infinite::s_animrotation& value)
{
	byteswap(value.beginframe);
	byteswap(value.endframe);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_animfloat>(blofeld::infinite::s_animfloat& value)
{
	byteswap(value.beginframe);
	byteswap(value.endframe);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_animjoint>(blofeld::infinite::s_animjoint& value)
{
	byteswap(value.name);
	byteswap(value.perframetranslations_block);
	byteswap(value.perframerotations_block);
	byteswap(value.perframescales_block);
	byteswap(value.processingperframetranslationcount);
	byteswap(value.processingperframerotationcount);
	byteswap(value.processingperframescalecount);
}

template<> void byteswap<blofeld::infinite::s_animuserparameter>(blofeld::infinite::s_animuserparameter& value)
{
	byteswap(value.name);
	byteswap(value.perframevalues_block);
	byteswap(value.processingperframevaluecount);
}

template<> void byteswap<blofeld::infinite::s_animikevent>(blofeld::infinite::s_animikevent& value)
{
	byteswap(value.targetmarkername);
	byteswap(value.chainname);
	byteswap(value.usagetype);
	byteswap(value.perframeeffect_block);
	byteswap(value.targetmarkertranslations_block);
	byteswap(value.targetmarkerrotations_block);
	byteswap(value.targetmarkerscales_block);
	byteswap(value.processingperframeeffectcount);
	byteswap(value.processingperframetranslationcount);
	byteswap(value.processingperframerotationcount);
	byteswap(value.processingperframescalecount);
}

template<> void byteswap<blofeld::infinite::s_animjointreference>(blofeld::infinite::s_animjointreference& value)
{
	byteswap(value.jointreferenceindex);
}

template<> void byteswap<blofeld::infinite::s_animcamera>(blofeld::infinite::s_animcamera& value)
{
	byteswap(value.name);
	byteswap(value.perframetranslations_block);
	byteswap(value.perframerotations_block);
	byteswap(value.perframefocallengths_block);
	byteswap(value.perframefocusdistances_block);
	byteswap(value.perframefstops_block);
	byteswap(value.processingperframetranslationcount);
	byteswap(value.processingperframerotationcount);
	byteswap(value.processingperframefocallengthcount);
	byteswap(value.processingperframefocusdistancecount);
	byteswap(value.processingperframefstopcount);
}

template<> void byteswap<blofeld::infinite::s_animcliptag>(blofeld::infinite::s_animcliptag& value)
{
	byteswap(value.anytag);
	byteswap(value.framecount);
	byteswap(value.fps);
	byteswap(value.joints_block);
	byteswap(value.userparameters_block);
	byteswap(value.asset);
	byteswap(value.ikevents_block);
	byteswap(value.objectspaceoffsetjoint_block);
	byteswap(value.replacementcorrectionjoint_block);
	byteswap(value.fikanchorjoint_block);
	byteswap(value.cameras_block);
}

template<> void byteswap<blofeld::infinite::s_s_cloth_collision_sphere>(blofeld::infinite::s_s_cloth_collision_sphere& value)
{
	byteswap(value.object_marker_name);
	byteswap(value.radius);
}

template<> void byteswap<blofeld::infinite::s_cloth_properties>(blofeld::infinite::s_cloth_properties& value)
{
	byteswap(value.integration_type);
	byteswap(value.number_iterations);
	byteswap(value.weight);
	byteswap(value.drag);
	byteswap(value.wind_scale);
	byteswap(value.wind_flappiness_scale);
	byteswap(value.longest_rod);
}

template<> void byteswap<blofeld::infinite::s_cloth_vertex_definition>(blofeld::infinite::s_cloth_vertex_definition& value)
{
	byteswap(value.initial_position);
	byteswap(value.uv);
}

template<> void byteswap<blofeld::infinite::s_cloth_index_definition>(blofeld::infinite::s_cloth_index_definition& value)
{
	byteswap(value.index);
}

template<> void byteswap<blofeld::infinite::s_cloth_link_definition>(blofeld::infinite::s_cloth_link_definition& value)
{
	byteswap(value.default_distance);
	byteswap(value.index1);
	byteswap(value.index2);
}

template<> void byteswap<blofeld::infinite::s_cloth_definition>(blofeld::infinite::s_cloth_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.marker_attachment_name);
	byteswap(value.secondary_axis_attachment_name);
	byteswap(value.shader);
	byteswap(value.grid_x_dimension);
	byteswap(value.grid_y_dimension);
	byteswap(value.grid_spacing_x);
	byteswap(value.grid_spacing_y);
	byteswap(value.collision_spheres_block);
	byteswap(value.properties);
	byteswap(value.vertices_block);
	byteswap(value.indices_block);
	byteswap(value.strip_indices_block);
	byteswap(value.links_block);
	byteswap(value.m_pipelinestates);
}

template<> void byteswap<blofeld::infinite::s_camoscalarfunction>(blofeld::infinite::s_camoscalarfunction& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_s_camo_effect_definition>(blofeld::infinite::s_s_camo_effect_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.active_camo_amount);
	byteswap(value.shadow_amount);
}

template<> void byteswap<blofeld::infinite::s_i343s_campaign_mission_map_definition>(blofeld::infinite::s_i343s_campaign_mission_map_definition& value)
{
	byteswap(value.map_id);
	byteswap(value.map_name);
}

template<> void byteswap<blofeld::infinite::s_i343s_game_globals_campaign>(blofeld::infinite::s_i343s_game_globals_campaign& value)
{
	byteswap(value.maps_block);
	byteswap(value.mission_name);
	byteswap(value.mission_description);
	byteswap(value.mission_background_image_uri);
	byteswap(value.mission_cms_guid);
	byteswap(value.mission_team);
}

template<> void byteswap<blofeld::infinite::s_i343campaignglobals>(blofeld::infinite::s_i343campaignglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.campaign_globals_block);
	byteswap(value.influencer_default_spawn_settings);
	byteswap(value.campaign_upgrades_definition);
	byteswap(value.collectibles);
	byteswap(value.valor_rewards_definition);
	byteswap(value.gameplay_menu_ui_info);
}

template<> void byteswap<blofeld::infinite::s_soundeventdefinitionreference>(blofeld::infinite::s_soundeventdefinitionreference& value)
{
	byteswap(value.soundevent);
}

template<> void byteswap<blofeld::infinite::s_composerscript>(blofeld::infinite::s_composerscript& value)
{
	byteswap(value.flags);
	byteswap(value.data);
	byteswap(value.boolean_expression);
	byteswap(value.runtime_script_binary);
	byteswap(value.runtime_script_name);
	byteswap(value.runtime_script_crc);
}

template<> void byteswap<blofeld::infinite::s_composeraction>(blofeld::infinite::s_composeraction& value)
{
	byteswap(value.name);
	byteswap(value.id);
	byteswap(value.blend_in);
	byteswap(value.blend_in_curve);
	byteswap(value.length);
	byteswap(value.flags);
	byteswap(value.type);
	byteswap(value.simulation_type);
	byteswap(value.data_index);
	byteswap(value.condition_check_rate);
	byteswap(value.condition_script);
}

template<> void byteswap<blofeld::infinite::s_composertextdata>(blofeld::infinite::s_composertextdata& value)
{
	byteswap(value.data);
	byteswap(value.script_crc);
}

template<> void byteswap<blofeld::infinite::s_composereditoraction>(blofeld::infinite::s_composereditoraction& value)
{
	byteswap(value.comment);
	byteswap(value.color);
	byteswap(value.editor_flags);
	byteswap(value.condition_script);
}

template<> void byteswap<blofeld::infinite::s_levelobjectreferenceelement>(blofeld::infinite::s_levelobjectreferenceelement& value)
{
	byteswap(value.guid);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_levelobjectreference>(blofeld::infinite::s_levelobjectreference& value)
{
	byteswap(value.path_block);
	byteswap(value.guid);
}

template<> void byteswap<blofeld::infinite::s_composersubject>(blofeld::infinite::s_composersubject& value)
{
	byteswap(value.object_name);
	byteswap(value.raw_object_name);
	byteswap(value.object);
	byteswap(value.object_resolution_type);
}

template<> void byteswap<blofeld::infinite::s_composerpathpoint>(blofeld::infinite::s_composerpathpoint& value)
{
	byteswap(value.type);
	byteswap(value.flags);
	byteswap(value.subject);
	byteswap(value.marker);
	byteswap(value.position);
	byteswap(value.rotation);
}

template<> void byteswap<blofeld::infinite::s_composeractioncamera>(blofeld::infinite::s_composeractioncamera& value)
{
	byteswap(value.flags);
	byteswap(value.animation_name);
	byteswap(value.animation_index);
	byteswap(value.position);
	byteswap(value.start_frame);
	byteswap(value.end_frame);
	byteswap(value.repeat_count);
	byteswap(value.scale);
}

template<> void byteswap<blofeld::infinite::s_composercagepoint>(blofeld::infinite::s_composercagepoint& value)
{
	byteswap(value.subject);
	byteswap(value.cage);
	byteswap(value.cage_point);
	byteswap(value.weight);
}

template<> void byteswap<blofeld::infinite::s_composeractioncageblendsettings>(blofeld::infinite::s_composeractioncageblendsettings& value)
{
	byteswap(value.blend_time);
	byteswap(value.transform_curve);
	byteswap(value.properties_curve);
}

template<> void byteswap<blofeld::infinite::s_i343curvecurve1dcontrolpoint>(blofeld::infinite::s_i343curvecurve1dcontrolpoint& value)
{
	byteswap(value.value);
	byteswap(value.tangent_in);
	byteswap(value.tangent_out);
	byteswap(value.curviness);
	byteswap(value.segment_type);
	byteswap(value.tangent_mode);
}

template<> void byteswap<blofeld::infinite::s_i343curvecurve1ddefinition>(blofeld::infinite::s_i343curvecurve1ddefinition& value)
{
	byteswap(value.control_points_block);
}

template<> void byteswap<blofeld::infinite::s_i343curveanimatedcurvemetadata>(blofeld::infinite::s_i343curveanimatedcurvemetadata& value)
{
	byteswap(value.time);
}

template<> void byteswap<blofeld::infinite::s_i343curveanimatedcurve1d>(blofeld::infinite::s_i343curveanimatedcurve1d& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.value_curve);
	byteswap(value.animatedcurvemetadata_block);
}

template<> void byteswap<blofeld::infinite::s_composeractioncagecameraproperties>(blofeld::infinite::s_composeractioncagecameraproperties& value)
{
	byteswap(value.focal_length);
	byteswap(value.focus_distance);
	byteswap(value.f_stop);
	byteswap(value.bokeh_side_count);
	byteswap(value.focal_length_curve);
	byteswap(value.focus_distance_curve);
	byteswap(value.f_stop_curve);
}

template<> void byteswap<blofeld::infinite::s_i343narrativestringandspring>(blofeld::infinite::s_i343narrativestringandspring& value)
{
	byteswap(value.curve_type);
	byteswap(value.curve_name);
	byteswap(value.dampen_percentage);
	byteswap(value.dampen_time);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecagecamerazoomsettings>(blofeld::infinite::s_i343narrativecagecamerazoomsettings& value)
{
	byteswap(value.curve_definition);
	byteswap(value.positional_curve_adjustments);
	byteswap(value.focal_length_curve_adjustments);
}

template<> void byteswap<blofeld::infinite::s_composeractioncameracage>(blofeld::infinite::s_composeractioncameracage& value)
{
	byteswap(value.placement);
	byteswap(value.position_subject);
	byteswap(value.position_cage_or_abc);
	byteswap(value.start_frame);
	byteswap(value.end_frame);
	byteswap(value.repeat_count);
	byteswap(value.scale);
	byteswap(value.max_look_drift_angle);
	byteswap(value.look_drift_speed);
	byteswap(value.look_drift_dampen_percentage);
	byteswap(value.look_drift_dampen_time);
	byteswap(value.look_drift_no_input_delay);
	byteswap(value.position_cage_point);
	byteswap(value.camera_name);
	byteswap(value.target_points_block);
	byteswap(value.blend_settings);
	byteswap(value.camera_properties);
	byteswap(value.blur_amount);
	byteswap(value.vibration_flags);
	byteswap(value.player_control_flags);
	byteswap(value.walk_run_weight);
	byteswap(value.camera_weight);
	byteswap(value.flags);
	byteswap(value.resolved_camera_position);
	byteswap(value.zoom_settings_block);
}

template<> void byteswap<blofeld::infinite::s_composeranimation>(blofeld::infinite::s_composeranimation& value)
{
	byteswap(value.name);
	byteswap(value.weight);
	byteswap(value.ikpointset);
	byteswap(value.weapon_class);
	byteswap(value.abc_anim_token);
}

template<> void byteswap<blofeld::infinite::s_composerpuppetgraph>(blofeld::infinite::s_composerpuppetgraph& value)
{
	byteswap(value.puppet_object_type);
	byteswap(value.model_animation_graph);
	byteswap(value.abc_animation_type);
	byteswap(value.abc_compression_type);
	byteswap(value.abc_skeleton_tag_optional);
	byteswap(value.generatedmodelanimationinternal);
}

template<> void byteswap<blofeld::infinite::s_composeractiontransitionsettings>(blofeld::infinite::s_composeractiontransitionsettings& value)
{
	byteswap(value.type);
	byteswap(value.interpolation_time);
	byteswap(value.interpolator_set);
}

template<> void byteswap<blofeld::infinite::s_composeranimationeventdata>(blofeld::infinite::s_composeranimationeventdata& value)
{
	byteswap(value.event_type);
	byteswap(value.frame_index);
	byteswap(value.data_index);
	byteswap(value.event_flags);
	byteswap(value.data_identifier);
	byteswap(value.anim_data_identifier);
}

template<> void byteswap<blofeld::infinite::s_composeroverlaychanneldata>(blofeld::infinite::s_composeroverlaychanneldata& value)
{
	byteswap(value.type);
	byteswap(value.channel_graph);
	byteswap(value.overlay_name);
	byteswap(value.playback_data);
	byteswap(value.frame_start);
	byteswap(value.frame_end);
	byteswap(value.proximity_object);
	byteswap(value.radius);
}

template<> void byteswap<blofeld::infinite::s_composeractionanimation>(blofeld::infinite::s_composeractionanimation& value)
{
	byteswap(value.animations_block);
	byteswap(value.model_animation_graphs_block);
	byteswap(value.position);
	byteswap(value.position_type);
	byteswap(value.flags);
	byteswap(value.sync_puppet);
	byteswap(value.start_frame);
	byteswap(value.end_frame);
	byteswap(value.repeat_count);
	byteswap(value.scale);
	byteswap(value.overlay_group_graph);
	byteswap(value.overlay_group_name);
	byteswap(value.animation_mode);
	byteswap(value.override_transition_settings);
	byteswap(value.override_animation_events_block);
	byteswap(value.overlay_channels_block);
}

template<> void byteswap<blofeld::infinite::s_composeralembicanimation>(blofeld::infinite::s_composeralembicanimation& value)
{
	byteswap(value.animation_source);
	byteswap(value.abc_animation_type);
	byteswap(value.abc_compression_type);
	byteswap(value.weight);
	byteswap(value.generatedmodelanimationinternal);
}

template<> void byteswap<blofeld::infinite::s_composeractionalembicanimation>(blofeld::infinite::s_composeractionalembicanimation& value)
{
	byteswap(value.animations_block);
	byteswap(value.position);
	byteswap(value.position_type);
	byteswap(value.flags);
	byteswap(value.sync_puppet);
	byteswap(value.start_frame);
	byteswap(value.end_frame);
	byteswap(value.repeat_count);
	byteswap(value.scale);
	byteswap(value.animation_mode);
	byteswap(value.override_transition_settings);
	byteswap(value.override_animation_events_block);
	byteswap(value.overlay_channels_block);
}

template<> void byteswap<blofeld::infinite::s_composeranimatedmesh>(blofeld::infinite::s_composeranimatedmesh& value)
{
	byteswap(value.name);
	byteswap(value.weight);
}

template<> void byteswap<blofeld::infinite::s_composeractionanimatedmesh>(blofeld::infinite::s_composeractionanimatedmesh& value)
{
	byteswap(value.animated_meshes_block);
	byteswap(value.flags);
	byteswap(value.scale);
	byteswap(value.start_frame);
	byteswap(value.end_frame);
}

template<> void byteswap<blofeld::infinite::s_composeractionpath>(blofeld::infinite::s_composeractionpath& value)
{
	byteswap(value.throttle);
	byteswap(value.points_block);
	byteswap(value.destination_tolerance);
	byteswap(value.animation_mode);
	byteswap(value.overlay_channels_block);
}

template<> void byteswap<blofeld::infinite::s_composeractionunitrecording>(blofeld::infinite::s_composeractionunitrecording& value)
{
	byteswap(value.recording_unit_type);
	byteswap(value.recording_name);
	byteswap(value.scale);
	byteswap(value.start_frame);
	byteswap(value.end_frame);
	byteswap(value.smoothing_time);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_composeractioncommandscript>(blofeld::infinite::s_composeractioncommandscript& value)
{
	byteswap(value.script);
}

template<> void byteswap<blofeld::infinite::s_subtracksreference>(blofeld::infinite::s_subtracksreference& value)
{
	byteswap(value.subtracks_reference);
}

template<> void byteswap<blofeld::infinite::s_composersubaction>(blofeld::infinite::s_composersubaction& value)
{
	byteswap(value.type);
	byteswap(value.start_type);
	byteswap(value.end_type);
	byteswap(value.data_index);
	byteswap(value.start_action);
	byteswap(value.start_offset);
	byteswap(value.start_condition_script);
	byteswap(value.end_condition_script);
	byteswap(value.end_action);
	byteswap(value.end_offset);
	byteswap(value.subaction_flags);
}

template<> void byteswap<blofeld::infinite::s_composereditorsubaction>(blofeld::infinite::s_composereditorsubaction& value)
{
	byteswap(value.comment);
	byteswap(value.color);
	byteswap(value.subtrack);
	byteswap(value.editor_flags);
	byteswap(value.start_condition_script);
	byteswap(value.end_condition_script);
	byteswap(value.custom_script);
	byteswap(value.branch_scripts_block);
}

template<> void byteswap<blofeld::infinite::s_subactionpoint>(blofeld::infinite::s_subactionpoint& value)
{
	byteswap(value.flags);
	byteswap(value.point);
	byteswap(value.asset);
}

template<> void byteswap<blofeld::infinite::s_composerbranchelement>(blofeld::infinite::s_composerbranchelement& value)
{
	byteswap(value.target_action);
	byteswap(value.condition_script);
}

template<> void byteswap<blofeld::infinite::s_subactionbranch>(blofeld::infinite::s_subactionbranch& value)
{
	byteswap(value.elements_block);
	byteswap(value.check_rate);
}

template<> void byteswap<blofeld::infinite::s_composerdialog>(blofeld::infinite::s_composerdialog& value)
{
	byteswap(value.dialog);
	byteswap(value.weight);
	byteswap(value.scale);
	byteswap(value.dialog_script);
}

template<> void byteswap<blofeld::infinite::s_subactiondialog>(blofeld::infinite::s_subactiondialog& value)
{
	byteswap(value.dialogs_block);
	byteswap(value.subject);
}

template<> void byteswap<blofeld::infinite::s_subactionsubtitle>(blofeld::infinite::s_subactionsubtitle& value)
{
	byteswap(value.subtitle);
	byteswap(value.character);
}

template<> void byteswap<blofeld::infinite::s_subactioneffect>(blofeld::infinite::s_subactioneffect& value)
{
	byteswap(value.flags);
	byteswap(value.effect);
	byteswap(value.point);
	byteswap(value.scale);
	byteswap(value.function_a);
	byteswap(value.function_b);
}

template<> void byteswap<blofeld::infinite::s_subactionlensflare>(blofeld::infinite::s_subactionlensflare& value)
{
	byteswap(value.lens_flare);
	byteswap(value.point);
	byteswap(value.function);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343curveroadcurvecontrolpointmetadata>(blofeld::infinite::s_i343curveroadcurvecontrolpointmetadata& value)
{
	byteswap(value.width);
	byteswap(value.opacity);
	byteswap(value.falloffleft);
	byteswap(value.falloffright);
	byteswap(value.bank);
}

template<> void byteswap<blofeld::infinite::s_i343curveroaddecalbitmapreference>(blofeld::infinite::s_i343curveroaddecalbitmapreference& value)
{
	byteswap(value.reference);
}

template<> void byteswap<blofeld::infinite::s_i343curveroaddecalcontrolpointmetadata>(blofeld::infinite::s_i343curveroaddecalcontrolpointmetadata& value)
{
	byteswap(value.road_decal_textures_block);
	byteswap(value.road_decal_scale);
	byteswap(value.road_decal_offset);
	byteswap(value.road_decal_tile_repeat_count);
	byteswap(value.road_decal_height_strength);
	byteswap(value.road_decal_mask_strength);
	byteswap(value.road_decal_height_contrast);
	byteswap(value.road_decal_mask_contrast);
	byteswap(value.road_decal_edge_fade);
	byteswap(value.road_decal_random_seed);
}

template<> void byteswap<blofeld::infinite::s_i343curveanimatedsplinecontrolpointmetadata>(blofeld::infinite::s_i343curveanimatedsplinecontrolpointmetadata& value)
{
	byteswap(value.time);
}

template<> void byteswap<blofeld::infinite::s_i343curvecurvecontrolpointmetadata>(blofeld::infinite::s_i343curvecurvecontrolpointmetadata& value)
{
	byteswap(value.spline_road_metadata_block);
	byteswap(value.road_decal_metadata_block);
	byteswap(value.animated_spline_metadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343curvecurve3dcontrolpoint>(blofeld::infinite::s_i343curvecurve3dcontrolpoint& value)
{
	byteswap(value.value);
	byteswap(value.tangent_in);
	byteswap(value.tangent_out);
	byteswap(value.curviness);
	byteswap(value.segment_type_x);
	byteswap(value.segment_type_y);
	byteswap(value.segment_type_z);
	byteswap(value.tangent_mode_x);
	byteswap(value.tangent_mode_y);
	byteswap(value.tangent_mode_z);
	byteswap(value.pointmetadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343curvecurve3ddefinition>(blofeld::infinite::s_i343curvecurve3ddefinition& value)
{
	byteswap(value.control_points_block);
}

template<> void byteswap<blofeld::infinite::s_i343curveanimatedcurve3d>(blofeld::infinite::s_i343curveanimatedcurve3d& value)
{
	byteswap(value.flags);
	byteswap(value.value_curve);
}

template<> void byteswap<blofeld::infinite::s_transformcurve>(blofeld::infinite::s_transformcurve& value)
{
	byteswap(value.translation_type);
	byteswap(value.rotation_type);
	byteswap(value.translation_curve);
	byteswap(value.rotation_curve);
	byteswap(value.blend_curve);
	byteswap(value.translation_point);
	byteswap(value.rotation_point);
}

template<> void byteswap<blofeld::infinite::s_i343curvecurve2dcontrolpoint>(blofeld::infinite::s_i343curvecurve2dcontrolpoint& value)
{
	byteswap(value.value);
	byteswap(value.tangent_in);
	byteswap(value.tangent_out);
	byteswap(value.curviness);
	byteswap(value.segment_type_x);
	byteswap(value.segment_type_y);
	byteswap(value.tangent_mode_x);
	byteswap(value.tangent_mode_y);
}

template<> void byteswap<blofeld::infinite::s_i343curvecurve2ddefinition>(blofeld::infinite::s_i343curvecurve2ddefinition& value)
{
	byteswap(value.control_points_block);
}

template<> void byteswap<blofeld::infinite::s_i343curveanimatedcurve2d>(blofeld::infinite::s_i343curveanimatedcurve2d& value)
{
	byteswap(value.flags);
	byteswap(value.value_curve);
	byteswap(value.animatedcurvemetadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343curveanimatedcurvekeyframe>(blofeld::infinite::s_i343curveanimatedcurvekeyframe& value)
{
	byteswap(value.position);
	byteswap(value.leftslope);
	byteswap(value.rightslope);
	byteswap(value.segmenttype);
	byteswap(value.tangentmode);
}

template<> void byteswap<blofeld::infinite::s_i343curveanimatedcurve>(blofeld::infinite::s_i343curveanimatedcurve& value)
{
	byteswap(value.keyframes_block);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343curvedepthoffieldcurve>(blofeld::infinite::s_i343curvedepthoffieldcurve& value)
{
	byteswap(value.flags);
	byteswap(value.focallength);
	byteswap(value.focusdistance);
	byteswap(value.fstop);
	byteswap(value.gameplay_fov_blend);
}

template<> void byteswap<blofeld::infinite::s_i343curvepropertycurve>(blofeld::infinite::s_i343curvepropertycurve& value)
{
	byteswap(value.name);
	byteswap(value.curve_type);
	byteswap(value.animated_curve_2d);
	byteswap(value.animated_curve_3d);
	byteswap(value.depth_of_field_curve);
	byteswap(value.animated_curve_1d);
}

template<> void byteswap<blofeld::infinite::s_subactionlight>(blofeld::infinite::s_subactionlight& value)
{
	byteswap(value.light);
	byteswap(value.light_name);
	byteswap(value.light_guid);
	byteswap(value.linked_objects_block);
	byteswap(value.transform_curve);
	byteswap(value.curves);
	byteswap(value.curve_list_block);
	byteswap(value.light_flags);
}

template<> void byteswap<blofeld::infinite::s_subactionclipplane>(blofeld::infinite::s_subactionclipplane& value)
{
	byteswap(value.plane_center);
	byteswap(value.plane_direction);
	byteswap(value.subjects_block);
}

template<> void byteswap<blofeld::infinite::s_subactionfunction>(blofeld::infinite::s_subactionfunction& value)
{
	byteswap(value.flags);
	byteswap(value.function_name);
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_subactionfunctioncurve>(blofeld::infinite::s_subactionfunctioncurve& value)
{
	byteswap(value.flags);
	byteswap(value.curve);
}

template<> void byteswap<blofeld::infinite::s_subactionuserinputconstraints>(blofeld::infinite::s_subactionuserinputconstraints& value)
{
	byteswap(value.maximum_look_angles);
	byteswap(value.frictional_force);
}

template<> void byteswap<blofeld::infinite::s_subactiongeneric>(blofeld::infinite::s_subactiongeneric& value)
{
	byteswap(value.asset);
	byteswap(value.blend_frames);
}

template<> void byteswap<blofeld::infinite::s_subactionobject>(blofeld::infinite::s_subactionobject& value)
{
	byteswap(value.subject);
	byteswap(value.object_guid);
	byteswap(value.transform_curve);
	byteswap(value.flags);
	byteswap(value.curves);
	byteswap(value.curve_list_block);
}

template<> void byteswap<blofeld::infinite::s_subactionvalue>(blofeld::infinite::s_subactionvalue& value)
{
	byteswap(value.type);
	byteswap(value.start_value);
	byteswap(value.end_value);
	byteswap(value.value_curve);
}

template<> void byteswap<blofeld::infinite::s_subactioncamerafadescreen>(blofeld::infinite::s_subactioncamerafadescreen& value)
{
	byteswap(value.fade_screen_flags);
	byteswap(value.fade_color);
	byteswap(value.fade_curve);
}

template<> void byteswap<blofeld::infinite::s_subactioncameratrigger>(blofeld::infinite::s_subactioncameratrigger& value)
{
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_composerplayerdata>(blofeld::infinite::s_composerplayerdata& value)
{
	byteswap(value.player_type);
	byteswap(value.multiplayer_team);
	byteswap(value.flags);
	byteswap(value.player_index);
	byteswap(value.forge_spectator_player_index);
}

template<> void byteswap<blofeld::infinite::s_subactionuiscene>(blofeld::infinite::s_subactionuiscene& value)
{
	byteswap(value.flags);
	byteswap(value.ui_scene);
	byteswap(value.point);
	byteswap(value.scale);
	byteswap(value.player_data_block);
}

template<> void byteswap<blofeld::infinite::s_subactionnodegraphevent>(blofeld::infinite::s_subactionnodegraphevent& value)
{
	byteswap(value.event_name);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_subactiongameenginevignetteevent>(blofeld::infinite::s_subactiongameenginevignetteevent& value)
{
	byteswap(value.event_name);
}

template<> void byteswap<blofeld::infinite::s_subactioncameralensdirt>(blofeld::infinite::s_subactioncameralensdirt& value)
{
	byteswap(value.intensity);
	byteswap(value.dirt_texture);
	byteswap(value.dirt_type);
}

template<> void byteswap<blofeld::infinite::s_subactiontransform>(blofeld::infinite::s_subactiontransform& value)
{
	byteswap(value.flags);
	byteswap(value.point_1);
	byteswap(value.point_2);
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_subactiontransformcurve>(blofeld::infinite::s_subactiontransformcurve& value)
{
	byteswap(value.transform_curve);
}

template<> void byteswap<blofeld::infinite::s_subactiongenericai>(blofeld::infinite::s_subactiongenericai& value)
{
	byteswap(value.point);
	byteswap(value.scalar);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_subactionikinfluencer>(blofeld::infinite::s_subactionikinfluencer& value)
{
	byteswap(value.ik_target);
	byteswap(value.chain_name);
	byteswap(value.weight);
	byteswap(value.current_influence_scale);
	byteswap(value.influence_priority);
}

template<> void byteswap<blofeld::infinite::s_subactioncameradofcurve>(blofeld::infinite::s_subactioncameradofcurve& value)
{
	byteswap(value.camera_dof_curve);
	byteswap(value.bokeh_side_count);
}

template<> void byteswap<blofeld::infinite::s_subactionscriptcurves>(blofeld::infinite::s_subactionscriptcurves& value)
{
	byteswap(value.script);
	byteswap(value.script_curve_value_1);
	byteswap(value.script_curve_value_2);
	byteswap(value.script_curve_value_3);
	byteswap(value.script_curve_value_4);
}

template<> void byteswap<blofeld::infinite::s_subactionpuppetvariant>(blofeld::infinite::s_subactionpuppetvariant& value)
{
	byteswap(value.variant_name);
	byteswap(value.style_id);
}

template<> void byteswap<blofeld::infinite::s_subactioncolorrgba>(blofeld::infinite::s_subactioncolorrgba& value)
{
	byteswap(value.type);
	byteswap(value.red_start_value);
	byteswap(value.red_end_value);
	byteswap(value.green_start_value);
	byteswap(value.green_end_value);
	byteswap(value.blue_start_value);
	byteswap(value.blue_end_value);
	byteswap(value.alpha_start_value);
	byteswap(value.alpha_end_value);
	byteswap(value.red_curve);
	byteswap(value.green_curve);
	byteswap(value.blue_curve);
	byteswap(value.alpha_curve);
}

template<> void byteswap<blofeld::infinite::s_subactiondwscolorgrading>(blofeld::infinite::s_subactiondwscolorgrading& value)
{
	byteswap(value.curves);
	byteswap(value.curve_list_block);
	byteswap(value.blending_curve);
}

template<> void byteswap<blofeld::infinite::s_subactiondwschromaticaberration>(blofeld::infinite::s_subactiondwschromaticaberration& value)
{
	byteswap(value.weight);
	byteswap(value.blending_curve);
}

template<> void byteswap<blofeld::infinite::s_subactionrumble>(blofeld::infinite::s_subactionrumble& value)
{
	byteswap(value.rumble_definition);
	byteswap(value.low_frequency_level);
	byteswap(value.high_frequency_level);
	byteswap(value.primary_trigger_level);
	byteswap(value.secondary_trigger_level);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecagedampingproperties>(blofeld::infinite::s_i343narrativecagedampingproperties& value)
{
	byteswap(value.position_dampen_percentage);
	byteswap(value.position_dampen_time);
	byteswap(value.rotation_dampen_percentage);
	byteswap(value.rotation_dampen_time);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecageshakeproperties>(blofeld::infinite::s_i343narrativecageshakeproperties& value)
{
	byteswap(value.scale_damping);
	byteswap(value.position_sample_values);
	byteswap(value.position_offset_scale);
	byteswap(value.position_offset_velocity_range);
	byteswap(value.position_offset_velocity_scale_min);
	byteswap(value.position_offset_velocity_scale_max);
	byteswap(value.position_time_velocity_scale);
	byteswap(value.rotation_sample_values);
	byteswap(value.rotation_offset_scale);
	byteswap(value.rotation_offset_velocity_range);
	byteswap(value.rotation_offset_velocity_scale_min);
	byteswap(value.rotation_offset_velocity_scale_max);
	byteswap(value.rotation_time_velocity_scale);
}

template<> void byteswap<blofeld::infinite::s_subactioncamerashake>(blofeld::infinite::s_subactioncamerashake& value)
{
	byteswap(value.blending_curve);
	byteswap(value.camera_shake_properties);
}

template<> void byteswap<blofeld::infinite::s_composersubtrack>(blofeld::infinite::s_composersubtrack& value)
{
	byteswap(value.name);
	byteswap(value.color);
	byteswap(value.category);
	byteswap(value.subactions_block);
	byteswap(value.editor_subactions_block);
	byteswap(value.points_block);
	byteswap(value.branches_block);
	byteswap(value.dialog_block);
	byteswap(value.subtitles_block);
	byteswap(value.effects_block);
	byteswap(value.lens_flares_block);
	byteswap(value.lights_block);
	byteswap(value.clip_planes_block);
	byteswap(value.functions_block);
	byteswap(value.function_curves_block);
	byteswap(value.input_constraints_block);
	byteswap(value.generic_subactions_block);
	byteswap(value.object_subactions_block);
	byteswap(value.value_subactions_block);
	byteswap(value.camera_fade_screens_block);
	byteswap(value.camera_trigger_subactions_block);
	byteswap(value.scripts_block);
	byteswap(value.ui_scenes_block);
	byteswap(value.nodegraph_events_block);
	byteswap(value.game_engine_vignette_events_block);
	byteswap(value.camera_lens_dirt_block);
	byteswap(value.transform_subactions_block);
	byteswap(value.transform_curve_subactions_block);
	byteswap(value.generic_ai_subactions_block);
	byteswap(value.ik_influencer_subactions_block);
	byteswap(value.camera_dof_curve_subactions_block);
	byteswap(value.script_curves_subactions_block);
	byteswap(value.puppet_variant_subactions_block);
	byteswap(value.color_rgba_subactions_block);
	byteswap(value.dws_color_grading_subactions_block);
	byteswap(value.dws_chromatic_aberration_subactions_block);
	byteswap(value.rumble_subactions_block);
	byteswap(value.camera_shake_subactions_block);
}

template<> void byteswap<blofeld::infinite::s_composersubtracks>(blofeld::infinite::s_composersubtracks& value)
{
	byteswap(value.subtracks_references_block);
	byteswap(value.subtracks_block);
}

template<> void byteswap<blofeld::infinite::s_composertrack>(blofeld::infinite::s_composertrack& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value.id);
	byteswap(value.data_index);
	byteswap(value.subaction_count);
	byteswap(value.actions_block);
	byteswap(value.editor_actions_block);
	byteswap(value.cameras_block);
	byteswap(value.camera_cages_block);
	byteswap(value.animations_block);
	byteswap(value.alembic_animations_block);
	byteswap(value.animated_meshes_block);
	byteswap(value.paths_block);
	byteswap(value.unit_recordings_block);
	byteswap(value.command_scripts_block);
	byteswap(value.subtracks);
	byteswap(value.start_script);
	byteswap(value.end_script);
}

template<> void byteswap<blofeld::infinite::s_guidbyte>(blofeld::infinite::s_guidbyte& value)
{
	byteswap(value.byte_value);
}

template<> void byteswap<blofeld::infinite::s_tagguid>(blofeld::infinite::s_tagguid& value)
{
	byteswap(value.guid_bytes);
}

template<> void byteswap<blofeld::infinite::s_composereditortrack>(blofeld::infinite::s_composereditortrack& value)
{
	byteswap(value.comment);
	byteswap(value.color);
	byteswap(value.height);
	byteswap(value.editor_flags);
	byteswap(value.start_script);
	byteswap(value.end_script);
	byteswap(value.editor_guid_bytes);
}

template<> void byteswap<blofeld::infinite::s_composertrackpuppet>(blofeld::infinite::s_composertrackpuppet& value)
{
	byteswap(value.variant_name);
	byteswap(value.style_id);
	byteswap(value.object_attachment_name);
	byteswap(value.graphics_scene_override);
	byteswap(value.cage_definition_tag_handle);
	byteswap(value.subject);
	byteswap(value.flags);
	byteswap(value.type);
	byteswap(value.parent_model_animation_graph);
	byteswap(value.model_animation_graphs_block);
	byteswap(value.position);
	byteswap(value.bone_for_bounding_sphere_center);
	byteswap(value.bounding_sphere_radius);
	byteswap(value.player_puppet_data_block);
	byteswap(value.runtime_animset_used_by_code_only);
	byteswap(value.reference_to_generated_anim_pool_tag);
}

template<> void byteswap<blofeld::infinite::s_composertrackcamera>(blofeld::infinite::s_composertrackcamera& value)
{
	byteswap(value.camera_animation_graph);
	byteswap(value.subject);
	byteswap(value.position);
	byteswap(value.team_camera);
}

template<> void byteswap<blofeld::infinite::s_composerscene>(blofeld::infinite::s_composerscene& value)
{
	byteswap(value.name);
	byteswap(value.anchor_marker);
	byteswap(value.anchor_position);
	byteswap(value.anchor_rotation);
	byteswap(value.reset_lighting);
	byteswap(value.flags);
	byteswap(value.skip_sound_event);
	byteswap(value.start_sound_event);
	byteswap(value.end_sound_event);
	byteswap(value.skip_music_event);
	byteswap(value.start_music_event);
	byteswap(value.end_music_event);
	byteswap(value.skip_dialog_event);
	byteswap(value.start_dialog_event);
	byteswap(value.end_dialog_event);
	byteswap(value.synced_audio_tracks_block);
	byteswap(value.tracks_block);
	byteswap(value.editor_tracks_block);
	byteswap(value.puppet_tracks_block);
	byteswap(value.camera_tracks_block);
	byteswap(value.lastactionid);
	byteswap(value.lasttrackid);
}

template<> void byteswap<blofeld::infinite::s_compositionscene>(blofeld::infinite::s_compositionscene& value)
{
	byteswap(value.anytag);
	byteswap(value.scene);
}

template<> void byteswap<blofeld::infinite::s_composertransitionelement>(blofeld::infinite::s_composertransitionelement& value)
{
	byteswap(value.flags);
	byteswap(value.fade_hold);
	byteswap(value.fade_time);
	byteswap(value.fade_color);
}

template<> void byteswap<blofeld::infinite::s_composertransition>(blofeld::infinite::s_composertransition& value)
{
	byteswap(value.anytag);
	byteswap(value.fade_out_from_game);
	byteswap(value.fade_in);
	byteswap(value.fade_out);
	byteswap(value.fade_post_load);
	byteswap(value.fade_in_to_game);
}

template<> void byteswap<blofeld::infinite::s_interfaceuiiteminfo>(blofeld::infinite::s_interfaceuiiteminfo& value)
{
	byteswap(value.name);
	byteswap(value.alt_name_);
	byteswap(value.description);
	byteswap(value.help_text);
	byteswap(value.icon_string_id);
	byteswap(value.sprite);
	byteswap(value.sprite_index);
	byteswap(value.alt_sprite);
	byteswap(value.alt_sprite_index);
	byteswap(value.damage_sprite_index);
	byteswap(value.ui_vehicle_screen_reference);
}

template<> void byteswap<blofeld::infinite::s_i343equipmentupgradenode>(blofeld::infinite::s_i343equipmentupgradenode& value)
{
	byteswap(value.node_name);
}

template<> void byteswap<blofeld::infinite::s_i343equipmentupgradepath>(blofeld::infinite::s_i343equipmentupgradepath& value)
{
	byteswap(value.path_name);
	byteswap(value.path_upgrade_type);
	byteswap(value.path_description);
	byteswap(value.persistence_key_levels);
	byteswap(value.persistence_key_read_levels);
	byteswap(value.persistence_key_discovered);
	byteswap(value.unlocked_by_default);
	byteswap(value.uiinfo);
	byteswap(value.nodes_block);
}

template<> void byteswap<blofeld::infinite::s_i343equipmentupgradepoints>(blofeld::infinite::s_i343equipmentupgradepoints& value)
{
	byteswap(value.persistence_key);
}

template<> void byteswap<blofeld::infinite::s_i343equipmentupgradeshieldupgrade>(blofeld::infinite::s_i343equipmentupgradeshieldupgrade& value)
{
	byteswap(value.persistence_key);
}

template<> void byteswap<blofeld::infinite::s_i343equipmentupgradecampaignupgrades>(blofeld::infinite::s_i343equipmentupgradecampaignupgrades& value)
{
	byteswap(value.anytag);
	byteswap(value.equipment_paths_block);
	byteswap(value.equipment_points_block);
	byteswap(value.shield_upgrades_block);
}

template<> void byteswap<blofeld::infinite::s_s_controller_mapping_definition>(blofeld::infinite::s_s_controller_mapping_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.jump);
	byteswap(value.switch_weapon);
	byteswap(value.switch_ability_0);
	byteswap(value.switch_ability_1);
	byteswap(value.switch_ability_2);
	byteswap(value.switch_ability_3);
	byteswap(value.switch_grenade);
	byteswap(value.switch_grenade_prev);
	byteswap(value.equipment_grenade_next);
	byteswap(value.equipment_grenade_prev);
	byteswap(value.contextual_action);
	byteswap(value.melee_attack);
	byteswap(value.equipment);
	byteswap(value.throw_grenade);
	byteswap(value.primary_fire);
	byteswap(value.secondary_fire);
	byteswap(value.crouch);
	byteswap(value.zoom_zoom_scope);
	byteswap(value.mobility);
	byteswap(value.suit);
	byteswap(value.toggle_quick_drop_hud);
	byteswap(value.request_quick_drop_1);
	byteswap(value.request_quick_drop_2);
	byteswap(value.request_quick_drop_3);
	byteswap(value.vehicle_ability_primary);
	byteswap(value.vehicle_ability_secondary);
	byteswap(value.vehicle_ability_tertiary);
	byteswap(value.secondary_contextual_action);
	byteswap(value.player_callout);
	byteswap(value.accept);
	byteswap(value.cancel);
	byteswap(value.machinima_lower_weapon);
	byteswap(value.machinima_camera_enable);
	byteswap(value.machinima_camera_control);
	byteswap(value.machinima_camera_debug);
	byteswap(value.lift_editor);
	byteswap(value.drop_editor);
	byteswap(value.cinematic_skip);
	byteswap(value.loadout_menu);
	byteswap(value.sprint);
	byteswap(value.skip_killcam);
	byteswap(value.change_zoom_level);
	byteswap(value.button_preset_display_name);
	byteswap(value.button_preset_help_text);
	byteswap(value.unassigned);
	byteswap(value.dpad_up);
	byteswap(value.dpad_down);
	byteswap(value.dpad_left);
	byteswap(value.dpad_right);
	byteswap(value.start_button);
	byteswap(value.back_button);
	byteswap(value.left_thumb_stick);
	byteswap(value.right_thumb_stick);
	byteswap(value.button_a);
	byteswap(value.button_b);
	byteswap(value.button_x);
	byteswap(value.button_y);
	byteswap(value.left_bumper);
	byteswap(value.right_bumper);
	byteswap(value.left_trigger);
	byteswap(value.right_trigger);
}

template<> void byteswap<blofeld::infinite::s_i343narrativeconversationtag>(blofeld::infinite::s_i343narrativeconversationtag& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.conversation_type);
	byteswap(value.relative_priority);
	byteswap(value.timeout_duration);
	byteswap(value.maximum_duration);
	byteswap(value.pre_convo_delay);
	byteswap(value.pre_convo_delay_max);
	byteswap(value.post_convo_delay);
	byteswap(value.post_convo_delay_max);
}

template<> void byteswap<blofeld::infinite::s_i343narrativeconversationtypeitem>(blofeld::infinite::s_i343narrativeconversationtypeitem& value)
{
	byteswap(value.conversation_type);
	byteswap(value.priority);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343narrativeconversationtypestag>(blofeld::infinite::s_i343narrativeconversationtypestag& value)
{
	byteswap(value.anytag);
	byteswap(value.type_items_block);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblesquicktipdata>(blofeld::infinite::s_i343collectiblesquicktipdata& value)
{
	byteswap(value.title_id);
	byteswap(value.text_id);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblesgameskullunlock>(blofeld::infinite::s_i343collectiblesgameskullunlock& value)
{
	byteswap(value.game_skull);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblesunlockedequipment>(blofeld::infinite::s_i343collectiblesunlockedequipment& value)
{
	byteswap(value.frame_attachment_name);
	byteswap(value.input_slot);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblesunlockedpoi>(blofeld::infinite::s_i343collectiblesunlockedpoi& value)
{
	byteswap(value.intel_poi_key);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblesgameplayunlocks>(blofeld::infinite::s_i343collectiblesgameplayunlocks& value)
{
	byteswap(value.skull_unlock_block);
	byteswap(value.equipment_unlock_block);
	byteswap(value.poi_unlock_block);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblescollectibleentry>(blofeld::infinite::s_i343collectiblescollectibleentry& value)
{
	byteswap(value.collectible_type);
	byteswap(value.persistence_key);
	byteswap(value.codex_list_entry_reference);
	byteswap(value.quick_tip_override_block);
	byteswap(value.gameplay_unlocks_block);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblescodexpercategoryinfo>(blofeld::infinite::s_i343collectiblescodexpercategoryinfo& value)
{
	byteswap(value.codex_category);
	byteswap(value.unlock_persistence_key_type);
	byteswap(value.unlock_function);
	byteswap(value.unlock_compare_value);
	byteswap(value.sprite);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblesfirstacquisitiondata>(blofeld::infinite::s_i343collectiblesfirstacquisitiondata& value)
{
	byteswap(value.first_acquisition_persistence_key);
	byteswap(value.tutorial_title_id);
	byteswap(value.tutorial_text_id);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblessplashbannerdata>(blofeld::infinite::s_i343collectiblessplashbannerdata& value)
{
	byteswap(value.banner_text_override);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblesbackmenuscreentabindex>(blofeld::infinite::s_i343collectiblesbackmenuscreentabindex& value)
{
	byteswap(value.back_menu_screen_tab_index);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblespercollectipletypedata>(blofeld::infinite::s_i343collectiblespercollectipletypedata& value)
{
	byteswap(value.collectible_type);
	byteswap(value.defualt_tip_data);
	byteswap(value.first_acquisition_data$2);
	byteswap(value.splash_banner_data$2);
	byteswap(value.back_menu_screen_tab_index_block);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblescodexentrydesctext>(blofeld::infinite::s_i343collectiblescodexentrydesctext& value)
{
	byteswap(value.paragraph_id);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblescodexentry>(blofeld::infinite::s_i343collectiblescodexentry& value)
{
	byteswap(value.title);
	byteswap(value.read_key_id);
	byteswap(value.description_block);
	byteswap(value.sprite_index);
	byteswap(value.audio_log_id_as_string);
	byteswap(value.audio_log_id);
	byteswap(value.display_order);
	byteswap(value.faction);
	byteswap(value.uiiteminfo);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblescollectibleentryblockindex>(blofeld::infinite::s_i343collectiblescollectibleentryblockindex& value)
{
	byteswap(value.collectibleentryindex);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblescodexentrylist>(blofeld::infinite::s_i343collectiblescodexentrylist& value)
{
	byteswap(value.name);
	byteswap(value.codex_screen_category);
	byteswap(value.codex_screen_category_name);
	byteswap(value.codex_entries_block);
	byteswap(value.unlock_collectibles_block);
	byteswap(value.unlock_compare_value);
	byteswap(value.unlockmethod);
}

template<> void byteswap<blofeld::infinite::s_i343collectiblescollectiblesdefinition>(blofeld::infinite::s_i343collectiblescollectiblesdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.collectible_entry_block);
	byteswap(value.codex_category_info_block);
	byteswap(value.per_collectible_data_block);
	byteswap(value.codex_screen_index);
	byteswap(value.upgrade_screen_index);
	byteswap(value.codex_lists_block);
}

template<> void byteswap<blofeld::infinite::s_errorreportnodeindex>(blofeld::infinite::s_errorreportnodeindex& value)
{
	byteswap(value.node_index);
}

template<> void byteswap<blofeld::infinite::s_errorreportnodeweight>(blofeld::infinite::s_errorreportnodeweight& value)
{
	byteswap(value.node_weight);
}

template<> void byteswap<blofeld::infinite::s_error_report_point>(blofeld::infinite::s_error_report_point& value)
{
	byteswap(value.position);
	byteswap(value.node_indices);
	byteswap(value.node_weights);
}

template<> void byteswap<blofeld::infinite::s_error_report_vertex>(blofeld::infinite::s_error_report_vertex& value)
{
	byteswap(value.point);
	byteswap(value.color);
	byteswap(value.screen_size);
}

template<> void byteswap<blofeld::infinite::s_error_report_vector>(blofeld::infinite::s_error_report_vector& value)
{
	byteswap(value.point);
	byteswap(value.color);
	byteswap(value.normal);
	byteswap(value.screen_length);
}

template<> void byteswap<blofeld::infinite::s_errorreportlinepoint>(blofeld::infinite::s_errorreportlinepoint& value)
{
	byteswap(value.point);
}

template<> void byteswap<blofeld::infinite::s_error_report_line>(blofeld::infinite::s_error_report_line& value)
{
	byteswap(value.points);
	byteswap(value.color);
}

template<> void byteswap<blofeld::infinite::s_errorreporttrianglepoint>(blofeld::infinite::s_errorreporttrianglepoint& value)
{
	byteswap(value.point);
}

template<> void byteswap<blofeld::infinite::s_error_report_triangle>(blofeld::infinite::s_error_report_triangle& value)
{
	byteswap(value.points);
	byteswap(value.color);
}

template<> void byteswap<blofeld::infinite::s_errorreportquadpoint>(blofeld::infinite::s_errorreportquadpoint& value)
{
	byteswap(value.point);
}

template<> void byteswap<blofeld::infinite::s_error_report_quad>(blofeld::infinite::s_error_report_quad& value)
{
	byteswap(value.points);
	byteswap(value.color);
}

template<> void byteswap<blofeld::infinite::s_error_report_comment>(blofeld::infinite::s_error_report_comment& value)
{
	byteswap(value.text);
	byteswap(value.point);
	byteswap(value.color);
}

template<> void byteswap<blofeld::infinite::s_error_report>(blofeld::infinite::s_error_report& value)
{
	byteswap(value.type);
	byteswap(value.source);
	byteswap(value.flags);
	byteswap(value.text);
	byteswap(value.source_identifier);
	byteswap(value.source_filename);
	byteswap(value.source_line_number);
	byteswap(value.vertices_block);
	byteswap(value.vectors_block);
	byteswap(value.lines_block);
	byteswap(value.triangles_block);
	byteswap(value.quads_block);
	byteswap(value.comments_block);
	byteswap(value.report_key);
	byteswap(value.node_index);
	byteswap(value.bounds_x);
	byteswap(value.bounds_y);
	byteswap(value.bounds_z);
	byteswap(value.color);
}

template<> void byteswap<blofeld::infinite::s_error_report_category>(blofeld::infinite::s_error_report_category& value)
{
	byteswap(value.name);
	byteswap(value.report_type);
	byteswap(value.flags);
	byteswap(value.runtime_generation_flags);
	byteswap(value.runtime_something);
	byteswap(value.reports_block);
}

template<> void byteswap<blofeld::infinite::s_collision_model_material>(blofeld::infinite::s_collision_model_material& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_bsp3d_node>(blofeld::infinite::s_bsp3d_node& value)
{
	byteswap(value.node_data_designator);
}

template<> void byteswap<blofeld::infinite::s_s_bsp3d_kd_super_node>(blofeld::infinite::s_s_bsp3d_kd_super_node& value)
{
	byteswap(value.plane_0);
	byteswap(value.plane_1);
	byteswap(value.plane_2);
	byteswap(value.plane_3);
	byteswap(value.plane_4);
	byteswap(value.plane_5);
	byteswap(value.plane_6);
	byteswap(value.plane_7);
	byteswap(value.plane_8);
	byteswap(value.plane_9);
	byteswap(value.plane10);
	byteswap(value.plane11);
	byteswap(value.plane12);
	byteswap(value.plane13);
	byteswap(value.plane14);
	byteswap(value.plane_dimensions);
	byteswap(value.child_index_0);
	byteswap(value.child_index_1);
	byteswap(value.child_index_2);
	byteswap(value.child_index_3);
	byteswap(value.child_index_4);
	byteswap(value.child_index_5);
	byteswap(value.child_index_6);
	byteswap(value.child_index_7);
	byteswap(value.child_index_8);
	byteswap(value.child_index_9);
	byteswap(value.child_index10);
	byteswap(value.child_index11);
	byteswap(value.child_index12);
	byteswap(value.child_index13);
	byteswap(value.child_index14);
	byteswap(value.child_index15);
}

template<> void byteswap<blofeld::infinite::s_planesparams>(blofeld::infinite::s_planesparams& value)
{
	byteswap(value.plane);
}

template<> void byteswap<blofeld::infinite::s_collision_leaf>(blofeld::infinite::s_collision_leaf& value)
{
	byteswap(value.flags);
	byteswap(value.bsp2d_reference_count);
	byteswap(value.first_bsp2d_reference);
}

template<> void byteswap<blofeld::infinite::s_bsp2d_reference>(blofeld::infinite::s_bsp2d_reference& value)
{
	byteswap(value.plane);
	byteswap(value.bsp2d_node);
}

template<> void byteswap<blofeld::infinite::s_bsp2d_node>(blofeld::infinite::s_bsp2d_node& value)
{
	byteswap(value.plane);
	byteswap(value.left_child);
	byteswap(value.right_child);
}

template<> void byteswap<blofeld::infinite::s_collision_surface>(blofeld::infinite::s_collision_surface& value)
{
	byteswap(value.plane_index);
	byteswap(value.first_edge);
	byteswap(value.material);
	byteswap(value.flags);
	byteswap(value.best_plane_calculation_vertex_index_);
}

template<> void byteswap<blofeld::infinite::s_collision_edge>(blofeld::infinite::s_collision_edge& value)
{
	byteswap(value.start_vertex);
	byteswap(value.end_vertex);
	byteswap(value.forward_edge);
	byteswap(value.reverse_edge);
	byteswap(value.left_surface);
	byteswap(value.right_surface);
}

template<> void byteswap<blofeld::infinite::s_collision_vertex>(blofeld::infinite::s_collision_vertex& value)
{
	byteswap(value.point);
	byteswap(value.first_edge);
	byteswap(value.sink);
}

template<> void byteswap<blofeld::infinite::s_collision_bsp>(blofeld::infinite::s_collision_bsp& value)
{
	byteswap(value.bsp3d_nodes_block);
	byteswap(value.bsp3d_supernodes_block);
	byteswap(value.planes_block);
	byteswap(value.leaves_block);
	byteswap(value.bsp2d_references_block);
	byteswap(value.bsp2d_nodes_block);
	byteswap(value.surfaces_block);
	byteswap(value.edges_block);
	byteswap(value.vertices_block);
}

template<> void byteswap<blofeld::infinite::s_collision_model_bsp>(blofeld::infinite::s_collision_model_bsp& value)
{
	byteswap(value.node_index);
	byteswap(value.bsp);
}

template<> void byteswap<blofeld::infinite::s_moppcodedatadefinitionparams>(blofeld::infinite::s_moppcodedatadefinitionparams& value)
{
	byteswap(value.mopp_data);
}

template<> void byteswap<blofeld::infinite::s_s_havok_mopp_code_definition>(blofeld::infinite::s_s_havok_mopp_code_definition& value)
{
	byteswap(value.field_pointer_skip);
	byteswap(value.property_bag_skip);
	byteswap(value.size);
	byteswap(value.count);
	byteswap(value.vi);
	byteswap(value.vj);
	byteswap(value.vk);
	byteswap(value.vw);
	byteswap(value.m_data_pointer);
	byteswap(value.int_m_size);
	byteswap(value.int_m_capacityandflags);
	byteswap(value.int8_m_buildtype);
	byteswap(value.mopp_data_block__block);
	byteswap(value.mopp_build_type);
}

template<> void byteswap<blofeld::infinite::s_collision_model_permutation>(blofeld::infinite::s_collision_model_permutation& value)
{
	byteswap(value.name);
	byteswap(value.resourcebspoffset);
	byteswap(value.resourcebspcount);
	byteswap(value.bsps_block);
	byteswap(value.mopp_codes_block);
}

template<> void byteswap<blofeld::infinite::s_collision_model_region>(blofeld::infinite::s_collision_model_region& value)
{
	byteswap(value.name);
	byteswap(value.permutations_block);
}

template<> void byteswap<blofeld::infinite::s_collision_model_pathfinding_sphere>(blofeld::infinite::s_collision_model_pathfinding_sphere& value)
{
	byteswap(value.node);
	byteswap(value.flags);
	byteswap(value.center);
	byteswap(value.radius);
}

template<> void byteswap<blofeld::infinite::s_collision_model_node>(blofeld::infinite::s_collision_model_node& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.parent_node);
	byteswap(value.next_sibling_node);
	byteswap(value.first_child_node);
}

template<> void byteswap<blofeld::infinite::s_collision_model_definition>(blofeld::infinite::s_collision_model_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.import_info_checksum);
	byteswap(value.errors_block);
	byteswap(value.flags);
	byteswap(value.materials_block);
	byteswap(value.regions_block);
	byteswap(value.cookie_cutters_block);
	byteswap(value.pathfinding_spheres_block);
	byteswap(value.nodes_block);
	byteswap(value.regions_resource);
	byteswap(value.flags_for_nodes_driving_collision_geo);
}

template<> void byteswap<blofeld::infinite::s_color_table_color>(blofeld::infinite::s_color_table_color& value)
{
	byteswap(value.name);
	byteswap(value.color);
}

template<> void byteswap<blofeld::infinite::s_color_table>(blofeld::infinite::s_color_table& value)
{
	byteswap(value.anytag);
	byteswap(value.colors_block);
}

template<> void byteswap<blofeld::infinite::s_authoredlightprobelights>(blofeld::infinite::s_authoredlightprobelights& value)
{
	byteswap(value.direction_1);
	byteswap(value.front_back_1);
	byteswap(value.direct_color_1);
	byteswap(value.direct_intensity_1);
	byteswap(value.direction_2);
	byteswap(value.front_back_2);
	byteswap(value.direct_color_2);
	byteswap(value.direct_intensity_2);
	byteswap(value.ambient_color);
	byteswap(value.ambient_intensity);
	byteswap(value.sun_color);
	byteswap(value.sun_intensity);
	byteswap(value.cubemap_scale_color);
	byteswap(value.cubemap_scale_intensity);
	byteswap(value.authored_light_probe_intensity_scale);
	byteswap(value.generated_air_probe_intensity_scale);
}

template<> void byteswap<blofeld::infinite::s_rgblightprobe>(blofeld::infinite::s_rgblightprobe& value)
{
	byteswap(value.sh_data);
}

template<> void byteswap<blofeld::infinite::s_authoredlightprobe>(blofeld::infinite::s_authoredlightprobe& value)
{
	byteswap(value.lights_block);
	byteswap(value.generated_air_probe_intensity_scale);
	byteswap(value.raw_sh_data);
	byteswap(value.per_frame_sh_data);
	byteswap(value.sun_color);
	byteswap(value.cubemap_scale);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_customobjectlighting>(blofeld::infinite::s_customobjectlighting& value)
{
	byteswap(value.authored_light_probes_block);
	byteswap(value.is_camera_space);
	byteswap(value.flags);
	byteswap(value.cubemap_override);
}

template<> void byteswap<blofeld::infinite::s_customobjectlightingtag>(blofeld::infinite::s_customobjectlightingtag& value)
{
	byteswap(value.anytag);
	byteswap(value.probe);
}

template<> void byteswap<blofeld::infinite::s_composerscenario>(blofeld::infinite::s_composerscenario& value)
{
	byteswap(value.scenario);
}

template<> void byteswap<blofeld::infinite::s_composerbink>(blofeld::infinite::s_composerbink& value)
{
	byteswap(value.flags);
	byteswap(value.bink_movie);
	byteswap(value.bink_movie_on_disc);
}

template<> void byteswap<blofeld::infinite::s_composerscenereference>(blofeld::infinite::s_composerscenereference& value)
{
	byteswap(value.scene);
}

template<> void byteswap<blofeld::infinite::s_stringidtoshortnamemappingid>(blofeld::infinite::s_stringidtoshortnamemappingid& value)
{
	byteswap(value.id);
}

template<> void byteswap<blofeld::infinite::s_stringidtoshortnamemappingindex>(blofeld::infinite::s_stringidtoshortnamemappingindex& value)
{
	byteswap(value.string_index);
}

template<> void byteswap<blofeld::infinite::s_stringidtoshortnamemapping>(blofeld::infinite::s_stringidtoshortnamemapping& value)
{
	byteswap(value.ids_block);
	byteswap(value.string_indices_block);
	byteswap(value.string_table);
}

template<> void byteswap<blofeld::infinite::s_soundbankdefinitionreference>(blofeld::infinite::s_soundbankdefinitionreference& value)
{
	byteswap(value.soundbank);
}

template<> void byteswap<blofeld::infinite::s_composerfirsttofirsttransition>(blofeld::infinite::s_composerfirsttofirsttransition& value)
{
	byteswap(value.preset);
	byteswap(value.override_flags);
	byteswap(value.flags);
	byteswap(value.close_enough_distance_min);
	byteswap(value.close_enough_distance_max);
	byteswap(value.close_enough_angle_min);
	byteswap(value.close_enough_angle_max);
	byteswap(value.linear_velocity_min);
	byteswap(value.linear_velocity_max);
	byteswap(value.angular_velocity_min);
	byteswap(value.angular_velocity_max);
	byteswap(value.lower_weapon_time);
	byteswap(value.raise_weapon_time);
	byteswap(value.hide_player_time);
	byteswap(value.move_to_slide_curve);
	byteswap(value.move_to_time);
	byteswap(value.lower_weapon_delay_override);
	byteswap(value.raise_weapon_delay_override);
	byteswap(value.hud_off_delay_override);
	byteswap(value.hud_on_delay_override);
	byteswap(value.move_to_delay_override);
}

template<> void byteswap<blofeld::infinite::s_composerfirsttothirdtransition>(blofeld::infinite::s_composerfirsttothirdtransition& value)
{
	byteswap(value.flags);
	byteswap(value.close_enough_distance);
	byteswap(value.close_enough_angle);
	byteswap(value.angular_velocity);
	byteswap(value.lower_weapon_time);
	byteswap(value.raise_weapon_time);
	byteswap(value.hide_player_time);
	byteswap(value.destination);
}

template<> void byteswap<blofeld::infinite::s_compositiondefinition>(blofeld::infinite::s_compositiondefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.scenario);
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.animation_blend_in);
	byteswap(value.cage_camera_blend_in_time);
	byteswap(value.cage_camera_blend_in_curve);
	byteswap(value.cage_camera_blend_in_variant);
	byteswap(value.cage_camera_blend_out_time);
	byteswap(value.cage_camera_blend_out_curve);
	byteswap(value.cage_camera_blend_out_variant);
	byteswap(value.cinematic_lod_scale);
	byteswap(value.lighting_variant);
	byteswap(value.transition);
	byteswap(value.skip_sound_event);
	byteswap(value.start_sound_event);
	byteswap(value.end_sound_event);
	byteswap(value.skip_music_event);
	byteswap(value.start_music_event);
	byteswap(value.end_music_event);
	byteswap(value.skip_dialog_event);
	byteswap(value.start_dialog_event);
	byteswap(value.end_dialog_event);
	byteswap(value.bink);
	byteswap(value.ics_point_0);
	byteswap(value.ics_point_1);
	byteswap(value.ics_point_2);
	byteswap(value.ics_point_3);
	byteswap(value.start_script);
	byteswap(value.end_script);
	byteswap(value.skip_script);
	byteswap(value.scenes_block);
	byteswap(value.scene_references_block);
	byteswap(value.name_map);
	byteswap(value.required_sound_banks_block);
	byteswap(value.synced_audio_tracks_block);
	byteswap(value.first_to_first_transition_block);
	byteswap(value.first_to_third_transition_block);
}

template<> void byteswap<blofeld::infinite::s_cheapparticlescalarfunction>(blofeld::infinite::s_cheapparticlescalarfunction& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_cheapparticleemitter>(blofeld::infinite::s_cheapparticleemitter& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.version);
	byteswap(value.spawn_rate);
	byteswap(value.spawnrate);
	byteswap(value.distance_fade_start);
	byteswap(value.distance_fade_end);
	byteswap(value.type_0);
	byteswap(value.weight_0);
	byteswap(value.type_1);
	byteswap(value.weight_1);
	byteswap(value.type_2);
	byteswap(value.weight_2);
	byteswap(value.type_3);
	byteswap(value.weight_3);
	byteswap(value.lifetime$2);
	byteswap(value.position_texture);
	byteswap(value.position_scale);
	byteswap(value.position_flatten);
	byteswap(value.velocity_texture);
	byteswap(value.directionality);
	byteswap(value.speed_scale);
	byteswap(value.subframe_offset);
	byteswap(value.rotation_randomness);
	byteswap(value.particle_scale_modifier);
	byteswap(value.lighting_contrast);
	byteswap(value.lighting_offset);
	byteswap(value.lighting_min);
	byteswap(value.lighting_max);
	byteswap(value.spawn_params0);
	byteswap(value.spawn_params1);
	byteswap(value.spawn_params2);
	byteswap(value.spawn_params3);
	byteswap(value.spawn_params4);
	byteswap(value.global_type_library);
}

template<> void byteswap<blofeld::infinite::s_cheapparticletype>(blofeld::infinite::s_cheapparticletype& value)
{
	byteswap(value.name);
	byteswap(value.drag);
	byteswap(value.gravity);
	byteswap(value.turbulence);
	byteswap(value.turbulence_type);
	byteswap(value.depth_range);
	byteswap(value.elasticity);
	byteswap(value.death);
	byteswap(value.change_type);
	byteswap(value.orientation);
	byteswap(value.color0);
	byteswap(value.intensity0);
	byteswap(value.fade_start);
	byteswap(value.size);
	byteswap(value.motion_blur_stretch);
	byteswap(value.texture);
	byteswap(value.texture_y_scale);
	byteswap(value.taa_mask_strength);
}

template<> void byteswap<blofeld::infinite::s_cheapparticletexture>(blofeld::infinite::s_cheapparticletexture& value)
{
	byteswap(value.bitmap);
}

template<> void byteswap<blofeld::infinite::s_cheapparticleturbulencetype>(blofeld::infinite::s_cheapparticleturbulencetype& value)
{
	byteswap(value.name);
	byteswap(value.turbulence);
	byteswap(value.turb_du_dt);
	byteswap(value.turb_dv_dt);
	byteswap(value.turb_du_dp);
	byteswap(value.turb_dv_dp);
}

template<> void byteswap<blofeld::infinite::s_cheapparticletypelibrary>(blofeld::infinite::s_cheapparticletypelibrary& value)
{
	byteswap(value.anytag);
	byteswap(value.types_block);
	byteswap(value.textures_block);
	byteswap(value.random);
	byteswap(value.turbulence_types_block);
	byteswap(value.type_texture);
	byteswap(value.render_texture);
	byteswap(value.turbulencetexture);
}

template<> void byteswap<blofeld::infinite::s_s_camera_impulse>(blofeld::infinite::s_s_camera_impulse& value)
{
	byteswap(value.impulse_duration);
	byteswap(value.mapping);
	byteswap(value.rotation);
	byteswap(value.pushback);
	byteswap(value.jitter);
}

template<> void byteswap<blofeld::infinite::s_s_camera_shake>(blofeld::infinite::s_s_camera_shake& value)
{
	byteswap(value.shake_duration);
	byteswap(value.mapping);
	byteswap(value.random_translation);
	byteswap(value.random_rotation);
	byteswap(value.wobble_function_period);
	byteswap(value.wobble_weight);
	byteswap(value.wobble_function);
	byteswap(value.animated_shake_playback);
	byteswap(value.animated_shake_weight);
	byteswap(value.animation_graph);
	byteswap(value.animation_name);
	byteswap(value.zoom_penalty_linear_);
	byteswap(value.zoom_penalty_squareroot_);
}

template<> void byteswap<blofeld::infinite::s_s_camera_shake_definition>(blofeld::infinite::s_s_camera_shake_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.camera_impulse$2);
	byteswap(value.camera_shake$2);
}

template<> void byteswap<blofeld::infinite::s_s_cui_property_value_long_definition>(blofeld::infinite::s_s_cui_property_value_long_definition& value)
{
	byteswap(value.name);
	byteswap(value.resourcename);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_s_cui_property_value_real_definition>(blofeld::infinite::s_s_cui_property_value_real_definition& value)
{
	byteswap(value.name);
	byteswap(value.resourcename);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_s_cui_property_value_string_id_definition>(blofeld::infinite::s_s_cui_property_value_string_id_definition& value)
{
	byteswap(value.name);
	byteswap(value.resourcename);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_cuipropertyvaluecomponentptrdefinition>(blofeld::infinite::s_cuipropertyvaluecomponentptrdefinition& value)
{
	byteswap(value.name);
	byteswap(value.resourcename);
	byteswap(value.component_id);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_s_cui_property_value_tag_reference_definition>(blofeld::infinite::s_s_cui_property_value_tag_reference_definition& value)
{
	byteswap(value.name);
	byteswap(value.resourcename);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_s_cui_property_value_text_definition>(blofeld::infinite::s_s_cui_property_value_text_definition& value)
{
	byteswap(value.name);
	byteswap(value.resourcename);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_s_cui_property_value_argb_color_definition>(blofeld::infinite::s_s_cui_property_value_argb_color_definition& value)
{
	byteswap(value.name);
	byteswap(value.resourcename);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_cuieventhandlerdefinition>(blofeld::infinite::s_cuieventhandlerdefinition& value)
{
	byteswap(value.event);
	byteswap(value.filter);
	byteswap(value.name);
	byteswap(value.action);
}

template<> void byteswap<blofeld::infinite::s_s_cui_properties_definition>(blofeld::infinite::s_s_cui_properties_definition& value)
{
	byteswap(value.long_properties_block);
	byteswap(value.real_properties_block);
	byteswap(value.string_id_properties_block);
	byteswap(value.component_ptr_properties_block);
	byteswap(value.tag_reference_properties_block);
	byteswap(value.string_properties_block);
	byteswap(value.argb_color_properties_block);
	byteswap(value.event_handlers_block);
}

template<> void byteswap<blofeld::infinite::s_cuiresourcesdefinition>(blofeld::infinite::s_cuiresourcesdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.resource_values);
}

template<> void byteswap<blofeld::infinite::s_i343curvecurvedefinitiontagmetadata>(blofeld::infinite::s_i343curvecurvedefinitiontagmetadata& value)
{
	byteswap(value.input);
}

template<> void byteswap<blofeld::infinite::s_i343curvenamed1dcurve>(blofeld::infinite::s_i343curvenamed1dcurve& value)
{
	byteswap(value.name);
	byteswap(value.definition);
	byteswap(value.metadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343curvenamed2dcurve>(blofeld::infinite::s_i343curvenamed2dcurve& value)
{
	byteswap(value.name);
	byteswap(value.definition);
	byteswap(value.metadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343curvenamed3dcurve>(blofeld::infinite::s_i343curvenamed3dcurve& value)
{
	byteswap(value.name);
	byteswap(value.definition);
	byteswap(value.metadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343curvenamedtransformcurve>(blofeld::infinite::s_i343curvenamedtransformcurve& value)
{
	byteswap(value.name);
	byteswap(value.position_definition);
	byteswap(value.orientation_definition);
	byteswap(value.metadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343curvecurvedefinitiontag>(blofeld::infinite::s_i343curvecurvedefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.curves_1d_block);
	byteswap(value.curves_2d_block);
	byteswap(value.curves_3d_block);
	byteswap(value.curves_transform_block);
}

template<> void byteswap<blofeld::infinite::s_stringfilereferences>(blofeld::infinite::s_stringfilereferences& value)
{
	byteswap(value.string_list);
	byteswap(value.new_string_list);
}

template<> void byteswap<blofeld::infinite::s_resourcefilereferences>(blofeld::infinite::s_resourcefilereferences& value)
{
	byteswap(value.resources_list);
}

template<> void byteswap<blofeld::infinite::s_cuitemplatecomponentdefinition>(blofeld::infinite::s_cuitemplatecomponentdefinition& value)
{
	byteswap(value.component_id);
	byteswap(value.original_name);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_cuitemplateinstantiationdefinition>(blofeld::infinite::s_cuitemplateinstantiationdefinition& value)
{
	byteswap(value.template_instance_id);
	byteswap(value.screen_reference);
	byteswap(value.parent);
	byteswap(value.parent_id);
	byteswap(value.child_order);
	byteswap(value.components_block);
}

template<> void byteswap<blofeld::infinite::s_s_cui_component_definition>(blofeld::infinite::s_s_cui_component_definition& value)
{
	byteswap(value.component_id);
	byteswap(value.type);
	byteswap(value.name);
	byteswap(value.parent);
	byteswap(value.parent_id);
	byteswap(value.child_order);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_cui_component_index_definition>(blofeld::infinite::s_s_cui_component_index_definition& value)
{
	byteswap(value.component_id);
	byteswap(value.name);
	byteswap(value.component_definition_index);
}

template<> void byteswap<blofeld::infinite::s_cuidonotcreatecomponentdefinition>(blofeld::infinite::s_cuidonotcreatecomponentdefinition& value)
{
	byteswap(value.component_id);
}

template<> void byteswap<blofeld::infinite::s_cuidonotcreatescreendefinition>(blofeld::infinite::s_cuidonotcreatescreendefinition& value)
{
	byteswap(value.screen_reference);
	byteswap(value.components_block);
}

template<> void byteswap<blofeld::infinite::s_s_cui_component_properties_definition>(blofeld::infinite::s_s_cui_component_properties_definition& value)
{
	byteswap(value.component_id);
	byteswap(value.name);
	byteswap(value.property_values);
}

template<> void byteswap<blofeld::infinite::s_s_cui_animation_scalar_function>(blofeld::infinite::s_s_cui_animation_scalar_function& value)
{
	byteswap(value.scalar_function);
}

template<> void byteswap<blofeld::infinite::s_s_cui_animation_property_keyframe_value_real_definition>(blofeld::infinite::s_s_cui_animation_property_keyframe_value_real_definition& value)
{
	byteswap(value.duration);
	byteswap(value.resourcename);
	byteswap(value.value);
	byteswap(value.transition_function);
}

template<> void byteswap<blofeld::infinite::s_s_cui_animation_component_property_real_definition>(blofeld::infinite::s_s_cui_animation_component_property_real_definition& value)
{
	byteswap(value.name);
	byteswap(value.composition);
	byteswap(value.ending_type);
	byteswap(value.iteration_count);
	byteswap(value.total_milliseconds);
	byteswap(value.real_keyframes_block);
}

template<> void byteswap<blofeld::infinite::s_s_cui_animation_property_keyframe_value_argb_color_definition>(blofeld::infinite::s_s_cui_animation_property_keyframe_value_argb_color_definition& value)
{
	byteswap(value.duration);
	byteswap(value.resourcename);
	byteswap(value.color);
	byteswap(value.transition_function);
}

template<> void byteswap<blofeld::infinite::s_s_cui_animation_component_property_argb_color_definition>(blofeld::infinite::s_s_cui_animation_component_property_argb_color_definition& value)
{
	byteswap(value.name);
	byteswap(value.composition);
	byteswap(value.ending_type);
	byteswap(value.iteration_count);
	byteswap(value.total_milliseconds);
	byteswap(value.argb_color_keyframes_block);
}

template<> void byteswap<blofeld::infinite::s_cuianimationpropertykeyframevaluestringiddefinition>(blofeld::infinite::s_cuianimationpropertykeyframevaluestringiddefinition& value)
{
	byteswap(value.duration);
	byteswap(value.resourcename);
	byteswap(value.stringid);
}

template<> void byteswap<blofeld::infinite::s_cuianimationcomponentpropertystringiddefinition>(blofeld::infinite::s_cuianimationcomponentpropertystringiddefinition& value)
{
	byteswap(value.name);
	byteswap(value.composition);
	byteswap(value.ending_type);
	byteswap(value.iteration_count);
	byteswap(value.total_milliseconds);
	byteswap(value.stringid_keyframes_block);
}

template<> void byteswap<blofeld::infinite::s_s_cui_animation_component_definition>(blofeld::infinite::s_s_cui_animation_component_definition& value)
{
	byteswap(value.component_id);
	byteswap(value.name);
	byteswap(value.total_milliseconds);
	byteswap(value.real_properties_block);
	byteswap(value.argb_color_properties_block);
	byteswap(value.stringid_properties_block);
}

template<> void byteswap<blofeld::infinite::s_s_cui_animation_definition>(blofeld::infinite::s_s_cui_animation_definition& value)
{
	byteswap(value.name);
	byteswap(value.time_base_offset);
	byteswap(value.time_exponential_offset);
	byteswap(value.animation_input);
	byteswap(value.components_block);
}

template<> void byteswap<blofeld::infinite::s_cuianimatedcomponentlookup>(blofeld::infinite::s_cuianimatedcomponentlookup& value)
{
	byteswap(value.component_id);
}

template<> void byteswap<blofeld::infinite::s_s_cui_overlay_definition>(blofeld::infinite::s_s_cui_overlay_definition& value)
{
	byteswap(value.resolution);
	byteswap(value.theme);
	byteswap(value.components_block);
	byteswap(value.animations_block);
	byteswap(value.animated_component_lookup_block);
}

template<> void byteswap<blofeld::infinite::s_s_cui_property_editor_only_definition>(blofeld::infinite::s_s_cui_property_editor_only_definition& value)
{
	byteswap(value.name);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_cui_component_editor_only_definition>(blofeld::infinite::s_s_cui_component_editor_only_definition& value)
{
	byteswap(value.component_id);
	byteswap(value.name);
	byteswap(value.properties_editor_only_block);
}

template<> void byteswap<blofeld::infinite::s_s_cui_animation_editor_only_definition>(blofeld::infinite::s_s_cui_animation_editor_only_definition& value)
{
	byteswap(value.name);
	byteswap(value.components_editor_only_block);
}

template<> void byteswap<blofeld::infinite::s_s_cui_overlay_editor_only_definition>(blofeld::infinite::s_s_cui_overlay_editor_only_definition& value)
{
	byteswap(value.resolution);
	byteswap(value.theme);
	byteswap(value.flags);
	byteswap(value.components_editor_only_block);
	byteswap(value.animations_editor_only_block);
}

template<> void byteswap<blofeld::infinite::s_s_cui_binding_conversion_long_comparison_definition>(blofeld::infinite::s_s_cui_binding_conversion_long_comparison_definition& value)
{
	byteswap(value.comparison_operator);
	byteswap(value.comparison_value);
}

template<> void byteswap<blofeld::infinite::s_s_cui_property_binding_definition>(blofeld::infinite::s_s_cui_property_binding_definition& value)
{
	byteswap(value.flags);
	byteswap(value.conversion_function);
	byteswap(value.source_component_typename);
	byteswap(value.source_component_id);
	byteswap(value.source_component_name);
	byteswap(value.source_property_name);
	byteswap(value.target_component_id);
	byteswap(value.target_component_name);
	byteswap(value.target_property_name);
	byteswap(value.binding_conversion_long_comparison_block);
}

template<> void byteswap<blofeld::infinite::s_s_cui_static_data_column_definition>(blofeld::infinite::s_s_cui_static_data_column_definition& value)
{
	byteswap(value.name);
	byteswap(value.type);
}

template<> void byteswap<blofeld::infinite::s_s_cui_static_data>(blofeld::infinite::s_s_cui_static_data& value)
{
	byteswap(value.columns_block);
	byteswap(value.rows_block);
}

template<> void byteswap<blofeld::infinite::s_s_cui_static_data_definition>(blofeld::infinite::s_s_cui_static_data_definition& value)
{
	byteswap(value.definition_id);
	byteswap(value.name);
	byteswap(value.mock_data_for_component);
	byteswap(value.static_data);
}

template<> void byteswap<blofeld::infinite::s_s_cui_expression_step_definition>(blofeld::infinite::s_s_cui_expression_step_definition& value)
{
	byteswap(value.step_type);
	byteswap(value._operator);
	byteswap(value.variable);
	byteswap(value.value);
	byteswap(value.string_id_value);
}

template<> void byteswap<blofeld::infinite::s_s_cui_expression_definition>(blofeld::infinite::s_s_cui_expression_definition& value)
{
	byteswap(value.expression_id);
	byteswap(value.name);
	byteswap(value.expression_text);
	byteswap(value.steps_block);
}

template<> void byteswap<blofeld::infinite::s_s_cuivisualstatedefinition>(blofeld::infinite::s_s_cuivisualstatedefinition& value)
{
	byteswap(value.visual_state_id);
	byteswap(value.trigger_binding$2);
	byteswap(value.animation$2);
}

template<> void byteswap<blofeld::infinite::s_s_cuivisualstategroupdefinition>(blofeld::infinite::s_s_cuivisualstategroupdefinition& value)
{
	byteswap(value.name);
	byteswap(value.visual_state_group_id);
	byteswap(value.context_component_id);
	byteswap(value.visual_states_block);
}

template<> void byteswap<blofeld::infinite::s_telemetryblock>(blofeld::infinite::s_telemetryblock& value)
{
	byteswap(value.should_track_telemetry);
	byteswap(value.telemetry_category_name);
	byteswap(value.telemetry_sub_category_name);
}

template<> void byteswap<blofeld::infinite::s_cuisystemdefinition>(blofeld::infinite::s_cuisystemdefinition& value)
{
	byteswap(value.template_instantiations_block);
	byteswap(value.components_block);
	byteswap(value.component_indices_block);
	byteswap(value.do_not_create_list_block);
	byteswap(value.overlays_block);
	byteswap(value.overlays_editor_only_block);
	byteswap(value.property_bindings_block);
	byteswap(value.static_data_tables_block);
	byteswap(value.expressions_block);
	byteswap(value.visual_state_groups_block);
	byteswap(value.visual_state_component_lookup_block);
	byteswap(value.sample_data_tag_path);
	byteswap(value.telemetry_data);
	byteswap(value.layout_type);
}

template<> void byteswap<blofeld::infinite::s_cuiscreendefinition>(blofeld::infinite::s_cuiscreendefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.string_references_block);
	byteswap(value.resource_references_block);
	byteswap(value.system);
	byteswap(value.script);
	byteswap(value.name);
	byteswap(value.object_count_budget);
}

template<> void byteswap<blofeld::infinite::s_s_cui_static_data_group_definition>(blofeld::infinite::s_s_cui_static_data_group_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.static_data);
}

template<> void byteswap<blofeld::infinite::s_coatingparameterregisterinfo>(blofeld::infinite::s_coatingparameterregisterinfo& value)
{
	byteswap(value.register_offset);
	byteswap(value.register_size);
}

template<> void byteswap<blofeld::infinite::s_coatingmaterialtemplatereference>(blofeld::infinite::s_coatingmaterialtemplatereference& value)
{
	byteswap(value.coatingmaterialtemplate);
	byteswap(value.supported_coating_features_flags);
	byteswap(value.parameterregisterinfo_block);
}

template<> void byteswap<blofeld::infinite::s_coatingmaterialsettag>(blofeld::infinite::s_coatingmaterialsettag& value)
{
	byteswap(value.anytag);
	byteswap(value.defaultmaterial_block);
	byteswap(value.perlayeremissivematerial_block);
	byteswap(value.m_pipelinestates);
}

template<> void byteswap<blofeld::infinite::s_i343malleablepropertybasefloatstructdefinition>(blofeld::infinite::s_i343malleablepropertybasefloatstructdefinition& value)
{
	byteswap(value.base_value);
	byteswap(value.value_bounds);
}

template<> void byteswap<blofeld::infinite::s_i343contenttagsrechargespeedmultipliercurve>(blofeld::infinite::s_i343contenttagsrechargespeedmultipliercurve& value)
{
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_i343contenttagssegmentedrechargefraction>(blofeld::infinite::s_i343contenttagssegmentedrechargefraction& value)
{
	byteswap(value.vitality_percentage);
}

template<> void byteswap<blofeld::infinite::s_i343contenttagsvariantspecification>(blofeld::infinite::s_i343contenttagsvariantspecification& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_i343contenttagsregiontransition>(blofeld::infinite::s_i343contenttagsregiontransition& value)
{
	byteswap(value.region_name);
	byteswap(value.next_state);
}

template<> void byteswap<blofeld::infinite::s_i343contenttagsdamagetransfer>(blofeld::infinite::s_i343contenttagsdamagetransfer& value)
{
	byteswap(value.flags);
	byteswap(value.transfer_amount);
	byteswap(value.transfer_function);
	byteswap(value.damage_section);
	byteswap(value.seat_label);
}

template<> void byteswap<blofeld::infinite::s_i343contenttagsejectionseat>(blofeld::infinite::s_i343contenttagsejectionseat& value)
{
	byteswap(value.seat_label);
}

template<> void byteswap<blofeld::infinite::s_i343contenttagsinstantresponse>(blofeld::infinite::s_i343contenttagsinstantresponse& value)
{
	byteswap(value.label);
	byteswap(value.flags);
	byteswap(value.flags2);
	byteswap(value.included_variants_block);
	byteswap(value.excluded_variants_block);
	byteswap(value.damage_threshold);
	byteswap(value.minimum_damage_threshold);
	byteswap(value.skip_fraction);
	byteswap(value.forced_hard_ping_anim_);
	byteswap(value.generic_effect);
	byteswap(value.generic_effect_marker_name);
	byteswap(value.specific_effect);
	byteswap(value.specific_effect_marker_name);
	byteswap(value.damage_effect);
	byteswap(value.damage_effect_marker_name);
	byteswap(value.looping_effect);
	byteswap(value.ray_cast_marker);
	byteswap(value.ray_cast_length);
	byteswap(value.visual_material_effects);
	byteswap(value.sound_material_effects);
	byteswap(value.fallback_effect);
	byteswap(value.fallback_effect_marker);
	byteswap(value.region_transitions_block);
	byteswap(value.response_damage_transfers_block);
	byteswap(value.custom_response_behavior);
	byteswap(value.custom_response_label);
	byteswap(value.response_delay);
	byteswap(value.delay_effect);
	byteswap(value.constraint_or_group_name);
	byteswap(value.constraint_damage_type);
	byteswap(value.ai_dialog_event);
	byteswap(value.ejection_seats_block);
}

template<> void byteswap<blofeld::infinite::s_i343contenttagsdamagesection>(blofeld::infinite::s_i343contenttagsdamagesection& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.damage_part);
	byteswap(value.maximum_vitality_percentage);
	byteswap(value.shield_material_name);
	byteswap(value.minimum_stun_damage);
	byteswap(value.stun_duration);
	byteswap(value.recharge_time);
	byteswap(value.recharge_speed_base_scalar);
	byteswap(value.recharge_speed_curve_block);
	byteswap(value.recharge_fractions_block);
	byteswap(value.recharging_effect);
	byteswap(value.pre_recharge_effect_warn_time);
	byteswap(value.pre_recharge_effect);
	byteswap(value.pre_recharge_effect_marker);
	byteswap(value.pre_recharge_abort_effect);
	byteswap(value.pre_recharge_abort_effect_marker);
	byteswap(value.overcharge_time);
	byteswap(value.overcharge_fraction);
	byteswap(value.pre_decay_time);
	byteswap(value.decay_time);
	byteswap(value._3rd_person_impact_generator);
	byteswap(value._1st_person_impact_generator);
	byteswap(value.instant_responses_block);
	byteswap(value.section_damage_transfers_block);
}

template<> void byteswap<blofeld::infinite::s_i343contenttagsdamageconstraintinfo>(blofeld::infinite::s_i343contenttagsdamageconstraintinfo& value)
{
	byteswap(value.damage_constraint_name);
	byteswap(value.damage_constraint_group_name);
	byteswap(value.group_probability_scale);
}

template<> void byteswap<blofeld::infinite::s_i343contenttagsdamageinfo>(blofeld::infinite::s_i343contenttagsdamageinfo& value)
{
	byteswap(value.body_vitality_temp);
	byteswap(value.flags);
	byteswap(value.indirect_material_name);
	byteswap(value.indirect_damage_section);
	byteswap(value.shielded_state_damage_section);
	byteswap(value.damage_sections_block);
	byteswap(value.damage_constraints_block);
}

template<> void byteswap<blofeld::infinite::s_i343contenttagsmodeltarget>(blofeld::infinite::s_i343contenttagsmodeltarget& value)
{
	byteswap(value.flags);
	byteswap(value.type);
	byteswap(value.category);
	byteswap(value.marker_name);
	byteswap(value.radius);
	byteswap(value.cone_angle);
	byteswap(value.damage_section);
	byteswap(value.variant);
	byteswap(value.aim_assist_magnetism_scale);
	byteswap(value.ai_selection_priority_scale);
	byteswap(value.aoe_exclusion_radius);
	byteswap(value.lock_on_distance);
	byteswap(value.tracking_type);
}

template<> void byteswap<blofeld::infinite::s_damagetag>(blofeld::infinite::s_damagetag& value)
{
	byteswap(value.anytag);
	byteswap(value.damage_info);
	byteswap(value.model_targets_block);
}

template<> void byteswap<blofeld::infinite::s_lodtransition>(blofeld::infinite::s_lodtransition& value)
{
	byteswap(value.transition_start);
	byteswap(value.transition_end);
}

template<> void byteswap<blofeld::infinite::s_lodparameters>(blofeld::infinite::s_lodparameters& value)
{
	byteswap(value.lod_transitions_block);
	byteswap(value.max_shadow_distance);
}

template<> void byteswap<blofeld::infinite::s_s_throttle_spec_control_setting_float>(blofeld::infinite::s_s_throttle_spec_control_setting_float& value)
{
	byteswap(value.very_low);
	byteswap(value.low);
	byteswap(value.medium);
	byteswap(value.high);
	byteswap(value.ultra);
	byteswap(value._2_player_splitscreen);
	byteswap(value._3_player_splitscreen);
	byteswap(value._4_player_splitscreen);
}

template<> void byteswap<blofeld::infinite::s_s_basic_spec_control_setting_float>(blofeld::infinite::s_s_basic_spec_control_setting_float& value)
{
	byteswap(value.very_low);
	byteswap(value.low);
	byteswap(value.medium);
	byteswap(value.high);
	byteswap(value.ultra);
	byteswap(value._2_player_splitscreen);
	byteswap(value._3_player_splitscreen);
	byteswap(value._4_player_splitscreen);
}

template<> void byteswap<blofeld::infinite::s_parameteroverride>(blofeld::infinite::s_parameteroverride& value)
{
	byteswap(value.name);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_decoratorvariant>(blofeld::infinite::s_decoratorvariant& value)
{
	byteswap(value.visual_region_name);
	byteswap(value.geometry_name);
	byteswap(value.preset_name);
	byteswap(value.alignment);
	byteswap(value.random_rotate);
	byteswap(value.tint_scale0);
	byteswap(value.tint_scale1);
	byteswap(value.tint_scale2);
	byteswap(value.parameter_overrides_block);
}

template<> void byteswap<blofeld::infinite::s_decoratorassettag>(blofeld::infinite::s_decoratorassettag& value)
{
	byteswap(value.anytag);
	byteswap(value.asset);
	byteswap(value.settings);
	byteswap(value.lod_settings);
	byteswap(value.first_lod_fade_factor);
	byteswap(value.last_lod_fade_factor);
	byteswap(value.last_lod_designation);
	byteswap(value.lod_multiplier);
	byteswap(value.distance_dither_start);
	byteswap(value.distance_dither_transition_width);
	byteswap(value.distance_dither_density_multiplier);
	byteswap(value.terrain_albedo_distance);
	byteswap(value.terrain_normal_distance);
	byteswap(value.variants_block);
	byteswap(value.reference_to_generated_decorator);
	byteswap(value.loaderror);
}

template<> void byteswap<blofeld::infinite::s_dispositioncolorentry>(blofeld::infinite::s_dispositioncolorentry& value)
{
	byteswap(value.name);
	byteswap(value.in_world_color);
	byteswap(value.outline_color);
	byteswap(value.fx_color);
	byteswap(value.bitmap_color);
	byteswap(value.kill_feed_color);
	byteswap(value.motion_tracker_color);
	byteswap(value.text_color);
	byteswap(value.navpoint_color);
}

template<> void byteswap<blofeld::infinite::s_dispositioncolorgroupdefinition>(blofeld::infinite::s_dispositioncolorgroupdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.enemy_colors_block);
	byteswap(value.friendly_colors_block);
	byteswap(value.fireteam_colors_block);
	byteswap(value.neutral_colors);
	byteswap(value.self_colors);
}

template<> void byteswap<blofeld::infinite::s_i343decoratorsdecoratorpaletteentry>(blofeld::infinite::s_i343decoratorsdecoratorpaletteentry& value)
{
	byteswap(value.asset);
	byteswap(value.weight);
}

template<> void byteswap<blofeld::infinite::s_i343decoratorsdecoratorpalette>(blofeld::infinite::s_i343decoratorsdecoratorpalette& value)
{
	byteswap(value.name);
	byteswap(value.entries_block);
}

template<> void byteswap<blofeld::infinite::s_i343decoratorsdecoratorpalettetag>(blofeld::infinite::s_i343decoratorsdecoratorpalettetag& value)
{
	byteswap(value.anytag);
	byteswap(value.palettes_block);
}

template<> void byteswap<blofeld::infinite::s_i343decoratorsdecoratorruntimetaglodparameters>(blofeld::infinite::s_i343decoratorsdecoratorruntimetaglodparameters& value)
{
	byteswap(value.lod);
	byteswap(value.lod_features);
	byteswap(value.lod_start_distance);
	byteswap(value.lod_end_distance);
}

template<> void byteswap<blofeld::infinite::s_i343decoratorsdecoratorruntimetagvariantsettings>(blofeld::infinite::s_i343decoratorsdecoratorruntimetagvariantsettings& value)
{
	byteswap(value.mesh_index);
	byteswap(value.placement_flags);
	byteswap(value.special_align_axis);
	byteswap(value.normalized_placement_weight);
	byteswap(value.min_separation);
	byteswap(value.min_block_size);
	byteswap(value.max_block_size);
	byteswap(value.max_block_items);
	byteswap(value.scale_min);
	byteswap(value.scale_max);
	byteswap(value.tilt_min);
	byteswap(value.tilt_max);
	byteswap(value.stiffness_min);
	byteswap(value.stiffness_max);
	byteswap(value.ground_tint_min);
	byteswap(value.ground_tint_max);
	byteswap(value.hover_min);
	byteswap(value.hover_max);
	byteswap(value.roughness_min);
	byteswap(value.roughness_max);
	byteswap(value.slope_cos_min);
	byteswap(value.slope_cos_max);
	byteswap(value.rotate_cos_min);
	byteswap(value.rotate_cos_max);
	byteswap(value.color_0);
	byteswap(value.color_1);
	byteswap(value.color_2);
}

template<> void byteswap<blofeld::infinite::s_geometry_material>(blofeld::infinite::s_geometry_material& value)
{
	byteswap(value.material);
}

template<> void byteswap<blofeld::infinite::s_meshimportinfo>(blofeld::infinite::s_meshimportinfo& value)
{
	byteswap(value.crc);
	byteswap(value.position_bounds_0);
	byteswap(value.position_bounds_1);
	byteswap(value.texcoord_bounds_0);
	byteswap(value.texcoord_bounds_1);
}

template<> void byteswap<blofeld::infinite::s_geometrynodeindex>(blofeld::infinite::s_geometrynodeindex& value)
{
	byteswap(value.node_index);
}

template<> void byteswap<blofeld::infinite::s_geometrynodeweight>(blofeld::infinite::s_geometrynodeweight& value)
{
	byteswap(value.node_weight);
}

template<> void byteswap<blofeld::infinite::s_rawvertex>(blofeld::infinite::s_rawvertex& value)
{
	byteswap(value.position);
	byteswap(value.texcoord);
	byteswap(value.normal);
	byteswap(value.binormal);
	byteswap(value.tangent);
	byteswap(value.lightmap_texcoord);
	byteswap(value.node_indices);
	byteswap(value.node_weights);
	byteswap(value.vertex_color);
	byteswap(value.texcoord1);
	byteswap(value.dual_quat_weight);
	byteswap(value.vertex_alpha);
	byteswap(value.tangent_uv2);
	byteswap(value.texcoord2);
	byteswap(value.tangent_uv3);
}

template<> void byteswap<blofeld::infinite::s_wordindex>(blofeld::infinite::s_wordindex& value)
{
	byteswap(value._word);
}

template<> void byteswap<blofeld::infinite::s_dwordindex>(blofeld::infinite::s_dwordindex& value)
{
	byteswap(value._dword);
}

template<> void byteswap<blofeld::infinite::s_s_raw_water_append>(blofeld::infinite::s_s_raw_water_append& value)
{
	byteswap(value.base_texcoord);
}

template<> void byteswap<blofeld::infinite::s_s_raw_water_data>(blofeld::infinite::s_s_raw_water_data& value)
{
	byteswap(value.raw_water_indices_block);
	byteswap(value.raw_water_vertices_block);
}

template<> void byteswap<blofeld::infinite::s_rawblendshapevertex>(blofeld::infinite::s_rawblendshapevertex& value)
{
	byteswap(value.position);
	byteswap(value.normal);
	byteswap(value.tension_and_ambient_occlusion);
	byteswap(value.target_id);
}

template<> void byteswap<blofeld::infinite::s_rawtensionedge>(blofeld::infinite::s_rawtensionedge& value)
{
	byteswap(value.start_vertex_index);
	byteswap(value.end_vertex_index);
	byteswap(value.edge_rest_length);
}

template<> void byteswap<blofeld::infinite::s_rawtriangleedgeindexinfo>(blofeld::infinite::s_rawtriangleedgeindexinfo& value)
{
	byteswap(value.triangle_and_edge_index_pos);
	byteswap(value.encoded_triangle_and_edge_size);
}

template<> void byteswap<blofeld::infinite::s_s_per_mesh_raw_data>(blofeld::infinite::s_s_per_mesh_raw_data& value)
{
	byteswap(value.raw_vertices_block);
	byteswap(value.raw_indices_block);
	byteswap(value.raw_indices32_block);
	byteswap(value.raw_water_data_block);
	byteswap(value.raw_blendshapes_block);
	byteswap(value.raw_blendshapes_indices_block);
	byteswap(value.raw_tension_edges_block);
	byteswap(value.raw_blendshapes_triangle_and_edge_indices_block);
	byteswap(value.raw_blendshapes_triangle_and_edge_index_info_block);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_positioningnodeweight>(blofeld::infinite::s_positioningnodeweight& value)
{
	byteswap(value.node_weight);
}

template<> void byteswap<blofeld::infinite::s_s_positioning>(blofeld::infinite::s_s_positioning& value)
{
	byteswap(value.plane);
	byteswap(value.position);
	byteswap(value.radius);
	byteswap(value.node_indices);
	byteswap(value.node_weights);
}

template<> void byteswap<blofeld::infinite::s_s_part>(blofeld::infinite::s_s_part& value)
{
	byteswap(value.material_index);
	byteswap(value.transparent_sorting_index);
	byteswap(value.index_start);
	byteswap(value.index_count);
	byteswap(value.permeshpartconstantsoffset);
	byteswap(value.part_type);
	byteswap(value.part_flags);
	byteswap(value.budget_vertex_count);
}

template<> void byteswap<blofeld::infinite::s_s_subpart>(blofeld::infinite::s_s_subpart& value)
{
	byteswap(value.index_start);
	byteswap(value.index_count);
	byteswap(value.part_index);
	byteswap(value.budget_vertex_count);
}

template<> void byteswap<blofeld::infinite::s_materialstreamingscale>(blofeld::infinite::s_materialstreamingscale& value)
{
	byteswap(value.material_index);
	byteswap(value.material_scale);
}

template<> void byteswap<blofeld::infinite::s_lodrenderdatavertexbufferindex>(blofeld::infinite::s_lodrenderdatavertexbufferindex& value)
{
	byteswap(value.vertex_buffer_index);
}

template<> void byteswap<blofeld::infinite::s_lodrenderdata>(blofeld::infinite::s_lodrenderdata& value)
{
	byteswap(value.per_mesh_temporary_block);
	byteswap(value.part_sorting_position_block);
	byteswap(value.parts_block);
	byteswap(value.subparts_block);
	byteswap(value.material_streaming_scale_block);
	byteswap(value.vertex_buffer_indices);
	byteswap(value.index_buffer_index);
	byteswap(value.lod_flags);
	byteswap(value.lod_render_flags);
}

template<> void byteswap<blofeld::infinite::s_meshvertexkey>(blofeld::infinite::s_meshvertexkey& value)
{
	byteswap(value.key1);
	byteswap(value.key2);
}

template<> void byteswap<blofeld::infinite::s_s_mesh>(blofeld::infinite::s_s_mesh& value)
{
	byteswap(value.lod_render_data_block);
	byteswap(value.mesh_flags);
	byteswap(value.rigid_node_index);
	byteswap(value.vertex_type);
	byteswap(value.use_dual_quat);
	byteswap(value.index_buffer_type);
	byteswap(value.pca_mesh_index);
	byteswap(value.vertex_keys_block);
	byteswap(value.clone_index);
	byteswap(value.optional_lod_volume_index);
	byteswap(value.procedural_deformation_remap_table);
	byteswap(value.lod_state_cache_slot);
}

template<> void byteswap<blofeld::infinite::s_pcameshindex>(blofeld::infinite::s_pcameshindex& value)
{
	byteswap(value.mesh_index);
}

template<> void byteswap<blofeld::infinite::s_s_compression_info>(blofeld::infinite::s_s_compression_info& value)
{
	byteswap(value.compression_flags);
	byteswap(value.position_bounds_0);
	byteswap(value.position_bounds_1);
	byteswap(value.texcoord_bounds_0);
	byteswap(value.texcoord_bounds_1);
	byteswap(value.texcoord_bounds2_0);
	byteswap(value.texcoord_bounds2_1);
	byteswap(value.texcoord_bounds3_0);
	byteswap(value.texcoord_bounds3_1);
	byteswap(value.unused0);
	byteswap(value.unused1);
}

template<> void byteswap<blofeld::infinite::s_nodeindexstruct>(blofeld::infinite::s_nodeindexstruct& value)
{
	byteswap(value.node_index);
}

template<> void byteswap<blofeld::infinite::s_s_per_mesh_node_map>(blofeld::infinite::s_s_per_mesh_node_map& value)
{
	byteswap(value.node_map_block);
}

template<> void byteswap<blofeld::infinite::s_rendergeometryanimatedmeshref>(blofeld::infinite::s_rendergeometryanimatedmeshref& value)
{
	byteswap(value.animated_mesh_tag_reference);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_s_render_geometry_lod_volume>(blofeld::infinite::s_s_render_geometry_lod_volume& value)
{
	byteswap(value.position_bounds_0);
	byteswap(value.position_bounds_1);
	byteswap(value.position_data_block);
}

template<> void byteswap<blofeld::infinite::s_rendergeometrymeshpackageresourcegroup>(blofeld::infinite::s_rendergeometrymeshpackageresourcegroup& value)
{
	byteswap(value.mesh_resource);
}

template<> void byteswap<blofeld::infinite::s_rendergeometrymeshpackageresourcelookup>(blofeld::infinite::s_rendergeometrymeshpackageresourcelookup& value)
{
	byteswap(value.resource_group_index);
	byteswap(value.group_item_index);
}

template<> void byteswap<blofeld::infinite::s_rendergeometrymeshpackage>(blofeld::infinite::s_rendergeometrymeshpackage& value)
{
	byteswap(value.flags);
	byteswap(value.mesh_resource_packing_policy);
	byteswap(value.total_index_buffer_count);
	byteswap(value.total_vertex_buffer_count);
	byteswap(value.mesh_resource_groups_block);
	byteswap(value.index_resource_look_up_block);
	byteswap(value.vertex_resource_look_up_block);
}

template<> void byteswap<blofeld::infinite::s_s_blendshape_compression_info>(blofeld::infinite::s_s_blendshape_compression_info& value)
{
	byteswap(value.position_scale);
	byteswap(value.position_offset);
	byteswap(value.normal_scale);
	byteswap(value.normal_offset);
	byteswap(value.raw_target_hash_name_block);
}

template<> void byteswap<blofeld::infinite::s_rendergeometrydeformationparameter>(blofeld::infinite::s_rendergeometrydeformationparameter& value)
{
	byteswap(value.parameter_name);
	byteswap(value.parameter_mode);
	byteswap(value.constant_input);
}

template<> void byteswap<blofeld::infinite::s_rendergeometryproceduraldeformation>(blofeld::infinite::s_rendergeometryproceduraldeformation& value)
{
	byteswap(value.parameter_list_block);
	byteswap(value.procedural_deformation_function_name);
}

template<> void byteswap<blofeld::infinite::s_rendergeometryproceduralremaptable>(blofeld::infinite::s_rendergeometryproceduralremaptable& value)
{
	byteswap(value.procedural_remap_table_block);
}

template<> void byteswap<blofeld::infinite::s_deformationparameterdefaultvalue>(blofeld::infinite::s_deformationparameterdefaultvalue& value)
{
	byteswap(value.parameter_name);
	byteswap(value.parameter_default_value);
}

template<> void byteswap<blofeld::infinite::s_s_render_geometry>(blofeld::infinite::s_s_render_geometry& value)
{
	byteswap(value.runtime_flags);
	byteswap(value.meshes_import_info_block);
	byteswap(value.meshes_block);
	byteswap(value.pca_mesh_indices_block);
	byteswap(value.compression_info_block);
	byteswap(value.per_mesh_node_map_block);
	byteswap(value.optional_animated_mesh_tag_references_block);
	byteswap(value.optional_lod_volumes_data_block);
	byteswap(value.mesh_package);
	byteswap(value.blendshape_compression_info_block);
	byteswap(value.blendshape_procedural_deformation_function_list_block);
	byteswap(value.procedural_deformation_function_remap_table_list_block);
	byteswap(value.deformation_parameter_default_value_table_from_skeleton_block);
	byteswap(value.permeshpartconstantbuffer);
}

template<> void byteswap<blofeld::infinite::s_materialconstant>(blofeld::infinite::s_materialconstant& value)
{
	byteswap(value._register);
}

template<> void byteswap<blofeld::infinite::s_i343decoratorsdecoratorruntimetag>(blofeld::infinite::s_i343decoratorsdecoratorruntimetag& value)
{
	byteswap(value.anytag);
	byteswap(value.first_lod_fadeout_factor);
	byteswap(value.last_lod_fadeout_factor);
	byteswap(value.max_shadow_range);
	byteswap(value.max_render_range);
	byteswap(value.lod_multiplier);
	byteswap(value.lod_transitions_block);
	byteswap(value.distance_dither_start);
	byteswap(value.distance_dither_transition_width);
	byteswap(value.distance_dither_density_multiplier);
	byteswap(value.settings_block);
	byteswap(value.terrain_albedo_distance);
	byteswap(value.terrain_normal_distance);
	byteswap(value.materials_block);
	byteswap(value.render_geometry);
	byteswap(value.bounding_spheres_block);
	byteswap(value.m_pipelinestates);
}

template<> void byteswap<blofeld::infinite::s_decoratorcontentparameters>(blofeld::infinite::s_decoratorcontentparameters& value)
{
	byteswap(value.alignment);
	byteswap(value.random_rotate);
	byteswap(value.placement_weight);
	byteswap(value.separation_min);
	byteswap(value.scale_min);
	byteswap(value.scale_max);
	byteswap(value.tilt_min);
	byteswap(value.tilt_max);
	byteswap(value.stiffness_min);
	byteswap(value.stiffness_max);
	byteswap(value.ground_tint_min);
	byteswap(value.ground_tint_max);
	byteswap(value.hover_min);
	byteswap(value.hover_max);
	byteswap(value.roughness_min);
	byteswap(value.roughness_max);
	byteswap(value.slope_min);
	byteswap(value.slope_max);
	byteswap(value.rotate_min);
	byteswap(value.rotate_max);
}

template<> void byteswap<blofeld::infinite::s_decoratorpreset>(blofeld::infinite::s_decoratorpreset& value)
{
	byteswap(value.name);
	byteswap(value.parameters);
}

template<> void byteswap<blofeld::infinite::s_decoratorsettingstag>(blofeld::infinite::s_decoratorsettingstag& value)
{
	byteswap(value.anytag);
	byteswap(value.lod_settings);
	byteswap(value.presets_block);
}

template<> void byteswap<blofeld::infinite::s_materialshaderfunctionparameter>(blofeld::infinite::s_materialshaderfunctionparameter& value)
{
	byteswap(value.type);
	byteswap(value.input_name);
	byteswap(value.range_name);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.time_period);
	byteswap(value.function$2);
}

template<> void byteswap<blofeld::infinite::s_shaderparameter>(blofeld::infinite::s_shaderparameter& value)
{
	byteswap(value.parameter_name);
	byteswap(value.parameter_type);
	byteswap(value.bitmap);
	byteswap(value.color);
	byteswap(value._real);
	byteswap(value.vector);
	byteswap(value.int_bool);
	byteswap(value._string);
	byteswap(value.bitmap_flags);
	byteswap(value.bitmap_filter_mode);
	byteswap(value.bitmap_address_mode);
	byteswap(value.bitmap_address_mode_x);
	byteswap(value.bitmap_address_mode_y);
	byteswap(value.bitmap_extern_mode);
	byteswap(value.bitmap_min_mipmap);
	byteswap(value.bitmap_max_mipmap);
	byteswap(value.bitmap_blur_and_sharpen);
	byteswap(value.parameter_flags);
	byteswap(value.render_phases_used);
	byteswap(value.shader_types_used);
	byteswap(value.function_parameters_block);
	byteswap(value.register_offset);
	byteswap(value.register_size);
	byteswap(value.bitmap_extern_index);
}

template<> void byteswap<blofeld::infinite::s_materialpostprocesstexture>(blofeld::infinite::s_materialpostprocesstexture& value)
{
	byteswap(value.bitmap_reference);
	byteswap(value.render_phase_mask);
	byteswap(value.shader_stage_mask);
	byteswap(value.frame_index_parameter);
	byteswap(value.sampler_index);
	byteswap(value.transform_register_index);
	byteswap(value.bindless_parameter_register_offset);
	byteswap(value.extern_texture_mode);
	byteswap(value.extern_texture_index);
	byteswap(value.m_samplerstateview);
}

template<> void byteswap<blofeld::infinite::s_materialfunctionparameter>(blofeld::infinite::s_materialfunctionparameter& value)
{
	byteswap(value.function_index);
	byteswap(value.register_offset);
	byteswap(value.parameter_group);
	byteswap(value.render_phase_mask);
}

template<> void byteswap<blofeld::infinite::s_materialexternparameter>(blofeld::infinite::s_materialexternparameter& value)
{
	byteswap(value.extern_index);
	byteswap(value.extern_offset);
	byteswap(value.parameter_group);
	byteswap(value.bindless_parameter_register_offset);
	byteswap(value.render_phase_mask);
}

template<> void byteswap<blofeld::infinite::s_materialpostprocessdefinitionruntimequeryableproperty>(blofeld::infinite::s_materialpostprocessdefinitionruntimequeryableproperty& value)
{
	byteswap(value.index);
}

template<> void byteswap<blofeld::infinite::s_materialpostprocessdefinition>(blofeld::infinite::s_materialpostprocessdefinition& value)
{
	byteswap(value.textures_block);
	byteswap(value.textures_to_clear);
	byteswap(value.functions_block);
	byteswap(value.function_parameters_block);
	byteswap(value.extern_parameters_block);
	byteswap(value.alpha_blend_mode);
	byteswap(value.runtime_flags);
	byteswap(value.flags);
	byteswap(value.material_constants_block);
	byteswap(value.alternate_constants_block);
	byteswap(value.materialconstantbuffer);
	byteswap(value.alternateconstantbuffer);
	byteswap(value.material_constant_shader_stage_mask);
	byteswap(value.runtime_queryable_properties_table);
}

template<> void byteswap<blofeld::infinite::s_material>(blofeld::infinite::s_material& value)
{
	byteswap(value.material_shader);
	byteswap(value.material_parameters_block);
	byteswap(value.postprocess_definition_block);
	byteswap(value.physics_material_name);
	byteswap(value.physics_material_name_2);
	byteswap(value.physics_material_name_3);
	byteswap(value.physics_material_name_4);
	byteswap(value.sort_offset);
	byteswap(value.alpha_blend_mode);
	byteswap(value.sort_layer);
	byteswap(value.flags);
	byteswap(value.render_flags);
	byteswap(value.taa_mask_threshold_start);
	byteswap(value.taa_mask_threshold_end);
}

template<> void byteswap<blofeld::infinite::s_c_decal_definition>(blofeld::infinite::s_c_decal_definition& value)
{
	byteswap(value.albedo_bitmap_reference);
	byteswap(value.normal_bitmap_reference);
	byteswap(value.control_bitmap_reference);
	byteswap(value.emissive_bitmap_reference);
	byteswap(value.decal_name);
	byteswap(value.flags);
	byteswap(value.actual_material);
	byteswap(value.radius);
	byteswap(value.lifespan);
	byteswap(value.clamp_angle);
	byteswap(value.cull_angle);
	byteswap(value.depth_bias);
	byteswap(value.runtime_bitmap_aspect);
	byteswap(value.m_pipelinestates);
}

template<> void byteswap<blofeld::infinite::s_c_decal_system_definition>(blofeld::infinite::s_c_decal_system_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.material_shader_fade_time);
	byteswap(value.decal_scale_override);
	byteswap(value.random_sprite_index_bounds);
	byteswap(value.decals_block);
	byteswap(value.runtime_max_radius);
	byteswap(value.decaldefinitionconstants);
}

template<> void byteswap<blofeld::infinite::s_i343damagedamageeffectsoundsdefinition>(blofeld::infinite::s_i343damagedamageeffectsoundsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.dealt_cooldown);
	byteswap(value.received_cooldown);
	byteswap(value.dealt_normal_hit);
	byteswap(value.dealt_weakpoint_hit);
	byteswap(value.dealt_stuck);
	byteswap(value.dealt_ineffective_hit);
	byteswap(value.dealt_vehicle_hit);
	byteswap(value.dealt_vehicle_weakpoint_hit);
	byteswap(value.dealt_vehicle_stuck);
	byteswap(value.dealt_friendly_hit);
	byteswap(value.dealt_lethal_hit);
	byteswap(value.dealt_lethal_weakpoint_hit);
	byteswap(value.dealt_aoe_hit);
	byteswap(value.dealt_aoe_vehicle_hit);
	byteswap(value.dealt_vehicle_passenger_hit);
	byteswap(value.dealt_shield_break);
	byteswap(value.model_hit);
	byteswap(value.dealt_lethal_minor);
	byteswap(value.dealt_boss_hit);
	byteswap(value.received_normal_hit);
	byteswap(value.received_weakpoint_hit);
	byteswap(value.received_stuck);
	byteswap(value.received_ineffective_hit);
	byteswap(value.received_vehicle_hit);
	byteswap(value.received_vehicle_weakpoint_hit);
	byteswap(value.received_vehicle_stuck);
	byteswap(value.received_friendly_hit);
	byteswap(value.received_lethal_hit);
	byteswap(value.received_lethal_weakpoint_hit);
	byteswap(value.received_aoe_hit);
	byteswap(value.received_aoe_vehicle_hit);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomdarkroomlightingspecreferencedefinition>(blofeld::infinite::s_i343darkroomdarkroomlightingspecreferencedefinition& value)
{
	byteswap(value.lighting_specs);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomdarkroomassetspecreferencedefinition>(blofeld::infinite::s_i343darkroomdarkroomassetspecreferencedefinition& value)
{
	byteswap(value.asset_spec);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomdarkroomcameraspecreferencedefinition>(blofeld::infinite::s_i343darkroomdarkroomcameraspecreferencedefinition& value)
{
	byteswap(value.camera_spec);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomdarkroomrenderspecreferencedefinition>(blofeld::infinite::s_i343darkroomdarkroomrenderspecreferencedefinition& value)
{
	byteswap(value.render_spec);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomdarkroomscreenshotspecreferencedefinition>(blofeld::infinite::s_i343darkroomdarkroomscreenshotspecreferencedefinition& value)
{
	byteswap(value.screenshot_spec);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomdarkroomanimationspecreferencedefinition>(blofeld::infinite::s_i343darkroomdarkroomanimationspecreferencedefinition& value)
{
	byteswap(value.animation_specs);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomdarkroomassemblydefinition>(blofeld::infinite::s_i343darkroomdarkroomassemblydefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.lighting_specs_block);
	byteswap(value.asset_specs_block);
	byteswap(value.camera_specs_block);
	byteswap(value.render_specs_block);
	byteswap(value.screenshot_specs_block);
	byteswap(value.animation_specs_block);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomassetspecdefinition>(blofeld::infinite::s_i343darkroomassetspecdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.assetspecflags);
	byteswap(value.object);
	byteswap(value.variant);
	byteswap(value.external_name);
	byteswap(value.configuration);
	byteswap(value.equipped_weapon);
	byteswap(value.weapon_scale);
	byteswap(value.inherit_transforms);
	byteswap(value.position);
	byteswap(value.rotation);
	byteswap(value.scale);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomcameraspecdefinition>(blofeld::infinite::s_i343darkroomcameraspecdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.composition);
	byteswap(value.field_of_view);
	byteswap(value.dof);
	byteswap(value.inherit_transforms);
	byteswap(value.position);
	byteswap(value.rotation);
	byteswap(value.worldposition);
	byteswap(value.worldrotation);
	byteswap(value.scale);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomlightingspecdefinition>(blofeld::infinite::s_i343darkroomlightingspecdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.level);
	byteswap(value.lighting_variant);
	byteswap(value.futurelightingrigfileordpk);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomanimationspecdefinition>(blofeld::infinite::s_i343darkroomanimationspecdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.animationfile);
	byteswap(value.animationvariation);
	byteswap(value.frames);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomrendersettingspassspecdefinition>(blofeld::infinite::s_i343darkroomrendersettingspassspecdefinition& value)
{
	byteswap(value.backgroundcolour);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomrendersettingsspecdefinition>(blofeld::infinite::s_i343darkroomrendersettingsspecdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.resolutionvariant);
	byteswap(value.renderingpasssequence_block);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomassemblyreferencedefinition>(blofeld::infinite::s_i343darkroomassemblyreferencedefinition& value)
{
	byteswap(value.assembly);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomshotlistdefinition>(blofeld::infinite::s_i343darkroomshotlistdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.shot_list_block);
	byteswap(value.screenshot_flags);
	byteswap(value.shot_pause_time);
}

template<> void byteswap<blofeld::infinite::s_i343darkroomscreenshotsettingsspecdefinition>(blofeld::infinite::s_i343darkroomscreenshotsettingsspecdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.uprezfactor);
	byteswap(value.outputdirectory);
	byteswap(value.nameprefix);
	byteswap(value.namesuffix);
	byteswap(value.namepadding);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_damage_response_directional_flash_definition>(blofeld::infinite::s_s_damage_response_directional_flash_definition& value)
{
	byteswap(value.indicator_duration);
	byteswap(value.flash_duration_);
	byteswap(value.fade_function);
	byteswap(value.center_size);
	byteswap(value.offscreen_size);
	byteswap(value.center_alpha);
	byteswap(value.offscreen_alpha);
	byteswap(value.inner_alpha);
	byteswap(value.outer_alpha);
	byteswap(value.flash_color);
	byteswap(value.arrow_color);
}

template<> void byteswap<blofeld::infinite::s_s_damage_response_motion_sensor_ping_definition>(blofeld::infinite::s_s_damage_response_motion_sensor_ping_definition& value)
{
	byteswap(value.ping_duration);
	byteswap(value.ping_scale);
}

template<> void byteswap<blofeld::infinite::s_s_damage_response_global_sound_effect_definition>(blofeld::infinite::s_s_damage_response_global_sound_effect_definition& value)
{
	byteswap(value.effect_name);
	byteswap(value.scale____duration);
}

template<> void byteswap<blofeld::infinite::s_s_damage_response_class_definition>(blofeld::infinite::s_s_damage_response_class_definition& value)
{
	byteswap(value.type);
	byteswap(value.flags);
	byteswap(value.directional_flash$2);
	byteswap(value.motion_sensor_ping$2);
	byteswap(value.rumble$2);
	byteswap(value.rumble_descope);
	byteswap(value.camera_shake);
	byteswap(value.camera_shake_zoomed);
	byteswap(value.camera_shake_descope);
	byteswap(value.flinch_impulse);
	byteswap(value.flinch_impulse_ads);
	byteswap(value.flinch_impulse_descope);
	byteswap(value.simulated_input$2);
	byteswap(value.simulated_input_zoomed_);
	byteswap(value.simulated_input_descope_);
	byteswap(value.global_sound_effect_block);
}

template<> void byteswap<blofeld::infinite::s_s_area_control_scalar_function>(blofeld::infinite::s_s_area_control_scalar_function& value)
{
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_s_area_control_scalar_object_function>(blofeld::infinite::s_s_area_control_scalar_object_function& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_s_area_control_definition>(blofeld::infinite::s_s_area_control_definition& value)
{
	byteswap(value.flags);
	byteswap(value.maximum_distance);
	byteswap(value.distance_falloff$2);
	byteswap(value.angle_falloff$2);
	byteswap(value.object_falloff$2);
}

template<> void byteswap<blofeld::infinite::s_s_damage_response_definition>(blofeld::infinite::s_s_damage_response_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.classes_block);
	byteswap(value.area_control_block);
}

template<> void byteswap<blofeld::infinite::s_i343damagedamagesourcereference>(blofeld::infinite::s_i343damagedamagesourcereference& value)
{
	byteswap(value.damage_source_name);
}

template<> void byteswap<blofeld::infinite::s_i343damageattachmentnamereference>(blofeld::infinite::s_i343damageattachmentnamereference& value)
{
	byteswap(value.attachment_name);
}

template<> void byteswap<blofeld::infinite::s_i343damageattachmentnamereferenceparam>(blofeld::infinite::s_i343damageattachmentnamereferenceparam& value)
{
	byteswap(value.attachmentname);
}

template<> void byteswap<blofeld::infinite::s_i343damagedamagetypereference>(blofeld::infinite::s_i343damagedamagetypereference& value)
{
	byteswap(value.damage_type_name);
}

template<> void byteswap<blofeld::infinite::s_interfacedamagedisplaydefinition>(blofeld::infinite::s_interfacedamagedisplaydefinition& value)
{
	byteswap(value.display_name);
	byteswap(value.sprite_sheet);
	byteswap(value.sprite_index);
}

template<> void byteswap<blofeld::infinite::s_interfacedamagedisplaybydamagetype>(blofeld::infinite::s_interfacedamagedisplaybydamagetype& value)
{
	byteswap(value.damagetype);
	byteswap(value.displaydefinition);
}

template<> void byteswap<blofeld::infinite::s_interfacedamagedisplaybyattachmentlist>(blofeld::infinite::s_interfacedamagedisplaybyattachmentlist& value)
{
	byteswap(value.attachmentlist_block);
	byteswap(value.displaybydamagetype_block);
}

template<> void byteswap<blofeld::infinite::s_interfacedamagedisplaybydamagesource>(blofeld::infinite::s_interfacedamagedisplaybydamagesource& value)
{
	byteswap(value.damagesource);
	byteswap(value.displaybyattachmentlist_block);
}

template<> void byteswap<blofeld::infinite::s_interfacedamagereportingdisplayglobals>(blofeld::infinite::s_interfacedamagereportingdisplayglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.damagedisplaymap_block);
}

template<> void byteswap<blofeld::infinite::s_response>(blofeld::infinite::s_response& value)
{
	byteswap(value.vocalization_name);
	byteswap(value.vocalization_index);
	byteswap(value.response_type);
	byteswap(value.dialogue_event);
	byteswap(value.response_behavior);
	byteswap(value.vocalization_index_offset_from_owner);
}

template<> void byteswap<blofeld::infinite::s_vocalization>(blofeld::infinite::s_vocalization& value)
{
	byteswap(value.vocalization);
	byteswap(value.offset_from_parent);
	byteswap(value.priority);
	byteswap(value.flags);
	byteswap(value._2d_speaker_voice);
	byteswap(value.glance_behavior);
	byteswap(value.glance_recipient_behavior);
	byteswap(value.perception_type);
	byteswap(value.max_combat_status);
	byteswap(value.animation_impulse);
	byteswap(value.proxy_dialogue_index);
	byteswap(value.sound_repetition_delay);
	byteswap(value.allowable_queue_delay);
	byteswap(value.pre_voc_delay);
	byteswap(value.notification_delay);
	byteswap(value.post_voc_delay);
	byteswap(value.repeat_delay);
	byteswap(value.weight);
	byteswap(value.speaker_freeze_time);
	byteswap(value.listener_freeze_time);
	byteswap(value.speaker_emotion);
	byteswap(value.listener_emotion);
	byteswap(value.player_speaker_skip_fraction);
	byteswap(value.player_skip_fraction);
	byteswap(value.flood_skip_fraction);
	byteswap(value.skip_fraction);
	byteswap(value.mission_min_value);
	byteswap(value.mission_max_value);
	byteswap(value.sample_line);
	byteswap(value.reponses_block);
}

template<> void byteswap<blofeld::infinite::s_dialoguestatetableexpressiontoken>(blofeld::infinite::s_dialoguestatetableexpressiontoken& value)
{
	byteswap(value.an_expression_token);
	byteswap(value.numeric_constant_if_applicable);
}

template<> void byteswap<blofeld::infinite::s_vocalizationpattern>(blofeld::infinite::s_vocalizationpattern& value)
{
	byteswap(value.dialogue_type);
	byteswap(value.vocalization_index);
	byteswap(value.vocalization_name);
	byteswap(value.audience_type);
	byteswap(value.listener_target);
	byteswap(value.game_type);
	byteswap(value.hostility);
	byteswap(value.flags);
	byteswap(value.subject_actor_type);
	byteswap(value.subject_type);
	byteswap(value.subject_ai_type_name);
	byteswap(value.subject_dialogue_system_metadata_label);
	byteswap(value.subject_weapon_name);
	byteswap(value.subject_location_influence);
	byteswap(value.subject_min_danger_level);
	byteswap(value.subject_max_danger_level);
	byteswap(value.subject_min_team_count);
	byteswap(value.subject_max_team_count);
	byteswap(value.cause_actor_type);
	byteswap(value.cause_type);
	byteswap(value.cause_ai_type_name);
	byteswap(value.cause_dialogue_system_metadata_label);
	byteswap(value.cause_equipment_type_name);
	byteswap(value.cause_weapon_name);
	byteswap(value.cause_location_influence);
	byteswap(value.cause_min_danger_level);
	byteswap(value.cause_max_danger_level);
	byteswap(value.cause_min_team_count);
	byteswap(value.cause_max_team_count);
	byteswap(value.speaker_type);
	byteswap(value.speaker_object_type);
	byteswap(value.speaker_behavior);
	byteswap(value.speaker_min_danger_level);
	byteswap(value.speaker_max_danger_level);
	byteswap(value.speaker_subject_min_distance);
	byteswap(value.speaker_subject_max_distance);
	byteswap(value.speaker_subject_position);
	byteswap(value.speaker_cause_min_distance);
	byteswap(value.speaker_cause_max_distance);
	byteswap(value.speaker_cause_position);
	byteswap(value.conditions);
	byteswap(value.subject_cause_min_distance);
	byteswap(value.subject_cause_max_distance);
	byteswap(value.spatial_relation);
	byteswap(value.damage_category);
	byteswap(value.damage_type);
	byteswap(value.damage_source_name);
	byteswap(value.vocalization_triggered);
	byteswap(value.dst_expression);
	byteswap(value.dst_expression_tokens_block);
}

template<> void byteswap<blofeld::infinite::s_patterntypelookupdata>(blofeld::infinite::s_patterntypelookupdata& value)
{
	byteswap(value.start_index_postprocess);
	byteswap(value.length_postprocess);
}

template<> void byteswap<blofeld::infinite::s_involuntarydata>(blofeld::infinite::s_involuntarydata& value)
{
	byteswap(value.involuntary_vocalization_index);
}

template<> void byteswap<blofeld::infinite::s_customeventdefinition>(blofeld::infinite::s_customeventdefinition& value)
{
	byteswap(value.event_name);
}

template<> void byteswap<blofeld::infinite::s_dialoguesystemdatatag>(blofeld::infinite::s_dialoguesystemdatatag& value)
{
	byteswap(value.anytag);
	byteswap(value.vocalizations_block);
	byteswap(value.patterns_block);
	byteswap(value.pattern_type_look_up_data_block);
	byteswap(value.involuntary_data_block);
	byteswap(value.content_defined_events_block);
}

template<> void byteswap<blofeld::infinite::s_primarysunresourcedefinition>(blofeld::infinite::s_primarysunresourcedefinition& value)
{
	byteswap(value.lens_flare_guid);
}

template<> void byteswap<blofeld::infinite::s_secondarysunresourcedefinition>(blofeld::infinite::s_secondarysunresourcedefinition& value)
{
	byteswap(value.lens_flare_guid);
}

template<> void byteswap<blofeld::infinite::s_sunresourcesdefinition>(blofeld::infinite::s_sunresourcesdefinition& value)
{
	byteswap(value.primary_sun_resource);
	byteswap(value.secondary_suns_resources_block);
}

template<> void byteswap<blofeld::infinite::s_dwsresourcesdefinition>(blofeld::infinite::s_dwsresourcesdefinition& value)
{
	byteswap(value.suns_resources);
	byteswap(value.volume_poll_time);
}

template<> void byteswap<blofeld::infinite::s_dynamicsundefinition>(blofeld::infinite::s_dynamicsundefinition& value)
{
	byteswap(value.flags);
	byteswap(value.primary_sun_color);
	byteswap(value.secondary_sun_resource_index);
	byteswap(value.intensity);
	byteswap(value.intensity_ev_scalar);
	byteswap(value.distance);
	byteswap(value.time_of_day_angle);
	byteswap(value.latitude_modifier);
	byteswap(value.azimuth);
	byteswap(value.season_modifier);
	byteswap(value.size);
}

template<> void byteswap<blofeld::infinite::s_dynamicprobedefinition>(blofeld::infinite::s_dynamicprobedefinition& value)
{
	byteswap(value.flags);
	byteswap(value.probe_set_scalar);
	byteswap(value.probe_set_tint);
}

template<> void byteswap<blofeld::infinite::s_dynamicskydefinition>(blofeld::infinite::s_dynamicskydefinition& value)
{
	byteswap(value.flags);
	byteswap(value.static_tint);
	byteswap(value.static_tint_intensity);
	byteswap(value.sky_tint);
	byteswap(value.sky_color_positive_z);
	byteswap(value.sky_color_positive_x);
	byteswap(value.sky_color_negative_x);
	byteswap(value.sky_color_positive_y);
	byteswap(value.sky_color_negative_y);
	byteswap(value.sky_intensity);
	byteswap(value.sky_lighting_depth_scalar_near);
	byteswap(value.sky_lighting_depth_scalar_near_distance);
	byteswap(value.sky_lighting_depth_scalar_far);
	byteswap(value.sky_lighting_depth_scalar_far_distance);
	byteswap(value.probe_lighting_depth_scalar_near);
	byteswap(value.probe_lighting_depth_scalar_near_distance);
	byteswap(value.probe_lighting_depth_scalar_far);
	byteswap(value.probe_lighting_depth_scalar_far_distance);
	byteswap(value.probe_set_0);
	byteswap(value.probe_set_1);
	byteswap(value.probe_set_2);
	byteswap(value.probe_set_3);
}

template<> void byteswap<blofeld::infinite::s_dynamicatmospheredefinition>(blofeld::infinite::s_dynamicatmospheredefinition& value)
{
	byteswap(value.flags);
	byteswap(value.sun_light_color);
	byteswap(value.wavelength_variance);
	byteswap(value.sun_disk_size);
	byteswap(value.atmosphere_density);
	byteswap(value.aerosol_density);
	byteswap(value.ozone_contribution);
	byteswap(value.camera_height);
	byteswap(value.rayleigh_scale);
	byteswap(value.mie_scale);
	byteswap(value.rayleigh_multiplied_tint_strength);
	byteswap(value.rayleigh_multiplied_tint);
	byteswap(value.rayleigh_additive_tint_strength);
	byteswap(value.rayleigh_additive_tint);
	byteswap(value.mie_multiplied_tint_strength);
	byteswap(value.mie_multiplied_tint);
	byteswap(value.mie_additive_tint_strength);
	byteswap(value.mie_additive_tint);
	byteswap(value.atmospheric_scattering_alpha);
	byteswap(value.falloff_min_alpha);
	byteswap(value.falloff_start);
	byteswap(value.falloff_end);
	byteswap(value.auto_exposure_scalar);
	byteswap(value.falloff_direction);
}

template<> void byteswap<blofeld::infinite::s_dynamiccubemaptintingdefinition>(blofeld::infinite::s_dynamiccubemaptintingdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.cubemap_tint);
	byteswap(value.cubemap_tint_intensity);
}

template<> void byteswap<blofeld::infinite::s_cameraexposureparameterdefinition>(blofeld::infinite::s_cameraexposureparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.exposure_lock);
	byteswap(value.exposure_parameters);
	byteswap(value.auto_exposure_sensitivity);
	byteswap(value.exposure_pitch_influence);
	byteswap(value.exposure_compensation);
	byteswap(value.effect_exposure_override$2);
}

template<> void byteswap<blofeld::infinite::s_bloomparameterdefinition>(blofeld::infinite::s_bloomparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.highlight);
	byteswap(value.highlight_offset);
	byteswap(value.highlight_threshold);
	byteswap(value.inherent);
	byteswap(value.intensity);
	byteswap(value.layer_intensity);
	byteswap(value.tint_color);
}

template<> void byteswap<blofeld::infinite::s_selfillumscaleunscparameterdefinition>(blofeld::infinite::s_selfillumscaleunscparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.flags$2);
	byteswap(value.parameter_value);
	byteswap(value.maximum_change);
	byteswap(value.blend_speed_0_1);
}

template<> void byteswap<blofeld::infinite::s_selfillumscalecovenantparameterdefinition>(blofeld::infinite::s_selfillumscalecovenantparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.flags$2);
	byteswap(value.parameter_value);
	byteswap(value.maximum_change);
	byteswap(value.blend_speed_0_1);
}

template<> void byteswap<blofeld::infinite::s_selfillumscaleforerunnerparameterdefinition>(blofeld::infinite::s_selfillumscaleforerunnerparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.flags$2);
	byteswap(value.parameter_value);
	byteswap(value.maximum_change);
	byteswap(value.blend_speed_0_1);
}

template<> void byteswap<blofeld::infinite::s_selfillumparameterdefinition>(blofeld::infinite::s_selfillumparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.exposure);
	byteswap(value.scale);
	byteswap(value.scale_unsc);
	byteswap(value.scale_covenant);
	byteswap(value.scale_forerunner);
}

template<> void byteswap<blofeld::infinite::s_colorgradingparameterdefinition>(blofeld::infinite::s_colorgradingparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.parameters);
	byteswap(value.weight);
	byteswap(value.exposure);
	byteswap(value.saturation);
	byteswap(value.contrast);
	byteswap(value.contrast_midpoint);
	byteswap(value.lift);
	byteswap(value.lift_luma);
	byteswap(value.gamma);
	byteswap(value.gamma_luma);
	byteswap(value.gain);
	byteswap(value.gain_luma);
}

template<> void byteswap<blofeld::infinite::s_deferredreflectionsparameterdefinition>(blofeld::infinite::s_deferredreflectionsparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.parameters);
}

template<> void byteswap<blofeld::infinite::s_ssaoparameterdefinition>(blofeld::infinite::s_ssaoparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.ssao_flags);
	byteswap(value.enable_flags);
	byteswap(value.hemi_rejection_falloff);
	byteswap(value.gtao_intensity);
	byteswap(value.sun_ao);
	byteswap(value.spot_light_ao);
	byteswap(value.omni_light_ao);
}

template<> void byteswap<blofeld::infinite::s_lensdirtparameterdefinition>(blofeld::infinite::s_lensdirtparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.parameters);
}

template<> void byteswap<blofeld::infinite::s_contactshadowsparameterdefinition>(blofeld::infinite::s_contactshadowsparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.parameters);
}

template<> void byteswap<blofeld::infinite::s_chromaticaberrationparameterdefinition>(blofeld::infinite::s_chromaticaberrationparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.enabled);
	byteswap(value.weight);
}

template<> void byteswap<blofeld::infinite::s_dynamiccamerafxdefinition>(blofeld::infinite::s_dynamiccamerafxdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.exposure);
	byteswap(value.bloom);
	byteswap(value.self_illum);
	byteswap(value.color_grading);
	byteswap(value.deferred_reflections);
	byteswap(value.ssao);
	byteswap(value.lens_dirt);
	byteswap(value.contact_shadows);
	byteswap(value.chromatic_aberration);
}

template<> void byteswap<blofeld::infinite::s_atmosphericscatteringfogparameterdefinition>(blofeld::infinite::s_atmosphericscatteringfogparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.fog_extinction_offset);
	byteswap(value.fog_extinction_fade_distance);
	byteswap(value.fog_mie_extinction_fade_distance);
	byteswap(value.fog_depth_scale);
	byteswap(value.bruneton_fog_intensity);
	byteswap(value.old_height_fog_intensity);
	byteswap(value.fog_falloff_start);
	byteswap(value.fog_falloff_end);
	byteswap(value.fog_sky_falloff_start);
	byteswap(value.fog_sky_falloff_end);
	byteswap(value.bruneton_fog_falloff_start_up);
	byteswap(value.bruneton_fog_falloff_end_up);
	byteswap(value.bruneton_fog_falloff_start_down);
	byteswap(value.bruneton_fog_falloff_end_down);
	byteswap(value.bruneton_fog_falloff_power);
	byteswap(value.sky_contribution);
	byteswap(value.rayleigh_strength);
	byteswap(value.mie_strength);
	byteswap(value.inscattering_strength);
	byteswap(value.fake_inscattering_intensity);
	byteswap(value.fake_inscattering_distance);
	byteswap(value.fake_inscattering_extinction);
	byteswap(value.fake_inscattering_color);
}

template<> void byteswap<blofeld::infinite::s_s_ceiling_fog_parameters>(blofeld::infinite::s_s_ceiling_fog_parameters& value)
{
	byteswap(value.flags);
	byteswap(value.base_height);
	byteswap(value.fog_height);
	byteswap(value.fog_thickness);
	byteswap(value.fog_falloff_end);
	byteswap(value.fog_color);
	byteswap(value.fog_color_intensity);
}

template<> void byteswap<blofeld::infinite::s_ceilingfogparameterdefinition>(blofeld::infinite::s_ceilingfogparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.fog_parameters);
}

template<> void byteswap<blofeld::infinite::s_s_solofogfunction>(blofeld::infinite::s_s_solofogfunction& value)
{
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_s_solo_fog_parameters>(blofeld::infinite::s_s_solo_fog_parameters& value)
{
	byteswap(value.flags);
	byteswap(value.base_height);
	byteswap(value.fog_height);
	byteswap(value.fog_thickness);
	byteswap(value.fog_falloff_end);
	byteswap(value.fog_color);
	byteswap(value.fog_color_intensity);
	byteswap(value.function_block);
}

template<> void byteswap<blofeld::infinite::s_depthfogparameterdefinition>(blofeld::infinite::s_depthfogparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.fog_parameters);
}

template<> void byteswap<blofeld::infinite::s_volumetricfogparameterdefinition>(blofeld::infinite::s_volumetricfogparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.volfog_flags);
	byteswap(value.volfog_color_1);
	byteswap(value.volfog_color_2);
	byteswap(value.volfog_density);
	byteswap(value.volfog_indirect_light_intensity);
	byteswap(value.volfog_light_intensity);
	byteswap(value.volfog_ambient_intensity);
	byteswap(value.volfog_sun_intensity);
	byteswap(value.volfog_near_range);
	byteswap(value.volfog_far_range);
	byteswap(value.volfog_range_exponent);
	byteswap(value.volfog_reprojection_weight);
	byteswap(value.volfog_inscatter_scale);
	byteswap(value.volfog_terrain_density_low);
	byteswap(value.volfog_terrain_density_high);
	byteswap(value.volfog_maximum_terrain_fog_height);
	byteswap(value.volfog_terrain_fog_falloff_exponent);
	byteswap(value.volfog_noise_scale);
	byteswap(value.volfog_noise_wind_influence);
	byteswap(value.volfog_noise_input_min);
	byteswap(value.volfog_noise_input_max);
	byteswap(value.volfog_noise_output_min);
	byteswap(value.volfog_noise_output_max);
	byteswap(value.volfog_noise_terrain_follow_intensity);
	byteswap(value.volfog_natural_light_near_intensity);
	byteswap(value.volfog_natural_light_far_intensity);
	byteswap(value.volfog_natural_light_range_near);
	byteswap(value.volfog_natural_light_range_far);
	byteswap(value.volfog_local_light_near_intensity);
	byteswap(value.volfog_local_light_far_intensity);
	byteswap(value.volfog_local_light_range_near);
	byteswap(value.volfog_local_light_range_far);
}

template<> void byteswap<blofeld::infinite::s_speccontrolsplitscreenvaluesfloat>(blofeld::infinite::s_speccontrolsplitscreenvaluesfloat& value)
{
	byteswap(value.single_player);
	byteswap(value._2_player_splitscreen);
	byteswap(value._3_player_splitscreen);
	byteswap(value._4_player_splitscreen);
}

template<> void byteswap<blofeld::infinite::s_speccontrolnodefloatexact>(blofeld::infinite::s_speccontrolnodefloatexact& value)
{
	byteswap(value.type);
	byteswap(value.low);
	byteswap(value.medium);
	byteswap(value.high);
	byteswap(value.ultra);
}

template<> void byteswap<blofeld::infinite::s_volumetricfogperformancedefinition>(blofeld::infinite::s_volumetricfogperformancedefinition& value)
{
	byteswap(value.flags);
	byteswap(value.resolution_scalar);
}

template<> void byteswap<blofeld::infinite::s_s_fog_light_parameters>(blofeld::infinite::s_s_fog_light_parameters& value)
{
	byteswap(value.flags);
	byteswap(value.pitch_angle);
	byteswap(value.yaw_angle);
	byteswap(value.angular_radius);
	byteswap(value.tint_color);
	byteswap(value.tint_color_intensity);
	byteswap(value.angular_falloff_steepness);
	byteswap(value.distance_falloff_steepness);
	byteswap(value.nearby_cutoff_percentage);
}

template<> void byteswap<blofeld::infinite::s_foglightparameterdefinition>(blofeld::infinite::s_foglightparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.parameters);
}

template<> void byteswap<blofeld::infinite::s_volumetexturefogglobalsparameterdefinition>(blofeld::infinite::s_volumetexturefogglobalsparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.parameters);
}

template<> void byteswap<blofeld::infinite::s_volumetexturefogparameterdefinition>(blofeld::infinite::s_volumetexturefogparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.flags$2);
	byteswap(value.sheet_density);
	byteswap(value.color_tint);
	byteswap(value.color_tint_inner);
	byteswap(value.intensity);
	byteswap(value.full_intensity_height);
	byteswap(value.half_intensity_height);
	byteswap(value.reference_plane_height);
}

template<> void byteswap<blofeld::infinite::s_crepuscularrayparams>(blofeld::infinite::s_crepuscularrayparams& value)
{
	byteswap(value.flags);
	byteswap(value.pitch_angle);
	byteswap(value.yaw_angle);
	byteswap(value.angular_radius);
	byteswap(value.source_position);
	byteswap(value.light_shaft_tint_color);
	byteswap(value.light_shaft_intensity);
	byteswap(value.saturation);
	byteswap(value.time_variation_scale);
	byteswap(value.light_shaft_decay_rate);
	byteswap(value.maximum_screen_distance);
	byteswap(value.sample_density);
	byteswap(value.minimum_caster_distance);
}

template<> void byteswap<blofeld::infinite::s_crepuscularrayparameterdefinition>(blofeld::infinite::s_crepuscularrayparameterdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.parameters);
}

template<> void byteswap<blofeld::infinite::s_dynamicfogdefinition>(blofeld::infinite::s_dynamicfogdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.fog_distance_bias);
	byteswap(value.atmospheric_scattering_fog);
	byteswap(value.ceiling_fog);
	byteswap(value.ground_fog);
	byteswap(value.sky_fog);
	byteswap(value.volumetric_fog);
	byteswap(value.volumetric_fog_performance);
	byteswap(value.fog_light);
	byteswap(value.non_blending);
	byteswap(value.per_cluster);
	byteswap(value.crepuscular_ray);
}

template<> void byteswap<blofeld::infinite::s_dynamicwinddefinition>(blofeld::infinite::s_dynamicwinddefinition& value)
{
	byteswap(value.flags);
	byteswap(value.wind_direction);
	byteswap(value.wind_speed);
}

template<> void byteswap<blofeld::infinite::s_cloudshapedefinition>(blofeld::infinite::s_cloudshapedefinition& value)
{
	byteswap(value.flags);
	byteswap(value.low_frequency_noise_scale);
	byteswap(value.low_frequency_noise_strength);
	byteswap(value.low_frequency_noise_axis_scale);
	byteswap(value.high_frequency_noise_scale);
	byteswap(value.high_frequency_noise_strength);
	byteswap(value.curl_noise_scale);
	byteswap(value.curl_noise_strength);
	byteswap(value.bottom_erosion_strength);
	byteswap(value.top_erosion_strength);
	byteswap(value.top_offset);
}

template<> void byteswap<blofeld::infinite::s_cloudlightingdefinition>(blofeld::infinite::s_cloudlightingdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.beer_strength);
	byteswap(value.powder_strength);
	byteswap(value.cornette_shanks_strength);
	byteswap(value.cornette_shanks_spread);
	byteswap(value.bottom_light);
	byteswap(value.clouds_fog_scale);
	byteswap(value.clouds_fog_intensity);
	byteswap(value.clouds_mie_intensity);
	byteswap(value.sunlight_intensity);
	byteswap(value.sunlight_color_tint);
	byteswap(value.skylight_intensity);
	byteswap(value.skylight_color_tint);
	byteswap(value.skylight_top_intensity);
	byteswap(value.skylight_top_color_tint);
	byteswap(value.global_alpha);
}

template<> void byteswap<blofeld::infinite::s_cloudshadowsdefinition>(blofeld::infinite::s_cloudshadowsdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.minimum_strength);
	byteswap(value.gradient);
	byteswap(value.maximum_strength);
	byteswap(value.contrast_factor);
	byteswap(value.contrast_threshold);
	byteswap(value.opacity);
	byteswap(value.panning_clouds_shadows_scalar);
}

template<> void byteswap<blofeld::infinite::s_dynamicvolumetriccloudsdefinition>(blofeld::infinite::s_dynamicvolumetriccloudsdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.coverage_texture);
	byteswap(value.coverage_scale);
	byteswap(value.coverage_offset);
	byteswap(value.coverage_scroll_speed);
	byteswap(value.coverage_strength);
	byteswap(value.horizon_distance);
	byteswap(value.atmosphere_start_height);
	byteswap(value.atmosphere_end_height);
	byteswap(value.lod_distance);
	byteswap(value.global_wind_interpolation);
	byteswap(value.wind_direction);
	byteswap(value.highf_noise_animation_speed);
	byteswap(value.lowf_noise_animation_speed);
	byteswap(value.raymarch_step_scale);
	byteswap(value.depth_threshold);
	byteswap(value.max_depth);
	byteswap(value.min_distance_horizon_clouds);
	byteswap(value.min_distance_horizon_fade_start);
	byteswap(value.max_distance_center_fade_start);
	byteswap(value.max_distance_center_fade_end);
	byteswap(value.center_fade_position);
	byteswap(value.cloud_shape);
	byteswap(value.cloud_lighting);
	byteswap(value.cloud_shadows);
}

template<> void byteswap<blofeld::infinite::s_speccontrolnodeshadowquality>(blofeld::infinite::s_speccontrolnodeshadowquality& value)
{
	byteswap(value.very_low);
	byteswap(value.low);
	byteswap(value.medium);
	byteswap(value.high);
	byteswap(value.ultra);
}

template<> void byteswap<blofeld::infinite::s_speccontrolsplitscreenvaluesbyte>(blofeld::infinite::s_speccontrolsplitscreenvaluesbyte& value)
{
	byteswap(value.single_player);
	byteswap(value._2_player_splitscreen);
	byteswap(value._3_player_splitscreen);
	byteswap(value._4_player_splitscreen);
}

template<> void byteswap<blofeld::infinite::s_speccontrolnodebyteexact>(blofeld::infinite::s_speccontrolnodebyteexact& value)
{
	byteswap(value.type);
	byteswap(value.low);
	byteswap(value.medium);
	byteswap(value.high);
	byteswap(value.ultra);
}

template<> void byteswap<blofeld::infinite::s_speccontrolnodeshort>(blofeld::infinite::s_speccontrolnodeshort& value)
{
	byteswap(value.type);
	byteswap(value.flags);
	byteswap(value.input);
	byteswap(value.very_low);
	byteswap(value.low);
	byteswap(value.medium);
	byteswap(value.high);
	byteswap(value.ultra);
	byteswap(value.splitscreen_logic);
	byteswap(value._2_player_splitscreen);
	byteswap(value._3_player_splitscreen);
	byteswap(value._4_player_splitscreen);
}

template<> void byteswap<blofeld::infinite::s_speccontrolsplitscreenvaluesbool>(blofeld::infinite::s_speccontrolsplitscreenvaluesbool& value)
{
	byteswap(value.single_player);
	byteswap(value._2_player_splitscreen);
	byteswap(value._3_player_splitscreen);
	byteswap(value._4_player_splitscreen);
}

template<> void byteswap<blofeld::infinite::s_speccontrolnodeboolexact>(blofeld::infinite::s_speccontrolnodeboolexact& value)
{
	byteswap(value.type);
	byteswap(value.low);
	byteswap(value.medium);
	byteswap(value.high);
	byteswap(value.ultra);
}

template<> void byteswap<blofeld::infinite::s_floatingshadowcascadesettings>(blofeld::infinite::s_floatingshadowcascadesettings& value)
{
	byteswap(value.cascade_half_width);
	byteswap(value.bias);
	byteswap(value.filter_width);
	byteswap(value.resolution);
	byteswap(value.flags);
	byteswap(value.disabledynamicobjectshadows);
	byteswap(value.islowfrequency);
	byteswap(value.interpolation_occluder_search_step);
	byteswap(value.minimum_shadow_caster_static_geo_bounding_sphere_radius);
	byteswap(value.minimum_shadow_caster_dynamic_object_bounding_sphere_radius);
	byteswap(value.shadow_caster_lod_bias);
	byteswap(value.force_shadow_lod_0___use_default_behavior_1___force_lowest_lod_2___next_higher_lod_and_so_forth);
	byteswap(value.hexgrid_shadows_0___render_as_hexes_1___render_simplified_anything_else___disable_hex_shadows);
}

template<> void byteswap<blofeld::infinite::s_panningcloudsettings>(blofeld::infinite::s_panningcloudsettings& value)
{
	byteswap(value.cloud_scale);
	byteswap(value.cloud_range_start);
	byteswap(value.cloud_range_end);
	byteswap(value.cloud_wind_influence);
	byteswap(value.cloud_texture_offset_x);
	byteswap(value.cloud_texture_offset_y);
	byteswap(value.cloud_texture_ws_x);
	byteswap(value.cloud_texture_ws_y);
	byteswap(value.cloud_texture_ws_z);
	byteswap(value.cloud_texture);
}

template<> void byteswap<blofeld::infinite::s_dynamicsunshadowdefinition>(blofeld::infinite::s_dynamicsunshadowdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.max_shadow_count_scale);
	byteswap(value.floating_shadow_quality);
	byteswap(value.first_person_floating_shadow_mode);
	byteswap(value.cascade_overlap);
	byteswap(value.min_shadow_caster_pixel_radius);
	byteswap(value.pcss_light_size);
	byteswap(value.pcss_minimum_filter_width);
	byteswap(value.pcss_maximum_filter_width);
	byteswap(value.number_of_cascades);
	byteswap(value.frustum_1);
	byteswap(value.frustum_2);
	byteswap(value.frustum_3);
	byteswap(value.frustum_4);
	byteswap(value.frustum_5);
	byteswap(value.frustum_6);
	byteswap(value.number_of_parallax_sampling_steps);
	byteswap(value.sun_direction_parallax_sampling_weight);
	byteswap(value.panning_cloud_settings_block);
}

template<> void byteswap<blofeld::infinite::s_globalcubemapdefinition>(blofeld::infinite::s_globalcubemapdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.global_cubemap_texture);
}

template<> void byteswap<blofeld::infinite::s_cvwlightcontrolsdefinition>(blofeld::infinite::s_cvwlightcontrolsdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.cvw_enabled);
	byteswap(value.cvw_enabled_for_first_person_objects);
	byteswap(value.cvw_light_direction);
	byteswap(value.cvw_light_color);
	byteswap(value.cvw_direct_light_intensity);
	byteswap(value.cvw_direct_near_distance);
	byteswap(value.cvw_direct_far_distance);
	byteswap(value.cvw_direct_near_amount);
	byteswap(value.cvw_direct_far_amount);
	byteswap(value.cvw_sky_scalar);
	byteswap(value.cvw_bounce_scalar);
	byteswap(value.cvw_indirect_near_distance);
	byteswap(value.cvw_indirect_far_distance);
	byteswap(value.cvw_indirect_near_amount);
	byteswap(value.cvw_indirect_far_amount);
	byteswap(value.cvw_indirect_bounce_shaping);
	byteswap(value.cvw_multiplayer_team_override);
}

template<> void byteswap<blofeld::infinite::s_dynamicvistadefinition>(blofeld::infinite::s_dynamicvistadefinition& value)
{
	byteswap(value.flags);
	byteswap(value.color_map_tint);
	byteswap(value.color_map_intensity);
	byteswap(value.emissive_tint);
	byteswap(value.transparency);
	byteswap(value.depth_fade_range);
	byteswap(value.star_intensity);
	byteswap(value.nebula_intensity);
	byteswap(value.emissive_intensity);
}

template<> void byteswap<blofeld::infinite::s_dwsuidefinition>(blofeld::infinite::s_dwsuidefinition& value)
{
	byteswap(value.flags);
	byteswap(value.ui_hdr_brightness_scalar);
}

template<> void byteswap<blofeld::infinite::s_statedefinition>(blofeld::infinite::s_statedefinition& value)
{
	byteswap(value.flags);
	byteswap(value.interpolation_steps);
	byteswap(value.interpolation_time);
	byteswap(value.dynamic_suns_block);
	byteswap(value.dynamic_sky);
	byteswap(value.dynamic_atmosphere);
	byteswap(value.dynamic_cubemap_tinting);
	byteswap(value.dynamic_camera_fx);
	byteswap(value.dynamic_fog);
	byteswap(value.dynamic_wind);
	byteswap(value.dynamic_volumetric_clouds);
	byteswap(value.dynamic_sun_shadow);
	byteswap(value.global_cubemap);
	byteswap(value.cvw_light_controls);
	byteswap(value.dynamic_vista);
	byteswap(value.ui);
}

template<> void byteswap<blofeld::infinite::s_localstatedefinition>(blofeld::infinite::s_localstatedefinition& value)
{
	byteswap(value.guid);
	byteswap(value.name);
	byteswap(value.state);
	byteswap(value.volume_index);
}

template<> void byteswap<blofeld::infinite::s_eventlistdefinition>(blofeld::infinite::s_eventlistdefinition& value)
{
	byteswap(value.name);
	byteswap(value.execution_type);
	byteswap(value.repeat_type);
	byteswap(value.number_of_runs);
	byteswap(value.states_block);
	byteswap(value.start_state_index);
	byteswap(value.priority);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_eventlistmapping>(blofeld::infinite::s_eventlistmapping& value)
{
	byteswap(value.event_list_name);
	byteswap(value.event_list_category);
}

template<> void byteswap<blofeld::infinite::s_dynamicworldstateglobals>(blofeld::infinite::s_dynamicworldstateglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.resources);
	byteswap(value.global_state);
	byteswap(value.event_lists_block);
	byteswap(value.event_list_mappings_block);
}

template<> void byteswap<blofeld::infinite::s_ebtnodeidentifier>(blofeld::infinite::s_ebtnodeidentifier& value)
{
	byteswap(value.type);
	byteswap(value.block_index);
}

template<> void byteswap<blofeld::infinite::s_ebtnodelink>(blofeld::infinite::s_ebtnodelink& value)
{
	byteswap(value.source_node_identifier);
	byteswap(value.destination_node_identifier);
}

template<> void byteswap<blofeld::infinite::s_ebtrootnode>(blofeld::infinite::s_ebtrootnode& value)
{
	byteswap(value.pretty_name);
}

template<> void byteswap<blofeld::infinite::s_ebtinputnode>(blofeld::infinite::s_ebtinputnode& value)
{
	byteswap(value.pretty_name);
}

template<> void byteswap<blofeld::infinite::s_ebtfollowplayerordernode>(blofeld::infinite::s_ebtfollowplayerordernode& value)
{
	byteswap(value.bounding_ez_pretty_name);
	byteswap(value.follow_radius);
}

template<> void byteswap<blofeld::infinite::s_ebtselectornode>(blofeld::infinite::s_ebtselectornode& value)
{
	byteswap(value.respects_initial_placement);
}

template<> void byteswap<blofeld::infinite::s_ebtsequencenode>(blofeld::infinite::s_ebtsequencenode& value)
{
	byteswap(value.respects_initial_placement);
}

template<> void byteswap<blofeld::infinite::s_ebtboolconditionnode>(blofeld::infinite::s_ebtboolconditionnode& value)
{
	byteswap(value.bool_operation);
	byteswap(value.action_node_identifier);
}

template<> void byteswap<blofeld::infinite::s_ebtprioritysorternode>(blofeld::infinite::s_ebtprioritysorternode& value)
{
	byteswap(value.sort_property);
	byteswap(value.sort_type);
}

template<> void byteswap<blofeld::infinite::s_ebtassignmentlimitnode>(blofeld::infinite::s_ebtassignmentlimitnode& value)
{
	byteswap(value.flags);
	byteswap(value.max_limit);
}

template<> void byteswap<blofeld::infinite::s_ebtbodycountnode>(blofeld::infinite::s_ebtbodycountnode& value)
{
	byteswap(value.flags);
	byteswap(value.max_count);
}

template<> void byteswap<blofeld::infinite::s_ebtcombatstatusfilternode>(blofeld::infinite::s_ebtcombatstatusfilternode& value)
{
	byteswap(value.flags);
	byteswap(value.comparison);
	byteswap(value.combat_status);
}

template<> void byteswap<blofeld::infinite::s_ebtkeywordfilternode>(blofeld::infinite::s_ebtkeywordfilternode& value)
{
	byteswap(value.flags);
	byteswap(value.keyword);
}

template<> void byteswap<blofeld::infinite::s_ebtlivingcountnode>(blofeld::infinite::s_ebtlivingcountnode& value)
{
	byteswap(value.flags);
	byteswap(value.min_count);
}

template<> void byteswap<blofeld::infinite::s_ebtvehiclefilternode>(blofeld::infinite::s_ebtvehiclefilternode& value)
{
	byteswap(value.flags);
	byteswap(value.check_vehicle);
}

template<> void byteswap<blofeld::infinite::s_ebtscripttriggernode>(blofeld::infinite::s_ebtscripttriggernode& value)
{
	byteswap(value.flags);
	byteswap(value.label);
}

template<> void byteswap<blofeld::infinite::s_ebtplayertriggervolumenode>(blofeld::infinite::s_ebtplayertriggervolumenode& value)
{
	byteswap(value.flags);
	byteswap(value.volume_pretty_name);
}

template<> void byteswap<blofeld::infinite::s_ebtminrelevancenode>(blofeld::infinite::s_ebtminrelevancenode& value)
{
	byteswap(value.flags);
	byteswap(value.min_relevance);
}

template<> void byteswap<blofeld::infinite::s_exportedebtdefinition>(blofeld::infinite::s_exportedebtdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.source_graph);
	byteswap(value.links_block);
	byteswap(value.root_nodes_block);
	byteswap(value.input_nodes_block);
	byteswap(value.follow_player_order_nodes_block);
	byteswap(value.selector_nodes_block);
	byteswap(value.sequence_nodes_block);
	byteswap(value.bool_condition_nodes_block);
	byteswap(value.priority_sorter_nodes_block);
	byteswap(value.assignment_limit_nodes_block);
	byteswap(value.body_count_nodes_block);
	byteswap(value.combat_status_filter_nodes_block);
	byteswap(value.keyword_filter_nodes_block);
	byteswap(value.living_count_nodes_block);
	byteswap(value.vehicle_type_filter_nodes_block);
	byteswap(value.script_trigger_nodes_block);
	byteswap(value.trigger_volume_nodes_block);
	byteswap(value.min_relevance_nodes_block);
}

template<> void byteswap<blofeld::infinite::s_effectexposureoverride>(blofeld::infinite::s_effectexposureoverride& value)
{
	byteswap(value.min_exposure);
	byteswap(value.max_exposure);
	byteswap(value.underexposed_slope);
	byteswap(value.overexposed_slope);
}

template<> void byteswap<blofeld::infinite::s_effectexposuredefinition>(blofeld::infinite::s_effectexposuredefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.alpha_blend_override);
	byteswap(value.additive_override);
	byteswap(value.lit_alpha_blend_override);
	byteswap(value.lit_additive_override);
	byteswap(value.surface_alpha_blend_override);
	byteswap(value.surface_additive_override);
	byteswap(value.cheap_light_override);
}

template<> void byteswap<blofeld::infinite::s_effect_definitionannotation>(blofeld::infinite::s_effect_definitionannotation& value)
{
	byteswap(value.name);
	byteswap(value.text);
}

template<> void byteswap<blofeld::infinite::s_effect_location_definition>(blofeld::infinite::s_effect_location_definition& value)
{
	byteswap(value.marker_name);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_effect_part_definition>(blofeld::infinite::s_effect_part_definition& value)
{
	byteswap(value.violence_mode);
	byteswap(value.location);
	byteswap(value.secondary_location_beams);
	byteswap(value.flags);
	byteswap(value.priority);
	byteswap(value.camera_mode);
	byteswap(value.runtime_base_group_tag);
	byteswap(value.game_mode);
	byteswap(value.accessibility_type);
	byteswap(value.type);
	byteswap(value.velocity_bounds);
	byteswap(value.velocity_cone_angle);
	byteswap(value.angular_velocity_bounds);
	byteswap(value.radius_modifier_bounds);
	byteswap(value.relative_offset);
	byteswap(value.relative_orientation);
	byteswap(value.a_scales_values);
	byteswap(value.b_scales_values);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_effect_acceleration_definition>(blofeld::infinite::s_effect_acceleration_definition& value)
{
	byteswap(value.violence_mode);
	byteswap(value.location);
	byteswap(value.acceleration);
	byteswap(value.inner_cone_angle);
	byteswap(value.outer_cone_angle);
}

template<> void byteswap<blofeld::infinite::s_gpupropertysubarray>(blofeld::infinite::s_gpupropertysubarray& value)
{
	byteswap(value.runtime_gpu_property_real);
}

template<> void byteswap<blofeld::infinite::s_gpupropertyparam>(blofeld::infinite::s_gpupropertyparam& value)
{
	byteswap(value.runtime_gpu_property_sub_array);
}

template<> void byteswap<blofeld::infinite::s_gpufunctionsubarray>(blofeld::infinite::s_gpufunctionsubarray& value)
{
	byteswap(value.runtime_gpu_function_real);
}

template<> void byteswap<blofeld::infinite::s_gpufunctionparam>(blofeld::infinite::s_gpufunctionparam& value)
{
	byteswap(value.runtime_gpu_function_sub_array);
}

template<> void byteswap<blofeld::infinite::s_gpucolorsubarray>(blofeld::infinite::s_gpucolorsubarray& value)
{
	byteswap(value.runtime_gpu_color_real);
}

template<> void byteswap<blofeld::infinite::s_gpucolorparam>(blofeld::infinite::s_gpucolorparam& value)
{
	byteswap(value.runtime_gpu_color_sub_array);
}

template<> void byteswap<blofeld::infinite::s_gpupropertyfunctioncolor>(blofeld::infinite::s_gpupropertyfunctioncolor& value)
{
	byteswap(value.runtime_gpu_property_block);
	byteswap(value.runtime_gpu_functions_block);
	byteswap(value.runtime_gpu_colors_block);
}

template<> void byteswap<blofeld::infinite::s_emittersharedvalues>(blofeld::infinite::s_emittersharedvalues& value)
{
	byteswap(value.emitter_debug_flags);
	byteswap(value.flags);
	byteswap(value.bounding_radius_estimate);
	byteswap(value.bounding_radius_override);
	byteswap(value.runtime_m_gpu_data);
	byteswap(value.cachedconstants);
	byteswap(value.updatedatastatic);
}

template<> void byteswap<blofeld::infinite::s_emittertagreference>(blofeld::infinite::s_emittertagreference& value)
{
	byteswap(value.emitter_reference_name);
	byteswap(value.emitter_reference);
	byteswap(value.emitter_shared_values);
}

template<> void byteswap<blofeld::infinite::s_particlepropertyscalar>(blofeld::infinite::s_particlepropertyscalar& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
	byteswap(value.runtime_m_constant_value);
	byteswap(value.runtime_m_flags);
	byteswap(value.force_flags);
}

template<> void byteswap<blofeld::infinite::s_s_particle_attachment>(blofeld::infinite::s_s_particle_attachment& value)
{
	byteswap(value.flags);
	byteswap(value.type);
	byteswap(value.trigger);
	byteswap(value.skip_fraction);
	byteswap(value.primary_scale);
	byteswap(value.secondary_scale);
}

template<> void byteswap<blofeld::infinite::s_particlepropertyrealeulerangles3d>(blofeld::infinite::s_particlepropertyrealeulerangles3d& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
	byteswap(value.runtime_m_constant_value);
	byteswap(value.runtime_m_flags);
	byteswap(value.force_flags);
	byteswap(value.direction_at_0);
	byteswap(value.direction_at_1);
}

template<> void byteswap<blofeld::infinite::s_particlepropertyrealpoint3d>(blofeld::infinite::s_particlepropertyrealpoint3d& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
	byteswap(value.runtime_m_constant_value);
	byteswap(value.runtime_m_flags);
	byteswap(value.force_flags);
	byteswap(value.starting_interpolant);
	byteswap(value.ending_interpolant);
}

template<> void byteswap<blofeld::infinite::s_particlepropertyrealvector3d>(blofeld::infinite::s_particlepropertyrealvector3d& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
	byteswap(value.runtime_m_constant_value);
	byteswap(value.runtime_m_flags);
	byteswap(value.force_flags);
	byteswap(value.starting_interpolant);
	byteswap(value.ending_interpolant);
}

template<> void byteswap<blofeld::infinite::s_effectglobalforcedefinition>(blofeld::infinite::s_effectglobalforcedefinition& value)
{
	byteswap(value.flags);
	byteswap(value.shape);
	byteswap(value.version);
	byteswap(value.normal_force_strength);
	byteswap(value.tangent_force_strength);
	byteswap(value.binormal_force_strength);
	byteswap(value.falloff_begin);
	byteswap(value.falloff_end);
	byteswap(value.max_speed);
	byteswap(value.direction_override);
}

template<> void byteswap<blofeld::infinite::s_c_particle_emitter_definitionparticleemitterglobalforce>(blofeld::infinite::s_c_particle_emitter_definitionparticleemitterglobalforce& value)
{
	byteswap(value.global_force);
	byteswap(value.offset);
	byteswap(value.axis);
}

template<> void byteswap<blofeld::infinite::s_c_particle_emitter_definitionparticleemitterclipsphere>(blofeld::infinite::s_c_particle_emitter_definitionparticleemitterclipsphere& value)
{
	byteswap(value.offset);
	byteswap(value.radius);
}

template<> void byteswap<blofeld::infinite::s_c_particle_controller_parameter>(blofeld::infinite::s_c_particle_controller_parameter& value)
{
	byteswap(value.parameter_id);
	byteswap(value.property);
}

template<> void byteswap<blofeld::infinite::s_c_particle_controller>(blofeld::infinite::s_c_particle_controller& value)
{
	byteswap(value.type);
	byteswap(value.flags);
	byteswap(value.parameters_block);
	byteswap(value.runtime_m_constant_parameters);
	byteswap(value.runtime_m_used_particle_states);
}

template<> void byteswap<blofeld::infinite::s_c_particle_movement_definition>(blofeld::infinite::s_c_particle_movement_definition& value)
{
	byteswap(value._template);
	byteswap(value.flags);
	byteswap(value.collision_controller_index);
	byteswap(value.turbulence_controller_index);
	byteswap(value.global_force_controller_index);
	byteswap(value.movements_block);
	byteswap(value.turbulence_texture);
}

template<> void byteswap<blofeld::infinite::s_particlepropertycolor>(blofeld::infinite::s_particlepropertycolor& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
	byteswap(value.runtime_m_constant_value);
	byteswap(value.runtime_m_flags);
	byteswap(value.force_flags);
}

template<> void byteswap<blofeld::infinite::s_c_particle_emitter_definition>(blofeld::infinite::s_c_particle_emitter_definition& value)
{
	byteswap(value.estimatedsize);
	byteswap(value.runtime_m_constant_per_particle_properties);
	byteswap(value.runtime_m_constant_over_time_properties);
	byteswap(value.runtime_m_used_particle_states);
	byteswap(value.particle_appearance);
	byteswap(value.particle_flags);
	byteswap(value.emitter_flags);
	byteswap(value.emission_shape);
	byteswap(value.particle_axis_for_models);
	byteswap(value.particle_reference_axis);
	byteswap(value.custom_shape);
	byteswap(value.axis_scale);
	byteswap(value.particle_emission_direction);
	byteswap(value.emission_radius);
	byteswap(value.particle_billboard_style);
	byteswap(value.curvature);
	byteswap(value.angle_fade_range);
	byteswap(value.angle_fade_cutoff);
	byteswap(value.particle_attachments_block);
	byteswap(value.relative_direction);
	byteswap(value.emission_angle);
	byteswap(value.translational_offset);
	byteswap(value.particle_center_offset);
	byteswap(value.particle_lifespan);
	byteswap(value.particle_starting_count);
	byteswap(value.particle_max_count);
	byteswap(value.particle_emission_rate);
	byteswap(value.particle_emission_per_distance);
	byteswap(value.particle_size);
	byteswap(value.particle_scale);
	byteswap(value.particle_scale_x);
	byteswap(value.particle_scale_y);
	byteswap(value.particle_aspect_ratio);
	byteswap(value.particle_rotation);
	byteswap(value.particle_initial_rotation_rate);
	byteswap(value.particle_initial_velocity);
	byteswap(value.particle_self_acceleration);
	byteswap(value.min_velocity);
	byteswap(value.max_velocity);
	byteswap(value.particle_attractor_repulsor_block);
	byteswap(value.particle_clip_sphere_block);
	byteswap(value.particle_movement);
	byteswap(value.particle_intensity);
	byteswap(value.particle_tint_override_mode);
	byteswap(value.particle_tint);
	byteswap(value.particle_tint_2_override_mode);
	byteswap(value.particle_tint_2);
	byteswap(value.particle_alpha);
	byteswap(value.particle_alpha_2);
	byteswap(value.particle_alpha_black_point);
	byteswap(value.particle_alpha_white_point);
	byteswap(value.lighting_resolution_max);
	byteswap(value.frame_index);
	byteswap(value.animation_rate);
	byteswap(value.palette_animation);
}

template<> void byteswap<blofeld::infinite::s_emitterinternal>(blofeld::infinite::s_emitterinternal& value)
{
	byteswap(value.emitter_name);
	byteswap(value.emitter_shared_values);
	byteswap(value.emitter);
}

template<> void byteswap<blofeld::infinite::s_c_particle_system_definition>(blofeld::infinite::s_c_particle_system_definition& value)
{
	byteswap(value.priority);
	byteswap(value.game_mode);
	byteswap(value.sort_bias);
	byteswap(value.particle);
	byteswap(value.location);
	byteswap(value.coordinate_system);
	byteswap(value.accessibility_type);
	byteswap(value.disposition);
	byteswap(value.camera_mode);
	byteswap(value.flags);
	byteswap(value.percent_velocity_to_inherit);
	byteswap(value.max_bounding_radius);
	byteswap(value.size_scale);
	byteswap(value.camera_offset);
	byteswap(value.near_fade_cutoff);
	byteswap(value.near_fade_range);
	byteswap(value.far_fade_range);
	byteswap(value.far_fade_cutoff);
	byteswap(value.camera_distance_range_override);
	byteswap(value.emitter_references_block);
	byteswap(value.emitters_block);
	byteswap(value.runtime_max_lifespan);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_effect_event_definition>(blofeld::infinite::s_effect_event_definition& value)
{
	byteswap(value.event_name);
	byteswap(value.flags);
	byteswap(value.skip_fraction);
	byteswap(value.delay_bounds);
	byteswap(value.duration_bounds);
	byteswap(value.event_age_duration_override$2);
	byteswap(value.parts_block);
	byteswap(value.accelerations_block);
	byteswap(value.particle_systems_block);
}

template<> void byteswap<blofeld::infinite::s_s_effect_conical_distribution_definition>(blofeld::infinite::s_s_effect_conical_distribution_definition& value)
{
	byteswap(value.yaw_count);
	byteswap(value.pitch_count);
	byteswap(value.distribution_exponent);
	byteswap(value.spread);
}

template<> void byteswap<blofeld::infinite::s_effectloddefinition>(blofeld::infinite::s_effectloddefinition& value)
{
	byteswap(value.lod_name);
	byteswap(value.lod_distance);
	byteswap(value.lod_timer);
	byteswap(value.camera_distance_curve);
	byteswap(value.camera_distance_range);
	byteswap(value.lod_import_effect);
	byteswap(value.lod_import_index);
	byteswap(value.lod_flags);
	byteswap(value.lod_loop_start_event);
	byteswap(value.lod_locations_block);
	byteswap(value.lod_events_block);
	byteswap(value.lod_conical_distribution_block);
}

template<> void byteswap<blofeld::infinite::s_effect_sound_event_lod_definition>(blofeld::infinite::s_effect_sound_event_lod_definition& value)
{
	byteswap(value.lod_name);
	byteswap(value.location);
	byteswap(value.event);
}

template<> void byteswap<blofeld::infinite::s_effect_sound_definition>(blofeld::infinite::s_effect_sound_definition& value)
{
	byteswap(value.sound);
	byteswap(value.marker_name);
	byteswap(value.events_block);
}

template<> void byteswap<blofeld::infinite::s_effect_definition>(blofeld::infinite::s_effect_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.annotations_block);
	byteswap(value.flags);
	byteswap(value.fixed_random_seed);
	byteswap(value.restart_if_within);
	byteswap(value.continue_if_within);
	byteswap(value.death_delay);
	byteswap(value.allocation_priority);
	byteswap(value.customlocationflags);
	byteswap(value.global_size_scale);
	byteswap(value.scale_a_override);
	byteswap(value.scale_b_override);
	byteswap(value.runtime_danger_radius);
	byteswap(value.standalonedamagesource);
	byteswap(value.always_play_distance);
	byteswap(value.never_play_distance);
	byteswap(value.runtime_local_space_death_delay);
	byteswap(value.lods_block);
	byteswap(value.sounds_block);
}

template<> void byteswap<blofeld::infinite::s_globalspawneffects>(blofeld::infinite::s_globalspawneffects& value)
{
	byteswap(value.biped_spawn_effect);
	byteswap(value.vehicle_spawn_effect);
	byteswap(value.weapon_spawn_effect);
	byteswap(value.first_person_player_spawn_effect);
}

template<> void byteswap<blofeld::infinite::s_effectglobalsdefinition>(blofeld::infinite::s_effectglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.grunt_birthday_effect);
	byteswap(value.material_effects_globals);
	byteswap(value.multiplayer_block);
	byteswap(value.campaign_block);
}

template<> void byteswap<blofeld::infinite::s_i343effectsgeneratordefinition>(blofeld::infinite::s_i343effectsgeneratordefinition& value)
{
	byteswap(value.name);
	byteswap(value.generator_flags);
	byteswap(value.bounding_radius);
	byteswap(value.actual_material);
	byteswap(value.emitter_particle_asset);
	byteswap(value.emitter_particle_model);
	byteswap(value.renderer_particle_asset);
	byteswap(value.renderer_particle_model);
	byteswap(value.goal_particle_asset);
	byteswap(value.goal_particle_model);
	byteswap(value.shared_state_size);
	byteswap(value.instance_state_size);
	byteswap(value.max_instance_count);
	byteswap(value.max_lifetime);
	byteswap(value.max_vertex_count_per_instance);
	byteswap(value.primitive_topology);
	byteswap(value.m_emitterpipelinestates);
	byteswap(value.m_simulatorpipelinestate);
	byteswap(value.m_rendererpipelinestates);
}

template<> void byteswap<blofeld::infinite::s_i343effectsgeneratorsystemdefinition>(blofeld::infinite::s_i343effectsgeneratorsystemdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.parent);
	byteswap(value.generator_system_flags);
	byteswap(value.camera_distance_range_override);
	byteswap(value.generators_block);
}

template<> void byteswap<blofeld::infinite::s_i343effectseffectwindfunction>(blofeld::infinite::s_i343effectseffectwindfunction& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_i343effectseffectwindmotor>(blofeld::infinite::s_i343effectseffectwindmotor& value)
{
	byteswap(value.anytag);
	byteswap(value.type);
	byteswap(value.direction);
	byteswap(value.strength);
	byteswap(value.scale_x_or_radius);
	byteswap(value.scale_y);
	byteswap(value.scale_z);
}

template<> void byteswap<blofeld::infinite::s_effectglobalforcedefinitiontag>(blofeld::infinite::s_effectglobalforcedefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.force);
}

template<> void byteswap<blofeld::infinite::s_i343emblemlayer>(blofeld::infinite::s_i343emblemlayer& value)
{
	byteswap(value.prefix);
	byteswap(value.preview_color);
}

template<> void byteswap<blofeld::infinite::s_i343emblemglobals>(blofeld::infinite::s_i343emblemglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.layers_block);
}

template<> void byteswap<blofeld::infinite::s_i343emblemdefinitionsemblemshader>(blofeld::infinite::s_i343emblemdefinitionsemblemshader& value)
{
	byteswap(value.name);
	byteswap(value.shader);
}

template<> void byteswap<blofeld::infinite::s_i343emblemdefinitionsemblemsvg>(blofeld::infinite::s_i343emblemdefinitionsemblemsvg& value)
{
	byteswap(value.name);
	byteswap(value.svg);
	byteswap(value.svg_geometry);
	byteswap(value.svgoutput);
}

template<> void byteswap<blofeld::infinite::s_i343emblemdefinitionsemblemcoatingswatch>(blofeld::infinite::s_i343emblemdefinitionsemblemcoatingswatch& value)
{
	byteswap(value.swatch);
	byteswap(value.color);
	byteswap(value.roughness);
	byteswap(value.visibility);
	byteswap(value.clipping);
	byteswap(value.scale);
	byteswap(value.offset);
}

template<> void byteswap<blofeld::infinite::s_i343emblemdefinitionsemblemcoating>(blofeld::infinite::s_i343emblemdefinitionsemblemcoating& value)
{
	byteswap(value.name);
	byteswap(value.shader);
	byteswap(value.text_color);
	byteswap(value.swatches_block);
}

template<> void byteswap<blofeld::infinite::s_i343emblemdefinitionsemblem>(blofeld::infinite::s_i343emblemdefinitionsemblem& value)
{
	byteswap(value.anytag);
	byteswap(value.shaders_block);
	byteswap(value.emblems_block);
	byteswap(value.coatings_block);
}

template<> void byteswap<blofeld::infinite::s_interfaceemblemelementname>(blofeld::infinite::s_interfaceemblemelementname& value)
{
	byteswap(value.id);
}

template<> void byteswap<blofeld::infinite::s_interfaceemblemelementgroup>(blofeld::infinite::s_interfaceemblemelementgroup& value)
{
	byteswap(value.id);
	byteswap(value.elements_block);
}

template<> void byteswap<blofeld::infinite::s_interfaceemblemthemedefinition>(blofeld::infinite::s_interfaceemblemthemedefinition& value)
{
	byteswap(value.theme_id);
	byteswap(value.key_emblem);
	byteswap(value.tile_emblem);
	byteswap(value.ui_nameplate_emblem);
	byteswap(value.valid_coatings_block);
	byteswap(value.valid_coating_groups_block);
	byteswap(value.default_coating);
	byteswap(value.initial_coating);
}

template<> void byteswap<blofeld::infinite::s_interfaceemblemthemeglobals>(blofeld::infinite::s_interfaceemblemthemeglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.global_default_emblem_coating);
	byteswap(value.coating_groups_block);
	byteswap(value.emblem_themes_block);
}

template<> void byteswap<blofeld::infinite::s_emittertag>(blofeld::infinite::s_emittertag& value)
{
	byteswap(value.anytag);
	byteswap(value.emitter);
}

template<> void byteswap<blofeld::infinite::s_explicitshader>(blofeld::infinite::s_explicitshader& value)
{
	byteswap(value.shader);
}

template<> void byteswap<blofeld::infinite::s_explicitshaders>(blofeld::infinite::s_explicitshaders& value)
{
	byteswap(value.anytag);
	byteswap(value.explicit_shaders_block);
}

template<> void byteswap<blofeld::infinite::s_explicitshadertable>(blofeld::infinite::s_explicitshadertable& value)
{
	byteswap(value.anytag);
	byteswap(value.name_to_path_map);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsforwardfastlight>(blofeld::infinite::s_i343graphicsforwardfastlight& value)
{
	byteswap(value.color);
	byteswap(value.min_roughness);
	byteswap(value.direction_vector);
	byteswap(value.diffuse_intensity);
	byteswap(value.specular_intensity);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsforwardfastlightingtag>(blofeld::infinite::s_i343graphicsforwardfastlightingtag& value)
{
	byteswap(value.anytag);
	byteswap(value.lights_block);
	byteswap(value.diffuse_cubemap);
	byteswap(value.alpha_value_for_parts_not_highlighted);
	byteswap(value.diffuse_cubemap_mip_to_sample);
	byteswap(value.indirect_diffuse_intensity);
	byteswap(value.indirect_specular_intensity);
}

template<> void byteswap<blofeld::infinite::s_enginefanfarefanfaredefinition>(blofeld::infinite::s_enginefanfarefanfaredefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.type);
	byteswap(value.priority);
	byteswap(value.string_identifier);
	byteswap(value.sprite_index);
	byteswap(value.display_time_in_seconds);
	byteswap(value.screen);
	byteswap(value.sound);
}

template<> void byteswap<blofeld::infinite::s_fixeddepthquadtreenode>(blofeld::infinite::s_fixeddepthquadtreenode& value)
{
	byteswap(value.x0);
	byteswap(value.x1);
	byteswap(value.y0);
	byteswap(value.y1);
	byteswap(value.z0);
	byteswap(value.z1);
}

template<> void byteswap<blofeld::infinite::s_fixeddepthquadtreetri>(blofeld::infinite::s_fixeddepthquadtreetri& value)
{
	byteswap(value.v0);
	byteswap(value.v1);
	byteswap(value.v2);
}

template<> void byteswap<blofeld::infinite::s_fixeddepthquadtreegeo>(blofeld::infinite::s_fixeddepthquadtreegeo& value)
{
	byteswap(value.raw_vertices_block);
}

template<> void byteswap<blofeld::infinite::s_fixeddepthquadtree>(blofeld::infinite::s_fixeddepthquadtree& value)
{
	byteswap(value.anytag);
	byteswap(value.max_depth);
	byteswap(value.node_list_block);
	byteswap(value.geo_block);
}

template<> void byteswap<blofeld::infinite::s_animframeevent>(blofeld::infinite::s_animframeevent& value)
{
	byteswap(value.frame);
	byteswap(value.anim_event_type);
}

template<> void byteswap<blofeld::infinite::s_animfunction>(blofeld::infinite::s_animfunction& value)
{
	byteswap(value.function_name);
	byteswap(value.comment);
	byteswap(value.function_curve);
}

template<> void byteswap<blofeld::infinite::s_animframeevents>(blofeld::infinite::s_animframeevents& value)
{
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.frame_events_block);
	byteswap(value.functions_block);
}

template<> void byteswap<blofeld::infinite::s_animationframeeventlist>(blofeld::infinite::s_animationframeeventlist& value)
{
	byteswap(value.anytag);
	byteswap(value.animations_block);
}

template<> void byteswap<blofeld::infinite::s_soundevententry>(blofeld::infinite::s_soundevententry& value)
{
	byteswap(value.sound);
	byteswap(value.key_event_flags);
	byteswap(value.model_reference);
	byteswap(value.model_variant);
	byteswap(value.weapon_reference);
	byteswap(value.weapon_variant);
}

template<> void byteswap<blofeld::infinite::s_animationsounds>(blofeld::infinite::s_animationsounds& value)
{
	byteswap(value.unique_id);
	byteswap(value.name);
	byteswap(value.sounds_block);
}

template<> void byteswap<blofeld::infinite::s_animationdialogues>(blofeld::infinite::s_animationdialogues& value)
{
	byteswap(value.unique_id);
	byteswap(value.vocialization_name);
	byteswap(value.dialogue_play_restrictions);
}

template<> void byteswap<blofeld::infinite::s_soundevent>(blofeld::infinite::s_soundevent& value)
{
	byteswap(value.frame);
	byteswap(value.marker_name);
	byteswap(value.sound_id);
	byteswap(value.sound);
}

template<> void byteswap<blofeld::infinite::s_dialogevent>(blofeld::infinite::s_dialogevent& value)
{
	byteswap(value.frame);
	byteswap(value.marker_name);
	byteswap(value.dialogue_id);
	byteswap(value.dialogue);
}

template<> void byteswap<blofeld::infinite::s_audioframeevents>(blofeld::infinite::s_audioframeevents& value)
{
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.sound_events_block);
	byteswap(value.dialogue_events_block);
}

template<> void byteswap<blofeld::infinite::s_animationframeeventlistaudio>(blofeld::infinite::s_animationframeeventlistaudio& value)
{
	byteswap(value.anytag);
	byteswap(value.library);
	byteswap(value.sounds_block);
	byteswap(value.dialogues_block);
	byteswap(value.animations_block);
}

template<> void byteswap<blofeld::infinite::s_effectdefinition>(blofeld::infinite::s_effectdefinition& value)
{
	byteswap(value.effect);
	byteswap(value.key_event_flags);
	byteswap(value.model_reference);
	byteswap(value.model_variant);
	byteswap(value.weapon_reference);
	byteswap(value.weapon_variant);
}

template<> void byteswap<blofeld::infinite::s_animationeffects>(blofeld::infinite::s_animationeffects& value)
{
	byteswap(value.unique_id);
	byteswap(value.name);
	byteswap(value.effects_block);
}

template<> void byteswap<blofeld::infinite::s_effectframeevent>(blofeld::infinite::s_effectframeevent& value)
{
	byteswap(value.frame);
	byteswap(value.marker_name);
	byteswap(value.effect_id);
	byteswap(value.effect);
}

template<> void byteswap<blofeld::infinite::s_effectframeevents>(blofeld::infinite::s_effectframeevents& value)
{
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.effect_events_block);
}

template<> void byteswap<blofeld::infinite::s_animationframeeventlisteffects>(blofeld::infinite::s_animationframeeventlisteffects& value)
{
	byteswap(value.anytag);
	byteswap(value.library);
	byteswap(value.effects_block);
	byteswap(value.animations_block);
}

template<> void byteswap<blofeld::infinite::s_animationframeeventlistaudio_v0>(blofeld::infinite::s_animationframeeventlistaudio_v0& value)
{
	byteswap(value.anytag);
	byteswap(value.library);
	byteswap(value.sounds_block);
	byteswap(value.dialogues_block);
	byteswap(value.animations_block);
}

template<> void byteswap<blofeld::infinite::s_animationframeeventlisteffects_v0>(blofeld::infinite::s_animationframeeventlisteffects_v0& value)
{
	byteswap(value.anytag);
	byteswap(value.library);
	byteswap(value.effects_block);
	byteswap(value.animations_block);
}

template<> void byteswap<blofeld::infinite::s_soundeventreference>(blofeld::infinite::s_soundeventreference& value)
{
	byteswap(value.sound);
	byteswap(value.flags);
	byteswap(value.model);
	byteswap(value.model_variant);
	byteswap(value.weapon);
	byteswap(value.weapon_variant);
}

template<> void byteswap<blofeld::infinite::s_soundeventreferenceset>(blofeld::infinite::s_soundeventreferenceset& value)
{
	byteswap(value.name);
	byteswap(value.sounds_block);
}

template<> void byteswap<blofeld::infinite::s_animationgraphdialoguereference>(blofeld::infinite::s_animationgraphdialoguereference& value)
{
	byteswap(value.vocalization_name);
	byteswap(value.play_restriction);
}

template<> void byteswap<blofeld::infinite::s_soundframeeventdescriptor>(blofeld::infinite::s_soundframeeventdescriptor& value)
{
	byteswap(value.linked_frame_event_id);
	byteswap(value.sound);
	byteswap(value.frame_offset);
	byteswap(value.marker_name);
}

template<> void byteswap<blofeld::infinite::s_dialogueframeeventdescriptor>(blofeld::infinite::s_dialogueframeeventdescriptor& value)
{
	byteswap(value.linked_frame_event_id);
	byteswap(value.dialogue_reference);
	byteswap(value.frame_offset);
}

template<> void byteswap<blofeld::infinite::s_audioframeeventcontainer>(blofeld::infinite::s_audioframeeventcontainer& value)
{
	byteswap(value.animation_name);
	byteswap(value.sound_events_block);
	byteswap(value.dialogue_events_block);
}

template<> void byteswap<blofeld::infinite::s_c_animation_frame_event_list_audio>(blofeld::infinite::s_c_animation_frame_event_list_audio& value)
{
	byteswap(value.anytag);
	byteswap(value.sound_references_block);
	byteswap(value.dialogue_references_block);
	byteswap(value.frame_event_containers_block);
}

template<> void byteswap<blofeld::infinite::s_animframeeventdescriptor>(blofeld::infinite::s_animframeeventdescriptor& value)
{
	byteswap(value.linked_frame_event_id);
	byteswap(value.frame_offset);
	byteswap(value.marker_name);
}

template<> void byteswap<blofeld::infinite::s_animframeeventcontainer>(blofeld::infinite::s_animframeeventcontainer& value)
{
	byteswap(value.animation_name);
	byteswap(value.anim_events_block);
}

template<> void byteswap<blofeld::infinite::s_c_animation_frame_event_list_anim>(blofeld::infinite::s_c_animation_frame_event_list_anim& value)
{
	byteswap(value.anytag);
	byteswap(value.frame_event_containers_block);
}

template<> void byteswap<blofeld::infinite::s_effecteventreference>(blofeld::infinite::s_effecteventreference& value)
{
	byteswap(value.effect);
	byteswap(value.flags);
	byteswap(value.model);
	byteswap(value.model_variant);
	byteswap(value.weapon);
	byteswap(value.weapon_variant);
}

template<> void byteswap<blofeld::infinite::s_effecteventreferenceset>(blofeld::infinite::s_effecteventreferenceset& value)
{
	byteswap(value.name);
	byteswap(value.effects_block);
}

template<> void byteswap<blofeld::infinite::s_effectframeeventdescriptor>(blofeld::infinite::s_effectframeeventdescriptor& value)
{
	byteswap(value.linked_frame_event_id);
	byteswap(value.effect);
	byteswap(value.frame_offset);
	byteswap(value.marker_name);
}

template<> void byteswap<blofeld::infinite::s_effectframeeventcontainer>(blofeld::infinite::s_effectframeeventcontainer& value)
{
	byteswap(value.animation_name);
	byteswap(value.effect_events_block);
}

template<> void byteswap<blofeld::infinite::s_c_animation_frame_event_list_effect>(blofeld::infinite::s_c_animation_frame_event_list_effect& value)
{
	byteswap(value.anytag);
	byteswap(value.effect_references_block);
	byteswap(value.frame_event_containers_block);
}

template<> void byteswap<blofeld::infinite::s_aiflocktag>(blofeld::infinite::s_aiflocktag& value)
{
	byteswap(value.anytag);
	byteswap(value.parent);
	byteswap(value.forward_weight);
	byteswap(value.leveling_force_weight);
	byteswap(value.destination_weight);
	byteswap(value.movement_weight_threshold);
	byteswap(value.target_weight);
	byteswap(value.target_distance);
	byteswap(value.target_delay_time);
	byteswap(value.target_kill_chance);
	byteswap(value.ai_destroy_chance);
	byteswap(value.random_offset_weight);
	byteswap(value.random_offset_period);
	byteswap(value.neighborhood_radius);
	byteswap(value.perception_angle);
	byteswap(value.avoidance_weight);
	byteswap(value.avoidance_radius);
	byteswap(value.alignment_weight);
	byteswap(value.position_weight);
	byteswap(value.position_radius);
	byteswap(value.battle_projectile_effect);
	byteswap(value.battle_projectile_effect_expensive);
	byteswap(value.battle_projectile_effect_cooldown);
	byteswap(value.battle_effect_offset);
	byteswap(value.editormetadata_block);
	byteswap(value.boid_scale_range);
	byteswap(value.perception_flags);
	byteswap(value.object_perception_radius);
	byteswap(value.vehicle_perception_radius);
	byteswap(value.danger_event_perception_radius);
	byteswap(value.spawn_flags);
	byteswap(value.generate_spawn_point_for_each_boid);
	byteswap(value.number_of_spawn_points);
	byteswap(value.distance_of_importance);
	byteswap(value.despawn_distance);
	byteswap(value.spawn_distance);
	byteswap(value.minimum_respawn_delay);
	byteswap(value.time_before_dehydration_hide_is_forced);
	byteswap(value.distance_enough_for_dehydration_hide);
	byteswap(value.spawn_priority);
	byteswap(value.disable_backward_flock_relevancy_reduce);
	byteswap(value.production_frequency_bounds);
	byteswap(value.high_lod_distance);
	byteswap(value.creature_asset);
	byteswap(value.creature_variant_name);
	byteswap(value.boid_count);
	byteswap(value.initial_behavior);
	byteswap(value.second_behavior);
	byteswap(value.reaction_behavior);
	byteswap(value.reaction_navigation_behavior);
	byteswap(value.second_reaction_behavior);
	byteswap(value.second_reaction_navigation_behavior);
	byteswap(value.despawn_reaction_behavior);
	byteswap(value.despawn_reaction_navigation_behavior);
	byteswap(value.event_memory_time);
	byteswap(value.return_after_disrupt_time);
	byteswap(value.flee_flags);
	byteswap(value.danger_weight);
	byteswap(value.additional_throttle);
	byteswap(value.time_before_hide_or_fly_away);
	byteswap(value.max_hide_time);
	byteswap(value.volume_containment_mode_evasion);
	byteswap(value.torus_inner_radius);
	byteswap(value.torus_cross_section_radius);
	byteswap(value.circling_direction);
	byteswap(value.leveling_coefficient);
	byteswap(value.traveling_spawn_radius);
	byteswap(value.distance_to_the_initial_destination);
	byteswap(value.distance_to_the_final_destination);
	byteswap(value.spawn_cylinder_radius);
	byteswap(value.spawn_cylinder_height);
	byteswap(value.wandering_time);
	byteswap(value.grazing_time);
	byteswap(value.change_of_direction_time);
	byteswap(value.flags);
	byteswap(value.wandering_to_same_source_point_is_allowed);
	byteswap(value.fly_on_fixed_height_flags);
	byteswap(value.fixed_height_from_ground);
	byteswap(value.height_rechecking_distance);
	byteswap(value.maximum_height_difference);
	byteswap(value.override_facing);
	byteswap(value.use_flock_formations);
	byteswap(value.ground_alignment);
	byteswap(value.default_throttle);
	byteswap(value.start_slowing_distance);
	byteswap(value.slowing_to_fraction);
	byteswap(value.desired_start_descending_height);
	byteswap(value.start_descending_distance);
	byteswap(value.descending_throttle_bounds);
	byteswap(value.stop_distance);
	byteswap(value.start_parking_height);
	byteswap(value.increased_noise_distance);
	byteswap(value.noise_increase_multiplier);
	byteswap(value.time_between_one_off_random_boid_sounds_default);
	byteswap(value.density_scaler_for_one_off_sounds_default);
	byteswap(value.time_between_one_off_random_boid_sounds_fleeing);
	byteswap(value.density_scaler_for_one_off_sounds_fleeing);
	byteswap(value.single_shot_sound_for_killed_by_the_player);
	byteswap(value.single_shot_sound_for_non_player_death);
	byteswap(value.single_shot_sound_for_despawn);
	byteswap(value.looping_sound_for_idle);
	byteswap(value.single_shot_sound_for_idle_randomly_plays);
	byteswap(value.looping_sound_for_moving);
	byteswap(value.single_shot_sound_for_moving_randomly_plays);
	byteswap(value.single_shot_sound_for_reacting_to_danger);
	byteswap(value.single_shot_sound_for_shooting);
	byteswap(value.proxy_object_asset);
	byteswap(value.proxy_object_node_graphs_block);
}

template<> void byteswap<blofeld::infinite::s_i343flinchflinchimpulsesettings>(blofeld::infinite::s_i343flinchflinchimpulsesettings& value)
{
	byteswap(value.flinch_direction);
	byteswap(value.flinch_mapping);
	byteswap(value.magnitude_range);
	byteswap(value.random_rotation);
	byteswap(value.absolute_flinch_angle);
	byteswap(value.normalized_screen_relative_absolute_flinch);
}

template<> void byteswap<blofeld::infinite::s_i343flinchflinchimpulseinternaldefinition>(blofeld::infinite::s_i343flinchflinchimpulseinternaldefinition& value)
{
	byteswap(value.gun_flinch);
	byteswap(value.view_flinch);
}

template<> void byteswap<blofeld::infinite::s_i343flinchflinchimpulsedefinition>(blofeld::infinite::s_i343flinchflinchimpulsedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.flinch_impulse);
}

template<> void byteswap<blofeld::infinite::s_i343proceduralmotionrecoilangulardefinition>(blofeld::infinite::s_i343proceduralmotionrecoilangulardefinition& value)
{
	byteswap(value.deceleration_away_from_center);
	byteswap(value.acceleration_to_center);
}

template<> void byteswap<blofeld::infinite::s_i343flinchflinchrecoilblock>(blofeld::infinite::s_i343flinchflinchrecoilblock& value)
{
	byteswap(value.recoil_return);
}

template<> void byteswap<blofeld::infinite::s_i343proceduralmotionspringdamperangulardefinition>(blofeld::infinite::s_i343proceduralmotionspringdamperangulardefinition& value)
{
	byteswap(value.spring_constant);
	byteswap(value.damping_ratio);
	byteswap(value.runtime_damping_constant);
}

template<> void byteswap<blofeld::infinite::s_i343flinchflinchspringdamperblock>(blofeld::infinite::s_i343flinchflinchspringdamperblock& value)
{
	byteswap(value.spring_damper);
}

template<> void byteswap<blofeld::infinite::s_i343flinchflinchsystemsettings>(blofeld::infinite::s_i343flinchflinchsystemsettings& value)
{
	byteswap(value.yaw_bounds);
	byteswap(value.pitch_bounds);
	byteswap(value.recoil_block);
	byteswap(value.spring_damper_block);
}

template<> void byteswap<blofeld::infinite::s_i343flinchflinchsysteminternaldefinition>(blofeld::infinite::s_i343flinchflinchsysteminternaldefinition& value)
{
	byteswap(value.gun_flinch);
	byteswap(value.view_flinch);
}

template<> void byteswap<blofeld::infinite::s_i343flinchflinchsystemdefinition>(blofeld::infinite::s_i343flinchflinchsystemdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.flinch_system);
}

template<> void byteswap<blofeld::infinite::s_loopingsounddefinition_blocksize64>(blofeld::infinite::s_loopingsounddefinition_blocksize64& value)
{
	byteswap(value.looping_sound_reference);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_loopingsoundcategory>(blofeld::infinite::s_loopingsoundcategory& value)
{
	byteswap(value.name);
	byteswap(value.sounds_block);
}

template<> void byteswap<blofeld::infinite::s_forgeloopingsoundcategories>(blofeld::infinite::s_forgeloopingsoundcategories& value)
{
	byteswap(value.anytag);
	byteswap(value.looping_sound_categories_block);
}

template<> void byteswap<blofeld::infinite::s_typeface>(blofeld::infinite::s_typeface& value)
{
	byteswap(value.font_name);
	byteswap(value.font_weight);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_languagetypeface>(blofeld::infinite::s_languagetypeface& value)
{
	byteswap(value.language);
	byteswap(value.replacement_typeface);
}

template<> void byteswap<blofeld::infinite::s_loctypeface>(blofeld::infinite::s_loctypeface& value)
{
	byteswap(value.typeface_name);
	byteswap(value.default_typeface);
	byteswap(value.language_specific_typefaces_block);
}

template<> void byteswap<blofeld::infinite::s_typefacedefinition>(blofeld::infinite::s_typefacedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.typefaces_block);
}

template<> void byteswap<blofeld::infinite::s_forgenamedtagref>(blofeld::infinite::s_forgenamedtagref& value)
{
	byteswap(value.name);
	byteswap(value._tag);
}

template<> void byteswap<blofeld::infinite::s_forgenamedtaglist>(blofeld::infinite::s_forgenamedtaglist& value)
{
	byteswap(value.listid);
	byteswap(value.items_block);
}

template<> void byteswap<blofeld::infinite::s_forgenamedtaglists>(blofeld::infinite::s_forgenamedtaglists& value)
{
	byteswap(value.anytag);
	byteswap(value.lists_block);
}

template<> void byteswap<blofeld::infinite::s_wpffontsetreferencesdefinition>(blofeld::infinite::s_wpffontsetreferencesdefinition& value)
{
	byteswap(value.font);
	byteswap(value.wpf_all_languages);
	byteswap(value.wpf_flags);
	byteswap(value.fasthud_all_languages);
	byteswap(value.fasthud_flags);
}

template<> void byteswap<blofeld::infinite::s_wpffontsetdefinition>(blofeld::infinite::s_wpffontsetdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.font_references_block);
}

template<> void byteswap<blofeld::infinite::s_foliageassettag>(blofeld::infinite::s_foliageassettag& value)
{
	byteswap(value.anytag);
	byteswap(value.asset);
	byteswap(value.foliage_variant_default_name);
}

template<> void byteswap<blofeld::infinite::s_s_atmosphere_definition>(blofeld::infinite::s_s_atmosphere_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.distance_bias);
	byteswap(value.sky_fog);
	byteswap(value.ground_fog);
	byteswap(value.ceiling_fog);
	byteswap(value.fog_light);
	byteswap(value.fog_globals);
	byteswap(value.flags);
	byteswap(value.sheet_density);
	byteswap(value.color_tint);
	byteswap(value.color_tint_inner);
	byteswap(value.intensity);
	byteswap(value.full_intensity_height);
	byteswap(value.half_intensity_height);
	byteswap(value.reference_plane_height);
	byteswap(value.volfog_flags);
	byteswap(value.volfog_color_1);
	byteswap(value.volfog_color_2);
	byteswap(value.volfog_density);
	byteswap(value.volfog_indirect_light_intensity);
	byteswap(value.volfog_light_intensity);
	byteswap(value.volfog_ambient_intensity);
	byteswap(value.volfog_sun_intensity);
	byteswap(value.volfog_near_range);
	byteswap(value.volfog_far_range);
	byteswap(value.volfog_range_exponent);
	byteswap(value.volfog_reprojection_weight);
	byteswap(value.volfog_inscatter_scale);
	byteswap(value.volfog_terrain_density_low);
	byteswap(value.volfog_terrain_density_high);
	byteswap(value.volfog_maximum_terrain_fog_height);
	byteswap(value.volfog_terrain_fog_falloff_exponent);
	byteswap(value.volfog_noise_scale);
	byteswap(value.volfog_noise_wind_influence);
	byteswap(value.volfog_noise_input_min);
	byteswap(value.volfog_noise_input_max);
	byteswap(value.volfog_noise_output_min);
	byteswap(value.volfog_noise_output_max);
	byteswap(value.volfog_noise_terrain_follow_intensity);
	byteswap(value.volfog_natural_light_near_intensity);
	byteswap(value.volfog_natural_light_far_intensity);
	byteswap(value.volfog_natural_light_range_near);
	byteswap(value.volfog_natural_light_range_far);
	byteswap(value.volfog_local_light_near_intensity);
	byteswap(value.volfog_local_light_far_intensity);
	byteswap(value.volfog_local_light_range_near);
	byteswap(value.volfog_local_light_range_far);
	byteswap(value.crepuscular_ray);
}

template<> void byteswap<blofeld::infinite::s_s_bool_property>(blofeld::infinite::s_s_bool_property& value)
{
	byteswap(value.name);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_s_numeric_property>(blofeld::infinite::s_s_numeric_property& value)
{
	byteswap(value.name);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_s_string_property>(blofeld::infinite::s_s_string_property& value)
{
	byteswap(value.name);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_s_tag_property>(blofeld::infinite::s_s_tag_property& value)
{
	byteswap(value.name);
	byteswap(value.value);
	byteswap(value.load_variant);
}

template<> void byteswap<blofeld::infinite::s_s_color_property>(blofeld::infinite::s_s_color_property& value)
{
	byteswap(value.name);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_s_vector_property>(blofeld::infinite::s_s_vector_property& value)
{
	byteswap(value.name);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_s_property_collection>(blofeld::infinite::s_s_property_collection& value)
{
	byteswap(value.bool_properties_block);
	byteswap(value.numeric_properties_block);
	byteswap(value.string_properties_block);
	byteswap(value.tag_properties_block);
	byteswap(value.color_properties_block);
	byteswap(value.vector_properties_block);
}

template<> void byteswap<blofeld::infinite::s_forgeengineforgekitobject>(blofeld::infinite::s_forgeengineforgekitobject& value)
{
	byteswap(value.name);
	byteswap(value.object);
	byteswap(value.asset_variant_name);
	byteswap(value.asset_geo);
	byteswap(value.asset_collision_geo);
	byteswap(value.material_palette);
	byteswap(value.position);
	byteswap(value.rotation);
	byteswap(value.scale);
}

template<> void byteswap<blofeld::infinite::s_forgeengineforgekitgroup>(blofeld::infinite::s_forgeengineforgekitgroup& value)
{
	byteswap(value.name);
	byteswap(value.parent_name);
	byteswap(value.group_index);
	byteswap(value.parent_group_index);
	byteswap(value.script_tag);
	byteswap(value.scriptable_properties);
	byteswap(value.objects_block);
}

template<> void byteswap<blofeld::infinite::s_forgeengineforgekitdefinition>(blofeld::infinite::s_forgeengineforgekitdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.original_kit);
	byteswap(value.kit_groups_block);
	byteswap(value.child_object_count);
	byteswap(value.menu_item_definitions);
}

template<> void byteswap<blofeld::infinite::s_antialiasdata>(blofeld::infinite::s_antialiasdata& value)
{
	byteswap(value.antialiasdata);
}

template<> void byteswap<blofeld::infinite::s_wpffontdefinition>(blofeld::infinite::s_wpffontdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.font_name);
	byteswap(value.render_mode);
	byteswap(value.anti_alias_data);
	byteswap(value.font_file_resource);
}

template<> void byteswap<blofeld::infinite::s_forgeengineforgeobjectdefinitionvariant>(blofeld::infinite::s_forgeengineforgeobjectdefinitionvariant& value)
{
	byteswap(value.representation_name);
	byteswap(value.crate_variant);
	byteswap(value.object_definition_crate);
	byteswap(value.menu_item_definitions);
}

template<> void byteswap<blofeld::infinite::s_forgeengineforgeassetvariant>(blofeld::infinite::s_forgeengineforgeassetvariant& value)
{
	byteswap(value.variant_name);
	byteswap(value.runtime_underlying_geo_static_io);
	byteswap(value.runtime_underlying_collision_geo_static_io);
	byteswap(value.runtime_underlying_material_palette_static_io);
}

template<> void byteswap<blofeld::infinite::s_forgeengineswatchgroupname>(blofeld::infinite::s_forgeengineswatchgroupname& value)
{
	byteswap(value.swatch_group_name);
}

template<> void byteswap<blofeld::infinite::s_forgeenginematerialregionsettings>(blofeld::infinite::s_forgeenginematerialregionsettings& value)
{
	byteswap(value.swatch_groups_block);
	byteswap(value.force_region_always_visible);
	byteswap(value.is_swatch_editable);
	byteswap(value.is_color_editable);
	byteswap(value.is_roughness_editable);
	byteswap(value.is_metalness__editable);
	byteswap(value.color_variant);
}

template<> void byteswap<blofeld::infinite::s_forgeengineforgeobjectconfigoptions>(blofeld::infinite::s_forgeengineforgeobjectconfigoptions& value)
{
	byteswap(value.property_flags);
	byteswap(value.configuration);
	byteswap(value.starting_yaw_pitch_roll);
	byteswap(value.default_physics_mode);
	byteswap(value.collision_mode);
	byteswap(value.scale_limit_type);
	byteswap(value.starting_scale);
	byteswap(value.minimum_scale);
	byteswap(value.maximum_scale);
	byteswap(value.settings_region_1);
	byteswap(value.settings_region_2);
	byteswap(value.settings_region_3);
	byteswap(value.settings_overlay);
}

template<> void byteswap<blofeld::infinite::s_forgeengineforgeobjectdata>(blofeld::infinite::s_forgeengineforgeobjectdata& value)
{
	byteswap(value.anytag);
	byteswap(value.static_io_representation);
	byteswap(value.asset_variant_to_be_used_with_the_static_io_representation);
	byteswap(value.object_representations_block);
	byteswap(value.runtime_variants_block);
	byteswap(value.runtime_telescoping_asset);
	byteswap(value.forge_kit);
	byteswap(value.default_representation_asset_variant_or_object_representation_name);
	byteswap(value.configuration_options);
}

template<> void byteswap<blofeld::infinite::s_forgeengineforgeobjectmetadata>(blofeld::infinite::s_forgeengineforgeobjectmetadata& value)
{
	byteswap(value.keyword);
}

template<> void byteswap<blofeld::infinite::s_forgeengineforgeobjectmanifestentry>(blofeld::infinite::s_forgeengineforgeobjectmanifestentry& value)
{
	byteswap(value.forge_object);
	byteswap(value.name);
	byteswap(value.description);
	byteswap(value.thumbnail);
	byteswap(value.object_metadata_block);
}

template<> void byteswap<blofeld::infinite::s_forgeengineforgeobjectcategoryentry>(blofeld::infinite::s_forgeengineforgeobjectcategoryentry& value)
{
	byteswap(value.title);
	byteswap(value.description);
	byteswap(value.category_id);
	byteswap(value.parent_category_id);
}

template<> void byteswap<blofeld::infinite::s_forgeenginematerialstyleshader>(blofeld::infinite::s_forgeenginematerialstyleshader& value)
{
	byteswap(value.name);
	byteswap(value.palette);
	byteswap(value.coatingmaterialset);
}

template<> void byteswap<blofeld::infinite::s_forgeengineforgeobjectmanifest>(blofeld::infinite::s_forgeengineforgeobjectmanifest& value)
{
	byteswap(value.anytag);
	byteswap(value.forge_object_entries_block);
	byteswap(value.category_entries_block);
	byteswap(value.recent_objects_category_id);
	byteswap(value.prefabs_category_id);
	byteswap(value.styleshaders_block);
}

template<> void byteswap<blofeld::infinite::s_s_material_effect_material>(blofeld::infinite::s_s_material_effect_material& value)
{
	byteswap(value.tag_effect_or_sound);
	byteswap(value.secondary_tag_effect_or_sound);
	byteswap(value.material_name);
	byteswap(value.runtime_material_index);
	byteswap(value.sweetener_mode);
	byteswap(value.max_visibility_distance);
	byteswap(value.material_flags);
}

template<> void byteswap<blofeld::infinite::s_s_material_effect>(blofeld::infinite::s_s_material_effect& value)
{
	byteswap(value.sounds_block);
	byteswap(value.effects_block);
}

template<> void byteswap<blofeld::infinite::s_s_material_effects_definition>(blofeld::infinite::s_s_material_effects_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.effects_block);
}

template<> void byteswap<blofeld::infinite::s_forgeactionsoundsdefinition>(blofeld::infinite::s_forgeactionsoundsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.undo_sound);
	byteswap(value.redo_sound);
	byteswap(value.monitor_speed_change_sound);
	byteswap(value.error_sound);
	byteswap(value.menu_opened_sound);
	byteswap(value.menu_closed_sound);
	byteswap(value.object_select_sound);
	byteswap(value.object_deselect_sound);
	byteswap(value.object_snap_sound);
	byteswap(value.object_place_sound);
	byteswap(value.object_place_error_sound);
	byteswap(value.object_duplicate_sound);
	byteswap(value.object_delete_sound);
	byteswap(value.object_lock_focus_sound);
	byteswap(value.object_hide_sound);
	byteswap(value.object_show_sound);
	byteswap(value.object_lock_sound);
	byteswap(value.object_unlock_sound);
	byteswap(value.object_group_sound);
	byteswap(value.object_ungroup_sound);
	byteswap(value.object_rotate_sound);
	byteswap(value.object_scale_sound);
	byteswap(value.save_prefab_sound);
	byteswap(value.nodegraph_enter_editor_sound);
	byteswap(value.nodegraph_exit_editor_sound);
	byteswap(value.nodegraph_place_node_sound);
	byteswap(value.nodegraph_select_node_sound);
	byteswap(value.nodegraph_deselect_node_sound);
	byteswap(value.nodegraph_connect_nodes_sound);
	byteswap(value.nodegraph_disconnect_node_sound);
	byteswap(value.nodegraph_delete_node_sound);
	byteswap(value.nodegraph_duplicate_node_sound);
	byteswap(value.script_validation_success_sound);
	byteswap(value.script_validation_error_sound);
}

template<> void byteswap<blofeld::infinite::s_s_named_rgb_color>(blofeld::infinite::s_s_named_rgb_color& value)
{
	byteswap(value.name);
	byteswap(value.color);
}

template<> void byteswap<blofeld::infinite::s_forgecolorreference>(blofeld::infinite::s_forgecolorreference& value)
{
	byteswap(value.default_value);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_forgeenginemonitormovespeed>(blofeld::infinite::s_forgeenginemonitormovespeed& value)
{
	byteswap(value.name);
	byteswap(value.translation_speed);
	byteswap(value.rotation_speed);
	byteswap(value.scale_speed);
}

template<> void byteswap<blofeld::infinite::s_jumbotrondefinition>(blofeld::infinite::s_jumbotrondefinition& value)
{
	byteswap(value.jumbotron_ui_element);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_forgedwsconstants>(blofeld::infinite::s_forgedwsconstants& value)
{
	byteswap(value.min_sun_intensity);
	byteswap(value.max_sun_intensity);
	byteswap(value.min_static_tint_intensity);
	byteswap(value.max_static_tint_intensity);
	byteswap(value.min_sky_tint_intensity);
	byteswap(value.max_sky_tint_intensity);
	byteswap(value.min_wind_speed);
	byteswap(value.max_wind_speed);
	byteswap(value.min_explicit_camera_exposure);
	byteswap(value.max_explicit_camera_exposure);
	byteswap(value.default_ranged_camera_exposure);
	byteswap(value.max_camera_exposure_range);
	byteswap(value.min_fog_distance);
	byteswap(value.max_fog_distance);
	byteswap(value.min_fog_thickness);
	byteswap(value.max_fog_thickness);
	byteswap(value.min_fog_color_intensity);
	byteswap(value.max_fog_color_intensity);
}

template<> void byteswap<blofeld::infinite::s_forgegobodefinition>(blofeld::infinite::s_forgegobodefinition& value)
{
	byteswap(value.gobo_setting);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_scalarlightfunction>(blofeld::infinite::s_scalarlightfunction& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_forgelightintensityfunctiondefinition>(blofeld::infinite::s_forgelightintensityfunctiondefinition& value)
{
	byteswap(value.intensity_function);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_forgeareascreeneffectdefinition>(blofeld::infinite::s_forgeareascreeneffectdefinition& value)
{
	byteswap(value.area_screen_effect);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_forgeweathereffectdefinition>(blofeld::infinite::s_forgeweathereffectdefinition& value)
{
	byteswap(value.weather_effect);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_forgebitmapdefinition>(blofeld::infinite::s_forgebitmapdefinition& value)
{
	byteswap(value.bitmap);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_forgelensflaredefinition>(blofeld::infinite::s_forgelensflaredefinition& value)
{
	byteswap(value.lens_flare);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_forgelightconedefinition>(blofeld::infinite::s_forgelightconedefinition& value)
{
	byteswap(value.light_cone);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_scalesnapdefinition>(blofeld::infinite::s_scalesnapdefinition& value)
{
	byteswap(value.name);
	byteswap(value.scale_snap_amount_relative_to_default_size);
}

template<> void byteswap<blofeld::infinite::s_rotationsnapdefinition>(blofeld::infinite::s_rotationsnapdefinition& value)
{
	byteswap(value.name);
	byteswap(value.rotation_snap_amount_degrees);
}

template<> void byteswap<blofeld::infinite::s_translationsnapdefinition>(blofeld::infinite::s_translationsnapdefinition& value)
{
	byteswap(value.name);
	byteswap(value.translation_snap_amount_world_units);
}

template<> void byteswap<blofeld::infinite::s_forgelabeldefinition>(blofeld::infinite::s_forgelabeldefinition& value)
{
	byteswap(value.name);
	byteswap(value.label_display_name);
	byteswap(value.label_display_description);
	byteswap(value.application_rule);
	byteswap(value.side_effects_of_label);
}

template<> void byteswap<blofeld::infinite::s_forgeoutlinedefinition>(blofeld::infinite::s_forgeoutlinedefinition& value)
{
	byteswap(value.outline_type);
}

template<> void byteswap<blofeld::infinite::s_compositiondefinitionreference>(blofeld::infinite::s_compositiondefinitionreference& value)
{
	byteswap(value.composition_reference);
}

template<> void byteswap<blofeld::infinite::s_gametypecinematicname>(blofeld::infinite::s_gametypecinematicname& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_teaminfotocinematicanimation>(blofeld::infinite::s_teaminfotocinematicanimation& value)
{
	byteswap(value.player_index_in_team);
	byteswap(value.team_size);
	byteswap(value.team_relation);
	byteswap(value.cinematic_type);
	byteswap(value.model_animation_graph);
	byteswap(value.animation_name);
}

template<> void byteswap<blofeld::infinite::s_forgenodegraphschemadefinition>(blofeld::infinite::s_forgenodegraphschemadefinition& value)
{
	byteswap(value.graphschema);
}

template<> void byteswap<blofeld::infinite::s_loopingsounddefinition_blocksize32>(blofeld::infinite::s_loopingsounddefinition_blocksize32& value)
{
	byteswap(value.looping_sound_reference);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_reverbdefinition>(blofeld::infinite::s_reverbdefinition& value)
{
	byteswap(value.reverb_environment_reference);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_mixstatedefinition>(blofeld::infinite::s_mixstatedefinition& value)
{
	byteswap(value.mix_state_group);
	byteswap(value.mix_state_value);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_forgeambientsounds>(blofeld::infinite::s_forgeambientsounds& value)
{
	byteswap(value.base_air_sounds_block);
	byteswap(value.base_air_sweetener_sounds_block);
	byteswap(value.reverb_environments_block);
	byteswap(value.mix_states_block);
}

template<> void byteswap<blofeld::infinite::s_forgeglobalsdefinition>(blofeld::infinite::s_forgeglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.forge_colors_block);
	byteswap(value.forge_color_references_block);
	byteswap(value.magnet_effect_scenery);
	byteswap(value.parent_magnet_marker_name);
	byteswap(value.child_magnet_marker_name);
	byteswap(value.deprecated_delete_me_when_systems_team_says_its_okay_1);
	byteswap(value.deprecated_delete_me_when_systems_team_says_its_okay_2);
	byteswap(value.deprecated_delete_me_when_systems_team_says_its_okay_3);
	byteswap(value.deprecated_delete_me_when_systems_team_says_its_okay_4);
	byteswap(value.deprecated_delete_me_when_systems_team_says_its_okay_5);
	byteswap(value.deprecated_delete_me_when_systems_team_says_its_okay_6);
	byteswap(value.deprecated_delete_me_when_systems_team_says_its_okay_7);
	byteswap(value.deprecated_delete_me_when_systems_team_says_its_okay_8);
	byteswap(value.max_object_grab_range);
	byteswap(value.default_grab_distance_mult);
	byteswap(value.min_max_grab_distance_mult);
	byteswap(value.minimum_grab_distance_threshold);
	byteswap(value.maximum_grab_distance_threshold);
	byteswap(value.lock_on_time);
	byteswap(value.grab_cam_soft_ceiling_movement_speed);
	byteswap(value.grab_cam_inward_spring_constant);
	byteswap(value.grab_cam_outward_spring_constant);
	byteswap(value.camera_object_distance_threshold);
	byteswap(value.monitor_speed_multipliers_block);
	byteswap(value.monitor_boost_name);
	byteswap(value.monitor_boost_translation_speed);
	byteswap(value.monitor_boost_rotation_speed);
	byteswap(value.monitor_boost_scale_speed);
	byteswap(value.jumbotron_ui_element_block);
	byteswap(value.forge_dws_constants);
	byteswap(value.forge_gobo_definitions_block);
	byteswap(value.forge_light_intensity_function_definitions_block);
	byteswap(value.forge_area_screen_effect_definitions_block);
	byteswap(value.forge_weather_effect_definitions_block);
	byteswap(value.forge_patchy_fog_bitmaps_block);
	byteswap(value.forge_cloud_bitmaps_block);
	byteswap(value.forge_lens_flares_block);
	byteswap(value.forge_light_cones_block);
	byteswap(value.scale_snap_values_block);
	byteswap(value.rotation_snap_values_block);
	byteswap(value.translation_snap_values_block);
	byteswap(value.forge_required_resources);
	byteswap(value.rotation_handle_shader);
	byteswap(value.path_preview_shader);
	byteswap(value.global_label_values_block);
	byteswap(value.outline_type_definitions_block);
	byteswap(value.forge_intro_composition_name);
	byteswap(value.forge_intro_compositions_block);
	byteswap(value.forge_outro_composition_template);
	byteswap(value.forge_static_view_composition_template);
	byteswap(value.game_type_cinematic_names_block);
	byteswap(value.cinematic_player_animations_block);
	byteswap(value.default_boundary_shader);
	byteswap(value.m_rotationhandlepipelinestate);
	byteswap(value.m_pathpreviewpipelinestate);
	byteswap(value.m_defaultboundarypipelinestate);
	byteswap(value.m_handlewithdepthteststate);
	byteswap(value.forge_object_manifest);
	byteswap(value.forge_named_tag_lists);
	byteswap(value.forge_nodegraph_schema_block);
	byteswap(value.forge_script_brain_tag_reference);
	byteswap(value.forge_sound_tag_reference);
	byteswap(value.forge_ambient_sounds);
	byteswap(value.forge_looping_sound_categories);
	byteswap(value.forge_sound_response_sounds);
}

template<> void byteswap<blofeld::infinite::s_s_formation_point>(blofeld::infinite::s_s_formation_point& value)
{
	byteswap(value._angle);
	byteswap(value.offset);
}

template<> void byteswap<blofeld::infinite::s_s_formation_primitive>(blofeld::infinite::s_s_formation_primitive& value)
{
	byteswap(value.flags);
	byteswap(value.priority);
	byteswap(value.capacity);
	byteswap(value.dist_forwards);
	byteswap(value.dist_backwards);
	byteswap(value.rank_spacing);
	byteswap(value.file_spacing);
	byteswap(value.points_block);
}

template<> void byteswap<blofeld::infinite::s_s_formation_definition>(blofeld::infinite::s_s_formation_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.primitives_block);
}

template<> void byteswap<blofeld::infinite::s_forgeengineforgeobjectscriptpropertymenuitemstring>(blofeld::infinite::s_forgeengineforgeobjectscriptpropertymenuitemstring& value)
{
	byteswap(value._string);
	byteswap(value.string_literal);
}

template<> void byteswap<blofeld::infinite::s_forgeengineforgeobjectscriptpropertymenuitemdefinition>(blofeld::infinite::s_forgeengineforgeobjectscriptpropertymenuitemdefinition& value)
{
	byteswap(value.property);
	byteswap(value.title);
	byteswap(value.description);
	byteswap(value.property_name_literal);
	byteswap(value.value_type);
	byteswap(value.float_min);
	byteswap(value.float_max);
	byteswap(value.float_step);
	byteswap(value.string_list);
	byteswap(value.strings_block);
	byteswap(value.callback_name);
	byteswap(value.submenu_id);
	byteswap(value.submenu_description);
	byteswap(value.hidden_in_forge);
}

template<> void byteswap<blofeld::infinite::s_forgeengineforgeobjectscriptpropertymenuitemdefinitioncollection>(blofeld::infinite::s_forgeengineforgeobjectscriptpropertymenuitemdefinitioncollection& value)
{
	byteswap(value.anytag);
	byteswap(value.menu_item_definitions_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectsforgepalettedefinition>(blofeld::infinite::s_i343objectsforgepalettedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.parent_palette);
	byteswap(value.name);
	byteswap(value.description);
	byteswap(value.placement_priority);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_import_frame_event>(blofeld::infinite::s_s_import_frame_event& value)
{
	byteswap(value.event_name);
	byteswap(value.animation_name);
	byteswap(value.frame);
	byteswap(value.frame_offset);
	byteswap(value.type);
	byteswap(value.unique_id);
}

template<> void byteswap<blofeld::infinite::s_s_sound_event_extended_deprecated>(blofeld::infinite::s_s_sound_event_extended_deprecated& value)
{
	byteswap(value.frame_event);
	byteswap(value.sound);
	byteswap(value.frame_offset);
	byteswap(value.marker_name);
}

template<> void byteswap<blofeld::infinite::s_s_effect_event_extended_deprecated>(blofeld::infinite::s_s_effect_event_extended_deprecated& value)
{
	byteswap(value.frame_event);
	byteswap(value.effect);
	byteswap(value.frame_offset);
	byteswap(value.marker_name);
}

template<> void byteswap<blofeld::infinite::s_s_dialogue_event_extended_deprecated>(blofeld::infinite::s_s_dialogue_event_extended_deprecated& value)
{
	byteswap(value.frame_event);
	byteswap(value.dialogue_reference);
	byteswap(value.frame_offset);
}

template<> void byteswap<blofeld::infinite::s_s_import_animation_event>(blofeld::infinite::s_s_import_animation_event& value)
{
	byteswap(value.animation_name);
	byteswap(value.animation_frame_count);
	byteswap(value.animation_events_block);
	byteswap(value.sound_events_block);
	byteswap(value.effect_events_block);
	byteswap(value.dialogue_events_block);
}

template<> void byteswap<blofeld::infinite::s_c_animation_frame_event_list>(blofeld::infinite::s_c_animation_frame_event_list& value)
{
	byteswap(value.anytag);
	byteswap(value.sound_references_block);
	byteswap(value.dialogue_references_block);
	byteswap(value.effect_references_block);
	byteswap(value.frame_events_block);
	byteswap(value.audio_frame_events_tag);
	byteswap(value.effect_frame_events_tag);
}

template<> void byteswap<blofeld::infinite::s_engineforgesoundeventdefinition>(blofeld::infinite::s_engineforgesoundeventdefinition& value)
{
	byteswap(value.name);
	byteswap(value.sound_category);
	byteswap(value.sound_response);
}

template<> void byteswap<blofeld::infinite::s_engineforgesoundlistdefinition>(blofeld::infinite::s_engineforgesoundlistdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.entries_block);
}

template<> void byteswap<blofeld::infinite::s_forgesoundresponsedefinition>(blofeld::infinite::s_forgesoundresponsedefinition& value)
{
	byteswap(value.name);
	byteswap(value.sound_response_reference);
}

template<> void byteswap<blofeld::infinite::s_forgesoundresponsesounds>(blofeld::infinite::s_forgesoundresponsesounds& value)
{
	byteswap(value.anytag);
	byteswap(value.sound_response_sounds_block);
}

template<> void byteswap<blofeld::infinite::s_forgeenginetelescopingpoint>(blofeld::infinite::s_forgeenginetelescopingpoint& value)
{
	byteswap(value.point);
}

template<> void byteswap<blofeld::infinite::s_forgeenginetelescopingcorner>(blofeld::infinite::s_forgeenginetelescopingcorner& value)
{
	byteswap(value.object);
	byteswap(value.position);
	byteswap(value.variant);
	byteswap(value.tip);
	byteswap(value.magnets_block);
	byteswap(value.positionatminscale);
	byteswap(value.positionatmaxscale);
	byteswap(value.runtime_underlying_geo_static_io);
	byteswap(value.runtime_underlying_collision_geo_static_io);
	byteswap(value.runtime_underlying_material_palette_static_io);
}

template<> void byteswap<blofeld::infinite::s_forgeenginetelescopingedge>(blofeld::infinite::s_forgeenginetelescopingedge& value)
{
	byteswap(value.object);
	byteswap(value.position);
	byteswap(value.variant);
	byteswap(value.creasetip1);
	byteswap(value.creasetip2);
	byteswap(value.endpoints_block);
	byteswap(value.rotation);
	byteswap(value.objectspaceedgealignment);
	byteswap(value.magnets_block);
	byteswap(value.positionatminscale);
	byteswap(value.positionatmaxscale);
	byteswap(value.scaleatminscale);
	byteswap(value.scaleatmaxscale);
	byteswap(value.runtime_underlying_geo_static_io);
	byteswap(value.runtime_underlying_collision_geo_static_io);
	byteswap(value.runtime_underlying_material_palette_static_io);
}

template<> void byteswap<blofeld::infinite::s_forgeenginetelescopingface>(blofeld::infinite::s_forgeenginetelescopingface& value)
{
	byteswap(value.object);
	byteswap(value.position);
	byteswap(value.variant);
	byteswap(value.faceendpoints_block);
	byteswap(value.magnets_block);
	byteswap(value.runtime_underlying_geo_static_io);
	byteswap(value.runtime_underlying_collision_geo_static_io);
	byteswap(value.runtime_underlying_material_palette_static_io);
	byteswap(value.endpointsboundsmax);
	byteswap(value.endpointsboundsmin);
	byteswap(value.geoboundsmin);
	byteswap(value.geoboundsmax);
	byteswap(value.facewidthtomaintain);
	byteswap(value.positionatminscale);
	byteswap(value.positionatmaxscale);
	byteswap(value.scaleatminscale);
	byteswap(value.scaleatmaxscale);
}

template<> void byteswap<blofeld::infinite::s_forgeenginetelescopingassettag>(blofeld::infinite::s_forgeenginetelescopingassettag& value)
{
	byteswap(value.anytag);
	byteswap(value.telescopingsolutiontype);
	byteswap(value.corners_block);
	byteswap(value.edges_block);
	byteswap(value.faces_block);
	byteswap(value.scaleconstraint);
	byteswap(value.starting_scale);
	byteswap(value.minimum_scale);
	byteswap(value.maximum_scale);
	byteswap(value.runtime_underlying_collision_geo_static_io);
	byteswap(value.runtime_underlying_material_palette_static_io);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudresourcehandledefinition>(blofeld::infinite::s_interfacefasthudresourcehandledefinition& value)
{
	byteswap(value.resource_type);
	byteswap(value.resource_index);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudresourceentrydefinition>(blofeld::infinite::s_interfacefasthudresourceentrydefinition& value)
{
	byteswap(value.name);
	byteswap(value.handle);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudbooleandefinition>(blofeld::infinite::s_interfacefasthudbooleandefinition& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudintegerdefinition>(blofeld::infinite::s_interfacefasthudintegerdefinition& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudfloatdefinition>(blofeld::infinite::s_interfacefasthudfloatdefinition& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudfasthudcoloractualdata>(blofeld::infinite::s_interfacefasthudfasthudcoloractualdata& value)
{
	byteswap(value.name);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudfasthudcolor>(blofeld::infinite::s_interfacefasthudfasthudcolor& value)
{
	byteswap(value.value);
	byteswap(value.value_old_);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudpoint2fdefinition>(blofeld::infinite::s_interfacefasthudpoint2fdefinition& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudstringiddefinition>(blofeld::infinite::s_interfacefasthudstringiddefinition& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudbitmapgroupreferencedefinition>(blofeld::infinite::s_interfacefasthudbitmapgroupreferencedefinition& value)
{
	byteswap(value.asset_reference);
	byteswap(value.sprite_index);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudanimationbasedefinition>(blofeld::infinite::s_interfacefasthudanimationbasedefinition& value)
{
	byteswap(value.target);
	byteswap(value.repeat_behavior);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudfloatanimationdefinition>(blofeld::infinite::s_interfacefasthudfloatanimationdefinition& value)
{
	byteswap(value.animation_base);
	byteswap(value.flags);
	byteswap(value.from);
	byteswap(value.to);
	byteswap(value.duration);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudcoloranimationdefinition>(blofeld::infinite::s_interfacefasthudcoloranimationdefinition& value)
{
	byteswap(value.animation_base);
	byteswap(value.flags);
	byteswap(value.from);
	byteswap(value.from_old_);
	byteswap(value.to);
	byteswap(value.to_old_);
	byteswap(value.duration);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudpoint2fanimationdefinition>(blofeld::infinite::s_interfacefasthudpoint2fanimationdefinition& value)
{
	byteswap(value.animation_base);
	byteswap(value.flags);
	byteswap(value.from);
	byteswap(value.to);
	byteswap(value.duration);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudintegeranimationdefinition>(blofeld::infinite::s_interfacefasthudintegeranimationdefinition& value)
{
	byteswap(value.animation_base);
	byteswap(value.flags);
	byteswap(value.from);
	byteswap(value.to);
	byteswap(value.duration);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudresourcehandle>(blofeld::infinite::s_interfacefasthudresourcehandle& value)
{
	byteswap(value.handle);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudstoryboarddefinition>(blofeld::infinite::s_interfacefasthudstoryboarddefinition& value)
{
	byteswap(value.timelines_block);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudnumericdisplaydefinition>(blofeld::infinite::s_interfacefasthudnumericdisplaydefinition& value)
{
	byteswap(value.extra_characters_used_in_display_in_addition_to_0_to_9);
	byteswap(value.asset_reference);
	byteswap(value.tint_color_of_the_numeric_display);
	byteswap(value.tint_color_old_);
	byteswap(value.alignment_point_on_screen);
	byteswap(value.numeric_display_alignment_based_on_alignment_point_given);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudvisualstatedefinition>(blofeld::infinite::s_interfacefasthudvisualstatedefinition& value)
{
	byteswap(value.name);
	byteswap(value.storyboard);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudvisualstategroupdefinition>(blofeld::infinite::s_interfacefasthudvisualstategroupdefinition& value)
{
	byteswap(value.visual_states_block);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudfloatanimationusingkeyframesdefinition>(blofeld::infinite::s_interfacefasthudfloatanimationusingkeyframesdefinition& value)
{
	byteswap(value.animation_base);
	byteswap(value.key_frames_block);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudfloatkeyframebasedefinition>(blofeld::infinite::s_interfacefasthudfloatkeyframebasedefinition& value)
{
	byteswap(value.key_time);
	byteswap(value.key_value);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudlinearfloatkeyframedefinition>(blofeld::infinite::s_interfacefasthudlinearfloatkeyframedefinition& value)
{
	byteswap(value.keyframebase);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthuddiscretefloatkeyframedefinition>(blofeld::infinite::s_interfacefasthuddiscretefloatkeyframedefinition& value)
{
	byteswap(value.keyframebase);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudcoloranimationusingkeyframesdefinition>(blofeld::infinite::s_interfacefasthudcoloranimationusingkeyframesdefinition& value)
{
	byteswap(value.animation_base);
	byteswap(value.key_frames_block);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudcolorkeyframebasedefinition>(blofeld::infinite::s_interfacefasthudcolorkeyframebasedefinition& value)
{
	byteswap(value.key_time);
	byteswap(value.key_value);
	byteswap(value.key_value_old_);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudlinearcolorkeyframedefinition>(blofeld::infinite::s_interfacefasthudlinearcolorkeyframedefinition& value)
{
	byteswap(value.keyframebase);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthuddiscretecolorkeyframedefinition>(blofeld::infinite::s_interfacefasthuddiscretecolorkeyframedefinition& value)
{
	byteswap(value.keyframebase);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudbooleananimationusingkeyframesdefinition>(blofeld::infinite::s_interfacefasthudbooleananimationusingkeyframesdefinition& value)
{
	byteswap(value.animation_base);
	byteswap(value.key_frames_block);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudbooleankeyframebasedefinition>(blofeld::infinite::s_interfacefasthudbooleankeyframebasedefinition& value)
{
	byteswap(value.key_time);
	byteswap(value.key_value);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthuddiscretebooleankeyframedefinition>(blofeld::infinite::s_interfacefasthuddiscretebooleankeyframedefinition& value)
{
	byteswap(value.keyframebase);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudpoint2fanimationusingkeyframesdefinition>(blofeld::infinite::s_interfacefasthudpoint2fanimationusingkeyframesdefinition& value)
{
	byteswap(value.animation_base);
	byteswap(value.key_frames_block);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudpoint2fkeyframebasedefinition>(blofeld::infinite::s_interfacefasthudpoint2fkeyframebasedefinition& value)
{
	byteswap(value.key_time);
	byteswap(value.key_value);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudlinearpoint2fkeyframedefinition>(blofeld::infinite::s_interfacefasthudlinearpoint2fkeyframedefinition& value)
{
	byteswap(value.keyframebase);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthuddiscretepoint2fkeyframedefinition>(blofeld::infinite::s_interfacefasthuddiscretepoint2fkeyframedefinition& value)
{
	byteswap(value.keyframebase);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudintegeranimationusingkeyframesdefinition>(blofeld::infinite::s_interfacefasthudintegeranimationusingkeyframesdefinition& value)
{
	byteswap(value.animation_base);
	byteswap(value.key_frames_block);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudintegerkeyframebasedefinition>(blofeld::infinite::s_interfacefasthudintegerkeyframebasedefinition& value)
{
	byteswap(value.key_time);
	byteswap(value.key_value);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudlinearintegerkeyframedefinition>(blofeld::infinite::s_interfacefasthudlinearintegerkeyframedefinition& value)
{
	byteswap(value.keyframebase);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthuddiscreteintegerkeyframedefinition>(blofeld::infinite::s_interfacefasthuddiscreteintegerkeyframedefinition& value)
{
	byteswap(value.keyframebase);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudrepeatbehaviordefinition>(blofeld::infinite::s_interfacefasthudrepeatbehaviordefinition& value)
{
	byteswap(value.flags);
	byteswap(value.count);
	byteswap(value.duration);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudsounddefinition>(blofeld::infinite::s_interfacefasthudsounddefinition& value)
{
	byteswap(value.asset_reference);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudsoundloopdefinition>(blofeld::infinite::s_interfacefasthudsoundloopdefinition& value)
{
	byteswap(value.asset_reference);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudnavpointlayoutreferencedefinition>(blofeld::infinite::s_interfacefasthudnavpointlayoutreferencedefinition& value)
{
	byteswap(value.tag_reference);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudnavpointanimationreferencedefinition>(blofeld::infinite::s_interfacefasthudnavpointanimationreferencedefinition& value)
{
	byteswap(value.tag_reference);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudstringtableentrydefinition>(blofeld::infinite::s_interfacefasthudstringtableentrydefinition& value)
{
	byteswap(value.data);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudstringtabledefinition>(blofeld::infinite::s_interfacefasthudstringtabledefinition& value)
{
	byteswap(value.entires_block);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudsubcomponentdefinition>(blofeld::infinite::s_interfacefasthudsubcomponentdefinition& value)
{
	byteswap(value.sub_component_reference);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudhudtwotonegradientdefinition>(blofeld::infinite::s_interfacefasthudhudtwotonegradientdefinition& value)
{
	byteswap(value.left_color);
	byteswap(value.left_color_old_);
	byteswap(value.right_color);
	byteswap(value.right_color_old_);
	byteswap(value.edge_filter_amount);
	byteswap(value.current_meter_value);
	byteswap(value.min_meter_value);
	byteswap(value.max_meter_value);
	byteswap(value.additive_blend_toggle);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudfontdefinition>(blofeld::infinite::s_interfacefasthudfontdefinition& value)
{
	byteswap(value.font_family_name);
	byteswap(value.tint_color);
	byteswap(value.tint_color_old_);
	byteswap(value.font_size);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudhighcontrastadditivedefinition>(blofeld::infinite::s_interfacefasthudhighcontrastadditivedefinition& value)
{
	byteswap(value.dynamic_threshold_min);
	byteswap(value.dynamic_threshold_max);
	byteswap(value.dynamic_threshold_clamp);
	byteswap(value.high_contrast_enable);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudvertexwarpdefinition>(blofeld::infinite::s_interfacefasthudvertexwarpdefinition& value)
{
	byteswap(value.ellipsoid_scale);
	byteswap(value.ellipsoid_center);
	byteswap(value.output_offset);
	byteswap(value.tessellation_x);
	byteswap(value.tessellation_y);
	byteswap(value.warp_enabled);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudcomponentresourcesdefinition>(blofeld::infinite::s_interfacefasthudcomponentresourcesdefinition& value)
{
	byteswap(value.entries_block);
	byteswap(value.booleans_block);
	byteswap(value.ints_block);
	byteswap(value.floats_block);
	byteswap(value.colors_block);
	byteswap(value.point2fs_block);
	byteswap(value.string_ids_block);
	byteswap(value.bitmaps_block);
	byteswap(value.floatanimations_block);
	byteswap(value.coloranimations_block);
	byteswap(value.point2fanimations_block);
	byteswap(value.integeranimations_block);
	byteswap(value.storyboards_block);
	byteswap(value.numericdisplay_block);
	byteswap(value.visualstates_block);
	byteswap(value.visualstategroups_block);
	byteswap(value.floatanimationusingkeyframes_block);
	byteswap(value.linearfloatkeyframes_block);
	byteswap(value.discretefloatkeyframes_block);
	byteswap(value.coloranimationusingkeyframes_block);
	byteswap(value.linearcolorkeyframes_block);
	byteswap(value.discretecolorkeyframes_block);
	byteswap(value.booleananimationusingkeyframes_block);
	byteswap(value.discretebooleankeyframes_block);
	byteswap(value.point2fanimationusingkeyframes_block);
	byteswap(value.linearpoint2fkeyframes_block);
	byteswap(value.discretepoint2fkeyframes_block);
	byteswap(value.integeranimationusingkeyframes_block);
	byteswap(value.linearintegerkeyframes_block);
	byteswap(value.discreteintegerkeyframes_block);
	byteswap(value.repeatbehaviors_block);
	byteswap(value.sound_block);
	byteswap(value.soundloop_block);
	byteswap(value.navpointlayouts_block);
	byteswap(value.navpointanimations_block);
	byteswap(value.stringtables_block);
	byteswap(value.subcomponents_block);
	byteswap(value.hudtwotonegradient_block);
	byteswap(value.font_block);
	byteswap(value.highcontrastadditive_block);
	byteswap(value.vertexwarp_block);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudcomponentdefinition>(blofeld::infinite::s_interfacefasthudcomponentdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value._class);
	byteswap(value.resources);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudscreencomponentreference>(blofeld::infinite::s_interfacefasthudscreencomponentreference& value)
{
	byteswap(value.reference);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudscreendefinition>(blofeld::infinite::s_interfacefasthudscreendefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.warp_params_name);
	byteswap(value.chromatic_aberration_params_name);
	byteswap(value.high_contrast_params_name);
	byteswap(value.components_block);
}

template<> void byteswap<blofeld::infinite::s_contenteffectplacement>(blofeld::infinite::s_contenteffectplacement& value)
{
	byteswap(value.effect);
	byteswap(value.position);
	byteswap(value.facing);
	byteswap(value.scale);
}

template<> void byteswap<blofeld::infinite::s_effectkittag>(blofeld::infinite::s_effectkittag& value)
{
	byteswap(value.anytag);
	byteswap(value.effect_placements_block);
	byteswap(value.overridecolor);
	byteswap(value.globalscale);
	byteswap(value.globalemissionareascale);
	byteswap(value.globalemissionratescale);
	byteswap(value.overrideloopstate);
	byteswap(value.placementmode);
	byteswap(value.generated_effect);
}

template<> void byteswap<blofeld::infinite::s_gameenginetextdefinition>(blofeld::infinite::s_gameenginetextdefinition& value)
{
	byteswap(value.text_source);
	byteswap(value.new_text_source);
}

template<> void byteswap<blofeld::infinite::s_s_game_engine_globals_definition>(blofeld::infinite::s_s_game_engine_globals_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.game_engine_text_block);
}

template<> void byteswap<blofeld::infinite::s_basicpresetdefinition>(blofeld::infinite::s_basicpresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.reflections);
	byteswap(value.volumetric_fog);
	byteswap(value.shadows);
	byteswap(value.sky_quality);
	byteswap(value.temporal_aa);
	byteswap(value.ambient_occlusion);
	byteswap(value.depth_of_field);
	byteswap(value.anisotropic_filtering);
	byteswap(value.terrain);
	byteswap(value.lighting);
	byteswap(value.decorators);
	byteswap(value.asset_category_preset);
	byteswap(value.dynamic_wind);
	byteswap(value.hlod_preset);
	byteswap(value.animation_quality);
	byteswap(value.flocks);
	byteswap(value.simulation_quality);
	byteswap(value.effects);
	byteswap(value.texture_quality);
	byteswap(value.decals);
	byteswap(value.shader_quality);
}

template<> void byteswap<blofeld::infinite::s_reflectionpresetdefinitionsplitscreenpreset>(blofeld::infinite::s_reflectionpresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.mode);
}

template<> void byteswap<blofeld::infinite::s_speccontrolvramsettings>(blofeld::infinite::s_speccontrolvramsettings& value)
{
	byteswap(value.initial_vram_usage);
	byteswap(value.vram_per_1_million_pixels);
}

template<> void byteswap<blofeld::infinite::s_reflectionpresetdefinition>(blofeld::infinite::s_reflectionpresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.mode);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_volumetricfogpresetdefinitionsplitscreenpreset>(blofeld::infinite::s_volumetricfogpresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.resolution);
	byteswap(value.volumetric_fog_flags);
}

template<> void byteswap<blofeld::infinite::s_volumetricfogpresetdefinition>(blofeld::infinite::s_volumetricfogpresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.resolution);
	byteswap(value.volumetric_fog_flags);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_shadowpresetdefinitionsplitscreenpreset>(blofeld::infinite::s_shadowpresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.dynamic_shadowmap_atlas_resolution);
	byteswap(value.dynamic_shadowmap_atlas_resolution_no_sun);
	byteswap(value.static_shadowmap_atlas_resolution);
	byteswap(value.deferred_shadow_mask);
	byteswap(value.contact_shadows);
	byteswap(value.local_lights_low_shadow_sampling);
	byteswap(value.local_lights_shadow_sampling_falloff);
}

template<> void byteswap<blofeld::infinite::s_shadowpresetdefinition>(blofeld::infinite::s_shadowpresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.dynamic_shadowmap_atlas_resolution);
	byteswap(value.dynamic_shadowmap_atlas_resolution_no_sun);
	byteswap(value.static_shadowmap_atlas_resolution);
	byteswap(value.deferred_shadow_mask);
	byteswap(value.contact_shadows);
	byteswap(value.local_lights_low_shadow_sampling);
	byteswap(value.local_lights_shadow_sampling_falloff);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_skyqualitypresetdefinitionsplitscreenpreset>(blofeld::infinite::s_skyqualitypresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.volumetric_clouds_enable_flag);
	byteswap(value.volumetric_clouds_rt_width_resolution);
	byteswap(value.volumetric_clouds_rt_height_resolution);
	byteswap(value.volumetric_clouds_depth_rt_resolution);
	byteswap(value.perlin_worley_noise_resolution);
	byteswap(value.worley_noise_resolution);
	byteswap(value.curl_noise_resolution);
	byteswap(value.volumetric_clouds_shape_ray_steps);
	byteswap(value.volumetric_clouds_lighting_ray_steps);
	byteswap(value.volumetric_clouds_beer_scale);
	byteswap(value.volumetric_clouds_cornette_scale);
	byteswap(value.volumetric_clouds_coverage_strength);
	byteswap(value.volumetric_clouds_perf_tier);
}

template<> void byteswap<blofeld::infinite::s_skyqualitypresetdefinition>(blofeld::infinite::s_skyqualitypresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.volumetric_clouds_enable_flag);
	byteswap(value.volumetric_clouds_rt_width_resolution);
	byteswap(value.volumetric_clouds_rt_height_resolution);
	byteswap(value.volumetric_clouds_depth_rt_resolution);
	byteswap(value.perlin_worley_noise_resolution);
	byteswap(value.worley_noise_resolution);
	byteswap(value.curl_noise_resolution);
	byteswap(value.volumetric_clouds_shape_ray_steps);
	byteswap(value.volumetric_clouds_lighting_ray_steps);
	byteswap(value.volumetric_clouds_beer_scale);
	byteswap(value.volumetric_clouds_cornette_scale);
	byteswap(value.volumetric_clouds_coverage_strength);
	byteswap(value.volumetric_clouds_perf_tier);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_temporalaapresetdefinitionsplitscreenpreset>(blofeld::infinite::s_temporalaapresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.enable_flag);
	byteswap(value.quality);
}

template<> void byteswap<blofeld::infinite::s_temporalaapresetdefinition>(blofeld::infinite::s_temporalaapresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.enable_flag);
	byteswap(value.quality);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_aopresetdefinitionsplitscreenpreset>(blofeld::infinite::s_aopresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.flags);
	byteswap(value.quality);
}

template<> void byteswap<blofeld::infinite::s_aopresetdefinition>(blofeld::infinite::s_aopresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.flags);
	byteswap(value.quality);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_depthoffieldpresetdefinitionsplitscreenpreset>(blofeld::infinite::s_depthoffieldpresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.ring_count);
	byteswap(value.blur_type);
}

template<> void byteswap<blofeld::infinite::s_depthoffieldpresetdefinition>(blofeld::infinite::s_depthoffieldpresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.ring_count);
	byteswap(value.blur_type);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_anisotropicfilteringpresetdefinitionsplitscreenpreset>(blofeld::infinite::s_anisotropicfilteringpresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.level);
}

template<> void byteswap<blofeld::infinite::s_anisotropicfilteringpresetdefinition>(blofeld::infinite::s_anisotropicfilteringpresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.level);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_terrainpresetdefinitionsplitscreenpreset>(blofeld::infinite::s_terrainpresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.lod_radius_factor);
}

template<> void byteswap<blofeld::infinite::s_terrainpresetdefinition>(blofeld::infinite::s_terrainpresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.lod_radius_factor);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_lightingpresetdefinition>(blofeld::infinite::s_lightingpresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_decoratorspresetdefinition>(blofeld::infinite::s_decoratorspresetdefinition& value)
{
	byteswap(value.push_bending);
	byteswap(value.preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_assetcategorypresetdefinition>(blofeld::infinite::s_assetcategorypresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_dynamicwindpresetdefinitionsplitscreenpreset>(blofeld::infinite::s_dynamicwindpresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.flags);
	byteswap(value.texel_size);
	byteswap(value.texture_resolution_x);
	byteswap(value.texture_resolution_y);
	byteswap(value.texture_resolution_z);
}

template<> void byteswap<blofeld::infinite::s_dynamicwindpresetdefinition>(blofeld::infinite::s_dynamicwindpresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_interactionpresetdefinitionsplitscreenpreset>(blofeld::infinite::s_interactionpresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.resolution);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_interactionpresetdefinition>(blofeld::infinite::s_interactionpresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_hlodpresetdefinition>(blofeld::infinite::s_hlodpresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.hlod_switch_distance_multiplier);
	byteswap(value.distant_geo_streaming_distance_multiplier);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_animationqualitypresetdefinition>(blofeld::infinite::s_animationqualitypresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_visualdamagepresetdefinitionsplitscreenpreset>(blofeld::infinite::s_visualdamagepresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.enable_flag);
	byteswap(value.mask_resolution);
}

template<> void byteswap<blofeld::infinite::s_visualdamagepresetdefinition>(blofeld::infinite::s_visualdamagepresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.enable_flag);
	byteswap(value.mask_resolution);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_virtualtexturingpresetdefinitionsplitscreenpreset>(blofeld::infinite::s_virtualtexturingpresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.desired_page_count);
	byteswap(value.max_pages_per_frame);
	byteswap(value.low_priority_pages_per_frame);
	byteswap(value.compression_quality);
	byteswap(value.virtual_texturing_flags);
}

template<> void byteswap<blofeld::infinite::s_virtualtexturingpresetdefinition>(blofeld::infinite::s_virtualtexturingpresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_flocksqualitypresetdefinition>(blofeld::infinite::s_flocksqualitypresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_simulationqualitypresetdefinition>(blofeld::infinite::s_simulationqualitypresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_effectspresetdefinitioneffectstreamingrelevancysettings>(blofeld::infinite::s_effectspresetdefinitioneffectstreamingrelevancysettings& value)
{
	byteswap(value.inner_radius);
	byteswap(value.outer_radius);
	byteswap(value.front_facing_radius);
	byteswap(value.front_facing_fov);
	byteswap(value.environment_effect_distance_scale);
	byteswap(value.sandbox_effect_distance_scale);
	byteswap(value.critical_effect_distance_scale);
}

template<> void byteswap<blofeld::infinite::s_effectspresetdefinitionsplitscreenpreset>(blofeld::infinite::s_effectspresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.effect_quality_options_flags);
	byteswap(value.dynamic_low_priority_culling_threshold);
	byteswap(value.low_priority_culling_distance);
	byteswap(value.dynamic_medium_priority_culling_threshold);
	byteswap(value.medium_priority_culling_distance);
	byteswap(value.distortion_throttling_threshold);
	byteswap(value.distortion_fade_threshold);
	byteswap(value.lod_distance_scaling);
	byteswap(value.lod_distance_dynamic_throttle_min);
	byteswap(value.lod_distance_dynamic_throttle_max);
	byteswap(value.cheap_light_falloff_throttle);
	byteswap(value.material_effects_distance_scalar);
	byteswap(value.effect_streaming_relevancy_settings);
}

template<> void byteswap<blofeld::infinite::s_effectspresetdefinition>(blofeld::infinite::s_effectspresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.effect_quality_options_flags);
	byteswap(value.dynamic_low_priority_culling_threshold);
	byteswap(value.low_priority_culling_distance);
	byteswap(value.dynamic_medium_priority_culling_threshold);
	byteswap(value.medium_priority_culling_distance);
	byteswap(value.distortion_throttling_threshold);
	byteswap(value.distortion_fade_threshold);
	byteswap(value.lod_distance_scaling);
	byteswap(value.lod_distance_dynamic_throttle_min);
	byteswap(value.lod_distance_dynamic_throttle_max);
	byteswap(value.cheap_light_falloff_throttle);
	byteswap(value.visual_damage_preset);
	byteswap(value.material_effects_distance_scalar);
	byteswap(value.chromatic_aberration_preset);
	byteswap(value.ui_preset);
	byteswap(value.effect_streaming_relevancy_settings);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_emblemqualitypresetdefinitionsplitscreenpreset>(blofeld::infinite::s_emblemqualitypresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.resolution);
}

template<> void byteswap<blofeld::infinite::s_emblemqualitypresetdefinition>(blofeld::infinite::s_emblemqualitypresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.resolution);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_texturequalitypresetdefinitionsplitscreenpreset>(blofeld::infinite::s_texturequalitypresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.texture_array_bias);
}

template<> void byteswap<blofeld::infinite::s_texturequalitypresetdefinition>(blofeld::infinite::s_texturequalitypresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.texture_prediction_resolution_limit);
	byteswap(value.texture_prediction_target_resolution);
	byteswap(value.emblem_quality_preset);
	byteswap(value.virtual_texturing_preset);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_chromaticaberrationpresetdefinition>(blofeld::infinite::s_chromaticaberrationpresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.number_of_samples);
}

template<> void byteswap<blofeld::infinite::s_uipresetdefinitionsplitscreenpreset>(blofeld::infinite::s_uipresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.bloom);
}

template<> void byteswap<blofeld::infinite::s_uipresetdefinition>(blofeld::infinite::s_uipresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.bloom);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
}

template<> void byteswap<blofeld::infinite::s_decalspresetdefinitionsplitscreenpreset>(blofeld::infinite::s_decalspresetdefinitionsplitscreenpreset& value)
{
	byteswap(value.max_decal_count);
	byteswap(value.decal_lifetime_scale);
	byteswap(value.max_clustered_decals);
	byteswap(value.blend_quality);
}

template<> void byteswap<blofeld::infinite::s_decalspresetdefinition>(blofeld::infinite::s_decalspresetdefinition& value)
{
	byteswap(value.preset);
	byteswap(value.max_decal_count);
	byteswap(value.decal_lifetime_scale);
	byteswap(value.max_clustered_decals);
	byteswap(value.blend_quality);
	byteswap(value.single_screen_preset);
	byteswap(value._2_player_splitscreen_preset);
	byteswap(value._3_player_splitscreen_preset);
	byteswap(value._4_player_splitscreen_preset);
	byteswap(value.vram);
}

template<> void byteswap<blofeld::infinite::s_shaderqualitypresetdefinition>(blofeld::infinite::s_shaderqualitypresetdefinition& value)
{
	byteswap(value.preset);
}

template<> void byteswap<blofeld::infinite::s_presetdefinitionstag>(blofeld::infinite::s_presetdefinitionstag& value)
{
	byteswap(value.anytag);
	byteswap(value.basic_presets_block);
	byteswap(value.reflection_presets_block);
	byteswap(value.volumetric_fog_presets_block);
	byteswap(value.shadow_presets_block);
	byteswap(value.sky_quality_presets_block);
	byteswap(value.temporal_aa_presets_block);
	byteswap(value.ao_presets_block);
	byteswap(value.depth_of_field_presets_block);
	byteswap(value.anisotropic_filtering_presets_block);
	byteswap(value.terrain_presets_block);
	byteswap(value.lighting_presets_block);
	byteswap(value.decorators_presets_block);
	byteswap(value.asset_category_presets_block);
	byteswap(value.dynamic_wind_presets_block);
	byteswap(value.push_bending_presets_block);
	byteswap(value.hlod_presets_block);
	byteswap(value.animation_quality_presets_block);
	byteswap(value.visual_damage_presets_block);
	byteswap(value.virtual_texturing_presets_block);
	byteswap(value.flocks_presets_block);
	byteswap(value.simulation_quality_presets_block);
	byteswap(value.effects_presets_block);
	byteswap(value.emblem_quality_presets_block);
	byteswap(value.texture_quality_presets_block);
	byteswap(value.chromatic_aberration_presets_block);
	byteswap(value.ui_presets_block);
	byteswap(value.decal_presets_block);
	byteswap(value.shader_quality_presets_block);
}

template<> void byteswap<blofeld::infinite::s_i343malleablepropertybaseshortstructdefinition>(blofeld::infinite::s_i343malleablepropertybaseshortstructdefinition& value)
{
	byteswap(value.base_value);
	byteswap(value.value_bounds);
}

template<> void byteswap<blofeld::infinite::s_gameglobalsgrenade>(blofeld::infinite::s_gameglobalsgrenade& value)
{
	byteswap(value.display_text_stringid);
	byteswap(value.description_text_stringid);
	byteswap(value.help_text_stringid);
	byteswap(value.grenade_switching_sound);
	byteswap(value.initial_count);
	byteswap(value.throwing_effect);
	byteswap(value.equipment);
	byteswap(value.projectile);
	byteswap(value.equipment_pve);
	byteswap(value.projectile_pve);
	byteswap(value.ui_display_info_block);
}

template<> void byteswap<blofeld::infinite::s_gameglobalsgrenadelist>(blofeld::infinite::s_gameglobalsgrenadelist& value)
{
	byteswap(value.anytag);
	byteswap(value.maximum_count);
	byteswap(value.slot_count$2);
	byteswap(value.grenades_block);
}

template<> void byteswap<blofeld::infinite::s_personalscorehighlighteventtierdefinition>(blofeld::infinite::s_personalscorehighlighteventtierdefinition& value)
{
	byteswap(value.name);
	byteswap(value.description);
}

template<> void byteswap<blofeld::infinite::s_personalscorehighlighteventdefinition>(blofeld::infinite::s_personalscorehighlighteventdefinition& value)
{
	byteswap(value.name);
	byteswap(value.sequence_index);
	byteswap(value.medal_weight);
	byteswap(value.tier_index);
}

template<> void byteswap<blofeld::infinite::s_highlighteventsglobals>(blofeld::infinite::s_highlighteventsglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.tiers_block);
	byteswap(value.personal_score_highlight_events_block);
}

template<> void byteswap<blofeld::infinite::s_s_camera_obstruction_parameters>(blofeld::infinite::s_s_camera_obstruction_parameters& value)
{
	byteswap(value.cylinder_fraction);
	byteswap(value.obstruction_test_angle);
	byteswap(value.obstruction_max_inward_accel);
	byteswap(value.obstruction_max_outward_accel);
	byteswap(value.obstruction_max_velocity);
	byteswap(value.obstruction_return_delay);
}

template<> void byteswap<blofeld::infinite::s_s_game_globals_camera>(blofeld::infinite::s_s_game_globals_camera& value)
{
	byteswap(value.default_unit_camera_track);
	byteswap(value.pitch_to_vertical_offset);
	byteswap(value.field_of_view);
	byteswap(value.yaw_scale);
	byteswap(value.pitch_scale);
	byteswap(value.forward_scale);
	byteswap(value.side_scale);
	byteswap(value.up_scale);
	byteswap(value.minimum_distance_to_player);
	byteswap(value.transition_time);
	byteswap(value.falling_death_transition_time);
	byteswap(value.initial_distance);
	byteswap(value.final_distance);
	byteswap(value.dead_cam_z_offset);
	byteswap(value.dead_cam_maximum_elevation);
	byteswap(value.dead_cam_movement_delay);
	byteswap(value.time_to_auto_switch_to_orbiting);
	byteswap(value.ignore_stick_time);
	byteswap(value.ignore_button_time);
	byteswap(value.dead_camera_minimum_falling_velocity);
	byteswap(value.maximum_boost_speed);
	byteswap(value.time_to_maximum_boost);
	byteswap(value.boost_function);
	byteswap(value.zoomed_field_of_view);
	byteswap(value.zoomed_look_speed);
	byteswap(value.bounding_sphere_radius);
	byteswap(value.flying_cam_movement_delay);
	byteswap(value.zoom_transition_time);
	byteswap(value.vertical_movement_time_to_max_speed);
	byteswap(value.vertical_movement_function);
	byteswap(value.minimum_distance);
	byteswap(value.maximum_distance);
	byteswap(value.initial_distance_on_focus);
	byteswap(value.orbit_cam_movement_delay);
	byteswap(value.orbit_cam_z_offset);
	byteswap(value.orbit_cam_minimum_elevation);
	byteswap(value.orbit_cam_maximum_elevation);
	byteswap(value.orbit_cam_use_targets_facing_direction_after_);
	byteswap(value.film_specific_tuning_orbit_cam_use_targets_facing_direction_after_);
	byteswap(value.orbit_cam_transition_to_targets_facing_direction_delay);
	byteswap(value.first_person_vertical_field_of_view);
	byteswap(value.max_playback_speed);
	byteswap(value.fade_out_time);
	byteswap(value.fade_in_time);
	byteswap(value.enter_vehicle_transition_time);
	byteswap(value.exit_vehicle_transition_time);
	byteswap(value.obstruction);
	byteswap(value.initial_distance$2);
	byteswap(value.kill_playback_camera_use_targets_facing_direction_for_);
	byteswap(value.kill_playback_camera_z_offset);
	byteswap(value.kill_playback_camera_initial_angle);
	byteswap(value.horizontal_fov_bounds);
	byteswap(value.editor_horizontal_fov_bounds);
}

template<> void byteswap<blofeld::infinite::s_s_camera_impulse_globals>(blofeld::infinite::s_s_camera_impulse_globals& value)
{
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_i343cameraglobals>(blofeld::infinite::s_i343cameraglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.camera_block);
	byteswap(value.camera_impulse_block);
}

template<> void byteswap<blofeld::infinite::s_i343cheatpowerups>(blofeld::infinite::s_i343cheatpowerups& value)
{
	byteswap(value.powerup);
}

template<> void byteswap<blofeld::infinite::s_i343cheatglobals>(blofeld::infinite::s_i343cheatglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.cheat_powerups_block);
}

template<> void byteswap<blofeld::infinite::s_composerstagecleanupreference>(blofeld::infinite::s_composerstagecleanupreference& value)
{
	byteswap(value.tag_reference);
}

template<> void byteswap<blofeld::infinite::s_composerglobalsdefinition>(blofeld::infinite::s_composerglobalsdefinition& value)
{
	byteswap(value.cinematic_film_aperture);
	byteswap(value.cinematic_skip_ui_up_time);
	byteswap(value.max_frames_jumped_to_trigger_sound);
	byteswap(value.start_script);
	byteswap(value.end_script);
	byteswap(value.skip_script);
	byteswap(value.start_next_show_script);
	byteswap(value.kill_previous_show_script);
	byteswap(value.stage_cleanup_preserve_block);
	byteswap(value.stream_pinned_resources_radius);
}

template<> void byteswap<blofeld::infinite::s_i343composerglobals>(blofeld::infinite::s_i343composerglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.composer_globals_block);
}

template<> void byteswap<blofeld::infinite::s_s_game_globals_input_abstraction>(blofeld::infinite::s_s_game_globals_input_abstraction& value)
{
	byteswap(value.axial_dead_zone);
	byteswap(value.radial_dead_zone);
}

template<> void byteswap<blofeld::infinite::s_s_controller_mapping_reference>(blofeld::infinite::s_s_controller_mapping_reference& value)
{
	byteswap(value.mapping);
	byteswap(value.default_binding_preset_name);
	byteswap(value.ui_string_id);
	byteswap(value.ui_description_string_id);
	byteswap(value.default_bindings);
}

template<> void byteswap<blofeld::infinite::s_i343playercontrolglobalsaxispairtype>(blofeld::infinite::s_i343playercontrolglobalsaxispairtype& value)
{
	byteswap(value.toggle_axis_id);
	byteswap(value.hold_axis_id);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_inputmappingfunctionblock>(blofeld::infinite::s_inputmappingfunctionblock& value)
{
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_s_gamepad_stick_settings>(blofeld::infinite::s_s_gamepad_stick_settings& value)
{
	byteswap(value.input_shape);
	byteswap(value.peg_threshold);
	byteswap(value.pegged_time);
	byteswap(value.pegged_scale);
	byteswap(value.peg_max_angular_velocity);
	byteswap(value.input_mapping_function_block);
}

template<> void byteswap<blofeld::infinite::s_s_game_globals_player_control>(blofeld::infinite::s_s_game_globals_player_control& value)
{
	byteswap(value.controller_button_mappings_block);
	byteswap(value.default_binding);
	byteswap(value.observer_controller_bindings);
	byteswap(value.tacmap_controller_bindings);
	byteswap(value.default_mouse_kb_bindings);
	byteswap(value.observer_mouse_kb_bindings);
	byteswap(value.tacmap_mouse_kb_bindings);
	byteswap(value.primary_on_foot);
	byteswap(value.secondary_on_foot);
	byteswap(value.primary_in_vehicle);
	byteswap(value.secondary_in_vehicle);
	byteswap(value.sprint_info);
	byteswap(value.zoom_info);
	byteswap(value.crouch_info);
	byteswap(value.auto_close_inventory_peek_time);
	byteswap(value.move_stick_info_block);
	byteswap(value.look_stick_info_block);
	byteswap(value.magnetism_friction);
	byteswap(value.magnetism_adhesion);
	byteswap(value.inconsequential_target_scale);
	byteswap(value.ads_magnetism_friction);
	byteswap(value.ads_magnetism_adhesion);
	byteswap(value.mouse_magnetism_scalar_whilst_firing);
	byteswap(value.mouse_magnetism_scalar_not_firing);
	byteswap(value.mouse_magnetism_decay);
	byteswap(value.crosshair_location);
	byteswap(value.gravity_scale);
	byteswap(value.minimum_angle_for_vehicle_flipping);
	byteswap(value.minimum_action_hold_time);
	byteswap(value.powerup_activation_max_hold_time);
	byteswap(value.switch_to_signature_weapon_hold_time);
	byteswap(value.pegged_zoom_suppression_threshold);
	byteswap(value.none);
	byteswap(value._14x);
	byteswap(value._25x);
	byteswap(value._30x);
	byteswap(value._50x);
	byteswap(value._60x);
	byteswap(value._100x);
	byteswap(value.active_look_input_type_detection_time);
	byteswap(value.minimum_vertical_velocity);
	byteswap(value.cooldown_time);
	byteswap(value.double_jump_velocity);
	byteswap(value.triple_jump_velocity);
	byteswap(value.flick_peg_jump_max_time);
	byteswap(value.double_tap_interval_time);
	byteswap(value.jump_forward_horizontal_speed_0);
	byteswap(value.jump_forward_horizontal_speed_1);
	byteswap(value.jump_forward_horizontal_speed_2);
	byteswap(value.jump_forward_gravity_0);
	byteswap(value.jump_forward_gravity_1);
	byteswap(value.jump_forward_gravity_2);
	byteswap(value.jump_forward_height);
	byteswap(value.jump_lateral_horizontal_speed_0);
	byteswap(value.jump_lateral_horizontal_speed_1);
	byteswap(value.jump_lateral_horizontal_speed_2);
	byteswap(value.jump_lateral_gravity_0);
	byteswap(value.jump_lateral_gravity_1);
	byteswap(value.jump_lateral_gravity_2);
	byteswap(value.jump_lateral_height);
	byteswap(value.jump_reverse_horizontal_speed_0);
	byteswap(value.jump_reverse_horizontal_speed_1);
	byteswap(value.jump_reverse_horizontal_speed_2);
	byteswap(value.jump_reverse_gravity_0);
	byteswap(value.jump_reverse_gravity_1);
	byteswap(value.jump_reverse_gravity_2);
	byteswap(value.jump_reverse_height);
	byteswap(value.jump_stationary_horizontal_speed_0);
	byteswap(value.jump_stationary_horizontal_speed_1);
	byteswap(value.jump_stationary_horizontal_speed_2);
	byteswap(value.jump_stationary_gravity_0);
	byteswap(value.jump_stationary_gravity_1);
	byteswap(value.jump_stationary_gravity_2);
	byteswap(value.jump_stationary_height);
}

template<> void byteswap<blofeld::infinite::s_inputscopetagref>(blofeld::infinite::s_inputscopetagref& value)
{
	byteswap(value.scope);
}

template<> void byteswap<blofeld::infinite::s_i343controlglobals>(blofeld::infinite::s_i343controlglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.controller_input_block);
	byteswap(value.player_control_block);
	byteswap(value.input_abstraction_globals_block);
}

template<> void byteswap<blofeld::infinite::s_multiplayer_color>(blofeld::infinite::s_multiplayer_color& value)
{
	byteswap(value.color);
}

template<> void byteswap<blofeld::infinite::s_i343emblemharmony>(blofeld::infinite::s_i343emblemharmony& value)
{
	byteswap(value.harmony_name);
	byteswap(value.primary_color);
	byteswap(value.secondary_color);
	byteswap(value.tertiary_color);
}

template<> void byteswap<blofeld::infinite::s_i343emblemharmonygroup>(blofeld::infinite::s_i343emblemharmonygroup& value)
{
	byteswap(value.harmony_group_name);
	byteswap(value.harmonies_block);
}

template<> void byteswap<blofeld::infinite::s_s_multiplayer_visor_color>(blofeld::infinite::s_s_multiplayer_visor_color& value)
{
	byteswap(value.name);
	byteswap(value.tertiary_color);
	byteswap(value.quaternary_color);
}

template<> void byteswap<blofeld::infinite::s_s_elite_specular_color>(blofeld::infinite::s_s_elite_specular_color& value)
{
	byteswap(value.tertiary_color);
	byteswap(value.quaternary_color);
}

template<> void byteswap<blofeld::infinite::s_i343colorglobals>(blofeld::infinite::s_i343colorglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.profile_colors_block);
	byteswap(value.emblem_colors_block);
	byteswap(value.visor_colors_block);
	byteswap(value.elite_specular_color);
}

template<> void byteswap<blofeld::infinite::s_s_armor_modifier_definition>(blofeld::infinite::s_s_armor_modifier_definition& value)
{
	byteswap(value.name);
	byteswap(value.damage_multiplier);
}

template<> void byteswap<blofeld::infinite::s_s_damage_group_definition>(blofeld::infinite::s_s_damage_group_definition& value)
{
	byteswap(value.name);
	byteswap(value.armor_modifiers_block);
}

template<> void byteswap<blofeld::infinite::s_s_damage_globals_definition>(blofeld::infinite::s_s_damage_globals_definition& value)
{
	byteswap(value.damage_groups_block);
}

template<> void byteswap<blofeld::infinite::s_i343damagedamagetypedefinition>(blofeld::infinite::s_i343damagedamagetypedefinition& value)
{
	byteswap(value.damage_type_name);
}

template<> void byteswap<blofeld::infinite::s_s_damage_decay>(blofeld::infinite::s_s_damage_decay& value)
{
	byteswap(value.current_damage_decay_delay);
	byteswap(value.current_damage_decay_time);
	byteswap(value.current_damage_decay_rate);
	byteswap(value.recent_damage_decay_delay);
	byteswap(value.recent_damage_decay_time);
}

template<> void byteswap<blofeld::infinite::s_i343damageplayeradditivesounddealdamagedefinition>(blofeld::infinite::s_i343damageplayeradditivesounddealdamagedefinition& value)
{
	byteswap(value.player_additive_sound_deal_damage_regular);
	byteswap(value.player_additive_sound_deal_damage_aoe);
	byteswap(value.player_additive_sound_deal_damage_friendly_fire);
	byteswap(value.player_additive_sound_deal_damage_weak_spot);
	byteswap(value.player_additive_sound_deal_damage_headshot);
	byteswap(value.player_additive_sound_deal_damage_kill);
	byteswap(value.player_additive_sound_deal_damage_headshot_kill);
}

template<> void byteswap<blofeld::infinite::s_s_game_globals_damage>(blofeld::infinite::s_s_game_globals_damage& value)
{
	byteswap(value.guardiansdamagesource);
	byteswap(value.unknowndamagetype);
	byteswap(value.genericcollisiondamagesource);
	byteswap(value.scriptingdamagesource);
	byteswap(value.instant_kill_damage);
	byteswap(value.falling_damage);
	byteswap(value.jumping_damage);
	byteswap(value.soft_landing_damage);
	byteswap(value.hard_landing_damage);
	byteswap(value.hs_damage);
	byteswap(value.hs_healing);
	byteswap(value.scriptingfiredamagesource);
	byteswap(value.hs_fire_damage);
	byteswap(value.terminalvelocitydamagesource);
	byteswap(value.terminal_velocity);
	byteswap(value.terminal_velocity_damage);
	byteswap(value.default_damage_response);
	byteswap(value.friendly_fire_damage_response);
	byteswap(value.player_shield_spillover);
	byteswap(value.damage_decay_props);
	byteswap(value.ai_damage_decay_props);
	byteswap(value.shield_impact_decay_props);
	byteswap(value.ai_stun_damage_decay_props);
	byteswap(value.medium_ping_decay_props);
	byteswap(value.hard_ping_decay_props);
	byteswap(value.deprecated_player_dealt_damage_additive_sound);
	byteswap(value.deprecated_player_dealt_aoe_damage_additive_sound);
	byteswap(value.deprecated_player_dealt_friendly_fire_additive_sound);
	byteswap(value.player_additive_sound_deal_damage);
	byteswap(value.player_received_damage_additive_sound_default);
	byteswap(value.player_received_damage_additive_sound_third_person);
	byteswap(value.player_received_damage_additive_sound_in_vehicle);
	byteswap(value.player_received_aoe_damage_additive_sound_default);
	byteswap(value.player_received_aoe_damage_additive_sound_third_person);
	byteswap(value.player_received_aoe_damage_additive_sound_in_vehicle);
	byteswap(value.player_died_from_aoe_damage_sound);
}

template<> void byteswap<blofeld::infinite::s_i343damageglobals>(blofeld::infinite::s_i343damageglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.damage_table_block);
	byteswap(value.damage_block);
}

template<> void byteswap<blofeld::infinite::s_colorlightfunction>(blofeld::infinite::s_colorlightfunction& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_s_cheap_light_definition>(blofeld::infinite::s_s_cheap_light_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.function_input);
	byteswap(value.version);
	byteswap(value.flags);
	byteswap(value.color_override_mode);
	byteswap(value.color$2);
	byteswap(value.intensity);
	byteswap(value.far_attenuation);
	byteswap(value.falloff_begin_ratio);
	byteswap(value.near_fade_distance);
	byteswap(value.camera_distance_fade_start);
	byteswap(value.camera_distance_fade_end);
	byteswap(value.diffuse_scalar);
	byteswap(value.specular_scalar);
	byteswap(value.fog_intensity);
	byteswap(value.particle_intensity);
	byteswap(value.mininum_roughness);
	byteswap(value.intensity_balancing);
	byteswap(value.area_light_radius);
	byteswap(value.light_group);
}

template<> void byteswap<blofeld::infinite::s_s_game_globals_difficulty_information>(blofeld::infinite::s_s_game_globals_difficulty_information& value)
{
	byteswap(value.easy_enemy_damage);
	byteswap(value.normal_enemy_damage);
	byteswap(value.hard_enemy_damage);
	byteswap(value.imposs_enemy_damage);
	byteswap(value.easy_enemy_vitality);
	byteswap(value.normal_enemy_vitality);
	byteswap(value.hard_enemy_vitality);
	byteswap(value.imposs_enemy_vitality);
	byteswap(value.easy_enemy_shield);
	byteswap(value.normal_enemy_shield);
	byteswap(value.hard_enemy_shield);
	byteswap(value.imposs_enemy_shield);
	byteswap(value.easy_enemy_recharge);
	byteswap(value.normal_enemy_recharge);
	byteswap(value.hard_enemy_recharge);
	byteswap(value.imposs_enemy_recharge);
	byteswap(value.easy_friend_damage);
	byteswap(value.normal_friend_damage);
	byteswap(value.hard_friend_damage);
	byteswap(value.imposs_friend_damage);
	byteswap(value.easy_friend_vitality);
	byteswap(value.normal_friend_vitality);
	byteswap(value.hard_friend_vitality);
	byteswap(value.imposs_friend_vitality);
	byteswap(value.easy_friend_shield);
	byteswap(value.normal_friend_shield);
	byteswap(value.hard_friend_shield);
	byteswap(value.imposs_friend_shield);
	byteswap(value.easy_friend_recharge);
	byteswap(value.normal_friend_recharge);
	byteswap(value.hard_friend_recharge);
	byteswap(value.imposs_friend_recharge);
	byteswap(value.easy_rate_of_fire);
	byteswap(value.normal_rate_of_fire);
	byteswap(value.hard_rate_of_fire);
	byteswap(value.imposs_rate_of_fire);
	byteswap(value.easy_projectile_error);
	byteswap(value.normal_projectile_error);
	byteswap(value.hard_projectile_error);
	byteswap(value.imposs_projectile_error);
	byteswap(value.easy_burst_error);
	byteswap(value.normal_burst_error);
	byteswap(value.hard_burst_error);
	byteswap(value.imposs_burst_error);
	byteswap(value.easy_new_target_delay);
	byteswap(value.normal_new_target_delay);
	byteswap(value.hard_new_target_delay);
	byteswap(value.imposs_new_target_delay);
	byteswap(value.easy_burst_separation);
	byteswap(value.normal_burst_separation);
	byteswap(value.hard_burst_separation);
	byteswap(value.imposs_burst_separation);
	byteswap(value.easy_target_tracking);
	byteswap(value.normal_target_tracking);
	byteswap(value.hard_target_tracking);
	byteswap(value.imposs_target_tracking);
	byteswap(value.easy_target_leading);
	byteswap(value.normal_target_leading);
	byteswap(value.hard_target_leading);
	byteswap(value.imposs_target_leading);
	byteswap(value.easy_overcharge_chance);
	byteswap(value.normal_overcharge_chance);
	byteswap(value.hard_overcharge_chance);
	byteswap(value.imposs_overcharge_chance);
	byteswap(value.easy_special_fire_delay);
	byteswap(value.normal_special_fire_delay);
	byteswap(value.hard_special_fire_delay);
	byteswap(value.imposs_special_fire_delay);
	byteswap(value.easy_guidance_vs_player);
	byteswap(value.normal_guidance_vs_player);
	byteswap(value.hard_guidance_vs_player);
	byteswap(value.imposs_guidance_vs_player);
	byteswap(value.easy_melee_delay_base);
	byteswap(value.normal_melee_delay_base);
	byteswap(value.hard_melee_delay_base);
	byteswap(value.imposs_melee_delay_base);
	byteswap(value.easy_melee_delay_scale);
	byteswap(value.normal_melee_delay_scale);
	byteswap(value.hard_melee_delay_scale);
	byteswap(value.imposs_melee_delay_scale);
	byteswap(value.easy_grenade_chance_scale);
	byteswap(value.normal_grenade_chance_scale);
	byteswap(value.hard_grenade_chance_scale);
	byteswap(value.imposs_grenade_chance_scale);
	byteswap(value.easy_grenade_timer_scale);
	byteswap(value.normal_grenade_timer_scale);
	byteswap(value.hard_grenade_timer_scale);
	byteswap(value.imposs_grenade_timer_scale);
	byteswap(value.easy_grenade_detonation_timer_scale);
	byteswap(value.normal_grenade_detonation_timer_scale);
	byteswap(value.hard_grenade_detonation_timer_scale);
	byteswap(value.imposs_grenade_detonation_timer_scale);
	byteswap(value.easy_grenade_arming_timer_scale);
	byteswap(value.normal_grenade_arming_timer_scale);
	byteswap(value.hard_grenade_arming_timer_scale);
	byteswap(value.imposs_grenade_arming_timer_scale);
	byteswap(value.easy_grenade_velocity_scale);
	byteswap(value.normal_grenade_velocity_scale);
	byteswap(value.hard_grenade_velocity_scale);
	byteswap(value.imposs_grenade_velocity_scale);
	byteswap(value.easy_major_upgrade_normal);
	byteswap(value.normal_major_upgrade_normal);
	byteswap(value.hard_major_upgrade_normal);
	byteswap(value.imposs_major_upgrade_normal);
	byteswap(value.easy_major_upgrade_few);
	byteswap(value.normal_major_upgrade_few);
	byteswap(value.hard_major_upgrade_few);
	byteswap(value.imposs_major_upgrade_few);
	byteswap(value.easy_major_upgrade_many);
	byteswap(value.normal_major_upgrade_many);
	byteswap(value.hard_major_upgrade_many);
	byteswap(value.imposs_major_upgrade_many);
	byteswap(value.easy_player_vehicle_ram_chance);
	byteswap(value.normal_player_vehicle_ram_chance);
	byteswap(value.hard_player_vehicle_ram_chance);
	byteswap(value.imposs_player_vehicle_ram_chance);
	byteswap(value.easy_trick_dodge_chance_scale);
	byteswap(value.normal_trick_dodge_chance_scale);
	byteswap(value.hard_trick_dodge_chance_scale);
	byteswap(value.imposs_trick_dodge_chance_scale);
	byteswap(value.easy_vehicle_boarding_chance);
	byteswap(value.normal_vehicle_boarding_chance);
	byteswap(value.hard_vehicle_boarding_chance);
	byteswap(value.imposs_vehicle_boarding_chance);
	byteswap(value.easy_hide_time);
	byteswap(value.normal_hide_time);
	byteswap(value.hard_hide_time);
	byteswap(value.imposs_hide_time);
	byteswap(value.easy_shield_fraction_hide);
	byteswap(value.normal_shield_fraction_hide);
	byteswap(value.hard_shield_fraction_hide);
	byteswap(value.imposs_shield_fraction_hide);
	byteswap(value.easy_cover_vitality_threshold);
	byteswap(value.normal_cover_vitality_threshold);
	byteswap(value.hard_cover_vitality_threshold);
	byteswap(value.imposs_cover_vitality_threshold);
	byteswap(value.easy_bunker_open_duration);
	byteswap(value.normal_bunker_open_duration);
	byteswap(value.hard_bunker_open_duration);
	byteswap(value.imposs_bunker_open_duration);
	byteswap(value.easy_bunker_closed_duration);
	byteswap(value.normal_bunker_closed_duration);
	byteswap(value.hard_bunker_closed_duration);
	byteswap(value.imposs_bunker_closed_duration);
	byteswap(value.easy_max_attackers);
	byteswap(value.normal_max_attackers);
	byteswap(value.hard_max_attackers);
	byteswap(value.imposs_max_attackers);
	byteswap(value.easy_max_high_tokens);
	byteswap(value.normal_max_high_tokens);
	byteswap(value.hard_max_high_tokens);
	byteswap(value.imposs_max_high_tokens);
	byteswap(value.easy_max_low_tokens);
	byteswap(value.normal_max_low_tokens);
	byteswap(value.hard_max_low_tokens);
	byteswap(value.imposs_max_low_tokens);
	byteswap(value.easy_max_engagement_tokens);
	byteswap(value.normal_max_engagement_tokens);
	byteswap(value.hard_max_engagement_tokens);
	byteswap(value.imposs_max_engagement_tokens);
	byteswap(value.easy_max_grenade_tokens);
	byteswap(value.normal_max_grenade_tokens);
	byteswap(value.hard_max_grenade_tokens);
	byteswap(value.imposs_max_grenade_tokens);
	byteswap(value.easy_grenade_token_cooldown);
	byteswap(value.normal_grenade_token_cooldown);
	byteswap(value.hard_grenade_token_cooldown);
	byteswap(value.imposs_grenade_token_cooldown);
	byteswap(value.easy_max_effectiveness_tokens);
	byteswap(value.normal_max_effectiveness_tokens);
	byteswap(value.hard_max_effectiveness_tokens);
	byteswap(value.imposs_max_effectiveness_tokens);
	byteswap(value.easy_weapon_fidget_chance_per_second);
	byteswap(value.normal_weapon_fidget_chance_per_second);
	byteswap(value.hard_weapon_fidget_chance_per_second);
	byteswap(value.imposs_weapon_fidget_chance_per_second);
}

template<> void byteswap<blofeld::infinite::s_s_game_globals_coop_difficulty_information>(blofeld::infinite::s_s_game_globals_coop_difficulty_information& value)
{
	byteswap(value.two_player_shield_recharge_delay);
	byteswap(value.four_player_shield_recharge_delay);
	byteswap(value.warzone_shield_recharge_delay);
	byteswap(value.two_player_shield_recharge_timer);
	byteswap(value.four_player_shield_recharge_timer);
	byteswap(value.warzone_shield_recharge_timer);
	byteswap(value.two_player_grenade_dive_chance);
	byteswap(value.four_player_grenade_dive_chance);
	byteswap(value.warzone_grenade_dive_chance);
	byteswap(value.two_player_evasion_danger_threshold);
	byteswap(value.four_player_evasion_danger_threshold);
	byteswap(value.warzone_evasion_danger_threshold);
	byteswap(value.two_player_evasion_delay_timer);
	byteswap(value.four_player_evasion_delay_timer);
	byteswap(value.warzone_evasion_delay_timer);
	byteswap(value.two_player_evasion_chance);
	byteswap(value.four_player_evasion_chance);
	byteswap(value.warzone_evasion_chance);
	byteswap(value.two_player_burst_duration);
	byteswap(value.four_player_burst_duration);
	byteswap(value.warzone_burst_duration);
	byteswap(value.two_player_burst_separation);
	byteswap(value.four_player_burst_separation);
	byteswap(value.warzone_burst_separation);
	byteswap(value.two_player_damage_modifier);
	byteswap(value.four_player_damage_modifier);
	byteswap(value.warzone_damage_modifier);
	byteswap(value.two_player_projectile_speed);
	byteswap(value.four_player_projectile_speed);
	byteswap(value.warzone_projectile_speed);
	byteswap(value.two_player_grenade_throw_chance);
	byteswap(value.four_player_grenade_throw_chance);
	byteswap(value.warzone_grenade_throw_chance);
	byteswap(value.two_player_ai_upgrade_additional_chance);
	byteswap(value.four_player_ai_upgrade_additional_chance);
	byteswap(value.warzone_ai_upgrade_additional_chance);
}

template<> void byteswap<blofeld::infinite::s_i343difficultyglobals>(blofeld::infinite::s_i343difficultyglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.difficulty_block);
	byteswap(value.co_op_difficulty_block);
}

template<> void byteswap<blofeld::infinite::s_garbagecollectionglobalvariables>(blofeld::infinite::s_garbagecollectionglobalvariables& value)
{
	byteswap(value.dropped_item);
	byteswap(value.dropped_special_item);
	byteswap(value.dropped_item_in_multiplayer);
	byteswap(value.dead_unit);
	byteswap(value.dead_player);
	byteswap(value.dead_mp_player);
	byteswap(value.dead_mp_player_overloaded);
	byteswap(value.max_dead_body_count_);
}

template<> void byteswap<blofeld::infinite::s_i343garbagecollectionglobals>(blofeld::infinite::s_i343garbagecollectionglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.garbage_collection_block);
}

template<> void byteswap<blofeld::infinite::s_hologramlightfunctions>(blofeld::infinite::s_hologramlightfunctions& value)
{
	byteswap(value.intensity);
	byteswap(value.forward);
	byteswap(value.right);
	byteswap(value.up);
}

template<> void byteswap<blofeld::infinite::s_hologramlightingglobals>(blofeld::infinite::s_hologramlightingglobals& value)
{
	byteswap(value.intensity);
	byteswap(value.key_light_functions);
	byteswap(value.fill_light_functions);
	byteswap(value.rim_light_functions);
}

template<> void byteswap<blofeld::infinite::s_s_active_camo_level_definition>(blofeld::infinite::s_s_active_camo_level_definition& value)
{
	byteswap(value.biped_speed_reference);
	byteswap(value.active_camo_ground_vertical_speed_scalar);
	byteswap(value.active_camo_airborne_vertical_speed_scalar);
	byteswap(value.vehicle_speed_reference);
	byteswap(value.camo_value_for_game_name);
	byteswap(value.camo_value_to_distortion);
	byteswap(value.camo_value_to_transparency);
	byteswap(value.camo_distortion_texture_strength);
	byteswap(value.camo_distortion_scale);
	byteswap(value.camo_distortion_translate_speed);
	byteswap(value.camo_distortion_texture);
	byteswap(value.camo_depth_bias_max_distance);
	byteswap(value.camo_depth_bias_function);
	byteswap(value.speed_to_maximum_camo);
}

template<> void byteswap<blofeld::infinite::s_s_active_camo_globals>(blofeld::infinite::s_s_active_camo_globals& value)
{
	byteswap(value.biped_speed_reference);
	byteswap(value.active_camo_ground_vertical_speed_scalar);
	byteswap(value.active_camo_airborne_vertical_speed_scalar);
	byteswap(value.vehicle_speed_reference);
	byteswap(value.camo_value_for_game_name);
	byteswap(value.camo_value_to_distortion);
	byteswap(value.camo_value_to_transparency);
	byteswap(value.camo_distortion_texture_strength);
	byteswap(value.camo_distortion_scale);
	byteswap(value.camo_distortion_translate_speed);
	byteswap(value.camo_distortion_texture);
	byteswap(value.camo_depth_bias_max_distance);
	byteswap(value.camo_depth_bias_function);
	byteswap(value.camo_levels_block);
}

template<> void byteswap<blofeld::infinite::s_s_game_globals_shield_boost>(blofeld::infinite::s_s_game_globals_shield_boost& value)
{
	byteswap(value.shield_boost_decay);
	byteswap(value.shield_boost_recharge_time);
	byteswap(value.shield_boost_stun_time);
}

template<> void byteswap<blofeld::infinite::s_i343unitsunititemtossglobals>(blofeld::infinite::s_i343unitsunititemtossglobals& value)
{
	byteswap(value.pitch_angle);
	byteswap(value.speed$2);
}

template<> void byteswap<blofeld::infinite::s_i343gameplayobjectglobals>(blofeld::infinite::s_i343gameplayobjectglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.hologram_lighting_block);
	byteswap(value.active_camo_block);
	byteswap(value.shield_boost_block);
	byteswap(value.item_toss_block);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuicamerapositionoffset>(blofeld::infinite::s_interfacecustomizationuicamerapositionoffset& value)
{
	byteswap(value.camera_position_type);
	byteswap(value.camera_position);
	byteswap(value.composer_scene_name);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuirttregiondata>(blofeld::infinite::s_interfacecustomizationuirttregiondata& value)
{
	byteswap(value.ui_display_string);
	byteswap(value.ui_description_string);
	byteswap(value.cms_customization_item_type);
	byteswap(value.region_name);
	byteswap(value.marker_name);
	byteswap(value.marker_offset);
	byteswap(value.camera_offset);
	byteswap(value.animation_easing);
	byteswap(value.camera_positions_block);
	byteswap(value.camera_fov);
	byteswap(value.camera_transition_time);
	byteswap(value.camera_orientation);
	byteswap(value.focused_object_orientation);
	byteswap(value.dof_flags);
	byteswap(value.dof_focal_length);
	byteswap(value.dof_focal_distance);
	byteswap(value.dof_fstop);
	byteswap(value.idle_animation);
	byteswap(value.to_idle_animation);
	byteswap(value.from_idle_animation);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationcamerapointname>(blofeld::infinite::s_interfacecustomizationcamerapointname& value)
{
	byteswap(value.camerapoint);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationcamerapointlayoutblock>(blofeld::infinite::s_interfacecustomizationcamerapointlayoutblock& value)
{
	byteswap(value.layout_one_first_postion);
	byteswap(value.layout_two_first_position);
	byteswap(value.layout_two_second_position);
	byteswap(value.layout_three_first_position);
	byteswap(value.layout_three_second_position);
	byteswap(value.layout_three_third_position);
	byteswap(value.layout_four_first_position_);
	byteswap(value.layout_four_second_position);
	byteswap(value.layout_four_third_position);
	byteswap(value.layout_four_fourth_position);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuicomposercustomizationdata>(blofeld::infinite::s_interfacecustomizationuicomposercustomizationdata& value)
{
	byteswap(value.composer_scene_name);
	byteswap(value.camera_points_block);
	byteswap(value.camera_point_layout_block);
	byteswap(value.camera_point_move_time);
	byteswap(value.composer_definition);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationlandingscenecompositiondata>(blofeld::infinite::s_interfacecustomizationlandingscenecompositiondata& value)
{
	byteswap(value.composer_scene_name);
	byteswap(value.core_type);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationlandingscenedata>(blofeld::infinite::s_interfacecustomizationlandingscenedata& value)
{
	byteswap(value.composer_scene_time);
	byteswap(value.fodeout_star_time);
	byteswap(value.fodeout_end_time);
	byteswap(value.composer_scenes_block);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationcoretypeitem>(blofeld::infinite::s_interfacecustomizationcoretypeitem& value)
{
	byteswap(value.core_type);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationcomposerscenenames>(blofeld::infinite::s_interfacecustomizationcomposerscenenames& value)
{
	byteswap(value.composer_scene_name);
}

template<> void byteswap<blofeld::infinite::s_s_game_globals_interface_tag_references>(blofeld::infinite::s_s_game_globals_interface_tag_references& value)
{
	byteswap(value.shared_globals);
	byteswap(value.mainmenu_ui_globals);
	byteswap(value.singleplayer_ui_globals);
	byteswap(value.multiplayer_ui_globals);
	byteswap(value.damage_reporting_display_globals);
	byteswap(value.platform_animations);
	byteswap(value.light_presets);
	byteswap(value.camera_presets);
	byteswap(value.camera_transition_sounds);
	byteswap(value.spartan_voice_sounds);
	byteswap(value.idling_marine_composition);
	byteswap(value.default_gray_emblem_coating);
	byteswap(value.spartan_armor_customization);
	byteswap(value.weapons_customization);
	byteswap(value.vehicle_customization);
	byteswap(value.ai_customization);
	byteswap(value.fireteam_customization);
	byteswap(value.presentation_customization);
	byteswap(value.inspect_customization);
	byteswap(value.inspect_player_customization);
	byteswap(value.pgcr);
	byteswap(value.rtt_camera_scenes_block);
	byteswap(value.composer_scenes_block);
	byteswap(value.landing_scene_data_block);
	byteswap(value.coretype_order_block);
	byteswap(value.mythicfx_composer_names_block);
	byteswap(value.inspect_data);
}

template<> void byteswap<blofeld::infinite::s_i343interfaceglobals>(blofeld::infinite::s_i343interfaceglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.interface_tags_block);
}

template<> void byteswap<blofeld::infinite::s_i343locglobals>(blofeld::infinite::s_i343locglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.language);
}

template<> void byteswap<blofeld::infinite::s_s_global_material_object_drag_properties>(blofeld::infinite::s_s_global_material_object_drag_properties& value)
{
	byteswap(value.drag_properties);
}

template<> void byteswap<blofeld::infinite::s_s_material_physics_properties>(blofeld::infinite::s_s_material_physics_properties& value)
{
	byteswap(value.flags);
	byteswap(value.friction);
	byteswap(value.restitution);
	byteswap(value.density);
	byteswap(value.water_physics_drag_properties);
	byteswap(value.drag_overrides_block);
	byteswap(value._default);
	byteswap(value.super_floater);
	byteswap(value.floater);
	byteswap(value.neutral);
	byteswap(value.sinker);
	byteswap(value.super_sinker);
}

template<> void byteswap<blofeld::infinite::s_s_global_material_sweeteners_definition>(blofeld::infinite::s_s_global_material_sweeteners_definition& value)
{
	byteswap(value.sound_sweetener_small);
	byteswap(value.sound_sweetener_medium);
	byteswap(value.sound_sweetener_large);
	byteswap(value.sound_sweetener_rolling);
	byteswap(value.sound_sweetener_grinding);
	byteswap(value.sound_sweetener_melee_small);
	byteswap(value.sound_sweetener_melee);
	byteswap(value.sound_sweetener_melee_large);
	byteswap(value.effect_sweetener_small);
	byteswap(value.effect_sweetener_medium);
	byteswap(value.effect_sweetener_large);
	byteswap(value.effect_sweetener_rolling);
	byteswap(value.effect_sweetener_grinding);
	byteswap(value.effect_sweetener_melee);
	byteswap(value.water_ripple_small);
	byteswap(value.water_ripple_medium);
	byteswap(value.water_ripple_large);
	byteswap(value.sweetener_inheritance_flags$2);
}

template<> void byteswap<blofeld::infinite::s_s_global_material_underwater_proxy>(blofeld::infinite::s_s_global_material_underwater_proxy& value)
{
	byteswap(value.underwater_material);
	byteswap(value.proxy_material);
	byteswap(value.underwater_material_type);
	byteswap(value.proxy_material_type);
}

template<> void byteswap<blofeld::infinite::s_s_global_material_definition>(blofeld::infinite::s_s_global_material_definition& value)
{
	byteswap(value.name);
	byteswap(value.parent_name);
	byteswap(value.audio_material_name);
	byteswap(value.audio_fallback_material_name);
	byteswap(value.audio_fallback_material_index);
	byteswap(value.runtime_material_index);
	byteswap(value.flags);
	byteswap(value.general_armor);
	byteswap(value.specific_armor);
	byteswap(value.runtime_dry_base_material_index);
	byteswap(value.physics_properties);
	byteswap(value.sweeteners);
	byteswap(value.material_effects);
	byteswap(value.underwater_proxies_block);
}

template<> void byteswap<blofeld::infinite::s_i343materialglobals>(blofeld::infinite::s_i343materialglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.global_water_material);
	byteswap(value.global_air_material);
	byteswap(value.audio_material_switch_group);
	byteswap(value.global_water_material_type);
	byteswap(value.global_air_material_type);
	byteswap(value.runtime_materials_block);
	byteswap(value.materials_block);
}

template<> void byteswap<blofeld::infinite::s_i343playerfirstpersonhiddenbodyregion>(blofeld::infinite::s_i343playerfirstpersonhiddenbodyregion& value)
{
	byteswap(value.hidden_region);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343playerrepresentation>(blofeld::infinite::s_i343playerrepresentation& value)
{
	byteswap(value.name);
	byteswap(value.first_person_interface_name);
	byteswap(value.customization_set);
	byteswap(value.customization);
	byteswap(value.flags);
	byteswap(value.third_person_unit);
	byteswap(value.third_person_variant);
	byteswap(value.frame_override);
	byteswap(value.player_information);
	byteswap(value.hud_screen_reference);
	byteswap(value.hud_transition_event_name);
	byteswap(value.first_person_hands_model);
	byteswap(value.generatedfirstpersonhandsmodel);
	byteswap(value.first_person_hands_variant);
	byteswap(value.first_person_body_variant);
	byteswap(value.hidden_fpbody_regions_block);
	byteswap(value.override_default_style_id);
	byteswap(value.bot_reference);
	byteswap(value.outline_to_use_for_enemy);
	byteswap(value.outline_to_use_for_enemy_near_reticle);
	byteswap(value.outline_to_use_for_enemy_flash_acquire);
	byteswap(value.outline_to_use_for_friendly);
	byteswap(value.outline_to_use_for_friendly_near_reticle);
	byteswap(value.outline_to_use_when_viewed_by_spectators);
	byteswap(value.outline_to_use_when_we_need_only_characters);
}

template<> void byteswap<blofeld::infinite::s_s_game_globals_player_information>(blofeld::infinite::s_s_game_globals_player_information& value)
{
	byteswap(value.name);
	byteswap(value.walking_speed);
	byteswap(value.run_forward);
	byteswap(value.run_backward);
	byteswap(value.run_sideways);
	byteswap(value.run_acceleration);
	byteswap(value.sneak_forward);
	byteswap(value.sneak_backward);
	byteswap(value.sneak_sideways);
	byteswap(value.sneak_acceleration);
	byteswap(value.downed_forward);
	byteswap(value.downed_backward);
	byteswap(value.downed_sideways);
	byteswap(value.downed_acceleration);
	byteswap(value.airborne_acceleration);
	byteswap(value.grenade_origin);
	byteswap(value.grenade_aiming);
	byteswap(value.first_person_idle_time);
	byteswap(value.first_person_skip_fraction);
	byteswap(value.tracking_detection_locked_decay_time);
	byteswap(value.tracking_detection_locking_decay_time);
}

template<> void byteswap<blofeld::infinite::s_i343playerflyinglooksensitivityarraydefinition>(blofeld::infinite::s_i343playerflyinglooksensitivityarraydefinition& value)
{
	byteswap(value.angular_velocity);
}

template<> void byteswap<blofeld::infinite::s_i343playerflyingspeedarraydefinition>(blofeld::infinite::s_i343playerflyingspeedarraydefinition& value)
{
	byteswap(value.speed);
}

template<> void byteswap<blofeld::infinite::s_i343playerflyingthrustarraydefinition>(blofeld::infinite::s_i343playerflyingthrustarraydefinition& value)
{
	byteswap(value.thrust);
}

template<> void byteswap<blofeld::infinite::s_i343playercameraglobals>(blofeld::infinite::s_i343playercameraglobals& value)
{
	byteswap(value.look_velocity_base_pitch);
	byteswap(value.look_velocity_step_pitch);
	byteswap(value.look_velocity_base_yaw);
	byteswap(value.look_velocity_step_yaw);
	byteswap(value.mouse_input_velocity_scale);
	byteswap(value.flying_camera_pitch_values$2);
	byteswap(value.flying_camera_yaw_values$2);
	byteswap(value.flying_camera_speed_values$2);
	byteswap(value.flying_camera_thrust_values$2);
}

template<> void byteswap<blofeld::infinite::s_i343firstpersonweaponglobals>(blofeld::infinite::s_i343firstpersonweaponglobals& value)
{
	byteswap(value.body_render_max_fov$2);
}

template<> void byteswap<blofeld::infinite::s_i343participantmalleablepropertiesdefinition>(blofeld::infinite::s_i343participantmalleablepropertiesdefinition& value)
{
	byteswap(value.motion_tracker_normal_range);
	byteswap(value.motion_tracker_extended_range);
	byteswap(value.motion_tracker_vehicle_range);
	byteswap(value.motion_tracker_threshold_speed_friendly);
	byteswap(value.motion_tracker_threshold_speed_enemy);
	byteswap(value.motion_tracker_visibility_scalar);
}

template<> void byteswap<blofeld::infinite::s_i343playerinventorylimits>(blofeld::infinite::s_i343playerinventorylimits& value)
{
	byteswap(value.maximum_allowed_weapons_per_player);
}

template<> void byteswap<blofeld::infinite::s_i343playerinteractionpriorities>(blofeld::infinite::s_i343playerinteractionpriorities& value)
{
	byteswap(value.none);
	byteswap(value.weaponpickupdisabled);
	byteswap(value.deviceinteractdenied);
	byteswap(value.bannedvehicleentrance);
	byteswap(value.pickupgrenade);
	byteswap(value.pickupweapon);
	byteswap(value.pickupability);
	byteswap(value.pickupequipment);
	byteswap(value.pickupdispenserweapon);
	byteswap(value.touchdevice);
	byteswap(value.evictfromvehicle);
	byteswap(value.entervehicle);
	byteswap(value.tradeweapon);
	byteswap(value.boardvehicle);
	byteswap(value.pickupmultiplayerobject);
	byteswap(value.flipvehicle);
	byteswap(value.lookingat);
}

template<> void byteswap<blofeld::infinite::s_i343playerglobals>(blofeld::infinite::s_i343playerglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.default_representation);
	byteswap(value.player_representations_block);
	byteswap(value.player_information_block);
	byteswap(value.player_camera_block);
	byteswap(value.first_person_weapon_block);
	byteswap(value.participant_malleable_properties);
	byteswap(value.inventory_limits);
	byteswap(value.interaction_priorities);
}

template<> void byteswap<blofeld::infinite::s_i343skillrankingtierdefinition>(blofeld::infinite::s_i343skillrankingtierdefinition& value)
{
	byteswap(value.display_name_);
	byteswap(value.beginning_points);
}

template<> void byteswap<blofeld::infinite::s_i343skillrankingdefinition>(blofeld::infinite::s_i343skillrankingdefinition& value)
{
	byteswap(value.display_name);
	byteswap(value.icon_index);
	byteswap(value.tier_block);
}

template<> void byteswap<blofeld::infinite::s_i343skillrankingglobals>(blofeld::infinite::s_i343skillrankingglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.number_of_games_to_qualify_for_csr);
	byteswap(value.skill_ranking_globals_block);
}

template<> void byteswap<blofeld::infinite::s_s_campaign_metagame_style_definition>(blofeld::infinite::s_s_campaign_metagame_style_definition& value)
{
	byteswap(value.incident_name);
	byteswap(value.style_multiplier);
}

template<> void byteswap<blofeld::infinite::s_s_campaign_metagame_difficulty>(blofeld::infinite::s_s_campaign_metagame_difficulty& value)
{
	byteswap(value.difficulty_multiplier);
}

template<> void byteswap<blofeld::infinite::s_s_campaign_metagame_skull_data>(blofeld::infinite::s_s_campaign_metagame_skull_data& value)
{
	byteswap(value.difficulty_multiplier);
}

template<> void byteswap<blofeld::infinite::s_mythicskullbonus>(blofeld::infinite::s_mythicskullbonus& value)
{
	byteswap(value.type);
	byteswap(value.shield_vitality_bonus);
}

template<> void byteswap<blofeld::infinite::s_s_campaign_metagame_globals>(blofeld::infinite::s_s_campaign_metagame_globals& value)
{
	byteswap(value.styles_block);
	byteswap(value.difficulty_block);
	byteswap(value.skulls_block);
	byteswap(value.friendly_death_point_count);
	byteswap(value.player_death_point_count);
	byteswap(value.player_betrayal_point_count);
	byteswap(value.transient_score_time);
	byteswap(value.emp_kill_window);
	byteswap(value.cowbell_explosion_acceleration_multiplier);
	byteswap(value.boom_explosion_acceleration_multiplier);
	byteswap(value.famine_ammo_multiplier);
	byteswap(value.score_delta_display_seconds_max);
	byteswap(value.score_delta_display_seconds_incremental);
	byteswap(value.mythic_skull_body_vitality_scalar);
	byteswap(value.mythic_skull_shield_vitality_scalar);
	byteswap(value.mythic_skull_bonuses_block);
}

template<> void byteswap<blofeld::infinite::s_i343skullglobals>(blofeld::infinite::s_i343skullglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.campaign_metagame_globals_block);
}

template<> void byteswap<blofeld::infinite::s_s_game_globals_soft_ceiling>(blofeld::infinite::s_s_game_globals_soft_ceiling& value)
{
	byteswap(value.biped_spring_constant);
	byteswap(value.biped_normal_damping);
	byteswap(value.biped_tangent_damping);
	byteswap(value.biped_min_tangent_damp_velocity);
	byteswap(value.vehicle_spring_constant);
	byteswap(value.vehicle_normal_damping);
	byteswap(value.vehicle_tangent_damping);
}

template<> void byteswap<blofeld::infinite::s_i343softceilingglobals>(blofeld::infinite::s_i343softceilingglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.soft_ceilings_block);
}

template<> void byteswap<blofeld::infinite::s_i343subtitlespeakercolors>(blofeld::infinite::s_i343subtitlespeakercolors& value)
{
	byteswap(value.character_id);
	byteswap(value.disposition);
	byteswap(value.allow_color_override);
	byteswap(value.color);
}

template<> void byteswap<blofeld::infinite::s_i343subtitleglobals>(blofeld::infinite::s_i343subtitleglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.subtitle_rect_width);
	byteswap(value.subtitle_rect_height);
	byteswap(value.default_subtitle_color);
	byteswap(value.default_subtitle_shadow_color);
	byteswap(value.default_subtitle_background_color);
	byteswap(value.default_subtitle_background_border_x);
	byteswap(value.default_subtitle_background_border_y);
	byteswap(value.small_subtitle_background_border_x);
	byteswap(value.small_subtitle_background_border_y);
	byteswap(value.large_subtitle_background_border_x);
	byteswap(value.large_subtitle_background_border_y);
	byteswap(value.small_4k_subtitle_background_border_x);
	byteswap(value.small_4k_subtitle_background_border_y);
	byteswap(value.medium_4k_subtitle_background_border_x);
	byteswap(value.medium_4k_subtitle_background_border_y);
	byteswap(value.large_4k_subtitle_background_border_x);
	byteswap(value.large_4k_subtitle_background_border_y);
	byteswap(value.minimum_subtitle_display_threshold_in_seconds);
	byteswap(value.subtitle_threshold_to_reset_character_moniker_in_seconds);
	byteswap(value.unicode_tag_reference_to_subtitles_character_ids_list);
	byteswap(value.default_subtitle_speaker_color);
	byteswap(value.subtitle_speaker_colors_block);
}

template<> void byteswap<blofeld::infinite::s_gamemedaldifficultydefinition>(blofeld::infinite::s_gamemedaldifficultydefinition& value)
{
	byteswap(value.name);
	byteswap(value.description);
	byteswap(value.sprite_index);
}

template<> void byteswap<blofeld::infinite::s_gamemedaltypedefinition>(blofeld::infinite::s_gamemedaltypedefinition& value)
{
	byteswap(value.name);
	byteswap(value.description);
	byteswap(value.sprite_index);
}

template<> void byteswap<blofeld::infinite::s_s_game_medal_definition>(blofeld::infinite::s_s_game_medal_definition& value)
{
	byteswap(value.name);
	byteswap(value.description);
	byteswap(value.sprite_index);
	byteswap(value.sorting_weight);
	byteswap(value.difficulty_index);
	byteswap(value.type_index);
	byteswap(value.personal_score);
}

template<> void byteswap<blofeld::infinite::s_personalscoreeventdefinition>(blofeld::infinite::s_personalscoreeventdefinition& value)
{
	byteswap(value.name);
	byteswap(value.description);
	byteswap(value.default_score_value);
	byteswap(value.weight);
	byteswap(value.event_type);
	byteswap(value.suppress_event_spam);
}

template<> void byteswap<blofeld::infinite::s_s_game_medal_globals>(blofeld::infinite::s_s_game_medal_globals& value)
{
	byteswap(value.anytag);
	byteswap(value.difficulty_definitions_block);
	byteswap(value.type_definitions_block);
	byteswap(value.medals_block);
	byteswap(value.personal_score_event_definitions_block);
}

template<> void byteswap<blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitionfloat>(blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitionfloat& value)
{
	byteswap(value.property);
	byteswap(value.scope);
	byteswap(value.duration);
	byteswap(value.modifier);
}

template<> void byteswap<blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitionfloatparam>(blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitionfloatparam& value)
{
	byteswap(value.modifier_float);
}

template<> void byteswap<blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitionint>(blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitionint& value)
{
	byteswap(value.property);
	byteswap(value.scope);
	byteswap(value.duration);
	byteswap(value.modifier);
}

template<> void byteswap<blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitionintparam>(blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitionintparam& value)
{
	byteswap(value.modifier_int);
}

template<> void byteswap<blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitionbool>(blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitionbool& value)
{
	byteswap(value.property);
	byteswap(value.scope);
	byteswap(value.duration);
	byteswap(value.modifier);
}

template<> void byteswap<blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitionboolparam>(blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitionboolparam& value)
{
	byteswap(value.modifier_bool);
}

template<> void byteswap<blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitionblock>(blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitionblock& value)
{
	byteswap(value.modifiers_float_block);
	byteswap(value.modifiers_int_block);
	byteswap(value.modifiers_bool_block);
}

template<> void byteswap<blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitiontag>(blofeld::infinite::s_i343malleablepropertygenericmodifierdefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.modifiers);
}

template<> void byteswap<blofeld::infinite::s_s_game_performance_throttle_filter>(blofeld::infinite::s_s_game_performance_throttle_filter& value)
{
	byteswap(value.minimum_player_count);
}

template<> void byteswap<blofeld::infinite::s_s_game_performance_throttle_profile>(blofeld::infinite::s_s_game_performance_throttle_profile& value)
{
	byteswap(value.maximum_havok_proxy_count);
	byteswap(value.maximum_impact_count);
	byteswap(value.vehicle_suspension_update_frequency);
	byteswap(value.actor_lod_ai_actors_to_update_fully_each_frame);
	byteswap(value.actor_lod_number_of_frames_to_tick_loded_ai);
	byteswap(value.actor_lod_number_of_concurrent_lod_actors_to_tick);
}

template<> void byteswap<blofeld::infinite::s_s_game_performance_throttle_entry>(blofeld::infinite::s_s_game_performance_throttle_entry& value)
{
	byteswap(value.filter);
	byteswap(value.profile);
}

template<> void byteswap<blofeld::infinite::s_s_game_performance_throttle_definitions>(blofeld::infinite::s_s_game_performance_throttle_definitions& value)
{
	byteswap(value.anytag);
	byteswap(value.entries_block);
}

template<> void byteswap<blofeld::infinite::s_s_grounded_friction_definition>(blofeld::infinite::s_s_grounded_friction_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.friction_over_time);
	byteswap(value.friction_over_time_domain_min);
	byteswap(value.friction_over_time_domain_max);
	byteswap(value.maximum_slope_for_friction);
	byteswap(value.minimum_asymmetry_ratio_for_axis_lock);
}

template<> void byteswap<blofeld::infinite::s_jointweight>(blofeld::infinite::s_jointweight& value)
{
	byteswap(value.joint_index);
	byteswap(value.joint_weight);
}

template<> void byteswap<blofeld::infinite::s_geometryvertexblendshapetarget>(blofeld::infinite::s_geometryvertexblendshapetarget& value)
{
	byteswap(value.name);
	byteswap(value.delta);
	byteswap(value.procedural_deformation_index);
}

template<> void byteswap<blofeld::infinite::s_geometryvertex>(blofeld::infinite::s_geometryvertex& value)
{
	byteswap(value.position);
	byteswap(value.normal);
	byteswap(value.binormal);
	byteswap(value.tangent);
	byteswap(value.tangent_uv2);
	byteswap(value.tangent_uv3);
	byteswap(value.texcoord_set_1);
	byteswap(value.texcoord_set_2);
	byteswap(value.texcoord_set_3);
	byteswap(value.lighting_texcoord_set);
	byteswap(value.color);
	byteswap(value.dual_quaternion_weight);
	byteswap(value.joint_weights_block);
	byteswap(value.blendshape_targets_block);
}

template<> void byteswap<blofeld::infinite::s_geometryindex>(blofeld::infinite::s_geometryindex& value)
{
	byteswap(value.triangle_index);
}

template<> void byteswap<blofeld::infinite::s_geometrymeshpart>(blofeld::infinite::s_geometrymeshpart& value)
{
	byteswap(value.vertices_block);
	byteswap(value.indices_block);
	byteswap(value.material_block_index);
	byteswap(value.originating_shape_name);
	byteswap(value.originating_shape_uuid);
	byteswap(value.properties_checksum);
	byteswap(value.position_bounds_lower);
	byteswap(value.position_bounds_upper);
	byteswap(value.texcoord_bounds_lower);
	byteswap(value.texcoord_bounds_upper);
	byteswap(value.texcoord2_bounds_lower);
	byteswap(value.texcoord2_bounds_upper);
	byteswap(value.texcoord3_bounds_lower);
	byteswap(value.texcoord3_bounds_upper);
	byteswap(value.lighting_texcoord_bounds_lower);
	byteswap(value.lighting_texcoord_bounds_upper);
}

template<> void byteswap<blofeld::infinite::s_geometrymesh>(blofeld::infinite::s_geometrymesh& value)
{
	byteswap(value.visual_region_name);
	byteswap(value.property_region_name);
	byteswap(value.mesh_parts_block);
	byteswap(value.lod_flags);
	byteswap(value.usage_flags);
	byteswap(value.supported_features);
	byteswap(value.import_info);
	byteswap(value.originating_source_file);
	byteswap(value.properties_checksum);
	byteswap(value.position_bounds_lower);
	byteswap(value.position_bounds_upper);
}

template<> void byteswap<blofeld::infinite::s_geometrymaterial>(blofeld::infinite::s_geometrymaterial& value)
{
	byteswap(value.material_reference);
}

template<> void byteswap<blofeld::infinite::s_skeletonjoint>(blofeld::infinite::s_skeletonjoint& value)
{
	byteswap(value.name);
	byteswap(value.parent_node);
	byteswap(value.first_child_node);
	byteswap(value.next_sibling_node);
	byteswap(value.default_translation);
	byteswap(value.default_rotation);
	byteswap(value.importer_flags);
}

template<> void byteswap<blofeld::infinite::s_proceduraldeformationparameter>(blofeld::infinite::s_proceduraldeformationparameter& value)
{
	byteswap(value.parameter_mode);
	byteswap(value.name);
	byteswap(value.constant_value);
}

template<> void byteswap<blofeld::infinite::s_proceduraldeformationblock>(blofeld::infinite::s_proceduraldeformationblock& value)
{
	byteswap(value.name);
	byteswap(value.mode);
	byteswap(value.control_parameters_block);
}

template<> void byteswap<blofeld::infinite::s_modelmarkerblock>(blofeld::infinite::s_modelmarkerblock& value)
{
	byteswap(value.visual_region_name);
	byteswap(value.name);
	byteswap(value.parent);
	byteswap(value.position);
	byteswap(value.rotation);
	byteswap(value.scale);
	byteswap(value.direction);
}

template<> void byteswap<blofeld::infinite::s_markergroupblock>(blofeld::infinite::s_markergroupblock& value)
{
	byteswap(value.group);
	byteswap(value.markers_block);
}

template<> void byteswap<blofeld::infinite::s_hintmarkerblock>(blofeld::infinite::s_hintmarkerblock& value)
{
	byteswap(value.visual_region_name);
	byteswap(value.name);
	byteswap(value.parent);
	byteswap(value.position);
	byteswap(value.rotation);
	byteswap(value.scale);
	byteswap(value.length);
}

template<> void byteswap<blofeld::infinite::s_hintmarkergroupblock>(blofeld::infinite::s_hintmarkergroupblock& value)
{
	byteswap(value.hint_type);
	byteswap(value.hint_markers_block);
}

template<> void byteswap<blofeld::infinite::s_targetmarkerblock>(blofeld::infinite::s_targetmarkerblock& value)
{
	byteswap(value.visual_region_name);
	byteswap(value.name);
	byteswap(value.parent);
	byteswap(value.position);
	byteswap(value.radius);
}

template<> void byteswap<blofeld::infinite::s_targetmarkergroupblock>(blofeld::infinite::s_targetmarkergroupblock& value)
{
	byteswap(value.group);
	byteswap(value.target_markers_block);
}

template<> void byteswap<blofeld::infinite::s_geometrytransitions>(blofeld::infinite::s_geometrytransitions& value)
{
	byteswap(value.transition_distance);
}

template<> void byteswap<blofeld::infinite::s_physicsconstraint>(blofeld::infinite::s_physicsconstraint& value)
{
	byteswap(value.name);
	byteswap(value.physics_settings);
	byteswap(value.position);
	byteswap(value.orientation);
	byteswap(value.parent_shape);
	byteswap(value.child_shape);
}

template<> void byteswap<blofeld::infinite::s_physicsprimitive>(blofeld::infinite::s_physicsprimitive& value)
{
	byteswap(value.name);
	byteswap(value.physics_settings);
	byteswap(value.visual_region_name);
	byteswap(value.property_region_name);
	byteswap(value.primitive_type);
	byteswap(value.joint_index);
	byteswap(value.position);
	byteswap(value.orientation);
	byteswap(value.radius);
	byteswap(value.length);
	byteswap(value.width);
	byteswap(value.height);
}

template<> void byteswap<blofeld::infinite::s_physicsmesh>(blofeld::infinite::s_physicsmesh& value)
{
	byteswap(value.name);
	byteswap(value.physics_settings);
}

template<> void byteswap<blofeld::infinite::s_physicsblock>(blofeld::infinite::s_physicsblock& value)
{
	byteswap(value.constraints_block);
	byteswap(value.primitives_block);
	byteswap(value.meshes_block);
}

template<> void byteswap<blofeld::infinite::s_geometrytag>(blofeld::infinite::s_geometrytag& value)
{
	byteswap(value.anytag);
	byteswap(value.geometry_block);
	byteswap(value.materials_block);
	byteswap(value.joints_checksum);
	byteswap(value.joints_block);
	byteswap(value.procedural_deformations_block);
	byteswap(value.marker_groups_block);
	byteswap(value.hint_marker_groups_block);
	byteswap(value.target_marker_groups_block);
	byteswap(value.import_transition_distances_block);
	byteswap(value.physics_block);
	byteswap(value.validation);
}

template<> void byteswap<blofeld::infinite::s_i343graphicshairprofile>(blofeld::infinite::s_i343graphicshairprofile& value)
{
	byteswap(value.name);
	byteswap(value.r_color);
	byteswap(value.tt_color);
	byteswap(value.trt_color);
	byteswap(value.tangent);
	byteswap(value.shift);
	byteswap(value.scatter_color);
	byteswap(value.scatter_amount);
	byteswap(value.direct_scatter_amount);
	byteswap(value.indirect_scatter_amount);
	byteswap(value.ao_color);
	byteswap(value.ao_color_amount);
	byteswap(value.diffuse_pow_exponent);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343graphicshairprofiletag>(blofeld::infinite::s_i343graphicshairprofiletag& value)
{
	byteswap(value.anytag);
	byteswap(value.hair_profiles_block);
	byteswap(value.shaderaddressablebuffer);
}

template<> void byteswap<blofeld::infinite::s_hlodindex>(blofeld::infinite::s_hlodindex& value)
{
	byteswap(value.index);
}

template<> void byteswap<blofeld::infinite::s_hlodvisibilitygroup>(blofeld::infinite::s_hlodvisibilitygroup& value)
{
	byteswap(value.visibility_index);
	byteswap(value.disabling_bsp);
	byteswap(value.io_guids_block);
	byteswap(value.io_bsps_block);
	byteswap(value.streaming_bsps_block);
}

template<> void byteswap<blofeld::infinite::s_hlodnode>(blofeld::infinite::s_hlodnode& value)
{
	byteswap(value.name);
	byteswap(value.switch_distance);
	byteswap(value.position);
	byteswap(value.geo);
	byteswap(value.materials);
	byteswap(value.asset_guid);
	byteswap(value.volumebounds_x);
	byteswap(value.volumebounds_y);
	byteswap(value.volumebounds_z);
	byteswap(value.active_group);
	byteswap(value.inactive_group);
	byteswap(value.inactive_streaming_groups_block);
	byteswap(value.child_hlods_block);
}

template<> void byteswap<blofeld::infinite::s_hlodplacement>(blofeld::infinite::s_hlodplacement& value)
{
	byteswap(value.bsp_index);
	byteswap(value.placement_index);
	byteswap(value.geometry_type);
	byteswap(value.visibility_index);
	byteswap(value.hlod_index);
}

template<> void byteswap<blofeld::infinite::s_hlodbspdata>(blofeld::infinite::s_hlodbspdata& value)
{
	byteswap(value.bsp);
	byteswap(value.placements_block);
	byteswap(value.hlods_block);
	byteswap(value.flags);
	byteswap(value.streaming_distance);
	byteswap(value.level_bsp_index);
}

template<> void byteswap<blofeld::infinite::s_hlodsystem>(blofeld::infinite::s_hlodsystem& value)
{
	byteswap(value.anytag);
	byteswap(value.level);
	byteswap(value.hlods_block);
	byteswap(value.bsps_block);
	byteswap(value.root_nodes_block);
	byteswap(value.visibility_group_count);
}

template<> void byteswap<blofeld::infinite::s_hlodobject>(blofeld::infinite::s_hlodobject& value)
{
	byteswap(value.guid);
	byteswap(value.parent_layer_ref);
	byteswap(value.included_in_geo);
}

template<> void byteswap<blofeld::infinite::s_hlodbsp>(blofeld::infinite::s_hlodbsp& value)
{
	byteswap(value.bsp);
	byteswap(value.iocount);
}

template<> void byteswap<blofeld::infinite::s_hlodsimplygoncustomspherecamerapath>(blofeld::infinite::s_hlodsimplygoncustomspherecamerapath& value)
{
	byteswap(value.quality);
	byteswap(value.semisphere_center_pitch_angle);
	byteswap(value.semisphere_center_yaw_angle);
	byteswap(value.sphere_coverage);
}

template<> void byteswap<blofeld::infinite::s_hlodmetadata>(blofeld::infinite::s_hlodmetadata& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.position);
	byteswap(value.volumemin);
	byteswap(value.volumemax);
	byteswap(value.child_static_geo_block);
	byteswap(value.child_hlod_volumes_block);
	byteswap(value.maximum_lod);
	byteswap(value.bsps_block);
	byteswap(value.switchdistance);
	byteswap(value.hlodsettings);
	byteswap(value.asset);
	byteswap(value.asset_category);
	byteswap(value.use_visibility);
	byteswap(value.visibility_camera_sphere_settings);
}

template<> void byteswap<blofeld::infinite::s_hlodmaterialcutoffmeshparts>(blofeld::infinite::s_hlodmaterialcutoffmeshparts& value)
{
	byteswap(value.cut_off_mesh_parts_by_this_material);
}

template<> void byteswap<blofeld::infinite::s_hlodmaterialcutofflist>(blofeld::infinite::s_hlodmaterialcutofflist& value)
{
	byteswap(value.anytag);
	byteswap(value.hlod_materials_to_cut_off_mesh_parts_block);
	byteswap(value.hlod_materials_to_put_the_geo_directly_into_the_hlod_bypassing_simplygon_block);
}

template<> void byteswap<blofeld::infinite::s_lodtransitiondistanceblock>(blofeld::infinite::s_lodtransitiondistanceblock& value)
{
	byteswap(value.lodtransitiondistance);
}

template<> void byteswap<blofeld::infinite::s_runtimeregionindex>(blofeld::infinite::s_runtimeregionindex& value)
{
	byteswap(value.runtime_region_index);
}

template<> void byteswap<blofeld::infinite::s_s_model_variant_state>(blofeld::infinite::s_s_model_variant_state& value)
{
	byteswap(value.permutation_name);
	byteswap(value.runtime_permutation_index);
	byteswap(value.property_flags);
	byteswap(value.state);
	byteswap(value.initial_probability);
}

template<> void byteswap<blofeld::infinite::s_modelstatepermutationindex>(blofeld::infinite::s_modelstatepermutationindex& value)
{
	byteswap(value.runtime_permutation_index);
}

template<> void byteswap<blofeld::infinite::s_s_model_variant_permutation>(blofeld::infinite::s_s_model_variant_permutation& value)
{
	byteswap(value.permutation_name);
	byteswap(value.runtime_permutation_index);
	byteswap(value.flags);
	byteswap(value.probability);
	byteswap(value.states_block);
	byteswap(value.runtime_state_permutation_indices);
}

template<> void byteswap<blofeld::infinite::s_s_model_variant_region>(blofeld::infinite::s_s_model_variant_region& value)
{
	byteswap(value.region_name);
	byteswap(value.runtime_region_index);
	byteswap(value.runtime_flags);
	byteswap(value.parent_variant);
	byteswap(value.permutations_block);
	byteswap(value.sort_order);
}

template<> void byteswap<blofeld::infinite::s_i343modelmodelvariantobject>(blofeld::infinite::s_i343modelmodelvariantobject& value)
{
	byteswap(value.parent_marker);
	byteswap(value.child_marker);
	byteswap(value.child_variant_name);
	byteswap(value.child_object);
	byteswap(value.child_configuration);
	byteswap(value.damage_section);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_modelvariantmutednodeblock>(blofeld::infinite::s_modelvariantmutednodeblock& value)
{
	byteswap(value.node_name);
}

template<> void byteswap<blofeld::infinite::s_s_model_variant>(blofeld::infinite::s_s_model_variant& value)
{
	byteswap(value.name);
	byteswap(value.style);
	byteswap(value.model_variant_flags);
	byteswap(value.damage_effect_sounds___enable_model_hit_override);
	byteswap(value.runtime_variant_region_indices);
	byteswap(value.regions_block);
	byteswap(value.objects_block);
	byteswap(value.object_node_graphs_block);
	byteswap(value.muted_nodes_block);
	byteswap(value.muted_flag);
	byteswap(value.structure_lighting_info);
	byteswap(value.lighting_volumes);
	byteswap(value.scenario_lighting_volumes);
	byteswap(value.object_lightmap);
	byteswap(value.object_cubemap_set_block);
}

template<> void byteswap<blofeld::infinite::s_regionnameblock>(blofeld::infinite::s_regionnameblock& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_s_model_material>(blofeld::infinite::s_s_model_material& value)
{
	byteswap(value.material_name);
	byteswap(value.damage_section);
	byteswap(value.runtime_collision_material_index);
	byteswap(value.runtime_damager_material_index);
	byteswap(value.global_material_name);
	byteswap(value.runtime_global_material_index);
}

template<> void byteswap<blofeld::infinite::s_damagebodyparameters>(blofeld::infinite::s_damagebodyparameters& value)
{
	byteswap(value.maximum_vitality);
	byteswap(value.minimum_stun_damage);
	byteswap(value.stun_time);
	byteswap(value.recharge_time);
	byteswap(value.recharge_fraction);
}

template<> void byteswap<blofeld::infinite::s_damageshieldparameters>(blofeld::infinite::s_damageshieldparameters& value)
{
	byteswap(value.maximum_shield_vitality);
	byteswap(value.global_shield_material_name);
	byteswap(value.minimum_stun_damage);
	byteswap(value.stun_time);
	byteswap(value.recharge_time);
	byteswap(value.shield_overcharge_fraction);
	byteswap(value.shield_overcharge_time);
	byteswap(value.shield_damaged_threshold);
	byteswap(value.shield_damaged_effect);
	byteswap(value.shield_depleted_effect);
	byteswap(value.shield_recharging_effect);
}

template<> void byteswap<blofeld::infinite::s_instantaneousresponsedamageeffect>(blofeld::infinite::s_instantaneousresponsedamageeffect& value)
{
	byteswap(value.transition_damage_effect);
}

template<> void byteswap<blofeld::infinite::s_instantaneousresponsedamageeffectmarker>(blofeld::infinite::s_instantaneousresponsedamageeffectmarker& value)
{
	byteswap(value.damage_effect_marker_name);
}

template<> void byteswap<blofeld::infinite::s_s_instantaneous_damage_response>(blofeld::infinite::s_s_instantaneous_damage_response& value)
{
	byteswap(value.response_type);
	byteswap(value.constraint_damage_type$2);
	byteswap(value.constraint_group_name);
	byteswap(value.flags);
	byteswap(value.flags2);
	byteswap(value.damage_threshold);
	byteswap(value.body_threshold_flags);
	byteswap(value.body_damage_threshold);
	byteswap(value.transition_effect_generic);
	byteswap(value.transition_effect_specific);
	byteswap(value.damage_effect);
	byteswap(value.region);
	byteswap(value.new_state);
	byteswap(value.runtime_region_index);
	byteswap(value.region_secondary);
	byteswap(value.new_state_secondary);
	byteswap(value.runtime_region_index_secondary);
	byteswap(value.custom_response_behavior);
	byteswap(value.custom_response_label);
	byteswap(value.effect_marker_name);
	byteswap(value.damage_effect_marker);
	byteswap(value.response_delay$2);
	byteswap(value.delay_effect);
	byteswap(value.delay_effect_marker_name);
	byteswap(value.response_delay_premature_damage_threshold);
	byteswap(value.ejecting_seat_label);
	byteswap(value.skip_fraction$2);
	byteswap(value.destroyed_child_object_marker_name$2);
	byteswap(value.total_damage_threshold$2);
}

template<> void byteswap<blofeld::infinite::s_s_model_damage_section>(blofeld::infinite::s_s_model_damage_section& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.vitality_percentage);
	byteswap(value.instant_responses_block);
	byteswap(value.stun_time);
	byteswap(value.recharge_time);
	byteswap(value.runtime_recharge_velocity);
	byteswap(value.resurrection_restored_region_name);
	byteswap(value.runtime_resurrection_restored_region_index);
}

template<> void byteswap<blofeld::infinite::s_s_damage_node>(blofeld::infinite::s_s_damage_node& value)
{
	byteswap(value.runtime_damage_part);
}

template<> void byteswap<blofeld::infinite::s_s_damage_seat_region_setting>(blofeld::infinite::s_s_damage_seat_region_setting& value)
{
	byteswap(value.damage_region_name);
	byteswap(value.runtime_damage_region_index);
	byteswap(value.direct_damage_scale_minor);
	byteswap(value.max_transfer_scale_minor);
	byteswap(value.min_transfer_scale_minor);
	byteswap(value.direct_damage_scale_medium);
	byteswap(value.max_transfer_scale_medium);
	byteswap(value.min_transfer_scale_medium);
	byteswap(value.direct_damage_scale_major);
	byteswap(value.max_transfer_scale_major);
	byteswap(value.min_transfer_scale_major);
}

template<> void byteswap<blofeld::infinite::s_s_damage_seat_info>(blofeld::infinite::s_s_damage_seat_info& value)
{
	byteswap(value.seat_label);
	byteswap(value.direct_damage_scale);
	byteswap(value.damage_transfer_fall_off_radius);
	byteswap(value.maximum_transfer_damage_scale);
	byteswap(value.minimum_transfer_damage_scale);
	byteswap(value.region_specific_damage_block);
}

template<> void byteswap<blofeld::infinite::s_s_damage_constraint_info>(blofeld::infinite::s_s_damage_constraint_info& value)
{
	byteswap(value.physics_model_constraint_name);
	byteswap(value.damage_constraint_name);
	byteswap(value.damage_constraint_group_name);
	byteswap(value.group_probability_scale);
	byteswap(value.runtime_constraint_type);
	byteswap(value.runtime_constraint_index);
}

template<> void byteswap<blofeld::infinite::s_s_model_damage_info>(blofeld::infinite::s_s_model_damage_info& value)
{
	byteswap(value.flags);
	byteswap(value.global_indirect_material_name);
	byteswap(value.indirect_damage_section);
	byteswap(value.body$2);
	byteswap(value.shield$2);
	byteswap(value.damage_sections_block);
	byteswap(value.nodes_block);
	byteswap(value.runtime_shield_material_type);
	byteswap(value.runtime_indirect_material_type);
	byteswap(value.runtime_shield_recharge_velocity);
	byteswap(value.runtime_overcharge_velocity);
	byteswap(value.runtime_health_recharge_velocity);
	byteswap(value.damage_seats_block);
	byteswap(value.damage_constraints_block);
}

template<> void byteswap<blofeld::infinite::s_s_damage_section_recharge_speed_multiplier_curve>(blofeld::infinite::s_s_damage_section_recharge_speed_multiplier_curve& value)
{
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_damagesectionsegmentedrechargefractionblock>(blofeld::infinite::s_damagesectionsegmentedrechargefractionblock& value)
{
	byteswap(value.vitality_percentage);
}

template<> void byteswap<blofeld::infinite::s_variantspecificationblock>(blofeld::infinite::s_variantspecificationblock& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_s_region_transition>(blofeld::infinite::s_s_region_transition& value)
{
	byteswap(value.region);
	byteswap(value.new_state);
	byteswap(value.runtime_region_index);
}

template<> void byteswap<blofeld::infinite::s_s_damage_transfer>(blofeld::infinite::s_s_damage_transfer& value)
{
	byteswap(value.flags);
	byteswap(value.transfer_amount);
	byteswap(value.transfer_function);
	byteswap(value.ai_stun_transfer_amount);
	byteswap(value.ai_stun_transfer_function);
	byteswap(value.damage_section);
	byteswap(value.seat_label);
}

template<> void byteswap<blofeld::infinite::s_seatejectionblock>(blofeld::infinite::s_seatejectionblock& value)
{
	byteswap(value.seat_label);
}

template<> void byteswap<blofeld::infinite::s_s_new_instantaneous_damage_response>(blofeld::infinite::s_s_new_instantaneous_damage_response& value)
{
	byteswap(value.flags);
	byteswap(value.flags2);
	byteswap(value.label);
	byteswap(value.included_variants_block);
	byteswap(value.excluded_variants_block);
	byteswap(value.damage_threshold);
	byteswap(value.min_damage_threshold);
	byteswap(value.forced_hard_ping_anim_);
	byteswap(value.transition_effect_generic);
	byteswap(value.generic_effect_marker);
	byteswap(value.transition_effect_specific);
	byteswap(value.specific_effect_marker);
	byteswap(value.damage_effect);
	byteswap(value.damage_effect_marker);
	byteswap(value.looping_effect);
	byteswap(value.ray_cast_marker);
	byteswap(value.ray_cast_length);
	byteswap(value.combined_material_effects);
	byteswap(value.visual_material_effects);
	byteswap(value.sound_material_effects);
	byteswap(value.fallback_effect);
	byteswap(value.fallback_effect_marker);
	byteswap(value.region_transitions_block);
	byteswap(value.response_damage_transfers_block);
	byteswap(value.custom_response_behavior);
	byteswap(value.custom_response_label);
	byteswap(value.response_delay);
	byteswap(value.delay_effect);
	byteswap(value.delay_effect_marker_name);
	byteswap(value.seat_eject_block);
	byteswap(value.skip_fraction);
	byteswap(value.destroyed_child_object_marker_name);
	byteswap(value.total_damage_threshold);
	byteswap(value.constraint_or_group_name);
	byteswap(value.constraint_damage_type);
	byteswap(value.ai_dialog_event);
}

template<> void byteswap<blofeld::infinite::s_s_damage_section_rendering_parameters>(blofeld::infinite::s_s_damage_section_rendering_parameters& value)
{
	byteswap(value._3rd_person_impact_parameters_generator);
	byteswap(value._1st_person_impact_parameters_generator);
}

template<> void byteswap<blofeld::infinite::s_s_new_model_damage_section>(blofeld::infinite::s_s_new_model_damage_section& value)
{
	byteswap(value.name);
	byteswap(value.damage_part);
	byteswap(value.flags);
	byteswap(value.runtime_flags);
	byteswap(value.vitality_percentage);
	byteswap(value.maximum_vitality_percentage);
	byteswap(value.shield_material_name);
	byteswap(value.stun_time);
	byteswap(value.stun_duration);
	byteswap(value.minimum_stun_damage);
	byteswap(value.recharge_time);
	byteswap(value.recharge_speed_base_scalar);
	byteswap(value.recharge_speed_curve_block);
	byteswap(value.recharge_fractions_block);
	byteswap(value.recharging_effect);
	byteswap(value.pre_recharge_effect_warn_time);
	byteswap(value.pre_recharge_effect);
	byteswap(value.pre_recharge_effect_marker);
	byteswap(value.pre_recharge_abort_effect);
	byteswap(value.pre_recharge_abort_effect_marker);
	byteswap(value.overcharge_time);
	byteswap(value.overcharge_fraction);
	byteswap(value.pre_decay_time);
	byteswap(value.decay_time);
	byteswap(value.resurrection_restored_region_name);
	byteswap(value.anti_spam_timer_duration);
	byteswap(value.instant_responses_block);
	byteswap(value.section_damage_transfers_block);
	byteswap(value.rendering_block);
	byteswap(value.runtime_recharge_velocity);
	byteswap(value.runtime_overcharge_velocity);
	byteswap(value.runtime_resurrection_restored_region_index);
	byteswap(value.runtime_global_shield_material_type);
}

template<> void byteswap<blofeld::infinite::s_i343damageovershieldinformation>(blofeld::infinite::s_i343damageovershieldinformation& value)
{
	byteswap(value.decay_rate_);
	byteswap(value.stun_time_scalar);
	byteswap(value.generic_modifiers);
}

template<> void byteswap<blofeld::infinite::s_i343damagedamageablecomponentpropertiesdefinition>(blofeld::infinite::s_i343damagedamageablecomponentpropertiesdefinition& value)
{
	byteswap(value.max_overshield_scalar);
	byteswap(value.body_vitality);
	byteswap(value.direct_damage_resistance);
	byteswap(value.grenade_damage_resistance);
	byteswap(value.aoe_damage_resistance);
	byteswap(value.overshield_information);
}

template<> void byteswap<blofeld::infinite::s_s_new_model_damage_info>(blofeld::infinite::s_s_new_model_damage_info& value)
{
	byteswap(value.flags);
	byteswap(value.indirect_material_name);
	byteswap(value.indirect_damage_section);
	byteswap(value.shielded_state_damage_section);
	byteswap(value.restoration_effect);
	byteswap(value.damage_sections_block);
	byteswap(value.damage_constraints_block);
	byteswap(value.nodes_block);
	byteswap(value.runtime_indirect_material_type);
	byteswap(value.properties);
}

template<> void byteswap<blofeld::infinite::s_i343modelmodeltargetlockondata>(blofeld::infinite::s_i343modelmodeltargetlockondata& value)
{
	byteswap(value.lock_on_distance);
	byteswap(value.tracking_type);
}

template<> void byteswap<blofeld::infinite::s_i343modelmodeltarget>(blofeld::infinite::s_i343modelmodeltarget& value)
{
	byteswap(value.flags);
	byteswap(value.type);
	byteswap(value.category);
	byteswap(value.marker_name);
	byteswap(value.size);
	byteswap(value.cone_angle);
	byteswap(value.damage_section);
	byteswap(value.variant);
	byteswap(value.aim_assist_magnetism_scale);
	byteswap(value.ai_selection_priority_scale);
	byteswap(value.aoe_exclusion_radius);
	byteswap(value.lock_on_data);
}

template<> void byteswap<blofeld::infinite::s_s_model_permutation>(blofeld::infinite::s_s_model_permutation& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.collision_permutation_index);
	byteswap(value.physics_permutation_index);
}

template<> void byteswap<blofeld::infinite::s_s_model_region>(blofeld::infinite::s_s_model_region& value)
{
	byteswap(value.name);
	byteswap(value.collision_region_index);
	byteswap(value.physics_region_index);
	byteswap(value.permutations_block);
}

template<> void byteswap<blofeld::infinite::s_s_model_node>(blofeld::infinite::s_s_model_node& value)
{
	byteswap(value.name);
	byteswap(value.parent_node);
	byteswap(value.first_child_node);
	byteswap(value.next_sibling_node);
	byteswap(value.default_translation);
	byteswap(value.default_rotation);
	byteswap(value.default_inverse_scale);
	byteswap(value.default_inverse_forward);
	byteswap(value.default_inverse_left);
	byteswap(value.default_inverse_up);
	byteswap(value.default_inverse_position);
}

template<> void byteswap<blofeld::infinite::s_modelvariantoverridedef>(blofeld::infinite::s_modelvariantoverridedef& value)
{
	byteswap(value.base_variant);
	byteswap(value.override_a);
	byteswap(value.override_b);
	byteswap(value.override_c);
}

template<> void byteswap<blofeld::infinite::s_teammatechatterdialogueblockdefinition>(blofeld::infinite::s_teammatechatterdialogueblockdefinition& value)
{
	byteswap(value.teammate_chatter_dialogue);
}

template<> void byteswap<blofeld::infinite::s_specialdialogueblockdefinition>(blofeld::infinite::s_specialdialogueblockdefinition& value)
{
	byteswap(value.identifier);
	byteswap(value.special_dialogue);
}

template<> void byteswap<blofeld::infinite::s_s_model_definition>(blofeld::infinite::s_s_model_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.render_model);
	byteswap(value.collision_model);
	byteswap(value.animation);
	byteswap(value.physics_model);
	byteswap(value.runtime_render_checksum);
	byteswap(value.runtime_collision_checksum);
	byteswap(value.lightmap_flags);
	byteswap(value.pvs_bounding_box_extension_factor_);
	byteswap(value.pvs_block_size_);
	byteswap(value.pvs_sampling_subdivision_per_axis_);
	byteswap(value.pvs_visibility_threshold_);
	byteswap(value.asset_category_name);
	byteswap(value.asset_category_index);
	byteswap(value.lod_levels_block);
	byteswap(value.fade_out_after_distance);
	byteswap(value.disappear_distance);
	byteswap(value.begin_fade_distance);
	byteswap(value.animation_lod_distance);
	byteswap(value.shadow_fade_distance);
	byteswap(value.instance_disappear_distance);
	byteswap(value.midrange_detail_disappear_distance);
	byteswap(value.close_detail_disappear_distance);
	byteswap(value.tessellation_max_draw_distance);
	byteswap(value.resource_distance_override_flags);
	byteswap(value.medium_priority_distance);
	byteswap(value.low_priority_distance);
	byteswap(value.variants_block);
	byteswap(value.region_sort_block);
	byteswap(value.model_materials_block);
	byteswap(value.new_damage_info_block);
	byteswap(value.damage_info);
	byteswap(value.targets_old_block);
	byteswap(value.model_targets_block);
	byteswap(value.runtime_regions_block);
	byteswap(value.runtime_nodes_block);
	byteswap(value.runtime_node_list_checksum);
	byteswap(value.prepopulated_runtime_nodes_block);
	byteswap(value.variant_overrides_block);
	byteswap(value.default_dialogue);
	byteswap(value.default_dialogue_female);
	byteswap(value.teammate_chatter_dialogue_male_block);
	byteswap(value.teammate_chatter_dialogue_female_block);
	byteswap(value.special_dialogues_block);
	byteswap(value.flags);
	byteswap(value.runtime_flags);
	byteswap(value.render_only_node_flags);
	byteswap(value.render_only_section_flags);
	byteswap(value.sky_parallax_percent);
	byteswap(value.shadow_depth_compare_bias);
	byteswap(value.shadow_slope_scale_bias);
	byteswap(value.shadow_depth_compare_bias_dynamic_lights);
	byteswap(value.shadow_slope_scale_bias_dynamic_lights);
	byteswap(value.runtime_bounding_radius);
	byteswap(value.runtime_bounding_offset);
	byteswap(value.reload_hash);
}

template<> void byteswap<blofeld::infinite::s_hlodsettingspreset>(blofeld::infinite::s_hlodsettingspreset& value)
{
	byteswap(value.name);
	byteswap(value.hlodsettings);
}

template<> void byteswap<blofeld::infinite::s_hlodsettingspresetlist>(blofeld::infinite::s_hlodsettingspresetlist& value)
{
	byteswap(value.anytag);
	byteswap(value.settings_presets_block);
}

template<> void byteswap<blofeld::infinite::s_hlodsimplygonrepairsettings>(blofeld::infinite::s_hlodsimplygonrepairsettings& value)
{
	byteswap(value.tjuncdist);
	byteswap(value.welddist);
	byteswap(value.progressivepasses);
}

template<> void byteswap<blofeld::infinite::s_hlodsimplygonnormalsettings>(blofeld::infinite::s_hlodsimplygonnormalsettings& value)
{
	byteswap(value.hardedgeangleinradians);
}

template<> void byteswap<blofeld::infinite::s_hlodsimplygonmappingimagesettings>(blofeld::infinite::s_hlodsimplygonmappingimagesettings& value)
{
	byteswap(value.parameterizermaxstretch);
	byteswap(value.parameterizerlargechartsimportance);
	byteswap(value.gutterspace);
	byteswap(value.texcoordlevel);
	byteswap(value.texcoordgeneratortype);
	byteswap(value.multisamplinglevel);
	byteswap(value.texturesize);
	byteswap(value.chartaggregationmode);
	byteswap(value.chartaggregatororiginalchartproportionschannel);
}

template<> void byteswap<blofeld::infinite::s_hlodsimplygonweldingsettings>(blofeld::infinite::s_hlodsimplygonweldingsettings& value)
{
	byteswap(value.usewelding);
	byteswap(value.welddistance);
}

template<> void byteswap<blofeld::infinite::s_hlodsimplygonreductionsettings>(blofeld::infinite::s_hlodsimplygonreductionsettings& value)
{
	byteswap(value.repairsettings);
	byteswap(value.repairstates);
	byteswap(value.normalsettings);
	byteswap(value.normalstates);
	byteswap(value.mappingimagesettings);
	byteswap(value.mappingimagestates);
	byteswap(value.deviationmode);
	byteswap(value.maxdeviation);
	byteswap(value.reductiononscreensize);
	byteswap(value.derive_from_distance_scale);
	byteswap(value.reductionstates);
	byteswap(value.weldingsettingssource);
	byteswap(value.weldingsettings);
}

template<> void byteswap<blofeld::infinite::s_hlodsimplygonremeshingsettings>(blofeld::infinite::s_hlodsimplygonremeshingsettings& value)
{
	byteswap(value.remeshingonscreensize);
	byteswap(value.derive_from_distance_scale);
	byteswap(value.maxtrianglesize);
	byteswap(value.mergedistance);
	byteswap(value.mergeboldness);
	byteswap(value.hardedgeangleinradians);
	byteswap(value.remeshingstates);
	byteswap(value.mappingimagesettings);
	byteswap(value.mappingimagestates);
}

template<> void byteswap<blofeld::infinite::s_hlodsimplygonaggregationsettings>(blofeld::infinite::s_hlodsimplygonaggregationsettings& value)
{
	byteswap(value.mappingimagesettings);
	byteswap(value.mappingimagestates);
	byteswap(value.aggregationstates);
	byteswap(value.weldingsettings);
}

template<> void byteswap<blofeld::infinite::s_hlodvisibilitysettings>(blofeld::infinite::s_hlodvisibilitysettings& value)
{
	byteswap(value.computevisibilitymode);
	byteswap(value.fillnonvisibleareathreshold);
	byteswap(value.visibilityweightspower);
	byteswap(value.visibilitystates);
}

template<> void byteswap<blofeld::infinite::s_hlodsimplygonglobalsettings>(blofeld::infinite::s_hlodsimplygonglobalsettings& value)
{
	byteswap(value.states);
	byteswap(value.validateprocessingdebuglevel);
}

template<> void byteswap<blofeld::infinite::s_hlodsettings>(blofeld::infinite::s_hlodsettings& value)
{
	byteswap(value.anytag);
	byteswap(value.hlodgenerationpass);
	byteswap(value.bakingtextureresolution);
	byteswap(value.baking_texture_screen_space_multiplier);
	byteswap(value.bakingtexturedilation);
	byteswap(value.minimum_bounding_sphere_radius_to_include_in_hlod);
	byteswap(value.reduction);
	byteswap(value.remeshing);
	byteswap(value.aggregation);
	byteswap(value.visibility);
	byteswap(value.simplygonglobalsettings);
	byteswap(value.hlod_materials_to_cut_off_mesh_parts_block);
	byteswap(value.hlod_materials_to_put_the_geo_directly_into_the_hlod_bypassing_simplygon_block);
	byteswap(value.reference_to_a_list_of_hlod_materials_to_cut_off_mesh_parts);
}

template<> void byteswap<blofeld::infinite::s_hologramlight>(blofeld::infinite::s_hologramlight& value)
{
	byteswap(value.direction);
	byteswap(value.front_back);
	byteswap(value.intensity);
	byteswap(value.intensity_input);
	byteswap(value.forward_input);
	byteswap(value.right_input);
	byteswap(value.up_input);
}

template<> void byteswap<blofeld::infinite::s_hologramlighting>(blofeld::infinite::s_hologramlighting& value)
{
	byteswap(value.intensity);
	byteswap(value.intensity_input);
	byteswap(value.transparency_mode);
	byteswap(value.key_light);
	byteswap(value.fill_light);
	byteswap(value.rim_light);
}

template<> void byteswap<blofeld::infinite::s_hologramlightingtag>(blofeld::infinite::s_hologramlightingtag& value)
{
	byteswap(value.anytag);
	byteswap(value.hologram_lighting);
}

template<> void byteswap<blofeld::infinite::s_objectscriptdefinition>(blofeld::infinite::s_objectscriptdefinition& value)
{
	byteswap(value.classname);
	byteswap(value.parentname);
}

template<> void byteswap<blofeld::infinite::s_hsreferencesblockwithvariant>(blofeld::infinite::s_hsreferencesblockwithvariant& value)
{
	byteswap(value.reference);
	byteswap(value.load_variant);
	byteswap(value.name_hash);
}

template<> void byteswap<blofeld::infinite::s_hsweakreferencesblockwithvariant>(blofeld::infinite::s_hsweakreferencesblockwithvariant& value)
{
	byteswap(value.reference);
	byteswap(value.load_variant);
	byteswap(value.name_hash);
}

template<> void byteswap<blofeld::infinite::s_hsremotefunctionblock>(blofeld::infinite::s_hsremotefunctionblock& value)
{
	byteswap(value.function_name);
}

template<> void byteswap<blofeld::infinite::s_hstructfieldstringblock>(blofeld::infinite::s_hstructfieldstringblock& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_hstructfieldallowedextensionblock>(blofeld::infinite::s_hstructfieldallowedextensionblock& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_hstructfieldblock>(blofeld::infinite::s_hstructfieldblock& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value._typename);
	byteswap(value.prettyname);
	byteswap(value.tooltip);
	byteswap(value.group);
	byteswap(value.sourcetype);
	byteswap(value.userdefinedstrings_block);
	byteswap(value.allowedextensions_block);
	byteswap(value.min);
	byteswap(value.max);
	byteswap(value.step);
	byteswap(value.forgetaglistid);
}

template<> void byteswap<blofeld::infinite::s_hstructblock>(blofeld::infinite::s_hstructblock& value)
{
	byteswap(value.name);
	byteswap(value.fields_block);
}

template<> void byteswap<blofeld::infinite::s_hssourceruntimeerrormessage>(blofeld::infinite::s_hssourceruntimeerrormessage& value)
{
	byteswap(value.error_message);
}

template<> void byteswap<blofeld::infinite::s_hssourcefiletag>(blofeld::infinite::s_hssourcefiletag& value)
{
	byteswap(value.anytag);
	byteswap(value.hash);
	byteswap(value.sourceresource);
	byteswap(value.sourcedirectiveflags);
	byteswap(value.objectscriptdefinition);
	byteswap(value.serverbytecode);
	byteswap(value.clientbytecode);
	byteswap(value.references_with_variant_block);
	byteswap(value.weak_references_with_variant_block);
	byteswap(value.server_remotes_block);
	byteswap(value.client_remotes_block);
	byteswap(value.hstructs_block);
	byteswap(value.symbolresource);
	byteswap(value.postprocess_error_messages_block);
}

template<> void byteswap<blofeld::infinite::s_s_hs_source_reference>(blofeld::infinite::s_s_hs_source_reference& value)
{
	byteswap(value.reference);
}

template<> void byteswap<blofeld::infinite::s_i343haloscriptscriptdata>(blofeld::infinite::s_i343haloscriptscriptdata& value)
{
	byteswap(value.source_file_references_block);
	byteswap(value.external_source_references_block);
}

template<> void byteswap<blofeld::infinite::s_hsscriptcontainer>(blofeld::infinite::s_hsscriptcontainer& value)
{
	byteswap(value.anytag);
	byteswap(value.script_data);
}

template<> void byteswap<blofeld::infinite::s_i343highlightservicehighlightserviceglobalsdefinition_type>(blofeld::infinite::s_i343highlightservicehighlightserviceglobalsdefinition_type& value)
{
	byteswap(value.editor_depth_type);
}

template<> void byteswap<blofeld::infinite::s_i343highlightservicehighlightserviceglobalsdefinition>(blofeld::infinite::s_i343highlightservicehighlightserviceglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.editor_depth_block);
}

template<> void byteswap<blofeld::infinite::s_ingamemapmaterialvariation>(blofeld::infinite::s_ingamemapmaterialvariation& value)
{
	byteswap(value.name);
	byteswap(value.material);
}

template<> void byteswap<blofeld::infinite::s_ingamemapmaterialvariationstag>(blofeld::infinite::s_ingamemapmaterialvariationstag& value)
{
	byteswap(value.anytag);
	byteswap(value.defaultmaterial);
	byteswap(value.variations_block);
}

template<> void byteswap<blofeld::infinite::s_impostortag>(blofeld::infinite::s_impostortag& value)
{
	byteswap(value.anytag);
	byteswap(value.camera_distance);
	byteswap(value.number_of_camera_points);
	byteswap(value.texture_channels_rendered);
	byteswap(value.grid_shape);
	byteswap(value.texture_size);
	byteswap(value.maximum_lod_index);
}

template<> void byteswap<blofeld::infinite::s_inputbundleref>(blofeld::infinite::s_inputbundleref& value)
{
	byteswap(value.bundle);
}

template<> void byteswap<blofeld::infinite::s_inputbundlesetref>(blofeld::infinite::s_inputbundlesetref& value)
{
	byteswap(value.bundleset);
}

template<> void byteswap<blofeld::infinite::s_inputbundleset>(blofeld::infinite::s_inputbundleset& value)
{
	byteswap(value.anytag);
	byteswap(value.bundles_block);
	byteswap(value.children_block);
	byteswap(value.flatbundles_block);
}

template<> void byteswap<blofeld::infinite::s_inputaxis>(blofeld::infinite::s_inputaxis& value)
{
	byteswap(value.name);
	byteswap(value.default_value);
	byteswap(value.behavior);
}

template<> void byteswap<blofeld::infinite::s_inputdevicebinding>(blofeld::infinite::s_inputdevicebinding& value)
{
	byteswap(value.device);
	byteswap(value.output);
}

template<> void byteswap<blofeld::infinite::s_inputaxisref>(blofeld::infinite::s_inputaxisref& value)
{
	byteswap(value.bundle);
	byteswap(value.axis);
	byteswap(value.axisindex);
}

template<> void byteswap<blofeld::infinite::s_inputaxisconnection>(blofeld::infinite::s_inputaxisconnection& value)
{
	byteswap(value.external);
	byteswap(value.internal);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_inputaxismap>(blofeld::infinite::s_inputaxismap& value)
{
	byteswap(value.input0);
	byteswap(value.input1);
	byteswap(value.output);
	byteswap(value.operation);
	byteswap(value.minimum);
	byteswap(value.maximum);
}

template<> void byteswap<blofeld::infinite::s_inputaxisindex>(blofeld::infinite::s_inputaxisindex& value)
{
	byteswap(value.axisindex);
}

template<> void byteswap<blofeld::infinite::s_inputbundle>(blofeld::infinite::s_inputbundle& value)
{
	byteswap(value.anytag);
	byteswap(value.axes_block);
	byteswap(value.bindings_block);
	byteswap(value.connections_block);
	byteswap(value.maps_block);
	byteswap(value.constants_block);
}

template<> void byteswap<blofeld::infinite::s_inputdevicebindingentry>(blofeld::infinite::s_inputdevicebindingentry& value)
{
	byteswap(value.device);
	byteswap(value.axis);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_inputdevicebindings>(blofeld::infinite::s_inputdevicebindings& value)
{
	byteswap(value.anytag);
	byteswap(value.bindings_block);
}

template<> void byteswap<blofeld::infinite::s_inputmode>(blofeld::infinite::s_inputmode& value)
{
	byteswap(value.anytag);
	byteswap(value.include);
	byteswap(value.exclude);
	byteswap(value.priority);
}

template<> void byteswap<blofeld::infinite::s_inputaxisendpointsource>(blofeld::infinite::s_inputaxisendpointsource& value)
{
	byteswap(value.name);
	byteswap(value.axis);
}

template<> void byteswap<blofeld::infinite::s_inputbundleendpointsource>(blofeld::infinite::s_inputbundleendpointsource& value)
{
	byteswap(value.name);
	byteswap(value.bundle);
}

template<> void byteswap<blofeld::infinite::s_inputmodeendpointsource>(blofeld::infinite::s_inputmodeendpointsource& value)
{
	byteswap(value.name);
	byteswap(value.mode);
}

template<> void byteswap<blofeld::infinite::s_inputscopetag>(blofeld::infinite::s_inputscopetag& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.axisendpoints_block);
	byteswap(value.bundleendpoints_block);
	byteswap(value.modeendpoints_block);
}

template<> void byteswap<blofeld::infinite::s_interactiondefinition>(blofeld::infinite::s_interactiondefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.duration_bounds);
	byteswap(value.radius);
	byteswap(value.interaction_strength_over_time);
	byteswap(value.interaction_falloff_function);
}

template<> void byteswap<blofeld::infinite::s_inheritedanimationnodemap>(blofeld::infinite::s_inheritedanimationnodemap& value)
{
	byteswap(value.local_node);
}

template<> void byteswap<blofeld::infinite::s_inheritedanimationnodemapflag>(blofeld::infinite::s_inheritedanimationnodemapflag& value)
{
	byteswap(value.local_node_flags);
}

template<> void byteswap<blofeld::infinite::s_inheritedanimationdata>(blofeld::infinite::s_inheritedanimationdata& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_animationgraphparentdata>(blofeld::infinite::s_animationgraphparentdata& value)
{
	byteswap(value.parent_graph);
	byteswap(value.inheritance_flags);
	byteswap(value.node_map_block);
	byteswap(value.node_map_flags_block);
	byteswap(value.uniform_translation_scale);
	byteswap(value.alias_index);
	byteswap(value.base_index);
	byteswap(value.temp_anim_list_block);
}

template<> void byteswap<blofeld::infinite::s_animationgraphinheritancesettings>(blofeld::infinite::s_animationgraphinheritancesettings& value)
{
	byteswap(value.inherited_graph_block);
}

template<> void byteswap<blofeld::infinite::s_animationgrapheventreferences>(blofeld::infinite::s_animationgrapheventreferences& value)
{
	byteswap(value.events_file);
	byteswap(value.sound_references_block);
	byteswap(value.dialogue_references_block);
	byteswap(value.effect_references_block);
}

template<> void byteswap<blofeld::infinite::s_animationgraphpcareference>(blofeld::infinite::s_animationgraphpcareference& value)
{
	byteswap(value.pca_animation);
}

template<> void byteswap<blofeld::infinite::s_animationgraphexternalreferences>(blofeld::infinite::s_animationgraphexternalreferences& value)
{
	byteswap(value.inheritance$2);
	byteswap(value.events$2);
	byteswap(value.pca);
}

template<> void byteswap<blofeld::infinite::s_animationgraphsettings>(blofeld::infinite::s_animationgraphsettings& value)
{
	byteswap(value.graph_flags);
	byteswap(value.private_flags);
	byteswap(value.force_compression_setting);
	byteswap(value.animation_codec_pack);
}

template<> void byteswap<blofeld::infinite::s_i343animationfirstpersonoverlaychannelsliderweightfunctionmap>(blofeld::infinite::s_i343animationfirstpersonoverlaychannelsliderweightfunctionmap& value)
{
	byteswap(value.overlay_animation_name);
	byteswap(value.channel_weight_scale_source);
}

template<> void byteswap<blofeld::infinite::s_animationresourceindex>(blofeld::infinite::s_animationresourceindex& value)
{
	byteswap(value.resource_group);
	byteswap(value.resource_member_index);
}

template<> void byteswap<blofeld::infinite::s_c_model_animation>(blofeld::infinite::s_c_model_animation& value)
{
	byteswap(value.name);
	byteswap(value.frame_count);
	byteswap(value.node_count);
	byteswap(value.animation_type);
	byteswap(value.frame_info_type);
	byteswap(value.desired_frame_info_type);
	byteswap(value.desired_compression);
	byteswap(value.current_compression);
	byteswap(value.parent_animation);
	byteswap(value.next_animation);
	byteswap(value.composite);
	byteswap(value.weight);
	byteswap(value.loop_frame_index);
	byteswap(value.user_flags);
	byteswap(value.replacement_interpolator);
	byteswap(value.override_blend_in_time);
	byteswap(value.replacement_blend_in_weight_function);
	byteswap(value.override_blend_out_time);
	byteswap(value.replacement_blend_out_weight_function);
	byteswap(value.pca_group_name);
	byteswap(value.first_person_overlay_channel_slider_weight_function_map_block);
	byteswap(value.internal_flags);
	byteswap(value.compressor_version);
	byteswap(value.heading);
	byteswap(value.heading_angle);
	byteswap(value.average_translation_magnitude);
	byteswap(value.average_pivot_yaw);
	byteswap(value.original_object_space_yaw);
	byteswap(value.maxelevationoffset);
	byteswap(value.uid);
	byteswap(value.node_list_checksum);
	byteswap(value.resource_index);
}

template<> void byteswap<blofeld::infinite::s_pcagroupsettings>(blofeld::infinite::s_pcagroupsettings& value)
{
	byteswap(value.group_name);
	byteswap(value.desired_mesh_count);
	byteswap(value.position_importance_scale);
	byteswap(value.normal_importance_scale);
	byteswap(value.tension_importance_scale);
}

template<> void byteswap<blofeld::infinite::s_animationgraphpcadata>(blofeld::infinite::s_animationgraphpcadata& value)
{
	byteswap(value.pca_groups_block);
	byteswap(value.pca_animation_count);
	byteswap(value.pca_checksum);
}

template<> void byteswap<blofeld::infinite::s_compositedeadzone>(blofeld::infinite::s_compositedeadzone& value)
{
	byteswap(value.bounds);
	byteswap(value.rate);
	byteswap(value.center);
	byteswap(value.radius);
	byteswap(value.amount);
	byteswap(value.delay);
}

template<> void byteswap<blofeld::infinite::s_compositeaxis>(blofeld::infinite::s_compositeaxis& value)
{
	byteswap(value.name);
	byteswap(value.animation_source);
	byteswap(value.input_function);
	byteswap(value.animation_bounds);
	byteswap(value.input_bounds);
	byteswap(value.clamp_bounds);
	byteswap(value.blend_limit);
	byteswap(value.dead_zones_block);
	byteswap(value.divisions);
	byteswap(value.priority);
	byteswap(value.update);
	byteswap(value.functionindex);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_compositeentryvalue>(blofeld::infinite::s_compositeentryvalue& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_compositeentry>(blofeld::infinite::s_compositeentry& value)
{
	byteswap(value.source);
	byteswap(value.values_block);
	byteswap(value.overridden);
	byteswap(value.animindex);
	byteswap(value.slideaxis);
}

template<> void byteswap<blofeld::infinite::s_synckey>(blofeld::infinite::s_synckey& value)
{
	byteswap(value.key);
}

template<> void byteswap<blofeld::infinite::s_compositephaseset>(blofeld::infinite::s_compositephaseset& value)
{
	byteswap(value.name);
	byteswap(value.timing_source);
	byteswap(value.sync_points_block);
	byteswap(value.sync_frames);
	byteswap(value.facets);
	byteswap(value.neighbors);
	byteswap(value.containment);
	byteswap(value.example_grid);
	byteswap(value.normalized_bounds);
	byteswap(value.offset);
	byteswap(value.timinganimindex);
}

template<> void byteswap<blofeld::infinite::s_animationordefaultstringidblocktype>(blofeld::infinite::s_animationordefaultstringidblocktype& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_compositetag>(blofeld::infinite::s_compositetag& value)
{
	byteswap(value.name);
	byteswap(value.axes_block);
	byteswap(value.anims_block);
	byteswap(value.sets_block);
	byteswap(value.strings_block);
	byteswap(value.timing_source);
	byteswap(value.timinganimindex);
	byteswap(value.medianthrottlemag);
}

template<> void byteswap<blofeld::infinite::s_animationtokenentry>(blofeld::infinite::s_animationtokenentry& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_overlaytokenentry>(blofeld::infinite::s_overlaytokenentry& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_poseblendtokenentry>(blofeld::infinite::s_poseblendtokenentry& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_s_animation_function>(blofeld::infinite::s_s_animation_function& value)
{
	byteswap(value.name);
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_c_animation_id>(blofeld::infinite::s_c_animation_id& value)
{
	byteswap(value.parent_graph);
	byteswap(value.animation);
}

template<> void byteswap<blofeld::infinite::s_animationblendscreendefinition>(blofeld::infinite::s_animationblendscreendefinition& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.weight);
	byteswap(value.interpolation_rate);
	byteswap(value.yaw_source);
	byteswap(value.pitch_source);
	byteswap(value.yaw_source_object_function);
	byteswap(value.pitch_source_object_function);
	byteswap(value.weight_source);
	byteswap(value.secondary_weight_source);
	byteswap(value.weight_source_object_function);
	byteswap(value.secondary_weight_object_function);
	byteswap(value.weight_function);
	byteswap(value.animation);
	byteswap(value.animation_token);
}

template<> void byteswap<blofeld::infinite::s_s_new_animation_function_overlay>(blofeld::infinite::s_s_new_animation_function_overlay& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.frame_ratio_object_function);
	byteswap(value.playback_speed_object_function);
	byteswap(value.blend_weight_object_function);
	byteswap(value.unlock_function);
	byteswap(value.unlock_range);
	byteswap(value.animation);
	byteswap(value.animation_token);
	byteswap(value.start_lod_taper);
	byteswap(value.end_lod_taper);
}

template<> void byteswap<blofeld::infinite::s_s_blend_screen_item>(blofeld::infinite::s_s_blend_screen_item& value)
{
	byteswap(value.blend_screen);
	byteswap(value.flags);
	byteswap(value.node_mask);
}

template<> void byteswap<blofeld::infinite::s_s_function_overlay_item>(blofeld::infinite::s_s_function_overlay_item& value)
{
	byteswap(value.function_overlay);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_overlay_group>(blofeld::infinite::s_s_overlay_group& value)
{
	byteswap(value.name);
	byteswap(value.blend_screens_block);
	byteswap(value.function_overlays_block);
}

template<> void byteswap<blofeld::infinite::s_animationinterpolator>(blofeld::infinite::s_animationinterpolator& value)
{
	byteswap(value.name);
	byteswap(value.bone_mask);
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_animationinterpolationentry>(blofeld::infinite::s_animationinterpolationentry& value)
{
	byteswap(value.interpolator);
}

template<> void byteswap<blofeld::infinite::s_animationinterpolationset>(blofeld::infinite::s_animationinterpolationset& value)
{
	byteswap(value.name);
	byteswap(value.seconds);
	byteswap(value.interpolators_block);
	byteswap(value.default_curve);
}

template<> void byteswap<blofeld::infinite::s_s_mode_or_stance_alias>(blofeld::infinite::s_s_mode_or_stance_alias& value)
{
	byteswap(value.mode_or_stance);
	byteswap(value.alias);
}

template<> void byteswap<blofeld::infinite::s_s_model_animation_variant>(blofeld::infinite::s_s_model_animation_variant& value)
{
	byteswap(value.variant_name);
	byteswap(value.mode_or_stance_aliases_block);
}

template<> void byteswap<blofeld::infinite::s_s_function_driven_variant>(blofeld::infinite::s_s_function_driven_variant& value)
{
	byteswap(value.function_name);
	byteswap(value.mode_or_stance_aliases_block);
}

template<> void byteswap<blofeld::infinite::s_s_animation_entry>(blofeld::infinite::s_s_animation_entry& value)
{
	byteswap(value.label);
	byteswap(value.overlay_group);
	byteswap(value.ik_set);
	byteswap(value.animation);
}

template<> void byteswap<blofeld::infinite::s_damageregionparam>(blofeld::infinite::s_damageregionparam& value)
{
	byteswap(value.animation);
}

template<> void byteswap<blofeld::infinite::s_s_animation_damage_direction>(blofeld::infinite::s_s_animation_damage_direction& value)
{
	byteswap(value.regions_block);
}

template<> void byteswap<blofeld::infinite::s_s_animation_damage_actions>(blofeld::infinite::s_s_animation_damage_actions& value)
{
	byteswap(value.label);
	byteswap(value.directions_block);
}

template<> void byteswap<blofeld::infinite::s_animationtransitionsettings>(blofeld::infinite::s_animationtransitionsettings& value)
{
	byteswap(value.transition_lerp);
	byteswap(value.transition_anim);
	byteswap(value.anim_timing_function);
	byteswap(value.anim_lerp_in);
	byteswap(value.anim_lerp_out);
}

template<> void byteswap<blofeld::infinite::s_s_animation_transition_destination>(blofeld::infinite::s_s_animation_transition_destination& value)
{
	byteswap(value.mode_name);
	byteswap(value.state_name);
	byteswap(value.transition_settings);
}

template<> void byteswap<blofeld::infinite::s_s_animation_transition_source>(blofeld::infinite::s_s_animation_transition_source& value)
{
	byteswap(value.state_name);
	byteswap(value.destinations_block);
}

template<> void byteswap<blofeld::infinite::s_animationvelocityboundary>(blofeld::infinite::s_animationvelocityboundary& value)
{
	byteswap(value.values);
}

template<> void byteswap<blofeld::infinite::s_s_animation_velocity_boundaries>(blofeld::infinite::s_s_animation_velocity_boundaries& value)
{
	byteswap(value.velocity_boundary_entries);
}

template<> void byteswap<blofeld::infinite::s_c_animation_set>(blofeld::infinite::s_c_animation_set& value)
{
	byteswap(value.label);
	byteswap(value.overlay_group);
	byteswap(value.ik_set);
	byteswap(value.actions_block);
	byteswap(value.overlay_animations_block);
	byteswap(value.death_and_damage_block);
	byteswap(value.transitions_block);
	byteswap(value.velocity_boundaries_block);
}

template<> void byteswap<blofeld::infinite::s_c_weapon_type>(blofeld::infinite::s_c_weapon_type& value)
{
	byteswap(value.label);
	byteswap(value.overlay_group);
	byteswap(value.ik_set);
	byteswap(value.sets_block);
}

template<> void byteswap<blofeld::infinite::s_s_animation_ik_point_v1>(blofeld::infinite::s_s_animation_ik_point_v1& value)
{
	byteswap(value.marker);
	byteswap(value.attach_to_marker);
	byteswap(value.weight_source_object_function);
	byteswap(value.priority_source_object_function);
}

template<> void byteswap<blofeld::infinite::s_s_ranged_animation_entry>(blofeld::infinite::s_s_ranged_animation_entry& value)
{
	byteswap(value.overlay_group);
	byteswap(value.ik_set);
	byteswap(value.animation);
	byteswap(value.animation_parameter);
	byteswap(value.animation_parameter_b);
}

template<> void byteswap<blofeld::infinite::s_triangulationpoint>(blofeld::infinite::s_triangulationpoint& value)
{
	byteswap(value.point);
}

template<> void byteswap<blofeld::infinite::s_s_blend_screen_delaunay_triangle>(blofeld::infinite::s_s_blend_screen_delaunay_triangle& value)
{
	byteswap(value.vertex1);
	byteswap(value.vertex2);
	byteswap(value.vertex3);
	byteswap(value.link12);
	byteswap(value.link23);
	byteswap(value.link31);
}

template<> void byteswap<blofeld::infinite::s_s_triangulation_tag_struct>(blofeld::infinite::s_s_triangulation_tag_struct& value)
{
	byteswap(value.points_block);
	byteswap(value.triangles_block);
}

template<> void byteswap<blofeld::infinite::s_s_animation_ranged_action>(blofeld::infinite::s_s_animation_ranged_action& value)
{
	byteswap(value.label);
	byteswap(value.animations_block);
	byteswap(value.triangulation_data_block);
	byteswap(value.horizontal_source);
	byteswap(value.vertical_source);
	byteswap(value.start_key);
	byteswap(value.end_key);
}

template<> void byteswap<blofeld::infinite::s_s_animation_sync_action_same_type_participant>(blofeld::infinite::s_s_animation_sync_action_same_type_participant& value)
{
	byteswap(value.flags);
	byteswap(value.animation);
	byteswap(value.start_offset);
	byteswap(value.start_facing);
	byteswap(value.end_offset);
	byteswap(value.time_until_hurt);
	byteswap(value.apex_offset);
}

template<> void byteswap<blofeld::infinite::s_s_animation_sync_action_other_type_participant>(blofeld::infinite::s_s_animation_sync_action_other_type_participant& value)
{
	byteswap(value.flags);
	byteswap(value.object_type);
}

template<> void byteswap<blofeld::infinite::s_s_animation_sync_action>(blofeld::infinite::s_s_animation_sync_action& value)
{
	byteswap(value.name);
	byteswap(value.sync_action_type);
	byteswap(value.same_type_participants_block);
	byteswap(value.other_participants_block);
}

template<> void byteswap<blofeld::infinite::s_s_animation_sync_action_group>(blofeld::infinite::s_s_animation_sync_action_group& value)
{
	byteswap(value.name);
	byteswap(value.sync_actions_block);
}

template<> void byteswap<blofeld::infinite::s_c_weapon_class>(blofeld::infinite::s_c_weapon_class& value)
{
	byteswap(value.label);
	byteswap(value.overlay_group);
	byteswap(value.ik_set);
	byteswap(value.weapon_type_block);
	byteswap(value.weapon_ik_block);
	byteswap(value.ranged_actions_block);
	byteswap(value.sync_actions_groups_block);
}

template<> void byteswap<blofeld::infinite::s_c_animation_mode>(blofeld::infinite::s_c_animation_mode& value)
{
	byteswap(value.label);
	byteswap(value.overlay_group);
	byteswap(value.ik_set);
	byteswap(value.flags);
	byteswap(value.weapon_class_block);
	byteswap(value.mode_ik_block);
}

template<> void byteswap<blofeld::infinite::s_c_vehicle_suspension>(blofeld::infinite::s_c_vehicle_suspension& value)
{
	byteswap(value.label);
	byteswap(value.animation);
	byteswap(value.function_name);
	byteswap(value.marker_name);
	byteswap(value.contact_marker_name);
	byteswap(value.mass_point_offset);
	byteswap(value.full_extension_ground_depth);
	byteswap(value.full_compression_ground_depth);
	byteswap(value.region_name);
	byteswap(value.destroyed_mass_point_offset);
	byteswap(value.destroyed_full_extension_ground_depth);
	byteswap(value.destroyed_full_compression_ground_depth);
}

template<> void byteswap<blofeld::infinite::s_s_function_overlay>(blofeld::infinite::s_s_function_overlay& value)
{
	byteswap(value.label);
	byteswap(value.animation);
	byteswap(value.function_controls);
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_animationgraphcontents>(blofeld::infinite::s_animationgraphcontents& value)
{
	byteswap(value.links);
	byteswap(value.settings);
	byteswap(value.skeleton_link);
	byteswap(value.skeleton);
	byteswap(value.ik);
	byteswap(value.animations_block);
	byteswap(value.pca_data);
	byteswap(value.composites_block);
	byteswap(value.action_tokens_block);
	byteswap(value.overlay_tokens_block);
	byteswap(value.poseblend_tokens_block);
	byteswap(value.functions_block);
	byteswap(value.blend_screens_block);
	byteswap(value.function_overlays_block);
	byteswap(value.overlay_groups_block);
	byteswap(value.interpolators_block);
	byteswap(value.interpolation_sets_block);
	byteswap(value.model_animation_variants_block);
	byteswap(value.object_function_variants_block);
	byteswap(value.modes_block);
	byteswap(value.vehicle_suspension_block);
	byteswap(value.constant_overlays_block);
}

template<> void byteswap<blofeld::infinite::s_s_weapon_class_listing>(blofeld::infinite::s_s_weapon_class_listing& value)
{
	byteswap(value.weapon_name);
	byteswap(value.weapon_class);
}

template<> void byteswap<blofeld::infinite::s_s_model_animation_runtime_data>(blofeld::infinite::s_s_model_animation_runtime_data& value)
{
	byteswap(value.weapon_list_block);
	byteswap(value.left_arm_bit_vector);
	byteswap(value.right_arm_bit_vector);
}

template<> void byteswap<blofeld::infinite::s_s_additional_node_data>(blofeld::infinite::s_s_additional_node_data& value)
{
	byteswap(value.node_name);
	byteswap(value.default_rotation);
	byteswap(value.default_translation);
	byteswap(value.default_scale);
	byteswap(value.min_bounds);
	byteswap(value.max_bounds);
}

template<> void byteswap<blofeld::infinite::s_c_model_animation_tag_refrence_counted_resource>(blofeld::infinite::s_c_model_animation_tag_refrence_counted_resource& value)
{
	byteswap(value.reference_count);
	byteswap(value.tag_resource);
}

template<> void byteswap<blofeld::infinite::s_c_quantized_quaternion_8byte_revised>(blofeld::infinite::s_c_quantized_quaternion_8byte_revised& value)
{
	byteswap(value.i);
	byteswap(value.j);
	byteswap(value.k);
	byteswap(value.w);
}

template<> void byteswap<blofeld::infinite::s_sharedstaticdatacodectranslation>(blofeld::infinite::s_sharedstaticdatacodectranslation& value)
{
	byteswap(value.x);
	byteswap(value.y);
	byteswap(value.z);
}

template<> void byteswap<blofeld::infinite::s_sharedstaticdatacodecscale>(blofeld::infinite::s_sharedstaticdatacodecscale& value)
{
	byteswap(value.scale);
}

template<> void byteswap<blofeld::infinite::s_s_shared_static_data_codec_graph_data>(blofeld::infinite::s_s_shared_static_data_codec_graph_data& value)
{
	byteswap(value.rotations_block);
	byteswap(value.translations_block);
	byteswap(value.scale_block);
}

template<> void byteswap<blofeld::infinite::s_s_animation_codec_data>(blofeld::infinite::s_s_animation_codec_data& value)
{
	byteswap(value.shared_static_codec);
}

template<> void byteswap<blofeld::infinite::s_c_model_animation_graph>(blofeld::infinite::s_c_model_animation_graph& value)
{
	byteswap(value.anytag);
	byteswap(value.content);
	byteswap(value.run_time_data);
	byteswap(value.additional_node_data_block);
	byteswap(value.tag_resource_groups_block);
	byteswap(value.codec_data);
}

template<> void byteswap<blofeld::infinite::s_damageouterconeangle>(blofeld::infinite::s_damageouterconeangle& value)
{
	byteswap(value.dmg_outer_cone_angle);
}

template<> void byteswap<blofeld::infinite::s_i343damagevampirismparameters>(blofeld::infinite::s_i343damagevampirismparameters& value)
{
	byteswap(value.flags);
	byteswap(value.percent_transferred);
	byteswap(value.max_overshield);
	byteswap(value.overshield_malleable_properties);
}

template<> void byteswap<blofeld::infinite::s_customdamageresponselabelparam>(blofeld::infinite::s_customdamageresponselabelparam& value)
{
	byteswap(value.custom_label);
}

template<> void byteswap<blofeld::infinite::s_s_damage_effect_sound>(blofeld::infinite::s_s_damage_effect_sound& value)
{
	byteswap(value.sound);
	byteswap(value.damage_types);
	byteswap(value.object_types);
}

template<> void byteswap<blofeld::infinite::s_s_damage_effect_definition>(blofeld::infinite::s_s_damage_effect_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.radius);
	byteswap(value.cutoff_scale);
	byteswap(value.effect_flags);
	byteswap(value.damagetype);
	byteswap(value.side_effect);
	byteswap(value.category);
	byteswap(value.death_vocalization);
	byteswap(value.flags);
	byteswap(value.secondary_flags);
	byteswap(value.modifiers);
	byteswap(value.headshot_damage_multiplier);
	byteswap(value.headshot_shielded_damage_multiplier);
	byteswap(value.aoe_core_radius);
	byteswap(value.aoe_force_offset_z);
	byteswap(value.damage_lower_bound);
	byteswap(value.damage_upper_bound);
	byteswap(value.damage_falloff_function);
	byteswap(value.dmg_inner_cone_angle);
	byteswap(value.blah);
	byteswap(value.active_camouflage_damage);
	byteswap(value.active_camouflage_damage_range);
	byteswap(value.movement_stun);
	byteswap(value.maximum_movement_stun);
	byteswap(value.turn_stun);
	byteswap(value.maximum_turn_stun);
	byteswap(value.stun_time);
	byteswap(value.damage_stun);
	byteswap(value.instantaneous_acceleration);
	byteswap(value.alt_instantaneous_acceleration);
	byteswap(value.prop_instantaneous_acceleration);
	byteswap(value.acceleration_cap);
	byteswap(value.ai_stun_time);
	byteswap(value.ai_stun_magnitude);
	byteswap(value.impale_initial_velocity);
	byteswap(value.impale_drag_acceleration);
	byteswap(value.impale_gravity_acceleration);
	byteswap(value.impale_minimum_velocity);
	byteswap(value.impale_maximum_angle);
	byteswap(value.impale_effect_duration);
	byteswap(value.soft_ping_pain_screen_scale);
	byteswap(value.general_damage);
	byteswap(value.specific_damage);
	byteswap(value.vampirism$2);
	byteswap(value.custom_response_labels_block);
	byteswap(value.ai_stun_radius);
	byteswap(value.ai_stun_bounds);
	byteswap(value.ainoisevolume);
	byteswap(value.shake_radius);
	byteswap(value.emp_radius);
	byteswap(value.emp_duration_scalar);
	byteswap(value.aoe_spike_radius);
	byteswap(value.aoe_spike_damage_bump);
	byteswap(value.shield_render_effects_scale);
	byteswap(value.equipment_hack_time);
	byteswap(value.damage_response$2);
	byteswap(value.damage_sounds_block);
	byteswap(value.damage_dealt_sfx_cooldown_time);
	byteswap(value.damage_received_sfx_cooldown_time);
	byteswap(value.deprecated_player_dealt_damage_additive_sound);
	byteswap(value.deprecated_player_dealt_aoe_damage_additive_sound);
	byteswap(value.deprecated_player_dealt_friendly_fire_additive_sound);
	byteswap(value.player_additive_sound_deal_damage);
	byteswap(value.player_received_damage_additive_sound_default);
	byteswap(value.player_received_damage_additive_sound_third_person);
	byteswap(value.player_received_damage_additive_sound_in_vehicle);
	byteswap(value.player_received_aoe_damage_additive_sound_default);
	byteswap(value.player_received_aoe_damage_additive_sound_third_person);
	byteswap(value.player_received_aoe_damage_additive_sound_in_vehicle);
	byteswap(value.damage_effect_sounds);
	byteswap(value.visual_damage_radius);
	byteswap(value.visual_damage_intensity);
}

template<> void byteswap<blofeld::infinite::s_kitcollectionentry>(blofeld::infinite::s_kitcollectionentry& value)
{
	byteswap(value.kit);
}

template<> void byteswap<blofeld::infinite::s_kitcollectiontag>(blofeld::infinite::s_kitcollectiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.kits_block);
}

template<> void byteswap<blofeld::infinite::s_i343equipmentknockbackresponseoverride>(blofeld::infinite::s_i343equipmentknockbackresponseoverride& value)
{
	byteswap(value.for_object);
	byteswap(value.impulse_scalar);
}

template<> void byteswap<blofeld::infinite::s_i343equipmentknockbackresponseoverrideset>(blofeld::infinite::s_i343equipmentknockbackresponseoverrideset& value)
{
	byteswap(value.anytag);
	byteswap(value.overrides_block);
}

template<> void byteswap<blofeld::infinite::s_animsetref>(blofeld::infinite::s_animsetref& value)
{
	byteswap(value.anim_set_reference);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetanimationentry>(blofeld::infinite::s_legacyanimsetanimationentry& value)
{
	byteswap(value.name);
	byteswap(value.animset_index_in_legacyanimset_tag);
	byteswap(value.animset_parent_depth);
	byteswap(value.animsetentry_index);
	byteswap(value.composite_index);
	byteswap(value.anim_pool_subgraph_index);
	byteswap(value.anim_pool_animation_index);
}

template<> void byteswap<blofeld::infinite::s_jointnameblock>(blofeld::infinite::s_jointnameblock& value)
{
	byteswap(value.joint_name);
}

template<> void byteswap<blofeld::infinite::s_animationjointflags>(blofeld::infinite::s_animationjointflags& value)
{
	byteswap(value.legacy_animation_name);
	byteswap(value.fik_joint_names_block);
	byteswap(value.object_space_correction_joint_name_block);
	byteswap(value.replacement_offset_correction_joint_name_block);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetrenameentry>(blofeld::infinite::s_legacyanimsetrenameentry& value)
{
	byteswap(value.alias);
	byteswap(value.source);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetcopyentry>(blofeld::infinite::s_legacyanimsetcopyentry& value)
{
	byteswap(value.destination);
	byteswap(value.source);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetfunction>(blofeld::infinite::s_legacyanimsetfunction& value)
{
	byteswap(value.name);
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetblendscreen>(blofeld::infinite::s_legacyanimsetblendscreen& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.weight);
	byteswap(value.interpolation_rate);
	byteswap(value.yaw_source);
	byteswap(value.pitch_source);
	byteswap(value.yaw_source_function);
	byteswap(value.pitch_source_function);
	byteswap(value.weight_source);
	byteswap(value.secondary_weight_source);
	byteswap(value.weight_source_object_function);
	byteswap(value.secondary_weight_object_function);
	byteswap(value.weight_function);
	byteswap(value.animation);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetfunctionoverlay>(blofeld::infinite::s_legacyanimsetfunctionoverlay& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.frame_ratio_function);
	byteswap(value.playback_speed_function);
	byteswap(value.blend_weight_function);
	byteswap(value.unlock_function);
	byteswap(value.unlock_range);
	byteswap(value.animation);
	byteswap(value.start_lod_taper);
	byteswap(value.end_lod_taper);
}

template<> void byteswap<blofeld::infinite::s_blendscreenreference>(blofeld::infinite::s_blendscreenreference& value)
{
	byteswap(value.blend_screen);
	byteswap(value.flags);
	byteswap(value.node_mask);
}

template<> void byteswap<blofeld::infinite::s_functionoverlayreference>(blofeld::infinite::s_functionoverlayreference& value)
{
	byteswap(value.function_overlay);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetoverlaygroup>(blofeld::infinite::s_legacyanimsetoverlaygroup& value)
{
	byteswap(value.name);
	byteswap(value.blend_screens_block);
	byteswap(value.function_overlays_block);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetinterpolator>(blofeld::infinite::s_legacyanimsetinterpolator& value)
{
	byteswap(value.name);
	byteswap(value.joint_mask);
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_interpolatorlistentry>(blofeld::infinite::s_interpolatorlistentry& value)
{
	byteswap(value.interpolator);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetinterpolationset>(blofeld::infinite::s_legacyanimsetinterpolationset& value)
{
	byteswap(value.name);
	byteswap(value.seconds);
	byteswap(value.interpolators_block);
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetmodeorstancealias>(blofeld::infinite::s_legacyanimsetmodeorstancealias& value)
{
	byteswap(value.mode_or_stance);
	byteswap(value.alias);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetmodelanimationvariant>(blofeld::infinite::s_legacyanimsetmodelanimationvariant& value)
{
	byteswap(value.name);
	byteswap(value.mode_or_stance_aliases_block);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetobjectfunctionvariant>(blofeld::infinite::s_legacyanimsetobjectfunctionvariant& value)
{
	byteswap(value.name);
	byteswap(value.mode_or_stance_aliases_block);
}

template<> void byteswap<blofeld::infinite::s_modetreeanimentry>(blofeld::infinite::s_modetreeanimentry& value)
{
	byteswap(value.name);
	byteswap(value.overlay_group);
	byteswap(value.ik_set);
	byteswap(value.animation);
	byteswap(value.animation_name);
}

template<> void byteswap<blofeld::infinite::s_damageregion>(blofeld::infinite::s_damageregion& value)
{
	byteswap(value.animation);
	byteswap(value.animation_name);
}

template<> void byteswap<blofeld::infinite::s_damagedirection>(blofeld::infinite::s_damagedirection& value)
{
	byteswap(value.regions_block);
}

template<> void byteswap<blofeld::infinite::s_modetreedeathanddamage>(blofeld::infinite::s_modetreedeathanddamage& value)
{
	byteswap(value.name);
	byteswap(value.directions_block);
}

template<> void byteswap<blofeld::infinite::s_transitiondestination>(blofeld::infinite::s_transitiondestination& value)
{
	byteswap(value.mode_name);
	byteswap(value.state_name);
	byteswap(value.transition_lerp);
	byteswap(value.animation);
	byteswap(value.animation_name);
	byteswap(value.timing_function);
	byteswap(value.lerp_in_function);
	byteswap(value.lerp_out_function);
}

template<> void byteswap<blofeld::infinite::s_modetreetransition>(blofeld::infinite::s_modetreetransition& value)
{
	byteswap(value.state_name);
	byteswap(value.destinations_block);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_modetreeset>(blofeld::infinite::s_modetreeset& value)
{
	byteswap(value.set_name);
	byteswap(value.overlay_group);
	byteswap(value.ik_set);
	byteswap(value.actions_block);
	byteswap(value.overlays_block);
	byteswap(value.death_and_damage_block);
	byteswap(value.transitions_block);
}

template<> void byteswap<blofeld::infinite::s_modetreeweapontype>(blofeld::infinite::s_modetreeweapontype& value)
{
	byteswap(value.weapon_type_name);
	byteswap(value.overlay_group);
	byteswap(value.ik_set);
	byteswap(value.sets_block);
}

template<> void byteswap<blofeld::infinite::s_modetreeik>(blofeld::infinite::s_modetreeik& value)
{
	byteswap(value.marker);
	byteswap(value.attach_to_marker);
	byteswap(value.weight_source_object_function);
	byteswap(value.priority_source_object_function);
}

template<> void byteswap<blofeld::infinite::s_syncactionsametypeparticipant>(blofeld::infinite::s_syncactionsametypeparticipant& value)
{
	byteswap(value.flags);
	byteswap(value.animation);
	byteswap(value.start_offset);
	byteswap(value.start_facing);
	byteswap(value.end_offset);
	byteswap(value.time_until_hurt);
	byteswap(value.apex_offset);
}

template<> void byteswap<blofeld::infinite::s_syncactionotherparticipant>(blofeld::infinite::s_syncactionotherparticipant& value)
{
	byteswap(value.flags);
	byteswap(value.object_type);
}

template<> void byteswap<blofeld::infinite::s_syncaction>(blofeld::infinite::s_syncaction& value)
{
	byteswap(value.name);
	byteswap(value.sync_action_type);
	byteswap(value.same_type_participants_block);
	byteswap(value.other_participant_block);
}

template<> void byteswap<blofeld::infinite::s_syncactionsgroup>(blofeld::infinite::s_syncactionsgroup& value)
{
	byteswap(value.name);
	byteswap(value.sync_actions_block);
}

template<> void byteswap<blofeld::infinite::s_modetreeweaponclass>(blofeld::infinite::s_modetreeweaponclass& value)
{
	byteswap(value.weapon_class_name);
	byteswap(value.overlay_group);
	byteswap(value.ik_set);
	byteswap(value.weapon_types_block);
	byteswap(value.weapon_ik_block);
	byteswap(value.sync_actions_groups_block);
}

template<> void byteswap<blofeld::infinite::s_modetreemode>(blofeld::infinite::s_modetreemode& value)
{
	byteswap(value.anim_mode_name);
	byteswap(value.overlay_group);
	byteswap(value.ik_set);
	byteswap(value.flags);
	byteswap(value.weapon_classes_block);
	byteswap(value.mode_ik_block);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetvehiclesuspension>(blofeld::infinite::s_legacyanimsetvehiclesuspension& value)
{
	byteswap(value.label);
	byteswap(value.animation);
	byteswap(value.function_name);
	byteswap(value.marker_name);
	byteswap(value.contact_marker_name);
	byteswap(value.mass_point_offset);
	byteswap(value.extension_distance);
	byteswap(value.compression_distance);
	byteswap(value.region_name);
	byteswap(value.destroyed_mass_point_offset);
	byteswap(value.destroyed_extension_distance);
	byteswap(value.destroyed_compression_distance);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsetconstantoverlay>(blofeld::infinite::s_legacyanimsetconstantoverlay& value)
{
	byteswap(value.label);
	byteswap(value.animation);
	byteswap(value.function_controls);
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_legacyanimsettag>(blofeld::infinite::s_legacyanimsettag& value)
{
	byteswap(value.anytag);
	byteswap(value.anim_sets_block);
	byteswap(value.animations_block);
	byteswap(value.maximum_inheritance_depth);
	byteswap(value.per_animation_joint_flags_block);
	byteswap(value.renames_block);
	byteswap(value.copies_block);
	byteswap(value.functions_block);
	byteswap(value.blend_screens_block);
	byteswap(value.function_overlays_block);
	byteswap(value.overlay_groups_block);
	byteswap(value.interpolators_block);
	byteswap(value.interpolation_sets_block);
	byteswap(value.model_animation_variants_block);
	byteswap(value.object_function_variants_block);
	byteswap(value.modes_block);
	byteswap(value.vehicle_suspensions_block);
	byteswap(value.constant_overlays_block);
}

template<> void byteswap<blofeld::infinite::s_colorfunctionnamed>(blofeld::infinite::s_colorfunctionnamed& value)
{
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_lensflarereflection>(blofeld::infinite::s_lensflarereflection& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.bitmap_override);
	byteswap(value.bitmap_frame_index);
	byteswap(value.bitmap_animation_rate);
	byteswap(value.falloff_angle);
	byteswap(value.cutoff_angle);
	byteswap(value.separate_x_falloff_angle);
	byteswap(value.separate_x_cutoff_angle);
	byteswap(value.separate_y_falloff_angle);
	byteswap(value.separate_y_cutoff_angle);
	byteswap(value.near_fade_begin_distance);
	byteswap(value.near_fade_end_distance);
	byteswap(value.far_fade_begin_distance);
	byteswap(value.far_fade_end_distance);
	byteswap(value.rotation_offset);
	byteswap(value.axis_offset);
	byteswap(value.x_offset);
	byteswap(value.y_offset);
	byteswap(value.offset_bounds);
	byteswap(value.radius_curve);
	byteswap(value.scale_curve_x);
	byteswap(value.scale_curve_y);
	byteswap(value.brightness_curve);
	byteswap(value.color_curve_override_mode);
	byteswap(value.color_curve);
	byteswap(value.modulation_factor);
	byteswap(value.tint_power);
}

template<> void byteswap<blofeld::infinite::s_lensflarescalaranimation>(blofeld::infinite::s_lensflarescalaranimation& value)
{
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_s_editing_function>(blofeld::infinite::s_s_editing_function& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.lens_flare_color_mapping);
}

template<> void byteswap<blofeld::infinite::s_lensflarecoloranimation>(blofeld::infinite::s_lensflarecoloranimation& value)
{
	byteswap(value.color_animation);
}

template<> void byteswap<blofeld::infinite::s_s_lens_flare_definition>(blofeld::infinite::s_s_lens_flare_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.falloff_angle);
	byteswap(value.cutoff_angle);
	byteswap(value.separate_x_falloff_angle);
	byteswap(value.separate_x_cutoff_angle);
	byteswap(value.separate_y_falloff_angle);
	byteswap(value.separate_y_cutoff_angle);
	byteswap(value.exposure_amount);
	byteswap(value.occlusion_reflection_index);
	byteswap(value.occlusion_offset_distance);
	byteswap(value.occlusion_offset_direction);
	byteswap(value.occlusion_inner_radius_scale);
	byteswap(value.occlusion_min_pixels);
	byteswap(value.occlusion_max_pixels);
	byteswap(value.near_fade_begin_distance);
	byteswap(value.near_fade_end_distance);
	byteswap(value.far_fade_begin_distance);
	byteswap(value.far_fade_end_distance);
	byteswap(value.bitmap);
	byteswap(value.flags);
	byteswap(value.runtime_flags);
	byteswap(value.rotation_function);
	byteswap(value.rotation_function_scale);
	byteswap(value.falloff_function);
	byteswap(value.reflections_block);
	byteswap(value.animation_flags);
	byteswap(value.time_brightness_block);
	byteswap(value.age_brightness_block);
	byteswap(value.time_color_override_mode);
	byteswap(value.time_color_block);
	byteswap(value.age_color_override_mode);
	byteswap(value.age_color_block);
	byteswap(value.time_rotation_block);
	byteswap(value.age_rotation_block);
}

template<> void byteswap<blofeld::infinite::s_s_static_loadout_tag_definition>(blofeld::infinite::s_s_static_loadout_tag_definition& value)
{
	byteswap(value.loadout_name);
	byteswap(value.initial_primary_weapon);
	byteswap(value.initial_primary_weapon_variant_name);
	byteswap(value.initial_secondary_weapon);
	byteswap(value.initial_secondary_weapon_variant_name);
	byteswap(value.initial_equipment);
}

template<> void byteswap<blofeld::infinite::s_s_loadout_globals_tag_definition>(blofeld::infinite::s_s_loadout_globals_tag_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.default_custom_loadouts_block);
}

template<> void byteswap<blofeld::infinite::s_animationlibraryaudio>(blofeld::infinite::s_animationlibraryaudio& value)
{
	byteswap(value.anytag);
	byteswap(value.sounds_block);
	byteswap(value.dialogues_block);
}

template<> void byteswap<blofeld::infinite::s_animationlibraryeffects>(blofeld::infinite::s_animationlibraryeffects& value)
{
	byteswap(value.anytag);
	byteswap(value.effects_block);
}

template<> void byteswap<blofeld::infinite::s_lightconedefinition>(blofeld::infinite::s_lightconedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.actual_material);
	byteswap(value.angle_fade_range);
	byteswap(value.angle_fade_cutoff);
	byteswap(value.m_pipelinestates);
}

template<> void byteswap<blofeld::infinite::s_lightdefinition>(blofeld::infinite::s_lightdefinition& value)
{
	byteswap(value.halolightnode);
	byteswap(value.type);
	byteswap(value.color);
	byteswap(value.source_energy);
	byteswap(value.baked_indirect_intensity_scalar);
	byteswap(value.dimmer);
	byteswap(value.far_attenuation);
	byteswap(value.near_begin);
	byteswap(value.properties_override_source);
	byteswap(value.override_source_intensity_multiplier);
	byteswap(value.intensity_function);
	byteswap(value.light_group);
	byteswap(value.dimmer_function);
	byteswap(value.near_attenuation);
	byteswap(value.outer_attenuation_function);
	byteswap(value.far_begin);
	byteswap(value.base_position_modifier_for_fading);
	byteswap(value.camera_near_distance_fade_end);
	byteswap(value.camera_near_distance_fade_start);
	byteswap(value.camera_distance_fade_start);
	byteswap(value.camera_distance_fade_end);
	byteswap(value.fog_intensity);
	byteswap(value.particle_intensity);
	byteswap(value.minimum_roughness);
	byteswap(value.planar_light_width);
	byteswap(value.planar_light_height);
	byteswap(value.area_light_radius);
	byteswap(value.area_light_length);
	byteswap(value.inner_cone_angle);
	byteswap(value.outer_cone_angle);
	byteswap(value.outer_cone_angle_function);
	byteswap(value.cone_projection_shape);
	byteswap(value.static_shadows);
	byteswap(value.dynamic_shadows);
	byteswap(value.static_shadow_resolution);
	byteswap(value.dynamic_shadow_resolution);
	byteswap(value.minimum_static_shadow_resolution);
	byteswap(value.minimum_dynamic_shadow_resolution);
	byteswap(value.enable_static_shadow_caching);
	byteswap(value.enable_dynamic_objects_shadow_caching);
	byteswap(value.composer_shadows);
	byteswap(value.shadow_resolution_distance_scaler);
	byteswap(value.camera_distance_static_shadow___gobo_fade_start);
	byteswap(value.camera_distance_static_shadow___gobo_fade_end);
	byteswap(value.camera_distance_do_shadow_fade_start);
	byteswap(value.camera_distance_do_shadow_fade_end);
	byteswap(value.inner_do_shadow_cone_angle_);
	byteswap(value.outer_do_shadow_cone_angle_);
	byteswap(value.do_shadow_far_attenuation_start_);
	byteswap(value.do_shadow_far_attenuation_end_);
	byteswap(value.static_object_shadow_lod_scaler);
	byteswap(value.dynamic_object_shadow_lod_scaler);
	byteswap(value.shadow_near_clip_plane);
	byteswap(value.shadow_far_clip_plane);
	byteswap(value.enable_light_obb);
	byteswap(value.obb_center_offset);
	byteswap(value.obb_scale_factor);
	byteswap(value.obb_orientation_adjust);
	byteswap(value.shadow_bias_offset);
	byteswap(value.shadow_filter_width);
	byteswap(value.minimum_shadow_filter_width);
	byteswap(value.enable_pcss);
	byteswap(value.pcss_light_size);
	byteswap(value.pcss_min_filter_size);
	byteswap(value.pcss_max_filter_size);
	byteswap(value.force_forward_lighting);
	byteswap(value.ignore_dynamic_objects);
	byteswap(value.cinema_objects_only);
	byteswap(value.cinema_only);
	byteswap(value.cinema_exclude);
	byteswap(value.attenuation_flags);
	byteswap(value.specular_contribution);
	byteswap(value.diffuse_contribution);
	byteswap(value.minimum_gobo_resolution);
	byteswap(value.gobos);
	byteswap(value.target_color);
	byteswap(value.destroy_light_after);
	byteswap(value.interpolation_function);
	byteswap(value.flags);
	byteswap(value.lens_flare);
	byteswap(value.light_cone);
	byteswap(value.light_shadow_priority);
	byteswap(value.needs_update_state);
	byteswap(value.needs_update_bounding_sphere);
	byteswap(value.tick_of_last_state_update);
	byteswap(value.tick_of_last_bounding_sphere_update);
}

template<> void byteswap<blofeld::infinite::s_dynamiclight>(blofeld::infinite::s_dynamiclight& value)
{
	byteswap(value.anytag);
	byteswap(value.midnight_light_parameters);
}

template<> void byteswap<blofeld::infinite::s_s_basic_spec_control_setting_bool>(blofeld::infinite::s_s_basic_spec_control_setting_bool& value)
{
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_lightgrouptag>(blofeld::infinite::s_lightgrouptag& value)
{
	byteswap(value.anytag);
	byteswap(value.fadeoff_distance_multiplier$2);
	byteswap(value.near_fadeoff_distance_multiplier$2);
	byteswap(value.static_object_shadow_fade$2);
	byteswap(value.dynamic_object_shadow_fade$2);
	byteswap(value.cast_shadows$2);
	byteswap(value.dynamic_object_shadow_casting$2);
}

template<> void byteswap<blofeld::infinite::s_s_decorator_placement>(blofeld::infinite::s_s_decorator_placement& value)
{
	byteswap(value.position);
	byteswap(value.type_index);
	byteswap(value.motion_scale);
	byteswap(value.ground_tint);
	byteswap(value.flags);
	byteswap(value.rotation);
	byteswap(value.scale);
	byteswap(value.tint_color);
	byteswap(value.original_point);
	byteswap(value.original_normal);
	byteswap(value.extra);
	byteswap(value.placement_surface_albedo);
	byteswap(value.placement_surface_normal);
}

template<> void byteswap<blofeld::infinite::s_s_decorator_scenario_set_placements>(blofeld::infinite::s_s_decorator_scenario_set_placements& value)
{
	byteswap(value.decorator_asset);
	byteswap(value.decorator_placements_block);
	byteswap(value.owning_layer_default_bsp);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_new_decorator_definition>(blofeld::infinite::s_s_scenario_new_decorator_definition& value)
{
	byteswap(value.sets_block);
}

template<> void byteswap<blofeld::infinite::s_editor_comment_definition>(blofeld::infinite::s_editor_comment_definition& value)
{
	byteswap(value.position);
	byteswap(value.type);
	byteswap(value.name);
	byteswap(value.comment);
}

template<> void byteswap<blofeld::infinite::s_scenarioeditorannotation>(blofeld::infinite::s_scenarioeditorannotation& value)
{
	byteswap(value.name);
	byteswap(value.position);
	byteswap(value.info);
	byteswap(value.additionalinfo);
	byteswap(value.optionalannotationid);
	byteswap(value.filtergroup);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_scenario_object_name>(blofeld::infinite::s_scenario_object_name& value)
{
	byteswap(value.name);
	byteswap(value.object_type);
	byteswap(value.scenario_datum_index);
	byteswap(value.runtimeobjectindex);
}

template<> void byteswap<blofeld::infinite::s_scenariobspreference>(blofeld::infinite::s_scenariobspreference& value)
{
	byteswap(value.structure_bsp);
}

template<> void byteswap<blofeld::infinite::s_compressedbspreferenceflags>(blofeld::infinite::s_compressedbspreferenceflags& value)
{
	byteswap(value.references_block);
	byteswap(value.flags);
	byteswap(value.bsp_index);
}

template<> void byteswap<blofeld::infinite::s_c_object_identifier>(blofeld::infinite::s_c_object_identifier& value)
{
	byteswap(value.unique_id);
	byteswap(value.origin_bsp_index);
	byteswap(value.type);
	byteswap(value.source);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_object_parent>(blofeld::infinite::s_s_scenario_object_parent& value)
{
	byteswap(value.parent_object);
	byteswap(value.parent_name);
	byteswap(value.parent_marker);
	byteswap(value.connection_marker);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmancannonballisticarcdata>(blofeld::infinite::s_i343physicsmancannonballisticarcdata& value)
{
	byteswap(value.man_cannon_end_point);
	byteswap(value.man_cannon_apex_height);
	byteswap(value.man_cannon_phantom_index);
}

template<> void byteswap<blofeld::infinite::s_i343spartantrackingobjectdefinition>(blofeld::infinite::s_i343spartantrackingobjectdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.ping_type);
	byteswap(value.team_visibility);
	byteswap(value.priority);
	byteswap(value.ping_group);
	byteswap(value.nav_point_screen);
	byteswap(value.nav_point_label);
	byteswap(value.nav_point_vertical_offset);
	byteswap(value.range);
	byteswap(value.ping_hit_instigator_effect);
	byteswap(value.ping_hit_effect);
	byteswap(value.outline_override);
}

template<> void byteswap<blofeld::infinite::s_i343objectsassociation>(blofeld::infinite::s_i343objectsassociation& value)
{
	byteswap(value.association_types);
	byteswap(value.target_index);
	byteswap(value.target_object_name);
	byteswap(value.target_marker_name);
	byteswap(value.source_marker_name);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_object_datum>(blofeld::infinite::s_s_scenario_object_datum& value)
{
	byteswap(value.placement_flags);
	byteswap(value.position);
	byteswap(value.rotation);
	byteswap(value.scale);
	byteswap(value.gravity_override);
	byteswap(value.gravity_flags);
	byteswap(value.bsp_policy);
	byteswap(value.script_flags);
	byteswap(value.scriptable_properties);
	byteswap(value.bsp_flags);
	byteswap(value.transform_flags);
	byteswap(value.nav_mesh_cutting);
	byteswap(value.nav_mesh_flags);
	byteswap(value.editor_folder);
	byteswap(value.object_id);
	byteswap(value.module_id);
	byteswap(value.parent_id);
	byteswap(value.in_game_maps_material_id);
	byteswap(value.directional_acceleration_mult_);
	byteswap(value.custom_object_lighting_reference);
	byteswap(value.man_cannon_ballistic_arc_data_block);
	byteswap(value.spartan_tracking_block);
	byteswap(value.layer_flags);
	byteswap(value.associates_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_object_permutation>(blofeld::infinite::s_s_scenario_object_permutation& value)
{
	byteswap(value.variant_name);
	byteswap(value.active_change_colors);
	byteswap(value.style_id);
	byteswap(value.primary_color);
	byteswap(value.secondary_color);
	byteswap(value.tertiary_color);
	byteswap(value.quaternary_color);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_scenery_datum>(blofeld::infinite::s_s_scenario_scenery_datum& value)
{
	byteswap(value.pathfinding_policy);
	byteswap(value.havok_mopp_index);
	byteswap(value.ai_spawning_squad);
}

template<> void byteswap<blofeld::infinite::s_splinenode>(blofeld::infinite::s_splinenode& value)
{
	byteswap(value.position);
	byteswap(value.rotation);
	byteswap(value.scale);
}

template<> void byteswap<blofeld::infinite::s_spawnpointmultiplayerproperties>(blofeld::infinite::s_spawnpointmultiplayerproperties& value)
{
	byteswap(value.spawn_point_flags);
}

template<> void byteswap<blofeld::infinite::s_warzoneobjectivedefinitionmembership>(blofeld::infinite::s_warzoneobjectivedefinitionmembership& value)
{
	byteswap(value.warzone_objective_definition);
	byteswap(value.warzone_objective_label);
}

template<> void byteswap<blofeld::infinite::s_terminalredeemableobjectdefinition>(blofeld::infinite::s_terminalredeemableobjectdefinition& value)
{
	byteswap(value.redeemable_object);
	byteswap(value.level_requirement);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_multiplayer_object_properties>(blofeld::infinite::s_s_scenario_multiplayer_object_properties& value)
{
	byteswap(value.megalo_label);
	byteswap(value.megalo_label_2);
	byteswap(value.megalo_label_3);
	byteswap(value.megalo_label_4);
	byteswap(value.game_engine_symmetric_placement);
	byteswap(value.owner_team);
	byteswap(value.owner_squad);
	byteswap(value.spawn_flags);
	byteswap(value.teleporter_channel);
	byteswap(value.teleporter_passability);
	byteswap(value.trait_zone_channel);
	byteswap(value.trait_zone_seconds_to_apply);
	byteswap(value.phantomvelocitymultiplier);
	byteswap(value.phantomaccelerationmultiplier);
	byteswap(value.boundary_width_or_radius);
	byteswap(value.boundary_box_length);
	byteswap(value.boundary_positive_height);
	byteswap(value.boundary_negative_height);
	byteswap(value.boundary_shape);
	byteswap(value.initial_spawn_delay);
	byteswap(value.spawn_time);
	byteswap(value.abandonment_time);
	byteswap(value.location_name);
	byteswap(value.spline_block);
	byteswap(value.spawnpointproperties_block);
	byteswap(value.respawn_weight);
	byteswap(value.warzone_objective_definition_membership);
	byteswap(value.spawn_order);
	byteswap(value.multiplayer_property_flags);
	byteswap(value.weaponpad_object_to_spawn);
	byteswap(value.weaponpad_object_to_spawn_configuration);
	byteswap(value.weaponpad_respawn_time);
	byteswap(value.terminal_redeemable_objects_block);
	byteswap(value.mapzones);
	byteswap(value.mapzoneconfigurations);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_scenery>(blofeld::infinite::s_s_scenario_scenery& value)
{
	byteswap(value.name);
	byteswap(value.object_name);
	byteswap(value.asset);
	byteswap(value.object_data);
	byteswap(value.editormetadata_block);
	byteswap(value.permutation_data);
	byteswap(value.scenery_data);
	byteswap(value.multiplayer_data_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_unit_datum>(blofeld::infinite::s_s_scenario_unit_datum& value)
{
	byteswap(value.body_vitality);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_biped>(blofeld::infinite::s_s_scenario_biped& value)
{
	byteswap(value.name);
	byteswap(value.object_name);
	byteswap(value.asset);
	byteswap(value.object_data);
	byteswap(value.editormetadata_block);
	byteswap(value.permutation_data);
	byteswap(value.unit_data);
	byteswap(value.multiplayer_data_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_vehicle_datum>(blofeld::infinite::s_s_scenario_vehicle_datum& value)
{
	byteswap(value.pathfinding_policy);
	byteswap(value.configuration);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_vehicle>(blofeld::infinite::s_s_scenario_vehicle& value)
{
	byteswap(value.name);
	byteswap(value.object_name);
	byteswap(value.asset);
	byteswap(value.object_data);
	byteswap(value.editormetadata_block);
	byteswap(value.permutation_data);
	byteswap(value.unit_data);
	byteswap(value.multiplayer_data_block);
	byteswap(value.vehicle_data);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_equipment_datum>(blofeld::infinite::s_s_scenario_equipment_datum& value)
{
	byteswap(value.equipment_flags);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_equipment>(blofeld::infinite::s_s_scenario_equipment& value)
{
	byteswap(value.name);
	byteswap(value.object_name);
	byteswap(value.asset);
	byteswap(value.object_data);
	byteswap(value.editormetadata_block);
	byteswap(value.equipment_data);
	byteswap(value.multiplayer_data_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_weapon_datum>(blofeld::infinite::s_s_scenario_weapon_datum& value)
{
	byteswap(value.rounds_left);
	byteswap(value.rounds_loaded);
	byteswap(value.does_accelerate_moves_due_to_explosions);
	byteswap(value.configuration);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_weapon>(blofeld::infinite::s_s_scenario_weapon& value)
{
	byteswap(value.name);
	byteswap(value.object_name);
	byteswap(value.asset);
	byteswap(value.object_data);
	byteswap(value.editormetadata_block);
	byteswap(value.permutation_data);
	byteswap(value.weapon_data);
	byteswap(value.multiplayer_data_block);
}

template<> void byteswap<blofeld::infinite::s_scenario_device_group>(blofeld::infinite::s_scenario_device_group& value)
{
	byteswap(value.name);
	byteswap(value.initial_value);
	byteswap(value.flags);
	byteswap(value.module_id);
	byteswap(value.editormetadata_block);
	byteswap(value.editor_folder);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_device_datum>(blofeld::infinite::s_s_scenario_device_datum& value)
{
	byteswap(value.power_group);
	byteswap(value.position_group);
	byteswap(value.initial_animation_position);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_machine_datum>(blofeld::infinite::s_s_scenario_machine_datum& value)
{
	byteswap(value.flags);
	byteswap(value.pathfinding_policy);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_machine>(blofeld::infinite::s_s_scenario_machine& value)
{
	byteswap(value.name);
	byteswap(value.object_name);
	byteswap(value.asset);
	byteswap(value.object_data);
	byteswap(value.editormetadata_block);
	byteswap(value.permutation_data);
	byteswap(value.device_data);
	byteswap(value.machine_data);
	byteswap(value.multiplayer_data_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_terminal_datum>(blofeld::infinite::s_s_scenario_terminal_datum& value)
{
	byteswap(value.pah_pah);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_terminal>(blofeld::infinite::s_s_scenario_terminal& value)
{
	byteswap(value.name);
	byteswap(value.object_name);
	byteswap(value.asset);
	byteswap(value.object_data);
	byteswap(value.editormetadata_block);
	byteswap(value.permutation_data);
	byteswap(value.device_data);
	byteswap(value.terminal_data);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_control_datum>(blofeld::infinite::s_s_scenario_control_datum& value)
{
	byteswap(value.flags);
	byteswap(value.dont_touch_this);
	byteswap(value.health_station_charges);
	byteswap(value.allowed_players);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_control>(blofeld::infinite::s_s_scenario_control& value)
{
	byteswap(value.name);
	byteswap(value.object_name);
	byteswap(value.asset);
	byteswap(value.object_data);
	byteswap(value.editormetadata_block);
	byteswap(value.permutation_data);
	byteswap(value.device_data);
	byteswap(value.control_data);
	byteswap(value.multiplayer_data_block);
}

template<> void byteswap<blofeld::infinite::s_scenariodispenserdatum>(blofeld::infinite::s_scenariodispenserdatum& value)
{
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_scenariodispenser>(blofeld::infinite::s_scenariodispenser& value)
{
	byteswap(value.name);
	byteswap(value.object_name);
	byteswap(value.asset);
	byteswap(value.object_data);
	byteswap(value.editormetadata_block);
	byteswap(value.permutation_data);
	byteswap(value.device_data);
	byteswap(value.dispenser_data);
	byteswap(value.multiplayer_data_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_giant_datum>(blofeld::infinite::s_s_scenario_giant_datum& value)
{
	byteswap(value.pathfinding_policy);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_giant>(blofeld::infinite::s_s_scenario_giant& value)
{
	byteswap(value.name);
	byteswap(value.object_name);
	byteswap(value.asset);
	byteswap(value.object_data);
	byteswap(value.editormetadata_block);
	byteswap(value.permutation_data);
	byteswap(value.unit_data);
	byteswap(value.giant_data);
}

template<> void byteswap<blofeld::infinite::s_scenarioeffectscenerydatum>(blofeld::infinite::s_scenarioeffectscenerydatum& value)
{
	byteswap(value.effect_size_scale);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_effect_scenery>(blofeld::infinite::s_s_scenario_effect_scenery& value)
{
	byteswap(value.name);
	byteswap(value.object_name);
	byteswap(value.asset);
	byteswap(value.object_data);
	byteswap(value.editormetadata_block);
	byteswap(value.effect_scenery_data);
	byteswap(value.multiplayer_data_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_crate_datum>(blofeld::infinite::s_s_scenario_crate_datum& value)
{
	byteswap(value.pathfinding_policy);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_crate>(blofeld::infinite::s_s_scenario_crate& value)
{
	byteswap(value.name);
	byteswap(value.object_name);
	byteswap(value.asset);
	byteswap(value.object_data);
	byteswap(value.editormetadata_block);
	byteswap(value.permutation_data);
	byteswap(value.crate_data);
	byteswap(value.multiplayer_data_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_creature>(blofeld::infinite::s_s_scenario_creature& value)
{
	byteswap(value.name);
	byteswap(value.object_name);
	byteswap(value.asset);
	byteswap(value.object_data);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_bspmapruntimerefcounter>(blofeld::infinite::s_bspmapruntimerefcounter& value)
{
	byteswap(value.bsp_ref_count);
	byteswap(value.layer_ref_count);
}

template<> void byteswap<blofeld::infinite::s_i343objectsnodegraphplacement>(blofeld::infinite::s_i343objectsnodegraphplacement& value)
{
	byteswap(value.name);
	byteswap(value.object_node_graph);
	byteswap(value.position);
	byteswap(value.flags);
	byteswap(value.editormetadata_block);
	byteswap(value.bspmapruntimerefcounter);
}

template<> void byteswap<blofeld::infinite::s_i343curveroaddecalmetadata>(blofeld::infinite::s_i343curveroaddecalmetadata& value)
{
	byteswap(value.road_decal_textures_block);
	byteswap(value.road_decal_scale);
	byteswap(value.road_decal_offset);
	byteswap(value.road_decal_tile_repeat_count);
	byteswap(value.road_decal_height_strength);
	byteswap(value.road_decal_mask_strength);
	byteswap(value.road_decal_height_contrast);
	byteswap(value.road_decal_mask_contrast);
	byteswap(value.road_decal_edge_fade);
	byteswap(value.road_decal_random_seed);
}

template<> void byteswap<blofeld::infinite::s_i343curvesplineroadmetadata>(blofeld::infinite::s_i343curvesplineroadmetadata& value)
{
	byteswap(value.width);
	byteswap(value.opacity);
	byteswap(value.falloffleft);
	byteswap(value.falloffright);
	byteswap(value.bank);
	byteswap(value.subdivision_count);
	byteswap(value.road_decal_metadata_block);
	byteswap(value.terrain_system);
}

template<> void byteswap<blofeld::infinite::s_i343curvesplineflightpathmetadata>(blofeld::infinite::s_i343curvesplineflightpathmetadata& value)
{
	byteswap(value.preference);
	byteswap(value.lines_per_spline_segment);
}

template<> void byteswap<blofeld::infinite::s_i343curvesplineplacementmetadata>(blofeld::infinite::s_i343curvesplineplacementmetadata& value)
{
	byteswap(value.spline_road_metadata_block);
	byteswap(value.spline_flight_path_metadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343curvesplineplacement>(blofeld::infinite::s_i343curvesplineplacement& value)
{
	byteswap(value.name);
	byteswap(value.curve);
	byteswap(value.splinemetadata_block);
	byteswap(value.editormetadata_block);
	byteswap(value.guid);
}

template<> void byteswap<blofeld::infinite::s_warzoneobjectivedefinitiontriggervolume>(blofeld::infinite::s_warzoneobjectivedefinitiontriggervolume& value)
{
	byteswap(value.label);
	byteswap(value.trigger_volume);
}

template<> void byteswap<blofeld::infinite::s_warzoneobjectivedefinition>(blofeld::infinite::s_warzoneobjectivedefinition& value)
{
	byteswap(value.name);
	byteswap(value.label);
	byteswap(value.user_facing_name);
	byteswap(value.initial_team);
	byteswap(value.trigger_volumes_block);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_scenarioeffectplacement>(blofeld::infinite::s_scenarioeffectplacement& value)
{
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.lighting_variant);
	byteswap(value.position);
	byteswap(value.facing);
	byteswap(value.flags);
	byteswap(value.bsp_policy);
	byteswap(value.manual_bsp_flags);
	byteswap(value.lens_flare_reference);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_scenarioattachedlightcone>(blofeld::infinite::s_scenarioattachedlightcone& value)
{
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.lighting_variant);
	byteswap(value.position);
	byteswap(value.facing);
	byteswap(value.bsp_policy);
	byteswap(value.manual_bsp_flags);
	byteswap(value.light_cone_reference);
	byteswap(value.editormetadata_block);
	byteswap(value.color);
	byteswap(value.intensity);
	byteswap(value.length);
	byteswap(value.width);
	byteswap(value.camera_near_fade_start);
	byteswap(value.camera_near_fade_end);
	byteswap(value.camera_far_fade_start);
	byteswap(value.camera_far_fade_end);
	byteswap(value.flags);
	byteswap(value.editor_folder);
	byteswap(value.moduleid);
}

template<> void byteswap<blofeld::infinite::s_placementshapeoverride>(blofeld::infinite::s_placementshapeoverride& value)
{
	byteswap(value.radius);
}

template<> void byteswap<blofeld::infinite::s_soundplacementsplinecontrolpoint>(blofeld::infinite::s_soundplacementsplinecontrolpoint& value)
{
	byteswap(value.position);
}

template<> void byteswap<blofeld::infinite::s_soundplacement>(blofeld::infinite::s_soundplacement& value)
{
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.position);
	byteswap(value.facing);
	byteswap(value.placement_flags);
	byteswap(value.flags);
	byteswap(value.editor_folder);
	byteswap(value.looping_sound);
	byteswap(value.shape_override_block);
	byteswap(value.spline_block);
	byteswap(value.editormetadata_block);
	byteswap(value.moduleid);
	byteswap(value.movement_rtpc_name);
	byteswap(value.movement_detection_radius);
	byteswap(value.movement_distance_scaling_factor);
	byteswap(value.bspmapruntimerefcounter);
}

template<> void byteswap<blofeld::infinite::s_taggraphtaggraphfloatparam>(blofeld::infinite::s_taggraphtaggraphfloatparam& value)
{
	byteswap(value.name);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_effectplacement>(blofeld::infinite::s_effectplacement& value)
{
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.lighting_variant);
	byteswap(value.position);
	byteswap(value.facing);
	byteswap(value.scale);
	byteswap(value.flags);
	byteswap(value.bsp_policy);
	byteswap(value.editor_folder);
	byteswap(value.scale_a_override_value);
	byteswap(value.scale_b_override_value);
	byteswap(value.effect);
	byteswap(value.tag_graph_output);
	byteswap(value.output_node_name);
	byteswap(value.float_params_block);
	byteswap(value.handle);
	byteswap(value.editormetadata_block);
	byteswap(value.moduleid);
	byteswap(value.bspmapruntimerefcounter);
}

template<> void byteswap<blofeld::infinite::s_globalforceplacement>(blofeld::infinite::s_globalforceplacement& value)
{
	byteswap(value.force_index);
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.position);
	byteswap(value.facing);
	byteswap(value.scale);
	byteswap(value.global_force);
	byteswap(value.editor_folder);
	byteswap(value.moduleid);
}

template<> void byteswap<blofeld::infinite::s_hlodvolume>(blofeld::infinite::s_hlodvolume& value)
{
	byteswap(value.guid);
	byteswap(value.name);
	byteswap(value.owner_bsp);
	byteswap(value.editormetadata_block);
	byteswap(value.volume);
	byteswap(value.switchdistance);
	byteswap(value.maximum_lod);
	byteswap(value.asset_category);
	byteswap(value.hlod_settings);
	byteswap(value.flags);
	byteswap(value.use_visibility);
	byteswap(value.visibility_camera_sphere_settings);
	byteswap(value.volume_inclusion_policy);
	byteswap(value.hlod_asset_override);
	byteswap(value.hlod_asset);
	byteswap(value.hlod_metadata_chore_generated_and_always_up_to_date);
	byteswap(value.hlod_metadata_baked_with_hlod_asset);
	byteswap(value.volumecolorindex);
}

template<> void byteswap<blofeld::infinite::s_windgustingfunction>(blofeld::infinite::s_windgustingfunction& value)
{
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_i343windwindinfluencervolume>(blofeld::infinite::s_i343windwindinfluencervolume& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value.direction);
	byteswap(value.strength);
	byteswap(value.radius);
	byteswap(value.mode);
	byteswap(value.flags);
	byteswap(value.direction_function);
	byteswap(value.strength_function);
	byteswap(value.direction_function_period);
	byteswap(value.strength_function_period);
	byteswap(value.wind_impulse_average_frequency);
	byteswap(value.wind_impulse_average_duration);
	byteswap(value.wind_impulse_strength);
	byteswap(value.last_sleep_pause);
	byteswap(value.last_random_activity_timestamp);
	byteswap(value.wind_impulse_state);
	byteswap(value.noise_distribution);
	byteswap(value.editormetadata_block);
	byteswap(value.editor_folder);
	byteswap(value.module_id);
	byteswap(value.datum_index);
	byteswap(value.volume);
	byteswap(value.bsp_index);
}

template<> void byteswap<blofeld::infinite::s_i343physicsphysicsvolume>(blofeld::infinite::s_i343physicsphysicsvolume& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value.volume);
	byteswap(value.collision_layer);
	byteswap(value.editormetadata_block);
	byteswap(value.owner_bsp);
	byteswap(value.generated_collision_volume);
}

template<> void byteswap<blofeld::infinite::s_pruningvolume>(blofeld::infinite::s_pruningvolume& value)
{
	byteswap(value.name);
	byteswap(value.volume);
	byteswap(value.flags);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_pathingcostmodifierfilter>(blofeld::infinite::s_pathingcostmodifierfilter& value)
{
	byteswap(value.navigation_type);
	byteswap(value.character_filter_type);
	byteswap(value.ai_size);
}

template<> void byteswap<blofeld::infinite::s_i343aiaimarkupvolume>(blofeld::infinite::s_i343aiaimarkupvolume& value)
{
	byteswap(value.name);
	byteswap(value.volume);
	byteswap(value.fortification_direction);
	byteswap(value.fortification_intensity);
	byteswap(value.fortification_direction_name);
	byteswap(value.should_use_direction_vector);
	byteswap(value.fortification_filters_block);
	byteswap(value.high_ground_filters_block);
	byteswap(value.fleehide_filters_block);
	byteswap(value.low_priority_filters_block);
	byteswap(value.pathing_cost_modifier_filters_block);
	byteswap(value.wander_priority_filters_block);
	byteswap(value.volume_precombat_type);
	byteswap(value.precombat_wait_time);
	byteswap(value.max_characters);
	byteswap(value.editor_metadata_block);
	byteswap(value.volume_flavors);
	byteswap(value.editor_folder);
	byteswap(value.moduleid);
	byteswap(value.guid);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343aibotexploreneighbor>(blofeld::infinite::s_i343aibotexploreneighbor& value)
{
	byteswap(value.neighbor_ref);
}

template<> void byteswap<blofeld::infinite::s_i343aiobjectivetarget>(blofeld::infinite::s_i343aiobjectivetarget& value)
{
	byteswap(value.target);
}

template<> void byteswap<blofeld::infinite::s_i343aiaimarkuppoint>(blofeld::infinite::s_i343aiaimarkuppoint& value)
{
	byteswap(value.name);
	byteswap(value.position);
	byteswap(value.orientation);
	byteswap(value.editor_metadata_block);
	byteswap(value.point_type);
	byteswap(value.point_precombat_type);
	byteswap(value.max_attract_radius);
	byteswap(value.cooldown);
	byteswap(value.max_characters);
	byteswap(value.patrol_mode);
	byteswap(value.patrol_point_set);
	byteswap(value.lookout_wait_time);
	byteswap(value.neighbors_block);
	byteswap(value.objective_type);
	byteswap(value.targets_block);
	byteswap(value.unit_type_filters_block);
	byteswap(value.editor_folder);
	byteswap(value.moduleid);
	byteswap(value.guid);
	byteswap(value.flags);
	byteswap(value.custom_animation_name);
}

template<> void byteswap<blofeld::infinite::s_i343botsexploreneighbor>(blofeld::infinite::s_i343botsexploreneighbor& value)
{
	byteswap(value.neighbor_ref);
}

template<> void byteswap<blofeld::infinite::s_i343botsbotmarkuppoint>(blofeld::infinite::s_i343botsbotmarkuppoint& value)
{
	byteswap(value.name);
	byteswap(value.position);
	byteswap(value.orientation);
	byteswap(value.point_type);
	byteswap(value.explore_neighbors_block);
	byteswap(value.megalo_label);
	byteswap(value.megalo_label_2);
	byteswap(value.megalo_label_3);
	byteswap(value.megalo_label_4);
	byteswap(value.owner_team);
	byteswap(value.editor_metadata_block);
	byteswap(value.moduleid);
	byteswap(value.editor_folder);
	byteswap(value.guid);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343aichildencounterelement>(blofeld::infinite::s_i343aichildencounterelement& value)
{
	byteswap(value.ref);
}

template<> void byteswap<blofeld::infinite::s_i343aiencounterzonecondition>(blofeld::infinite::s_i343aiencounterzonecondition& value)
{
	byteswap(value.decorator_type);
	byteswap(value.flags);
	byteswap(value.max_limit);
	byteswap(value.assignment_limit_compare_condition);
	byteswap(value.max_bodies);
	byteswap(value.combat_filter_compare_condition);
	byteswap(value.combat_status);
	byteswap(value.keyword);
	byteswap(value.min_living_count);
	byteswap(value.vehicle_compare_condition);
	byteswap(value.player_trigger_volume_reference);
	byteswap(value.label);
	byteswap(value.min_relevance);
}

template<> void byteswap<blofeld::infinite::s_i343aiencounterzone>(blofeld::infinite::s_i343aiencounterzone& value)
{
	byteswap(value.name);
	byteswap(value.volume);
	byteswap(value.base_relevance);
	byteswap(value.editor_folder);
	byteswap(value.module_id);
	byteswap(value.editor_metadata_block);
	byteswap(value.guid);
	byteswap(value.encounter_zone_flags);
	byteswap(value.children_encounter_elements_block);
	byteswap(value.conditions_block);
	byteswap(value.follow_type);
	byteswap(value.follow_range_radius);
}

template<> void byteswap<blofeld::infinite::s_i343aichildguid>(blofeld::infinite::s_i343aichildguid& value)
{
	byteswap(value.guid);
}

template<> void byteswap<blofeld::infinite::s_i343aicompositechild>(blofeld::infinite::s_i343aicompositechild& value)
{
	byteswap(value.ref);
}

template<> void byteswap<blofeld::infinite::s_i343aiencountertreenode>(blofeld::infinite::s_i343aiencountertreenode& value)
{
	byteswap(value.name);
	byteswap(value.position);
	byteswap(value.orientation);
	byteswap(value.node_type);
	byteswap(value.composite_type);
	byteswap(value.composite_flags);
	byteswap(value.decorator_type);
	byteswap(value.max_limit);
	byteswap(value.assignment_limit_compare_condition);
	byteswap(value.max_bodies);
	byteswap(value.combat_filter_compare_condition);
	byteswap(value.combat_status);
	byteswap(value.keyword);
	byteswap(value.min_living_count);
	byteswap(value.vehicle_compare_condition);
	byteswap(value.player_trigger_volume_reference);
	byteswap(value.label);
	byteswap(value.min_relevance);
	byteswap(value.editor_folder);
	byteswap(value.moduleid);
	byteswap(value.editor_metadata_block);
	byteswap(value.composite_child_guids_deprecated_block);
	byteswap(value.decorator_child_guid_deprecated);
	byteswap(value.root_child_guid_deprecated);
	byteswap(value.root_child);
	byteswap(value.composite_children_block);
	byteswap(value.decorator_child);
	byteswap(value.guid);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343aiencounterbehaviortreeinputreference>(blofeld::infinite::s_i343aiencounterbehaviortreeinputreference& value)
{
	byteswap(value.label);
	byteswap(value.ref);
}

template<> void byteswap<blofeld::infinite::s_i343aiencounterbehaviortree>(blofeld::infinite::s_i343aiencounterbehaviortree& value)
{
	byteswap(value.name);
	byteswap(value.position);
	byteswap(value.orientation);
	byteswap(value.editor_folder);
	byteswap(value.moduleid);
	byteswap(value.editor_metadata_block);
	byteswap(value.graph_tag);
	byteswap(value.input_references_block);
	byteswap(value.conditions_block);
	byteswap(value.guid);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343aiplacedorder>(blofeld::infinite::s_i343aiplacedorder& value)
{
	byteswap(value.name);
	byteswap(value.volume);
	byteswap(value.editor_metadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343aisquadfallbackcombattetherpoint>(blofeld::infinite::s_i343aisquadfallbackcombattetherpoint& value)
{
	byteswap(value.ref);
	byteswap(value.abandon_previous_tether_point_body_count_condition_invalid_if_less_than_1);
	byteswap(value.squad_combat_tether_type);
	byteswap(value.squad_combat_tether_distance);
	byteswap(value.squad_abandon_tether_distance);
	byteswap(value.squad_re_tether_distance);
}

template<> void byteswap<blofeld::infinite::s_i343aiprecombatlink>(blofeld::infinite::s_i343aiprecombatlink& value)
{
	byteswap(value.precombatref);
}

template<> void byteswap<blofeld::infinite::s_i343aiairdropflighttransitiondata>(blofeld::infinite::s_i343aiairdropflighttransitiondata& value)
{
	byteswap(value.transition_type);
	byteswap(value.transition_time);
}

template<> void byteswap<blofeld::infinite::s_i343aiairdropflightpathspline>(blofeld::infinite::s_i343aiairdropflightpathspline& value)
{
	byteswap(value.spline_ref);
}

template<> void byteswap<blofeld::infinite::s_i343aiairdropsquadspawnerflightpathsettings>(blofeld::infinite::s_i343aiairdropsquadspawnerflightpathsettings& value)
{
	byteswap(value.travel_type);
	byteswap(value.transition);
	byteswap(value.flight_path_spline_type);
	byteswap(value.use_spawner_direction_as_destination_direction);
	byteswap(value.flight_path_kit);
	byteswap(value.flight_path_splines_block);
}

template<> void byteswap<blofeld::infinite::s_i343aiairdropsquadspawnerairdropsettings>(blofeld::infinite::s_i343aiairdropsquadspawnerairdropsettings& value)
{
	byteswap(value.air_drop_vehicle);
	byteswap(value.drop_ship_vehicle_configuration);
	byteswap(value.air_drop_pilot_character);
	byteswap(value.passenger_seat_preference);
	byteswap(value.passenger_drop_height);
	byteswap(value.vehicle_drop_height);
	byteswap(value.attack_after_operations_duration);
	byteswap(value.flags);
	byteswap(value.air_drop_fly_in_settings);
	byteswap(value.air_drop_fly_out_settings);
}

template<> void byteswap<blofeld::infinite::s_i343aisquadkeyword>(blofeld::infinite::s_i343aisquadkeyword& value)
{
	byteswap(value.keyword);
}

template<> void byteswap<blofeld::infinite::s_i343aisquadspawner>(blofeld::infinite::s_i343aisquadspawner& value)
{
	byteswap(value.name);
	byteswap(value.position);
	byteswap(value.orientation);
	byteswap(value.squad_specification);
	byteswap(value.squad_combat_tether_type);
	byteswap(value.squad_combat_tether_distance);
	byteswap(value.squad_abandon_tether_distance);
	byteswap(value.squad_re_tether_distance);
	byteswap(value.fallback_combat_tether_ai_markup_points_block);
	byteswap(value.precombat_links_block);
	byteswap(value.editor_metadata_block);
	byteswap(value.encounter_zone_instance_deprecated);
	byteswap(value.parent_encounter_zone_instance_deprecated);
	byteswap(value.spawn_method);
	byteswap(value.spawn_orientation);
	byteswap(value.is_initially_placed);
	byteswap(value.spawn_radius);
	byteswap(value.precombat_activity_radius);
	byteswap(value.drop_pod_device_machine);
	byteswap(value.drop_pod_spawn_delay);
	byteswap(value.air_drop_vehicle);
	byteswap(value.air_drop_pilot_character);
	byteswap(value.air_drop_settings);
	byteswap(value.placement_script);
	byteswap(value.initial_combat_state);
	byteswap(value.squad_keywords_block);
	byteswap(value.editor_folder);
	byteswap(value.module_id);
	byteswap(value.guid);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343aireinforcementsquad>(blofeld::infinite::s_i343aireinforcementsquad& value)
{
	byteswap(value.squad_specification);
}

template<> void byteswap<blofeld::infinite::s_i343aispawnpoint>(blofeld::infinite::s_i343aispawnpoint& value)
{
	byteswap(value.ref);
}

template<> void byteswap<blofeld::infinite::s_i343aireinforcementpoint>(blofeld::infinite::s_i343aireinforcementpoint& value)
{
	byteswap(value.reinforcement_point_flags);
	byteswap(value.name);
	byteswap(value.position);
	byteswap(value.orientation);
	byteswap(value.reinforcement_activation_condition);
	byteswap(value.reinforcement_point_type);
	byteswap(value.reinforcement_squad_iteration_style);
	byteswap(value.reinforcement_squads_block);
	byteswap(value.reinforcement_spawn_point_selection_style);
	byteswap(value.spawn_points_block);
	byteswap(value.editor_metadata_block);
	byteswap(value.editor_folder);
	byteswap(value.moduleid);
	byteswap(value.guid);
}

template<> void byteswap<blofeld::infinite::s_i343activatableregionactivatableregion>(blofeld::infinite::s_i343activatableregionactivatableregion& value)
{
	byteswap(value.name);
	byteswap(value.position);
	byteswap(value.editor_metadata_block);
	byteswap(value.region_type);
	byteswap(value.radius);
	byteswap(value.active);
	byteswap(value.editor_folder);
	byteswap(value.module_id);
}

template<> void byteswap<blofeld::infinite::s_s_trigger_volume_triangle>(blofeld::infinite::s_s_trigger_volume_triangle& value)
{
	byteswap(value.plane_0);
	byteswap(value.plane_1);
	byteswap(value.plane_2);
	byteswap(value.plane_3);
	byteswap(value.plane_4);
	byteswap(value.vertex_0);
	byteswap(value.vertex_1);
	byteswap(value.vertex_2);
}

template<> void byteswap<blofeld::infinite::s_i343activationvolume>(blofeld::infinite::s_i343activationvolume& value)
{
	byteswap(value.name);
	byteswap(value.volume);
	byteswap(value.flags);
	byteswap(value.activator_type);
	byteswap(value.exit_delay);
	byteswap(value.vicinity_trigger_distance);
	byteswap(value.runtime_triangles_block);
	byteswap(value.editor_metadata_block);
	byteswap(value.editor_folder);
	byteswap(value.module_id);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecontrolparameter>(blofeld::infinite::s_i343narrativecontrolparameter& value)
{
	byteswap(value.parameter);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecageattachment>(blofeld::infinite::s_i343narrativecageattachment& value)
{
	byteswap(value.name);
	byteswap(value.object_reference);
	byteswap(value.placement_type);
	byteswap(value.cage_definition);
	byteswap(value.cage_center_point);
}

template<> void byteswap<blofeld::infinite::s_i343narrativepersistencecheckdef>(blofeld::infinite::s_i343narrativepersistencecheckdef& value)
{
	byteswap(value.persistence_key);
	byteswap(value.compare_type);
	byteswap(value.value);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeatactivation>(blofeld::infinite::s_i343narrativebeatactivation& value)
{
	byteswap(value.flags);
	byteswap(value.on_control_parameter_set);
	byteswap(value.on_trigger_volume_enter_deprecated);
	byteswap(value.on_trigger_volume_enter);
	byteswap(value.on_trigger_volume_exit_deprecated);
	byteswap(value.on_trigger_volume_exit);
	byteswap(value.on_beat_activate);
	byteswap(value.on_beat_deactivate);
	byteswap(value.is_beat_inactive);
	byteswap(value.is_beat_active);
	byteswap(value.persistence_check);
	byteswap(value.move_to_finished);
	byteswap(value.hud_off_finished);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeatdeactivation>(blofeld::infinite::s_i343narrativebeatdeactivation& value)
{
	byteswap(value.flags);
	byteswap(value.on_control_parameter_set);
	byteswap(value.on_trigger_volume_enter_deprecated);
	byteswap(value.on_trigger_volume_enter);
	byteswap(value.on_trigger_volume_exit_deprecated);
	byteswap(value.on_trigger_volume_exit);
	byteswap(value.on_beat_activate);
	byteswap(value.on_beat_deactivate);
	byteswap(value.is_beat_inactive);
	byteswap(value.is_beat_active);
	byteswap(value.time_in_beat);
	byteswap(value.persistence_check);
	byteswap(value.move_to_finished);
	byteswap(value.hud_off_finished);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecagepointproperties>(blofeld::infinite::s_i343narrativecagepointproperties& value)
{
	byteswap(value.cage_attachment);
	byteswap(value.cage_point);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecagepointpropertieswithweight>(blofeld::infinite::s_i343narrativecagepointpropertieswithweight& value)
{
	byteswap(value.object_reference);
	byteswap(value.weight);
	byteswap(value.cage_attachment);
	byteswap(value.cage_point);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecagegazeproperties>(blofeld::infinite::s_i343narrativecagegazeproperties& value)
{
	byteswap(value.distance);
	byteswap(value.outer_angle);
	byteswap(value.inner_angle);
	byteswap(value.velocity);
	byteswap(value.source_slide_range_min);
	byteswap(value.source_slide_range_max);
	byteswap(value.target_slide_range);
	byteswap(value.slide_dampen_percentage);
	byteswap(value.slide_dampen_time);
	byteswap(value.input_velocity_curve);
	byteswap(value.velocity_curve);
	byteswap(value.gazes_block);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecagecompositionreference>(blofeld::infinite::s_i343narrativecagecompositionreference& value)
{
	byteswap(value.composition_placement);
	byteswap(value.composition_beat);
	byteswap(value.composition_index);
	byteswap(value.composition_camera_track_name);
	byteswap(value.composition_puppet_track_name);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecagecameratransformproperties>(blofeld::infinite::s_i343narrativecagecameratransformproperties& value)
{
	byteswap(value.flags);
	byteswap(value.damping);
	byteswap(value.position_point);
	byteswap(value.gaze);
	byteswap(value.shake);
	byteswap(value.composition_reference);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecagecameraproximityproperties>(blofeld::infinite::s_i343narrativecagecameraproximityproperties& value)
{
	byteswap(value.flags);
	byteswap(value.desired_focal_length);
	byteswap(value.desired_focus_distance);
	byteswap(value.desired_f_stop);
	byteswap(value.desired_bokeh_side_count);
	byteswap(value.proximity_curve);
	byteswap(value.transform_curve_name);
	byteswap(value.focal_length_curve_name);
	byteswap(value.focus_distance_curve_name);
	byteswap(value.f_stop_curve_name);
	byteswap(value.bokeh_side_count_curve_name);
	byteswap(value.gaze_outer_angle_curve_name);
	byteswap(value.gaze_inner_angle_curve_name);
	byteswap(value.outer_distance);
	byteswap(value.inner_distance);
	byteswap(value.catch_up_time);
	byteswap(value.source_cage_attachment);
	byteswap(value.source_cage_point);
	byteswap(value.destination_object_reference);
	byteswap(value.destination_cage_attachment);
	byteswap(value.destination_cage_point);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeatnewcameraproperties>(blofeld::infinite::s_i343narrativebeatnewcameraproperties& value)
{
	byteswap(value.flags);
	byteswap(value.camera_transform);
	byteswap(value.starting_focal_length);
	byteswap(value.starting_focus_distance);
	byteswap(value.starting_f_stop);
	byteswap(value.starting_bokeh_side_count);
	byteswap(value.blend_in_time);
	byteswap(value.blend_out_time);
	byteswap(value.transform_blend_curve);
	byteswap(value.properties_blend_curve);
	byteswap(value.from_gameplay_transition);
	byteswap(value.to_gameplay_transition);
	byteswap(value.proximity);
	byteswap(value.proximity_advanced_camera_block);
	byteswap(value.zoom_settings_block);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecagecameraproperties>(blofeld::infinite::s_i343narrativecagecameraproperties& value)
{
	byteswap(value.flags);
	byteswap(value.blend_time);
	byteswap(value.position_dampen_percentage);
	byteswap(value.position_dampen_time);
	byteswap(value.rotation_dampen_percentage);
	byteswap(value.rotation_dampen_time);
	byteswap(value.transform_blend_curve);
	byteswap(value.position_point);
	byteswap(value.gaze);
	byteswap(value.properties_blend_curve);
	byteswap(value.focal_length);
	byteswap(value.focus_distance);
	byteswap(value.f_stop);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecageblendproximity>(blofeld::infinite::s_i343narrativecageblendproximity& value)
{
	byteswap(value.source);
	byteswap(value.destination);
	byteswap(value.camera_properties_at_destination);
	byteswap(value.flags);
	byteswap(value.outer_edge);
	byteswap(value.inner_edge);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeatcameraproperties>(blofeld::infinite::s_i343narrativebeatcameraproperties& value)
{
	byteswap(value.blend_in_properties);
	byteswap(value.blend_in_proximity_block);
	byteswap(value.blend_out_properties);
	byteswap(value.blend_from_properties);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeatcompositionproperties>(blofeld::infinite::s_i343narrativebeatcompositionproperties& value)
{
	byteswap(value.placed_composition);
	byteswap(value.composition);
	byteswap(value.anchor_point);
	byteswap(value.flags);
	byteswap(value.cage_blend_in_time);
	byteswap(value.cage_blend_out_time);
}

template<> void byteswap<blofeld::infinite::s_i343narrativenarrativesequenceassociatedobject>(blofeld::infinite::s_i343narrativenarrativesequenceassociatedobject& value)
{
	byteswap(value.associated_object);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeatnarrativesequence>(blofeld::infinite::s_i343narrativebeatnarrativesequence& value)
{
	byteswap(value.sequence_name);
	byteswap(value.associated_objects_block);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeataicontrolproperties>(blofeld::infinite::s_i343narrativebeataicontrolproperties& value)
{
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343narrativemalleablepropertydatablockdef>(blofeld::infinite::s_i343narrativemalleablepropertydatablockdef& value)
{
	byteswap(value.data);
}

template<> void byteswap<blofeld::infinite::s_i343narrativeactivationcurvedefandnamesdef>(blofeld::infinite::s_i343narrativeactivationcurvedefandnamesdef& value)
{
	byteswap(value.curve_definition);
	byteswap(value.activate_curve_name);
	byteswap(value.deactivate_curve_name);
}

template<> void byteswap<blofeld::infinite::s_i343narrativenewplayercontrolmovetocomponent>(blofeld::infinite::s_i343narrativenewplayercontrolmovetocomponent& value)
{
	byteswap(value.flags);
	byteswap(value.destination);
	byteswap(value.close_enough_distance);
	byteswap(value.close_enough_angle);
	byteswap(value.time);
	byteswap(value.linear_velocity);
	byteswap(value.angular_velocity);
	byteswap(value.composition_beat);
	byteswap(value.composition_index);
	byteswap(value.composition_track_name);
	byteswap(value.activation_curves_block);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeatnewplayercontrolproperties>(blofeld::infinite::s_i343narrativebeatnewplayercontrolproperties& value)
{
	byteswap(value.malleable_properties_block);
	byteswap(value.weapon_disable_block);
	byteswap(value.grenade_disable_block);
	byteswap(value.animation_mode);
	byteswap(value.animation_mode_curves_block);
	byteswap(value.weapon_state);
	byteswap(value.weapon_state_activate_transition_time);
	byteswap(value.weapon_state_deactivate_transition_time);
	byteswap(value.weapon_state_curves_block);
	byteswap(value.move_to_component_block);
}

template<> void byteswap<blofeld::infinite::s_i343narrativeplayercontrolmovetocomponent>(blofeld::infinite::s_i343narrativeplayercontrolmovetocomponent& value)
{
	byteswap(value.flags);
	byteswap(value.destination);
	byteswap(value.close_enough_distance);
	byteswap(value.close_enough_angle);
	byteswap(value.time);
	byteswap(value.linear_velocity);
	byteswap(value.angular_velocity);
	byteswap(value.composition_beat);
	byteswap(value.composition_index);
	byteswap(value.composition_track_name);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeatplayercontrolproperties>(blofeld::infinite::s_i343narrativebeatplayercontrolproperties& value)
{
	byteswap(value.flags);
	byteswap(value.animation_mode);
	byteswap(value.weapon_state);
	byteswap(value.activate_transition_time);
	byteswap(value.deactivate_transition_time);
	byteswap(value.movement_speed);
	byteswap(value.movement_speed_blend_time);
	byteswap(value.sprint_speed);
	byteswap(value.move_to_component_block);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeatplayerhudproperties>(blofeld::infinite::s_i343narrativebeatplayerhudproperties& value)
{
	byteswap(value.flags);
	byteswap(value.broadcast_activation_event_name);
	byteswap(value.broadcast_activation_event_delay);
	byteswap(value.broadcast_deactivation_event_name);
	byteswap(value.broadcast_deactivation_event_delay);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeatpersistencechange>(blofeld::infinite::s_i343narrativebeatpersistencechange& value)
{
	byteswap(value.change_type);
	byteswap(value.persistence_key);
	byteswap(value.change_value);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeatpersistencechanges>(blofeld::infinite::s_i343narrativebeatpersistencechanges& value)
{
	byteswap(value.at_activation_block);
	byteswap(value.at_deactivation_block);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecagelighttransformproperties>(blofeld::infinite::s_i343narrativecagelighttransformproperties& value)
{
	byteswap(value.flags);
	byteswap(value.damping);
	byteswap(value.position_point);
	byteswap(value.gaze);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecagelighttransition>(blofeld::infinite::s_i343narrativecagelighttransition& value)
{
	byteswap(value.animation_curve);
	byteswap(value.transform_curve_name);
	byteswap(value.dimmer_curve_name);
	byteswap(value.intensity_curve_name);
	byteswap(value.color_curve_name);
	byteswap(value.near_attenuation_curve_name);
	byteswap(value.far_attenuation_curve_name);
	byteswap(value.inner_cone_angle_curve_name);
	byteswap(value.outer_cone_angle_curve_name);
	byteswap(value.animation_time);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecagelightproximityproperties>(blofeld::infinite::s_i343narrativecagelightproximityproperties& value)
{
	byteswap(value.flags);
	byteswap(value.proximity_curve);
	byteswap(value.transform_curve_name);
	byteswap(value.dimmer_curve_name);
	byteswap(value.intensity_curve_name);
	byteswap(value.color_curve_name);
	byteswap(value.near_attenuation_curve_name);
	byteswap(value.far_attenuation_curve_name);
	byteswap(value.inner_cone_angle_curve_name);
	byteswap(value.outer_cone_angle_curve_name);
	byteswap(value.outer_distance);
	byteswap(value.inner_distance);
	byteswap(value.catch_up_time);
	byteswap(value.source_cage_attachment);
	byteswap(value.source_cage_point);
	byteswap(value.destination_object_reference);
	byteswap(value.destination_cage_attachment);
	byteswap(value.destination_cage_point);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeatlightproperties>(blofeld::infinite::s_i343narrativebeatlightproperties& value)
{
	byteswap(value.light_tag);
	byteswap(value.light_transform);
	byteswap(value.activate_transition);
	byteswap(value.proximity);
	byteswap(value.proximity_advanced_lighting_block);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeatcontrolparameterproperties>(blofeld::infinite::s_i343narrativebeatcontrolparameterproperties& value)
{
	byteswap(value.set_on_activate);
	byteswap(value.unset_on_activate);
	byteswap(value.set_on_deactivate);
	byteswap(value.unset_on_deactivate);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeattransitionproperties>(blofeld::infinite::s_i343narrativebeattransitionproperties& value)
{
	byteswap(value.flags);
	byteswap(value.destination);
	byteswap(value.close_enough_distance_range);
	byteswap(value.close_enough_angle_range);
	byteswap(value.time);
	byteswap(value.linear_velocity_range);
	byteswap(value.angular_velocity_range);
	byteswap(value.lower_weapon_time);
	byteswap(value.raise_weapon_time);
	byteswap(value.hide_player_time);
	byteswap(value.lower_weapon_delay_override);
	byteswap(value.raise_weapon_delay_override);
	byteswap(value.hud_off_delay_override);
	byteswap(value.hud_on_delay_override);
	byteswap(value.move_to_delay_override);
	byteswap(value.composition_puppet_track_name);
	byteswap(value.composition_camera_track_name);
	byteswap(value.move_to_slide_curve);
	byteswap(value.gaze_blend_curve);
}

template<> void byteswap<blofeld::infinite::s_i343narrativebeat>(blofeld::infinite::s_i343narrativebeat& value)
{
	byteswap(value.name);
	byteswap(value.activation);
	byteswap(value.additional_activations_block);
	byteswap(value.deactivation);
	byteswap(value.additional_deactivations_block);
	byteswap(value.flags);
	byteswap(value.new_camera_properties_block);
	byteswap(value.camera_properties_block);
	byteswap(value.composition_properties_block);
	byteswap(value.narrative_sequences_block);
	byteswap(value.ai_control_block);
	byteswap(value.new_player_control_block);
	byteswap(value.player_control_block);
	byteswap(value.player_hud_properties_block);
	byteswap(value.persistence_block);
	byteswap(value.light_properties_block);
	byteswap(value.control_parameter_properties_block);
	byteswap(value.transition_properties_block);
}

template<> void byteswap<blofeld::infinite::s_i343narrativemoment>(blofeld::infinite::s_i343narrativemoment& value)
{
	byteswap(value.name);
	byteswap(value.volume);
	byteswap(value.flags);
	byteswap(value.blink_location);
	byteswap(value.control_parameters_block);
	byteswap(value.cage_attachments_block);
	byteswap(value.persistence_checks_block);
	byteswap(value.beats_block);
	byteswap(value.runtime_triangles_block);
	byteswap(value.editor_metadata_block);
	byteswap(value.editor_folder);
	byteswap(value.module_id);
	byteswap(value.guid);
}

template<> void byteswap<blofeld::infinite::s_i343exampleentity>(blofeld::infinite::s_i343exampleentity& value)
{
	byteswap(value.name);
	byteswap(value.position);
	byteswap(value.editor_folder);
	byteswap(value.moduleid);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_soft_ceiling>(blofeld::infinite::s_s_scenario_soft_ceiling& value)
{
	byteswap(value.flags);
	byteswap(value.runtime_flags);
	byteswap(value.name);
	byteswap(value.type);
}

template<> void byteswap<blofeld::infinite::s_scenario_starting_profile>(blofeld::infinite::s_scenario_starting_profile& value)
{
	byteswap(value.name);
	byteswap(value.starting_health_damage);
	byteswap(value.starting_shield_damage);
	byteswap(value.primary_weapon);
	byteswap(value.primaryrounds_loaded);
	byteswap(value.primaryrounds_total);
	byteswap(value.primary_weapon_configuration);
	byteswap(value.primary_weapon_variant_name);
	byteswap(value.secondary_weapon);
	byteswap(value.secondaryrounds_loaded);
	byteswap(value.secondaryrounds_total);
	byteswap(value.secondary_weapon_configuration);
	byteswap(value.secondary_weapon_variant_name);
	byteswap(value.starting_fragmentation_grenade_count);
	byteswap(value.starting_plasma_grenade_count);
	byteswap(value.starting_lightning_grenade_count);
	byteswap(value.starting_gravity_grenade_count);
	byteswap(value.starting_spike_grenade_count);
	byteswap(value.starting_pulse_grenade_count);
	byteswap(value.starting_grenade_type_7_count);
	byteswap(value.starting_grenade_type_8_count);
	byteswap(value.starting_equipment);
	byteswap(value.starting_tactical_package);
	byteswap(value.starting_support_upgrade);
	byteswap(value.editor_folder);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_scenario_player_starting_location>(blofeld::infinite::s_scenario_player_starting_location& value)
{
	byteswap(value.position);
	byteswap(value._navmeshuidoffaceref);
	byteswap(value._packedkeyoffaceref);
	byteswap(value.facing);
	byteswap(value.pitch);
	byteswap(value.name);
	byteswap(value.editor_folder);
	byteswap(value.module_id);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_ambientactionpointinstance>(blofeld::infinite::s_ambientactionpointinstance& value)
{
	byteswap(value.ambient_action_point_name);
	byteswap(value.position);
	byteswap(value.yaw_pitch);
	byteswap(value.asset);
	byteswap(value.max_distance_override);
	byteswap(value.debug_squad_override_only_used_for_debugging_compositions);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_s_real_sector_point>(blofeld::infinite::s_s_real_sector_point& value)
{
	byteswap(value.position);
}

template<> void byteswap<blofeld::infinite::s_scenario_trigger_volume>(blofeld::infinite::s_scenario_trigger_volume& value)
{
	byteswap(value.name);
	byteswap(value.object);
	byteswap(value.object_name);
	byteswap(value.runtime_node_index);
	byteswap(value.node_name);
	byteswap(value.type);
	byteswap(value.behavior);
	byteswap(value.flags);
	byteswap(value.zone_set_name);
	byteswap(value.module_id);
	byteswap(value.forward);
	byteswap(value.up);
	byteswap(value.orientation);
	byteswap(value.position);
	byteswap(value._navmeshuidoffaceref);
	byteswap(value._packedkeyoffaceref);
	byteswap(value.extents);
	byteswap(value.z_height);
	byteswap(value.z_sink);
	byteswap(value.sector_points_block);
	byteswap(value.runtime_triangles_block);
	byteswap(value.runtime_sector_bounds_x0);
	byteswap(value.runtime_sector_bounds_x1);
	byteswap(value.runtime_sector_bounds_y0);
	byteswap(value.runtime_sector_bounds_y1);
	byteswap(value.runtime_sector_bounds_z0);
	byteswap(value.runtime_sector_bounds_z1);
	byteswap(value.c);
	byteswap(value.kill_trigger_volume);
	byteswap(value.editor_folder);
	byteswap(value.editormetadata_block);
	byteswap(value.guid);
}

template<> void byteswap<blofeld::infinite::s_acousticstagzonelod>(blofeld::infinite::s_acousticstagzonelod& value)
{
	byteswap(value.voxel_size);
	byteswap(value.breakpoint);
}

template<> void byteswap<blofeld::infinite::s_acousticstagzone>(blofeld::infinite::s_acousticstagzone& value)
{
	byteswap(value.guid);
	byteswap(value.name);
	byteswap(value.placement_flags);
	byteswap(value.zone_config_flags);
	byteswap(value.type);
	byteswap(value.voxel_lods_block);
	byteswap(value.voxel_lod_z_ratio);
	byteswap(value.transition_speed);
	byteswap(value.base_air_sound);
	byteswap(value.base_air_sweetener_sound);
	byteswap(value.reverb_settings);
	byteswap(value.mix_state_group);
	byteswap(value.mix_state_value);
	byteswap(value.position);
	byteswap(value.rotation);
	byteswap(value.scale);
	byteswap(value.dumpling);
	byteswap(value.local_priority);
	byteswap(value.kit_depth);
	byteswap(value.editormetadata_block);
	byteswap(value.bspmapruntimerefcounter);
}

template<> void byteswap<blofeld::infinite::s_acousticstagportal>(blofeld::infinite::s_acousticstagportal& value)
{
	byteswap(value.guid);
	byteswap(value.name);
	byteswap(value.transmissivity_type);
	byteswap(value.manual_zone_front);
	byteswap(value.manual_zone_back);
	byteswap(value.detail);
	byteswap(value.tolerance);
	byteswap(value.flags);
	byteswap(value.min_transmissivity);
	byteswap(value.max_transmissivity);
	byteswap(value.min_openness);
	byteswap(value.max_openness);
	byteswap(value.door_centre_offset);
	byteswap(value.front_entry_sound);
	byteswap(value.front_exit_sound);
	byteswap(value.back_entry_sound);
	byteswap(value.back_exit_sound);
	byteswap(value.position);
	byteswap(value.rotation);
	byteswap(value.shearx);
	byteswap(value.sheary);
	byteswap(value.shearz);
	byteswap(value.extents);
	byteswap(value.editormetadata_block);
	byteswap(value.bspmapruntimerefcounter);
}

template<> void byteswap<blofeld::infinite::s_recorded_animation_definition>(blofeld::infinite::s_recorded_animation_definition& value)
{
	byteswap(value.name);
	byteswap(value.version);
	byteswap(value.raw_animation_data);
	byteswap(value.unit_control_data_version);
	byteswap(value.length_of_animation);
	byteswap(value.recorded_animation_event_stream);
}

template<> void byteswap<blofeld::infinite::s_scenario_decal>(blofeld::infinite::s_scenario_decal& value)
{
	byteswap(value.asset);
	byteswap(value.flags);
	byteswap(value.manual_bsp_flags);
	byteswap(value.orientation);
	byteswap(value.position);
	byteswap(value.scale_x);
	byteswap(value.scale_y);
	byteswap(value.cull_angle);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_areageneratordefinition>(blofeld::infinite::s_areageneratordefinition& value)
{
	byteswap(value.name);
	byteswap(value.editormetadata_block);
	byteswap(value.position);
	byteswap(value.orientation);
	byteswap(value.radius);
	byteswap(value.vertical_radius);
	byteswap(value.area_min_radius);
	byteswap(value.area_max_radius);
	byteswap(value.area_height);
	byteswap(value.area_spacing);
	byteswap(value.area_point_count);
}

template<> void byteswap<blofeld::infinite::s_squad_group_definition>(blofeld::infinite::s_squad_group_definition& value)
{
	byteswap(value.name);
	byteswap(value.parent);
	byteswap(value.initial_objective);
	byteswap(value.editor_folder);
	byteswap(value.module_id);
	byteswap(value.warzone_objective_definition_membership);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_s_ai_spawn_conditions>(blofeld::infinite::s_s_ai_spawn_conditions& value)
{
	byteswap(value.difficulty_flags);
}

template<> void byteswap<blofeld::infinite::s_s_patrol_point>(blofeld::infinite::s_s_patrol_point& value)
{
	byteswap(value.point);
	byteswap(value.flags);
	byteswap(value.delay);
	byteswap(value._angle);
	byteswap(value.activity_name);
	byteswap(value.command_script);
}

template<> void byteswap<blofeld::infinite::s_s_spawn_formation_definition>(blofeld::infinite::s_s_spawn_formation_definition& value)
{
	byteswap(value.place_on);
	byteswap(value.name);
	byteswap(value.position);
	byteswap(value._navmeshuidoffaceref);
	byteswap(value._packedkeyoffaceref);
	byteswap(value.facing_yaw_pitch);
	byteswap(value.roll);
	byteswap(value.formation);
	byteswap(value.initial_movement_distance);
	byteswap(value.initial_movement_mode);
	byteswap(value.placement_script);
	byteswap(value.activity_name);
	byteswap(value.movement_set);
	byteswap(value.point_set);
	byteswap(value.patrol_mode);
	byteswap(value.points_block);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_spawn_point_definition>(blofeld::infinite::s_s_spawn_point_definition& value)
{
	byteswap(value.place_on);
	byteswap(value.name);
	byteswap(value.cell);
	byteswap(value.position);
	byteswap(value._navmeshuidoffaceref);
	byteswap(value._packedkeyoffaceref);
	byteswap(value.facing_yaw_pitch);
	byteswap(value.roll);
	byteswap(value.flags);
	byteswap(value.character);
	byteswap(value.primary_weapon);
	byteswap(value.secondary_weapon);
	byteswap(value.equipment);
	byteswap(value.vehicle);
	byteswap(value.vehicle_configuration);
	byteswap(value.seat_type);
	byteswap(value.grenade_type);
	byteswap(value.swarm_count);
	byteswap(value.actor_variant_name);
	byteswap(value.vehicle_variant_name);
	byteswap(value.voice_designator);
	byteswap(value.initial_movement_distance);
	byteswap(value.initial_movement_mode);
	byteswap(value.emitter_vehicle);
	byteswap(value.giant_body);
	byteswap(value.biped_body);
	byteswap(value.placement_script);
	byteswap(value.activity_name);
	byteswap(value.movement_set);
	byteswap(value.point_set);
	byteswap(value.patrol_mode);
	byteswap(value.points_block);
	byteswap(value.vehicle_body);
}

template<> void byteswap<blofeld::infinite::s_aicharacterchoice>(blofeld::infinite::s_aicharacterchoice& value)
{
	byteswap(value.place_on);
	byteswap(value.character_type);
	byteswap(value.chance);
}

template<> void byteswap<blofeld::infinite::s_aiweaponchoice>(blofeld::infinite::s_aiweaponchoice& value)
{
	byteswap(value.place_on);
	byteswap(value.weapon_type);
	byteswap(value.chance);
}

template<> void byteswap<blofeld::infinite::s_aiequipmentchoice>(blofeld::infinite::s_aiequipmentchoice& value)
{
	byteswap(value.place_on);
	byteswap(value.equipment_type);
	byteswap(value.chance);
}

template<> void byteswap<blofeld::infinite::s_s_cell_definition>(blofeld::infinite::s_s_cell_definition& value)
{
	byteswap(value.name);
	byteswap(value.place_on);
	byteswap(value.normal_diff_count);
	byteswap(value.major_upgrade);
	byteswap(value.character_block);
	byteswap(value.primary_weapon_block);
	byteswap(value.secondary_weapon_block);
	byteswap(value.equipment_block);
	byteswap(value.grenade_type);
	byteswap(value.vehicle);
	byteswap(value.vehicle_variant);
	byteswap(value.placement_script);
	byteswap(value.activity_name);
	byteswap(value.movement_set);
	byteswap(value.point_set);
	byteswap(value.patrol_mode);
	byteswap(value.points_block);
}

template<> void byteswap<blofeld::infinite::s_s_squad_definition_internal>(blofeld::infinite::s_s_squad_definition_internal& value)
{
	byteswap(value.cells_block);
}

template<> void byteswap<blofeld::infinite::s_s_squad_definition>(blofeld::infinite::s_s_squad_definition& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.team);
	byteswap(value.parent);
	byteswap(value.bsp_flags);
	byteswap(value.initial_zone);
	byteswap(value.initial_objective);
	byteswap(value.initial_task);
	byteswap(value.editor_folder);
	byteswap(value.spawn_formations_block);
	byteswap(value.spawn_points_block);
	byteswap(value.module_id);
	byteswap(value._template);
	byteswap(value.squad_template_index);
	byteswap(value.designer);
	byteswap(value.templated);
	byteswap(value.warzone_objective_definition_membership);
	byteswap(value.bsp_policy);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_navmeshattachmentnavmeshattachmentid>(blofeld::infinite::s_navmeshattachmentnavmeshattachmentid& value)
{
	byteswap(value.navmeshuid);
}

template<> void byteswap<blofeld::infinite::s_navmeshattachment>(blofeld::infinite::s_navmeshattachment& value)
{
	byteswap(value.attachments_block);
}

template<> void byteswap<blofeld::infinite::s_s_ai_sector_point>(blofeld::infinite::s_s_ai_sector_point& value)
{
	byteswap(value.point);
	byteswap(value._navmeshuidoffaceref);
	byteswap(value._packedkeyoffaceref);
}

template<> void byteswap<blofeld::infinite::s_area_definition>(blofeld::infinite::s_area_definition& value)
{
	byteswap(value.name);
	byteswap(value.area_flags);
	byteswap(value.runtime_relative_mean_point);
	byteswap(value._navmeshuidoffaceref);
	byteswap(value._packedkeyoffaceref);
	byteswap(value.runtime_standard_deviation);
	byteswap(value.nav_mesh_attachments);
	byteswap(value.points_block);
	byteswap(value.flags);
	byteswap(value.extrusion);
	byteswap(value.sink);
	byteswap(value.air_firing_point_density);
}

template<> void byteswap<blofeld::infinite::s_zone_definition>(blofeld::infinite::s_zone_definition& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.editor_folder_index);
	byteswap(value.areas_block);
	byteswap(value.nav_mesh_attachments);
	byteswap(value.disallowed_attachment_bsps);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_user_hint_parallelogram>(blofeld::infinite::s_user_hint_parallelogram& value)
{
	byteswap(value.point_0);
	byteswap(value.point_1);
	byteswap(value.point_2);
	byteswap(value.point_3);
	byteswap(value.invalid_points);
}

template<> void byteswap<blofeld::infinite::s_user_hint_jump>(blofeld::infinite::s_user_hint_jump& value)
{
	byteswap(value.link_type);
	byteswap(value.squad_group_filter);
	byteswap(value.hint_data_0);
	byteswap(value.hint_data_1);
	byteswap(value.hint_data_2);
	byteswap(value.pad1);
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.force_jump_height);
	byteswap(value.control_flags);
	byteswap(value.geometry);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_aihintsectorpoint>(blofeld::infinite::s_aihintsectorpoint& value)
{
	byteswap(value.point);
	byteswap(value._navmeshuidoffaceref);
	byteswap(value._packedkeyoffaceref);
}

template<> void byteswap<blofeld::infinite::s_s_cookie_cutterobjectidentifier>(blofeld::infinite::s_s_cookie_cutterobjectidentifier& value)
{
	byteswap(value.object_id);
}

template<> void byteswap<blofeld::infinite::s_s_cookie_cutter>(blofeld::infinite::s_s_cookie_cutter& value)
{
	byteswap(value.points_block);
	byteswap(value.pointsobjectids_block);
	byteswap(value.z_height);
	byteswap(value.z_sink);
	byteswap(value.type);
	byteswap(value.pad);
	byteswap(value.editormetadata_block);
	byteswap(value.invalid);
}

template<> void byteswap<blofeld::infinite::s_navmesharea>(blofeld::infinite::s_navmesharea& value)
{
	byteswap(value.points_block);
	byteswap(value.z_height);
	byteswap(value.z_sink);
	byteswap(value.type);
	byteswap(value.isvalid);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343ainavseedpoint>(blofeld::infinite::s_i343ainavseedpoint& value)
{
	byteswap(value.name);
	byteswap(value.position);
}

template<> void byteswap<blofeld::infinite::s_opportunitytasklink>(blofeld::infinite::s_opportunitytasklink& value)
{
	byteswap(value.objective);
	byteswap(value.task);
}

template<> void byteswap<blofeld::infinite::s_opportunityareadata>(blofeld::infinite::s_opportunityareadata& value)
{
	byteswap(value.points_block);
	byteswap(value.z_height);
	byteswap(value.z_sink);
	byteswap(value.name);
	byteswap(value.mean_position);
	byteswap(value.std_deviation);
	byteswap(value.tasks_block);
	byteswap(value.priority);
	byteswap(value.distribution_range);
	byteswap(value.distribution_probability);
	byteswap(value.distribution_type);
	byteswap(value.max_uses);
	byteswap(value.user_limit);
	byteswap(value.character_filter_tag);
	byteswap(value.weapon_filter_tag);
	byteswap(value.combat_effect);
	byteswap(value.stimulus);
	byteswap(value.script);
	byteswap(value.isvalid);
	byteswap(value.position);
	byteswap(value._navmeshuidoffaceref);
	byteswap(value._packedkeyoffaceref);
	byteswap(value.attraction_radius);
	byteswap(value.opportunity_type);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_ai_recording_reference_definition>(blofeld::infinite::s_ai_recording_reference_definition& value)
{
	byteswap(value.recording_name);
}

template<> void byteswap<blofeld::infinite::s_cs_point>(blofeld::infinite::s_cs_point& value)
{
	byteswap(value.name);
	byteswap(value.name_id);
	byteswap(value.position);
	byteswap(value._navmeshuidoffaceref);
	byteswap(value._packedkeyoffaceref);
	byteswap(value.facing_direction);
	byteswap(value.wait_time);
	byteswap(value.reached_radius);
}

template<> void byteswap<blofeld::infinite::s_cs_point_set>(blofeld::infinite::s_cs_point_set& value)
{
	byteswap(value.name);
	byteswap(value.points_block);
	byteswap(value.bsp_index);
	byteswap(value.flags);
	byteswap(value.traversal_flags);
	byteswap(value.editor_folder);
	byteswap(value.module_id);
	byteswap(value.editormetadata_block);
	byteswap(value.warzone_objective_definition_membership);
}

template<> void byteswap<blofeld::infinite::s_scenario_cutscene_flag>(blofeld::infinite::s_scenario_cutscene_flag& value)
{
	byteswap(value.name);
	byteswap(value.position);
	byteswap(value.facing);
	byteswap(value.module_id);
	byteswap(value.editor_folder);
	byteswap(value.source_bsp);
	byteswap(value.editormetadata_block);
	byteswap(value.guid);
}

template<> void byteswap<blofeld::infinite::s_scenario_cutscene_camera_point>(blofeld::infinite::s_scenario_cutscene_camera_point& value)
{
	byteswap(value.flags);
	byteswap(value.type);
	byteswap(value.name);
	byteswap(value.position);
	byteswap(value.orientation);
	byteswap(value.zone_set);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_cutscene_title>(blofeld::infinite::s_s_scenario_cutscene_title& value)
{
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.objective_title);
	byteswap(value.objective_description);
	byteswap(value.text_bounds_x);
	byteswap(value.text_bounds_y);
	byteswap(value.justification);
	byteswap(value.vertical_justification);
	byteswap(value.font);
	byteswap(value.text_color);
	byteswap(value.shadow_color);
	byteswap(value.fade_in_time_);
	byteswap(value.up_time_);
	byteswap(value.fade_out_time_);
	byteswap(value.letter_print_time);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_s_flock_source>(blofeld::infinite::s_s_flock_source& value)
{
	byteswap(value.name);
	byteswap(value.source_flags);
	byteswap(value.position);
	byteswap(value.starting_yaw_pitch);
	byteswap(value.radius);
	byteswap(value.weight);
	byteswap(value.bsp_index);
	byteswap(value.cluster_index);
	byteswap(value.source_volume);
	byteswap(value.initial_destination);
}

template<> void byteswap<blofeld::infinite::s_s_flock_destination>(blofeld::infinite::s_s_flock_destination& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value.position);
	byteswap(value.radius);
	byteswap(value.max_destination_volume_penetration);
	byteswap(value.destination_volume);
	byteswap(value.next_destination);
}

template<> void byteswap<blofeld::infinite::s_s_flock_instance>(blofeld::infinite::s_s_flock_instance& value)
{
	byteswap(value.flock_name);
	byteswap(value.editormetadata_block);
	byteswap(value.position);
	byteswap(value.flock_asset);
	byteswap(value.active_bsps);
	byteswap(value.bounding_volume);
	byteswap(value.flock_sources_block);
	byteswap(value.destination_system_type);
	byteswap(value.looped_path);
	byteswap(value.placement_flags);
	byteswap(value.creature_asset);
	byteswap(value.creature_variant_name);
	byteswap(value.boid_count);
	byteswap(value.initial_behavior);
	byteswap(value.second_behavior);
	byteswap(value.reaction_behavior);
	byteswap(value.reaction_navigation_behavior);
	byteswap(value.second_reaction_behavior);
	byteswap(value.second_reaction_navigation_behavior);
	byteswap(value.despawn_reaction_behavior);
	byteswap(value.despawn_reaction_navigation_behavior);
	byteswap(value.general_override_flags);
	byteswap(value.torus_inner_radius);
	byteswap(value.torus_cross_section_radius);
	byteswap(value.circling_direction);
	byteswap(value.leveling_coefficient);
	byteswap(value.circling_override_flags);
	byteswap(value.spawn_cylinder_radius);
	byteswap(value.spawn_cylinder_height);
	byteswap(value.perching_wandering_override_flags);
	byteswap(value.wandering_time);
	byteswap(value.grazing_time);
	byteswap(value.change_of_direction_time);
	byteswap(value.flags);
	byteswap(value.wandering_to_same_source_point_is_allowed);
	byteswap(value.wandering_override_flags);
	byteswap(value.spawn_flags);
	byteswap(value.generate_spawn_point_for_each_boid);
	byteswap(value.number_of_spawn_points);
	byteswap(value.distance_of_importance);
	byteswap(value.despawn_distance);
	byteswap(value.spawn_distance);
	byteswap(value.minimum_respawn_delay);
	byteswap(value.time_before_dehydration_hide_is_forced);
	byteswap(value.distance_enough_for_dehydration_hide);
	byteswap(value.spawn_priority);
	byteswap(value.disable_backward_flock_relevancy_reduce);
	byteswap(value.production_frequency_bounds);
	byteswap(value.high_lod_distance);
	byteswap(value.spawn_override_flags);
	byteswap(value.not_initially_spawned);
	byteswap(value.spawn_trigger_volume);
	byteswap(value.procedural_spawn_in_player_visibility);
	byteswap(value.procedural_spawn_delay_bounds);
	byteswap(value.ecology_margin);
	byteswap(value.source_scale_to_0_radius);
	byteswap(value.sink_scale_to_0_radius);
	byteswap(value.flock_destroy_duration);
	byteswap(value.enemy_flock);
	byteswap(value.enemy_flock_max_target_distance);
	byteswap(value.constant_throttle_override);
	byteswap(value.editor_folder);
	byteswap(value.module_id);
	byteswap(value.flock_destinations_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_editor_folder>(blofeld::infinite::s_s_scenario_editor_folder& value)
{
	byteswap(value.parent_folder);
	byteswap(value.name);
	byteswap(value.prototype_script);
	byteswap(value.scriptable_properties);
	byteswap(value.editormetadata_block);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_opposing_objective>(blofeld::infinite::s_s_opposing_objective& value)
{
	byteswap(value.objective);
}

template<> void byteswap<blofeld::infinite::s_s_area_reference>(blofeld::infinite::s_s_area_reference& value)
{
	byteswap(value.area_type);
	byteswap(value.flags);
	byteswap(value.zone);
	byteswap(value.area);
	byteswap(value.yaw);
	byteswap(value.connection_flags_0);
	byteswap(value.connection_flags_1);
	byteswap(value.connection_flags_2);
	byteswap(value.connection_flags_3);
}

template<> void byteswap<blofeld::infinite::s_s_script_fragment>(blofeld::infinite::s_s_script_fragment& value)
{
	byteswap(value.script_name);
	byteswap(value.script_source);
}

template<> void byteswap<blofeld::infinite::s_s_task_direction_point>(blofeld::infinite::s_s_task_direction_point& value)
{
	byteswap(value.point0);
	byteswap(value._navmeshuidoffaceref);
	byteswap(value._packedkeyoffaceref);
}

template<> void byteswap<blofeld::infinite::s_s_task_direction>(blofeld::infinite::s_s_task_direction& value)
{
	byteswap(value.points_block);
}

template<> void byteswap<blofeld::infinite::s_s_task_definition>(blofeld::infinite::s_s_task_definition& value)
{
	byteswap(value.flags);
	byteswap(value.inhibit_groups);
	byteswap(value.inhibit_on_difficulty);
	byteswap(value.movement);
	byteswap(value.follow);
	byteswap(value.follow_squad);
	byteswap(value.follow_radius);
	byteswap(value.follow_players);
	byteswap(value.areas_block);
	byteswap(value.maximum_duration);
	byteswap(value.exhaustion_delay);
	byteswap(value.entry_script);
	byteswap(value.command_script);
	byteswap(value.exhaustion_script);
	byteswap(value.squad_group_filter);
	byteswap(value.dialogue_type);
	byteswap(value.runtime_flags);
	byteswap(value.kungfu_count);
	byteswap(value.name);
	byteswap(value.priority);
	byteswap(value.first_child);
	byteswap(value.next_sibling);
	byteswap(value.parent);
	byteswap(value.activation_script_block);
	byteswap(value.script_crc);
	byteswap(value.lifetime_count);
	byteswap(value.filter_flags);
	byteswap(value.filter);
	byteswap(value.capacity);
	byteswap(value.max_body_count);
	byteswap(value.attitude);
	byteswap(value.min_strength);
	byteswap(value.direction_block);
}

template<> void byteswap<blofeld::infinite::s_s_objective>(blofeld::infinite::s_s_objective& value)
{
	byteswap(value.name);
	byteswap(value.opposing_objectives_block);
	byteswap(value.objective_flags);
	byteswap(value.zone_index);
	byteswap(value.first_task_index);
	byteswap(value.editor_folder);
	byteswap(value.tasks_block);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_cheap_particle_system>(blofeld::infinite::s_s_scenario_cheap_particle_system& value)
{
	byteswap(value.palette_index);
	byteswap(value.position);
	byteswap(value.rotation);
}

template<> void byteswap<blofeld::infinite::s_composerpuppetoverride>(blofeld::infinite::s_composerpuppetoverride& value)
{
	byteswap(value.puppet_name);
	byteswap(value.subject);
}

template<> void byteswap<blofeld::infinite::s_levelobjectparentkitpath>(blofeld::infinite::s_levelobjectparentkitpath& value)
{
	byteswap(value.path_block);
}

template<> void byteswap<blofeld::infinite::s_composershowstage>(blofeld::infinite::s_composershowstage& value)
{
	byteswap(value.composition);
	byteswap(value.instance_name);
	byteswap(value.position);
	byteswap(value.orientation);
	byteswap(value.zone_set_name);
	byteswap(value.streaming_reference_override);
	byteswap(value.bsp_policy);
	byteswap(value.manual_bsp_flags);
	byteswap(value.puppets_block);
	byteswap(value.editormetadata_block);
	byteswap(value.editor_folder);
	byteswap(value.module_id);
	byteswap(value.composer_show_stage_flags);
	byteswap(value.stage_volume);
	byteswap(value.stage_volume_flags);
	byteswap(value.streaming_flags);
	byteswap(value.stream_pinned_resources_radius_override);
	byteswap(value.guid);
	byteswap(value.parent_kits);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsdecalsdecalvertex>(blofeld::infinite::s_i343graphicsdecalsdecalvertex& value)
{
	byteswap(value.position);
	byteswap(value.position_w_component);
	byteswap(value.texcoord);
	byteswap(value.normal);
	byteswap(value.tangent_x);
	byteswap(value.tangent_y);
	byteswap(value.tangent_z);
	byteswap(value.array_index);
	byteswap(value.rayindex);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsdecalsdecaltriangle>(blofeld::infinite::s_i343graphicsdecalsdecaltriangle& value)
{
	byteswap(value.vertex_0);
	byteswap(value.vertex_1);
	byteswap(value.vertex_2);
}

template<> void byteswap<blofeld::infinite::s_cacheddecalsystem>(blofeld::infinite::s_cacheddecalsystem& value)
{
	byteswap(value.definition_ref);
	byteswap(value.component_index);
	byteswap(value.decal_triangles_block);
	byteswap(value.runtimevertexbuffer);
}

template<> void byteswap<blofeld::infinite::s_staticdecalcache>(blofeld::infinite::s_staticdecalcache& value)
{
	byteswap(value.bsp_number);
	byteswap(value.decal_system_block);
}

template<> void byteswap<blofeld::infinite::s_i343unitrecorderunitrecordingreferences>(blofeld::infinite::s_i343unitrecorderunitrecordingreferences& value)
{
	byteswap(value.recording);
}

template<> void byteswap<blofeld::infinite::s_materialbitmapoverrideentry>(blofeld::infinite::s_materialbitmapoverrideentry& value)
{
	byteswap(value.parameter_name);
	byteswap(value.bitmap);
}

template<> void byteswap<blofeld::infinite::s_materialbitmapoverrides>(blofeld::infinite::s_materialbitmapoverrides& value)
{
	byteswap(value.original_material_ref);
	byteswap(value.bitmap_overrides_block);
	byteswap(value.override_material_ref);
}

template<> void byteswap<blofeld::infinite::s_scenariostaticassetplacement>(blofeld::infinite::s_scenariostaticassetplacement& value)
{
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.prefab_reference);
	byteswap(value.variant_name);
	byteswap(value.position);
	byteswap(value.rotation);
	byteswap(value.scale);
	byteswap(value.flags);
	byteswap(value.cinema_only);
	byteswap(value.exclude_from_cinema);
	byteswap(value.remove_from_dynamic_shadow_map);
	byteswap(value.exclude_from_intel_map);
	byteswap(value.in_game_maps_material);
	byteswap(value.ignore_cubemap_volume);
	byteswap(value.exclude_from_broadphase_calculation);
	byteswap(value.pathfinding_policy);
	byteswap(value.lightmapping_policy);
	byteswap(value.collision_decals_policy);
	byteswap(value.probe_grid_capture_offset);
	byteswap(value.override_lightmap_resolution_scale);
	byteswap(value.decorator_generator_density);
	byteswap(value.lod_distance_override_1);
	byteswap(value.lod_distance_override_2);
	byteswap(value.lod_distance_override_3);
	byteswap(value.lod_distance_override_4);
	byteswap(value.lod_distance_override_5);
	byteswap(value.lod_distance_override_6);
	byteswap(value.lod_distance_override_7);
	byteswap(value.lod_distance_override_8);
	byteswap(value.lod_distance_override_9);
	byteswap(value.lod_distance_override_10);
	byteswap(value.lod_distance_override_11);
	byteswap(value.lod_distance_override_12);
	byteswap(value.lod_distance_override_13);
	byteswap(value.lod_distance_override_14);
	byteswap(value.lod_distance_override_15);
	byteswap(value.lod_distance_override_16);
	byteswap(value.lod_fade_after_override);
	byteswap(value.instance_material_overrides_block);
	byteswap(value.material_overrides_block);
	byteswap(value.mask_painting_material_bitmap_overrides_block);
	byteswap(value.editormetadata_block);
	byteswap(value.owner_bsp);
}

template<> void byteswap<blofeld::infinite::s_scenarioassetcollectionplacement>(blofeld::infinite::s_scenarioassetcollectionplacement& value)
{
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.prefab_reference);
	byteswap(value.variant_name);
	byteswap(value.position);
	byteswap(value.rotation);
	byteswap(value.scale);
	byteswap(value.flags);
	byteswap(value.cinema_only);
	byteswap(value.exclude_from_cinema);
	byteswap(value.remove_from_dynamic_shadow_map);
	byteswap(value.exclude_from_intel_map);
	byteswap(value.in_game_maps_material);
	byteswap(value.ignore_cubemap_volume);
	byteswap(value.exclude_from_broadphase_calculation);
	byteswap(value.pathfinding_policy);
	byteswap(value.lightmapping_policy);
	byteswap(value.collision_decals_policy);
	byteswap(value.probe_grid_capture_offset);
	byteswap(value.override_lightmap_resolution_scale);
	byteswap(value.decorator_generator_density);
	byteswap(value.lod_distance_override_1);
	byteswap(value.lod_distance_override_2);
	byteswap(value.lod_distance_override_3);
	byteswap(value.lod_distance_override_4);
	byteswap(value.lod_distance_override_5);
	byteswap(value.lod_distance_override_6);
	byteswap(value.lod_distance_override_7);
	byteswap(value.lod_distance_override_8);
	byteswap(value.lod_distance_override_9);
	byteswap(value.lod_distance_override_10);
	byteswap(value.lod_distance_override_11);
	byteswap(value.lod_distance_override_12);
	byteswap(value.lod_distance_override_13);
	byteswap(value.lod_distance_override_14);
	byteswap(value.lod_distance_override_15);
	byteswap(value.lod_distance_override_16);
	byteswap(value.lod_fade_after_override);
	byteswap(value.instance_material_overrides_block);
	byteswap(value.material_overrides_block);
	byteswap(value.mask_painting_material_bitmap_overrides_block);
	byteswap(value.editormetadata_block);
	byteswap(value.owner_bsp);
	byteswap(value.asset_collection);
}

template<> void byteswap<blofeld::infinite::s_foliageassetplacement>(blofeld::infinite::s_foliageassetplacement& value)
{
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.prefab_reference);
	byteswap(value.variant_name);
	byteswap(value.position);
	byteswap(value.rotation);
	byteswap(value.scale);
	byteswap(value.flags);
	byteswap(value.cinema_only);
	byteswap(value.exclude_from_cinema);
	byteswap(value.remove_from_dynamic_shadow_map);
	byteswap(value.exclude_from_intel_map);
	byteswap(value.in_game_maps_material);
	byteswap(value.ignore_cubemap_volume);
	byteswap(value.exclude_from_broadphase_calculation);
	byteswap(value.pathfinding_policy);
	byteswap(value.lightmapping_policy);
	byteswap(value.collision_decals_policy);
	byteswap(value.probe_grid_capture_offset);
	byteswap(value.override_lightmap_resolution_scale);
	byteswap(value.decorator_generator_density);
	byteswap(value.lod_distance_override_1);
	byteswap(value.lod_distance_override_2);
	byteswap(value.lod_distance_override_3);
	byteswap(value.lod_distance_override_4);
	byteswap(value.lod_distance_override_5);
	byteswap(value.lod_distance_override_6);
	byteswap(value.lod_distance_override_7);
	byteswap(value.lod_distance_override_8);
	byteswap(value.lod_distance_override_9);
	byteswap(value.lod_distance_override_10);
	byteswap(value.lod_distance_override_11);
	byteswap(value.lod_distance_override_12);
	byteswap(value.lod_distance_override_13);
	byteswap(value.lod_distance_override_14);
	byteswap(value.lod_distance_override_15);
	byteswap(value.lod_distance_override_16);
	byteswap(value.lod_fade_after_override);
	byteswap(value.instance_material_overrides_block);
	byteswap(value.material_overrides_block);
	byteswap(value.mask_painting_material_bitmap_overrides_block);
	byteswap(value.editormetadata_block);
	byteswap(value.owner_bsp);
	byteswap(value.foliage_asset);
}

template<> void byteswap<blofeld::infinite::s_i343hexgridplacement>(blofeld::infinite::s_i343hexgridplacement& value)
{
	byteswap(value.position);
	byteswap(value.bottom);
	byteswap(value.top);
	byteswap(value.hidden_sides);
}

template<> void byteswap<blofeld::infinite::s_i343hexgridhexplacements>(blofeld::infinite::s_i343hexgridhexplacements& value)
{
	byteswap(value.placements_block);
	byteswap(value.hex_grid_asset);
	byteswap(value.generatedmodel);
	byteswap(value.generatedcollisionmodel);
	byteswap(value.generatedmaterialpalette);
}

template<> void byteswap<blofeld::infinite::s_i343hexgridruntimeplacement>(blofeld::infinite::s_i343hexgridruntimeplacement& value)
{
	byteswap(value.position);
	byteswap(value.height);
	byteswap(value.hidemask);
}

template<> void byteswap<blofeld::infinite::s_i343hexgridquadtreenode>(blofeld::infinite::s_i343hexgridquadtreenode& value)
{
	byteswap(value.aabb_min);
	byteswap(value.start_index);
	byteswap(value.aabb_max);
	byteswap(value.count);
}

template<> void byteswap<blofeld::infinite::s_i343hexgridhexruntime>(blofeld::infinite::s_i343hexgridhexruntime& value)
{
	byteswap(value.runtime_geo);
	byteswap(value.material_palette);
	byteswap(value.placements_block);
	byteswap(value.quadtree_block);
	byteswap(value.hex_runtime);
	byteswap(value.m_maximumvisiblesides);
	byteswap(value.m_maximumvisiblecaps);
}

template<> void byteswap<blofeld::infinite::s_structurelightdefinition>(blofeld::infinite::s_structurelightdefinition& value)
{
	byteswap(value.guid);
	byteswap(value.position);
	byteswap(value.facing);
	byteswap(value.version);
	byteswap(value.active);
	byteswap(value.midnight_light_parameters);
	byteswap(value.indirect_amplification_factor);
	byteswap(value.jitter_angle);
	byteswap(value.is_a_lightmapper_only_light);
	byteswap(value.indirect_only);
	byteswap(value.runtime_index);
	byteswap(value.editormetadata_block);
	byteswap(value.owner_bsp);
	byteswap(value.owner_variant);
	byteswap(value.runtime_bsp_index);
	byteswap(value.runtime_variant_index);
	byteswap(value.bone_name);
	byteswap(value.should_contribute_to_adjacent_bsps);
	byteswap(value.editor_folder);
	byteswap(value.module_id);
}

template<> void byteswap<blofeld::infinite::s_visualenvironment>(blofeld::infinite::s_visualenvironment& value)
{
	byteswap(value.camera_settings);
	byteswap(value.fog_settings);
	byteswap(value.custom_object_lighting);
	byteswap(value.cubemap_bitmap_deprecated);
}

template<> void byteswap<blofeld::infinite::s_visualenvvolume>(blofeld::infinite::s_visualenvvolume& value)
{
	byteswap(value.name);
	byteswap(value.dumpling);
	byteswap(value.editormetadata_block);
	byteswap(value.visual_environment);
	byteswap(value.owner_bsp);
	byteswap(value.owner_variant);
	byteswap(value.runtime_bsp_index);
	byteswap(value.runtime_variant_index);
}

template<> void byteswap<blofeld::infinite::s_i343terraindefinition>(blofeld::infinite::s_i343terraindefinition& value)
{
	byteswap(value.terrain_system);
	byteswap(value.volume);
}

template<> void byteswap<blofeld::infinite::s_i343terrainplacement>(blofeld::infinite::s_i343terrainplacement& value)
{
	byteswap(value.terrain_definition);
	byteswap(value.runtime_terrain);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343terrainvolume>(blofeld::infinite::s_i343terrainvolume& value)
{
	byteswap(value.name);
	byteswap(value.terrain_definition);
	byteswap(value.volume_composition_order);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_levelobjects>(blofeld::infinite::s_levelobjects& value)
{
	byteswap(value.anytag);
	byteswap(value.decorators);
	byteswap(value.comments_block);
	byteswap(value.editor_annotations_block);
	byteswap(value.object_names_block);
	byteswap(value.scenery_block);
	byteswap(value.bipeds_block);
	byteswap(value.vehicles_block);
	byteswap(value.equipment_block);
	byteswap(value.weapons_block);
	byteswap(value.device_groups_block);
	byteswap(value.machines_block);
	byteswap(value.terminals_block);
	byteswap(value.controls_block);
	byteswap(value.dispensers_block);
	byteswap(value.giants_block);
	byteswap(value.effect_scenery_block);
	byteswap(value.crates_block);
	byteswap(value.creatures_block);
	byteswap(value.object_node_graph_placements_block);
	byteswap(value.splines_block);
	byteswap(value.warzone_objective_definitions_block);
	byteswap(value.scenario_attached_lens_flares_block);
	byteswap(value.scenario_attached_light_cones_block);
	byteswap(value.sound_placements_block);
	byteswap(value.effect_placements_block);
	byteswap(value.global_forces_block);
	byteswap(value.hlod_volumes_block);
	byteswap(value.wind_influencer_volumes_block);
	byteswap(value.physics_volumes_block);
	byteswap(value.pruning_volumes_block);
	byteswap(value.ai_markup_volumes_block);
	byteswap(value.ai_markup_points_block);
	byteswap(value.bot_markup_points_block);
	byteswap(value.encounter_zones_block);
	byteswap(value.encounter_tree_nodes_block);
	byteswap(value.encounter_behavior_trees_block);
	byteswap(value.placed_orders_block);
	byteswap(value.squad_spawners_block);
	byteswap(value.reinforcement_points_block);
	byteswap(value.activatable_regions_block);
	byteswap(value.activation_volumes_block);
	byteswap(value.narrative_moments_block);
	byteswap(value.example_entities_block);
	byteswap(value.soft_ceilings_block);
	byteswap(value.player_starting_profile_block);
	byteswap(value.player_starting_locations_block);
	byteswap(value.ambient_action_points_block);
	byteswap(value.trigger_volumes_block);
	byteswap(value.acoustic_zones_block);
	byteswap(value.acoustic_portals_block);
	byteswap(value.recorded_animations_block);
	byteswap(value.decals_block);
	byteswap(value.area_generators_block);
	byteswap(value.squad_groups_block);
	byteswap(value.squads_block);
	byteswap(value.zones_block);
	byteswap(value.nav_links_block);
	byteswap(value.cookie_cutters_block);
	byteswap(value.navmesh_areas_block);
	byteswap(value.navseedpoints_block);
	byteswap(value.ai_opportunity_areas_block);
	byteswap(value.ai_recording_references_block);
	byteswap(value.point_sets_block);
	byteswap(value.cutscene_flags_block);
	byteswap(value.cutscene_camera_points_block);
	byteswap(value.cutscene_titles_block);
	byteswap(value.flocks_block);
	byteswap(value.editor_folders_block);
	byteswap(value.ai_objectives_block);
	byteswap(value.neuticles_block);
	byteswap(value.composer_shows_block);
	byteswap(value.static_decal_cache_block);
	byteswap(value.unit_recording_references_block);
	byteswap(value.prefab_placements_block);
	byteswap(value.asset_collection_placements_block);
	byteswap(value.foliage_placements_block);
	byteswap(value.hex_placements_block);
	byteswap(value.hex_runtime_data_block);
	byteswap(value.generic_light_definitions_block);
	byteswap(value.lightmap_priority_volumes_block);
	byteswap(value.air_probe_density_volumes_block);
	byteswap(value.air_probe_region_volumes_block);
	byteswap(value.cubemap_volumes_block);
	byteswap(value.visual_environment_volumes_block);
	byteswap(value.baked_pvs_volumes_block);
	byteswap(value.terrains_block);
	byteswap(value.terrain_volumes_block);
	byteswap(value.local_states_block);
}

template<> void byteswap<blofeld::infinite::s_s_location_name_tag_definition>(blofeld::infinite::s_s_location_name_tag_definition& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_s_location_name_globals_tag_definition>(blofeld::infinite::s_s_location_name_globals_tag_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.location_names_block);
	byteswap(value.location_name_string_list);
}

template<> void byteswap<blofeld::infinite::s_lodsettings>(blofeld::infinite::s_lodsettings& value)
{
	byteswap(value.name);
	byteswap(value.settings_file);
}

template<> void byteswap<blofeld::infinite::s_lodsettingstransitiondistanceparam>(blofeld::infinite::s_lodsettingstransitiondistanceparam& value)
{
	byteswap(value.screen_space_size);
}

template<> void byteswap<blofeld::infinite::s_lodtransitions>(blofeld::infinite::s_lodtransitions& value)
{
	byteswap(value.reference_bounding_sphere_radius);
	byteswap(value.screen_space_lod_reduction_block);
}

template<> void byteswap<blofeld::infinite::s_lodsettingstag>(blofeld::infinite::s_lodsettingstag& value)
{
	byteswap(value.anytag);
	byteswap(value.settings_block);
	byteswap(value.transitions_block);
}

template<> void byteswap<blofeld::infinite::s_i343levelstaticgeoplacement>(blofeld::infinite::s_i343levelstaticgeoplacement& value)
{
	byteswap(value.placement);
	byteswap(value.bounding_center);
	byteswap(value.bounding_radius);
	byteswap(value.streaming_radius);
}

template<> void byteswap<blofeld::infinite::s_i343levelstaticgeobsp>(blofeld::infinite::s_i343levelstaticgeobsp& value)
{
	byteswap(value.bsp);
	byteswap(value.static_placements_block);
	byteswap(value.foliage_placements_block);
}

template<> void byteswap<blofeld::infinite::s_i343levelstaticgeotag>(blofeld::infinite::s_i343levelstaticgeotag& value)
{
	byteswap(value.anytag);
	byteswap(value.source_level);
	byteswap(value.options);
	byteswap(value.minimum_object_size);
	byteswap(value.minimum_screen_size);
	byteswap(value.bsps_block);
}

template<> void byteswap<blofeld::infinite::s_loopingsoundtag>(blofeld::infinite::s_loopingsoundtag& value)
{
	byteswap(value.anytag);
	byteswap(value.start_event);
	byteswap(value.stop_event);
	byteswap(value.player_start_event);
	byteswap(value.player_stop_event);
	byteswap(value.sound_bank);
	byteswap(value.player_sound_bank);
	byteswap(value.runtime_distance_bounds);
	byteswap(value.maximum_radius);
	byteswap(value.category);
	byteswap(value.player_category);
	byteswap(value.sound_tails);
}

template<> void byteswap<blofeld::infinite::s_s_leaf_type>(blofeld::infinite::s_s_leaf_type& value)
{
	byteswap(value.bitmap_sprite_index);
	byteswap(value.frequency);
	byteswap(value.mass);
	byteswap(value.geometry_scale);
	byteswap(value.flitteriness);
	byteswap(value.flitteriness_swing_arm_length);
	byteswap(value.flitteriness_scale);
	byteswap(value.flitteriness_speed);
	byteswap(value.flitteriness_leaves_phase);
	byteswap(value.tumble_scale);
	byteswap(value.rotation_scale);
	byteswap(value.starting_velocity);
	byteswap(value.air_friction_xy_and_z);
}

template<> void byteswap<blofeld::infinite::s_s_leaf_system_definition>(blofeld::infinite::s_s_leaf_system_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.marker_attach_name);
	byteswap(value.bitmap_sprite_plate);
	byteswap(value.emission_rate);
	byteswap(value.lifetime);
	byteswap(value.wind_min_max);
	byteswap(value.wind_scale);
	byteswap(value.time_scale);
	byteswap(value.fade_distance);
	byteswap(value.emissions_sphere_radius);
	byteswap(value.movement_cylinder_radius);
	byteswap(value.fade_in_time);
	byteswap(value.fade_out_time);
	byteswap(value.leaf_types_block);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuiscenelightsource>(blofeld::infinite::s_interfacecustomizationuiscenelightsource& value)
{
	byteswap(value.light_name);
	byteswap(value.light_position_offset);
	byteswap(value.facing);
	byteswap(value.color);
	byteswap(value.source_energy);
	byteswap(value.dimmer_value);
	byteswap(value.minimum_roughness);
	byteswap(value.fog_intensity);
	byteswap(value.near_attenuation);
	byteswap(value.far_attenuation);
	byteswap(value.inner_cone_angle);
	byteswap(value.outer_cone_angle);
	byteswap(value.shadow_near_clip_plane);
	byteswap(value.shadow_far_clip_plane);
	byteswap(value.shadow_bias_offset);
	byteswap(value.shadow_filter_width);
	byteswap(value.near_begin);
	byteswap(value.far_begin);
	byteswap(value.camera_near_distance_fade_end);
	byteswap(value.camera_near_distance_fade_start);
	byteswap(value.camera_distance_fade_start);
	byteswap(value.camera_distance_fade_end);
	byteswap(value.area_light_radius);
	byteswap(value.area_light_length);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuicubemapvolume>(blofeld::infinite::s_interfacecustomizationuicubemapvolume& value)
{
	byteswap(value.cubemap_name);
	byteswap(value.cubemap_position_offset);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuilightpreset>(blofeld::infinite::s_interfacecustomizationuilightpreset& value)
{
	byteswap(value.preset_name);
	byteswap(value.core_type);
	byteswap(value.item_type);
	byteswap(value.dimmer_transition_time);
	byteswap(value.lights_block);
	byteswap(value.cubemap_volume_block);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuilightscenepreset>(blofeld::infinite::s_interfacecustomizationuilightscenepreset& value)
{
	byteswap(value.scene_type);
	byteswap(value.light_presets_settings_block);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuilightpresetstag>(blofeld::infinite::s_interfacecustomizationuilightpresetstag& value)
{
	byteswap(value.anytag);
	byteswap(value.light_presets_settings_block);
	byteswap(value.light_scene_presets_settings_block);
}

template<> void byteswap<blofeld::infinite::s_lightvolumepropertyscalar>(blofeld::infinite::s_lightvolumepropertyscalar& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
	byteswap(value.runtime_m_constant_value);
	byteswap(value.runtime_m_flags);
}

template<> void byteswap<blofeld::infinite::s_lightvolumepropertycolor>(blofeld::infinite::s_lightvolumepropertycolor& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
	byteswap(value.runtime_m_constant_value);
	byteswap(value.runtime_m_flags);
}

template<> void byteswap<blofeld::infinite::s_lightvolumedefinition>(blofeld::infinite::s_lightvolumedefinition& value)
{
	byteswap(value.light_volume_name);
	byteswap(value.actual_material);
	byteswap(value.brightness_ratio);
	byteswap(value.flags);
	byteswap(value.camera_distance_range_override);
	byteswap(value.length);
	byteswap(value.offset);
	byteswap(value.profile_density);
	byteswap(value.profile_length);
	byteswap(value.profile_thickness);
	byteswap(value.profile_color_override_mode);
	byteswap(value.profile_color);
	byteswap(value.profile_alpha);
	byteswap(value.profile_intensity);
	byteswap(value.runtime_m_used_states);
	byteswap(value.runtime_m_max_profile_count);
	byteswap(value.runtime_m_gpu_data);
	byteswap(value.m_pipelinestates);
}

template<> void byteswap<blofeld::infinite::s_c_light_volume_system_definition>(blofeld::infinite::s_c_light_volume_system_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.light_volumes_block);
}

template<> void byteswap<blofeld::infinite::s_luareferencedtagcontainer>(blofeld::infinite::s_luareferencedtagcontainer& value)
{
	byteswap(value.tagreference);
}

template<> void byteswap<blofeld::infinite::s_luascripttagdefinition>(blofeld::infinite::s_luascripttagdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.luafilename);
	byteswap(value.luafiledata);
	byteswap(value.luafilenamestring);
	byteswap(value.referencedtags_block);
}

template<> void byteswap<blofeld::infinite::s_ingamemaplightreference>(blofeld::infinite::s_ingamemaplightreference& value)
{
	byteswap(value.reference);
}

template<> void byteswap<blofeld::infinite::s_ingamemaplightplacement>(blofeld::infinite::s_ingamemaplightplacement& value)
{
	byteswap(value.position);
	byteswap(value.direction);
	byteswap(value.up);
}

template<> void byteswap<blofeld::infinite::s_ingamemaprendertag>(blofeld::infinite::s_ingamemaprendertag& value)
{
	byteswap(value.anytag);
	byteswap(value.map_lights_block);
	byteswap(value.map_light_placements_block);
	byteswap(value.lightmap);
	byteswap(value.dynamic_world_state_globals);
	byteswap(value.camera_fx_settings);
	byteswap(value.material_variations);
	byteswap(value.sky_object);
	byteswap(value.sky_orientation);
	byteswap(value.ray_collision_object);
	byteswap(value.flags);
	byteswap(value.min_z_for_fade_out);
	byteswap(value.max_z_for_fade_out);
	byteswap(value.line_frequency);
	byteswap(value.explicit_shader_for_explicit_lighting_pass);
	byteswap(value.red_offset_in_pixels);
	byteswap(value.blue_offset_in_pixels);
	byteswap(value.center_weight);
}

template<> void byteswap<blofeld::infinite::s_ingamemapfunction>(blofeld::infinite::s_ingamemapfunction& value)
{
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_ingamemapanimationsettings>(blofeld::infinite::s_ingamemapanimationsettings& value)
{
	byteswap(value.verticaltranslationmode);
	byteswap(value.verticaltranslationduration);
	byteswap(value.verticaltranslationcooldownduration);
	byteswap(value.verticaltranslationfunction);
	byteswap(value.zrotationmode);
	byteswap(value.zrotationduration);
	byteswap(value.zrotationcooldownduration);
	byteswap(value.zrotationfunction);
	byteswap(value.scalemode);
	byteswap(value.scaleduration);
	byteswap(value.scalecooldownduration);
	byteswap(value.scalefunction);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapslodcollisionresolution>(blofeld::infinite::s_i343ingamemapslodcollisionresolution& value)
{
	byteswap(value.resolutionmode);
	byteswap(value.collisionnormalizedscreendistance);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapslodtier>(blofeld::infinite::s_i343ingamemapslodtier& value)
{
	byteswap(value.fulliconandlabelwithmodelfadestart);
	byteswap(value.fulliconandlabelfadestart);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapslodsettings>(blofeld::infinite::s_i343ingamemapslodsettings& value)
{
	byteswap(value.lodmode);
	byteswap(value.lodcollisionresolution);
	byteswap(value.spotlightradiusscale);
	byteswap(value.per_tier_settings_for_pois_block);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapsmarkercolor>(blofeld::infinite::s_i343ingamemapsmarkercolor& value)
{
	byteswap(value.markertype);
	byteswap(value.missiontype);
	byteswap(value.color);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapsmarkervisibilitysettings>(blofeld::infinite::s_i343ingamemapsmarkervisibilitysettings& value)
{
	byteswap(value.missiontype);
	byteswap(value.minimumzoom);
	byteswap(value.maximumzoom);
	byteswap(value.hittestrange);
	byteswap(value.poisnaphittestrangeminzoom);
	byteswap(value.poisnaphittestrangemaxzoom);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapsiconsettings>(blofeld::infinite::s_i343ingamemapsiconsettings& value)
{
	byteswap(value.fullicons);
	byteswap(value.smallicons);
	byteswap(value.detailicons);
	byteswap(value.highlightedoverlayicons);
	byteswap(value.outermissionlisticons);
	byteswap(value.innermissionlisticons);
	byteswap(value.markercolors_block);
	byteswap(value.markervisibilitysettings_block);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapscamerasettings>(blofeld::infinite::s_i343ingamemapscamerasettings& value)
{
	byteswap(value.flags);
	byteswap(value.defaulthittestrangeminzoom);
	byteswap(value.defaulthittestrangemaxzoom);
	byteswap(value.defaultpoisnaphittestrange);
	byteswap(value.poisnappingthreshold);
	byteswap(value.playericoncollisiondistance);
	byteswap(value.panningvelocitydeadzone);
	byteswap(value.zoomingvelocitydeadzone);
	byteswap(value.min_pan_x);
	byteswap(value.min_pan_y);
	byteswap(value.max_pan_x);
	byteswap(value.max_pan_y);
	byteswap(value.min_zoom);
	byteswap(value.max_zoom);
	byteswap(value.tilt_point);
	byteswap(value.tilt_width);
	byteswap(value.pan_accel_duration);
	byteswap(value.pan_decel_duration);
	byteswap(value.min_pan_speed);
	byteswap(value.max_pan_speed);
	byteswap(value.highlight_distance);
	byteswap(value.max_zoom_factor);
	byteswap(value.zoom_accel_duration);
	byteswap(value.zoom_decel_duration);
	byteswap(value.max_zoom_speed);
	byteswap(value.mission_pan_speed);
	byteswap(value.autopan_time_delay);
	byteswap(value.mission_list_autopan_duration);
	byteswap(value.mission_list_autopan_zoom);
	byteswap(value.autopan_slow_down_speed_ratio);
	byteswap(value.autopan_speed);
	byteswap(value.autopan_slow_down_range);
	byteswap(value.autopanner_bezier_curve_midpoint_height);
	byteswap(value.autopanner_bezier_curve_p1_height);
	byteswap(value.autopanner_bezier_curve_p3_height);
	byteswap(value.duration_for_centering_on_player);
	byteswap(value.min_zoom_spotlight_cone_scale);
	byteswap(value.max_zoom_spotlight_cone_scale);
	byteswap(value.spotlight_moving_speed);
	byteswap(value.initial_pitch);
	byteswap(value.initial_yaw);
	byteswap(value.initial_zoom);
	byteswap(value.pan_height);
	byteswap(value.initial_camera_x);
	byteswap(value.initial_camera_y);
	byteswap(value.initial_camera_z);
	byteswap(value.initial_camera_look_x);
	byteswap(value.initial_camera_look_y);
	byteswap(value.initial_camera_look_z);
	byteswap(value.camera_xy_axis_offset);
	byteswap(value.camera_field_of_view);
	byteswap(value.edge_pan_screen_margin_x);
	byteswap(value.edge_pan_screen_margin_y);
	byteswap(value.help_bar_height);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapsmarkersettings>(blofeld::infinite::s_i343ingamemapsmarkersettings& value)
{
	byteswap(value.markertype);
	byteswap(value.model);
	byteswap(value.bitmap);
	byteswap(value.bitmapcorrectivescale);
}

template<> void byteswap<blofeld::infinite::s_ingamemapdisplayassetdefinition>(blofeld::infinite::s_ingamemapdisplayassetdefinition& value)
{
	byteswap(value.name);
	byteswap(value.model);
	byteswap(value.rotation);
	byteswap(value.scale);
	byteswap(value.icon_offset);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapscollectiblesettings>(blofeld::infinite::s_i343ingamemapscollectiblesettings& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value.missiontype);
	byteswap(value.spriteindex);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapsregionpoint>(blofeld::infinite::s_i343ingamemapsregionpoint& value)
{
	byteswap(value.region_point);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapsregionpolygon>(blofeld::infinite::s_i343ingamemapsregionpolygon& value)
{
	byteswap(value.region_polygon_block);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapsregionsettings>(blofeld::infinite::s_i343ingamemapsregionsettings& value)
{
	byteswap(value.name);
	byteswap(value.region_polygons_block);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapsvignettesettings>(blofeld::infinite::s_i343ingamemapsvignettesettings& value)
{
	byteswap(value.color);
	byteswap(value.opacity);
	byteswap(value.innerradius);
	byteswap(value.outerradius);
}

template<> void byteswap<blofeld::infinite::s_ingamemapmodellookup>(blofeld::infinite::s_ingamemapmodellookup& value)
{
	byteswap(value.name);
	byteswap(value.model);
}

template<> void byteswap<blofeld::infinite::s_ingamemaptransitionsettings>(blofeld::infinite::s_ingamemaptransitionsettings& value)
{
	byteswap(value.introminloadtime);
	byteswap(value.intrototaltransitiontime);
	byteswap(value.outtromaptransitiontime);
	byteswap(value.outtrominunloadtime);
	byteswap(value.outtrogameplaytransitiontime);
}

template<> void byteswap<blofeld::infinite::s_gaktileindex>(blofeld::infinite::s_gaktileindex& value)
{
	byteswap(value.x);
	byteswap(value.y);
}

template<> void byteswap<blofeld::infinite::s_ingamemapgaksettings>(blofeld::infinite::s_ingamemapgaksettings& value)
{
	byteswap(value.gak_poi_spawn_frequency);
	byteswap(value.gak_poi_spawn_chance);
	byteswap(value.gak_max_poi_count);
	byteswap(value.gak_poi_num_types);
	byteswap(value.gak_poi_lifetime_min);
	byteswap(value.gak_poi_lifetime_max);
	byteswap(value.gak_poi_fade_out);
	byteswap(value.gak_tile_origin_x);
	byteswap(value.gak_tile_origin_y);
	byteswap(value.gak_tile_size_x);
	byteswap(value.gak_tile_size_y);
	byteswap(value.gak_tile_count_x);
	byteswap(value.gak_tile_count_y);
	byteswap(value.gak_tile_margin);
	byteswap(value.gak_invalid_tiles_block);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapszonesetsettings>(blofeld::infinite::s_i343ingamemapszonesetsettings& value)
{
	byteswap(value.zoneset_name);
	byteswap(value.point_of_interest_name);
}

template<> void byteswap<blofeld::infinite::s_i343ingamemapsplayerpositionoverridesettings>(blofeld::infinite::s_i343ingamemapsplayerpositionoverridesettings& value)
{
	byteswap(value.zone_set_settings_block);
}

template<> void byteswap<blofeld::infinite::s_ingamemapsettingstag>(blofeld::infinite::s_ingamemapsettingstag& value)
{
	byteswap(value.anytag);
	byteswap(value.map_lights_block);
	byteswap(value.map_light_placements_block);
	byteswap(value.lightmap);
	byteswap(value.dynamic_world_state_globals);
	byteswap(value.material_variations);
	byteswap(value.sky_object);
	byteswap(value.sky_orientation);
	byteswap(value.ray_collision_asset);
	byteswap(value.ray_collision_quad_tree);
	byteswap(value.flags);
	byteswap(value.min_z_for_fade_out);
	byteswap(value.max_z_for_fade_out);
	byteswap(value.line_frequency);
	byteswap(value.explicit_shader_for_explicit_lighting_pass);
	byteswap(value.red_offset_in_pixels);
	byteswap(value.blue_offset_in_pixels);
	byteswap(value.center_weight);
	byteswap(value.animatedmodeltypes);
	byteswap(value.mainpoimodeloffset);
	byteswap(value.mainpoimodelorientation);
	byteswap(value.mainpoimodelscale);
	byteswap(value.basepoimodel);
	byteswap(value.basepoimodeloffset);
	byteswap(value.basepoimodelorientation);
	byteswap(value.basepoimodelscale);
	byteswap(value.baseverticallinepoimodel);
	byteswap(value.baseverticallinepoimodeloffset);
	byteswap(value.baseverticallinepoimodelorientation);
	byteswap(value.baseverticallinepoimodelscale);
	byteswap(value.topverticallinepoimodel);
	byteswap(value.topverticallinepoimodeloffset);
	byteswap(value.topverticallinepoimodelorientation);
	byteswap(value.topverticallinepoimodelscale);
	byteswap(value.poi_animation);
	byteswap(value.lod_settings);
	byteswap(value.icon_settings);
	byteswap(value.camera_settings);
	byteswap(value.area_of_interest_settings_block);
	byteswap(value.async_loaded_display_assets_block);
	byteswap(value.collectible_settings_block);
	byteswap(value.regions_block);
	byteswap(value.vignette_settings);
	byteswap(value.model_dictionary_block);
	byteswap(value.transition_settings);
	byteswap(value.gak_settings);
	byteswap(value.player_position_override_settings);
}

template<> void byteswap<blofeld::infinite::s_materialstyleinfo>(blofeld::infinite::s_materialstyleinfo& value)
{
	byteswap(value.material_style);
	byteswap(value.region_name);
}

template<> void byteswap<blofeld::infinite::s_materialtag>(blofeld::infinite::s_materialtag& value)
{
	byteswap(value.anytag);
	byteswap(value.material_shader);
	byteswap(value.material_parameters_block);
	byteswap(value.postprocess_definition_block);
	byteswap(value.physics_material_name);
	byteswap(value.physics_material_name_2);
	byteswap(value.physics_material_name_3);
	byteswap(value.physics_material_name_4);
	byteswap(value.sort_offset);
	byteswap(value.alpha_blend_mode);
	byteswap(value.sort_layer);
	byteswap(value.flags);
	byteswap(value.render_flags);
	byteswap(value.taa_mask_threshold_start);
	byteswap(value.taa_mask_threshold_end);
	byteswap(value.style_info_block);
}

template<> void byteswap<blofeld::infinite::s_i343benchmarkbenchmarkdefinitionblock>(blofeld::infinite::s_i343benchmarkbenchmarkdefinitionblock& value)
{
	byteswap(value.benchmark_definition);
}

template<> void byteswap<blofeld::infinite::s_s_game_globals>(blofeld::infinite::s_s_game_globals& value)
{
	byteswap(value.anytag);
	byteswap(value.sound_globals);
	byteswap(value.ai_globals_ref);
	byteswap(value.navigation_globals_ref);
	byteswap(value.forge_globals);
	byteswap(value.game_engine_globals);
	byteswap(value.multiplayer_globals);
	byteswap(value.global_multiplayer_object_type_list);
	byteswap(value.grenades);
	byteswap(value.weapon_globals);
	byteswap(value.melee_globals);
	byteswap(value.game_medal_globals);
	byteswap(value.highlight_event_globals);
	byteswap(value.token_systems_globals);
	byteswap(value.airdrop_system_globals);
	byteswap(value.bitmap_usage_table);
	byteswap(value.rasterizer_globals_ref);
	byteswap(value.default_camera_fx_settings$2);
	byteswap(value.default_lighting_settings$2);
	byteswap(value.default_atmosphere_definition);
	byteswap(value.default_light_group);
	byteswap(value.default_cheap_light_group);
	byteswap(value.default_wind_settings$2);
	byteswap(value.collision_damage_effect);
	byteswap(value.collision_damage);
	byteswap(value.effect_globals);
	byteswap(value.collision_filter);
	byteswap(value.default_item_grounded_friction);
	byteswap(value.player_model_customization_globals);
	byteswap(value.loadout_globals);
	byteswap(value.game_performance_thortles_default);
	byteswap(value.speech_globals);
	byteswap(value.control_globals);
	byteswap(value.player_globals);
	byteswap(value.damage_globals);
	byteswap(value.loc_globals);
	byteswap(value.material_globals);
	byteswap(value.camera_globals);
	byteswap(value.difficulty_globals);
	byteswap(value.gameplay_object_globals);
	byteswap(value.composer_globals);
	byteswap(value.garbage_collection_globals);
	byteswap(value.soft_ceiling_globals);
	byteswap(value.color_globals);
	byteswap(value.skull_globals);
	byteswap(value.cheat_globals);
	byteswap(value.interface_globals);
	byteswap(value.skill_rank_globals);
	byteswap(value.campaign_globals);
	byteswap(value.spartan_tracking_globals);
	byteswap(value.lua_refactor_file);
	byteswap(value.lua_preloaded_standard_scripts_definition_file);
	byteswap(value.custom_games_ui_markup_scripts_definition_file);
	byteswap(value.outline_service_globals);
	byteswap(value.highlight_service_globals);
	byteswap(value.audio_threat_globals);
	byteswap(value.physics_globals);
	byteswap(value.action_system_globals);
	byteswap(value.bot_globals);
	byteswap(value.dws_globals);
	byteswap(value.cage_system_globals);
	byteswap(value.object_node_graph_globals);
	byteswap(value.preset_definitions_globals);
	byteswap(value.asset_category_globals);
	byteswap(value.global_benchmark_definition);
	byteswap(value.test_benchmark_definitions_block);
	byteswap(value.texture_group_globals);
	byteswap(value.fixture_curve_globals);
	byteswap(value.animation_globals);
	byteswap(value.emblem_tag);
	byteswap(value.chroma_animations_defintion);
	byteswap(value.narrative_globals);
	byteswap(value.subtitle_globals);
}

template<> void byteswap<blofeld::infinite::s_decoratorplacementdata>(blofeld::infinite::s_decoratorplacementdata& value)
{
	byteswap(value.decorator_asset);
	byteswap(value.max_density);
	byteswap(value.scale_range);
	byteswap(value.rotation_range);
	byteswap(value.orientation_alignment);
	byteswap(value.vector_mask_angle);
	byteswap(value.cull_distance_scale);
	byteswap(value.vector_mask_mode);
}

template<> void byteswap<blofeld::infinite::s_materialpreset>(blofeld::infinite::s_materialpreset& value)
{
	byteswap(value.anytag);
	byteswap(value.material_parameters_block);
	byteswap(value.decorator_placement_datas_block);
}

template<> void byteswap<blofeld::infinite::s_modeldissolveregiontimeoffset>(blofeld::infinite::s_modeldissolveregiontimeoffset& value)
{
	byteswap(value.region_name);
	byteswap(value.region_time_offset);
}

template<> void byteswap<blofeld::infinite::s_modeldissolvedefinition>(blofeld::infinite::s_modeldissolvedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.particle_spawn_position);
	byteswap(value.particle_spawn_random_radius);
	byteswap(value.cheap_particle_emitter);
	byteswap(value.cheap_particle_spawn_distance_threshold);
	byteswap(value.velocity_up);
	byteswap(value.velocity_toward_dissolve_point);
	byteswap(value.velocity_toward_dissolve_surface);
	byteswap(value.velocity_along_dissolve_surface);
	byteswap(value.velocity_random);
	byteswap(value.particle_forced_speed);
	byteswap(value.delay);
	byteswap(value.duration);
	byteswap(value.extra_duration);
	byteswap(value.particle_spawn_time_offset);
	byteswap(value.per_region_time_offset_block);
	byteswap(value.dissolve_point);
	byteswap(value.opposite_dissolve_point);
	byteswap(value.dissolve_surface);
	byteswap(value.bounding_sphere_center);
	byteswap(value.finish_effect);
	byteswap(value.actual_material);
	byteswap(value.time_offset_override_function);
	byteswap(value.marker_name_for_dissolve_center);
	byteswap(value.m_pipelinestates);
}

template<> void byteswap<blofeld::infinite::s_i343meleemeleeadditionaldamagetag>(blofeld::infinite::s_i343meleemeleeadditionaldamagetag& value)
{
	byteswap(value.anytag);
	byteswap(value.additional_damage_effect);
	byteswap(value.effect_on_hit);
}

template<> void byteswap<blofeld::infinite::s_s_melee_damage_parameters>(blofeld::infinite::s_s_melee_damage_parameters& value)
{
	byteswap(value.damage_pyramid_angles);
	byteswap(value.damage_pyramid_depth);
	byteswap(value.maximum_lunge_range);
	byteswap(value.damage_lunge_explosive_depth);
	byteswap(value.runtime_damage_lunge_explosive_fraction);
	byteswap(value.melee_damage);
	byteswap(value.melee_response);
	byteswap(value.lunge_melee_damage);
	byteswap(value.lunge_melee_response);
	byteswap(value.empty_melee_damage);
	byteswap(value.empty_melee_response);
	byteswap(value.clang_melee_damage);
	byteswap(value.clang_melee_response);
	byteswap(value.clang_melee_against_melee_weapon_damage);
	byteswap(value.clang_melee_against_melee_weapon_damage_response);
	byteswap(value.lunge_melee_explosive_damage);
	byteswap(value.melee_attack_effect);
	byteswap(value.biped_melee_hit_effect);
}

template<> void byteswap<blofeld::infinite::s_i343meleemeleeframeattachmenttag>(blofeld::infinite::s_i343meleemeleeframeattachmenttag& value)
{
	byteswap(value.anytag);
	byteswap(value.damage_parameters_block);
	byteswap(value.animation_set);
}

template<> void byteswap<blofeld::infinite::s_i343materialeffectsdefaultdistances>(blofeld::infinite::s_i343materialeffectsdefaultdistances& value)
{
	byteswap(value.visual_effect_distance);
	byteswap(value.sound_effect_distance);
}

template<> void byteswap<blofeld::infinite::s_i343materialeffectsglobalsdefinition>(blofeld::infinite::s_i343materialeffectsglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.default_max_distances_block);
}

template<> void byteswap<blofeld::infinite::s_i343meleetargetingdefinition>(blofeld::infinite::s_i343meleetargetingdefinition& value)
{
	byteswap(value.yaw_angles);
	byteswap(value.yaw_angles_lunging);
	byteswap(value.pitch_angles);
	byteswap(value.pitch_angles_lunging);
	byteswap(value.ground_pitch_down_max);
	byteswap(value.aim_bend_yaw_max_speed);
	byteswap(value.aim_bend_yaw_max);
	byteswap(value.aim_bend_yaw_pitch_speed);
	byteswap(value.aim_bend_yaw_pitch_up_max);
	byteswap(value.aim_bend_yaw_pitch_down_max);
}

template<> void byteswap<blofeld::infinite::s_i343meleephysicsdefinition>(blofeld::infinite::s_i343meleephysicsdefinition& value)
{
	byteswap(value.lunge_maximum_speed);
	byteswap(value.uber_lunge_maximum_speed);
	byteswap(value.lunge_acceleration_time);
	byteswap(value.lunge_deceleration_time);
}

template<> void byteswap<blofeld::infinite::s_i343meleemeleeglobalsdefinition>(blofeld::infinite::s_i343meleemeleeglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.melee_death_acceleration);
	byteswap(value.uber_melee_death_acceleration);
	byteswap(value.clang_simultaneous_death_vitality_threshold);
	byteswap(value.input_hold_time);
	byteswap(value.targeting);
	byteswap(value.physics);
	byteswap(value.default_damage_block);
}

template<> void byteswap<blofeld::infinite::s_render_model_permutation>(blofeld::infinite::s_render_model_permutation& value)
{
	byteswap(value.name);
	byteswap(value.mesh_index);
	byteswap(value.mesh_count);
	byteswap(value.clone_name);
}

template<> void byteswap<blofeld::infinite::s_render_model_region>(blofeld::infinite::s_render_model_region& value)
{
	byteswap(value.name);
	byteswap(value.permutations_block);
}

template<> void byteswap<blofeld::infinite::s_render_model_node>(blofeld::infinite::s_render_model_node& value)
{
	byteswap(value.name);
	byteswap(value.parent_node);
	byteswap(value.first_child_node);
	byteswap(value.next_sibling_node);
	byteswap(value.flags);
	byteswap(value.default_translation);
	byteswap(value.default_rotation);
	byteswap(value.inverse_forward);
	byteswap(value.inverse_left);
	byteswap(value.inverse_up);
	byteswap(value.inverse_position);
	byteswap(value.inverse_scale);
	byteswap(value.distance_from_parent);
	byteswap(value.procedure);
	byteswap(value.procedure_axis);
	byteswap(value.procedure_index);
	byteswap(value.procedure_node_a);
	byteswap(value.procedure_node_b);
	byteswap(value.procedure_var_1);
	byteswap(value.procedure_var_2);
	byteswap(value.procedure_neutral_offset);
}

template<> void byteswap<blofeld::infinite::s_i343modelbonephysicsdefinition>(blofeld::infinite::s_i343modelbonephysicsdefinition& value)
{
	byteswap(value.node);
	byteswap(value.spring_coefficient);
	byteswap(value.dampening_fraction);
	byteswap(value.max_angle);
}

template<> void byteswap<blofeld::infinite::s_render_model_marker>(blofeld::infinite::s_render_model_marker& value)
{
	byteswap(value.region_index);
	byteswap(value.permutation_index);
	byteswap(value.node_index);
	byteswap(value.flags);
	byteswap(value.translation);
	byteswap(value.rotation);
	byteswap(value.scale);
	byteswap(value.direction);
}

template<> void byteswap<blofeld::infinite::s_render_model_marker_group>(blofeld::infinite::s_render_model_marker_group& value)
{
	byteswap(value.name);
	byteswap(value.markers_block);
}

template<> void byteswap<blofeld::infinite::s_instancenodemapping>(blofeld::infinite::s_instancenodemapping& value)
{
	byteswap(value.instance_node_map_region_node_index);
}

template<> void byteswap<blofeld::infinite::s_defaultnodeorientations>(blofeld::infinite::s_defaultnodeorientations& value)
{
	byteswap(value.rotation);
	byteswap(value.translation);
	byteswap(value.scale);
}

template<> void byteswap<blofeld::infinite::s_rendermodelnodeindex>(blofeld::infinite::s_rendermodelnodeindex& value)
{
	byteswap(value.node_index);
}

template<> void byteswap<blofeld::infinite::s_rendermodelbonegroup>(blofeld::infinite::s_rendermodelbonegroup& value)
{
	byteswap(value.name);
	byteswap(value.bones_block);
}

template<> void byteswap<blofeld::infinite::s_clothmeshindex>(blofeld::infinite::s_clothmeshindex& value)
{
	byteswap(value.index);
}

template<> void byteswap<blofeld::infinite::s_rendermodelclothmesh>(blofeld::infinite::s_rendermodelclothmesh& value)
{
	byteswap(value.namehash);
	byteswap(value.meshindex_block);
	byteswap(value.meshlodindex);
	byteswap(value.flags);
	byteswap(value.numvertexcomponents);
	byteswap(value.vertexcount);
	byteswap(value.trianglecount);
	byteswap(value.geometry);
}

template<> void byteswap<blofeld::infinite::s_rendermodelclothdata>(blofeld::infinite::s_rendermodelclothdata& value)
{
	byteswap(value.regionindex);
	byteswap(value.meshindex_block);
	byteswap(value.havokdata);
}

template<> void byteswap<blofeld::infinite::s_materialpipelinestateinfo>(blofeld::infinite::s_materialpipelinestateinfo& value)
{
	byteswap(value.shader);
	byteswap(value.alpha_blend_mode);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_render_model_definition>(blofeld::infinite::s_render_model_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.version);
	byteswap(value.mesh_resource_packing_policy);
	byteswap(value.default_load_variant_policy);
	byteswap(value.runtime_import_info_checksum);
	byteswap(value.regions_block);
	byteswap(value.node_list_checksum);
	byteswap(value.nodes_block);
	byteswap(value.bone_settings_block);
	byteswap(value.marker_groups_block);
	byteswap(value.materials_block);
	byteswap(value.errors_block);
	byteswap(value.dont_draw_over_camera_cosine_angle);
	byteswap(value.render_geometry);
	byteswap(value.node_map_mapping_block);
	byteswap(value.runtime_node_orientations_block);
	byteswap(value.bone_groups_block);
	byteswap(value.cloth_meshes_block);
	byteswap(value.cloth_datas_block);
	byteswap(value.parent_model);
	byteswap(value.materialpipelinestateinfos_block);
	byteswap(value.m_instancegrouppipelinestatecache);
}

template<> void byteswap<blofeld::infinite::s_s_multiplayer_object_type>(blofeld::infinite::s_s_multiplayer_object_type& value)
{
	byteswap(value.name);
	byteswap(value.object);
}

template<> void byteswap<blofeld::infinite::s_s_multiplayer_object_collection_entry>(blofeld::infinite::s_s_multiplayer_object_collection_entry& value)
{
	byteswap(value.object_type);
	byteswap(value.random_weight);
}

template<> void byteswap<blofeld::infinite::s_s_multiplayer_object_type_list>(blofeld::infinite::s_s_multiplayer_object_type_list& value)
{
	byteswap(value.anytag);
	byteswap(value.object_types_block);
	byteswap(value.weapons_block);
	byteswap(value.vehicles_block);
	byteswap(value.grenades_block);
	byteswap(value.equipment_block);
	byteswap(value.random_weapon_menu_sprite_frame);
	byteswap(value.random_equipment_menu_sprite_frame);
	byteswap(value.random_weapon_icon_string_id);
	byteswap(value.random_equipment_icon_string_id);
}

template<> void byteswap<blofeld::infinite::s_modelmarkerblockwithhiddenvisualregion>(blofeld::infinite::s_modelmarkerblockwithhiddenvisualregion& value)
{
	byteswap(value.visual_region_name);
	byteswap(value.name);
	byteswap(value.parent);
	byteswap(value.position);
	byteswap(value.rotation);
	byteswap(value.scale);
	byteswap(value.direction);
}

template<> void byteswap<blofeld::infinite::s_markergroupblockwithhiddenvisualregion>(blofeld::infinite::s_markergroupblockwithhiddenvisualregion& value)
{
	byteswap(value.group);
	byteswap(value.markers_block);
}

template<> void byteswap<blofeld::infinite::s_hintmarkerblockwithhiddenvisualregion>(blofeld::infinite::s_hintmarkerblockwithhiddenvisualregion& value)
{
	byteswap(value.visual_region_name);
	byteswap(value.name);
	byteswap(value.parent);
	byteswap(value.position);
	byteswap(value.rotation);
	byteswap(value.scale);
	byteswap(value.length);
}

template<> void byteswap<blofeld::infinite::s_hintmarkergroupblockwithhiddenvisualregion>(blofeld::infinite::s_hintmarkergroupblockwithhiddenvisualregion& value)
{
	byteswap(value.hint_type);
	byteswap(value.hint_markers_block);
}

template<> void byteswap<blofeld::infinite::s_pathfindingmarkerblock>(blofeld::infinite::s_pathfindingmarkerblock& value)
{
	byteswap(value.name);
	byteswap(value.parent);
	byteswap(value.position);
	byteswap(value.radius);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_targetmarkerblockwithhiddenvisualregion>(blofeld::infinite::s_targetmarkerblockwithhiddenvisualregion& value)
{
	byteswap(value.visual_region_name);
	byteswap(value.name);
	byteswap(value.parent);
	byteswap(value.position);
	byteswap(value.radius);
}

template<> void byteswap<blofeld::infinite::s_targetmarkergroupblockwithhiddenvisualregion>(blofeld::infinite::s_targetmarkergroupblockwithhiddenvisualregion& value)
{
	byteswap(value.group);
	byteswap(value.target_markers_block);
}

template<> void byteswap<blofeld::infinite::s_markertag>(blofeld::infinite::s_markertag& value)
{
	byteswap(value.anytag);
	byteswap(value.marker_groups_block);
	byteswap(value.hint_marker_groups_block);
	byteswap(value.pathfinding_markers_block);
	byteswap(value.target_marker_groups_block);
}

template<> void byteswap<blofeld::infinite::s_i343unitsmotiontrackerattachmentvisibilityoverrides>(blofeld::infinite::s_i343unitsmotiontrackerattachmentvisibilityoverrides& value)
{
	byteswap(value.visibilityflags);
	byteswap(value.sector_visibility_yaw_threshold);
	byteswap(value.blip_visibility_yaw_threshold);
}

template<> void byteswap<blofeld::infinite::s_i343unitsmotiontrackerattachmentdefinition>(blofeld::infinite::s_i343unitsmotiontrackerattachmentdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.visibility_overrides_block);
}

template<> void byteswap<blofeld::infinite::s_musketeerdefinition>(blofeld::infinite::s_musketeerdefinition& value)
{
	byteswap(value.character);
}

template<> void byteswap<blofeld::infinite::s_i343musketeerdifficultytuningset>(blofeld::infinite::s_i343musketeerdifficultytuningset& value)
{
	byteswap(value.type);
	byteswap(value.scale_enemy_damage);
	byteswap(value.min_enemy_damage);
	byteswap(value.scale_enemy_vitality);
	byteswap(value.min_enemy_vitality);
	byteswap(value.scale_enemy_shield);
	byteswap(value.min_enemy_shield);
	byteswap(value.scale_enemy_recharge);
	byteswap(value.min_enemy_recharge);
	byteswap(value.scale_friend_damage);
	byteswap(value.min_friend_damage);
	byteswap(value.scale_friend_vitality);
	byteswap(value.min_friend_vitality);
	byteswap(value.scale_friend_shield);
	byteswap(value.min_friend_shield);
	byteswap(value.scale_friend_recharge);
	byteswap(value.min_friend_recharge);
	byteswap(value.scale_rate_of_fire);
	byteswap(value.min_rate_of_fire);
	byteswap(value.scale_projectile_error);
	byteswap(value.min_projectile_error);
	byteswap(value.scale_burst_error);
	byteswap(value.min_burst_error);
	byteswap(value.scale_new_target_delay);
	byteswap(value.min_new_target_delay);
	byteswap(value.scale_burst_separation);
	byteswap(value.min_burst_separation);
	byteswap(value.scale_target_tracking);
	byteswap(value.min_target_tracking);
	byteswap(value.scale_target_leading);
	byteswap(value.min_target_leading);
	byteswap(value.scale_overcharge_chance);
	byteswap(value.min_overcharge_chance);
	byteswap(value.scale_special_fire_delay);
	byteswap(value.min_special_fire_delay);
	byteswap(value.scale_guidance_vs_player);
	byteswap(value.min_guidance_vs_player);
	byteswap(value.scale_melee_delay_base);
	byteswap(value.min_melee_delay_base);
	byteswap(value.scale_melee_delay_scale);
	byteswap(value.min_melee_delay_scale);
	byteswap(value.scale_grenade_chance_scale);
	byteswap(value.min_grenade_chance_scale);
	byteswap(value.scale_grenade_timer_scale);
	byteswap(value.min_grenade_timer_scale);
	byteswap(value.scale_grenade_detonation_timer_scale);
	byteswap(value.min_grenade_detonation_timer_scale);
	byteswap(value.scale_grenade_arming_timer_scale);
	byteswap(value.min_grenade_arming_timer_scale);
	byteswap(value.scale_grenade_velocity_scale);
	byteswap(value.min_grenade_velocity_scale);
	byteswap(value.scale_major_upgrade_normal);
	byteswap(value.min_major_upgrade_normal);
	byteswap(value.scale_major_upgrade_few);
	byteswap(value.min_major_upgrade_few);
	byteswap(value.scale_major_upgrade_many);
	byteswap(value.min_major_upgrade_many);
	byteswap(value.scale_player_vehicle_ram_chance);
	byteswap(value.min_player_vehicle_ram_chance);
	byteswap(value.scale_trick_dodge_chance_scale);
	byteswap(value.min_trick_dodge_chance_scale);
	byteswap(value.scale_vehicle_boarding_chance);
	byteswap(value.min_vehicle_boarding_chance);
	byteswap(value.scale_hide_time);
	byteswap(value.min_hide_time);
	byteswap(value.scale_shield_fraction_hide);
	byteswap(value.min_shield_fraction_hide);
	byteswap(value.scale_cover_vitality_threshold);
	byteswap(value.min_cover_vitality_threshold);
	byteswap(value.scale_bunker_open_duration);
	byteswap(value.min_bunker_open_duration);
	byteswap(value.scale_bunker_closed_duration);
	byteswap(value.min_bunker_closed_duration);
	byteswap(value.scale_max_attackers);
	byteswap(value.min_max_attackers);
	byteswap(value.scale_max_high_tokens);
	byteswap(value.min_max_high_tokens);
	byteswap(value.scale_max_low_tokens);
	byteswap(value.min_max_low_tokens);
	byteswap(value.scale_max_engagement_tokens);
	byteswap(value.min_max_engagement_tokens);
	byteswap(value.scale_max_grenade_tokens);
	byteswap(value.min_max_grenade_tokens);
	byteswap(value.scale_grenade_token_cooldown);
	byteswap(value.min_grenade_token_cooldown);
	byteswap(value.scale_max_effectiveness_tokens);
	byteswap(value.min_max_effectiveness_tokens);
	byteswap(value.scale_weapon_fidget_chance_per_second);
	byteswap(value.min_weapon_fidget_chance_per_second);
	byteswap(value.scale_damage_received_from_enemy_ai);
	byteswap(value.min_damage_received_from_enemy_ai);
}

template<> void byteswap<blofeld::infinite::s_i343musketeerdifficultytunings>(blofeld::infinite::s_i343musketeerdifficultytunings& value)
{
	byteswap(value.tuning_sets_block);
	byteswap(value.minimum_value_for_starting_accuracy);
	byteswap(value.minimum_value_for_ending_accuracy);
}

template<> void byteswap<blofeld::infinite::s_musketeerteamdefinition>(blofeld::infinite::s_musketeerteamdefinition& value)
{
	byteswap(value.musketeer_block);
	byteswap(value.difficulty_tunings_block);
}

template<> void byteswap<blofeld::infinite::s_musketeertoedefinition>(blofeld::infinite::s_musketeertoedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.musketeer_teams_block);
}

template<> void byteswap<blofeld::infinite::s_teamdefinition>(blofeld::infinite::s_teamdefinition& value)
{
	byteswap(value.name);
	byteswap(value.primary_color);
	byteswap(value.secondary_color);
	byteswap(value.themename);
	byteswap(value.emblemshadername);
	byteswap(value.coatingname);
	byteswap(value.markername);
}

template<> void byteswap<blofeld::infinite::s_s_multiplayer_universal_globals_definition>(blofeld::infinite::s_s_multiplayer_universal_globals_definition& value)
{
	byteswap(value.teams_block);
	byteswap(value.player_starting_profile_block);
	byteswap(value.random_player_names_v2);
	byteswap(value.team_names_v2);
	byteswap(value.disposition_labels_v2);
	byteswap(value.random_bot_names_v2);
	byteswap(value.mvar_scripts_compile_mode);
}

template<> void byteswap<blofeld::infinite::s_soundblock>(blofeld::infinite::s_soundblock& value)
{
	byteswap(value.sound);
}

template<> void byteswap<blofeld::infinite::s_loopingsoundblock>(blofeld::infinite::s_loopingsoundblock& value)
{
	byteswap(value.looping_sound);
}

template<> void byteswap<blofeld::infinite::s_s_multiplayer_constants>(blofeld::infinite::s_s_multiplayer_constants& value)
{
	byteswap(value.default_spawn_settings);
	byteswap(value.teleporter_recharge_time);
	byteswap(value.sandbox_effect);
	byteswap(value.blocked_teleporter_string);
	byteswap(value.voluntary_respawn_control_instructions);
	byteswap(value.spawn_allowed_default_respawn);
	byteswap(value.spawn_at_player_allowed_looking_at_self);
	byteswap(value.spawn_at_player_allowed_looking_at_target);
	byteswap(value.spawn_at_player_allowed_looking_at_potential_target);
	byteswap(value.spawn_at_territory_allowed_looking_at_target);
	byteswap(value.spawn_at_territory_allowed_looking_at_potential_target);
	byteswap(value.you_are_out_of_lives);
	byteswap(value.invalid_spawn_target_selected);
	byteswap(value.targetted_player_enemies_nearby);
	byteswap(value.targetted_player_unfriendly_team);
	byteswap(value.targetted_player_dead);
	byteswap(value.targetted_player_in_combat);
	byteswap(value.targetted_player_too_far_from_owned_flag);
	byteswap(value.no_available_netpoints);
	byteswap(value.targetted_netpoint_contested);
}

template<> void byteswap<blofeld::infinite::s_s_multiplayer_runtime_globals_definition>(blofeld::infinite::s_s_multiplayer_runtime_globals_definition& value)
{
	byteswap(value.editor_helper);
	byteswap(value.sounds_block);
	byteswap(value.looping_sounds_block);
	byteswap(value.multiplayer_constants_block);
	byteswap(value.hill_shader);
	byteswap(value.spline_shader);
	byteswap(value.default_biped_simulation_interpolation);
	byteswap(value.default_vehicle_simulation_interpolation);
	byteswap(value.default_crate_simulation_interpolation);
	byteswap(value.default_item_simulation_interpolation);
	byteswap(value.default_projectile_simulation_interpolation);
	byteswap(value.default_object_simulation_interpolation);
	byteswap(value.m_hillpipelinestate);
	byteswap(value.m_splinepipelinestate);
	byteswap(value.supply_lines_system_globals);
	byteswap(value.personal_ai_globals);
	byteswap(value.spotting_service_globals);
	byteswap(value.unarmed_weapon_reference);
}

template<> void byteswap<blofeld::infinite::s_s_multiplayer_globals_definition>(blofeld::infinite::s_s_multiplayer_globals_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.universal_block);
	byteswap(value.runtime_block);
}

template<> void byteswap<blofeld::infinite::s_musicactionblockdefinition>(blofeld::infinite::s_musicactionblockdefinition& value)
{
	byteswap(value.music_action);
	byteswap(value.name);
	byteswap(value.event_or_group_name_hash);
	byteswap(value.group_value);
	byteswap(value.value);
	byteswap(value.delay_time);
}

template<> void byteswap<blofeld::infinite::s_musiccontroldefinition>(blofeld::infinite::s_musiccontroldefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.music_action_list_block);
	byteswap(value.event_priority);
	byteswap(value.force_damage_listener);
	byteswap(value.damage_listener_flags);
	byteswap(value.damage_threshold);
	byteswap(value.enemy_tracking_proximity);
	byteswap(value.enable_comabat_intensities);
	byteswap(value.low_combat_threshold);
	byteswap(value.medium_combat_threshold);
	byteswap(value.high_combat_threshold);
	byteswap(value.transition_up_slew);
	byteswap(value.transition_down_slew);
	byteswap(value.tracking_weighted_average_slew_time);
	byteswap(value.sound_bank);
}

template<> void byteswap<blofeld::infinite::s_materialswatchentry>(blofeld::infinite::s_materialswatchentry& value)
{
	byteswap(value.name);
	byteswap(value.swatch);
	byteswap(value.color);
	byteswap(value.roughnessoverride);
	byteswap(value.emissiveintensity);
	byteswap(value.emissiveamount);
	byteswap(value.notes);
	byteswap(value.groupname);
}

template<> void byteswap<blofeld::infinite::s_materialpalettetag>(blofeld::infinite::s_materialpalettetag& value)
{
	byteswap(value.anytag);
	byteswap(value.swatches_block);
}

template<> void byteswap<blofeld::infinite::s_materialcolorvariants>(blofeld::infinite::s_materialcolorvariants& value)
{
	byteswap(value.name);
	byteswap(value.gradient_top_color);
	byteswap(value.gradient_mid_color);
	byteswap(value.gradient_bottom_color);
	byteswap(value.notes);
	byteswap(value.groupname);
}

template<> void byteswap<blofeld::infinite::s_materialswatchtag>(blofeld::infinite::s_materialswatchtag& value)
{
	byteswap(value.anytag);
	byteswap(value.colorandroughnesstexturetransform);
	byteswap(value.normaltexturetransform);
	byteswap(value.color_gradient_map);
	byteswap(value.roughness_white);
	byteswap(value.roughness_black);
	byteswap(value.normal_detail_map);
	byteswap(value.metallic);
	byteswap(value.ior);
	byteswap(value.albedo_tint_spec);
	byteswap(value.sss_strength);
	byteswap(value.scratch_color);
	byteswap(value.scratch_brightness);
	byteswap(value.scratch_roughness);
	byteswap(value.scratch_metallic);
	byteswap(value.scratch_ior);
	byteswap(value.scratch_albedo_tint_spec);
	byteswap(value.sss_intensity);
	byteswap(value.color_variants_block);
}

template<> void byteswap<blofeld::infinite::s_materialregion>(blofeld::infinite::s_materialregion& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_coatingmaterialsetreference>(blofeld::infinite::s_coatingmaterialsetreference& value)
{
	byteswap(value.coatingmaterialset);
}

template<> void byteswap<blofeld::infinite::s_materiallayer>(blofeld::infinite::s_materiallayer& value)
{
	byteswap(value.name);
	byteswap(value.hero_reveal);
	byteswap(value.color_blend);
	byteswap(value.normal_blend);
	byteswap(value.ignore_texel_density_scalar);
	byteswap(value.forge_color_top);
	byteswap(value.forge_color_mid);
	byteswap(value.forge_color_bottom);
	byteswap(value.forge_color_intensity);
	byteswap(value.forge_layer_opacity);
	byteswap(value.forge_max_roughness);
	byteswap(value.forge_override_metallic);
	byteswap(value.forge_metallic);
}

template<> void byteswap<blofeld::infinite::s_materialstyleregion>(blofeld::infinite::s_materialstyleregion& value)
{
	byteswap(value.name);
	byteswap(value.coating_material_set);
	byteswap(value.layers_block);
	byteswap(value.layers_flags);
	byteswap(value.layers_vector1);
	byteswap(value.layers_vector2);
}

template<> void byteswap<blofeld::infinite::s_materialstyle>(blofeld::infinite::s_materialstyle& value)
{
	byteswap(value.name);
	byteswap(value.palette);
	byteswap(value.global_damage);
	byteswap(value.hero_damage);
	byteswap(value.global_emissive);
	byteswap(value.emissive_amount);
	byteswap(value.scratch_amount);
	byteswap(value.grime_type);
	byteswap(value.grime_amount);
	byteswap(value.regions_block);
	byteswap(value.regions_flags);
	byteswap(value.regions_vector1);
	byteswap(value.regions_vector2);
}

template<> void byteswap<blofeld::infinite::s_preloadswatchentry>(blofeld::infinite::s_preloadswatchentry& value)
{
	byteswap(value.swatch);
}

template<> void byteswap<blofeld::infinite::s_materialstylestag>(blofeld::infinite::s_materialstylestag& value)
{
	byteswap(value.anytag);
	byteswap(value.regions_block);
	byteswap(value.regions_flags);
	byteswap(value.regions_vector1);
	byteswap(value.regions_vector2);
	byteswap(value.coatingmaterialsets_block);
	byteswap(value.coatingmaterialsets_flags);
	byteswap(value.coatingmaterialsets_vector1);
	byteswap(value.coatingmaterialsets_vector2);
	byteswap(value.style_block);
	byteswap(value.style_flags);
	byteswap(value.style_vector1);
	byteswap(value.style_vector2);
	byteswap(value.defaultlookindex);
	byteswap(value.visorswatch);
	byteswap(value.preload_swatch_options);
	byteswap(value.preloaded_swatches_block);
}

template<> void byteswap<blofeld::infinite::s_materialvisorpatternreference>(blofeld::infinite::s_materialvisorpatternreference& value)
{
	byteswap(value.name);
	byteswap(value.visorpattern);
}

template<> void byteswap<blofeld::infinite::s_materialvisorswatchtag>(blofeld::infinite::s_materialvisorswatchtag& value)
{
	byteswap(value.anytag);
	byteswap(value.pattern_variants_block);
	byteswap(value.color_variants_block);
}

template<> void byteswap<blofeld::infinite::s_navigationglobalsdata>(blofeld::infinite::s_navigationglobalsdata& value)
{
	byteswap(value.clearance_bucket_radius___small);
	byteswap(value.clearance_bucket_radius___medium);
	byteswap(value.clearance_bucket_radius___large);
	byteswap(value.hoist_path_cost);
	byteswap(value.smash_path_cost);
	byteswap(value.destroy_path_cost);
}

template<> void byteswap<blofeld::infinite::s_navigationglobalsdefinition>(blofeld::infinite::s_navigationglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.data_block);
}

template<> void byteswap<blofeld::infinite::s_i343narrativenarrativefirsttofirsttransitionpreset>(blofeld::infinite::s_i343narrativenarrativefirsttofirsttransitionpreset& value)
{
	byteswap(value.name);
	byteswap(value.camera_blend_in_time);
	byteswap(value.camera_blend_in_curve);
	byteswap(value.camera_blend_out_time);
	byteswap(value.camera_blend_out_curve);
	byteswap(value.transition_data);
}

template<> void byteswap<blofeld::infinite::s_i343narrativenarrativeglobalstag>(blofeld::infinite::s_i343narrativenarrativeglobalstag& value)
{
	byteswap(value.anytag);
	byteswap(value.first_to_first_transitions_block);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointspritekeyframe>(blofeld::infinite::s_interfacenavpointspritekeyframe& value)
{
	byteswap(value.flags);
	byteswap(value.sequenceindex);
	byteswap(value.width_and_height);
	byteswap(value.color);
	byteswap(value.alpha);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointtwocolorkeyframe>(blofeld::infinite::s_interfacenavpointtwocolorkeyframe& value)
{
	byteswap(value.flags);
	byteswap(value.width_and_height);
	byteswap(value.left_color);
	byteswap(value.right_color);
	byteswap(value.alpha);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointkeyframe>(blofeld::infinite::s_interfacenavpointkeyframe& value)
{
	byteswap(value.flags);
	byteswap(value.width_and_height);
	byteswap(value.color);
	byteswap(value.alpha);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointnavpointanimationdefinition>(blofeld::infinite::s_interfacenavpointnavpointanimationdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.loop_type);
	byteswap(value.total_time_animation_runs_for);
	byteswap(value.delay_before_looping);
	byteswap(value.progress_time_function);
	byteswap(value.center_sprite_bg$2);
	byteswap(value.center_sprite_fg$2);
	byteswap(value.center_radial_progress_bar$2);
	byteswap(value.top_sprite$2);
	byteswap(value.top_center_sprite$2);
	byteswap(value.top_label$2);
	byteswap(value.right_progress_bar$2);
	byteswap(value.right_progress_bar_2$2);
	byteswap(value.right_label$2);
	byteswap(value.right_timer$2);
	byteswap(value.left_timer$2);
	byteswap(value.yaw_sprite$2);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointgenericlayout>(blofeld::infinite::s_interfacenavpointgenericlayout& value)
{
	byteswap(value.width_and_height);
	byteswap(value.alpha);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointrotatedspritelayout>(blofeld::infinite::s_interfacenavpointrotatedspritelayout& value)
{
	byteswap(value.width_and_height);
	byteswap(value.alpha);
	byteswap(value.pivot_offset);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointnavpointlayoutdefinition>(blofeld::infinite::s_interfacenavpointnavpointlayoutdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.morph_fraction);
	byteswap(value.anchor_offset);
	byteswap(value.center_box_width_height);
	byteswap(value.center_sprite_bg$2);
	byteswap(value.center_sprite_fg$2);
	byteswap(value.center_radial_progress_bar$2);
	byteswap(value.top_sprite$2);
	byteswap(value.top_center_sprite$2);
	byteswap(value.top_label$2);
	byteswap(value.right_progress_bar$2);
	byteswap(value.right_progress_bar_2$2);
	byteswap(value.right_label$2);
	byteswap(value.right_timer$2);
	byteswap(value.left_timer$2);
	byteswap(value.yaw_sprite$2);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointspriteparameterstag>(blofeld::infinite::s_interfacenavpointspriteparameterstag& value)
{
	byteswap(value.color);
	byteswap(value.sequence_index);
	byteswap(value.flipbook_loop_type);
	byteswap(value.flipbook_delay_before_looping);
	byteswap(value.drawing_flags);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointradialprogressbarparameterstag>(blofeld::infinite::s_interfacenavpointradialprogressbarparameterstag& value)
{
	byteswap(value.left_color);
	byteswap(value.right_color);
	byteswap(value.sequenceindex);
	byteswap(value.fraction);
	byteswap(value.drawing_flags);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointlabelparameterstag>(blofeld::infinite::s_interfacenavpointlabelparameterstag& value)
{
	byteswap(value.color);
	byteswap(value.label);
	byteswap(value.drawing_flags);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointprogressbarparameterstag>(blofeld::infinite::s_interfacenavpointprogressbarparameterstag& value)
{
	byteswap(value.left_color);
	byteswap(value.right_color);
	byteswap(value.fraction);
	byteswap(value.drawing_flags);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointnumericparameterstag>(blofeld::infinite::s_interfacenavpointnumericparameterstag& value)
{
	byteswap(value.color);
	byteswap(value.number_format);
	byteswap(value.number);
	byteswap(value.drawing_flags);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointrotatedspriteparameterstag>(blofeld::infinite::s_interfacenavpointrotatedspriteparameterstag& value)
{
	byteswap(value.color);
	byteswap(value.sequence_index);
	byteswap(value.drawing_flags);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointanimationparameterstag>(blofeld::infinite::s_interfacenavpointanimationparameterstag& value)
{
	byteswap(value.animation_type);
	byteswap(value.drawing_flags);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointnavpointparameterstagdefinition>(blofeld::infinite::s_interfacenavpointnavpointparameterstagdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.navpoint_tag);
	byteswap(value.navpoint_flags);
	byteswap(value.center_sprite_bg$2);
	byteswap(value.center_sprite_fg$2);
	byteswap(value.center_radial_progress_bar$2);
	byteswap(value.top_sprite$2);
	byteswap(value.top_center_sprite$2);
	byteswap(value.top_label$2);
	byteswap(value.right_progress_bar$2);
	byteswap(value.right_progress_bar_2$2);
	byteswap(value.right_label$2);
	byteswap(value.right_timer$2);
	byteswap(value.left_timer$2);
	byteswap(value.yaw_sprite$2);
	byteswap(value.animation$2);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentgraphreference>(blofeld::infinite::s_nodegraphcontentgraphreference& value)
{
	byteswap(value.graph_reference);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontenttagreferenceingraph>(blofeld::infinite::s_nodegraphcontenttagreferenceingraph& value)
{
	byteswap(value.tag_reference);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentnodegraphcontenttag>(blofeld::infinite::s_nodegraphcontentnodegraphcontenttag& value)
{
	byteswap(value.anytag);
	byteswap(value.graphcontent);
	byteswap(value.graph_references_block);
	byteswap(value.tag_references_block);
	byteswap(value.graph_export_status);
}

template<> void byteswap<blofeld::infinite::s_interfacenodegraphtransitiondefinition>(blofeld::infinite::s_interfacenodegraphtransitiondefinition& value)
{
	byteswap(value.event);
	byteswap(value.target_node);
	byteswap(value.out_animation_name);
	byteswap(value.in_animation_name);
	byteswap(value.flags);
	byteswap(value.editor_from_angle);
	byteswap(value.editor_to_angle);
	byteswap(value.editor_bezier_from_x);
	byteswap(value.editor_bezier_from_y);
	byteswap(value.editor_bezier_to_x);
	byteswap(value.editor_bezier_to_y);
	byteswap(value.editor_caption_x);
	byteswap(value.editor_caption_y);
}

template<> void byteswap<blofeld::infinite::s_interfacenodegraphnodegraphstackreferencedefinition>(blofeld::infinite::s_interfacenodegraphnodegraphstackreferencedefinition& value)
{
	byteswap(value.child_stack_reference);
}

template<> void byteswap<blofeld::infinite::s_interfacenodegraphnodedefinition>(blofeld::infinite::s_interfacenodegraphnodedefinition& value)
{
	byteswap(value.name);
	byteswap(value.placement_node_name);
	byteswap(value.transitions_block);
	byteswap(value.screen_wrapper);
	byteswap(value.screen_reference);
	byteswap(value.fui_screen_reference);
	byteswap(value.uri_name);
	byteswap(value.slams_node_type);
	byteswap(value.loading_mode);
	byteswap(value.child_stacks_block);
	byteswap(value.state_flags);
	byteswap(value.editor_pos_x);
	byteswap(value.editor_pos_y);
	byteswap(value.editor_flags);
	byteswap(value.editor_shape);
}

template<> void byteswap<blofeld::infinite::s_interfacenodegraphnodegraphdefinition>(blofeld::infinite::s_interfacenodegraphnodegraphdefinition& value)
{
	byteswap(value.name);
	byteswap(value.initial_node);
	byteswap(value.nodes_block);
}

template<> void byteswap<blofeld::infinite::s_interfacenodegraphnodegraphstackdefinition>(blofeld::infinite::s_interfacenodegraphnodegraphstackdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.transform_method);
	byteswap(value.projection_method);
	byteswap(value.render_mode);
	byteswap(value.markername);
	byteswap(value.scale);
	byteswap(value.loading_mode);
	byteswap(value.node_graphs_block);
}

template<> void byteswap<blofeld::infinite::s_i343narrativemalleablepropertydef>(blofeld::infinite::s_i343narrativemalleablepropertydef& value)
{
	byteswap(value.property_name);
	byteswap(value.type);
	byteswap(value.activate_curve_name);
	byteswap(value.deactivate_curve_name);
}

template<> void byteswap<blofeld::infinite::s_i343narrativecurvedmalleablepropertiesdef>(blofeld::infinite::s_i343narrativecurvedmalleablepropertiesdef& value)
{
	byteswap(value.curve_definition);
	byteswap(value.malleable_properties_block);
}

template<> void byteswap<blofeld::infinite::s_i343narrativemalleablepropertydefinitiontag>(blofeld::infinite::s_i343narrativemalleablepropertydefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.modifications);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentnarrativenodegraphcontenttag>(blofeld::infinite::s_nodegraphcontentnarrativenodegraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_interfacenarrationnarrationphonemedefinition>(blofeld::infinite::s_interfacenarrationnarrationphonemedefinition& value)
{
	byteswap(value.string_to_find);
	byteswap(value.string_to_remove);
	byteswap(value.string_to_add);
	byteswap(value.phoneme_type);
}

template<> void byteswap<blofeld::infinite::s_interfacenarrationnarrationphonemesgroup>(blofeld::infinite::s_interfacenarrationnarrationphonemesgroup& value)
{
	byteswap(value.anytag);
	byteswap(value.narration_phonemes_block);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointcolortracktag>(blofeld::infinite::s_interfacenavpointcolortracktag& value)
{
	byteswap(value.track_name);
	byteswap(value.function);
	byteswap(value.destination_value);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointfloattracktag>(blofeld::infinite::s_interfacenavpointfloattracktag& value)
{
	byteswap(value.track_name);
	byteswap(value.function);
	byteswap(value.destination_value);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointimagetracktag>(blofeld::infinite::s_interfacenavpointimagetracktag& value)
{
	byteswap(value.track_name);
	byteswap(value.destination_frame_index);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointflipbooktracktag>(blofeld::infinite::s_interfacenavpointflipbooktracktag& value)
{
	byteswap(value.track_name);
	byteswap(value.speed);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointstringidtracktag>(blofeld::infinite::s_interfacenavpointstringidtracktag& value)
{
	byteswap(value.track_name);
	byteswap(value.destination_stringid);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointanimationtag>(blofeld::infinite::s_interfacenavpointanimationtag& value)
{
	byteswap(value.animation_name);
	byteswap(value.template_animation_group);
	byteswap(value.template_animation_name);
	byteswap(value.duration);
	byteswap(value.loop_type);
	byteswap(value.delay_before_looping);
	byteswap(value.color_tracks_block);
	byteswap(value.float_tracks_block);
	byteswap(value.image_tracks_block);
	byteswap(value.flipbook_tracks_block);
	byteswap(value.stringid_tracks_block);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointnavpointanimationgrouptag>(blofeld::infinite::s_interfacenavpointnavpointanimationgrouptag& value)
{
	byteswap(value.anytag);
	byteswap(value.animations_block);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointlabelelementtag>(blofeld::infinite::s_interfacenavpointlabelelementtag& value)
{
	byteswap(value.element_name);
	byteswap(value.draw_flags_name);
	byteswap(value.draw_flags);
	byteswap(value.draw_order);
	byteswap(value.width);
	byteswap(value.height);
	byteswap(value.color);
	byteswap(value.alpha);
	byteswap(value.tint_color);
	byteswap(value.tint_blend_mode);
	byteswap(value.tint_blend_interpolation);
	byteswap(value.show_event_name);
	byteswap(value.hide_event_name);
	byteswap(value.width_scale);
	byteswap(value.height_scale);
	byteswap(value.justification);
	byteswap(value.alignment);
	byteswap(value.typeface);
	byteswap(value.type_size);
	byteswap(value.text_source);
	byteswap(value.drop_shadow);
	byteswap(value.upper_case);
	byteswap(value.tracking_horizontal);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointnumberelementtag>(blofeld::infinite::s_interfacenavpointnumberelementtag& value)
{
	byteswap(value.element_name);
	byteswap(value.draw_flags_name);
	byteswap(value.draw_flags);
	byteswap(value.draw_order);
	byteswap(value.width);
	byteswap(value.height);
	byteswap(value.color);
	byteswap(value.alpha);
	byteswap(value.tint_color);
	byteswap(value.tint_blend_mode);
	byteswap(value.tint_blend_interpolation);
	byteswap(value.show_event_name);
	byteswap(value.hide_event_name);
	byteswap(value.width_scale);
	byteswap(value.height_scale);
	byteswap(value.justification);
	byteswap(value.alignment);
	byteswap(value.typeface);
	byteswap(value.type_size);
	byteswap(value.text_source);
	byteswap(value.drop_shadow);
	byteswap(value.upper_case);
	byteswap(value.tracking_horizontal);
	byteswap(value.format);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointimageelementtag>(blofeld::infinite::s_interfacenavpointimageelementtag& value)
{
	byteswap(value.element_name);
	byteswap(value.draw_flags_name);
	byteswap(value.draw_flags);
	byteswap(value.draw_order);
	byteswap(value.width);
	byteswap(value.height);
	byteswap(value.color);
	byteswap(value.alpha);
	byteswap(value.tint_color);
	byteswap(value.tint_blend_mode);
	byteswap(value.tint_blend_interpolation);
	byteswap(value.show_event_name);
	byteswap(value.hide_event_name);
	byteswap(value.width_scale);
	byteswap(value.height_scale);
	byteswap(value.bitmap);
	byteswap(value.frame_index);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointrotatedimageelementtag>(blofeld::infinite::s_interfacenavpointrotatedimageelementtag& value)
{
	byteswap(value.element_name);
	byteswap(value.draw_flags_name);
	byteswap(value.draw_flags);
	byteswap(value.draw_order);
	byteswap(value.width);
	byteswap(value.height);
	byteswap(value.color);
	byteswap(value.alpha);
	byteswap(value.tint_color);
	byteswap(value.tint_blend_mode);
	byteswap(value.tint_blend_interpolation);
	byteswap(value.show_event_name);
	byteswap(value.hide_event_name);
	byteswap(value.width_scale);
	byteswap(value.height_scale);
	byteswap(value.bitmap);
	byteswap(value.frame_index);
	byteswap(value.pivot_offset);
	byteswap(value.rotation_angle);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointmeterelementtag>(blofeld::infinite::s_interfacenavpointmeterelementtag& value)
{
	byteswap(value.element_name);
	byteswap(value.draw_flags_name);
	byteswap(value.draw_flags);
	byteswap(value.draw_order);
	byteswap(value.width);
	byteswap(value.height);
	byteswap(value.color);
	byteswap(value.alpha);
	byteswap(value.tint_color);
	byteswap(value.tint_blend_mode);
	byteswap(value.tint_blend_interpolation);
	byteswap(value.show_event_name);
	byteswap(value.hide_event_name);
	byteswap(value.width_scale);
	byteswap(value.height_scale);
	byteswap(value.bitmap);
	byteswap(value.frame_index);
	byteswap(value.fill_color);
	byteswap(value.progress);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointelementgrouptag>(blofeld::infinite::s_interfacenavpointelementgrouptag& value)
{
	byteswap(value.group_name);
	byteswap(value.tint_color);
	byteswap(value.alpha);
	byteswap(value.anchor_offset_x);
	byteswap(value.anchor_offset_y);
	byteswap(value.anchor_justification);
	byteswap(value.anchor_alignment);
	byteswap(value.anchor_element_name);
	byteswap(value.element_layout);
	byteswap(value.element_justification);
	byteswap(value.element_alignment);
	byteswap(value.element_horizontal_spacing);
	byteswap(value.element_vertical_spacing);
	byteswap(value.use_horizontal_flip_zone);
	byteswap(value.label_elements_block);
	byteswap(value.number_elements_block);
	byteswap(value.image_elements_block);
	byteswap(value.rotated_image_elements_block);
	byteswap(value.gradient_meter_elements_block);
	byteswap(value.radial_meter_elements_block);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointtargetpropertytag>(blofeld::infinite::s_interfacenavpointtargetpropertytag& value)
{
	byteswap(value.track_name);
	byteswap(value.element_or_group_name);
	byteswap(value.property_name);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointtimelinetag>(blofeld::infinite::s_interfacenavpointtimelinetag& value)
{
	byteswap(value.timeline_name);
	byteswap(value.animation_group);
	byteswap(value.animation_name);
	byteswap(value.target_properties_block);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointvisualstatetag>(blofeld::infinite::s_interfacenavpointvisualstatetag& value)
{
	byteswap(value.name);
	byteswap(value.color_animation_timelines_block);
	byteswap(value.float_animation_timelines_block);
	byteswap(value.image_animation_timelines_block);
	byteswap(value.stringid_animation_timelines_block);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointvisualstategrouptag>(blofeld::infinite::s_interfacenavpointvisualstategrouptag& value)
{
	byteswap(value.visual_state_group_name);
	byteswap(value.visual_states_block);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointsampledatafloat>(blofeld::infinite::s_interfacenavpointsampledatafloat& value)
{
	byteswap(value.variable_name);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointsampledatastringid>(blofeld::infinite::s_interfacenavpointsampledatastringid& value)
{
	byteswap(value.variable_name);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointsampledatatext>(blofeld::infinite::s_interfacenavpointsampledatatext& value)
{
	byteswap(value.variable_name);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_interfacenavpointnavpointpresentationtag>(blofeld::infinite::s_interfacenavpointnavpointpresentationtag& value)
{
	byteswap(value.anytag);
	byteswap(value.template_navpoint);
	byteswap(value.alpha);
	byteswap(value.anchor_offset_x);
	byteswap(value.anchor_offset_y);
	byteswap(value.show_event_name);
	byteswap(value.hide_event_name);
	byteswap(value.scale_far_override);
	byteswap(value.element_groups_block);
	byteswap(value.state_groups_block);
	byteswap(value.external_events_block);
	byteswap(value.show_and_hide_events_block);
	byteswap(value.sample_data_floats_block);
	byteswap(value.sample_data_string_ids_block);
	byteswap(value.sample_data_strings_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectsattachmentvariantname>(blofeld::infinite::s_i343objectsattachmentvariantname& value)
{
	byteswap(value.variant_name);
}

template<> void byteswap<blofeld::infinite::s_object_attachment_definition>(blofeld::infinite::s_object_attachment_definition& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value.tag_graph_output);
	byteswap(value.output_node_name);
	byteswap(value.tag_graph_float_params_block);
	byteswap(value.override_type);
	byteswap(value.variant_names_block);
	byteswap(value.marker);
	byteswap(value.change_color);
	byteswap(value.flags);
	byteswap(value.primary_scale);
	byteswap(value.secondary_scale);
}

template<> void byteswap<blofeld::infinite::s_i343objectsobjectattachments>(blofeld::infinite::s_i343objectsobjectattachments& value)
{
	byteswap(value.anytag);
	byteswap(value.attachments_block);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentobjectivebehaviorcontenttag>(blofeld::infinite::s_nodegraphcontentobjectivebehaviorcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuicamerasettings>(blofeld::infinite::s_interfacecustomizationuicamerasettings& value)
{
	byteswap(value.core_focus_mode);
	byteswap(value.animation_easing);
	byteswap(value.camera_positions_block);
	byteswap(value.camera_fov);
	byteswap(value.camera_transition);
	byteswap(value.orientation);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuiregiondata>(blofeld::infinite::s_interfacecustomizationuiregiondata& value)
{
	byteswap(value.ui_display_string);
	byteswap(value.ui_description_string);
	byteswap(value.cms_customization_item_type);
	byteswap(value.cms_customization_core_type);
	byteswap(value.region_name);
	byteswap(value.marker_name);
	byteswap(value.marker_offset);
	byteswap(value.animation_easing);
	byteswap(value.camera_positions_block);
	byteswap(value.camera_fov);
	byteswap(value.camera_transition_time);
	byteswap(value.camera_orientation);
	byteswap(value.focused_object_orientation);
	byteswap(value.idle_animation);
	byteswap(value.to_idle_animation);
	byteswap(value.from_idle_animation);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuicustomizationorientationlimits>(blofeld::infinite::s_interfacecustomizationuicustomizationorientationlimits& value)
{
	byteswap(value.name);
	byteswap(value.minimum_yaw);
	byteswap(value.maximum_yaw);
	byteswap(value.minimum_roll);
	byteswap(value.maximum_roll);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuicustomizationspeedparameters>(blofeld::infinite::s_interfacecustomizationuicustomizationspeedparameters& value)
{
	byteswap(value.step_fraction);
	byteswap(value.close_enough_distance);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuiobjectcustomizationdata>(blofeld::infinite::s_interfacecustomizationuiobjectcustomizationdata& value)
{
	byteswap(value.camera_point);
	byteswap(value.default_idle_animation);
	byteswap(value.idle_animation);
	byteswap(value.idle_2_focused_animation);
	byteswap(value.idle_focused_animation);
	byteswap(value.focused_2_idle_animation);
	byteswap(value.armor_change_reaction_animation);
	byteswap(value.holo_table_animation);
	byteswap(value.idle_spartan_ai_animation);
	byteswap(value.spartan_platform_glow_effect);
	byteswap(value.rotation_angle_limitation);
	byteswap(value.default_weapon_orientation);
	byteswap(value.camera_settings_data_block);
	byteswap(value.region_data_block);
	byteswap(value.rtt_region_data_block);
	byteswap(value.ai_spartan_marker);
	byteswap(value.ai_spartan_marker_scale);
	byteswap(value.orientation_limits_block);
	byteswap(value.default_speed_block);
	byteswap(value.drag_speed_block);
	byteswap(value.impulse_speed_block);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuiobjectcustomizationdatatag>(blofeld::infinite::s_interfacecustomizationuiobjectcustomizationdatatag& value)
{
	byteswap(value.anytag);
	byteswap(value.customization_data_block);
}

template<> void byteswap<blofeld::infinite::s_impactaudiodefinition>(blofeld::infinite::s_impactaudiodefinition& value)
{
	byteswap(value.small_impact_minimum_speed);
	byteswap(value.medium_impact_minimum_speed);
	byteswap(value.large_impact_minimum_speed);
	byteswap(value.large_impact_maximum_speed);
}

template<> void byteswap<blofeld::infinite::s_sidecarpathdefinition>(blofeld::infinite::s_sidecarpathdefinition& value)
{
	byteswap(value.sidecar_path);
}

template<> void byteswap<blofeld::infinite::s_s_object_early_mover_obb_definition>(blofeld::infinite::s_s_object_early_mover_obb_definition& value)
{
	byteswap(value.node_name);
	byteswap(value.runtime_node_index);
	byteswap(value.x0);
	byteswap(value.x1);
	byteswap(value.y0);
	byteswap(value.y1);
	byteswap(value.z0);
	byteswap(value.z1);
	byteswap(value.angles);
}

template<> void byteswap<blofeld::infinite::s_i343weaponaiheatgeneratedperroundoverrideparam>(blofeld::infinite::s_i343weaponaiheatgeneratedperroundoverrideparam& value)
{
	byteswap(value.heat_generated_per_round_override_easy);
	byteswap(value.heat_generated_per_round_override_normal);
	byteswap(value.heat_generated_per_round_override_heroic);
	byteswap(value.heat_generated_per_round_override_legendary);
}

template<> void byteswap<blofeld::infinite::s_object_ai_properties>(blofeld::infinite::s_object_ai_properties& value)
{
	byteswap(value.ai_flags);
	byteswap(value.ai_type_name);
	byteswap(value.interaction_name);
	byteswap(value.ai_size);
	byteswap(value.leap_jump_speed);
	byteswap(value.unattached_damage_modifier);
	byteswap(value.bot_markup_flags);
	byteswap(value.override_heat_generated_per_round_block);
	byteswap(value.actor_lod_cost);
}

template<> void byteswap<blofeld::infinite::s_s_object_function_interpolation_definition>(blofeld::infinite::s_s_object_function_interpolation_definition& value)
{
	byteswap(value.interpolation_mode);
	byteswap(value.linear_travel_time);
	byteswap(value.acceleration);
	byteswap(value.spring_k);
	byteswap(value.spring_c);
	byteswap(value.fraction);
}

template<> void byteswap<blofeld::infinite::s_s_object_function_definition>(blofeld::infinite::s_s_object_function_definition& value)
{
	byteswap(value.flags);
	byteswap(value.import_name);
	byteswap(value.export_name);
	byteswap(value.turn_off_with);
	byteswap(value.ranged_interpolation_name);
	byteswap(value.min_value);
	byteswap(value.default_function);
	byteswap(value.scale_by);
	byteswap(value.interpolation_point_of_view);
	byteswap(value.interpolation_block);
	byteswap(value.runtime_interpolator_index);
}

template<> void byteswap<blofeld::infinite::s_objectruntimeinterpolatorfunctionsblock>(blofeld::infinite::s_objectruntimeinterpolatorfunctionsblock& value)
{
	byteswap(value.runtime_interpolator_to_object_function_mapping);
}

template<> void byteswap<blofeld::infinite::s_objectfunctionswitchdefinitionfunction>(blofeld::infinite::s_objectfunctionswitchdefinitionfunction& value)
{
	byteswap(value.selection_bounds);
	byteswap(value.function_name);
}

template<> void byteswap<blofeld::infinite::s_objectfunctionswitchdefinition>(blofeld::infinite::s_objectfunctionswitchdefinition& value)
{
	byteswap(value.switch_function_name);
	byteswap(value.export_name);
	byteswap(value.switched_functions_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectsobjectfunctionforwarding>(blofeld::infinite::s_i343objectsobjectfunctionforwarding& value)
{
	byteswap(value.function_to_forward);
}

template<> void byteswap<blofeld::infinite::s_i343objectsammorefillvariant>(blofeld::infinite::s_i343objectsammorefillvariant& value)
{
	byteswap(value.variant_name);
	byteswap(value.ammo_refill_flags);
	byteswap(value.ammo_refill_behavior_flags);
}

template<> void byteswap<blofeld::infinite::s_object_indirect_lighting_settings_definition>(blofeld::infinite::s_object_indirect_lighting_settings_definition& value)
{
	byteswap(value.name);
	byteswap(value.variant_names_block);
	byteswap(value.object_lightmap);
	byteswap(value.object_cubemap_set_block);
}

template<> void byteswap<blofeld::infinite::s_s_physics_force_function>(blofeld::infinite::s_s_physics_force_function& value)
{
	byteswap(value.velocity_to_pressure);
	byteswap(value.max_velocity);
}

template<> void byteswap<blofeld::infinite::s_s_water_physics_drag_properties>(blofeld::infinite::s_s_water_physics_drag_properties& value)
{
	byteswap(value.pressure);
	byteswap(value.suction);
	byteswap(value.linear_damping);
	byteswap(value.angular_damping);
}

template<> void byteswap<blofeld::infinite::s_s_water_physics_drag_override>(blofeld::infinite::s_s_water_physics_drag_override& value)
{
	byteswap(value.material);
	byteswap(value.drag);
}

template<> void byteswap<blofeld::infinite::s_s_water_physics_hull_surface_definition>(blofeld::infinite::s_s_water_physics_hull_surface_definition& value)
{
	byteswap(value.flags);
	byteswap(value.marker_name);
	byteswap(value.radius);
	byteswap(value.drag_block);
}

template<> void byteswap<blofeld::infinite::s_s_jetwash_definition>(blofeld::infinite::s_s_jetwash_definition& value)
{
	byteswap(value.marker_name);
	byteswap(value.radius);
	byteswap(value.maximum_traces);
	byteswap(value.maximum_emission_length);
	byteswap(value.trace_yaw_angle);
	byteswap(value.trace_pitch_angle);
	byteswap(value.particle_offset);
}

template<> void byteswap<blofeld::infinite::s_object_definition_widget>(blofeld::infinite::s_object_definition_widget& value)
{
	byteswap(value.type);
}

template<> void byteswap<blofeld::infinite::s_object_change_color_initial_permutation>(blofeld::infinite::s_object_change_color_initial_permutation& value)
{
	byteswap(value.weight);
	byteswap(value.color_lower_bound);
	byteswap(value.color_upper_bound);
	byteswap(value.variant_name);
}

template<> void byteswap<blofeld::infinite::s_object_change_color_function>(blofeld::infinite::s_object_change_color_function& value)
{
	byteswap(value.scale_flags);
	byteswap(value.color_lower_bound);
	byteswap(value.color_upper_bound);
	byteswap(value.darken_by);
	byteswap(value.scale_by);
}

template<> void byteswap<blofeld::infinite::s_object_change_color_definition>(blofeld::infinite::s_object_change_color_definition& value)
{
	byteswap(value.initial_permutations_block);
	byteswap(value.functions_block);
}

template<> void byteswap<blofeld::infinite::s_spawninfluenceweightfallofffunctionblock>(blofeld::infinite::s_spawninfluenceweightfallofffunctionblock& value)
{
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_s_multiplayer_object_properties_definition>(blofeld::infinite::s_s_multiplayer_object_properties_definition& value)
{
	byteswap(value.type);
	byteswap(value.teleporter_passability);
	byteswap(value.spawn_timer_type);
	byteswap(value.number_of_fx_color_overrides);
	byteswap(value.boundary_width_radius);
	byteswap(value.boundary_box_length);
	byteswap(value.boundary_positive_height);
	byteswap(value.boundary_negative_height);
	byteswap(value.boundary_shape);
	byteswap(value.default_spawn_time);
	byteswap(value.default_abandonment_time);
	byteswap(value.flags);
	byteswap(value.normal_weight);
	byteswap(value.falloff_function_block);
	byteswap(value.boundary_center_marker);
	byteswap(value.spawned_object_marker_name);
	byteswap(value.spawned_object$2);
	byteswap(value.nyi_boundary_material);
	byteswap(value.boundary_standard_shader);
	byteswap(value.sphere_standard_shader);
	byteswap(value.cylinder_standard_shader);
	byteswap(value.box_standard_shader);
	byteswap(value.forge_property_flags);
	byteswap(value.default_physics_type);
	byteswap(value.default_primary_color);
	byteswap(value.default_secondary_color);
	byteswap(value.default_tertiary_color);
	byteswap(value.default_primary_glossiness);
	byteswap(value.default_secondary_glossiness);
	byteswap(value.default_tertiary_glossiness);
	byteswap(value.default_label_);
	byteswap(value.default_label_$2);
	byteswap(value.default_label_$3);
	byteswap(value.default_label_$4);
	byteswap(value.m_defaultboundarypipelinestate);
	byteswap(value.m_sphereboundarypipelinestates);
	byteswap(value.m_cylinderboundarypipelinestates);
	byteswap(value.m_boxboundarypipelinestates);
	byteswap(value.callout_radius);
}

template<> void byteswap<blofeld::infinite::s_i343objectsforgeobjectentrydefinition>(blofeld::infinite::s_i343objectsforgeobjectentrydefinition& value)
{
	byteswap(value.palette);
	byteswap(value.name);
	byteswap(value.description);
	byteswap(value.placement_priority);
	byteswap(value.variant_name);
	byteswap(value.configuration);
	byteswap(value.starting_yaw_pitch_roll);
}

template<> void byteswap<blofeld::infinite::s_s_object_spawn_effects>(blofeld::infinite::s_s_object_spawn_effects& value)
{
	byteswap(value.multiplayer_spawn_effect);
	byteswap(value.campaign_spawn_effect);
}

template<> void byteswap<blofeld::infinite::s_modeldissolvedatablock>(blofeld::infinite::s_modeldissolvedatablock& value)
{
	byteswap(value.model_dissolve_data);
}

template<> void byteswap<blofeld::infinite::s_hsreferencesblock>(blofeld::infinite::s_hsreferencesblock& value)
{
	byteswap(value.reference);
}

template<> void byteswap<blofeld::infinite::s_objectabandonmentdefinition>(blofeld::infinite::s_objectabandonmentdefinition& value)
{
	byteswap(value.vitality_limit_to_start_countdown);
	byteswap(value.countdown_time_in_seconds);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_soundrtpcblockdefinition>(blofeld::infinite::s_soundrtpcblockdefinition& value)
{
	byteswap(value.attachment_index);
	byteswap(value.function);
	byteswap(value.rtpc_name);
	byteswap(value.rtpc_name_hash_value);
}

template<> void byteswap<blofeld::infinite::s_soundsweetenerblockdefinition>(blofeld::infinite::s_soundsweetenerblockdefinition& value)
{
	byteswap(value.function);
	byteswap(value.sound);
	byteswap(value.switch_point);
	byteswap(value.mode);
}

template<> void byteswap<blofeld::infinite::s_i343objectscomputefunctionsmoothingblockdefinition>(blofeld::infinite::s_i343objectscomputefunctionsmoothingblockdefinition& value)
{
	byteswap(value.id);
	byteswap(value.alias_of);
	byteswap(value.smoothing_factor);
}

template<> void byteswap<blofeld::infinite::s_interactionopportunitydefinition>(blofeld::infinite::s_interactionopportunitydefinition& value)
{
	byteswap(value.marker);
	byteswap(value.ambient_info_block);
}

template<> void byteswap<blofeld::infinite::s_scriptedsequencecomponentaction>(blofeld::infinite::s_scriptedsequencecomponentaction& value)
{
	byteswap(value.request_action_lua_function_name);
	byteswap(value.go_to_next_action_condition_lua_function_name);
}

template<> void byteswap<blofeld::infinite::s_scriptedsequenceactiondefinition>(blofeld::infinite::s_scriptedsequenceactiondefinition& value)
{
	byteswap(value.prototype_trigger_lua_function_name);
	byteswap(value.component_actions_block);
}

template<> void byteswap<blofeld::infinite::s_animsettableentryvariantid>(blofeld::infinite::s_animsettableentryvariantid& value)
{
	byteswap(value.variant);
}

template<> void byteswap<blofeld::infinite::s_animsettableentry>(blofeld::infinite::s_animsettableentry& value)
{
	byteswap(value.token);
	byteswap(value.animset);
	byteswap(value.runtime_animset_used_by_code_only);
	byteswap(value.is_default);
	byteswap(value.flags);
	byteswap(value.variants_block);
}

template<> void byteswap<blofeld::infinite::s_animsettabledefinition>(blofeld::infinite::s_animsettabledefinition& value)
{
	byteswap(value.channels_block);
	byteswap(value.table_entries_block);
}

template<> void byteswap<blofeld::infinite::s_rootbonecorrectionsettings>(blofeld::infinite::s_rootbonecorrectionsettings& value)
{
	byteswap(value.flags);
	byteswap(value.root_bone_correction_type);
	byteswap(value.root_bone_correction_duration);
	byteswap(value.root_bone_correction_bone_index);
}

template<> void byteswap<blofeld::infinite::s_leggroundingsettings>(blofeld::infinite::s_leggroundingsettings& value)
{
	byteswap(value.marker);
	byteswap(value.max_compression);
	byteswap(value.planted_threshold);
	byteswap(value.lifted_threshold);
	byteswap(value.lifted_minimum_time);
	byteswap(value.event);
}

template<> void byteswap<blofeld::infinite::s_i343objectsanimationmatchingtableentry>(blofeld::infinite::s_i343objectsanimationmatchingtableentry& value)
{
	byteswap(value.animation_on_parent);
	byteswap(value.animation_to_play_on_object);
	byteswap(value.animation_set_to_use_with_the_child_objects_animation);
}

template<> void byteswap<blofeld::infinite::s_i343objectsmodelvariantswappingtableentry>(blofeld::infinite::s_i343objectsmodelvariantswappingtableentry& value)
{
	byteswap(value.function_result_range);
	byteswap(value.model_variant_name);
}

template<> void byteswap<blofeld::infinite::s_i343itemslocationsensordefinition>(blofeld::infinite::s_i343itemslocationsensordefinition& value)
{
	byteswap(value.sensor_flags);
	byteswap(value.ping_frequency);
	byteswap(value.ping_radius);
	byteswap(value.reveal_duration);
	byteswap(value.scanning_duration);
	byteswap(value.minimum_delay_between_marks);
	byteswap(value.delay_per_distance);
	byteswap(value.sensor_radius_effect);
	byteswap(value.sensor_radius_effect_marker);
	byteswap(value.sensor_ping_effect);
	byteswap(value.target_outline);
	byteswap(value.target_visor_ping_effect);
	byteswap(value.target_visor_ping_effect_marker);
	byteswap(value.sensor_navpoint_name);
	byteswap(value.sensor_navpoint_marker);
	byteswap(value.target_navpoint_name);
	byteswap(value.target_navpoint_marker);
}

template<> void byteswap<blofeld::infinite::s_i343itemswallbuilderwallcellmapping>(blofeld::infinite::s_i343itemswallbuilderwallcellmapping& value)
{
	byteswap(value.cell_mapping);
}

template<> void byteswap<blofeld::infinite::s_i343itemswallbuilderwallvertmarkernames>(blofeld::infinite::s_i343itemswallbuilderwallvertmarkernames& value)
{
	byteswap(value.marker_name);
}

template<> void byteswap<blofeld::infinite::s_i343itemswallbuilderwalldefinition>(blofeld::infinite::s_i343itemswallbuilderwalldefinition& value)
{
	byteswap(value.root_marker_index);
	byteswap(value.wall_builder_width_in_vertices);
	byteswap(value.wall_builder_height_in_vertices);
	byteswap(value.cell_mappings_block);
	byteswap(value.vert_markers_block);
}

template<> void byteswap<blofeld::infinite::s_i343itemsshroudgeneratordefinition>(blofeld::infinite::s_i343itemsshroudgeneratordefinition& value)
{
	byteswap(value.outer_radius);
	byteswap(value.edge_effect_marker);
	byteswap(value.biped_enter_effect);
	byteswap(value.biped_inside_effect);
	byteswap(value.biped_leave_effect);
	byteswap(value.inside_shrouded_mapping);
	byteswap(value.max_distance_inside_for_shroud);
	byteswap(value.outside_shrouded_mapping);
	byteswap(value.max_distance_outside_for_shroud);
	byteswap(value.blocker_object);
	byteswap(value.blocker_attach_marker);
	byteswap(value.blocker_attach_child_marker);
	byteswap(value.blocker_scale);
}

template<> void byteswap<blofeld::infinite::s_i343objectspowersourceconfiguration>(blofeld::infinite::s_i343objectspowersourceconfiguration& value)
{
	byteswap(value.name);
	byteswap(value.capacity);
}

template<> void byteswap<blofeld::infinite::s_i343objectspowersourcestateconfiguration>(blofeld::infinite::s_i343objectspowersourcestateconfiguration& value)
{
	byteswap(value.region_state);
	byteswap(value.configuration);
}

template<> void byteswap<blofeld::infinite::s_i343objectspowersourcedefinition>(blofeld::infinite::s_i343objectspowersourcedefinition& value)
{
	byteswap(value.region_name);
	byteswap(value.runtime_region_index);
	byteswap(value.state_configurations_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectspowersourcedefinitionreference>(blofeld::infinite::s_i343objectspowersourcedefinitionreference& value)
{
	byteswap(value.component);
}

template<> void byteswap<blofeld::infinite::s_i343objectspowercomponentdefinition>(blofeld::infinite::s_i343objectspowercomponentdefinition& value)
{
	byteswap(value.power_source_configurations_block);
	byteswap(value.power_sources_block);
	byteswap(value.communication_node_power_sources_block);
	byteswap(value.communication_node_power_modifier_id);
	byteswap(value.locomotion_power_sources_block);
	byteswap(value.locomotion_power_modifier_id);
	byteswap(value.locomotion_power_modifier);
	byteswap(value.weapon_power_sources_block);
	byteswap(value.weapon_power_modifier_id);
}

template<> void byteswap<blofeld::infinite::s_i343objectsselfdestructsoundblock>(blofeld::infinite::s_i343objectsselfdestructsoundblock& value)
{
	byteswap(value.active_damage_section_count);
	byteswap(value.sound_to_play);
}

template<> void byteswap<blofeld::infinite::s_i343objectsselfdestructhandlerdefinition>(blofeld::infinite::s_i343objectsselfdestructhandlerdefinition& value)
{
	byteswap(value.self_destruct_sounds_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectsindirectlightingcomponentdefinition>(blofeld::infinite::s_i343objectsindirectlightingcomponentdefinition& value)
{
	byteswap(value.lightmap_attachment_bone);
}

template<> void byteswap<blofeld::infinite::s_objectdefinition>(blofeld::infinite::s_objectdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.runtime_object_type);
	byteswap(value.nav_mesh_cutting);
	byteswap(value.nav_mesh_cutting_mode);
	byteswap(value.nav_mesh_silhouette_expansion);
	byteswap(value.navmesh_collision_node_opt_in);
	byteswap(value.avoidance_multiplier);
	byteswap(value.avoidance_radius);
	byteswap(value.object_flags);
	byteswap(value.bounding_radius);
	byteswap(value.bounding_offset);
	byteswap(value.horizontal_acceleration_scale);
	byteswap(value.vertical_acceleration_scale);
	byteswap(value.angular_acceleration_scale);
	byteswap(value.lightmap_shadow_mode);
	byteswap(value.multiple_airprobe_mode);
	byteswap(value.water_density);
	byteswap(value.streaming_control_flags);
	byteswap(value.impact_audio);
	byteswap(value.runtime_flags);
	byteswap(value.source_sidecar_block);
	byteswap(value.default_model_variant);
	byteswap(value.default_style_id);
	byteswap(value.model);
	byteswap(value.asset);
	byteswap(value.frame);
	byteswap(value.crate_object);
	byteswap(value.damagesource);
	byteswap(value.navpoint_vertical_offset);
	byteswap(value.collision_damage);
	byteswap(value.early_mover_obb_block);
	byteswap(value.creation_effect);
	byteswap(value.material_effects);
	byteswap(value.visual_material_effects);
	byteswap(value.sound_material_effects);
	byteswap(value.melee_sound);
	byteswap(value.kill_on_first_contact_or_damage_after_time);
	byteswap(value.self_destruct_time);
	byteswap(value.self_destruct_time_max);
	byteswap(value.ai_properties_block);
	byteswap(value.functions_block);
	byteswap(value.runtime_interpolator_functions_block);
	byteswap(value.function_switches_block);
	byteswap(value.functions_forwarded_to_parent_block);
	byteswap(value.ammo_refill_flags);
	byteswap(value.ammo_refill_behavior_flags);
	byteswap(value.ammo_refill_variant_flags_block);
	byteswap(value.object_secondary_flags);
	byteswap(value.customization_set);
	byteswap(value.attachments_block);
	byteswap(value.indirect_lighting_data_block);
	byteswap(value.hull_surfaces_block);
	byteswap(value.jetwash_block);
	byteswap(value.widgets_block);
	byteswap(value.change_colors_block);
	byteswap(value.multiplayer_object_block);
	byteswap(value.forge_data_block);
	byteswap(value.simulation_interpolation);
	byteswap(value.authority_trust_settings);
	byteswap(value.spawn_effects_block);
	byteswap(value.model_dissolve_data_block);
	byteswap(value.class_name);
	byteswap(value.script_tagalongs_block);
	byteswap(value.prototype_script);
	byteswap(value.object_abandonment);
	byteswap(value.designer_metadata_block);
	byteswap(value.object_sound_rtpcs_block);
	byteswap(value.object_sound_sweeteners_block);
	byteswap(value.audio_acoustics_root_marker_override);
	byteswap(value.audio_acoustics_transparency);
	byteswap(value.object_function_smoothing_block);
	byteswap(value.animated_mesh_animation_type);
	byteswap(value.trigger_volume_component_info);
	byteswap(value.tracking_info_block);
	byteswap(value.property_based_effects);
	byteswap(value.interactions_block);
	byteswap(value.blip_sprite_index_override);
	byteswap(value.data_driven_scripted_sequence_actions_definitions_block);
	byteswap(value.animation_node_graph);
	byteswap(value.anim_set_table);
	byteswap(value.inertialization_duration);
	byteswap(value.pill_offset_blend_rate_for_ground_ik);
	byteswap(value.stationary_root_offset_limit);
	byteswap(value.moving_root_offset_limit);
	byteswap(value.ground_ik_marker_above_ground_tolerance);
	byteswap(value.ground_probe_start_position_height_scale_for_ground_ik);
	byteswap(value.anim_set_nodegraph_metadata);
	byteswap(value.rootbonecorrectionsettings);
	byteswap(value.leg_grounding_settings_block);
	byteswap(value.wrist_break_interp_time);
	byteswap(value.wrist_break_angle_limit);
	byteswap(value.wrist_break_fixup_scale);
	byteswap(value.flags);
	byteswap(value.object_node_graphs_block);
	byteswap(value.parent_animation_matching_block);
	byteswap(value.model_variant_switching_function);
	byteswap(value.model_variant_switching_table_block);
	byteswap(value.knockback_impulse_scalar);
	byteswap(value.location_sensor_block);
	byteswap(value.wall_builder_wall_block);
	byteswap(value.shroud_generator_block);
	byteswap(value.power_component_block);
	byteswap(value.self_destruct_handler_block);
	byteswap(value.indirect_lighting_component_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationmarkers>(blofeld::infinite::s_i343objectcustomizationmarkers& value)
{
	byteswap(value.marker_name);
	byteswap(value.translation);
	byteswap(value.rotation);
	byteswap(value.scale);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationmodelattachment>(blofeld::infinite::s_i343objectcustomizationmodelattachment& value)
{
	byteswap(value.attachment_model);
	byteswap(value.variant);
	byteswap(value.markers_block);
	byteswap(value.cms_customization_item_type);
	byteswap(value.attachment_location);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationattachmentconfiguration>(blofeld::infinite::s_i343objectcustomizationattachmentconfiguration& value)
{
	byteswap(value.anytag);
	byteswap(value.model_attachments_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationeffectoverridedefinition>(blofeld::infinite::s_i343objectcustomizationeffectoverridedefinition& value)
{
	byteswap(value.source_effect);
	byteswap(value.override_effect);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationeffectoverride>(blofeld::infinite::s_i343objectcustomizationeffectoverride& value)
{
	byteswap(value.anytag);
	byteswap(value.effect_overrides_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectsobjectconfigurationdefinitioninternal>(blofeld::infinite::s_i343objectsobjectconfigurationdefinitioninternal& value)
{
	byteswap(value.object_definition);
	byteswap(value.variant_name);
	byteswap(value.style_id);
	byteswap(value.frame_override);
	byteswap(value.customization_set_override);
}

template<> void byteswap<blofeld::infinite::s_i343objectsobjectconfigurationdefinition>(blofeld::infinite::s_i343objectsobjectconfigurationdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.object);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationthemeconfigs>(blofeld::infinite::s_i343objectcustomizationthemeconfigs& value)
{
	byteswap(value.theme_name);
	byteswap(value.theme_variant_name);
	byteswap(value.theme_configs);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationtheme>(blofeld::infinite::s_i343objectcustomizationtheme& value)
{
	byteswap(value.asset_name);
	byteswap(value.model);
	byteswap(value.object_reference);
	byteswap(value.theme_configurations_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationemblemmarker>(blofeld::infinite::s_i343objectcustomizationemblemmarker& value)
{
	byteswap(value.marker);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationbigemblemconfiguration>(blofeld::infinite::s_i343objectcustomizationbigemblemconfiguration& value)
{
	byteswap(value.theme_id);
	byteswap(value.marker);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationemblemconfiguration>(blofeld::infinite::s_i343objectcustomizationemblemconfiguration& value)
{
	byteswap(value.theme_ids_block);
	byteswap(value.markers_block);
	byteswap(value.bigemblems_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationconfigurationthemeeffectoverride>(blofeld::infinite::s_i343objectcustomizationconfigurationthemeeffectoverride& value)
{
	byteswap(value.effect_override_definition);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationobjectattachmentcustomization>(blofeld::infinite::s_i343objectcustomizationobjectattachmentcustomization& value)
{
	byteswap(value.attachments);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationweaponthemeconfigs>(blofeld::infinite::s_i343objectcustomizationweaponthemeconfigs& value)
{
	byteswap(value.theme_name);
	byteswap(value.theme_variant_name);
	byteswap(value.object_configuration);
	byteswap(value.theme_configs);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationweapontheme>(blofeld::infinite::s_i343objectcustomizationweapontheme& value)
{
	byteswap(value.asset_name);
	byteswap(value.model);
	byteswap(value.object_reference);
	byteswap(value.theme_configurations_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationplayerkilleffect>(blofeld::infinite::s_i343objectcustomizationplayerkilleffect& value)
{
	byteswap(value.weapon_definition);
	byteswap(value.player_kill_effects);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationcharm>(blofeld::infinite::s_i343objectcustomizationcharm& value)
{
	byteswap(value.charm);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationvehiclethemeconfigs>(blofeld::infinite::s_i343objectcustomizationvehiclethemeconfigs& value)
{
	byteswap(value.theme_name);
	byteswap(value.theme_variant_name);
	byteswap(value.object_configuration);
	byteswap(value.theme_configs);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationvehicletheme>(blofeld::infinite::s_i343objectcustomizationvehicletheme& value)
{
	byteswap(value.asset_name);
	byteswap(value.model);
	byteswap(value.object_reference);
	byteswap(value.theme_configurations_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationstanceandposeanimations>(blofeld::infinite::s_i343objectcustomizationstanceandposeanimations& value)
{
	byteswap(value.animation);
	byteswap(value.weapon_reference);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationconsumableobjects>(blofeld::infinite::s_i343objectcustomizationconsumableobjects& value)
{
	byteswap(value.object_reference);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationglobals>(blofeld::infinite::s_i343objectcustomizationglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.themes_block);
	byteswap(value.shared_armor_emblems_block);
	byteswap(value.effect_overrides_block);
	byteswap(value.object_attachments_block);
	byteswap(value.weapon_themes_block);
	byteswap(value.shared_weapon_emblems_block);
	byteswap(value.player_kill_effects_block);
	byteswap(value.shared_weapon_charms_block);
	byteswap(value.vehicle_themes_block);
	byteswap(value.shared_vehicle_emblems_block);
	byteswap(value.shared_vehicle_charms_block);
	byteswap(value.stances_block);
	byteswap(value.action_poses_block);
	byteswap(value.ai_object_reference);
	byteswap(value.ai_device_reference);
	byteswap(value.xpboosts_block);
	byteswap(value.xpgrants_block);
	byteswap(value.rerolls_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationpermutationregions>(blofeld::infinite::s_i343objectcustomizationpermutationregions& value)
{
	byteswap(value.permutation_region);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationpermutationsettings>(blofeld::infinite::s_i343objectcustomizationpermutationsettings& value)
{
	byteswap(value.permutation_name);
	byteswap(value.material_style);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationregion>(blofeld::infinite::s_i343objectcustomizationregion& value)
{
	byteswap(value.region_name);
	byteswap(value.permutation_regions_block);
	byteswap(value.permutation_settings_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationattachment>(blofeld::infinite::s_i343objectcustomizationattachment& value)
{
	byteswap(value.attachment);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationmeshes>(blofeld::infinite::s_i343objectcustomizationmeshes& value)
{
	byteswap(value.name);
	byteswap(value.permutation_regions_block);
	byteswap(value.permutation_settings_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationthemeconfiguration>(blofeld::infinite::s_i343objectcustomizationthemeconfiguration& value)
{
	byteswap(value.anytag);
	byteswap(value.regions_block);
	byteswap(value.attachments_block);
	byteswap(value.prosthetics_block);
	byteswap(value.body_types_block);
	byteswap(value.emblems_block);
	byteswap(value.material_styles);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationvehiclethemeconfiguration>(blofeld::infinite::s_i343objectcustomizationvehiclethemeconfiguration& value)
{
	byteswap(value.anytag);
	byteswap(value.regions_block);
	byteswap(value.charm_block);
	byteswap(value.emblems_block);
	byteswap(value.effect_overrides_block);
	byteswap(value.material_styles);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationweaponthemeconfiguration>(blofeld::infinite::s_i343objectcustomizationweaponthemeconfiguration& value)
{
	byteswap(value.anytag);
	byteswap(value.regions_block);
	byteswap(value.charm_block);
	byteswap(value.emblems_block);
	byteswap(value.effect_overrides_block);
	byteswap(value.player_kill_effect);
	byteswap(value.material_styles);
}

template<> void byteswap<blofeld::infinite::s_i343objectdispenserdispenseslotdefinition>(blofeld::infinite::s_i343objectdispenserdispenseslotdefinition& value)
{
	byteswap(value.slot_name);
	byteswap(value.slot_marker);
}

template<> void byteswap<blofeld::infinite::s_i343objectdispenserdispensercomponentinternaldefinition>(blofeld::infinite::s_i343objectdispenserdispensercomponentinternaldefinition& value)
{
	byteswap(value.dispense_slots_block);
	byteswap(value.incoming_creation_effect);
	byteswap(value.ready_effect);
	byteswap(value.action_string_incoming);
	byteswap(value.respawn_type);
	byteswap(value.flags);
	byteswap(value.respawn_time);
	byteswap(value.incoming_time_mark);
	byteswap(value.constructing_time_mark);
	byteswap(value.damage_acceleration_scale_horizontal);
	byteswap(value.damage_acceleration_scale_vertical);
	byteswap(value.damage_acceleration_min_horizontal);
	byteswap(value.damage_acceleration_min_vertical);
	byteswap(value.incoming_navpoint_ui_screen);
	byteswap(value.navpoint_visibility_distance);
	byteswap(value.interaction_radius);
	byteswap(value.terminal_navpoint_ui_screen);
}

template<> void byteswap<blofeld::infinite::s_i343objectdispenserdispensercomponentdefinition>(blofeld::infinite::s_i343objectdispenserdispensercomponentdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.object_dispenser_component);
}

template<> void byteswap<blofeld::infinite::s_i343objectsdockingalignmentpoints>(blofeld::infinite::s_i343objectsdockingalignmentpoints& value)
{
	byteswap(value.slot_marker);
	byteswap(value.tab_marker);
}

template<> void byteswap<blofeld::infinite::s_i343objectsdockingconnectionpoints>(blofeld::infinite::s_i343objectsdockingconnectionpoints& value)
{
	byteswap(value.origin_marker);
	byteswap(value.target_marker);
}

template<> void byteswap<blofeld::infinite::s_i343objectsdockingsitedefinition>(blofeld::infinite::s_i343objectsdockingsitedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.simulation_type);
	byteswap(value.connection_duration);
	byteswap(value.disconnection_duration);
	byteswap(value.attachment_duration);
	byteswap(value.detachment_duration);
	byteswap(value.docking_duration);
	byteswap(value.alignment_points);
	byteswap(value.connection_points_block);
	byteswap(value.connection_effect);
	byteswap(value.attachment_linear_velocity_test);
	byteswap(value.attachment_angular_velocity_test);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentobjectnodegraphcontenttag>(blofeld::infinite::s_nodegraphcontentobjectnodegraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_i343objectsobjectnodegraphglobals>(blofeld::infinite::s_i343objectsobjectnodegraphglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.placement_global_object);
}

template<> void byteswap<blofeld::infinite::s_behaviortreenode>(blofeld::infinite::s_behaviortreenode& value)
{
	byteswap(value.node_type);
	byteswap(value.node_id);
}

template<> void byteswap<blofeld::infinite::s_behaviortreenodeconnection>(blofeld::infinite::s_behaviortreenodeconnection& value)
{
	byteswap(value.parent_node_id);
	byteswap(value.child_node_id);
}

template<> void byteswap<blofeld::infinite::s_behaviortreenodeparameterconnection>(blofeld::infinite::s_behaviortreenodeparameterconnection& value)
{
	byteswap(value.owning_node_id);
	byteswap(value.parameter_identifier);
	byteswap(value.parameter_type);
	byteswap(value.parameter_index);
}

template<> void byteswap<blofeld::infinite::s_behaviortreenodeparameterbool>(blofeld::infinite::s_behaviortreenodeparameterbool& value)
{
	byteswap(value.blackboard_identifier);
	byteswap(value.parameter_value);
}

template<> void byteswap<blofeld::infinite::s_behaviortreenodeparameterint>(blofeld::infinite::s_behaviortreenodeparameterint& value)
{
	byteswap(value.blackboard_identifier);
	byteswap(value.parameter_value);
}

template<> void byteswap<blofeld::infinite::s_behaviortreenodeparameterfloat>(blofeld::infinite::s_behaviortreenodeparameterfloat& value)
{
	byteswap(value.blackboard_identifier);
	byteswap(value.parameter_value);
}

template<> void byteswap<blofeld::infinite::s_behaviortreenodeparameterstringid>(blofeld::infinite::s_behaviortreenodeparameterstringid& value)
{
	byteswap(value.blackboard_identifier);
	byteswap(value.parameter_value);
}

template<> void byteswap<blofeld::infinite::s_behaviortreenodeparameterruntimeref>(blofeld::infinite::s_behaviortreenodeparameterruntimeref& value)
{
	byteswap(value.blackboard_identifier);
}

template<> void byteswap<blofeld::infinite::s_objectivebehaviortreenodegraph>(blofeld::infinite::s_objectivebehaviortreenodegraph& value)
{
	byteswap(value.anytag);
	byteswap(value.source_graph);
	byteswap(value.nodes_block);
	byteswap(value.node_connections_block);
	byteswap(value.node_parameter_connections_block);
	byteswap(value.bool_parameters_block);
	byteswap(value.int_parameters_block);
	byteswap(value.float_parameters_block);
	byteswap(value.string_parameters_block);
	byteswap(value.asset_parameters_block);
}

template<> void byteswap<blofeld::infinite::s_i343outlineserviceoutlineserviceglobalsdefinition>(blofeld::infinite::s_i343outlineserviceoutlineserviceglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.spartan_tracking_active);
	byteswap(value.spartan_tracking_passive);
	byteswap(value.custom_active_tracking);
	byteswap(value.spectator_team_coloring);
	byteswap(value.target_tracking);
	byteswap(value.enemy_identification);
	byteswap(value.scripting);
	byteswap(value.forge_outlining);
	byteswap(value.location_sensor);
	byteswap(value.polaris_outlining);
	byteswap(value.default_outline_type);
	byteswap(value.flags);
	byteswap(value.transparent_threshold);
	byteswap(value.transparent_alpha_influence);
	byteswap(value.transparent_luma_influence);
	byteswap(value.transparent_luma_alpha_influence);
	byteswap(value.texture_1);
	byteswap(value.texture_1_scale);
	byteswap(value.texture_1_velocity);
	byteswap(value.texture_1_resolution_scaling);
	byteswap(value.texture_1_influence);
	byteswap(value.texture_1_fill_influence);
	byteswap(value.texture_2);
	byteswap(value.texture_2_scale);
	byteswap(value.texture_2_velocity);
	byteswap(value.texture_2_resolution_scaling);
	byteswap(value.texture_2_influence);
	byteswap(value.texture_2_fill_influence);
	byteswap(value.texture_3);
	byteswap(value.texture_3_scale);
	byteswap(value.texture_3_velocity);
	byteswap(value.texture_3_resolution_scaling);
	byteswap(value.texture_3_influence);
	byteswap(value.texture_3_fill_influence);
	byteswap(value.texture_4);
	byteswap(value.texture_4_scale);
	byteswap(value.texture_4_velocity);
	byteswap(value.texture_4_resolution_scaling);
	byteswap(value.texture_4_influence);
	byteswap(value.texture_4_fill_influence);
}

template<> void byteswap<blofeld::infinite::s_i343outlineservicetypedefinition>(blofeld::infinite::s_i343outlineservicetypedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.material_name);
	byteswap(value.flags);
	byteswap(value.child_outlining_behaviour);
	byteswap(value.fade_in_duration);
	byteswap(value.fade_out_duration);
	byteswap(value.color);
	byteswap(value.opacity);
	byteswap(value.additiveness);
	byteswap(value.intensity);
	byteswap(value.outline_weight);
	byteswap(value.inline_weight);
	byteswap(value.distance_fade_start);
	byteswap(value.distance_fade_end);
	byteswap(value.distance_fade_end_value);
	byteswap(value.distance_thin_start);
	byteswap(value.distance_thin_end);
	byteswap(value.distance_thin_end_value);
	byteswap(value.occlusion_mode);
	byteswap(value.occlusion_bias);
	byteswap(value.occlusion_fade_range);
	byteswap(value.occlusion_fade_multiplier);
	byteswap(value.fill_color);
	byteswap(value.fill_opacity);
	byteswap(value.fill_intensity);
	byteswap(value.fill_distance_fade_start);
	byteswap(value.fill_distance_fade_end);
	byteswap(value.fill_distance_fade_end_value);
	byteswap(value.fill_occlusion_mode);
	byteswap(value.vertical_fade_start);
	byteswap(value.vertical_fade_end);
	byteswap(value.vertical_fade_end_value);
	byteswap(value.transition_to_duration);
	byteswap(value.outline_override_protanopia);
	byteswap(value.outline_override_deuteranopia);
	byteswap(value.outline_override_tritanopia);
}

template<> void byteswap<blofeld::infinite::s_i343graphicspainterbrushdefinition>(blofeld::infinite::s_i343graphicspainterbrushdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.brush_material);
	byteswap(value.generate_data_graph);
	byteswap(value.paint_graph);
	byteswap(value.highlight_graph);
	byteswap(value.live_preview_graph);
	byteswap(value.begin_stroke_generate_data_graph);
	byteswap(value.begin_stroke_graph);
	byteswap(value.end_stroke_graph);
	byteswap(value.on_activate_graph);
	byteswap(value.on_deactivate_graph);
}

template<> void byteswap<blofeld::infinite::s_particleassettag>(blofeld::infinite::s_particleassettag& value)
{
	byteswap(value.anytag);
	byteswap(value.asset);
	byteswap(value.variant);
	byteswap(value.lod_level);
	byteswap(value.rotation);
	byteswap(value.scale);
	byteswap(value.generated_particlemodel);
}

template<> void byteswap<blofeld::infinite::s_i343propertybasedeffectskeyedeffectdata>(blofeld::infinite::s_i343propertybasedeffectskeyedeffectdata& value)
{
	byteswap(value.id);
	byteswap(value.priority);
	byteswap(value.effect);
}

template<> void byteswap<blofeld::infinite::s_i343propertybasedeffectstagdefinition>(blofeld::infinite::s_i343propertybasedeffectstagdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.full_body_effects_block);
}

template<> void byteswap<blofeld::infinite::s_pcaimportedframedataelement>(blofeld::infinite::s_pcaimportedframedataelement& value)
{
	byteswap(value.coefficients);
}

template<> void byteswap<blofeld::infinite::s_pcaimportedanimationdata>(blofeld::infinite::s_pcaimportedanimationdata& value)
{
	byteswap(value.name);
	byteswap(value.offset);
	byteswap(value.count);
	byteswap(value.pca_shape_offset);
	byteswap(value.pca_coefficient_count);
	byteswap(value.coefficientresource);
}

template<> void byteswap<blofeld::infinite::s_pcaimportedmeshdata>(blofeld::infinite::s_pcaimportedmeshdata& value)
{
	byteswap(value.render_mesh_index);
	byteswap(value.vertices_per_shape);
	byteswap(value.position_buffer_index);
	byteswap(value.normal_buffer_index);
	byteswap(value.position_scale);
	byteswap(value.tension_scale);
	byteswap(value.position_offset);
	byteswap(value.tension_offset);
	byteswap(value.normal_scale);
	byteswap(value.stretch_scale);
	byteswap(value.normal_offset);
	byteswap(value.stretch_offset);
	byteswap(value.animations_block);
	byteswap(value.raw_blendshape_verts_block);
}

template<> void byteswap<blofeld::infinite::s_pcaanimationtag>(blofeld::infinite::s_pcaanimationtag& value)
{
	byteswap(value.anytag);
	byteswap(value.rendermodel);
	byteswap(value.animationgraph);
	byteswap(value.pcaflags);
	byteswap(value.pca_animation_count);
	byteswap(value.pca_checksum);
	byteswap(value.frame_data_block);
	byteswap(value.mesh_data_block);
	byteswap(value.api_resource);
}

template<> void byteswap<blofeld::infinite::s_s_particle_emitter_custom_pointss_point>(blofeld::infinite::s_s_particle_emitter_custom_pointss_point& value)
{
	byteswap(value.position_x);
	byteswap(value.position_y);
	byteswap(value.position_z);
	byteswap(value.normal_x);
	byteswap(value.normal_y);
	byteswap(value.normal_z);
	byteswap(value.correlation);
}

template<> void byteswap<blofeld::infinite::s_s_particle_emitter_custom_points>(blofeld::infinite::s_s_particle_emitter_custom_points& value)
{
	byteswap(value.anytag);
	byteswap(value.source_reference);
	byteswap(value.compression_scale);
	byteswap(value.compression_offset);
	byteswap(value.points_block);
}

template<> void byteswap<blofeld::infinite::s_s_performance_throttles>(blofeld::infinite::s_s_performance_throttles& value)
{
	byteswap(value.flags);
	byteswap(value.water_tessellation_scale);
	byteswap(value.decorator_fade_dist_scale);
	byteswap(value.effect_lod_distance_scale);
	byteswap(value.instance_fade_modifier);
	byteswap(value.object_fade_modifier);
	byteswap(value.object_detail_fade_modifier);
	byteswap(value.object_lighting_time_limit);
	byteswap(value.lod_modifier);
	byteswap(value.lod_vertical_modifier);
	byteswap(value.maximum_instance_group_lod_draw_bundles);
	byteswap(value.max_forward_dynamic_lights);
	byteswap(value.forward_dynamic_light_fade_distance_scale);
	byteswap(value.max_screenspace_dynamic_lights);
	byteswap(value.screenspace_light_fade_distance_scale);
	byteswap(value.max_effect_lights_screenspace);
	byteswap(value.max_shadow_casting_objects);
	byteswap(value.shadow_quality_lod);
	byteswap(value.floating_shadow_quality_lod);
}

template<> void byteswap<blofeld::infinite::s_c_performance_throttles>(blofeld::infinite::s_c_performance_throttles& value)
{
	byteswap(value.anytag);
	byteswap(value.performance_throttles_block);
}

template<> void byteswap<blofeld::infinite::s_navmeshdata>(blofeld::infinite::s_navmeshdata& value)
{
	byteswap(value.resource_data);
	byteswap(value.major_version);
	byteswap(value.minor_version);
	byteswap(value.structure_checksum);
}

template<> void byteswap<blofeld::infinite::s_mobilenavmeshdata>(blofeld::infinite::s_mobilenavmeshdata& value)
{
	byteswap(value.resource_data);
	byteswap(value.major_version);
	byteswap(value.minor_version);
	byteswap(value.object_id);
	byteswap(value.nodeindex);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_navvolumebucket>(blofeld::infinite::s_navvolumebucket& value)
{
	byteswap(value.resource_data);
	byteswap(value.bucketid);
}

template<> void byteswap<blofeld::infinite::s_navvolumedata>(blofeld::infinite::s_navvolumedata& value)
{
	byteswap(value.navmeshareaindex);
	byteswap(value.navmeshareaposition);
	byteswap(value.navmeshareaheight);
	byteswap(value.navmeshareasink);
	byteswap(value.major_version);
	byteswap(value.minor_version);
	byteswap(value.buckets_block);
}

template<> void byteswap<blofeld::infinite::s_user_hint_data>(blofeld::infinite::s_user_hint_data& value)
{
	byteswap(value.nav_links_block);
	byteswap(value.cookie_cutters_block);
	byteswap(value.navmesh_areas_block);
}

template<> void byteswap<blofeld::infinite::s_ai_pathfinding>(blofeld::infinite::s_ai_pathfinding& value)
{
	byteswap(value.anytag);
	byteswap(value.navmeshes_block);
	byteswap(value.mobilenavmeshes_block);
	byteswap(value.navvolumes_block);
	byteswap(value.hints_block);
}

template<> void byteswap<blofeld::infinite::s_i343physicscharactercommonmobilityparameters>(blofeld::infinite::s_i343physicscharactercommonmobilityparameters& value)
{
	byteswap(value.flags);
	byteswap(value.activation_throttle_requirements);
	byteswap(value.cancellation_throttle_requirements);
	byteswap(value.throttle_cancellation_point_of_no_return);
	byteswap(value.firing_cancellation_start_point);
	byteswap(value.throttle_threshold);
	byteswap(value.initial_button_press_hold_time_to_trigger);
	byteswap(value.maximum_ledge_slope);
	byteswap(value.minimum_edge_sharpness);
	byteswap(value.maximum_backward_reach);
	byteswap(value.apex_vertical_offset);
	byteswap(value.max_exit_speed);
	byteswap(value.min_entry_time);
	byteswap(value.max_entry_time);
	byteswap(value.min_movement_time);
	byteswap(value.max_movement_time);
	byteswap(value.camera_height_function$2);
	byteswap(value.max_anchor_object_relative_speed);
	byteswap(value.auto_push_time_min);
	byteswap(value.auto_push_contact_max_angle);
}

template<> void byteswap<blofeld::infinite::s_i343physicscharacterclamberingparameters>(blofeld::infinite::s_i343physicscharacterclamberingparameters& value)
{
	byteswap(value.step_jump_range);
	byteswap(value.step_jump_contact_max_angle);
	byteswap(value.step_jump_extra_height);
	byteswap(value.horizontal_range);
	byteswap(value.vertical_range_min_ascending);
	byteswap(value.vertical_range_min_descending);
	byteswap(value.ascending_velocity_threshold);
	byteswap(value.vertical_range_max);
	byteswap(value.entry_point_vertical_offset_to_apex);
	byteswap(value.entry_point_adjustment_benchmark_speed);
	byteswap(value.entry_point_horizontal_adjustment_range);
	byteswap(value.minimum_downward_speed_required_to_move_entry_point_down);
	byteswap(value.entry_point_vertical_adjustment_range);
	byteswap(value.clamber_flags);
	byteswap(value.post_exit_block_time);
	byteswap(value.cancel_weapon_block_time);
	byteswap(value.common_parameters);
}

template<> void byteswap<blofeld::infinite::s_i343physicscharacterclamberingdefinition>(blofeld::infinite::s_i343physicscharacterclamberingdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.parameters);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodeldampedspringmotor>(blofeld::infinite::s_i343physicsmodeldampedspringmotor& value)
{
	byteswap(value.name);
	byteswap(value.maximum_force);
	byteswap(value.minimum_force);
	byteswap(value.spring_k);
	byteswap(value.damping);
	byteswap(value.initial_position);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelpositionmotor>(blofeld::infinite::s_i343physicsmodelpositionmotor& value)
{
	byteswap(value.name);
	byteswap(value.maximum_force);
	byteswap(value.minimum_force);
	byteswap(value.tau);
	byteswap(value.damping);
	byteswap(value.proportion_recover_vel);
	byteswap(value.constant_recover_vel);
	byteswap(value.initial_position);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelphantomtype>(blofeld::infinite::s_i343physicsmodelphantomtype& value)
{
	byteswap(value.flags);
	byteswap(value.team_flags);
	byteswap(value.brittle_timer);
	byteswap(value.collision_damage_scale);
	byteswap(value.minimum_size);
	byteswap(value.maximum_size);
	byteswap(value.marker_name);
	byteswap(value.mancannon_launched_object_marker_name);
	byteswap(value.alignment_marker_name);
	byteswap(value.hookes_law_e);
	byteswap(value.linear_dead_radius);
	byteswap(value.center_acc);
	byteswap(value.center_max_vel);
	byteswap(value.axis_acc);
	byteswap(value.axis_max_vel);
	byteswap(value.direction_acc);
	byteswap(value.direction_max_vel);
	byteswap(value.orbit_acc);
	byteswap(value.orbit_max_vel);
	byteswap(value.nearest_unit_acc);
	byteswap(value.nearest_unit_max_vel);
	byteswap(value.alignment_hookes_law_e);
	byteswap(value.alignment_acc);
	byteswap(value.alignment_max_vel);
	byteswap(value.damage_per_second_effect);
	byteswap(value.damage_per_second_combined_material_effects);
	byteswap(value.damage_per_second_visual_material_effects);
	byteswap(value.damage_per_second_sound_material_effects);
	byteswap(value.damage_per_second_object_function);
	byteswap(value.damage_per_second_object_function_threshold);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelphysicsmodelnodehandle>(blofeld::infinite::s_i343physicsmodelphysicsmodelnodehandle& value)
{
	byteswap(value.node);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelmotorreference>(blofeld::infinite::s_i343physicsmodelmotorreference& value)
{
	byteswap(value.motor_type);
	byteswap(value.index);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelpoweredchainconstraint>(blofeld::infinite::s_i343physicsmodelpoweredchainconstraint& value)
{
	byteswap(value.constraint_type);
	byteswap(value.constraint_index);
	byteswap(value.motor_x);
	byteswap(value.motor_y);
	byteswap(value.motor_z);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelpoweredchain>(blofeld::infinite::s_i343physicsmodelpoweredchain& value)
{
	byteswap(value.nodes_block);
	byteswap(value.constraints_block);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelragdollmotors>(blofeld::infinite::s_i343physicsmodelragdollmotors& value)
{
	byteswap(value.twist_motor);
	byteswap(value.cone_motor);
	byteswap(value.plane_motor);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodellimitedhingemotors>(blofeld::infinite::s_i343physicsmodellimitedhingemotors& value)
{
	byteswap(value.motor);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelnodeconstraintedgeconstraint>(blofeld::infinite::s_i343physicsmodelnodeconstraintedgeconstraint& value)
{
	byteswap(value.type);
	byteswap(value.index);
	byteswap(value.flags);
	byteswap(value.friction);
	byteswap(value.ragdoll_motors_block);
	byteswap(value.limited_hinge_motors_block);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelnodeconstraintedge>(blofeld::infinite::s_i343physicsmodelnodeconstraintedge& value)
{
	byteswap(value.runtime_material_type_a);
	byteswap(value.runtime_material_type_b);
	byteswap(value.node_a);
	byteswap(value.node_b);
	byteswap(value.constraints_block);
	byteswap(value.node_a_material);
	byteswap(value.node_b_material);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelshapereference>(blofeld::infinite::s_i343physicsmodelshapereference& value)
{
	byteswap(value.shape_type);
	byteswap(value.shape);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelphysicsmodelrigidbody>(blofeld::infinite::s_i343physicsmodelphysicsmodelrigidbody& value)
{
	byteswap(value.node);
	byteswap(value.region);
	byteswap(value.permutation);
	byteswap(value.bouding_sphere_offset);
	byteswap(value.bounding_sphere_radius);
	byteswap(value.flags);
	byteswap(value.motion_type);
	byteswap(value.size);
	byteswap(value.no_phantom_power_alt);
	byteswap(value.collision_layer);
	byteswap(value.inertia_tensor_scale);
	byteswap(value.linear_air_drag);
	byteswap(value.angular_air_drag);
	byteswap(value.center_off_mass_offset);
	byteswap(value.water_physics_x0);
	byteswap(value.water_physics_x1);
	byteswap(value.water_physics_y0);
	byteswap(value.water_physics_y1);
	byteswap(value.water_physics_z0);
	byteswap(value.water_physics_z1);
	byteswap(value.center_of_mass);
	byteswap(value.inertia_tensor_x);
	byteswap(value.inertia_tensor_y);
	byteswap(value.inertia_tensor_z);
	byteswap(value.shape);
	byteswap(value.primitive_collision_layers_block);
	byteswap(value.mass);
	byteswap(value.bounding_sphere_pad);
	byteswap(value.mass_body_override);
	byteswap(value.mass_distribution_override);
	byteswap(value.collision_quality_override_type);
	byteswap(value.runtime_flags);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelmaterial>(blofeld::infinite::s_i343physicsmodelmaterial& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.global_material_name);
	byteswap(value.phantom_type);
	byteswap(value.collision_layer);
	byteswap(value.runtime_collision_layer);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelprimitive>(blofeld::infinite::s_i343physicsmodelprimitive& value)
{
	byteswap(value.name);
	byteswap(value.relative_mass_scale);
	byteswap(value.friction);
	byteswap(value.restitution);
	byteswap(value.volume_);
	byteswap(value.mass);
	byteswap(value.phantom);
	byteswap(value.runtime_material_type);
	byteswap(value.material);
	byteswap(value.material_flags);
	byteswap(value.mass_distribution_index);
	byteswap(value.should_use);
	byteswap(value.collision_layer);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelhavokserializedshape>(blofeld::infinite::s_i343physicsmodelhavokserializedshape& value)
{
	byteswap(value.field_pointer_skip);
	byteswap(value.primitive_block);
	byteswap(value.havok_shape_data);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelhavokserializedmass>(blofeld::infinite::s_i343physicsmodelhavokserializedmass& value)
{
	byteswap(value.field_pointer_skip);
	byteswap(value.havok_serialized_data);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelconstraintbodies>(blofeld::infinite::s_i343physicsmodelconstraintbodies& value)
{
	byteswap(value.name);
	byteswap(value.node_a);
	byteswap(value.node_b);
	byteswap(value.a_scale);
	byteswap(value.a_forward);
	byteswap(value.a_left);
	byteswap(value.a_up);
	byteswap(value.a_position);
	byteswap(value.b_scale);
	byteswap(value.b_forward);
	byteswap(value.b_left);
	byteswap(value.b_up);
	byteswap(value.b_position);
	byteswap(value.edge_index);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelhingeconstraint>(blofeld::infinite::s_i343physicsmodelhingeconstraint& value)
{
	byteswap(value.constraint_bodies);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelragdollconstraint>(blofeld::infinite::s_i343physicsmodelragdollconstraint& value)
{
	byteswap(value.constraint_bodies);
	byteswap(value.min_twist);
	byteswap(value.max_twist);
	byteswap(value.min_cone);
	byteswap(value.max_cone);
	byteswap(value.min_plane);
	byteswap(value.max_plane);
	byteswap(value.max_friciton_torque);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelragdollsubgroupindex>(blofeld::infinite::s_i343physicsmodelragdollsubgroupindex& value)
{
	byteswap(value.node);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelragdollsubgroup>(blofeld::infinite::s_i343physicsmodelragdollsubgroup& value)
{
	byteswap(value.name);
	byteswap(value.nodes_block);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelselfcollisionpair>(blofeld::infinite::s_i343physicsmodelselfcollisionpair& value)
{
	byteswap(value.nodea);
	byteswap(value.nodeb);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelpointtopathcurvepoint>(blofeld::infinite::s_i343physicsmodelpointtopathcurvepoint& value)
{
	byteswap(value.position);
	byteswap(value.t_value);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelpointtopathcurve>(blofeld::infinite::s_i343physicsmodelpointtopathcurve& value)
{
	byteswap(value.name);
	byteswap(value.node_index);
	byteswap(value.points_block);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodellimitedhingeconstraint>(blofeld::infinite::s_i343physicsmodellimitedhingeconstraint& value)
{
	byteswap(value.constraint_bodies);
	byteswap(value.limit_friction);
	byteswap(value.limit_min_angle);
	byteswap(value.limit_max_angle);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelballandsocketconstraint>(blofeld::infinite::s_i343physicsmodelballandsocketconstraint& value)
{
	byteswap(value.constraint_bodies);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelstiffspringconstraint>(blofeld::infinite::s_i343physicsmodelstiffspringconstraint& value)
{
	byteswap(value.constraint_bodies);
	byteswap(value.spring_length);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelprismaticconstraint>(blofeld::infinite::s_i343physicsmodelprismaticconstraint& value)
{
	byteswap(value.constraint_bodies);
	byteswap(value.min_limit);
	byteswap(value.max_limit);
	byteswap(value.max_friction_force);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelrigidbodyblockhandle>(blofeld::infinite::s_i343physicsmodelrigidbodyblockhandle& value)
{
	byteswap(value.rigid_body);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelpermutation>(blofeld::infinite::s_i343physicsmodelpermutation& value)
{
	byteswap(value.name);
	byteswap(value.rigid_bodies_block);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelregion>(blofeld::infinite::s_i343physicsmodelregion& value)
{
	byteswap(value.name);
	byteswap(value.permutations_block);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelnode>(blofeld::infinite::s_i343physicsmodelnode& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.parent);
	byteswap(value.sibling);
	byteswap(value.child);
}

template<> void byteswap<blofeld::infinite::s_i343physicsmodelphysicsmodeldefinition>(blofeld::infinite::s_i343physicsmodelphysicsmodeldefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.mass_override);
	byteswap(value.mass_scale_override);
	byteswap(value.low_freq_deactivation_scale);
	byteswap(value.high_freq_deactivation_scale);
	byteswap(value.import_version);
	byteswap(value.welding_tolerance);
	byteswap(value.damped_spring_motors_block);
	byteswap(value.position_motors_block);
	byteswap(value.phantom_types_block);
	byteswap(value.powered_chains_block);
	byteswap(value.node_edges_block);
	byteswap(value.rigid_bodies_block);
	byteswap(value.materials_block);
	byteswap(value.convex_hulls_block);
	byteswap(value.spheres_block);
	byteswap(value.multi_spheres_block);
	byteswap(value.pills_block);
	byteswap(value.boxes_block);
	byteswap(value.compound_shapes_block);
	byteswap(value.triangles_block);
	byteswap(value.triangle_meshs_block);
	byteswap(value.mass_distributions_block);
	byteswap(value.hinge_constraints_block);
	byteswap(value.ragdoll_constraints_block);
	byteswap(value.ragdoll_subgroups_block);
	byteswap(value.self_collision_pairs_block);
	byteswap(value.point_to_path_curves_block);
	byteswap(value.limited_hinge_constraints_block);
	byteswap(value.ball_and_socket_constraints_block);
	byteswap(value.stiff_spring_constraints_block);
	byteswap(value.prismatic_constraints_block);
	byteswap(value.regions_block);
	byteswap(value.nodes_block);
	byteswap(value.errors_block);
}

template<> void byteswap<blofeld::infinite::s_i343physicsshapedensitythresholds>(blofeld::infinite::s_i343physicsshapedensitythresholds& value)
{
	byteswap(value.shape_density_error_threshold);
	byteswap(value.shape_density_warning_threshold);
}

template<> void byteswap<blofeld::infinite::s_i343physicsphysicsglobalsdefinition>(blofeld::infinite::s_i343physicsphysicsglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.play_collision_thresholds_for_assets);
	byteswap(value.bullet_collision_thresholds_for_assets);
	byteswap(value.play_collision_thresholds_for_levels);
	byteswap(value.bullet_collision_thresholds_for_levels);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicsphysicsmaterial>(blofeld::infinite::s_i343assetphysicsphysicsmaterial& value)
{
	byteswap(value.property_region);
	byteswap(value.flags);
	byteswap(value.phantom_type_name);
	byteswap(value.collision_layer);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicshavokdata>(blofeld::infinite::s_i343assetphysicshavokdata& value)
{
	byteswap(value.flags);
	byteswap(value.mass);
	byteswap(value.center_of_mass_offset);
	byteswap(value.inertial_tensor_scale);
	byteswap(value.linear_air_drag);
	byteswap(value.angular_air_drag);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicsphysicsshape>(blofeld::infinite::s_i343assetphysicsphysicsshape& value)
{
	byteswap(value.name);
	byteswap(value.compound_shape_policy);
	byteswap(value.relative_mass_scale);
	byteswap(value.motion_type);
	byteswap(value.size);
	byteswap(value.bounding_sphere_pad);
	byteswap(value.havok_data_block);
	byteswap(value.collision_layer);
	byteswap(value.collision_quality_override_type);
	byteswap(value.mass_body_override);
	byteswap(value.mass_distribution_override);
	byteswap(value.water_physics_x0);
	byteswap(value.water_physics_x1);
	byteswap(value.water_physics_y0);
	byteswap(value.water_physics_y1);
	byteswap(value.water_physics_z0);
	byteswap(value.water_physics_z1);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicsselfcollisionpair>(blofeld::infinite::s_i343assetphysicsselfcollisionpair& value)
{
	byteswap(value.first_shape_setting);
	byteswap(value.second_shape_setting);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicsphantomtype>(blofeld::infinite::s_i343assetphysicsphantomtype& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.brittle_timer);
	byteswap(value.minimum_size);
	byteswap(value.maximum_size);
	byteswap(value.marker_name);
	byteswap(value.mancannon_launched_object_marker_name);
	byteswap(value.alignment_marker_name);
	byteswap(value.hookes_law_e);
	byteswap(value.linear_dead_radius);
	byteswap(value.center_acceleration);
	byteswap(value.center_maximum_velocity);
	byteswap(value.axis_acceleration);
	byteswap(value.axis_maximum_velocity);
	byteswap(value.direction_acceleration);
	byteswap(value.direction_maximum_velocity);
	byteswap(value.orbit_acceleration);
	byteswap(value.orbit_maximum_velocity);
	byteswap(value.alignment_hookes_law_e);
	byteswap(value.alignment_acceleration);
	byteswap(value.alignment_maximum_velocity);
	byteswap(value.damage_per_second_effect);
	byteswap(value.damage_per_second_visual_material_effects);
	byteswap(value.damage_per_second_sound_material_effects);
	byteswap(value.damage_per_second_object_function);
	byteswap(value.damage_per_second_object_function_threshold);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicsragdollconstraintsettings>(blofeld::infinite::s_i343assetphysicsragdollconstraintsettings& value)
{
	byteswap(value.minimum_twist);
	byteswap(value.maximum_twist);
	byteswap(value.minimum_cone);
	byteswap(value.maximum_cone);
	byteswap(value.minimum_plane);
	byteswap(value.maximum_plane);
	byteswap(value.maximum_friction_torque);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicsmotor>(blofeld::infinite::s_i343assetphysicsmotor& value)
{
	byteswap(value.motor_type);
	byteswap(value.motor_name_reference);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicsragdollmotors>(blofeld::infinite::s_i343assetphysicsragdollmotors& value)
{
	byteswap(value.twist_motor);
	byteswap(value.cone_motor);
	byteswap(value.plane_motor);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicslimitedhingeconstraintsettings>(blofeld::infinite::s_i343assetphysicslimitedhingeconstraintsettings& value)
{
	byteswap(value.limit_friction);
	byteswap(value.limit_minimum_angle);
	byteswap(value.limit_maximum_angle);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicslimitedhingemotor>(blofeld::infinite::s_i343assetphysicslimitedhingemotor& value)
{
	byteswap(value.motor);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicsstiffspringconstraintsettings>(blofeld::infinite::s_i343assetphysicsstiffspringconstraintsettings& value)
{
	byteswap(value.spring_length);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicsprismaticconstraintsettings>(blofeld::infinite::s_i343assetphysicsprismaticconstraintsettings& value)
{
	byteswap(value.minimum_limit);
	byteswap(value.maximum_limit);
	byteswap(value.maximum_friction_force);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicsconstraintsettings>(blofeld::infinite::s_i343assetphysicsconstraintsettings& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value.flags);
	byteswap(value.friction);
	byteswap(value.ragdoll_settings_block);
	byteswap(value.ragdoll_motors_block);
	byteswap(value.limited_hinge_settings_block);
	byteswap(value.limited_hinge_motors_block);
	byteswap(value.stiff_spring_settings_block);
	byteswap(value.prismatic_settings_block);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicsdampedspringmotor>(blofeld::infinite::s_i343assetphysicsdampedspringmotor& value)
{
	byteswap(value.name);
	byteswap(value.maximum_force);
	byteswap(value.minimum_force);
	byteswap(value.spring_k);
	byteswap(value.damping);
	byteswap(value.initial_position);
}

template<> void byteswap<blofeld::infinite::s_i343assetphysicspositionmotor>(blofeld::infinite::s_i343assetphysicspositionmotor& value)
{
	byteswap(value.name);
	byteswap(value.maximum_force);
	byteswap(value.minimum_force);
	byteswap(value.tau);
	byteswap(value.damping);
	byteswap(value.proportion_recover_velocity);
	byteswap(value.constant_recover_velocity);
	byteswap(value.initial_position);
}

template<> void byteswap<blofeld::infinite::s_assetphysicstag>(blofeld::infinite::s_assetphysicstag& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.mass_override);
	byteswap(value.mass_scale_override);
	byteswap(value.materials_block);
	byteswap(value.shapes_block);
	byteswap(value.self_collision_pairs_block);
	byteswap(value.phantom_types_block);
	byteswap(value.constraints_block);
	byteswap(value.damped_spring_motors_block);
	byteswap(value.position_motors_block);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuiplatformanimationsettings>(blofeld::infinite::s_interfacecustomizationuiplatformanimationsettings& value)
{
	byteswap(value.platfrom_name);
	byteswap(value.platform_type);
	byteswap(value.vertical_animation_offset);
	byteswap(value.transition_time);
	byteswap(value.animation_easing);
	byteswap(value.platform_selection_orientation_offset);
	byteswap(value.default_orientation);
	byteswap(value.platform_camera_point);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuiplatformanimationstag>(blofeld::infinite::s_interfacecustomizationuiplatformanimationstag& value)
{
	byteswap(value.anytag);
	byteswap(value.customization_platform_animation_settings_block);
}

template<> void byteswap<blofeld::infinite::s_i343physicslowceilingcontrol>(blofeld::infinite::s_i343physicslowceilingcontrol& value)
{
	byteswap(value.cast_length);
	byteswap(value.cast_radius);
	byteswap(value.ceiling_normal_max_z);
	byteswap(value.acceleration_max);
}

template<> void byteswap<blofeld::infinite::s_i343physicslowceilingcontroltag>(blofeld::infinite::s_i343physicslowceilingcontroltag& value)
{
	byteswap(value.anytag);
	byteswap(value.lowceiling);
}

template<> void byteswap<blofeld::infinite::s_s_model_customization_player_region_permutation>(blofeld::infinite::s_s_model_customization_player_region_permutation& value)
{
	byteswap(value.region_name);
	byteswap(value.permutation_name);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_model_customization_selection>(blofeld::infinite::s_s_model_customization_selection& value)
{
	byteswap(value.selection_name);
	byteswap(value.customized_bits_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationdefaultpermutationregions>(blofeld::infinite::s_i343objectcustomizationdefaultpermutationregions& value)
{
	byteswap(value.permutation_region);
	byteswap(value.default_permutation_name);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationdefaultregiondata>(blofeld::infinite::s_i343objectcustomizationdefaultregiondata& value)
{
	byteswap(value.title);
	byteswap(value.description);
	byteswap(value.cms_customization_item_type);
	byteswap(value.cms_path);
	byteswap(value.permutation_regions_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectcustomizationdefaultcoredata>(blofeld::infinite::s_i343objectcustomizationdefaultcoredata& value)
{
	byteswap(value.default_theme_name);
	byteswap(value.default_variant_id);
	byteswap(value.default_style_id);
	byteswap(value.title);
	byteswap(value.description);
	byteswap(value.default_rendermodeldefinition);
	byteswap(value.cms_id);
	byteswap(value.permutation_regions_block);
}

template<> void byteswap<blofeld::infinite::s_s_player_model_customization_globals_definition>(blofeld::infinite::s_s_player_model_customization_globals_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.spartan_render_model);
	byteswap(value.elite_render_model);
	byteswap(value.helmet_selections_block);
	byteswap(value.chest_selections_block);
	byteswap(value.elite_selections_block);
	byteswap(value.left_shoulder_block);
	byteswap(value.right_shoulder_block);
	byteswap(value.arms_block);
	byteswap(value.legs_block);
	byteswap(value.unused_5_block);
	byteswap(value.spartan_armor_effect_selections_block);
	byteswap(value.elite_armor_effect_selections_block);
	byteswap(value.male_spartan_selections_block);
	byteswap(value.female_spartan_selections_block);
	byteswap(value.spartan_model_defaults_block);
	byteswap(value.elite_model_defaults_block);
}

template<> void byteswap<blofeld::infinite::s_particledefinitiongpudatagpuconstantregister>(blofeld::infinite::s_particledefinitiongpudatagpuconstantregister& value)
{
	byteswap(value.runtime_gpu_real);
}

template<> void byteswap<blofeld::infinite::s_c_particle_model_definitions_gpu_datas_variant>(blofeld::infinite::s_c_particle_model_definitions_gpu_datas_variant& value)
{
	byteswap(value.runtime_m_count);
}

template<> void byteswap<blofeld::infinite::s_c_particle_model_definitions_gpu_data>(blofeld::infinite::s_c_particle_model_definitions_gpu_data& value)
{
	byteswap(value.m_variants_block);
}

template<> void byteswap<blofeld::infinite::s_c_particle_model_definition>(blofeld::infinite::s_c_particle_model_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.render_geometry);
	byteswap(value.m_gpu_data);
}

template<> void byteswap<blofeld::infinite::s_particlemovementdefinitiontag>(blofeld::infinite::s_particlemovementdefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value._template);
	byteswap(value.flags);
	byteswap(value.collision_controller_index);
	byteswap(value.turbulence_controller_index);
	byteswap(value.global_force_controller_index);
	byteswap(value.movements_block);
	byteswap(value.turbulence_texture);
}

template<> void byteswap<blofeld::infinite::s_i343personalaicolorpresetdata>(blofeld::infinite::s_i343personalaicolorpresetdata& value)
{
	byteswap(value.color_preset);
	byteswap(value.color_intensity);
	byteswap(value.base_color);
	byteswap(value.glow_color_intensity);
	byteswap(value.glow_color);
	byteswap(value.scanline_pattern);
	byteswap(value.scanline_scale);
	byteswap(value.scanline_speed);
	byteswap(value.face_color_intensity);
	byteswap(value.face_color);
}

template<> void byteswap<blofeld::infinite::s_i343personalaifacialanimationframeeventdata>(blofeld::infinite::s_i343personalaifacialanimationframeeventdata& value)
{
	byteswap(value.bitmap_index);
	byteswap(value.display_frame_length);
}

template<> void byteswap<blofeld::infinite::s_i343personalaianimationdata>(blofeld::infinite::s_i343personalaianimationdata& value)
{
	byteswap(value.animation_type);
	byteswap(value.body_transition_parameter);
	byteswap(value.flags);
	byteswap(value.facial_animation_data_block);
}

template<> void byteswap<blofeld::infinite::s_i343personalaiavatarconfigurationdata>(blofeld::infinite::s_i343personalaiavatarconfigurationdata& value)
{
	byteswap(value.avatar_type);
	byteswap(value.avatar_variant_name);
	byteswap(value.facial_bitmap_index_count);
	byteswap(value.facial_animation_parameter);
	byteswap(value.effect_on_spawn_delay);
	byteswap(value.effect_on_despawn_delay);
	byteswap(value.animations_block);
}

template<> void byteswap<blofeld::infinite::s_i343personalaipersonalaiglobalsdefinition>(blofeld::infinite::s_i343personalaipersonalaiglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.effect_on_spawn_duration);
	byteswap(value.effect_on_despawn_duration);
	byteswap(value.gaze_return_orientation_speed);
	byteswap(value.initial_gaze_duration);
	byteswap(value.maximum_base_color_intensity);
	byteswap(value.maximum_face_color_intensity);
	byteswap(value.maximum_glow_color_intensity);
	byteswap(value.maximum_scanline_scale);
	byteswap(value.maximum_scanline_speed);
	byteswap(value.scanline_pattern_count);
	byteswap(value.color_preset_definitions_block);
	byteswap(value.avatar_configurations_block);
}

template<> void byteswap<blofeld::infinite::s_physicsphantomindices>(blofeld::infinite::s_physicsphantomindices& value)
{
	byteswap(value.phantom_index);
}

template<> void byteswap<blofeld::infinite::s_physicsphantomsoundeventpair>(blofeld::infinite::s_physicsphantomsoundeventpair& value)
{
	byteswap(value.object_type);
	byteswap(value.enter_event);
	byteswap(value.exit_event);
	byteswap(value.restrict_to_phantoms_block);
}

template<> void byteswap<blofeld::infinite::s_physicsphantomsoundtagpair>(blofeld::infinite::s_physicsphantomsoundtagpair& value)
{
	byteswap(value.object_type);
	byteswap(value.enter_sound_tag);
	byteswap(value.exit_sound_tag);
	byteswap(value.restrict_to_phantoms_block);
}

template<> void byteswap<blofeld::infinite::s_physicsphantomssounddefinition>(blofeld::infinite::s_physicsphantomssounddefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.sound_events_block);
	byteswap(value.biped_travel_event);
	byteswap(value.legacy_sound_tags_block);
	byteswap(value.legacy_biped_travel_tag);
	byteswap(value.biped_launch_sound);
	byteswap(value.biped_launch_sound___player);
	byteswap(value.vehicle_launch_sound);
	byteswap(value.grenade_launch_sound);
}

template<> void byteswap<blofeld::infinite::s_point_physics_definition>(blofeld::infinite::s_point_physics_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.runtime_mass_over_radius_cubed);
	byteswap(value.runtime_inverse_density);
	byteswap(value.ignore1);
	byteswap(value.ignore2);
	byteswap(value.ignore3);
	byteswap(value.ignore4);
	byteswap(value.ignore5);
	byteswap(value.density);
	byteswap(value.air_friction);
	byteswap(value.water_friction);
	byteswap(value.surface_friction);
	byteswap(value.elasticity);
}

template<> void byteswap<blofeld::infinite::s_prefabmaterialoverridevariant>(blofeld::infinite::s_prefabmaterialoverridevariant& value)
{
	byteswap(value.material_override_variant_name);
	byteswap(value.material_override_entries_block);
}

template<> void byteswap<blofeld::infinite::s_structure_prefab>(blofeld::infinite::s_structure_prefab& value)
{
	byteswap(value.anytag);
	byteswap(value.bsp_reference);
	byteswap(value.material_overrides_block);
}

template<> void byteswap<blofeld::infinite::s_projectileflybytag>(blofeld::infinite::s_projectileflybytag& value)
{
	byteswap(value.anytag);
	byteswap(value.flyby_enter_sound);
	byteswap(value.flyby_exit_sound);
	byteswap(value.flyby_switch_container_name);
	byteswap(value.flyby_sound_variations);
	byteswap(value.avoid_repeating_the_last);
	byteswap(value.flyby_sound_stereo_width_pan);
	byteswap(value.flyby_sound_enter_offset);
	byteswap(value.flyby_sound_exit_offset);
}

template<> void byteswap<blofeld::infinite::s_i343projectilesmaterialresponsedefinition>(blofeld::infinite::s_i343projectilesmaterialresponsedefinition& value)
{
	byteswap(value.material_name);
	byteswap(value.runtime_material_index);
	byteswap(value.response_flags);
	byteswap(value.chance_fraction);
	byteswap(value.between);
	byteswap(value._and);
	byteswap(value.response$2);
	byteswap(value.scale_effects_by);
	byteswap(value.angular_noise);
	byteswap(value.velocity_noise);
	byteswap(value.initial_friction);
	byteswap(value.parallel_friction);
	byteswap(value.perpendicular_friction);
	byteswap(value.misc_flags);
}

template<> void byteswap<blofeld::infinite::s_i343projectilesprojectilematerialresponsedefinition>(blofeld::infinite::s_i343projectilesprojectilematerialresponsedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.material_response_block);
}

template<> void byteswap<blofeld::infinite::s_superdetonationdamagestruct>(blofeld::infinite::s_superdetonationdamagestruct& value)
{
	byteswap(value.super_detonation_damage);
}

template<> void byteswap<blofeld::infinite::s_angularvelocitylowerboundstructdeprecated>(blofeld::infinite::s_angularvelocitylowerboundstructdeprecated& value)
{
	byteswap(value.guided_angular_velocity_lower);
}

template<> void byteswap<blofeld::infinite::s_i343projectilesdeprecatedprojectilematerialresponsedefinitionv0>(blofeld::infinite::s_i343projectilesdeprecatedprojectilematerialresponsedefinitionv0& value)
{
	byteswap(value.default_response);
	byteswap(value.material_name);
	byteswap(value.runtime_material_index);
	byteswap(value.potential_response);
	byteswap(value.response_flags);
	byteswap(value.chance_fraction);
	byteswap(value.between);
	byteswap(value._and);
	byteswap(value.scale_effects_by);
	byteswap(value.angular_noise);
	byteswap(value.velocity_noise);
	byteswap(value.initial_friction);
	byteswap(value.parallel_friction);
	byteswap(value.perpendicular_friction);
}

template<> void byteswap<blofeld::infinite::s_projectileangularrotationdefinition>(blofeld::infinite::s_projectileangularrotationdefinition& value)
{
	byteswap(value.minimum_angular_vel);
	byteswap(value.maximum_angular_vel);
	byteswap(value.spin_angular_vel);
	byteswap(value.angular_damping);
	byteswap(value.drag_angle_constant);
	byteswap(value.drag_speed_constant);
	byteswap(value.drag_exponent);
	byteswap(value.attach_sample_radius);
	byteswap(value.attach_acceleration_constant);
	byteswap(value.attach_acceleration_scalar);
	byteswap(value.attach_acceleration_exponent);
	byteswap(value.attach_acceleration_damping);
}

template<> void byteswap<blofeld::infinite::s_s_projectile_fire_bomb_grenade_definition>(blofeld::infinite::s_s_projectile_fire_bomb_grenade_definition& value)
{
	byteswap(value.projection_offset);
}

template<> void byteswap<blofeld::infinite::s_s_projectile_conical_projection_defintion>(blofeld::infinite::s_s_projectile_conical_projection_defintion& value)
{
	byteswap(value.yaw_count);
	byteswap(value.pitch_count);
	byteswap(value.distribution_exponent);
	byteswap(value.spread);
	byteswap(value.per_conical_projectile_firing_effect);
}

template<> void byteswap<blofeld::infinite::s_projectilesoundrtpcblockdefinition>(blofeld::infinite::s_projectilesoundrtpcblockdefinition& value)
{
	byteswap(value.attachment_index);
	byteswap(value.function);
	byteswap(value.rtpc_name);
}

template<> void byteswap<blofeld::infinite::s_i343projectilestargetacquisitiondefinition>(blofeld::infinite::s_i343projectilestargetacquisitiondefinition& value)
{
	byteswap(value.evaluation_order$2);
	byteswap(value.filter_flags);
	byteswap(value.target_types);
	byteswap(value.near_distance);
	byteswap(value.orientation_check_distance);
	byteswap(value.max_deviation_at_near_distance);
	byteswap(value.max_deviation_at_far_distance);
	byteswap(value.probability_at_near_distance);
	byteswap(value.probability_at_far_distance);
	byteswap(value.ai_probability_modifier);
	byteswap(value.spread_at_near_distance);
	byteswap(value.spread_at_far_distance);
}

template<> void byteswap<blofeld::infinite::s_i343projectilessubmunitioneventdefinition>(blofeld::infinite::s_i343projectilessubmunitioneventdefinition& value)
{
	byteswap(value.type);
	byteswap(value.count);
	byteswap(value.network_prediction);
	byteswap(value.placement);
	byteswap(value.orientation);
	byteswap(value.trigger);
	byteswap(value.flags);
	byteswap(value.crit_mode);
	byteswap(value.max_recursion_depth);
	byteswap(value.delay_bounds);
	byteswap(value.inherited_velocity);
	byteswap(value.initial_velocity_bounds);
	byteswap(value.damage_scale);
	byteswap(value.relative_offset);
	byteswap(value.offset_variance);
	byteswap(value.radius_bounds);
	byteswap(value.individual_variance);
	byteswap(value.relative_orientation);
	byteswap(value.orientation_variance);
	byteswap(value.biped_orientation_flags);
	byteswap(value.unique_target_bucket_id);
	byteswap(value.target_acquisition);
	byteswap(value.hit_object_validation);
}

template<> void byteswap<blofeld::infinite::s_projectile_definition>(blofeld::infinite::s_projectile_definition& value)
{
	byteswap(value.object);
	byteswap(value.flags);
	byteswap(value.secondary_flags);
	byteswap(value.detonation_timer_starts);
	byteswap(value.impact_noise);
	byteswap(value.detonation_biped_proximity);
	byteswap(value.air_burst_proximity);
	byteswap(value.max_lifetime_to_detonate);
	byteswap(value.extent_____to_which_max_lifetime_may_vary);
	byteswap(value.collision_radius);
	byteswap(value.arming_time);
	byteswap(value.danger_radius);
	byteswap(value.danger_stimuli_radius);
	byteswap(value.danger_group_burst_count);
	byteswap(value.danger_group_burst_max_count);
	byteswap(value.timer);
	byteswap(value.minimum_velocity);
	byteswap(value.maximum_range);
	byteswap(value.bounce_maximum_range);
	byteswap(value.max_latch_time_to_detonate);
	byteswap(value.max_latch_time_to_arm);
	byteswap(value.sequenced_detonation_direction);
	byteswap(value.time_between_sequenced_detonations);
	byteswap(value.detonation_noise);
	byteswap(value.super_combine_contribution);
	byteswap(value.super_det_projectile_count);
	byteswap(value.super_det_time);
	byteswap(value.tether_release_safety_delay);
	byteswap(value.detonation_started);
	byteswap(value.detonation_effect_airborne);
	byteswap(value.detonation_effect_ground);
	byteswap(value.detonation_damage);
	byteswap(value.attached_detonation_damage);
	byteswap(value.attached_continuous_effect);
	byteswap(value.attached_continuous_damage);
	byteswap(value.attached_continuous_damage_period);
	byteswap(value.super_combine_definition);
	byteswap(value.tag_graph_output);
	byteswap(value.output_node_name);
	byteswap(value.float_params_block);
	byteswap(value.super_detonation);
	byteswap(value.your_momma);
	byteswap(value.detonation_sound);
	byteswap(value.super_detonation_sound);
	byteswap(value.submerged_detonation_sound);
	byteswap(value.super_detonation_object_types);
	byteswap(value.super_attached_detonation_damage);
	byteswap(value.material_effect_radius);
	byteswap(value.material_effect_bounce_hard_speed_threshold);
	byteswap(value.material_effect_bounce_medium_speed_threshold);
	byteswap(value.flyby_sound_reference);
	byteswap(value.flyby_damage_response);
	byteswap(value.flyby_damage_response_max_distance);
	byteswap(value.chaining_attach_effect);
	byteswap(value.chaining_attach_end_marker);
	byteswap(value.chaining_attach_start_marker);
	byteswap(value.impact_effect);
	byteswap(value.object_impact_effect);
	byteswap(value.impact_damage);
	byteswap(value.impact_tag_graph_output);
	byteswap(value.impact_output_node_name);
	byteswap(value.impact_float_params_block);
	byteswap(value.boarding_detonation_time);
	byteswap(value.boarding_detonation_damage);
	byteswap(value.boarding_attached_detonation_damage);
	byteswap(value.air_gravity_scale);
	byteswap(value.air_damage_range);
	byteswap(value.water_gravity_scale);
	byteswap(value.water_damage_range);
	byteswap(value.initial_velocity);
	byteswap(value.final_velocity);
	byteswap(value.indirect_fire_velocity);
	byteswap(value.ai_velocity_scale_normal);
	byteswap(value.ai_velocity_scale_heroic);
	byteswap(value.ai_velocity_scale_legendary);
	byteswap(value.ai_guided_angular_velocity_scale_normal);
	byteswap(value.ai_guided_angular_velocity_scale_legendary);
	byteswap(value.blah);
	byteswap(value.guided_angular_velocity_upper);
	byteswap(value.guided_angular_velocity_random_range);
	byteswap(value.guided_angular_velocity_at_rest);
	byteswap(value.acceleration_range);
	byteswap(value.runtime_acceleration_bound_inverse);
	byteswap(value.ai_target_leading_scale_easy);
	byteswap(value.ai_target_leading_scale_normal);
	byteswap(value.ai_target_leading_scale_heroic);
	byteswap(value.ai_target_leading_scale_legendary);
	byteswap(value.targeted_leading_fraction);
	byteswap(value.guided_projectile_outer_range_error_radius);
	byteswap(value.autoaim_leading_max_lead_time);
	byteswap(value.material_response_reference);
	byteswap(value.old_material_responses_block);
	byteswap(value.material_response_block);
	byteswap(value.brute_grenade_block);
	byteswap(value.fire_bomb_grenade_block);
	byteswap(value.conical_spread_block);
	byteswap(value.grounded_friction_settings);
	byteswap(value.killcam_projectile_camera_offsets);
	byteswap(value.sound_rtpcs_block);
	byteswap(value.sound_projectile_rtpc_weight);
	byteswap(value.submunition_events_block);
	byteswap(value.target_selection_condition);
	byteswap(value.target_selection);
	byteswap(value.charged_detonation_damage);
	byteswap(value.charged_impact_damage);
	byteswap(value.charged_visual_effect);
	byteswap(value.charged_detonation_effect);
	byteswap(value.charged_damage_scale);
}

template<> void byteswap<blofeld::infinite::s_propspawnentry>(blofeld::infinite::s_propspawnentry& value)
{
	byteswap(value.object_definition);
	byteswap(value.position_offset);
	byteswap(value.yaw_pitch);
}

template<> void byteswap<blofeld::infinite::s_propspawntemplate>(blofeld::infinite::s_propspawntemplate& value)
{
	byteswap(value.anytag);
	byteswap(value.prop_entries_block);
}

template<> void byteswap<blofeld::infinite::s_particledefinitiongpudatas_sprite>(blofeld::infinite::s_particledefinitiongpudatas_sprite& value)
{
	byteswap(value.runtime_gpu_sprite_array);
}

template<> void byteswap<blofeld::infinite::s_particledefinitiongpudata>(blofeld::infinite::s_particledefinitiongpudata& value)
{
	byteswap(value.runtime_m_sprite_block);
}

template<> void byteswap<blofeld::infinite::s_c_particle_definition_tag>(blofeld::infinite::s_c_particle_definition_tag& value)
{
	byteswap(value.anytag);
	byteswap(value.appearance_flags);
	byteswap(value.particle_billboard_style);
	byteswap(value.pad);
	byteswap(value.center_offset);
	byteswap(value.actual_material);
	byteswap(value.tint_factor);
	byteswap(value.asset);
	byteswap(value.model);
	byteswap(value.runtime_m_gpu_data);
	byteswap(value.m_pipelinestates);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentparticleshadergraphcontenttag>(blofeld::infinite::s_nodegraphcontentparticleshadergraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_i343aisquadconstructionpassengercellentry>(blofeld::infinite::s_i343aisquadconstructionpassengercellentry& value)
{
	byteswap(value.actorcellentrytag);
	byteswap(value.seat_preference);
}

template<> void byteswap<blofeld::infinite::s_shaderreference>(blofeld::infinite::s_shaderreference& value)
{
	byteswap(value.shader_bytecode);
}

template<> void byteswap<blofeld::infinite::s_i343graphicspipelinestateprecachedata>(blofeld::infinite::s_i343graphicspipelinestateprecachedata& value)
{
	byteswap(value.shaderbytecodes);
	byteswap(value.rootsignature);
	byteswap(value.numreferences);
	byteswap(value.vertextype);
	byteswap(value.rasterizeroutputtype);
	byteswap(value.rasterizermode);
	byteswap(value.blendmode);
	byteswap(value.depthstencilmode);
	byteswap(value.primitivetopologytype);
}

template<> void byteswap<blofeld::infinite::s_i343graphicspipelinestatetypedata>(blofeld::infinite::s_i343graphicspipelinestatetypedata& value)
{
	byteswap(value.psodata_block);
}

template<> void byteswap<blofeld::infinite::s_i343graphicspipelinestatebucketdata>(blofeld::infinite::s_i343graphicspipelinestatebucketdata& value)
{
	byteswap(value.psodata);
}

template<> void byteswap<blofeld::infinite::s_i343graphicspipelinestatedictionary>(blofeld::infinite::s_i343graphicspipelinestatedictionary& value)
{
	byteswap(value.anytag);
	byteswap(value.psobucketdata);
	byteswap(value.numpipelinestates);
}

template<> void byteswap<blofeld::infinite::s_i343poweruppowerupdefinition>(blofeld::infinite::s_i343poweruppowerupdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.type);
	byteswap(value.color);
	byteswap(value.ui_fill_meter_color);
	byteswap(value.ui_backer_bitmap_color);
	byteswap(value.generic_modifiers);
}

template<> void byteswap<blofeld::infinite::s_i343scenariozonesetbakedpvssubregionlongparam>(blofeld::infinite::s_i343scenariozonesetbakedpvssubregionlongparam& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_i343scenariozonesetbakedpvssubregiondwordparam>(blofeld::infinite::s_i343scenariozonesetbakedpvssubregiondwordparam& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_i343scenariozonesetbakedpvssubregion>(blofeld::infinite::s_i343scenariozonesetbakedpvssubregion& value)
{
	byteswap(value.visibility_array_block);
	byteswap(value.sx);
	byteswap(value.sy);
	byteswap(value.z_min);
	byteswap(value.z_max);
}

template<> void byteswap<blofeld::infinite::s_i343scenariozonesetbakedpvsperbspdata>(blofeld::infinite::s_i343scenariozonesetbakedpvsperbspdata& value)
{
	byteswap(value.subregion_array_block);
	byteswap(value.aabb_min);
	byteswap(value.aabb_max);
	byteswap(value.block_size);
	byteswap(value.instance_count);
	byteswap(value.block_count_x);
	byteswap(value.block_count_y);
	byteswap(value.bsp_index);
	byteswap(value.instance_postprocess_checksum);
}

template<> void byteswap<blofeld::infinite::s_i343scenariozonesetbakedpvsbakedpvstag>(blofeld::infinite::s_i343scenariozonesetbakedpvsbakedpvstag& value)
{
	byteswap(value.anytag);
	byteswap(value.bsp_index_map_block);
	byteswap(value.per_bsp_data_block);
	byteswap(value.resource_data);
}

template<> void byteswap<blofeld::infinite::s_globalbitmaps>(blofeld::infinite::s_globalbitmaps& value)
{
	byteswap(value.default_bitmaps);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsglobalmaterial>(blofeld::infinite::s_i343graphicsglobalmaterial& value)
{
	byteswap(value.name);
	byteswap(value.material);
	byteswap(value.ptr_psos);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsdisplayoutputtransform>(blofeld::infinite::s_i343graphicsdisplayoutputtransform& value)
{
	byteswap(value.display_output_preset_name);
	byteswap(value.reference_rendering_transform);
	byteswap(value.hdr_to_ldr_lut);
	byteswap(value.hdr_output_lut);
}

template<> void byteswap<blofeld::infinite::s_rasterizerglobalstag>(blofeld::infinite::s_rasterizerglobalstag& value)
{
	byteswap(value.anytag);
	byteswap(value.default_bitmaps_block);
	byteswap(value.explicit_shader_table);
	byteswap(value.global_materials_block);
	byteswap(value.default_performance_throttles);
	byteswap(value.default_scenario_render_data);
	byteswap(value.cheap_particle_type_library);
	byteswap(value.display_output_transformations_block);
	byteswap(value.hdr_bloom_intensity_scale);
	byteswap(value.bloom_max_pixel_intensity);
	byteswap(value.max_blur);
	byteswap(value.blur_scale);
	byteswap(value.center_falloff_x);
	byteswap(value.center_falloff_y);
	byteswap(value.hologram_camera_fx);
	byteswap(value.airprobe_render_model);
	byteswap(value.debug_lighting_value);
	byteswap(value.albedo_clip_min);
	byteswap(value.albedo_clip_max);
	byteswap(value.post_process_graph);
	byteswap(value.default_ripple_definition);
	byteswap(value.subsurface_scatter_profile_tag);
	byteswap(value.empty_swatch_tag);
	byteswap(value.hair_profile_tag);
	byteswap(value.pso_dictionary);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsrendergraphparameterdefinition>(blofeld::infinite::s_i343graphicsrendergraphparameterdefinition& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value._int);
	byteswap(value._float);
	byteswap(value.float3);
	byteswap(value._tag);
	byteswap(value.datapath);
	byteswap(value._string);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsrendergraphparameterdefinitionb>(blofeld::infinite::s_i343graphicsrendergraphparameterdefinitionb& value)
{
	byteswap(value.parameter);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsrendergrapheditormetadatadefinition>(blofeld::infinite::s_i343graphicsrendergrapheditormetadatadefinition& value)
{
	byteswap(value.ui_position);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsrendergraphnodedefinition>(blofeld::infinite::s_i343graphicsrendergraphnodedefinition& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value.parameters_block);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsrendergraphconnectiondefinition>(blofeld::infinite::s_i343graphicsrendergraphconnectiondefinition& value)
{
	byteswap(value.from_graph_input);
	byteswap(value.from_node);
	byteswap(value.from_output_name);
	byteswap(value.from_output_index);
	byteswap(value.from_output_key);
	byteswap(value.from_graph_constant);
	byteswap(value.to_node);
	byteswap(value.to_input_name);
	byteswap(value.to_input_index);
	byteswap(value.to_input_key);
	byteswap(value.to_graph_output);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsrendergraphuienumvaluedefinition>(blofeld::infinite::s_i343graphicsrendergraphuienumvaluedefinition& value)
{
	byteswap(value.display_name);
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsrendergraphuipropertydefinition>(blofeld::infinite::s_i343graphicsrendergraphuipropertydefinition& value)
{
	byteswap(value.flags);
	byteswap(value.display_name);
	byteswap(value.description);
	byteswap(value.category);
	byteswap(value.order);
	byteswap(value.type);
	byteswap(value.range_min);
	byteswap(value.range_min_setting);
	byteswap(value.range_max);
	byteswap(value.range_max_setting);
	byteswap(value.enum_values_block);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsrendergraphinputdefinition>(blofeld::infinite::s_i343graphicsrendergraphinputdefinition& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value.ui_property_block);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsrendergraphoutputdefinition>(blofeld::infinite::s_i343graphicsrendergraphoutputdefinition& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsrendergraphconstantdefinition>(blofeld::infinite::s_i343graphicsrendergraphconstantdefinition& value)
{
	byteswap(value.parameter);
	byteswap(value.editormetadata_block);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsrendergraphgraphdefinition>(blofeld::infinite::s_i343graphicsrendergraphgraphdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.nodes_block);
	byteswap(value.connections_block);
	byteswap(value.inputs_block);
	byteswap(value.outputs_block);
	byteswap(value.constants_block);
	byteswap(value.rendergraph);
}

template<> void byteswap<blofeld::infinite::s_s_rumble_frequency_definition>(blofeld::infinite::s_s_rumble_frequency_definition& value)
{
	byteswap(value.duration);
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_s_rumble_definition_dummy>(blofeld::infinite::s_s_rumble_definition_dummy& value)
{
	byteswap(value.rumble_flags);
	byteswap(value.low_frequency_rumble$2);
	byteswap(value.high_frequency_rumble$2);
	byteswap(value.primary_trigger_rumble$2);
	byteswap(value.secondary_trigger_rumble$2);
}

template<> void byteswap<blofeld::infinite::s_s_rumble_definition>(blofeld::infinite::s_s_rumble_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.rumble);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentrendergraphcontenttag>(blofeld::infinite::s_nodegraphcontentrendergraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_i343surfacinginput>(blofeld::infinite::s_i343surfacinginput& value)
{
	byteswap(value.type);
	byteswap(value.id);
	byteswap(value.default_value);
	byteswap(value.bitmap_reference);
	byteswap(value.uv_scale);
}

template<> void byteswap<blofeld::infinite::s_i343surfacingmateriallayer>(blofeld::infinite::s_i343surfacingmateriallayer& value)
{
	byteswap(value.id);
	byteswap(value.index);
	byteswap(value.gpu_interpreter_instructions);
	byteswap(value.material_preset);
	byteswap(value.physicsmaterialid);
}

template<> void byteswap<blofeld::infinite::s_i343surfacingplacementdescription>(blofeld::infinite::s_i343surfacingplacementdescription& value)
{
	byteswap(value.id);
	byteswap(value.gpu_interpreter_density_instructions);
	byteswap(value.gpu_interpreter_scale_instructions);
	byteswap(value.runtime_tag_reference);
	byteswap(value.content_tag_reference);
	byteswap(value.positionz_offset_range);
	byteswap(value.scale_range);
	byteswap(value.rotation_range);
	byteswap(value.orientation_alignment);
	byteswap(value.cull_distance_scale);
	byteswap(value.density_multiplier);
	byteswap(value.variant_name);
	byteswap(value.debug_color);
	byteswap(value.precompiled_technique_index);
	byteswap(value.distance_dither_start);
	byteswap(value.distance_dither_transition_width);
}

template<> void byteswap<blofeld::infinite::s_i343surfacingplacementlayer>(blofeld::infinite::s_i343surfacingplacementlayer& value)
{
	byteswap(value.placement_descriptions_block);
	byteswap(value.footprint_radius);
}

template<> void byteswap<blofeld::infinite::s_i343gpuinterpreterinstruction>(blofeld::infinite::s_i343gpuinterpreterinstruction& value)
{
	byteswap(value.data);
}

template<> void byteswap<blofeld::infinite::s_i343layergpuinterpreterbytecode>(blofeld::infinite::s_i343layergpuinterpreterbytecode& value)
{
	byteswap(value.hash);
	byteswap(value.gpu_interpreter_instructions_block);
}

template<> void byteswap<blofeld::infinite::s_i343surfacingruntimetag>(blofeld::infinite::s_i343surfacingruntimetag& value)
{
	byteswap(value.anytag);
	byteswap(value.inputs_block);
	byteswap(value.material_layers_block);
	byteswap(value.placement_layers_block);
	byteswap(value.layers_bytecode_block);
}

template<> void byteswap<blofeld::infinite::s_runtimegeopermeshdata>(blofeld::infinite::s_runtimegeopermeshdata& value)
{
	byteswap(value.name);
	byteswap(value.mesh_index);
	byteswap(value.per_mesh_flags);
	byteswap(value.lightmapping_policy);
	byteswap(value.scale);
	byteswap(value.forward);
	byteswap(value.left);
	byteswap(value.up);
	byteswap(value.position);
	byteswap(value.bounds_min);
	byteswap(value.bounds_max);
	byteswap(value.bounding_sphere_center);
	byteswap(value.bounding_sphere_radius);
	byteswap(value.lod_levels_block);
	byteswap(value.fade_out_after_distance);
	byteswap(value.mesh_checksum);
}

template<> void byteswap<blofeld::infinite::s_staticgeomarker>(blofeld::infinite::s_staticgeomarker& value)
{
	byteswap(value.translation);
	byteswap(value.rotation);
}

template<> void byteswap<blofeld::infinite::s_staticgeomarkergroup>(blofeld::infinite::s_staticgeomarkergroup& value)
{
	byteswap(value.name);
	byteswap(value.markers_block);
}

template<> void byteswap<blofeld::infinite::s_runtimegeotag>(blofeld::infinite::s_runtimegeotag& value)
{
	byteswap(value.anytag);
	byteswap(value.per_mesh_data_block);
	byteswap(value.render_geometry);
	byteswap(value.marker_groups_block);
	byteswap(value.asset_category_name);
	byteswap(value.asset_category_index);
}

template<> void byteswap<blofeld::infinite::s_scenario_layer_reference>(blofeld::infinite::s_scenario_layer_reference& value)
{
	byteswap(value._tag);
	byteswap(value.editor_display_name);
	byteswap(value.layer_usage_flags);
}

template<> void byteswap<blofeld::infinite::s_runtimelayertag>(blofeld::infinite::s_runtimelayertag& value)
{
	byteswap(value.levelobjects);
	byteswap(value.child_layers_block);
}

template<> void byteswap<blofeld::infinite::s_runtimematerialpalettetag>(blofeld::infinite::s_runtimematerialpalettetag& value)
{
	byteswap(value.anytag);
	byteswap(value.palette_block);
	byteswap(value.style_id);
	byteswap(value.damage_style_index);
}

template<> void byteswap<blofeld::infinite::s_i343physicsterraincollisiongeoentry>(blofeld::infinite::s_i343physicsterraincollisiongeoentry& value)
{
	byteswap(value.terraincollisioncellgeotag);
}

template<> void byteswap<blofeld::infinite::s_i343terrainnodelayerindex>(blofeld::infinite::s_i343terrainnodelayerindex& value)
{
	byteswap(value.node_shared_index);
}

template<> void byteswap<blofeld::infinite::s_i343terrainquadtreenodebitmapremapinfo>(blofeld::infinite::s_i343terrainquadtreenodebitmapremapinfo& value)
{
	byteswap(value.texture_index);
	byteswap(value.channel_masks);
	byteswap(value.solid_color);
}

template<> void byteswap<blofeld::infinite::s_i343terrainnodebitmapindex>(blofeld::infinite::s_i343terrainnodebitmapindex& value)
{
	byteswap(value.index);
}

template<> void byteswap<blofeld::infinite::s_i343surfacingtexturedata>(blofeld::infinite::s_i343surfacingtexturedata& value)
{
	byteswap(value.output_id);
	byteswap(value.bitmap_index);
	byteswap(value.red_channel);
	byteswap(value.green_channel);
	byteswap(value.blue_channel);
	byteswap(value.alpha_channel);
}

template<> void byteswap<blofeld::infinite::s_i343terrainquadtreenodedata>(blofeld::infinite::s_i343terrainquadtreenodedata& value)
{
	byteswap(value.material_layers_indices_block);
	byteswap(value.texture_remap_info_block);
	byteswap(value.placement_layers_block);
	byteswap(value.input_bitmap_indices_block);
	byteswap(value.min_height_value);
	byteswap(value.max_height_value);
	byteswap(value.input_texture_data_block);
	byteswap(value.unoptimized_instructions_count);
}

template<> void byteswap<blofeld::infinite::s_i343terraingeneratedoutputbitmapdescription>(blofeld::infinite::s_i343terraingeneratedoutputbitmapdescription& value)
{
	byteswap(value.bitmap_reference_index);
	byteswap(value.scale_of_the_uv_transform);
}

template<> void byteswap<blofeld::infinite::s_i343terraingeneratedoutputreference>(blofeld::infinite::s_i343terraingeneratedoutputreference& value)
{
	byteswap(value.id);
	byteswap(value.output_bitmap_references);
}

template<> void byteswap<blofeld::infinite::s_i343gpumateriallayerbitmapreference>(blofeld::infinite::s_i343gpumateriallayerbitmapreference& value)
{
	byteswap(value.offset_in_bytes);
	byteswap(value.bitmap_reference);
}

template<> void byteswap<blofeld::infinite::s_i343sharedgpuinterpreterbitmapreference>(blofeld::infinite::s_i343sharedgpuinterpreterbitmapreference& value)
{
	byteswap(value.bitmap_reference);
	byteswap(value.uv_scale);
}

template<> void byteswap<blofeld::infinite::s_s_basic_spec_control_setting_int>(blofeld::infinite::s_s_basic_spec_control_setting_int& value)
{
	byteswap(value.very_low);
	byteswap(value.low);
	byteswap(value.medium);
	byteswap(value.high);
	byteswap(value.ultra);
	byteswap(value._2_player_splitscreen);
	byteswap(value._3_player_splitscreen);
	byteswap(value._4_player_splitscreen);
}

template<> void byteswap<blofeld::infinite::s_i343terrainruntimetag>(blofeld::infinite::s_i343terrainruntimetag& value)
{
	byteswap(value.anytag);
	byteswap(value.bitmap);
	byteswap(value.terraincollisiongeotag_cells_block);
	byteswap(value.render_material);
	byteswap(value.masks_composite_material);
	byteswap(value.quad_tree_lod_resolution);
	byteswap(value.quad_tree_level_count);
	byteswap(value.quad_tree_collision_data_level);
	byteswap(value.quad_tree_position);
	byteswap(value.quad_tree_size);
	byteswap(value.quad_tree_node_data_block);
	byteswap(value.material_layer_ids_block);
	byteswap(value.placements_layers_count);
	byteswap(value.placements_precompiled_techniques_first_index);
	byteswap(value.material_layer_bitmap_references_block);
	byteswap(value.shared_gpu_interpreter_bitmap_references_block);
	byteswap(value.shared_gpu_interpreter_instructions_block);
	byteswap(value.shared_node_material_layers_block);
	byteswap(value.material_layer_data);
	byteswap(value.macro_color_near_distance);
	byteswap(value.macro_color_far_distance);
	byteswap(value.macro_color_near_opacity);
	byteswap(value.macro_color_far_opacity);
	byteswap(value.micro_height_vertex_density);
	byteswap(value.micro_height_radius);
	byteswap(value.micro_height_mip_level);
	byteswap(value.micro_height_scale);
	byteswap(value.runtime_terrain_system);
	byteswap(value.m_pipelinestates);
}

template<> void byteswap<blofeld::infinite::s_s_render_water_ripple_definition>(blofeld::infinite::s_s_render_water_ripple_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.initial_radius);
	byteswap(value.initial_amplitude);
	byteswap(value.spread_speed);
	byteswap(value.speed_bias);
	byteswap(value.position_random_range);
	byteswap(value.max_visibility_distance);
	byteswap(value.duration_max);
	byteswap(value.duration_min);
	byteswap(value.rise_period_ratio);
	byteswap(value.rise_function);
	byteswap(value.descend_function);
	byteswap(value.phase_revolution_speed);
	byteswap(value.phase_repeat_along_radius);
	byteswap(value.pattern_start_idx);
	byteswap(value.pattern_end_idx);
	byteswap(value.pattern_transition);
	byteswap(value.foam_out_radius);
	byteswap(value.foam_fade_distance);
	byteswap(value.foam_duration);
	byteswap(value.foam_rise_function);
	byteswap(value.foam_fade_function);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesspartanabilitycommonparameters>(blofeld::infinite::s_i343spartanabilitiesspartanabilitycommonparameters& value)
{
	byteswap(value.input);
	byteswap(value.flags);
	byteswap(value.activation_energy_cost);
	byteswap(value.active_energy_consumption);
	byteswap(value.recharge_duration);
	byteswap(value.recharge_delay);
	byteswap(value.cooldown_delay);
	byteswap(value.activation_effect);
	byteswap(value.activation_effect_kill_delay);
	byteswap(value.sprint_preservation);
	byteswap(value.active_malleable_property_modifiers);
	byteswap(value.timed_malleable_property_modifiers);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesboostjumpdefinition>(blofeld::infinite::s_i343spartanabilitiesboostjumpdefinition& value)
{
	byteswap(value.common_ability_parameters);
	byteswap(value.flags);
	byteswap(value.acceleration_time$2);
	byteswap(value.velocity_cap);
	byteswap(value.acceleration);
	byteswap(value.acceleration_scalar);
	byteswap(value.acceleration_xy$2);
	byteswap(value.acceleration_scalar_xy);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesboostjumpdefinitiontag>(blofeld::infinite::s_i343spartanabilitiesboostjumpdefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.boostjump);
}

template<> void byteswap<blofeld::infinite::s_s_spring_acceleration_linear_definition>(blofeld::infinite::s_s_spring_acceleration_linear_definition& value)
{
	byteswap(value.acceleration_range);
	byteswap(value.inverse_acceleration_range);
	byteswap(value.world_acceleration_scale);
	byteswap(value.spring_damping);
	byteswap(value.velocity_domain);
	byteswap(value.spring_acceleration);
}

template<> void byteswap<blofeld::infinite::s_s_spring_acceleration_definition>(blofeld::infinite::s_s_spring_acceleration_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.linear_acceleartions_block);
	byteswap(value.x_axis);
	byteswap(value.y_axis);
	byteswap(value.z_axis);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesevadedefinition>(blofeld::infinite::s_i343spartanabilitiesevadedefinition& value)
{
	byteswap(value.common_ability_parameters);
	byteswap(value.evade_flags);
	byteswap(value.throttle_dead_zone);
	byteswap(value.evade_left_animation);
	byteswap(value.evade_right_animation);
	byteswap(value.evade_forward_animation);
	byteswap(value.evade_backward_animation);
	byteswap(value.evade_duration);
	byteswap(value.evade_exit_sprint_fraction);
	byteswap(value.evade_melee_interrupt_fraction);
	byteswap(value.evade_grenade_interrupt_fraction);
	byteswap(value.speed_function$2);
	byteswap(value.speed_function_scalar$2);
	byteswap(value.forward_speed_modifier);
	byteswap(value.speed_modifier_values);
	byteswap(value.ground_speed_modifier_function$2);
	byteswap(value.air_speed_modifier_function$2);
	byteswap(value.horizontal_camera_offset_function$2);
	byteswap(value.camera_tilt_roll_function$2);
	byteswap(value.camera_tilt_pitch_function$2);
	byteswap(value.fov_delta_function$2);
	byteswap(value.overlay_animation_function$2);
	byteswap(value.maximum_vertical_impulse);
	byteswap(value.maximum_vertical_impulse_speed_threshold);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesevadedefinitiontag>(blofeld::infinite::s_i343spartanabilitiesevadedefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.data);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesgrapplehookdefinition>(blofeld::infinite::s_i343spartanabilitiesgrapplehookdefinition& value)
{
	byteswap(value.common_ability_parameters);
	byteswap(value.grapple_hook_flags);
	byteswap(value.first_person_animation_set);
	byteswap(value.max_aim_vector_angle);
	byteswap(value.animation_yaw_and_pitch_origin_marker);
	byteswap(value.rope_beam_effect);
	byteswap(value.rope_beam_effect_start_marker);
	byteswap(value.pulling_effect);
	byteswap(value.reeling_in_effect);
	byteswap(value.deactivate_effect);
	byteswap(value.hook_projectile);
	byteswap(value.hook_projectile_spawn_marker);
	byteswap(value.hook_projectile_spawn_object);
	byteswap(value.hook_projectile_spawn_offset);
	byteswap(value.warmup_time);
	byteswap(value.post_deploy_transition_delay);
	byteswap(value.line_of_sight_test_offset);
	byteswap(value.line_of_sight_test_offset_toward_user);
	byteswap(value.deploy_animation);
	byteswap(value.deploy_duration_override);
	byteswap(value.max_range);
	byteswap(value.biped_attach_offset);
	byteswap(value.pull_animation_airborne);
	byteswap(value.pull_animation_grounded);
	byteswap(value.pull_time_to_detach_allowed);
	byteswap(value.pull_detach_damage_threshold);
	byteswap(value.pull_stuck_timeout);
	byteswap(value.pull_min_progress_per_update);
	byteswap(value.pull_post_crouch_suppression_wait_time);
	byteswap(value.pull_collision_rejection_post_completion_duration);
	byteswap(value.pull_collision_rejection_threshold_target_velocity);
	byteswap(value.pull_collision_damage_immunity_delay);
	byteswap(value.pull_collision_damage_immunity_minimum_velocity);
	byteswap(value.pull_collision_damage_immunity_post_completion_duration);
	byteswap(value.pull_close_range_definition);
	byteswap(value.pull_physics_pill_offset_scalar_grounded);
	byteswap(value.pull_physics_pill_offset_scalar_airborne);
	byteswap(value.pull_launch_vertical_impulse);
	byteswap(value.pull_launch_aim_impulse);
	byteswap(value.pull_launch_decay_duration);
	byteswap(value.pull_acceleration_phase_duration);
	byteswap(value.pull_base_target_velocity);
	byteswap(value.pull_exit_max_velocity);
	byteswap(value.base_pull_acceleration_function$2);
	byteswap(value.launch_impulse_decay_function$2);
	byteswap(value.pull_target_velocity_filter_fraction);
	byteswap(value.pull_aim_vector_influence_level_geo);
	byteswap(value.pull_aim_vector_influence_bipeds);
	byteswap(value.pull_aim_vector_influence_vehicles);
	byteswap(value.pull_aim_vector_influence_falloff_inner_angle);
	byteswap(value.pull_aim_vector_influence_falloff_outer_angle);
	byteswap(value.pull_aim_vector_influence_accumulation_rate);
	byteswap(value.pull_aim_vector_influence_accumulation_starting_scalar);
	byteswap(value.pull_aim_vector_influence_falloff_function$2);
	byteswap(value.pull_aim_vector_influence_scale_function$2);
	byteswap(value.pull_air_control_scalar_level_geo);
	byteswap(value.pull_air_control_scalar_forward_and_back_level_geo);
	byteswap(value.pull_air_control_scalar_left_and_right_level_geo);
	byteswap(value.pull_air_control_scalar_bipeds);
	byteswap(value.pull_air_control_scalar_forward_and_back_bipeds);
	byteswap(value.pull_air_control_scalar_left_and_right_bipeds);
	byteswap(value.pull_air_control_scalar_vehicles);
	byteswap(value.pull_air_control_scalar_forward_and_back_vehicles);
	byteswap(value.pull_air_control_scalar_left_and_right_vehicles);
	byteswap(value.pull_air_control_accumulation_rate);
	byteswap(value.pull_air_control_accumulation_starting_scalar);
	byteswap(value.pull_completion_distance_level_geo);
	byteswap(value.pull_completion_distance_level_geo_ceilings);
	byteswap(value.pull_completion_distance_level_geo_floors);
	byteswap(value.pull_completion_distance_bipeds);
	byteswap(value.pull_completion_distance_vehicles);
	byteswap(value.pull_vehicle_interaction_distance);
	byteswap(value.pull_vehicle_interaction_time);
	byteswap(value.pull_biped_automelee_max_angle);
	byteswap(value.max_allowed_angle_deviation_ceiling);
	byteswap(value.max_allowed_angle_deviation_floor);
	byteswap(value.pull_line_of_sight_break_time);
	byteswap(value.reel_in_acceleration_phase_duration);
	byteswap(value.reel_in_base_target_velocity);
	byteswap(value.reel_in_launch_grounded_slope);
	byteswap(value.reel_in_launch_vertical_impulse_duration);
	byteswap(value.reel_in_launch_vertical_impulse_grounded);
	byteswap(value.reel_in_launch_vertical_impulse_airborne);
	byteswap(value.reel_in_launch_roll_impulse_airborne);
	byteswap(value.reel_in_launch_roll_rotation_impulse_grounded);
	byteswap(value.reel_in_launch_pitch_impulse_airborne);
	byteswap(value.reel_in_launch_pitch_rotation_impulse_grounded);
	byteswap(value.reel_in_exit_velocity);
	byteswap(value.reel_in_grab_distance);
	byteswap(value.reel_in_grab_vertical_offset);
	byteswap(value.reel_in_time_to_detach_allowed);
	byteswap(value.reel_in_detach_damage_threshold);
	byteswap(value.reel_in_line_of_sight_break_time);
	byteswap(value.reel_in_min_acceleration_percentage_to_break);
	byteswap(value.reel_in_close_range_definition);
	byteswap(value.reel_in_animation);
	byteswap(value.reel_in_acceleration_function$2);
	byteswap(value.reel_in_tangential_velocity_damping_function$2);
	byteswap(value.bash_activation_input_hold_time);
	byteswap(value.bash_activation_max_aim_angle);
	byteswap(value.bash_max_aim_lock_rate_of_change);
	byteswap(value.bash_peak_velocity);
	byteswap(value.bash_charge_up_duration);
	byteswap(value.bash_charge_up_velocity_scale_function$2);
	byteswap(value.bash_acceleration_duration);
	byteswap(value.bash_acceleration_velocity_scale_function$2);
	byteswap(value.bash_stuck_timeout);
	byteswap(value.bash_aftermath_duration);
	byteswap(value.bash_aftermath_recoil_peak_velocity);
	byteswap(value.bash_recoil_velocity_scale_function$2);
	byteswap(value.bash_charge_up_animation);
	byteswap(value.bash_flight_animation);
	byteswap(value.bash_finish_grounded_animation);
	byteswap(value.bash_finish_airborne_animation);
	byteswap(value.bash_finish_animation_vertical_angle_tolerance);
	byteswap(value.bash_charge_up_effect);
	byteswap(value.bash_launch_effect);
	byteswap(value.bash_active_effect);
	byteswap(value.bash_completion_effect);
	byteswap(value.bash_owner_damage);
	byteswap(value.bash_pound_aoe_damage);
	byteswap(value.bash_pound_aoe_epicenter_walkback_distance);
	byteswap(value.retract_animation);
	byteswap(value.exit_animation_speed_scalar);
	byteswap(value.miss_cooldown_delay);
	byteswap(value.aim_assist_range);
	byteswap(value.aim_assist_cone_angle_at_projectile_launch);
	byteswap(value.aim_assist_cone_angle_while_projectile_flying);
	byteswap(value.aim_assist_weight_angle);
	byteswap(value.aim_assist_weight_distance);
	byteswap(value.aim_assist_weight_biped);
	byteswap(value.aim_assist_weight_vehicle);
	byteswap(value.aim_assist_weight_weapon);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesgrapplehookdefinitiontag>(blofeld::infinite::s_i343spartanabilitiesgrapplehookdefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.data);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesstabilizerdefinition>(blofeld::infinite::s_i343spartanabilitiesstabilizerdefinition& value)
{
	byteswap(value.common_ability_parameters);
	byteswap(value.flags);
	byteswap(value.minimum_height_above_floor);
	byteswap(value.activation_deceleration);
	byteswap(value.stall_duration);
	byteswap(value.malleable_time_limit);
	byteswap(value.cooldown);
	byteswap(value.malleable_time_scale);
	byteswap(value.max_horizontal_speed);
	byteswap(value.vertical_speed_boost_at_exit);
	byteswap(value.rumble);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesgroundpounddefinition>(blofeld::infinite::s_i343spartanabilitiesgroundpounddefinition& value)
{
	byteswap(value.common_ability_parameters);
	byteswap(value.ground_pound_flags);
	byteswap(value.minimum_height_above_floor);
	byteswap(value.stabilizer_definition);
	byteswap(value.charge_up_min_time);
	byteswap(value.charge_up_auto_release_time);
	byteswap(value.charge_up_min_time_scale);
	byteswap(value.charge_up_auto_release_time_scale);
	byteswap(value.charge_up_damage_acceleration_scalar);
	byteswap(value.launch_ready_effect);
	byteswap(value.launch_post_ready_effect);
	byteswap(value.launch_post_ready_effect_activation_fraction);
	byteswap(value.launch_activation_energy_cost);
	byteswap(value.launch_effect);
	byteswap(value.launch_fail_effect);
	byteswap(value.launch_continuous_rumble_loop_time);
	byteswap(value.launch_continuous_rumble);
	byteswap(value.aim_effect);
	byteswap(value.aim_vector_fail_selector);
	byteswap(value.aim_effect_min_fail_display_time);
	byteswap(value.aim_vector_fail_distance);
	byteswap(value.aim_vector_fail_early_time);
	byteswap(value.aim_vector_ray_cast_distance);
	byteswap(value.aim_vector_camera_pitch_limit);
	byteswap(value.aim_vector_pitch_limit);
	byteswap(value.aim_vector_pitch_adjustment_limit);
	byteswap(value.aim_vector_interpolation_seconds_charging);
	byteswap(value.aim_vector_interpolation_seconds_launching);
	byteswap(value.aim_vector_interpolation_seconds_exiting);
	byteswap(value.aim_vector_interpolation_exit_stage_time_limit);
	byteswap(value.hit_sphere_initial_offset_z);
	byteswap(value.hit_sphere_offset);
	byteswap(value.hit_sphere_radius);
	byteswap(value.hit_sphere_start_point_offset);
	byteswap(value.max_slope_angle);
	byteswap(value.max_opposing_contact_angle);
	byteswap(value.pound_fall_speed_malleable);
	byteswap(value.pound_fall_duration);
	byteswap(value.pound_hit_duration);
	byteswap(value.pound_exit_no_collision_damage_duration);
	byteswap(value.aoe_contact_offset);
	byteswap(value.knockback_scalar);
	byteswap(value.pound_ground_damage_scalar);
	byteswap(value.pound_ground_aoe_radius_scalar);
	byteswap(value.pound_object_damage_effect);
	byteswap(value.pound_object_clang_damage_effect);
	byteswap(value.pound_ground_damage_effect);
	byteswap(value.pound_ground_clang_damage_effect);
	byteswap(value.pound_object_instigator_effect);
	byteswap(value.pound_ground_instigator_effect);
	byteswap(value.pound_object_damage_effect_weak);
	byteswap(value.pound_object_clang_damage_effect_weak);
	byteswap(value.pound_ground_damage_effect_weak);
	byteswap(value.pound_ground_clang_damage_effect_weak);
	byteswap(value.pound_object_instigator_effect_weak);
	byteswap(value.pound_ground_instigator_effect_weak);
	byteswap(value.time_to_switch_from_weak_to_regular);
	byteswap(value.pound_fall_animation);
	byteswap(value.pound_fall_exit_animation);
	byteswap(value.pound_hit_animation);
	byteswap(value.pound_hit_exit_animation);
	byteswap(value.pound_hit_ai_sound_level);
	byteswap(value.auto_aim_angle);
	byteswap(value.auto_aim_range);
	byteswap(value.auto_aim_falloff_range);
	byteswap(value.auto_aim_near_falloff_range);
	byteswap(value.magnetism_angle);
	byteswap(value.magnetism_range);
	byteswap(value.magnetism_falloff_range);
	byteswap(value.magnetism_near_falloff_range);
	byteswap(value.maximum_assist_angular_velocity);
	byteswap(value.fov_delta_function_charge_up$2);
	byteswap(value.looks_speed_scalar_charge_up);
	byteswap(value.looks_speed_scalar_launched);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesgroundpounddefinitiontag>(blofeld::infinite::s_i343spartanabilitiesgroundpounddefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.data);
}

template<> void byteswap<blofeld::infinite::s_sampledataluascripttagdefinition>(blofeld::infinite::s_sampledataluascripttagdefinition& value)
{
	byteswap(value.lua_script);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesmaterialnamestringidblock>(blofeld::infinite::s_i343spartanabilitiesmaterialnamestringidblock& value)
{
	byteswap(value.material_name);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesshoulderbashdefinition>(blofeld::infinite::s_i343spartanabilitiesshoulderbashdefinition& value)
{
	byteswap(value.common_ability_parameters);
	byteswap(value.shoulder_bash_flags);
	byteswap(value.sprint_speed_fraction_threshold);
	byteswap(value.sprint_active_minimum_duration);
	byteswap(value.bash_speed);
	byteswap(value.target_speed_scalar);
	byteswap(value.bash_duration);
	byteswap(value.bash_duration_with_target);
	byteswap(value.target_range_scalar);
	byteswap(value.yaw_speed_scale);
	byteswap(value.pitch_speed_scale);
	byteswap(value.off_the_ground_tolerance);
	byteswap(value.hit_sphere_offset_x);
	byteswap(value.hit_sphere_offset_z);
	byteswap(value.hit_sphere_radius);
	byteswap(value.hit_sphere_start_point_offset);
	byteswap(value.surface_adhesion_velocity);
	byteswap(value.surface_adhesion_airborne_time_limit);
	byteswap(value.maximum_shoulder_bash_assist_angular_velocity);
	byteswap(value.assist_pitch_angle_min);
	byteswap(value.assist_pitch_angle_max);
	byteswap(value.contact_angle_threshold_for_damage);
	byteswap(value.contact_ignore_offset);
	byteswap(value.bash_direction_pitch_offset_for_damage);
	byteswap(value.knockback_scalar);
	byteswap(value.camera_tilt_pitch_function$2);
	byteswap(value.camera_forward_offset_function$2);
	byteswap(value.camera_fov_delta_function$2);
	byteswap(value.bash_damage_effect);
	byteswap(value.bash_clang_damage_effect);
	byteswap(value.bash_effect);
	byteswap(value.bash_response_damage_effect);
	byteswap(value.bash_response_effect);
	byteswap(value.damage_scalar);
	byteswap(value.shoulder_bash_animation);
	byteswap(value.shoulder_bash_success_follow_through);
	byteswap(value.shoulder_bash_success_follow_through_duration);
	byteswap(value.shoulder_bash_success_follow_through_fp_camera_restore_time);
	byteswap(value.shoulder_bash_success_rebound);
	byteswap(value.shoulder_bash_success_rebound_duration);
	byteswap(value.shoulder_bash_success_rebound_fp_camera_restore_time);
	byteswap(value.shoulder_bash_success_rebound_speed_duration);
	byteswap(value.shoulder_bash_success_rebound_speed);
	byteswap(value.no_rebound_materials_block);
	byteswap(value.shoulder_bash_miss_follow_through);
	byteswap(value.shoulder_bash_miss_follow_through_fp_camera_restore_time);
	byteswap(value.shoulder_bash_miss_follow_through_early_out_fraction);
	byteswap(value.auto_aim_angle);
	byteswap(value.auto_aim_range);
	byteswap(value.auto_aim_falloff_range);
	byteswap(value.auto_aim_near_falloff_range);
	byteswap(value.bash_ai_sound_level);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesshoulderbashdefinitiontag>(blofeld::infinite::s_i343spartanabilitiesshoulderbashdefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.data);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiessprintdefinition>(blofeld::infinite::s_i343spartanabilitiessprintdefinition& value)
{
	byteswap(value.common_ability_parameters);
	byteswap(value.flags);
	byteswap(value.maintain_through_clamber);
	byteswap(value.maintain_through_evade);
	byteswap(value.maintain_through_reload);
	byteswap(value.maintain_through_melee);
	byteswap(value.maintain_through_airborne);
	byteswap(value.stun_timer_control);
	byteswap(value.evade_delay_time);
	byteswap(value.time_to_full_speed);
	byteswap(value.falloff_time);
	byteswap(value.falloff_time_melee);
	byteswap(value.speed_ramp_up_function$2);
	byteswap(value.full_speed_scalar);
	byteswap(value.look_velocity_scale_function$2);
	byteswap(value.yaw_velocity_scale_at_full_sprint);
	byteswap(value.pitch_velocity_scale_at_full_sprint);
	byteswap(value.max_strafe_throttle_magnitude_function$2);
	byteswap(value.max_strafe_throttle_magnitude_at_full_sprint);
	byteswap(value.pegged_magnitude);
	byteswap(value.pegged_angular_threshold);
	byteswap(value.max_angle_between_facing_and_velocity);
	byteswap(value.minimum_player_velocity_to_be_considered_in_a_sprinting_state);
	byteswap(value.animation_stance);
	byteswap(value.exit_animation_speed_scalar);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiessprintdefinitiontag>(blofeld::infinite::s_i343spartanabilitiessprintdefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.sprint);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesstabilizerdefinitiontag>(blofeld::infinite::s_i343spartanabilitiesstabilizerdefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.data);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesteleportdefinition>(blofeld::infinite::s_i343spartanabilitiesteleportdefinition& value)
{
	byteswap(value.common_ability_parameters);
	byteswap(value.teleport_flags);
	byteswap(value.stabilizer_block);
	byteswap(value.charge_up_button_down_delay);
	byteswap(value.charge_up_min_time);
	byteswap(value.charge_up_max_distance_time);
	byteswap(value.charge_up_auto_release_time);
	byteswap(value.teleport_ready_effect);
	byteswap(value.teleport_post_ready_effect);
	byteswap(value.teleport_post_ready_effect_activation_fraction);
	byteswap(value.teleport_activation_energy_cost);
	byteswap(value.teleport_source_effect);
	byteswap(value.teleport_destination_effect);
	byteswap(value.teleport_fail_effect);
	byteswap(value.aim_style);
	byteswap(value.capsule_positioning);
	byteswap(value.aim_effect);
	byteswap(value.aim_distance);
	byteswap(value.swept_shape_pull_back_distance);
	byteswap(value.swept_sphere_radius);
	byteswap(value.overlay_animation_function_id);
	byteswap(value.charge_up_fraction_function_id);
	byteswap(value.obstructed_function_id);
	byteswap(value.fov_delta_function_charge_up$2);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesteleportdefinitiontag>(blofeld::infinite::s_i343spartanabilitiesteleportdefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.teleport);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitieswallclingdefinition>(blofeld::infinite::s_i343spartanabilitieswallclingdefinition& value)
{
	byteswap(value.common_ability_parameters);
	byteswap(value.flags);
	byteswap(value.cooldown);
	byteswap(value.minimum_height_above_floor);
	byteswap(value.velocity_threshold);
	byteswap(value.contact_normal_threshold_z);
	byteswap(value.contact_offset_threshold_z);
	byteswap(value.contact_throttle_dot_threshold);
	byteswap(value.maximum_distance_allowed_between_current_position_and_desired_position_before_snapping);
	byteswap(value.hang_time_limit);
	byteswap(value.slide_start_time);
	byteswap(value.slide_speed);
	byteswap(value.camera_roll_max);
	byteswap(value.camera_blend_time);
	byteswap(value.jump_throttle_threshold);
	byteswap(value.jump_pitch);
	byteswap(value.jump_velocity);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitieswallclingdefinitiontag>(blofeld::infinite::s_i343spartanabilitieswallclingdefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.wallcling);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitieswalljumpdefinition>(blofeld::infinite::s_i343spartanabilitieswalljumpdefinition& value)
{
	byteswap(value.common_ability_parameters);
	byteswap(value.flags);
	byteswap(value.hit_sphere_offset_z);
	byteswap(value.gap_to_wall_tolerance);
	byteswap(value.contact_normal_threshold_z);
	byteswap(value.throttle_threshold);
	byteswap(value.default_throttle_xy);
	byteswap(value.velocity_z);
	byteswap(value.velocity_xy);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitieswalljumpdefinitiontag>(blofeld::infinite::s_i343spartanabilitieswalljumpdefinitiontag& value)
{
	byteswap(value.anytag);
	byteswap(value.walljump);
}

template<> void byteswap<blofeld::infinite::s_soundbankdatafiletag>(blofeld::infinite::s_soundbankdatafiletag& value)
{
	byteswap(value.anytag);
	byteswap(value.sound_bank_data);
}

template<> void byteswap<blofeld::infinite::s_soundbankblockdefinition>(blofeld::infinite::s_soundbankblockdefinition& value)
{
	byteswap(value.sound_bank_name);
}

template<> void byteswap<blofeld::infinite::s_soundbankresourceblockdefinition>(blofeld::infinite::s_soundbankresourceblockdefinition& value)
{
	byteswap(value.sound_bank_resource);
}

template<> void byteswap<blofeld::infinite::s_soundbanktag>(blofeld::infinite::s_soundbanktag& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.sound_bank_list_block);
	byteswap(value.sound_bank_sfx_resource);
	byteswap(value.sound_bank_loc_resources_block);
	byteswap(value.bank_priority);
	byteswap(value.bank_unique_id);
}

template<> void byteswap<blofeld::infinite::s_s_structure_manifest_build_identifier_definition>(blofeld::infinite::s_s_structure_manifest_build_identifier_definition& value)
{
	byteswap(value.manifest_id0);
	byteswap(value.manifest_id1);
	byteswap(value.manifest_id2);
	byteswap(value.manifest_id3);
	byteswap(value.build_index);
	byteswap(value.structure_importer_version);
}

template<> void byteswap<blofeld::infinite::s_s_structure_seam_identifier>(blofeld::infinite::s_s_structure_seam_identifier& value)
{
	byteswap(value.seam_id0);
	byteswap(value.seam_id1);
	byteswap(value.seam_id2);
	byteswap(value.seam_id3);
}

template<> void byteswap<blofeld::infinite::s_structureseamedgemapping>(blofeld::infinite::s_structureseamedgemapping& value)
{
	byteswap(value.structure_edge_index);
}

template<> void byteswap<blofeld::infinite::s_s_structure_seam_cluster_mapping>(blofeld::infinite::s_s_structure_seam_cluster_mapping& value)
{
	byteswap(value.cluster_index);
	byteswap(value.cluster_center);
}

template<> void byteswap<blofeld::infinite::s_s_structure_seam_mapping>(blofeld::infinite::s_s_structure_seam_mapping& value)
{
	byteswap(value.seams_identifier);
	byteswap(value.edge_mapping_block);
	byteswap(value.cluster_mapping_block);
}

template<> void byteswap<blofeld::infinite::s_structure_collision_material>(blofeld::infinite::s_structure_collision_material& value)
{
	byteswap(value.conveyor_surface_index);
	byteswap(value.seam_mapping_index);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_structure_leaf>(blofeld::infinite::s_structure_leaf& value)
{
	byteswap(value.cluster);
}

template<> void byteswap<blofeld::infinite::s_s_structure_super_node_mapping>(blofeld::infinite::s_s_structure_super_node_mapping& value)
{
	byteswap(value.parent_super_node_index);
	byteswap(value.parent_internal_node_index);
	byteswap(value.flags);
	byteswap(value.has_traversal_geometry_mask);
	byteswap(value.first_traversal_geometry_index);
	byteswap(value.first_aabb_index);
	byteswap(value.aabb_mask);
	byteswap(value.non_terminal_traversal_geometry_index);
}

template<> void byteswap<blofeld::infinite::s_supernoderecursablemasks>(blofeld::infinite::s_supernoderecursablemasks& value)
{
	byteswap(value.mask);
}

template<> void byteswap<blofeld::infinite::s_structuresupernodetraversalgeometryindices>(blofeld::infinite::s_structuresupernodetraversalgeometryindices& value)
{
	byteswap(value.index);
}

template<> void byteswap<blofeld::infinite::s_s_structure_super_node_traversal_geometry>(blofeld::infinite::s_s_structure_super_node_traversal_geometry& value)
{
	byteswap(value.portal_indices_block);
	byteswap(value.seam_indices_block);
}

template<> void byteswap<blofeld::infinite::s_cluster_portals_oriented_bounds>(blofeld::infinite::s_cluster_portals_oriented_bounds& value)
{
	byteswap(value.center);
	byteswap(value.extents);
	byteswap(value.orientation);
}

template<> void byteswap<blofeld::infinite::s_cluster_portalstructurebspclusterportalvertexblock>(blofeld::infinite::s_cluster_portalstructurebspclusterportalvertexblock& value)
{
	byteswap(value.point);
}

template<> void byteswap<blofeld::infinite::s_cluster_portal>(blofeld::infinite::s_cluster_portal& value)
{
	byteswap(value.oriented_bounds);
	byteswap(value.back_cluster);
	byteswap(value.front_cluster);
	byteswap(value.plane_index);
	byteswap(value.centroid);
	byteswap(value.bounding_radius);
	byteswap(value.flags);
	byteswap(value.vertices_block);
}

template<> void byteswap<blofeld::infinite::s_structurebspclusterportalindex>(blofeld::infinite::s_structurebspclusterportalindex& value)
{
	byteswap(value.portal_index);
}

template<> void byteswap<blofeld::infinite::s_seamindicesblockdefinition>(blofeld::infinite::s_seamindicesblockdefinition& value)
{
	byteswap(value.seam_index);
}

template<> void byteswap<blofeld::infinite::s_instanceindex>(blofeld::infinite::s_instanceindex& value)
{
	byteswap(value.instance_index);
}

template<> void byteswap<blofeld::infinite::s_s_instance_bucket>(blofeld::infinite::s_s_instance_bucket& value)
{
	byteswap(value.runtime_geo_mesh_index);
	byteswap(value.runtime_geo_tag_reference);
	byteswap(value.pad);
	byteswap(value.instances_data_block);
	byteswap(value.instances_data_block_flags);
	byteswap(value.instances_data_block_vector1);
	byteswap(value.instances_data_block_vector2);
}

template<> void byteswap<blofeld::infinite::s_structure_cluster>(blofeld::infinite::s_structure_cluster& value)
{
	byteswap(value.bounds_x);
	byteswap(value.bounds_y);
	byteswap(value.bounds_z);
	byteswap(value.portals_block);
	byteswap(value.mesh_index);
	byteswap(value.instance_imposter_cluster_mopp_index);
	byteswap(value.seam_indices_block);
	byteswap(value.instance_buckets_block);
	byteswap(value.instance_buckets_flags);
	byteswap(value.instance_buckets_vector1);
	byteswap(value.instance_buckets_vector2);
}

template<> void byteswap<blofeld::infinite::s_s_structure_cookie_cutter>(blofeld::infinite::s_s_structure_cookie_cutter& value)
{
	byteswap(value.collision_model);
}

template<> void byteswap<blofeld::infinite::s_structure_marker>(blofeld::infinite::s_structure_marker& value)
{
	byteswap(value.marker_type);
	byteswap(value.marker_parameter);
	byteswap(value.rotation);
	byteswap(value.position);
}

template<> void byteswap<blofeld::infinite::s_mapleaffacevertex>(blofeld::infinite::s_mapleaffacevertex& value)
{
	byteswap(value.vertex);
}

template<> void byteswap<blofeld::infinite::s_map_leaf_face>(blofeld::infinite::s_map_leaf_face& value)
{
	byteswap(value.node_index);
	byteswap(value.vertices_block);
}

template<> void byteswap<blofeld::infinite::s_mapleafconnectionindex>(blofeld::infinite::s_mapleafconnectionindex& value)
{
	byteswap(value.connection_index);
}

template<> void byteswap<blofeld::infinite::s_map_leaf>(blofeld::infinite::s_map_leaf& value)
{
	byteswap(value.faces_block);
	byteswap(value.connection_indices_block);
}

template<> void byteswap<blofeld::infinite::s_leafconnectionvertex>(blofeld::infinite::s_leafconnectionvertex& value)
{
	byteswap(value.vertex);
}

template<> void byteswap<blofeld::infinite::s_leaf_connection>(blofeld::infinite::s_leaf_connection& value)
{
	byteswap(value.plane_index);
	byteswap(value.back_leaf_index);
	byteswap(value.front_leaf_index);
	byteswap(value.vertices_block);
	byteswap(value.area);
}

template<> void byteswap<blofeld::infinite::s_lodinfooverrides>(blofeld::infinite::s_lodinfooverrides& value)
{
	byteswap(value.lod_levels_block);
	byteswap(value.lod_levels_block_flags);
	byteswap(value.lod_levels_block_vector1);
	byteswap(value.lod_levels_block_vector2);
	byteswap(value.lod_fade_after_distance);
}

template<> void byteswap<blofeld::infinite::s_structureinstancematerialoverridedata>(blofeld::infinite::s_structureinstancematerialoverridedata& value)
{
	byteswap(value.per_instance_material_block);
	byteswap(value.per_instance_material_flags);
	byteswap(value.per_instance_material_vector1);
	byteswap(value.per_instance_material_vector2);
	byteswap(value.mesh_flags_override);
}

template<> void byteswap<blofeld::infinite::s_streamingbitmapinfo>(blofeld::infinite::s_streamingbitmapinfo& value)
{
	byteswap(value.bitmap_index_in_bsp);
	byteswap(value.bitmap_scale);
}

template<> void byteswap<blofeld::infinite::s_structure_instanced_geometry_instance_with_name>(blofeld::infinite::s_structure_instanced_geometry_instance_with_name& value)
{
	byteswap(value.scale);
	byteswap(value.forward);
	byteswap(value.left);
	byteswap(value.up);
	byteswap(value.position);
	byteswap(value.runtime_geo_mesh_reference);
	byteswap(value.foliage_material_palette_reference);
	byteswap(value.runtime_geo_mesh_index);
	byteswap(value.flags);
	byteswap(value.bounds_x0);
	byteswap(value.bounds_x1);
	byteswap(value.bounds_y0);
	byteswap(value.bounds_y1);
	byteswap(value.bounds_z0);
	byteswap(value.bounds_z1);
	byteswap(value.world_bounding_sphere_center);
	byteswap(value.world_bounding_sphere_radius);
	byteswap(value.placement_checksum);
	byteswap(value.pathfinding_policy);
	byteswap(value.streaming_priority);
	byteswap(value.flags2);
	byteswap(value.hlod_index);
	byteswap(value.lod_overrides);
	byteswap(value.style_id);
	byteswap(value.damage_style_index);
	byteswap(value.style_tag_override_data);
	byteswap(value.material_override_data);
	byteswap(value.rectmin);
	byteswap(value.rectmax);
	byteswap(value.external_guid);
	byteswap(value.coating_entry);
	byteswap(value.editordata);
	byteswap(value.streamingbitmapinfo_block);
	byteswap(value.streamingbitmapinfo_block_flags);
	byteswap(value.streamingbitmapinfo_block_vector1);
	byteswap(value.streamingbitmapinfo_block_vector2);
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_i343physicsinstancedphysicsmaterial>(blofeld::infinite::s_i343physicsinstancedphysicsmaterial& value)
{
	byteswap(value.per_instance_material_palette);
}

template<> void byteswap<blofeld::infinite::s_havokbodyidarray>(blofeld::infinite::s_havokbodyidarray& value)
{
	byteswap(value.havok_body_id);
}

template<> void byteswap<blofeld::infinite::s_i343physicsinstancedphysicsinstance>(blofeld::infinite::s_i343physicsinstancedphysicsinstance& value)
{
	byteswap(value.m_collisiontagreference);
	byteswap(value.instanced_physics_instances_block);
	byteswap(value.instanced_physics_instances_flags);
	byteswap(value.instanced_physics_instances_vector1);
	byteswap(value.instanced_physics_instances_vector2);
	byteswap(value.scale);
	byteswap(value.forward);
	byteswap(value.left);
	byteswap(value.up);
	byteswap(value.position);
	byteswap(value.m_typemask);
	byteswap(value.m_guid);
	byteswap(value.havok_body_id_array);
	byteswap(value.flags);
	byteswap(value.m_scene);
}

template<> void byteswap<blofeld::infinite::s_s_structure_debug_info_render_line>(blofeld::infinite::s_s_structure_debug_info_render_line& value)
{
	byteswap(value.type);
	byteswap(value.code);
	byteswap(value.pad_thai);
	byteswap(value.point_0);
	byteswap(value.point_1);
}

template<> void byteswap<blofeld::infinite::s_structurebspdebuginfoindicesblock>(blofeld::infinite::s_structurebspdebuginfoindicesblock& value)
{
	byteswap(value.index);
}

template<> void byteswap<blofeld::infinite::s_s_structure_cluster_debug_info>(blofeld::infinite::s_s_structure_cluster_debug_info& value)
{
	byteswap(value.errors);
	byteswap(value.warnings);
	byteswap(value.lines_block);
	byteswap(value.fog_plane_indices_block);
	byteswap(value.visible_fog_plane_indices_block);
	byteswap(value.vis_fog_omission_cluster_indices_block);
	byteswap(value.containing_fog_zone_indices_block);
}

template<> void byteswap<blofeld::infinite::s_s_structure_fog_plane_debug_info>(blofeld::infinite::s_s_structure_fog_plane_debug_info& value)
{
	byteswap(value.fog_zone_index);
	byteswap(value.connected_plane_designator);
	byteswap(value.lines_block);
	byteswap(value.intersected_cluster_indices_block);
	byteswap(value.inf_extent_cluster_indices_block);
}

template<> void byteswap<blofeld::infinite::s_s_structure_fog_zone_debug_info>(blofeld::infinite::s_s_structure_fog_zone_debug_info& value)
{
	byteswap(value.media_index);
	byteswap(value.base_fog_plane_index);
	byteswap(value.lines_block);
	byteswap(value.immersed_cluster_indices_block);
	byteswap(value.bounding_fog_plane_indices_block);
	byteswap(value.collision_fog_plane_indices_block);
}

template<> void byteswap<blofeld::infinite::s_s_structure_debug_info>(blofeld::infinite::s_s_structure_debug_info& value)
{
	byteswap(value.clusters_block);
	byteswap(value.fog_planes_block);
	byteswap(value.fog_zones_block);
}

template<> void byteswap<blofeld::infinite::s_s_widget_marker_reference>(blofeld::infinite::s_s_widget_marker_reference& value)
{
	byteswap(value.marker_index);
	byteswap(value.widget_ref);
}

template<> void byteswap<blofeld::infinite::s_collisionbspblock>(blofeld::infinite::s_collisionbspblock& value)
{
	byteswap(value.bsp3d_nodes_block);
	byteswap(value.bsp3d_supernodes_block);
	byteswap(value.planes_block);
	byteswap(value.leaves_block);
	byteswap(value.bsp2d_references_block);
	byteswap(value.bsp2d_nodes_block);
	byteswap(value.surfaces_block);
	byteswap(value.edges_block);
	byteswap(value.vertices_block);
}

template<> void byteswap<blofeld::infinite::s_large_bsp3d_node>(blofeld::infinite::s_large_bsp3d_node& value)
{
	byteswap(value.plane);
	byteswap(value.back_child);
	byteswap(value.front_child);
}

template<> void byteswap<blofeld::infinite::s_large_collision_leaf>(blofeld::infinite::s_large_collision_leaf& value)
{
	byteswap(value.flags);
	byteswap(value.bsp2d_reference_count);
	byteswap(value.first_bsp2d_reference);
}

template<> void byteswap<blofeld::infinite::s_large_bsp2d_reference>(blofeld::infinite::s_large_bsp2d_reference& value)
{
	byteswap(value.plane);
	byteswap(value.bsp2d_node);
}

template<> void byteswap<blofeld::infinite::s_large_bsp2d_node>(blofeld::infinite::s_large_bsp2d_node& value)
{
	byteswap(value.plane);
	byteswap(value.left_child);
	byteswap(value.right_child);
}

template<> void byteswap<blofeld::infinite::s_large_collision_surface>(blofeld::infinite::s_large_collision_surface& value)
{
	byteswap(value.plane_index);
	byteswap(value.first_edge);
	byteswap(value.material);
	byteswap(value.flags);
	byteswap(value.best_plane_calculation_vertex_index_);
}

template<> void byteswap<blofeld::infinite::s_large_collision_edge>(blofeld::infinite::s_large_collision_edge& value)
{
	byteswap(value.start_vertex);
	byteswap(value.end_vertex);
	byteswap(value.forward_edge);
	byteswap(value.reverse_edge);
	byteswap(value.left_surface);
	byteswap(value.right_surface);
}

template<> void byteswap<blofeld::infinite::s_large_collision_vertex>(blofeld::infinite::s_large_collision_vertex& value)
{
	byteswap(value.point);
	byteswap(value.first_edge);
	byteswap(value.sink);
}

template<> void byteswap<blofeld::infinite::s_large_collision_bsp>(blofeld::infinite::s_large_collision_bsp& value)
{
	byteswap(value.bsp3d_nodes_block);
	byteswap(value.bsp3d_supernodes_block);
	byteswap(value.planes_block);
	byteswap(value.leaves_block);
	byteswap(value.bsp2d_references_block);
	byteswap(value.bsp2d_nodes_block);
	byteswap(value.surfaces_block);
	byteswap(value.edges_block);
	byteswap(value.vertices_block);
}

template<> void byteswap<blofeld::infinite::s_s_structure_bsp_resources>(blofeld::infinite::s_s_structure_bsp_resources& value)
{
	byteswap(value.collision_bsp_block);
	byteswap(value.large_collision_bsp_block);
}

template<> void byteswap<blofeld::infinite::s_structurebsprawresources>(blofeld::infinite::s_structurebsprawresources& value)
{
	byteswap(value.raw_items);
}

template<> void byteswap<blofeld::infinite::s_c_structure_bsp_resource_interface>(blofeld::infinite::s_c_structure_bsp_resource_interface& value)
{
	byteswap(value.raw_resources_block);
	byteswap(value.tag_resources);
	byteswap(value.use_resource_items);
}

template<> void byteswap<blofeld::infinite::s_prefablodoverridearray>(blofeld::infinite::s_prefablodoverridearray& value)
{
	byteswap(value.lod_transition_distance_override);
}

template<> void byteswap<blofeld::infinite::s_structure_external_instanced_geometry_reference>(blofeld::infinite::s_structure_external_instanced_geometry_reference& value)
{
	byteswap(value.static_render_geometry);
	byteswap(value.static_collision_geometry);
	byteswap(value.material_palette);
	byteswap(value.name);
	byteswap(value.material_override_variant_name);
	byteswap(value.scale);
	byteswap(value.forward);
	byteswap(value.left);
	byteswap(value.up);
	byteswap(value.position);
	byteswap(value.override_flags);
	byteswap(value.instance_flags_mask);
	byteswap(value.physics_override_flags);
	byteswap(value.physics_instance_flags_mask);
	byteswap(value.override_pathfinding_policy);
	byteswap(value.override_streaming_priority);
	byteswap(value.instance_policy_mask);
	byteswap(value.lod_distance_overrides);
	byteswap(value.lod_fade_after_override);
	byteswap(value.instance_type);
	byteswap(value.guid);
	byteswap(value.hlodindex);
	byteswap(value.styleid);
	byteswap(value.styletagoverride);
	byteswap(value.instance_material_overrides_block);
	byteswap(value.material_overrides_block);
}

template<> void byteswap<blofeld::infinite::s_s_structure_bsp_obb_volume>(blofeld::infinite::s_s_structure_bsp_obb_volume& value)
{
	byteswap(value.origin);
	byteswap(value.axis_1);
	byteswap(value.axis_2);
	byteswap(value.axis_3);
	byteswap(value.type);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsindexlistblock>(blofeld::infinite::s_i343graphicsindexlistblock& value)
{
	byteswap(value.index);
}

template<> void byteswap<blofeld::infinite::s_i343graphicshierarchynode>(blofeld::infinite::s_i343graphicshierarchynode& value)
{
	byteswap(value.rectmin);
	byteswap(value.rectmax);
	byteswap(value.groupboundingsphere);
	byteswap(value.instanceindex);
	byteswap(value.groupinstanceoffset);
	byteswap(value.instance_group_indices_block);
	byteswap(value.instance_group_indices_flags);
	byteswap(value.instance_group_indices_vector1);
	byteswap(value.instance_group_indices_vector2);
	byteswap(value.descendantscount);
	byteswap(value.iocount);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsclustermaskblock>(blofeld::infinite::s_i343graphicsclustermaskblock& value)
{
	byteswap(value.chunk);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsclusternodecount>(blofeld::infinite::s_i343graphicsclusternodecount& value)
{
	byteswap(value.clustermask_block);
	byteswap(value.clustermask_flags);
	byteswap(value.clustermask_vector1);
	byteswap(value.clustermask_vector2);
	byteswap(value.startingnodeindex);
	byteswap(value.nodecount);
}

template<> void byteswap<blofeld::infinite::s_bspstructurebitfieldstoragetype>(blofeld::infinite::s_bspstructurebitfieldstoragetype& value)
{
	byteswap(value.chunk);
}

template<> void byteswap<blofeld::infinite::s_gpuvisibilitybitfield>(blofeld::infinite::s_gpuvisibilitybitfield& value)
{
	byteswap(value.bsp_structure_bitfield_buffer);
	byteswap(value.cpu_bsp_structure__bitfield);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsgpusubmissiongpusubmissionpasssources>(blofeld::infinite::s_i343graphicsgpusubmissiongpusubmissionpasssources& value)
{
	byteswap(value.flags);
	byteswap(value.batch_checksum);
	byteswap(value.command_packets_buffer);
	byteswap(value.submesh_buffer);
	byteswap(value.hw_instance_group_buffer);
	byteswap(value.instance_data_buffer);
	byteswap(value.instance_buffer_constants);
	byteswap(value.resource_collection_state);
	byteswap(value.gpu_submission_batches);
	byteswap(value.extern_textures_in_use);
	byteswap(value.submeshpassthreadcount);
	byteswap(value.paddedsubmeshcount);
	byteswap(value.hwinstancethreadcount);
	byteswap(value.m_paddedhwinstancecount);
}

template<> void byteswap<blofeld::infinite::s_i343foliagefoliagetype>(blofeld::infinite::s_i343foliagefoliagetype& value)
{
	byteswap(value.runtime_geo);
	byteswap(value.material_palette);
}

template<> void byteswap<blofeld::infinite::s_i343foliagefoliageruntime>(blofeld::infinite::s_i343foliagefoliageruntime& value)
{
	byteswap(value.foliage_types_block);
	byteswap(value.foliage_runtime_gpu);
	byteswap(value.foliage_runtime_cpu);
}

template<> void byteswap<blofeld::infinite::s_bspbitmapreference>(blofeld::infinite::s_bspbitmapreference& value)
{
	byteswap(value.bitmap);
}

template<> void byteswap<blofeld::infinite::s_i343decoratorsdecoratorsetplacementrange>(blofeld::infinite::s_i343decoratorsdecoratorsetplacementrange& value)
{
	byteswap(value.decorator_asset);
	byteswap(value.offset);
	byteswap(value.count);
	byteswap(value.set_type_index);
}

template<> void byteswap<blofeld::infinite::s_i343decoratorsdecoratorcluster>(blofeld::infinite::s_i343decoratorsdecoratorcluster& value)
{
	byteswap(value.scale);
	byteswap(value.max_render_distance_squared);
	byteswap(value.offset);
	byteswap(value.bounding_sphere_center);
	byteswap(value.bounding_sphere_radius);
	byteswap(value.bounding_aabb_min);
	byteswap(value.bounding_aabb_max);
}

template<> void byteswap<blofeld::infinite::s_i343decoratorsdecoratorruntime>(blofeld::infinite::s_i343decoratorsdecoratorruntime& value)
{
	byteswap(value.sets_block);
	byteswap(value.clusters_block);
	byteswap(value.bspindex);
	byteswap(value.decorator_runtime_gpu);
	byteswap(value.decorator_runtime_cpu);
}

template<> void byteswap<blofeld::infinite::s_structure_bsp>(blofeld::infinite::s_structure_bsp& value)
{
	byteswap(value.anytag);
	byteswap(value.build_identifier);
	byteswap(value.parent_build_identifier);
	byteswap(value.import_info_checksum);
	byteswap(value.import_version);
	byteswap(value.owner_level);
	byteswap(value.structure_meta_data);
	byteswap(value.flags);
	byteswap(value.content_policy_flags);
	byteswap(value.failed_content_policy_flags);
	byteswap(value.seam_identifiers_block);
	byteswap(value.collision_materials_block);
	byteswap(value.leaves_block);
	byteswap(value.super_node_parent_mappings_block);
	byteswap(value.super_node_recursable_masks_block);
	byteswap(value.structure_super_node_traversal_geometry_block);
	byteswap(value.world_bounds_x);
	byteswap(value.world_bounds_y);
	byteswap(value.world_bounds_z);
	byteswap(value.cluster_portals_block);
	byteswap(value.clusters_block);
	byteswap(value.cookie_cutters_block);
	byteswap(value.markers_block);
	byteswap(value.leaf_map_leaves_block);
	byteswap(value.leaf_map_connections_block);
	byteswap(value.errors_block);
	byteswap(value.instanced_geometry_instances_block);
	byteswap(value.instanced_geometry_instances_flags);
	byteswap(value.instanced_geometry_instances_vector1);
	byteswap(value.instanced_geometry_instances_vector2);
	byteswap(value.instanced_foliage_instances_block);
	byteswap(value.instanced_foliage_instances_flags);
	byteswap(value.instanced_foliage_instances_vector1);
	byteswap(value.instanced_foliage_instances_vector2);
	byteswap(value.instanced_physics_instances_block);
	byteswap(value.instanced_physics_instances_flags);
	byteswap(value.instanced_physics_instances_vector1);
	byteswap(value.instanced_physics_instances_vector2);
	byteswap(value.instance_geometry_tag_instance_count);
	byteswap(value.instance_postprocess_checksum);
	byteswap(value.debug_info_block);
	byteswap(value.render_geometry);
	byteswap(value.widget_references_block);
	byteswap(value.resource_interface);
	byteswap(value.external_references_block);
	byteswap(value.base_material_count);
	byteswap(value.obb_volume_list_block);
	byteswap(value.io_hierarchy_block);
	byteswap(value.io_hierarchy_flags);
	byteswap(value.io_hierarchy_vector1);
	byteswap(value.io_hierarchy_vector2);
	byteswap(value.visibility_cluster_node_counts_block);
	byteswap(value.visibility_cluster_node_counts_flags);
	byteswap(value.visibility_cluster_node_counts_vector1);
	byteswap(value.visibility_cluster_node_counts_vector2);
	byteswap(value.m_instancegrouppipelinestatecache);
	byteswap(value.growable_dataof);
	byteswap(value.heap_array_pointer);
	byteswap(value.heap_current_size);
	byteswap(value.active_growth_state);
	byteswap(value.instancedata);
	byteswap(value.instancebufferconstants);
	byteswap(value.ioplacementgputestingbuffer);
	byteswap(value.ioplacementgputestingsrv);
	byteswap(value.iolodstaticinfobuffer);
	byteswap(value.iolodindexbuffer);
	byteswap(value.activeiobitfield);
	byteswap(value.newlyvisibleiobitfieldbuffer);
	byteswap(value.ioplacementlodinfobuffer);
	byteswap(value.acoustics_data);
	byteswap(value.number_of_io_over_the_limit);
	byteswap(value.needtoclearshadowsubmissionsbuffers);
	byteswap(value.gpufloatingshadowsubmissiondata);
	byteswap(value.gpu_submission_sources);
	byteswap(value.instances_with_non_gpu_submission_parts);
	byteswap(value.foliage_runtime_block);
	byteswap(value.bitmaps_block);
	byteswap(value.bitmaps_flags);
	byteswap(value.bitmaps_vector1);
	byteswap(value.bitmaps_vector2);
	byteswap(value.decorator_sets_block);
	byteswap(value.decorator_runtime_block);
}

template<> void byteswap<blofeld::infinite::s_i343projectilessupercombineeffects>(blofeld::infinite::s_i343projectilessupercombineeffects& value)
{
	byteswap(value.super_detonation);
	byteswap(value.super_detonation_damage);
	byteswap(value.super_detonation_sound);
	byteswap(value.super_attached_detonation_damage);
}

template<> void byteswap<blofeld::infinite::s_i343projectilessupercombinedefinition>(blofeld::infinite::s_i343projectilessupercombinedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.default_super_combine_effects);
	byteswap(value.biped_super_combine_effects);
	byteswap(value.vehicle_super_combine_effects);
	byteswap(value.super_detonation);
	byteswap(value.super_detonation_damage);
	byteswap(value.super_detonation_sound);
	byteswap(value.super_attached_detonation_damage);
	byteswap(value.super_detonation_object_types);
	byteswap(value.default_super_combine_amount);
	byteswap(value.biped_super_combine_amount);
	byteswap(value.vehicle_super_combine_amount);
	byteswap(value.super_det_time);
}

template<> void byteswap<blofeld::infinite::s_scenery_definition>(blofeld::infinite::s_scenery_definition& value)
{
	byteswap(value.object);
	byteswap(value.pathfinding_policy);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343physicscollisionmaterialoverride>(blofeld::infinite::s_i343physicscollisionmaterialoverride& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_serializedhavokgeometry>(blofeld::infinite::s_serializedhavokgeometry& value)
{
	byteswap(value.field_pointer_skip);
	byteswap(value.collision_type);
	byteswap(value.number_of_shapes);
	byteswap(value.who_will_reload_the_shape_the_parent_tag_or_this_struct);
	byteswap(value.havok_data);
}

template<> void byteswap<blofeld::infinite::s_staticcollisiongeotag>(blofeld::infinite::s_staticcollisiongeotag& value)
{
	byteswap(value.anytag);
	byteswap(value.collision_material_overrides_block);
	byteswap(value.numcollisionmaterials);
	byteswap(value.flags);
	byteswap(value.havok_collision_geometry_types_block);
	byteswap(value.shape_bounds_min);
	byteswap(value.shape_bounds_max);
}

template<> void byteswap<blofeld::infinite::s_s_structure_soft_ceiling_triangle>(blofeld::infinite::s_s_structure_soft_ceiling_triangle& value)
{
	byteswap(value.plane);
	byteswap(value.bounding_sphere_center);
	byteswap(value.bounding_sphere_radius);
	byteswap(value.vertex0);
	byteswap(value.vertex1);
	byteswap(value.vertex2);
}

template<> void byteswap<blofeld::infinite::s_s_structure_soft_ceiling>(blofeld::infinite::s_s_structure_soft_ceiling& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value.soft_ceiling_triangles_block);
}

template<> void byteswap<blofeld::infinite::s_s_structure_physics_water_group>(blofeld::infinite::s_s_structure_physics_water_group& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_s_structure_physics_water_instance_plane>(blofeld::infinite::s_s_structure_physics_water_instance_plane& value)
{
	byteswap(value.plane);
}

template<> void byteswap<blofeld::infinite::s_s_structure_physics_water_instance_debug_triangle>(blofeld::infinite::s_s_structure_physics_water_instance_debug_triangle& value)
{
	byteswap(value.point0);
	byteswap(value.point1);
	byteswap(value.point2);
}

template<> void byteswap<blofeld::infinite::s_s_structure_physics_water_instance>(blofeld::infinite::s_s_structure_physics_water_instance& value)
{
	byteswap(value.group);
	byteswap(value.flow_velocity);
	byteswap(value.fog_color);
	byteswap(value.fog_murkiness);
	byteswap(value.water_planes_block);
	byteswap(value.water_debug_triangles_block);
	byteswap(value.bounds_x);
	byteswap(value.bounds_y);
	byteswap(value.bounds_z);
}

template<> void byteswap<blofeld::infinite::s_s_structure_design_physics>(blofeld::infinite::s_s_structure_design_physics& value)
{
	byteswap(value.importer_version);
	byteswap(value.soft_ceiling_mopp_code_block);
	byteswap(value.soft_ceilings_block);
	byteswap(value.water_mopp_code_block);
	byteswap(value.water_groups_block);
	byteswap(value.water_instances_block);
}

template<> void byteswap<blofeld::infinite::s_s_planar_fog_vertex>(blofeld::infinite::s_s_planar_fog_vertex& value)
{
	byteswap(value.position);
}

template<> void byteswap<blofeld::infinite::s_s_planar_fog_triangle_plane>(blofeld::infinite::s_s_planar_fog_triangle_plane& value)
{
	byteswap(value.plane);
}

template<> void byteswap<blofeld::infinite::s_s_planar_fog_triangle>(blofeld::infinite::s_s_planar_fog_triangle& value)
{
	byteswap(value.planes_block);
}

template<> void byteswap<blofeld::infinite::s_s_planar_fog_definition>(blofeld::infinite::s_s_planar_fog_definition& value)
{
	byteswap(value.name);
	byteswap(value.vertices_block);
	byteswap(value.triangles_block);
	byteswap(value.depth);
	byteswap(value.normal);
}

template<> void byteswap<blofeld::infinite::s_s_planer_fog_set_definition>(blofeld::infinite::s_s_planer_fog_set_definition& value)
{
	byteswap(value.planar_fogs_block);
}

template<> void byteswap<blofeld::infinite::s_s_structure_design>(blofeld::infinite::s_s_structure_design& value)
{
	byteswap(value.anytag);
	byteswap(value.build_identifier);
	byteswap(value.parent_build_identifier);
	byteswap(value.physics);
	byteswap(value.planar_fog_set);
	byteswap(value.render_geometry);
	byteswap(value.instanced_geometry_instances_block);
	byteswap(value.materials_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_budget_reference>(blofeld::infinite::s_s_scenario_budget_reference& value)
{
	byteswap(value.reference);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_required_resources>(blofeld::infinite::s_s_scenario_required_resources& value)
{
	byteswap(value.anytag);
	byteswap(value.resources_block);
}

template<> void byteswap<blofeld::infinite::s_areascreeneffectscalarfunction>(blofeld::infinite::s_areascreeneffectscalarfunction& value)
{
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_screeneffectfunctiondefinitionwithinputs>(blofeld::infinite::s_screeneffectfunctiondefinitionwithinputs& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_s_single_screen_effect_definition>(blofeld::infinite::s_s_single_screen_effect_definition& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.hidden_flags);
	byteswap(value.maximum_distance);
	byteswap(value.distance_falloff$2);
	byteswap(value.delay);
	byteswap(value.lifetime);
	byteswap(value.time_falloff);
	byteswap(value.angle_falloff$2);
	byteswap(value.object_falloff$2);
	byteswap(value.color_grading_look_up_texture);
	byteswap(value.runtime_color_grading_strength);
	byteswap(value.hdr_color_grading_look_up_texture);
	byteswap(value.runtime_hdr_color_grading_strength);
	byteswap(value.exposure_boost);
	byteswap(value.exposure_deboost);
	byteswap(value.hue_left);
	byteswap(value.hue_right);
	byteswap(value.saturation);
	byteswap(value.desaturation);
	byteswap(value.contrast_enhance);
	byteswap(value.gamma_enhance);
	byteswap(value.gamma_reduce);
	byteswap(value.filter_color_override_mode);
	byteswap(value.color_filter);
	byteswap(value.floor_color_override_mode);
	byteswap(value.color_floor);
	byteswap(value.color_replace_strength);
	byteswap(value.replace_color_override_mode);
	byteswap(value.color_replace);
	byteswap(value.tron);
	byteswap(value.radial_blur);
	byteswap(value.radial_blur_direction);
	byteswap(value.vision_mode);
	byteswap(value.hud_fade);
	byteswap(value.fov_in);
	byteswap(value.fov_out);
	byteswap(value.screen_shake);
	byteswap(value.shader_effect);
	byteswap(value.m_pipelinestate);
}

template<> void byteswap<blofeld::infinite::s_s_area_screen_effect_definition>(blofeld::infinite::s_s_area_screen_effect_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.global_flags);
	byteswap(value.global_hidden_flags);
	byteswap(value.screen_effects_block);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentsurfacinggraphcontenttag>(blofeld::infinite::s_nodegraphcontentsurfacinggraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_spottedobjectblock>(blofeld::infinite::s_spottedobjectblock& value)
{
	byteswap(value.spotted_object);
}

template<> void byteswap<blofeld::infinite::s_speechscript>(blofeld::infinite::s_speechscript& value)
{
	byteswap(value.script_name);
	byteswap(value.script_source);
}

template<> void byteswap<blofeld::infinite::s_speechgrammarblock>(blofeld::infinite::s_speechgrammarblock& value)
{
	byteswap(value.speech_grammar);
}

template<> void byteswap<blofeld::infinite::s_speechgrammarphraseblock>(blofeld::infinite::s_speechgrammarphraseblock& value)
{
	byteswap(value.vui_id);
	byteswap(value.script_action$2);
	byteswap(value.script_condition$2);
	byteswap(value.command);
	byteswap(value.weight);
	byteswap(value.flags);
	byteswap(value.user_level);
}

template<> void byteswap<blofeld::infinite::s_speechgrammarnodeblock>(blofeld::infinite::s_speechgrammarnodeblock& value)
{
	byteswap(value.command);
	byteswap(value.script_condition$2);
}

template<> void byteswap<blofeld::infinite::s_speechgrammargroup>(blofeld::infinite::s_speechgrammargroup& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.spotted_objects_load_block);
	byteswap(value.script_condition);
	byteswap(value.run_time_flags);
	byteswap(value.absolute_dynamic_grammar_index);
	byteswap(value.lynced_grammars_block);
	byteswap(value.speech_phrases_block);
	byteswap(value.speech_nodes_block);
}

template<> void byteswap<blofeld::infinite::s_speechgrammarglobals>(blofeld::infinite::s_speechgrammarglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.vui_timeout_in_seconds);
	byteswap(value.vui_leafnode_timeout_in_seconds);
	byteswap(value.default_confidence);
	byteswap(value.flags);
	byteswap(value.speech_grammars_block);
	byteswap(value.localized_errors);
	byteswap(value.localized_phrases);
	byteswap(value.localized_display_text);
	byteswap(value.localized_needs_text);
	byteswap(value.localized_locate_text);
	byteswap(value.localized_orders_text);
	byteswap(value.default_spotted_effect);
	byteswap(value.default_shimmer_effect_delay);
}

template<> void byteswap<blofeld::infinite::s_soundresponsepermutationdefinition>(blofeld::infinite::s_soundresponsepermutationdefinition& value)
{
	byteswap(value.sound);
	byteswap(value.music);
}

template<> void byteswap<blofeld::infinite::s_soundcombineresponsedefinition>(blofeld::infinite::s_soundcombineresponsedefinition& value)
{
	byteswap(value.name);
	byteswap(value.response_behavior);
	byteswap(value.response);
}

template<> void byteswap<blofeld::infinite::s_soundresponsedefinition>(blofeld::infinite::s_soundresponsedefinition& value)
{
	byteswap(value.name);
	byteswap(value.channel);
	byteswap(value.category);
	byteswap(value.category_priority);
	byteswap(value.queue_timeout);
	byteswap(value.consideration_time);
	byteswap(value.gap_after_sound);
	byteswap(value.queue_behavior);
	byteswap(value.potential_responses_block);
	byteswap(value.combiners_block);
}

template<> void byteswap<blofeld::infinite::s_soundresponsegroupdefinition>(blofeld::infinite::s_soundresponsegroupdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.responses_block);
}

template<> void byteswap<blofeld::infinite::s_shaderinputassemblyparameter>(blofeld::infinite::s_shaderinputassemblyparameter& value)
{
	byteswap(value.semantic_name);
	byteswap(value.semantic_index);
}

template<> void byteswap<blofeld::infinite::s_shaderbytecode>(blofeld::infinite::s_shaderbytecode& value)
{
	byteswap(value.anytag);
	byteswap(value.shaderbytecodedata);
	byteswap(value.ia_parameters_block);
	byteswap(value.platform_marker);
	byteswap(value.instruction_count);
	byteswap(value.texture_reads);
}

template<> void byteswap<blofeld::infinite::s_shaderversion>(blofeld::infinite::s_shaderversion& value)
{
	byteswap(value.anytag);
}

template<> void byteswap<blofeld::infinite::s_shadergpupropertyname>(blofeld::infinite::s_shadergpupropertyname& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_baseshader>(blofeld::infinite::s_baseshader& value)
{
	byteswap(value.anytag);
	byteswap(value.shader_compiler_version);
	byteswap(value.flags);
	byteswap(value.compile_flags);
	byteswap(value.emitter_property_names_block);
	byteswap(value.simulator_property_names_block);
	byteswap(value.renderer_property_names_block);
	byteswap(value.shader_source_data);
}

template<> void byteswap<blofeld::infinite::s_shaderoptions>(blofeld::infinite::s_shaderoptions& value)
{
	byteswap(value.anytag);
	byteswap(value.compile_flags);
}

template<> void byteswap<blofeld::infinite::s_shaderdatapathparam>(blofeld::infinite::s_shaderdatapathparam& value)
{
	byteswap(value.path);
}

template<> void byteswap<blofeld::infinite::s_shadertag>(blofeld::infinite::s_shadertag& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.maya_shader);
}

template<> void byteswap<blofeld::infinite::s_shadergroup>(blofeld::infinite::s_shadergroup& value)
{
	byteswap(value.shaders_block);
	byteswap(value.root_signature);
	byteswap(value.entrypoint_index);
	byteswap(value.vertex_type);
	byteswap(value.platform_marker);
	byteswap(value.shader_reference_type_offsets);
	byteswap(value.entrypoint_name);
	byteswap(value.m_shaderpipeline);
}

template<> void byteswap<blofeld::infinite::s_shadervariant>(blofeld::infinite::s_shadervariant& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.compiler_flags);
	byteswap(value.shader_groups_block);
	byteswap(value.material_parameters_block);
	byteswap(value.parameter_binding_data);
	byteswap(value.emitter_property_names_block);
	byteswap(value.renderer_property_names_block);
	byteswap(value.simulator_property_names_block);
	byteswap(value.runtime_pointer);
}

template<> void byteswap<blofeld::infinite::s_shaderrootsignature>(blofeld::infinite::s_shaderrootsignature& value)
{
	byteswap(value.anytag);
	byteswap(value.rootsignaturedata);
	byteswap(value.m_runtimepointer);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentshadersubgraphcontenttag>(blofeld::infinite::s_nodegraphcontentshadersubgraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_selfilluminationstate>(blofeld::infinite::s_selfilluminationstate& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.length_);
	byteswap(value.next_state_);
	byteswap(value.intensity_);
	byteswap(value.color_);
	byteswap(value.activation_);
}

template<> void byteswap<blofeld::infinite::s_selfilluminationdefinition>(blofeld::infinite::s_selfilluminationdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.states_block);
}

template<> void byteswap<blofeld::infinite::s_s_simulated_input_stick_definition>(blofeld::infinite::s_s_simulated_input_stick_definition& value)
{
	byteswap(value.flags);
	byteswap(value.response_type);
	byteswap(value.mapping_type);
	byteswap(value._angle);
	byteswap(value.mapping);
	byteswap(value.duration);
	byteswap(value.inverse_duration);
	byteswap(value.inverse_random_length);
	byteswap(value.inverse_random_angle);
	byteswap(value.linear_zoom_penalty);
	byteswap(value.square_root_zoom_penalty);
}

template<> void byteswap<blofeld::infinite::s_s_simulated_input_definition>(blofeld::infinite::s_s_simulated_input_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.move$2);
	byteswap(value.look$2);
}

template<> void byteswap<blofeld::infinite::s_s_suppressed_incident_definition>(blofeld::infinite::s_s_suppressed_incident_definition& value)
{
	byteswap(value.incident_name);
	byteswap(value.suppression_type);
}

template<> void byteswap<blofeld::infinite::s_suppressedincidentgroupdefinition>(blofeld::infinite::s_suppressedincidentgroupdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.suppressed_incidents_block);
}

template<> void byteswap<blofeld::infinite::s_s_simulation_single_domain_velocity_bumps_configuration>(blofeld::infinite::s_s_simulation_single_domain_velocity_bumps_configuration& value)
{
	byteswap(value.flags);
	byteswap(value.velocity_scale);
	byteswap(value.velocity_min);
	byteswap(value.velocity_max);
	byteswap(value.velocity_difference_ignore_threshold);
	byteswap(value.velocity_difference_absolute_ignore_threshold);
}

template<> void byteswap<blofeld::infinite::s_s_simulation_single_domain_blending_configuration>(blofeld::infinite::s_s_simulation_single_domain_blending_configuration& value)
{
	byteswap(value.min_object_speed);
	byteswap(value.max_object_speed);
	byteswap(value.fraction_at_min_object_speed);
	byteswap(value.fraction_at_max_object_speed);
	byteswap(value.min_speed_at_min_object_speed);
	byteswap(value.min_speed_at_max_object_speed);
}

template<> void byteswap<blofeld::infinite::s_s_simulation_single_domain_interpolation_configuration>(blofeld::infinite::s_s_simulation_single_domain_interpolation_configuration& value)
{
	byteswap(value.discrepancy_threshold_above_which_we_use_blending);
	byteswap(value.coming_to_rest_speed);
	byteswap(value.coming_to_rest_maximum_ignorable_error);
	byteswap(value.velocity_bumps);
	byteswap(value.blending);
}

template<> void byteswap<blofeld::infinite::s_s_simulation_interpolation_definition>(blofeld::infinite::s_s_simulation_interpolation_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.position_client_ignore_tolerance);
	byteswap(value.angular_speed_threshold_for_temporarily_ignoring_rotation_updates);
	byteswap(value.position_warp_threshold);
	byteswap(value.position_warp_threshold_xy);
	byteswap(value.rotation_warp_threshold);
	byteswap(value.position_while_controlled);
	byteswap(value.rotation_while_controlled);
	byteswap(value.position_while_uncontrolled);
	byteswap(value.rotation_while_uncontrolled);
	byteswap(value.authority_trust_settings);
}

template<> void byteswap<blofeld::infinite::s_lodlevelsettings>(blofeld::infinite::s_lodlevelsettings& value)
{
	byteswap(value.cascade_geometry);
	byteswap(value.override_triangle_reduction_ratio);
	byteswap(value.override_and_use_maxdeviation);
	byteswap(value.allow_degenerate_texture_coordinates);
	byteswap(value.allow_simplygon_to_create_optimized_vertex_data);
	byteswap(value.outward_move_tolerance);
	byteswap(value.inward_move_tolerance);
	byteswap(value.use_vertex_weighting);
	byteswap(value.geometry_importance);
	byteswap(value.texture_importance);
	byteswap(value.material_importance);
	byteswap(value.normal_importance);
	byteswap(value.vertex_color_importance);
	byteswap(value.curvature_importance);
	byteswap(value.group_importance);
	byteswap(value.edge_set_importance);
	byteswap(value.skinning_importance);
	byteswap(value.keep_symmetrical);
	byteswap(value.automatic_axis_of_symmetry_detection);
	byteswap(value.symmetry_detection_tolerance);
	byteswap(value.manual_symmetry_axis);
	byteswap(value.manual_symmetry_offset);
	byteswap(value.use_symmetry_quad_re_triangulator);
	byteswap(value.replace_normals);
	byteswap(value.replace_tangents);
	byteswap(value.hard_edge_angle);
	byteswap(value.repair_invalid_normals);
	byteswap(value.detect_primitive_normals);
	byteswap(value.scale_by_area);
	byteswap(value.scale_by_angle);
	byteswap(value.weld_and_t_junction_fixup_passes);
	byteswap(value.weld_vertices);
	byteswap(value.weld_distance);
	byteswap(value.weld_only_border_verts);
	byteswap(value.weld_only_on_object_boundary);
	byteswap(value.remove_t_junctions);
	byteswap(value.t_junction_removal_distance);
}

template<> void byteswap<blofeld::infinite::s_simplygonsettingstag>(blofeld::infinite::s_simplygonsettingstag& value)
{
	byteswap(value.anytag);
	byteswap(value.allow_directx);
	byteswap(value.per_lod_settings_block);
}

template<> void byteswap<blofeld::infinite::s_soundincidentresponsedefinition>(blofeld::infinite::s_soundincidentresponsedefinition& value)
{
	byteswap(value.audience);
	byteswap(value.excluded_audience);
	byteswap(value.split_screen_flags);
	byteswap(value.response);
}

template<> void byteswap<blofeld::infinite::s_soundincidentresponsegroupdefinition>(blofeld::infinite::s_soundincidentresponsegroupdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.responses_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_interpolator_entry_definition>(blofeld::infinite::s_s_scenario_interpolator_entry_definition& value)
{
	byteswap(value.flags);
	byteswap(value.name);
	byteswap(value.function);
	byteswap(value.duration);
	byteswap(value.map_reset_type);
	byteswap(value.custom_map_reset_value);
	byteswap(value.start_type);
	byteswap(value.stop_type);
	byteswap(value.custom_stop_value);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_interpolator_tag_definition>(blofeld::infinite::s_s_scenario_interpolator_tag_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.interpolators_block);
}

template<> void byteswap<blofeld::infinite::s_skeletonuserparameter>(blofeld::infinite::s_skeletonuserparameter& value)
{
	byteswap(value.name);
	byteswap(value.initial_value);
}

template<> void byteswap<blofeld::infinite::s_skeletontagimporteddata>(blofeld::infinite::s_skeletontagimporteddata& value)
{
	byteswap(value.joints_block);
	byteswap(value.user_parameters_block);
	byteswap(value.joint_checksum);
}

template<> void byteswap<blofeld::infinite::s_jointusage>(blofeld::infinite::s_jointusage& value)
{
	byteswap(value.joint_name);
	byteswap(value.joint_usage_type);
}

template<> void byteswap<blofeld::infinite::s_jointnavmark>(blofeld::infinite::s_jointnavmark& value)
{
	byteswap(value.joint_name);
}

template<> void byteswap<blofeld::infinite::s_detailjoint>(blofeld::infinite::s_detailjoint& value)
{
	byteswap(value.joint_name);
}

template<> void byteswap<blofeld::infinite::s_proceduraljoint>(blofeld::infinite::s_proceduraljoint& value)
{
	byteswap(value.joint_name);
	byteswap(value.procedure);
	byteswap(value.procedure_axis);
	byteswap(value.procedure_node_a);
	byteswap(value.procedure_node_b);
	byteswap(value.procedure_var_1);
	byteswap(value.procedure_var_2);
	byteswap(value.procedure_neutral_offset);
}

template<> void byteswap<blofeld::infinite::s_jointmaskname>(blofeld::infinite::s_jointmaskname& value)
{
	byteswap(value.joint_name);
}

template<> void byteswap<blofeld::infinite::s_jointmask>(blofeld::infinite::s_jointmask& value)
{
	byteswap(value.name);
	byteswap(value.mask_selection_behavior);
	byteswap(value.joint_selection_chain_start);
	byteswap(value.joint_selection_chain_ends_block);
	byteswap(value.explicit_joint_selections_block);
	byteswap(value.add_joints_from_other_mask);
	byteswap(value.remove_joints_from_other_mask);
}

template<> void byteswap<blofeld::infinite::s_filteredjoint>(blofeld::infinite::s_filteredjoint& value)
{
	byteswap(value.joint_name);
}

template<> void byteswap<blofeld::infinite::s_skeletonikjunction>(blofeld::infinite::s_skeletonikjunction& value)
{
	byteswap(value.name);
	byteswap(value.pivot_joint);
	byteswap(value.pull_passthrough);
}

template<> void byteswap<blofeld::infinite::s_skeletonikjoint>(blofeld::infinite::s_skeletonikjoint& value)
{
	byteswap(value.joint);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_skeletonikchain>(blofeld::infinite::s_skeletonikchain& value)
{
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value.start_joint);
	byteswap(value.effector_joint);
	byteswap(value.special_joints_block);
	byteswap(value.pull_strength);
	byteswap(value.push_strength);
	byteswap(value.over_extent_pull_strength);
	byteswap(value.under_extent_push_strength);
	byteswap(value.effector_cone_limit_power);
	byteswap(value.pitch_bounds);
	byteswap(value.yaw_bounds);
	byteswap(value.offset_bounds);
	byteswap(value.spline_reversal_strength);
}

template<> void byteswap<blofeld::infinite::s_skeletoniklegdefinition>(blofeld::infinite::s_skeletoniklegdefinition& value)
{
	byteswap(value.ik_chain);
	byteswap(value.standing_compression_limit);
	byteswap(value.crouching_compression_limit);
	byteswap(value.foot_pitch_limits);
	byteswap(value.foot_yaw_limits);
}

template<> void byteswap<blofeld::infinite::s_skeletonikarmdefinition>(blofeld::infinite::s_skeletonikarmdefinition& value)
{
	byteswap(value.ik_chain);
	byteswap(value.wrist_break_threshold);
	byteswap(value.fixup_axis_marker);
	byteswap(value.wrist_break_acceptable_min_angle);
}

template<> void byteswap<blofeld::infinite::s_skeletonikpoint>(blofeld::infinite::s_skeletonikpoint& value)
{
	byteswap(value.name);
	byteswap(value.source_marker);
	byteswap(value.attach_to);
	byteswap(value.destination_marker);
	byteswap(value.pole_marker);
	byteswap(value.ik_chain_to_use);
	byteswap(value.weight_source_object_function);
	byteswap(value.priority_source_object_function);
}

template<> void byteswap<blofeld::infinite::s_skeletoniksetitem>(blofeld::infinite::s_skeletoniksetitem& value)
{
	byteswap(value.ik_point);
	byteswap(value.point_usage_toggle);
}

template<> void byteswap<blofeld::infinite::s_skeletonikset>(blofeld::infinite::s_skeletonikset& value)
{
	byteswap(value.name);
	byteswap(value.flags);
	byteswap(value.ik_points_block);
}

template<> void byteswap<blofeld::infinite::s_aclshellradiusoverridejoint>(blofeld::infinite::s_aclshellradiusoverridejoint& value)
{
	byteswap(value.name);
	byteswap(value.shell_radius);
}

template<> void byteswap<blofeld::infinite::s_skeletontag>(blofeld::infinite::s_skeletontag& value)
{
	byteswap(value.anytag);
	byteswap(value.imported_data_block);
	byteswap(value.joint_usage_block);
	byteswap(value.nav_joint_block);
	byteswap(value.detail_joints_block);
	byteswap(value.procedural_joints_block);
	byteswap(value.joint_masks_block);
	byteswap(value.joint_animation_filtering_block);
	byteswap(value.ik_junctions_block);
	byteswap(value.ik_chains_block);
	byteswap(value.ik_leg_definitions_block);
	byteswap(value.ik_arm_definitions_block);
	byteswap(value.ik_point_block);
	byteswap(value.ik_sets_block);
	byteswap(value.error_threshold);
	byteswap(value.default_shell_radius);
	byteswap(value.shell_radius_overrides_block);
}

template<> void byteswap<blofeld::infinite::s_skylighting>(blofeld::infinite::s_skylighting& value)
{
	byteswap(value.anytag);
	byteswap(value.sky_color);
	byteswap(value.sky_color_intensity);
	byteswap(value.ground_color);
	byteswap(value.ground_color_intensity);
	byteswap(value.horizon_angle);
	byteswap(value.horizon_width);
	byteswap(value.direction_1);
	byteswap(value.front_back_1);
	byteswap(value.color_1);
	byteswap(value.intensity_1);
	byteswap(value.width_1);
	byteswap(value.direction_2);
	byteswap(value.front_back_2);
	byteswap(value.color_2);
	byteswap(value.intensity_2);
	byteswap(value.width_2);
	byteswap(value.direction_3);
	byteswap(value.front_back_3);
	byteswap(value.color_3);
	byteswap(value.intensity_3);
	byteswap(value.width_3);
}

template<> void byteswap<blofeld::infinite::s_i343supplylinesmarinesquaddefinition>(blofeld::infinite::s_i343supplylinesmarinesquaddefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.ui_display_info_block);
	byteswap(value.squad_specification);
}

template<> void byteswap<blofeld::infinite::s_scenariolightingvolumes>(blofeld::infinite::s_scenariolightingvolumes& value)
{
	byteswap(value.anytag);
	byteswap(value.visual_environment_volumes_block);
}

template<> void byteswap<blofeld::infinite::s_i343effectssoundmaterialeffectsblock>(blofeld::infinite::s_i343effectssoundmaterialeffectsblock& value)
{
	byteswap(value.sounds_block);
}

template<> void byteswap<blofeld::infinite::s_i343effectssoundmaterialeffectsdefinition>(blofeld::infinite::s_i343effectssoundmaterialeffectsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.effects_block);
}

template<> void byteswap<blofeld::infinite::s_structurefxplacementmarker>(blofeld::infinite::s_structurefxplacementmarker& value)
{
	byteswap(value.marker_name);
	byteswap(value.rotation);
	byteswap(value.position);
	byteswap(value.optional_attached_effect);
}

template<> void byteswap<blofeld::infinite::s_structuremetadatalightconemarker>(blofeld::infinite::s_structuremetadatalightconemarker& value)
{
	byteswap(value.marker_name);
	byteswap(value.rotation);
	byteswap(value.position);
	byteswap(value.length);
	byteswap(value.width);
	byteswap(value.intensity);
	byteswap(value.light_color);
	byteswap(value.light_cone_tag);
}

template<> void byteswap<blofeld::infinite::s_structure_environment_object_palette_entry>(blofeld::infinite::s_structure_environment_object_palette_entry& value)
{
	byteswap(value.definition);
	byteswap(value.model);
	byteswap(value.gveyn);
}

template<> void byteswap<blofeld::infinite::s_structure_environment_object>(blofeld::infinite::s_structure_environment_object& value)
{
	byteswap(value.name);
	byteswap(value.rotation);
	byteswap(value.translation);
	byteswap(value.scale);
	byteswap(value.palette_index);
	byteswap(value.flags);
	byteswap(value.unique_id);
	byteswap(value.exported_object_type);
	byteswap(value.scenario_object_name);
	byteswap(value.variant_name);
}

template<> void byteswap<blofeld::infinite::s_structuremetadata>(blofeld::infinite::s_structuremetadata& value)
{
	byteswap(value.anytag);
	byteswap(value.effects_markers_block);
	byteswap(value.light_cones_block);
	byteswap(value.object_palette_block);
	byteswap(value.objects_block);
}

template<> void byteswap<blofeld::infinite::s_acousticstagzonevoxeldatalod>(blofeld::infinite::s_acousticstagzonevoxeldatalod& value)
{
	byteswap(value.x_dimension);
	byteswap(value.y_dimension);
	byteswap(value.z_dimension);
	byteswap(value.bsp_start_offset_x);
	byteswap(value.bsp_start_offset_y);
	byteswap(value.bsp_start_offset_z);
	byteswap(value.bsp_size_x);
	byteswap(value.bsp_size_y);
	byteswap(value.bsp_size_z);
	byteswap(value.voxel_data);
}

template<> void byteswap<blofeld::infinite::s_acousticstagzonedata>(blofeld::infinite::s_acousticstagzonedata& value)
{
	byteswap(value.guid);
	byteswap(value.lods_block);
}

template<> void byteswap<blofeld::infinite::s_acousticstagportaldata>(blofeld::infinite::s_acousticstagportaldata& value)
{
	byteswap(value.guid);
	byteswap(value.generated_front_zone);
	byteswap(value.generated_back_zone);
	byteswap(value.shape_data);
}

template<> void byteswap<blofeld::infinite::s_acousticstagdata>(blofeld::infinite::s_acousticstagdata& value)
{
	byteswap(value.anytag);
	byteswap(value.voxel_data_block);
	byteswap(value.shape_data_block);
}

template<> void byteswap<blofeld::infinite::s_narrativereferenceinfo>(blofeld::infinite::s_narrativereferenceinfo& value)
{
	byteswap(value.character_name);
	byteswap(value.dialogue);
	byteswap(value.wwise_effect);
	byteswap(value.narrative_wwise_effect_recommendation);
	byteswap(value.wwise_2d_3d);
	byteswap(value.narrative_2d_3d_recommendation);
	byteswap(value.wwise_attenuation);
}

template<> void byteswap<blofeld::infinite::s_aidialogueeventinfo>(blofeld::infinite::s_aidialogueeventinfo& value)
{
	byteswap(value.flags);
	byteswap(value.skip_fraction);
	byteswap(value.dialogue_state_table_skip_rule);
	byteswap(value.dst_expression_tokens_block);
}

template<> void byteswap<blofeld::infinite::s_s_facial_animation_language>(blofeld::infinite::s_s_facial_animation_language& value)
{
	byteswap(value.facial_animation_resource);
	byteswap(value.model_animation_resource);
	byteswap(value.language);
}

template<> void byteswap<blofeld::infinite::s_soundvoeventinfo>(blofeld::infinite::s_soundvoeventinfo& value)
{
	byteswap(value.event_name);
	byteswap(value.subtitle_name);
	byteswap(value.subtitle_character_id);
	byteswap(value.event_duration);
	byteswap(value.narrative_reference_block);
	byteswap(value.ai_dialogue_info_block);
	byteswap(value.facial_animation_resource_languages_block);
}

template<> void byteswap<blofeld::infinite::s_oneshotsoundtag>(blofeld::infinite::s_oneshotsoundtag& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.sfx_event_name);
	byteswap(value.sfx_player_event_name);
	byteswap(value.max_radius);
	byteswap(value.max_duration);
	byteswap(value.sound_bank);
	byteswap(value.player_sound_bank);
	byteswap(value.category);
	byteswap(value.player_category);
	byteswap(value.sound_tails);
	byteswap(value.external_source);
	byteswap(value.vo_event_info_block);
	byteswap(value.ai_port_glow_color);
	byteswap(value.unicode_subtitles_tag);
}

template<> void byteswap<blofeld::infinite::s_impulsetimerparams>(blofeld::infinite::s_impulsetimerparams& value)
{
	byteswap(value.impulse_timer_flags);
	byteswap(value.hold);
	byteswap(value.decay);
	byteswap(value.minthreshold);
	byteswap(value.distthreshold);
}

template<> void byteswap<blofeld::infinite::s_focustagstruct>(blofeld::infinite::s_focustagstruct& value)
{
	byteswap(value.focus_inner_radius);
	byteswap(value.focus_outer_radius);
	byteswap(value.focus_inner_cone_angle);
	byteswap(value.focus_outer_cone_angle);
	byteswap(value.focus_elevation_scale);
}

template<> void byteswap<blofeld::infinite::s_clustersettings>(blofeld::infinite::s_clustersettings& value)
{
	byteswap(value.cluster_distance);
	byteswap(value.cluster_smoothing_speed);
	byteswap(value.cluster_timeout);
}

template<> void byteswap<blofeld::infinite::s_soundcategorytag>(blofeld::infinite::s_soundcategorytag& value)
{
	byteswap(value.anytag);
	byteswap(value.parent);
	byteswap(value.flags);
	byteswap(value.dont_play_time_seconds);
	byteswap(value.audio_impulse_timer_settings);
	byteswap(value.sound_transmissivity);
	byteswap(value.obstructionocclusionbias);
	byteswap(value.obstructionocclusionscaling);
	byteswap(value.focus_settings);
	byteswap(value.cluster_settings);
	byteswap(value.sphere_radius);
	byteswap(value.sphere_stretch_value);
	byteswap(value.max_placement_looping_sounds);
}

template<> void byteswap<blofeld::infinite::s_s_sound_reverb_settings>(blofeld::infinite::s_s_sound_reverb_settings& value)
{
	byteswap(value.environment_name);
	byteswap(value.weapon_environment);
}

template<> void byteswap<blofeld::infinite::s_sound_environment>(blofeld::infinite::s_sound_environment& value)
{
	byteswap(value.anytag);
	byteswap(value.type);
	byteswap(value.reverb_settings$2);
	byteswap(value.sound_bank);
}

template<> void byteswap<blofeld::infinite::s_soundbankrefblockdefinition>(blofeld::infinite::s_soundbankrefblockdefinition& value)
{
	byteswap(value.sound_bank);
}

template<> void byteswap<blofeld::infinite::s_streampackblockdefinition>(blofeld::infinite::s_streampackblockdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.streaming_pck_file);
}

template<> void byteswap<blofeld::infinite::s_i343soundvehiclesurfacesounddata>(blofeld::infinite::s_i343soundvehiclesurfacesounddata& value)
{
	byteswap(value.rtpc_name);
	byteswap(value.sweetener_threshold);
}

template<> void byteswap<blofeld::infinite::s_audiogameacousticsqualitypresettagstruct>(blofeld::infinite::s_audiogameacousticsqualitypresettagstruct& value)
{
	byteswap(value.audio_flags);
	byteswap(value.acoustics_flood_fill_num_string_pull_iterations);
	byteswap(value.acoustics_flood_fill_num_string_pull_iteration_scale);
	byteswap(value.acoustics_num_parallel_source_updates);
	byteswap(value.acoustics_lod_distance_multiplier);
	byteswap(value.max_listener_count_to_enable_voxel_obstruction);
	byteswap(value.number_of_serial_acoustic_propagation_jobs);
}

template<> void byteswap<blofeld::infinite::s_audioqualitypresettagstruct>(blofeld::infinite::s_audioqualitypresettagstruct& value)
{
	byteswap(value.acoustics);
}

template<> void byteswap<blofeld::infinite::s_audioqualitypresetstagstruct>(blofeld::infinite::s_audioqualitypresetstagstruct& value)
{
	byteswap(value.xboxone);
	byteswap(value.scarlett);
	byteswap(value.pc);
}

template<> void byteswap<blofeld::infinite::s_audiogameglobalsettingstag>(blofeld::infinite::s_audiogameglobalsettingstag& value)
{
	byteswap(value.anytag);
	byteswap(value.initial_zone_set_preload_event_name);
	byteswap(value.level_unloaded_event_name);
	byteswap(value.game_preload_event_name);
	byteswap(value.init_sound_bank);
	byteswap(value.global_sound_banks_block);
	byteswap(value.extra_sound_banks_block);
	byteswap(value.campaign_sound_banks_block);
	byteswap(value.multiplayer_sound_banks_block);
	byteswap(value.streaming_pack_files_block);
	byteswap(value.excluded_streaming_pack_files_block);
	byteswap(value.radio_for_voice_radius);
	byteswap(value.vehicle_surface_sound_info_block);
	byteswap(value.forge_sound_events);
	byteswap(value.acoustic_zone_transition_speed);
	byteswap(value.root_sound_category_reference);
	byteswap(value.camera_to_biped_listener_position_blend);
	byteswap(value.camera_to_biped_listener_orientation_blend);
	byteswap(value.listener_to_locked_z_axis_orientation_blend);
	byteswap(value.milliseconds_between_focus_rtpc_update);
	byteswap(value.quality_presets);
}

template<> void byteswap<blofeld::infinite::s_i343objectsregionpermutationdefinition>(blofeld::infinite::s_i343objectsregionpermutationdefinition& value)
{
	byteswap(value.region_name);
	byteswap(value.permutation_name);
}

template<> void byteswap<blofeld::infinite::s_i343objectsattachedobjectdefinition>(blofeld::infinite::s_i343objectsattachedobjectdefinition& value)
{
	byteswap(value.object);
	byteswap(value.first_person_render_model);
	byteswap(value.first_person_model_animation_graph);
	byteswap(value.first_person_asset);
	byteswap(value.first_person_animation_asset);
	byteswap(value.variant_name);
	byteswap(value.parent_override);
	byteswap(value.default_parent_marker);
	byteswap(value.default_attachment_marker);
	byteswap(value.secondary_parent_marker);
	byteswap(value.secondary_attachment_marker);
	byteswap(value.parent_damage_transfer_section);
	byteswap(value.flags);
	byteswap(value.visibility_behavior);
	byteswap(value.first_person_visibility_behavior);
}

template<> void byteswap<blofeld::infinite::s_i343objectsframeattachmentdefinition>(blofeld::infinite::s_i343objectsframeattachmentdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.type);
	byteswap(value.malleable_property_id);
	byteswap(value.region_permutations_block);
	byteswap(value.attachments_block);
	byteswap(value.attached_objects_block);
	byteswap(value.modifiers);
	byteswap(value.input_slot_change_sound);
	byteswap(value.implementation);
	byteswap(value.metadata_tag);
	byteswap(value.ui_display_info_block);
	byteswap(value.swapper_menu_activation_stringid_override);
	byteswap(value.flags);
	byteswap(value.object_to_spawn_when_removed);
	byteswap(value.energy_per_spawned_object);
}

template<> void byteswap<blofeld::infinite::s_i343objectsframelimitentry>(blofeld::infinite::s_i343objectsframelimitentry& value)
{
	byteswap(value.type);
	byteswap(value.max);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343objectsframeattachmententry>(blofeld::infinite::s_i343objectsframeattachmententry& value)
{
	byteswap(value.frame_attachment);
	byteswap(value.set);
	byteswap(value.initial_input_slot);
}

template<> void byteswap<blofeld::infinite::s_i343objectsframedefinition>(blofeld::infinite::s_i343objectsframedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.limits_block);
	byteswap(value.frame_attachments_block);
	byteswap(value.ui_display_info_block);
	byteswap(value.nav_point_sequence_index);
}

template<> void byteswap<blofeld::infinite::s_i343spartanabilitiesspartanabilitycomponentdefinition>(blofeld::infinite::s_i343spartanabilitiesspartanabilitycomponentdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.activation_energy_cost_scalar);
	byteswap(value.ability_activation_failure_effect);
	byteswap(value.overheat_effect);
	byteswap(value.cooldown_effect);
	byteswap(value.energy_bar_row);
	byteswap(value.energy_bar_column);
	byteswap(value.energy_bar_warning_pct);
	byteswap(value.evade_ref);
	byteswap(value.grapple_hook_ref);
	byteswap(value.sprint_ref);
}

template<> void byteswap<blofeld::infinite::s_i343supplylinessupplylinessystemglobalsdefinition>(blofeld::infinite::s_i343supplylinessupplylinessystemglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.drop_ship);
	byteswap(value.drop_ship_nav_marker_type);
	byteswap(value.drop_ship_nav_marker_sub_type);
	byteswap(value.drop_ship_nav_marker_color);
	byteswap(value.pilot);
	byteswap(value.vehicle_drop_height);
}

template<> void byteswap<blofeld::infinite::s_i343spartantrackingglobals>(blofeld::infinite::s_i343spartantrackingglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.distance_weight);
	byteswap(value.blended_weight);
	byteswap(value.fov_weight);
	byteswap(value.active_ping);
	byteswap(value.passive_ping);
	byteswap(value.custom_ping);
}

template<> void byteswap<blofeld::infinite::s_i343spartantrackingdefaultrangeparam>(blofeld::infinite::s_i343spartantrackingdefaultrangeparam& value)
{
	byteswap(value.default_range);
}

template<> void byteswap<blofeld::infinite::s_i343spartantrackingdisplaymaximumsparam>(blofeld::infinite::s_i343spartantrackingdisplaymaximumsparam& value)
{
	byteswap(value.maximum_number_of_tracked_objects_displayed);
}

template<> void byteswap<blofeld::infinite::s_i343spartantrackingpingdefinition>(blofeld::infinite::s_i343spartantrackingpingdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.ping_group);
	byteswap(value.ping_display_time);
	byteswap(value.default_range_per_priority_block);
	byteswap(value.max_tracked_per_priority_block);
	byteswap(value.ping_effect);
	byteswap(value.ping_travel_rate);
	byteswap(value.outline_type);
	byteswap(value.outline_system_id);
	byteswap(value._angle);
	byteswap(value.distancefactor);
	byteswap(value.anglefactor);
}

template<> void byteswap<blofeld::infinite::s_i343aisquadconstructionvehiclecellentry>(blofeld::infinite::s_i343aisquadconstructionvehiclecellentry& value)
{
	byteswap(value.vehicle_definition);
	byteswap(value.vehicle_configuration);
	byteswap(value.passenger_list_block);
	byteswap(value.encounter_vehicle_flags);
}

template<> void byteswap<blofeld::infinite::s_i343aisquadconstructionsquadintensityentry>(blofeld::infinite::s_i343aisquadconstructionsquadintensityentry& value)
{
	byteswap(value.name);
	byteswap(value.actor_list_block);
	byteswap(value.vehicle_list_block);
}

template<> void byteswap<blofeld::infinite::s_i343aisquadconstructionsquadspecification>(blofeld::infinite::s_i343aisquadconstructionsquadspecification& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.actor_list_block);
	byteswap(value.vehicle_list_block);
	byteswap(value.squad_intensity_list_block);
}

template<> void byteswap<blofeld::infinite::s_aicharacterchoiceweakref>(blofeld::infinite::s_aicharacterchoiceweakref& value)
{
	byteswap(value.place_on);
	byteswap(value.character_type);
	byteswap(value.chance);
}

template<> void byteswap<blofeld::infinite::s_aiweaponchoiceweakref>(blofeld::infinite::s_aiweaponchoiceweakref& value)
{
	byteswap(value.place_on);
	byteswap(value.weapon_type);
	byteswap(value.chance);
}

template<> void byteswap<blofeld::infinite::s_aiequipmentchoiceweakref>(blofeld::infinite::s_aiequipmentchoiceweakref& value)
{
	byteswap(value.place_on);
	byteswap(value.equipment_type);
	byteswap(value.chance);
}

template<> void byteswap<blofeld::infinite::s_s_cell_template_definition>(blofeld::infinite::s_s_cell_template_definition& value)
{
	byteswap(value.name);
	byteswap(value.place_on);
	byteswap(value.normal_diff_count);
	byteswap(value.major_upgrade);
	byteswap(value.character_type_block);
	byteswap(value.initial_weapon_block);
	byteswap(value.initial_secondary_weapon_block);
	byteswap(value.initial_equipment_block);
	byteswap(value.grenade_type);
	byteswap(value.vehicle_type);
	byteswap(value.vehicle_variant);
	byteswap(value.activity_name);
}

template<> void byteswap<blofeld::infinite::s_s_squad_template_definition>(blofeld::infinite::s_s_squad_template_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.cell_templates_block);
}

template<> void byteswap<blofeld::infinite::s_scenariorenderdata>(blofeld::infinite::s_scenariorenderdata& value)
{
	byteswap(value.anytag);
	byteswap(value.dynamic_analytic_gobo_texture_slots);
	byteswap(value.flags);
	byteswap(value.volumetric_clouds_dws_sun_index);
	byteswap(value.atmospheric_scattering_dws_sun_index);
	byteswap(value.dws_sun_lens_flare_index);
	byteswap(value.max_gobo_resolution);
	byteswap(value.gobo_bit_depth);
	byteswap(value.single_pass_lighting_mode);
	byteswap(value.shadow_rendering_mode);
	byteswap(value.enable_shadows_for_uncached_lights);
}

template<> void byteswap<blofeld::infinite::s_spawningweightfunctionparam>(blofeld::infinite::s_spawningweightfunctionparam& value)
{
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_spawningsphereinfluencerregion>(blofeld::infinite::s_spawningsphereinfluencerregion& value)
{
	byteswap(value.flags);
	byteswap(value.radius);
	byteswap(value.weight);
	byteswap(value.weight_function_block);
}

template<> void byteswap<blofeld::infinite::s_spawningboxinfluencerregion>(blofeld::infinite::s_spawningboxinfluencerregion& value)
{
	byteswap(value.flags);
	byteswap(value.width);
	byteswap(value.length);
	byteswap(value.height);
	byteswap(value.weight);
}

template<> void byteswap<blofeld::infinite::s_spawningcylinderinfluencerregion>(blofeld::infinite::s_spawningcylinderinfluencerregion& value)
{
	byteswap(value.flags);
	byteswap(value.radius);
	byteswap(value.height);
	byteswap(value.weight);
	byteswap(value.weight_function_block);
}

template<> void byteswap<blofeld::infinite::s_spawningconeinfluencerregion>(blofeld::infinite::s_spawningconeinfluencerregion& value)
{
	byteswap(value.flags);
	byteswap(value.length);
	byteswap(value.base_radius);
	byteswap(value.weight);
	byteswap(value.weight_function_block);
}

template<> void byteswap<blofeld::infinite::s_spawninginfluencerregion>(blofeld::infinite::s_spawninginfluencerregion& value)
{
	byteswap(value.sphere_block);
	byteswap(value.box_block);
	byteswap(value.cylinder_block);
	byteswap(value.cone_block);
}

template<> void byteswap<blofeld::infinite::s_spawningpillinfluencerregion>(blofeld::infinite::s_spawningpillinfluencerregion& value)
{
	byteswap(value.flags);
	byteswap(value.length);
	byteswap(value.radius);
	byteswap(value.weight);
	byteswap(value.weight_function_block);
}

template<> void byteswap<blofeld::infinite::s_spawningmovinginfluencerregion>(blofeld::infinite::s_spawningmovinginfluencerregion& value)
{
	byteswap(value.lead_time);
	byteswap(value.cone_block);
	byteswap(value.pill_block);
}

template<> void byteswap<blofeld::infinite::s_spawningunitinfluencerdefinition>(blofeld::infinite::s_spawningunitinfluencerdefinition& value)
{
	byteswap(value.filter_flags);
	byteswap(value.allowed_dispositions);
	byteswap(value.influencer_block);
	byteswap(value.movement_influencer_block);
}

template<> void byteswap<blofeld::infinite::s_spawningunitonlyinfluencerdefinition>(blofeld::infinite::s_spawningunitonlyinfluencerdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.unit_influencer);
}

template<> void byteswap<blofeld::infinite::s_spawningunitinfluencerparam>(blofeld::infinite::s_spawningunitinfluencerparam& value)
{
	byteswap(value.unit_influencer);
}

template<> void byteswap<blofeld::infinite::s_spawningweaponinfluencerdefinition>(blofeld::infinite::s_spawningweaponinfluencerdefinition& value)
{
	byteswap(value.weapon);
	byteswap(value.unit_influencer_block);
	byteswap(value.location_unseen_multiplier);
}

template<> void byteswap<blofeld::infinite::s_spawningvehicleinfluencerdefinition>(blofeld::infinite::s_spawningvehicleinfluencerdefinition& value)
{
	byteswap(value.vehicle);
	byteswap(value.unit_influencer_block);
}

template<> void byteswap<blofeld::infinite::s_spawningprojectileinfluencerdefinition>(blofeld::infinite::s_spawningprojectileinfluencerdefinition& value)
{
	byteswap(value.projectile);
	byteswap(value.influencer_block);
	byteswap(value.movement_influencer_block);
}

template<> void byteswap<blofeld::infinite::s_spawningequipmentinfluencerdefinition>(blofeld::infinite::s_spawningequipmentinfluencerdefinition& value)
{
	byteswap(value.equipment);
	byteswap(value.influencer_block);
}

template<> void byteswap<blofeld::infinite::s_spawningobjectdispenserinfluencerdefinition>(blofeld::infinite::s_spawningobjectdispenserinfluencerdefinition& value)
{
	byteswap(value.filter_flags);
	byteswap(value.influencer_block);
}

template<> void byteswap<blofeld::infinite::s_spawningspawnsettingstaggroup>(blofeld::infinite::s_spawningspawnsettingstaggroup& value)
{
	byteswap(value.anytag);
	byteswap(value.minimum_spawn_time);
	byteswap(value.hostile_visibility_cone_length);
	byteswap(value.friendly_visibility_cone_length);
	byteswap(value.visibility_cone_angle);
	byteswap(value.spawn_point_can_see_hostile_cone_length);
	byteswap(value.spawn_point_can_see_friendly_cone_length);
	byteswap(value.quantization_step);
	byteswap(value.unit_influencers_block);
	byteswap(value.active_duration);
	byteswap(value.dead_unit_influencers_block);
	byteswap(value.spawning_unit_influencers_block);
	byteswap(value.weapon_influencers_block);
	byteswap(value.vehicle_influencers_block);
	byteswap(value.projectile_influencers_block);
	byteswap(value.equipment_influencers_block);
	byteswap(value.object_dispenser_influencers_block);
}

template<> void byteswap<blofeld::infinite::s_i343spottingglobalsdefinition>(blofeld::infinite::s_i343spottingglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.traces_per_update);
	byteswap(value.trace_subdivision_length);
	byteswap(value.max_distance);
	byteswap(value.fov);
}

template<> void byteswap<blofeld::infinite::s_i343graphicssssprofile>(blofeld::infinite::s_i343graphicssssprofile& value)
{
	byteswap(value.name);
	byteswap(value.subsurface_layer_weight);
	byteswap(value.subsurface_layer_scale);
	byteswap(value.shallow_layer_weight);
	byteswap(value.shallow_layer_scale);
	byteswap(value.middle_layer_weight);
	byteswap(value.middle_layer_scale);
	byteswap(value.deep_layer_weight);
	byteswap(value.deep_layer_scale);
	byteswap(value.post_scatter_amount);
	byteswap(value.ao_color);
	byteswap(value.ao_color_amount);
	byteswap(value.ao_specular_power);
	byteswap(value.glancing_roughness);
	byteswap(value.specular_intensity);
	byteswap(value.scale_modifier_subsurface_and_shallow_layers);
	byteswap(value.scale_modifier_middle_and_deep_layers);
}

template<> void byteswap<blofeld::infinite::s_i343graphicssssprofileglobals>(blofeld::infinite::s_i343graphicssssprofileglobals& value)
{
	byteswap(value.anytag);
	byteswap(value.scattering_profiles_block);
}

template<> void byteswap<blofeld::infinite::s_soundscenarioconstantstagsoundbankloadinfoblock>(blofeld::infinite::s_soundscenarioconstantstagsoundbankloadinfoblock& value)
{
	byteswap(value.sound_bank);
}

template<> void byteswap<blofeld::infinite::s_soundscenarioconstantstag>(blofeld::infinite::s_soundscenarioconstantstag& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.scenario_sound_bank_list_block);
	byteswap(value.sound_permutation_mission_id);
}

template<> void byteswap<blofeld::infinite::s_i343aisquadconstructionsquadspecificationreference>(blofeld::infinite::s_i343aisquadconstructionsquadspecificationreference& value)
{
	byteswap(value.squad_specification);
}

template<> void byteswap<blofeld::infinite::s_i343aisquadconstructionsquadspecificationtree>(blofeld::infinite::s_i343aisquadconstructionsquadspecificationtree& value)
{
	byteswap(value.anytag);
	byteswap(value.squad_specification_list_block);
}

template<> void byteswap<blofeld::infinite::s_soundtailperroom>(blofeld::infinite::s_soundtailperroom& value)
{
	byteswap(value.tail_sound);
}

template<> void byteswap<blofeld::infinite::s_soundtailtag>(blofeld::infinite::s_soundtailtag& value)
{
	byteswap(value.anytag);
	byteswap(value.tail);
}

template<> void byteswap<blofeld::infinite::s_indirectlightproberegion>(blofeld::infinite::s_indirectlightproberegion& value)
{
	byteswap(value.name);
	byteswap(value.position_bounds_0);
	byteswap(value.position_bounds_1);
	byteswap(value.probe_count_x);
	byteswap(value.probe_count_y);
	byteswap(value.probe_count_z);
	byteswap(value.priority);
	byteswap(value.blend_radius_xy);
	byteswap(value.blend_radius_z);
	byteswap(value.irradiance_bitmap_start_index);
	byteswap(value.vsm_bitmap_index);
	byteswap(value.z_offset_bitmap_index);
	byteswap(value.z_spacing_for_z_offsets);
	byteswap(value.z_offset_cpu_data);
}

template<> void byteswap<blofeld::infinite::s_structurelightmap>(blofeld::infinite::s_structurelightmap& value)
{
	byteswap(value.anytag);
	byteswap(value.probe_regions_block);
	byteswap(value.probe_bitmaps);
	byteswap(value.number_of_baked_tod_states);
	byteswap(value.runtime_lights_block);
	byteswap(value.floating_sun_index);
	byteswap(value.baked_dws_irradiance_data);
}

template<> void byteswap<blofeld::infinite::s_structurelights>(blofeld::infinite::s_structurelights& value)
{
	byteswap(value.anytag);
	byteswap(value.generic_light_definitions_block);
	byteswap(value.lastlightid);
}

template<> void byteswap<blofeld::infinite::s_s_structure_manifest_bsp_definition>(blofeld::infinite::s_s_structure_manifest_bsp_definition& value)
{
	byteswap(value.build_identifer);
	byteswap(value.parent_build_identifer);
	byteswap(value.bsp_name);
}

template<> void byteswap<blofeld::infinite::s_s_structure_manifest_definition>(blofeld::infinite::s_s_structure_manifest_definition& value)
{
	byteswap(value.build_identifer$2);
	byteswap(value.parent_build_identifer);
	byteswap(value.bsp_manifest_block);
}

template<> void byteswap<blofeld::infinite::s_structureseamoriginalvertexplanenormals>(blofeld::infinite::s_structureseamoriginalvertexplanenormals& value)
{
	byteswap(value.triangle_normal);
}

template<> void byteswap<blofeld::infinite::s_s_structure_seam_original_vertex>(blofeld::infinite::s_s_structure_seam_original_vertex& value)
{
	byteswap(value.original_vertex);
	byteswap(value.final_point_index);
	byteswap(value.plane_normals_block);
}

template<> void byteswap<blofeld::infinite::s_s_structure_seam_original_geometry>(blofeld::infinite::s_s_structure_seam_original_geometry& value)
{
	byteswap(value.original_vertices_block);
}

template<> void byteswap<blofeld::infinite::s_structureseamfinalplanesparam>(blofeld::infinite::s_structureseamfinalplanesparam& value)
{
	byteswap(value.plane);
}

template<> void byteswap<blofeld::infinite::s_structureseamfinalpointsparam>(blofeld::infinite::s_structureseamfinalpointsparam& value)
{
	byteswap(value.final_point);
}

template<> void byteswap<blofeld::infinite::s_s_structure_seam_final_triangle>(blofeld::infinite::s_s_structure_seam_final_triangle& value)
{
	byteswap(value.final_plane);
	byteswap(value.final_point0);
	byteswap(value.final_point1);
	byteswap(value.final_point2);
}

template<> void byteswap<blofeld::infinite::s_s_structure_seam_final_edge>(blofeld::infinite::s_s_structure_seam_final_edge& value)
{
	byteswap(value.final_point0);
	byteswap(value.final_point1);
}

template<> void byteswap<blofeld::infinite::s_s_structure_seam_final_geometry>(blofeld::infinite::s_s_structure_seam_final_geometry& value)
{
	byteswap(value.planes_block);
	byteswap(value.points_block);
	byteswap(value.triangles_block);
	byteswap(value.edges_block);
}

template<> void byteswap<blofeld::infinite::s_s_structure_seam>(blofeld::infinite::s_s_structure_seam& value)
{
	byteswap(value.identifier);
	byteswap(value.original);
	byteswap(value._final);
}

template<> void byteswap<blofeld::infinite::s_s_structure_seams>(blofeld::infinite::s_s_structure_seams& value)
{
	byteswap(value.anytag);
	byteswap(value.structure_manifest);
	byteswap(value.version);
	byteswap(value.errors_block);
	byteswap(value.seams_block);
	byteswap(value.seam_triangle_mopp_code_block);
}

template<> void byteswap<blofeld::infinite::s_special_movement_definition>(blofeld::infinite::s_special_movement_definition& value)
{
	byteswap(value.special_movement_1);
}

template<> void byteswap<blofeld::infinite::s_style_behavior_name>(blofeld::infinite::s_style_behavior_name& value)
{
	byteswap(value.behavior_name);
}

template<> void byteswap<blofeld::infinite::s_style_definition>(blofeld::infinite::s_style_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.combat_status_decay_options$2);
	byteswap(value.style_control);
	byteswap(value.behaviors1);
	byteswap(value.behaviors2);
	byteswap(value.behaviors3);
	byteswap(value.behaviors4);
	byteswap(value.behaviors5);
	byteswap(value.behaviors6);
	byteswap(value.behaviors7);
	byteswap(value.behaviors8);
	byteswap(value.behaviors9);
	byteswap(value.behaviors10);
	byteswap(value.behaviors11);
	byteswap(value.behaviors12);
	byteswap(value.behaviors13);
	byteswap(value.behaviors14);
	byteswap(value.behaviors15);
	byteswap(value.behaviors16);
	byteswap(value.special_movement_block);
	byteswap(value.behavior_list_block);
}

template<> void byteswap<blofeld::infinite::s_subtracksdefinition>(blofeld::infinite::s_subtracksdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.subtracks_block);
}

template<> void byteswap<blofeld::infinite::s_i343objectsshieldupgrademetadata>(blofeld::infinite::s_i343objectsshieldupgrademetadata& value)
{
	byteswap(value.anytag);
	byteswap(value.upgrade_level);
}

template<> void byteswap<blofeld::infinite::s_interfaceslamsurientrydefinition>(blofeld::infinite::s_interfaceslamsurientrydefinition& value)
{
	byteswap(value.uri);
	byteswap(value.screen_reference);
}

template<> void byteswap<blofeld::infinite::s_interfaceslamsurilookuptabledefinition>(blofeld::infinite::s_interfaceslamsurilookuptabledefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.root_screen_reference);
	byteswap(value.uri_entries_block);
}

template<> void byteswap<blofeld::infinite::s_svgreaderpointer>(blofeld::infinite::s_svgreaderpointer& value)
{
	byteswap(value.svg_source_bytes_pointer);
	byteswap(value.svg_source_bytes_length);
	byteswap(value.filename);
}

template<> void byteswap<blofeld::infinite::s_svgsourcefiletag>(blofeld::infinite::s_svgsourcefiletag& value)
{
	byteswap(value.anytag);
	byteswap(value.reader);
	byteswap(value.generatedvectorarttag);
}

template<> void byteswap<blofeld::infinite::s_switchableasset>(blofeld::infinite::s_switchableasset& value)
{
	byteswap(value.reference);
}

template<> void byteswap<blofeld::infinite::s_switchableassetset>(blofeld::infinite::s_switchableassetset& value)
{
	byteswap(value.anytag);
	byteswap(value.asset_references_block);
}

template<> void byteswap<blofeld::infinite::s_taggraphtag>(blofeld::infinite::s_taggraphtag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_i343physicsterraincollisioncellgeotag>(blofeld::infinite::s_i343physicsterraincollisioncellgeotag& value)
{
	byteswap(value.anytag);
	byteswap(value.serialized_havok_geometry_block);
}

template<> void byteswap<blofeld::infinite::s_i343physicsterraincollisiongeoparams>(blofeld::infinite::s_i343physicsterraincollisiongeoparams& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.max_distance);
	byteswap(value.max_shrink);
}

template<> void byteswap<blofeld::infinite::s_i343physicsterraincollisiongeocellinputs>(blofeld::infinite::s_i343physicsterraincollisiongeocellinputs& value)
{
	byteswap(value.size);
	byteswap(value.pixels);
	byteswap(value.materials);
}

template<> void byteswap<blofeld::infinite::s_i343physicsterraincollisiongeocellinputstag>(blofeld::infinite::s_i343physicsterraincollisiongeocellinputstag& value)
{
	byteswap(value.anytag);
	byteswap(value.cell_inputs_block);
}

template<> void byteswap<blofeld::infinite::s_i343physicsterraincollisiongeoinputsentry>(blofeld::infinite::s_i343physicsterraincollisiongeoinputsentry& value)
{
	byteswap(value.cell_input);
}

template<> void byteswap<blofeld::infinite::s_i343physicsterraincollisiongeoinputssettag>(blofeld::infinite::s_i343physicsterraincollisiongeoinputssettag& value)
{
	byteswap(value.anytag);
	byteswap(value.bitmap);
	byteswap(value.terrainruntime);
	byteswap(value.optimizationparams);
	byteswap(value.cell_outputs_block);
	byteswap(value.input_cache_block);
	byteswap(value.cell_inputs_block);
}

template<> void byteswap<blofeld::infinite::s_i343graphicstexturegroupsettings>(blofeld::infinite::s_i343graphicstexturegroupsettings& value)
{
	byteswap(value.name);
	byteswap(value.editor_group);
	byteswap(value.mip_settings);
	byteswap(value.required_resolution_settings);
}

template<> void byteswap<blofeld::infinite::s_i343graphicstexturegrouptable>(blofeld::infinite::s_i343graphicstexturegrouptable& value)
{
	byteswap(value.anytag);
	byteswap(value.options);
	byteswap(value.settings_block);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentstaterulesgraphcontenttag>(blofeld::infinite::s_nodegraphcontentstaterulesgraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_tifsourcefiletag>(blofeld::infinite::s_tifsourcefiletag& value)
{
	byteswap(value.anytag);
	byteswap(value.width);
	byteswap(value.height);
	byteswap(value.format);
	byteswap(value.rowpitch);
	byteswap(value.slicepitch);
	byteswap(value.pixels);
	byteswap(value.pixel_data);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontenttransitionlogicgraphcontenttag>(blofeld::infinite::s_nodegraphcontenttransitionlogicgraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_transitionlogicgraphtag>(blofeld::infinite::s_transitionlogicgraphtag& value)
{
	byteswap(value.xanimnodegraph);
}

template<> void byteswap<blofeld::infinite::s_i343aitokensystemthreattokencharacterlimit>(blofeld::infinite::s_i343aitokensystemthreattokencharacterlimit& value)
{
	byteswap(value.character_type);
	byteswap(value.max_character_instances);
}

template<> void byteswap<blofeld::infinite::s_i343aitokensystemthreattokendefinition>(blofeld::infinite::s_i343aitokensystemthreattokendefinition& value)
{
	byteswap(value.aiming_angle);
	byteswap(value.aiming_score_modifier);
	byteswap(value.recently_damaged_score_modifier);
	byteswap(value.recently_damaged_duration);
	byteswap(value.has_clear_los_score_modifier);
	byteswap(value.player_close_to_enemy_score_modifier);
	byteswap(value.close_player_distance);
	byteswap(value.player_within_combat_range_of_enemy_score_modifier);
	byteswap(value.hasnt_acquired_token_in_a_while_score_modifier);
	byteswap(value.hasnt_acquired_token_in_a_while_time);
	byteswap(value.recently_acquired_token_score_modifier);
	byteswap(value.recently_acquired_token_time);
	byteswap(value.fully_effective_score_modifier);
	byteswap(value.character_type_limit_modifier);
	byteswap(value.character_limits_block);
}

template<> void byteswap<blofeld::infinite::s_i343aitokensystemgrenadetokendefinition>(blofeld::infinite::s_i343aitokensystemgrenadetokendefinition& value)
{
	byteswap(value.flags);
	byteswap(value.hasnt_thrown_a_grenade_recently_score_modifier);
	byteswap(value.hasnt_thrown_a_grenade_recently_time);
	byteswap(value.has_no_ranged_weapon_score_modifier);
	byteswap(value.recently_damaged_score_modifier);
	byteswap(value.recently_damaged_duration);
	byteswap(value.high_priority_behavior_score_modifier);
}

template<> void byteswap<blofeld::infinite::s_i343aitokensystemtokensystemglobalsdefinition>(blofeld::infinite::s_i343aitokensystemtokensystemglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.threat_token_globals_block);
	byteswap(value.grenade_token_globals_block);
	byteswap(value.recently_damaged_duration);
	byteswap(value.player_aiming_angle);
	byteswap(value.close_player_distance);
	byteswap(value.recently_acquired_duration);
	byteswap(value.aimed_at_transition_time);
	byteswap(value.recently_damaged_score_modifier);
	byteswap(value.player_aiming_at_score_modifier);
	byteswap(value.close_player_score_modifier);
	byteswap(value.in_combat_range_score_modifier);
	byteswap(value.recently_acquired_score_modifier);
	byteswap(value.player_within_ez_score_modifier);
	byteswap(value.first_character_type_score_modifier);
	byteswap(value.has_clear_los_score_modifier);
	byteswap(value.recently_acquired_override_time);
	byteswap(value.score_override_threshold);
	byteswap(value.holding_score_override_threshold);
	byteswap(value.proximity_override_distance);
	byteswap(value.damage_modifier);
	byteswap(value.burst_error_modifier);
	byteswap(value.burst_error_bonus);
	byteswap(value.burst_duration_modifier);
	byteswap(value.burst_radius_modifier);
	byteswap(value.grenade_miss_distance);
	byteswap(value.accuracy_time_modifier);
}

template<> void byteswap<blofeld::infinite::s_tracerpropertyscalar>(blofeld::infinite::s_tracerpropertyscalar& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
	byteswap(value.runtime_m_constant_value);
	byteswap(value.runtime_m_flags);
}

template<> void byteswap<blofeld::infinite::s_tracerpropertyrealvector3d>(blofeld::infinite::s_tracerpropertyrealvector3d& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
	byteswap(value.runtime_m_constant_value);
	byteswap(value.runtime_m_flags);
	byteswap(value.starting_interpolant);
	byteswap(value.ending_interpolant);
}

template<> void byteswap<blofeld::infinite::s_tracerpropertyrealpoint2d>(blofeld::infinite::s_tracerpropertyrealpoint2d& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
	byteswap(value.runtime_m_constant_value);
	byteswap(value.runtime_m_flags);
	byteswap(value.starting_interpolant);
	byteswap(value.ending_interpolant);
}

template<> void byteswap<blofeld::infinite::s_tracerpropertycolor>(blofeld::infinite::s_tracerpropertycolor& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
	byteswap(value.runtime_m_constant_value);
	byteswap(value.runtime_m_flags);
}

template<> void byteswap<blofeld::infinite::s_tracerdefinition>(blofeld::infinite::s_tracerdefinition& value)
{
	byteswap(value.tracer_name);
	byteswap(value.flags);
	byteswap(value.profile_shape);
	byteswap(value.number_of_n_gon_sides);
	byteswap(value.origin_fade_range);
	byteswap(value.origin_fade_cutoff);
	byteswap(value.edge_fade_range);
	byteswap(value.edge_fade_cutoff);
	byteswap(value.profile_lifespan);
	byteswap(value.profile_self_acceleration);
	byteswap(value.length);
	byteswap(value.offset);
	byteswap(value.profile_size);
	byteswap(value.profile_density);
	byteswap(value.profile_offset);
	byteswap(value.profile_rotation);
	byteswap(value.appearance_flags);
	byteswap(value.sort_bias);
	byteswap(value.actual_material);
	byteswap(value.uv_tiling);
	byteswap(value.uv_scrolling);
	byteswap(value.profile_color_override_mode);
	byteswap(value.profile_color);
	byteswap(value.profile_alpha);
	byteswap(value.profile_alpha2);
	byteswap(value.profile_black_point);
	byteswap(value.profile_palette);
	byteswap(value.profile_intensity);
	byteswap(value.runtime_m_constantperprofileproperties);
	byteswap(value.runtime_m_usedstates);
	byteswap(value.runtime_m_maxprofilecount);
	byteswap(value.runtime_m_gpudata);
	byteswap(value.m_pipelinestate);
}

template<> void byteswap<blofeld::infinite::s_tracersystemdefinition>(blofeld::infinite::s_tracersystemdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.tracer_system_flags);
	byteswap(value.camera_distance_range_override);
	byteswap(value.tracers_block);
}

template<> void byteswap<blofeld::infinite::s_cameratrackdefinition>(blofeld::infinite::s_cameratrackdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.track);
}

template<> void byteswap<blofeld::infinite::s_i343physicsterraincollisiongeoresource>(blofeld::infinite::s_i343physicsterraincollisiongeoresource& value)
{
	byteswap(value.terraincollisiongeodata_resource);
}

template<> void byteswap<blofeld::infinite::s_i343physicsterraincollisiongeotag>(blofeld::infinite::s_i343physicsterraincollisiongeotag& value)
{
	byteswap(value.anytag);
	byteswap(value.terrain_collision_geometry_block);
}

template<> void byteswap<blofeld::infinite::s_i343effectstrackdecalsystemdefinition>(blofeld::infinite::s_i343effectstrackdecalsystemdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.decal_system);
	byteswap(value.min_distance);
	byteswap(value.max_distance);
	byteswap(value.distance_velocity_scale);
	byteswap(value.max_offset);
	byteswap(value.offset_velocity_scale);
	byteswap(value.contact_patch_width);
	byteswap(value.contact_patch_length);
	byteswap(value.texture_u_repeat_length);
}

template<> void byteswap<blofeld::infinite::s_i343terraininputstag>(blofeld::infinite::s_i343terraininputstag& value)
{
	byteswap(value.anytag);
	byteswap(value.placement_block);
	byteswap(value.splines_block);
	byteswap(value.terrain_volumes_block);
}

template<> void byteswap<blofeld::infinite::s_i343terraintilereference>(blofeld::infinite::s_i343terraintilereference& value)
{
	byteswap(value.tile);
}

template<> void byteswap<blofeld::infinite::s_i343terraintexturesettings>(blofeld::infinite::s_i343terraintexturesettings& value)
{
	byteswap(value.surface_id);
	byteswap(value.texel_density);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343terrainsystemtag>(blofeld::infinite::s_i343terrainsystemtag& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.position);
	byteswap(value.terrain_size);
	byteswap(value.terrain_height);
	byteswap(value.tile_x_count);
	byteswap(value.tile_y_count);
	byteswap(value.tiles_block);
	byteswap(value.shared_parameters_block);
	byteswap(value.source_texture_settings_block);
	byteswap(value.intermediate_texture_settings_block);
	byteswap(value.sculpt_graph);
	byteswap(value.gpu_surfacing_graph);
	byteswap(value.render_material);
	byteswap(value.masks_composite_material);
	byteswap(value.macro_color_near_distance);
	byteswap(value.macro_color_far_distance);
	byteswap(value.macro_color_near_opacity);
	byteswap(value.macro_color_far_opacity);
	byteswap(value.micro_height_vertex_density);
	byteswap(value.micro_height_radius);
	byteswap(value.micro_height_mip_level);
	byteswap(value.micro_height_scale);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuitransitionsound>(blofeld::infinite::s_interfacecustomizationuitransitionsound& value)
{
	byteswap(value.display_name);
	byteswap(value.sound);
	byteswap(value.transition_sound_time);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuitransitionsoundstag>(blofeld::infinite::s_interfacecustomizationuitransitionsoundstag& value)
{
	byteswap(value.anytag);
	byteswap(value.transition_sounds_block);
}

template<> void byteswap<blofeld::infinite::s_i343terraintiletag>(blofeld::infinite::s_i343terraintiletag& value)
{
	byteswap(value.anytag);
	byteswap(value.terrain_system);
	byteswap(value.tile_x_index);
	byteswap(value.tile_y_index);
	byteswap(value.parameters_block);
}

template<> void byteswap<blofeld::infinite::s_i343terrainseedruntime>(blofeld::infinite::s_i343terrainseedruntime& value)
{
	byteswap(value.runtime_terrain);
}

template<> void byteswap<blofeld::infinite::s_i343terrainseedformoduletag>(blofeld::infinite::s_i343terrainseedformoduletag& value)
{
	byteswap(value.anytag);
	byteswap(value.source_level);
	byteswap(value.runtime_terrain_seeds_block);
}

template<> void byteswap<blofeld::infinite::s_basicblockuseonce>(blofeld::infinite::s_basicblockuseonce& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_s_basic_struct>(blofeld::infinite::s_s_basic_struct& value)
{
	byteswap(value.long_in_struct);
}

template<> void byteswap<blofeld::infinite::s_basicarray>(blofeld::infinite::s_basicarray& value)
{
	byteswap(value.long_in_array);
}

template<> void byteswap<blofeld::infinite::s_s_block_with_struct>(blofeld::infinite::s_s_block_with_struct& value)
{
	byteswap(value.struct_in_block);
}

template<> void byteswap<blofeld::infinite::s_s_basic_block>(blofeld::infinite::s_s_basic_block& value)
{
	byteswap(value.name);
}

template<> void byteswap<blofeld::infinite::s_s_complex_sub_block>(blofeld::infinite::s_s_complex_sub_block& value)
{
	byteswap(value.reference);
	byteswap(value.raz_block);
}

template<> void byteswap<blofeld::infinite::s_s_complex_block>(blofeld::infinite::s_s_complex_block& value)
{
	byteswap(value.foo_block);
	byteswap(value.bar_block);
}

template<> void byteswap<blofeld::infinite::s_s_complex_struct>(blofeld::infinite::s_s_complex_struct& value)
{
	byteswap(value.basic_block);
	byteswap(value.color);
	byteswap(value.complex_block);
}

template<> void byteswap<blofeld::infinite::s_s_complex_array_element>(blofeld::infinite::s_s_complex_array_element& value)
{
	byteswap(value.string_in_array);
	byteswap(value.basic_block_in_array_block);
	byteswap(value.point_2d_in_array);
	byteswap(value.complex_struct_in_array);
}

template<> void byteswap<blofeld::infinite::s_s_motherload_struct>(blofeld::infinite::s_s_motherload_struct& value)
{
	byteswap(value._struct);
	byteswap(value.array);
	byteswap(value.block_block);
}

template<> void byteswap<blofeld::infinite::s_test_tag_definition>(blofeld::infinite::s_test_tag_definition& value)
{
	byteswap(value.anytag);
	byteswap(value._string);
	byteswap(value.long_string);
	byteswap(value.hashstring_global_namespace);
	byteswap(value.hashstring_test_namespace);
	byteswap(value.hashstring_multi_namespace);
	byteswap(value._char);
	byteswap(value._short);
	byteswap(value.int64);
	byteswap(value._long);
	byteswap(value._byte);
	byteswap(value._word);
	byteswap(value._dword);
	byteswap(value._qword);
	byteswap(value._angle);
	byteswap(value._tag);
	byteswap(value.char_enum);
	byteswap(value.short_enum);
	byteswap(value.long_enum);
	byteswap(value.byte_flags);
	byteswap(value.word_flags);
	byteswap(value.long_flags);
	byteswap(value.short_point_2d);
	byteswap(value.short_rectangle_2d);
	byteswap(value.rgb_pixel_32);
	byteswap(value.argb_pixel_32);
	byteswap(value._real);
	byteswap(value.fraction);
	byteswap(value.real_point_2d);
	byteswap(value.real_point_3d);
	byteswap(value.real_vector_2d);
	byteswap(value.real_vector_3d);
	byteswap(value._real_quaternion);
	byteswap(value.real_euler_angles_2d);
	byteswap(value.real_euler_angles_3d);
	byteswap(value.plane_2d);
	byteswap(value.plane_3d);
	byteswap(value.real_rgb_color);
	byteswap(value.real_argb_color);
	byteswap(value._real_hsv_color);
	byteswap(value._real_ahsv_color);
	byteswap(value._short_bounds);
	byteswap(value._angle_bounds);
	byteswap(value._real_bounds);
	byteswap(value.fraction_bounds);
	byteswap(value.tag_reference);
	byteswap(value.basic_block);
	byteswap(value.byte_block_flags);
	byteswap(value.word_block_flags);
	byteswap(value.dword_block_flags);
	byteswap(value.char_block_index);
	byteswap(value.short_block_index);
	byteswap(value.long_block_index);
	byteswap(value.char_block_index_custom);
	byteswap(value.short_block_index_custom);
	byteswap(value.long_block_index_custom);
	byteswap(value.data);
	byteswap(value.basic_struct);
	byteswap(value.basic_array);
	byteswap(value.basic_resource);
	byteswap(value.block_with_struct_block);
	byteswap(value.complex_block);
	byteswap(value.complex_struct);
	byteswap(value.complex_array);
	byteswap(value.motherload_struct);
}

template<> void byteswap<blofeld::infinite::s_triggervolumecomponentdefinition>(blofeld::infinite::s_triggervolumecomponentdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.phantom_physics_sounds);
}

template<> void byteswap<blofeld::infinite::s_i343simulationucnauthoritytrustinterpolatedsettings>(blofeld::infinite::s_i343simulationucnauthoritytrustinterpolatedsettings& value)
{
	byteswap(value.position_delta_max);
	byteswap(value.rotation_delta_max);
	byteswap(value.linear_velocity_delta_max);
	byteswap(value.angular_velocity_delta_max);
}

template<> void byteswap<blofeld::infinite::s_i343simulationucnauthoritytrustsettings>(blofeld::infinite::s_i343simulationucnauthoritytrustsettings& value)
{
	byteswap(value.anytag);
	byteswap(value.velocity_interpolation_range);
	byteswap(value.interpolation_min_values);
	byteswap(value.interpolation_max_values);
	byteswap(value.cumulative_limit_fraction);
}

template<> void byteswap<blofeld::infinite::s_s_vocalization_stimulus>(blofeld::infinite::s_s_vocalization_stimulus& value)
{
	byteswap(value.flags);
	byteswap(value.stimulus);
	byteswap(value.sound);
}

template<> void byteswap<blofeld::infinite::s_s_vocalization_sound>(blofeld::infinite::s_s_vocalization_sound& value)
{
	byteswap(value.vocalization);
	byteswap(value.flags);
	byteswap(value.stimuli_block);
}

template<> void byteswap<blofeld::infinite::s_s_dialogue_definition>(blofeld::infinite::s_s_dialogue_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.vocalizations_block);
	byteswap(value.mission_dialogue_designator);
	byteswap(value.vocalizationlookup);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentunittestgraphcontenttag>(blofeld::infinite::s_nodegraphcontentunittestgraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_i343gameplaymenuhighvaluetargetuiinfo>(blofeld::infinite::s_i343gameplaymenuhighvaluetargetuiinfo& value)
{
	byteswap(value.target_number);
	byteswap(value.targetspriteindex);
	byteswap(value.mission_id);
	byteswap(value.faction);
	byteswap(value.unlock_weapon_name);
	byteswap(value.unlock_weapon_description);
	byteswap(value.unlock_weapon_sprite_index);
}

template<> void byteswap<blofeld::infinite::s_i343gameplaymenuhighvaluetargetdeeplinkinfo>(blofeld::infinite::s_i343gameplaymenuhighvaluetargetdeeplinkinfo& value)
{
	byteswap(value.zoomlevel);
	byteswap(value.duration);
}

template<> void byteswap<blofeld::infinite::s_i343gameplaymenugameplaymenuuiinfo>(blofeld::infinite::s_i343gameplaymenugameplaymenuuiinfo& value)
{
	byteswap(value.anytag);
	byteswap(value.high_value_target_ui_info_block);
	byteswap(value.deeplink_info);
}

template<> void byteswap<blofeld::infinite::s_navpointpresentationtagblock>(blofeld::infinite::s_navpointpresentationtagblock& value)
{
	byteswap(value.name);
	byteswap(value.navpoint_tag);
}

template<> void byteswap<blofeld::infinite::s_interfacefasthudgamertagdisplayoverrides>(blofeld::infinite::s_interfacefasthudgamertagdisplayoverrides& value)
{
	byteswap(value.visibility_distance);
	byteswap(value.draw_flags);
}

template<> void byteswap<blofeld::infinite::s_s_player_training_entry_data>(blofeld::infinite::s_s_player_training_entry_data& value)
{
	byteswap(value.display_string);
	byteswap(value.max_display_time);
	byteswap(value.display_count);
	byteswap(value.dissapear_delay);
	byteswap(value.redisplay_delay);
	byteswap(value.display_delay_s);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_hudparallaxparamsblock>(blofeld::infinite::s_hudparallaxparamsblock& value)
{
	byteswap(value.name);
	byteswap(value.parallax_falloff_time);
	byteswap(value.parallax_camera_velocity_factor);
	byteswap(value.parallax_movement_multiplier);
	byteswap(value.parallax_clamp_min);
	byteswap(value.parallax_clamp_max);
	byteswap(value.parallax_angular_multiplier);
	byteswap(value.parallax_angle_clamp_min);
	byteswap(value.parallax_angle_clamp_max);
	byteswap(value.camera_type);
}

template<> void byteswap<blofeld::infinite::s_hudwarpparamsblock>(blofeld::infinite::s_hudwarpparamsblock& value)
{
	byteswap(value.name);
	byteswap(value.ellipsoid_scale);
	byteswap(value.ellipsoid_center);
	byteswap(value.output_offset);
	byteswap(value.tessellation_x);
	byteswap(value.tessellation_y);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_hudchromaticaberrationparamsblock>(blofeld::infinite::s_hudchromaticaberrationparamsblock& value)
{
	byteswap(value.name);
	byteswap(value.base_mix);
	byteswap(value.red_aberration_scale);
	byteswap(value.green_aberration_scale);
	byteswap(value.blue_aberration_scale);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_hudhighcontrastparamsblock>(blofeld::infinite::s_hudhighcontrastparamsblock& value)
{
	byteswap(value.name);
	byteswap(value.dynamic_threshold_min);
	byteswap(value.dynamic_threshold_max);
	byteswap(value.dynamic_threshold_clamp);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_userinterfacehudglobalsdefinitions>(blofeld::infinite::s_userinterfacehudglobalsdefinitions& value)
{
	byteswap(value.anytag);
	byteswap(value.flags);
	byteswap(value.active_camo_appears_as_enemy_when_lower_than);
	byteswap(value.height_classified_as_above);
	byteswap(value.height_classified_as_below);
	byteswap(value.upwards_movement_scaling);
	byteswap(value.downwards_movement_scaling);
	byteswap(value.crouching_movement_scaling);
	byteswap(value.edge_indicator_position_scale);
	byteswap(value.vehicle_navigation_marker_range_detection);
	byteswap(value.vehicle_contested_flash_time);
	byteswap(value.activecamo_xray_animation_cooldown_);
	byteswap(value.dead_people_visible_time);
	byteswap(value.motion_tracker_fade_frames);
	byteswap(value.armor_mod_display_counter);
	byteswap(value.broadsword_parallax_velocity_override);
	byteswap(value.pelican_parallax_velocity_override);
	byteswap(value.fanfare_display_time_);
	byteswap(value.fanfare_speed_up_display_time_);
	byteswap(value.medal_score_message_lifetime_);
	byteswap(value.medal_score_message_restart_time_);
	byteswap(value.event_feed_life_time_cui);
	byteswap(value.remote_sensor_range);
	byteswap(value.remote_sensor_weak_distance);
	byteswap(value.remote_sensor_failure_distance);
	byteswap(value.near_player_distance_metres);
	byteswap(value.defaultnavpointposition2d_pixels);
	byteswap(value.defaultnavpoint2ddelaytime_seconds);
	byteswap(value.defaultnavpointspacing2d_pixels);
	byteswap(value.defaultdockingmovefraction);
	byteswap(value.numeric_timer_expiry_threshold_seconds);
	byteswap(value.normalized_timer_expiry_threshold);
	byteswap(value.camouflage_maximum_visible_intensity);
	byteswap(value.damage_state_reset_time_milliseconds);
	byteswap(value.firing_state_reset_time_milliseconds);
	byteswap(value.navpoint_presentations_block);
	byteswap(value.friendly_block);
	byteswap(value.fireteam_block);
	byteswap(value.enemy_block);
	byteswap(value.shield_bar_recent_damage_duration);
	byteswap(value.damage_indicator_response_duration);
	byteswap(value.damage_flash_response_duration);
	byteswap(value.tiled_mesh_seen_when_hit_in_1st_person);
	byteswap(value.number_of_tiles_across_the_screen);
	byteswap(value.microtexture_warp_x);
	byteswap(value.microtexture_warp_y);
	byteswap(value.intensity_scalar);
	byteswap(value.taa_mask_strength);
	byteswap(value.alpha_multiplier);
	byteswap(value.total_intensity_cap_01);
	byteswap(value.screen_blob_flags);
	byteswap(value.color_of_effect_while_shielded);
	byteswap(value.color_of_effect_with_no_shield);
	byteswap(value.shield_pattern_scale_x);
	byteswap(value.shield_pattern_scale_y);
	byteswap(value.effect_overall_intensity);
	byteswap(value.effect_lifetime_in_seconds);
	byteswap(value.effect_width_on_first_frame_0_1);
	byteswap(value.effect_width_on_last_frame_0_1);
	byteswap(value.opacity_time_function);
	byteswap(value.size_time_function);
	byteswap(value.size_damage_function);
	byteswap(value.pattern_shield_texture);
	byteswap(value.mask_0_texture);
	byteswap(value.mask_1_texture);
	byteswap(value.mask_2_texture);
	byteswap(value.mask_3_texture);
	byteswap(value.reticule_maximum_spread_angle);
	byteswap(value.banned_vehicle_entrance_sound);
	byteswap(value.high_contrast_flags);
	byteswap(value.minimum_threshold);
	byteswap(value.maximum_threshold);
	byteswap(value.clamp_threshold);
	byteswap(value.darken_factor);
	byteswap(value.brighten_factor);
	byteswap(value.string_references_block);
	byteswap(value.interact_message_appear_sound);
	byteswap(value.interact_message_disappear_sound_);
	byteswap(value.medal_fanfare_animation_lifetime_);
	byteswap(value.medal_fanfare_animation_in_lifetime_);
	byteswap(value.medal_fanfare_animation_out_begin_time_);
	byteswap(value.max_medals_on_screen);
	byteswap(value.event_fanfare_animation_lifetime_);
	byteswap(value.event_fanfare_animation_in_lifetime_);
	byteswap(value.event_fanfare_animation_out_begin_time_);
	byteswap(value.personal_score_animation_lifetime_);
	byteswap(value.personal_score_animation_in_lifetime_);
	byteswap(value.personal_score_animation_out_begin_time_);
	byteswap(value.heroic_killfeed_color);
	byteswap(value.legendary_killfeed_color);
	byteswap(value.mythic_killfeed_color_);
	byteswap(value.player_training_data_block);
	byteswap(value.grenade_indicator_danger_radius_);
	byteswap(value.grenade_indicator_lifetime_dampener_);
	byteswap(value.vehicle_transition_time_seconds);
	byteswap(value.parallax_params_block);
	byteswap(value.warp_params_block);
	byteswap(value.chromatic_aberration_params_block);
	byteswap(value.high_contrast_params_block);
	byteswap(value.threat_tracker_range);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuiiteminspectsettings>(blofeld::infinite::s_interfacecustomizationuiiteminspectsettings& value)
{
	byteswap(value.fodeout_end_time);
	byteswap(value.default_composer_scene_name);
}

template<> void byteswap<blofeld::infinite::s_interfacecustomizationuiiteminspecttag>(blofeld::infinite::s_interfacecustomizationuiiteminspecttag& value)
{
	byteswap(value.anytag);
	byteswap(value.customization_inspect_settings_block);
}

template<> void byteswap<blofeld::infinite::s_s_user_interface_sounds>(blofeld::infinite::s_s_user_interface_sounds& value)
{
	byteswap(value.anytag);
	byteswap(value.tab_up);
	byteswap(value.tab_left);
	byteswap(value.tab_right);
	byteswap(value.tab_down);
	byteswap(value.alt_stick_up);
	byteswap(value.alt_stick_left);
	byteswap(value.alt_stick_right);
	byteswap(value.alt_stick_down);
	byteswap(value.alt_tab_up);
	byteswap(value.alt_tab_left);
	byteswap(value.alt_tab_right);
	byteswap(value.alt_tab_down);
	byteswap(value.a_button_pressed);
	byteswap(value.b_button_pressed);
	byteswap(value.x_button_pressed);
	byteswap(value.y_button_pressed);
	byteswap(value.left_trigger_pressed);
	byteswap(value.right_trigger_pressed);
	byteswap(value.d_pad_up_pressed);
	byteswap(value.d_pad_left_pressed);
	byteswap(value.d_pad_right_pressed);
	byteswap(value.d_pad_down_pressed);
	byteswap(value.start_button_pressed);
	byteswap(value.back_button_pressed);
	byteswap(value.left_stick_pressed);
	byteswap(value.right_stick_pressed);
	byteswap(value.left_bumper_pressed);
	byteswap(value.right_bumper_pressed);
	byteswap(value.left_thumbstick_pressed);
	byteswap(value.right_thumbstick_pressed);
	byteswap(value.left_stick_pressed_left);
	byteswap(value.left_stick_pressed_right);
	byteswap(value.left_stick_pressed_up);
	byteswap(value.left_stick_pressed_down);
	byteswap(value.right_stick_pressed_left);
	byteswap(value.right_stick_pressed_right);
	byteswap(value.right_stick_pressed_up);
	byteswap(value.right_stick_pressed_down);
	byteswap(value.a_button_released);
	byteswap(value.b_button_released);
	byteswap(value.x_button_released);
	byteswap(value.y_button_released);
	byteswap(value.left_trigger_released);
	byteswap(value.right_trigger_released);
	byteswap(value.d_pad_up_released);
	byteswap(value.d_pad_left_released);
	byteswap(value.d_pad_right_released);
	byteswap(value.d_pad_down_released);
	byteswap(value.start_button_released);
	byteswap(value.back_button_released);
	byteswap(value.left_stick_released);
	byteswap(value.right_stick_released);
	byteswap(value.left_bumper_released);
	byteswap(value.right_bumper_released);
	byteswap(value.left_thumbstick_released);
	byteswap(value.right_thumbstick_released);
	byteswap(value.left_stick_released_left);
	byteswap(value.left_stick_released_right);
	byteswap(value.left_stick_released_up);
	byteswap(value.left_stick_released_down);
	byteswap(value.right_stick_released_left);
	byteswap(value.right_stick_released_right);
	byteswap(value.right_stick_released_up);
	byteswap(value.right_stick_released_down);
	byteswap(value.error);
	byteswap(value.screen_transition_in);
	byteswap(value.screen_transition_out);
	byteswap(value.game_start_countdown_timer_first_tick);
	byteswap(value.game_start_countdown_timer_tick);
	byteswap(value.game_start_countdown_timer_final_tick);
	byteswap(value.alternate_countdown_timer_first_tick);
	byteswap(value.alternate_countdown_timer_tick);
	byteswap(value.alternate_countdown_timer_final_tick);
	byteswap(value.matchmaking_started);
	byteswap(value.matchmaking_stopped);
	byteswap(value.custom_game_started);
	byteswap(value.custom_game_stopped);
	byteswap(value.campaign_started);
	byteswap(value.campaign_stopped);
	byteswap(value.game_completion);
	byteswap(value.winning_bonus);
	byteswap(value.hopper_bonus);
	byteswap(value.boost_bonus);
	byteswap(value.fasttrack_bonus);
	byteswap(value.totals);
	byteswap(value.subrank_up);
	byteswap(value.rank_up);
	byteswap(value.completed);
	byteswap(value.counter_loop);
	byteswap(value.score_bonus);
	byteswap(value.rewards);
}

template<> void byteswap<blofeld::infinite::s_interfaceuivehicleseattagblock>(blofeld::infinite::s_interfaceuivehicleseattagblock& value)
{
	byteswap(value.label);
	byteswap(value.boarding_grenade_string);
	byteswap(value.boarding_melee_string);
	byteswap(value.in_seat_string);
	byteswap(value.enter_seat_string);
}

template<> void byteswap<blofeld::infinite::s_interfaceuivehicledisplayinfo>(blofeld::infinite::s_interfaceuivehicledisplayinfo& value)
{
	byteswap(value.anytag);
	byteswap(value.name);
	byteswap(value.vehicle_flip_string);
	byteswap(value.tint_color);
	byteswap(value.ui_info_block);
	byteswap(value.seats_block);
}

template<> void byteswap<blofeld::infinite::s_interfacenodegraphuivehiclenodedefinition>(blofeld::infinite::s_interfacenodegraphuivehiclenodedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.vehicle_default_screen_reference);
	byteswap(value.scale);
}

template<> void byteswap<blofeld::infinite::s_interfaceuiweapondisplayinfo>(blofeld::infinite::s_interfaceuiweapondisplayinfo& value)
{
	byteswap(value.anytag);
	byteswap(value.primary_pickup_message);
	byteswap(value.sub_pickup_message);
	byteswap(value.secondary_pickup_message);
	byteswap(value.primary_swap_message);
	byteswap(value.sub_swap_message);
	byteswap(value.secondary_swap_message);
	byteswap(value.picked_up_message);
	byteswap(value.switch_to_message);
	byteswap(value.switch_to_from_ai_message);
	byteswap(value.low_ammo_message);
	byteswap(value.notify_empty_message);
	byteswap(value.notify_overheat_message);
	byteswap(value.heat_warning_message);
	byteswap(value.tint_color);
	byteswap(value.ui_item_info_block);
}

template<> void byteswap<blofeld::infinite::s_interfacenodegraphuiadsweaponnodedefinition>(blofeld::infinite::s_interfacenodegraphuiadsweaponnodedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.hip_fire_reticle_default_screen_reference);
	byteswap(value.reticle_default_screen_reference);
	byteswap(value.sight_front_default_screen_reference);
	byteswap(value.sight_back_default_screen_reference);
	byteswap(value.scale);
}

template<> void byteswap<blofeld::infinite::s_s_multilingual_unicode_string_reference>(blofeld::infinite::s_s_multilingual_unicode_string_reference& value)
{
	byteswap(value.string_id);
	byteswap(value.english_offset);
	byteswap(value.japanese_offset);
	byteswap(value.german_offset);
	byteswap(value.french_offset);
	byteswap(value.spanish_offset);
	byteswap(value.mexican_spanish_offset);
	byteswap(value.italian_offset);
	byteswap(value.korean_offset);
	byteswap(value.traditional_chinese_offset);
	byteswap(value.simplified_chinese_offset);
	byteswap(value.portuguese_offset);
	byteswap(value.polish_offset);
	byteswap(value.russian_offset);
	byteswap(value.danish_offset);
	byteswap(value.finnish_offset);
	byteswap(value.dutch_offset);
	byteswap(value.norwegian_offset);
	byteswap(value.brazilian_portuguese_offset);
}

template<> void byteswap<blofeld::infinite::s_s_string_substitution_pair>(blofeld::infinite::s_s_string_substitution_pair& value)
{
	byteswap(value.first_string_id);
	byteswap(value.second_string_id);
	byteswap(value.associated_value);
}

template<> void byteswap<blofeld::infinite::s_s_multilingual_unicode_string_list_group_header>(blofeld::infinite::s_s_multilingual_unicode_string_list_group_header& value)
{
	byteswap(value.anytag);
	byteswap(value.string_references_block);
	byteswap(value.substitution_pairs_block);
	byteswap(value.string_data_utf8);
}

template<> void byteswap<blofeld::infinite::s_s_unit_screen_effect_definition>(blofeld::infinite::s_s_unit_screen_effect_definition& value)
{
	byteswap(value.screen_effect);
}

template<> void byteswap<blofeld::infinite::s_s_unit_camera_track>(blofeld::infinite::s_s_unit_camera_track& value)
{
	byteswap(value.track);
	byteswap(value.screen_effect);
	byteswap(value.transition_time_in);
	byteswap(value.transition_time_out);
}

template<> void byteswap<blofeld::infinite::s_s_unit_camera_acceleration_displacement_function>(blofeld::infinite::s_s_unit_camera_acceleration_displacement_function& value)
{
	byteswap(value.input_variable);
	byteswap(value.mapping);
	byteswap(value.maximum_value);
	byteswap(value.camera_scale_axial);
	byteswap(value.camera_scale_perpendicular);
}

template<> void byteswap<blofeld::infinite::s_s_unit_camera_acceleration>(blofeld::infinite::s_s_unit_camera_acceleration& value)
{
	byteswap(value.maximum_camera_velocity);
	byteswap(value.forward_back);
	byteswap(value.left_right);
	byteswap(value.up_down);
}

template<> void byteswap<blofeld::infinite::s_s_unit_camera>(blofeld::infinite::s_s_unit_camera& value)
{
	byteswap(value.flags);
	byteswap(value.camera_marker_name);
	byteswap(value.pitch_auto_level);
	byteswap(value.pitch_range);
	byteswap(value.camera_tracks_block);
	byteswap(value.pitch_minimum_spring);
	byteswap(value.pitch_mmaximum_spring);
	byteswap(value.spring_velocity);
	byteswap(value.look_acceleration);
	byteswap(value.look_deceleration);
	byteswap(value.look_acc_smoothing_fraction);
	byteswap(value.field_of_view_bias);
	byteswap(value.camera_obstruction);
	byteswap(value.camera_acceleration_block);
}

template<> void byteswap<blofeld::infinite::s_weaponspecificmarkers>(blofeld::infinite::s_weaponspecificmarkers& value)
{
	byteswap(value.complete_weapon_name);
	byteswap(value.weapon_class);
	byteswap(value.weapon_name);
	byteswap(value.right_hand_marker);
	byteswap(value.left_hand_marker);
}

template<> void byteswap<blofeld::infinite::s_s_unit_additional_node_names>(blofeld::infinite::s_s_unit_additional_node_names& value)
{
	byteswap(value.preferred_gun_node);
	byteswap(value.preferred_grenade_marker);
	byteswap(value.weapon_specific_markers_block);
}

template<> void byteswap<blofeld::infinite::s_unitboardingmeleedefinition>(blofeld::infinite::s_unitboardingmeleedefinition& value)
{
	byteswap(value.boarding_melee_damage);
	byteswap(value.boarding_melee_response);
	byteswap(value.eviction_melee_damage);
	byteswap(value.eviction_melee_response);
	byteswap(value.landing_melee_damage);
	byteswap(value.flurry_melee_damage);
	byteswap(value.obstacle_smash_damage);
}

template<> void byteswap<blofeld::infinite::s_hudunitsoundcuedefinition>(blofeld::infinite::s_hudunitsoundcuedefinition& value)
{
	byteswap(value.sound);
	byteswap(value.latched_to);
	byteswap(value.scale);
}

template<> void byteswap<blofeld::infinite::s_hudunitsounddefinitions>(blofeld::infinite::s_hudunitsounddefinitions& value)
{
	byteswap(value.hud_audio_cues_block);
	byteswap(value.health_minor);
	byteswap(value.health_major);
	byteswap(value.health_critical);
	byteswap(value.shield_minor);
	byteswap(value.shield_major);
	byteswap(value.shield_critical);
}

template<> void byteswap<blofeld::infinite::s_dialogue_variant_definition>(blofeld::infinite::s_dialogue_variant_definition& value)
{
	byteswap(value.variant_number);
	byteswap(value.dialogue);
}

template<> void byteswap<blofeld::infinite::s_powered_seat_definition>(blofeld::infinite::s_powered_seat_definition& value)
{
	byteswap(value.driver_powerup_time);
	byteswap(value.driver_powerdown_time);
}

template<> void byteswap<blofeld::infinite::s_sentryturretstatetransitionevent>(blofeld::infinite::s_sentryturretstatetransitionevent& value)
{
	byteswap(value.from_state);
	byteswap(value.to_state);
	byteswap(value.event);
}

template<> void byteswap<blofeld::infinite::s_sentryproperties>(blofeld::infinite::s_sentryproperties& value)
{
	byteswap(value.behavior);
	byteswap(value.sight_cone_angle);
	byteswap(value.sight_cone_cosine);
	byteswap(value.alert_range);
	byteswap(value.attack_range);
	byteswap(value.attack_range_score_multiplier);
	byteswap(value.light_vehicle_range_scale);
	byteswap(value.heavy_vehicle_range_scale);
	byteswap(value.flying_vehicle_range_scale);
	byteswap(value.light_vehicle_score_bonus);
	byteswap(value.heavy_vehicle_score_bonus);
	byteswap(value.flying_vehicle_score_bonus);
	byteswap(value.current_target_score_bonus);
	byteswap(value.startup_time);
	byteswap(value.primary_fire_time);
	byteswap(value.secondary_fire_time);
	byteswap(value.player_entered_alert_range_sound);
	byteswap(value.player_exited_alert_range_sound);
	byteswap(value.transition_events_block);
}

template<> void byteswap<blofeld::infinite::s_unit_initial_weapon>(blofeld::infinite::s_unit_initial_weapon& value)
{
	byteswap(value.weapon);
	byteswap(value.weapon_name);
	byteswap(value.variant_name);
	byteswap(value.position);
	byteswap(value.weapon_flags);
	byteswap(value.maximum_firing_cone_angle);
	byteswap(value.max_firing_cone_angle_cosine);
	byteswap(value.minimum_retarget_time);
	byteswap(value.blind_fire_time);
	byteswap(value.lead_fraction);
	byteswap(value.engagement_range);
	byteswap(value.proximity_score_multiplier);
	byteswap(value.direction_score_multiplier);
	byteswap(value.attacker_score_multiplier);
	byteswap(value.targeting_weight_hologram);
	byteswap(value.targeting_weight_auto_turret);
	byteswap(value.primary_fire_delay_from_idle);
	byteswap(value.secondary_fire_delay_from_idle);
	byteswap(value.caution_duration);
	byteswap(value.alert_angular_speed_max);
	byteswap(value.idle_angular_speed_max);
	byteswap(value.targeting_yaw_min);
	byteswap(value.targeting_yaw_max);
	byteswap(value.targeting_pitch_min);
	byteswap(value.targeting_pitch_max);
	byteswap(value.idle_scanning_yaw_min);
	byteswap(value.idle_scanning_yaw_max);
	byteswap(value.idle_scanning_pitch_min);
	byteswap(value.idle_scanning_pitch_max);
	byteswap(value.idle_scanning_min_interest_distance);
	byteswap(value.alert_mode_effect);
	byteswap(value.alert_mode_effect_marker);
	byteswap(value.alert_mode_effect_primary_scale);
	byteswap(value.alert_mode_effect_secondary_scale);
	byteswap(value.sentry_properties_block);
	byteswap(value.target_camouflage_threshold);
}

template<> void byteswap<blofeld::infinite::s_trackingtypeblock>(blofeld::infinite::s_trackingtypeblock& value)
{
	byteswap(value.tracking_type);
}

template<> void byteswap<blofeld::infinite::s_s_target_tracking_parameters>(blofeld::infinite::s_s_target_tracking_parameters& value)
{
	byteswap(value.target_tracking_flags);
	byteswap(value.tracking_types_block);
	byteswap(value.acquire_time);
	byteswap(value.grace_time);
	byteswap(value.decay_time);
	byteswap(value.max_target_locks);
	byteswap(value.tracking_sound);
	byteswap(value.locked_sound);
}

template<> void byteswap<blofeld::infinite::s_seatmodeltarget>(blofeld::infinite::s_seatmodeltarget& value)
{
	byteswap(value.model_target_name);
}

template<> void byteswap<blofeld::infinite::s_s_boarding_seat>(blofeld::infinite::s_s_boarding_seat& value)
{
	byteswap(value.seat);
}

template<> void byteswap<blofeld::infinite::s_seatswitchingentrydefinition>(blofeld::infinite::s_seatswitchingentrydefinition& value)
{
	byteswap(value.destinationseat);
	byteswap(value.animation);
	byteswap(value.seat_switch_cooldown_time);
}

template<> void byteswap<blofeld::infinite::s_seatswitchingdefinition>(blofeld::infinite::s_seatswitchingdefinition& value)
{
	byteswap(value.up);
	byteswap(value.down);
	byteswap(value.left);
	byteswap(value.right);
}

template<> void byteswap<blofeld::infinite::s_seatbuttoncallout>(blofeld::infinite::s_seatbuttoncallout& value)
{
	byteswap(value.text);
}

template<> void byteswap<blofeld::infinite::s_unit_seat>(blofeld::infinite::s_unit_seat& value)
{
	byteswap(value.flags);
	byteswap(value.secondary_flags);
	byteswap(value.passenger_seat_designator);
	byteswap(value.seat_has_infinite_grenades_of_type);
	byteswap(value.seat_selection_priority);
	byteswap(value.label_text);
	byteswap(value.label);
	byteswap(value.marker_name);
	byteswap(value.entry_markers_name);
	byteswap(value.exit_marker_name);
	byteswap(value.ui_marker_name);
	byteswap(value.ui_navpoint_name);
	byteswap(value.boarding_grenade_marker);
	byteswap(value.boarding_grenade_string);
	byteswap(value.boarding_melee_string);
	byteswap(value.in_seat_string);
	byteswap(value.ai_model_targets_block);
	byteswap(value.ping_scale);
	byteswap(value.turnover_time);
	byteswap(value.seat_acceleration);
	byteswap(value.ai_scariness);
	byteswap(value.ai_seat_type);
	byteswap(value.boarding_seat);
	byteswap(value.additional_boarding_seats_block);
	byteswap(value.seat_switching);
	byteswap(value.listener_interpolation_factor);
	byteswap(value.listener_orientation_interpolation);
	byteswap(value.listener_blend_towards_locked_axis);
	byteswap(value.yaw_rate_bounds);
	byteswap(value.pitch_rate_bounds);
	byteswap(value.pitch_interpolation_time);
	byteswap(value.min_speed_reference);
	byteswap(value.max_speed_reference);
	byteswap(value.speed_exponent);
	byteswap(value.unit_camera);
	byteswap(value.hud_screen_reference);
	byteswap(value.alt_hud_screen_reference);
	byteswap(value.enter_seat_string);
	byteswap(value.button_callouts_block);
	byteswap(value.pitch_minimum);
	byteswap(value.pitch_maximum);
	byteswap(value.pitch_minimum_for_ai_operator);
	byteswap(value.pitch_maximum_for_ai_operator);
	byteswap(value.yaw_minimum);
	byteswap(value.yaw_maximum);
	byteswap(value.yaw_minimum_for_ai_operator);
	byteswap(value.yaw_maximum_for_ai_operator);
	byteswap(value.built_in_gunner);
	byteswap(value.entry_radius);
	byteswap(value.entry_marker_cone_angle);
	byteswap(value.entry_marker_facing_angle);
	byteswap(value.maximum_relative_velocity);
	byteswap(value.equipment);
	byteswap(value.open_time);
	byteswap(value.close_time);
	byteswap(value.open_function_name);
	byteswap(value.opening_function_name);
	byteswap(value.closing_function_name);
	byteswap(value.invisible_seat_region);
	byteswap(value.runtime_invisible_seat_region_index);
	byteswap(value.seat_death_grab_crate$2);
	byteswap(value.seat_selection_string);
	byteswap(value.bailout_velocity);
	byteswap(value.maximum_acceleration);
	byteswap(value.maximum_centrifugal_force);
}

template<> void byteswap<blofeld::infinite::s_s_unit_lipsync_scales>(blofeld::infinite::s_s_unit_lipsync_scales& value)
{
	byteswap(value.attack_weight);
	byteswap(value.decay_weight);
}

template<> void byteswap<blofeld::infinite::s_exitanddetachvariant>(blofeld::infinite::s_exitanddetachvariant& value)
{
	byteswap(value.variant_name);
	byteswap(value.exit_and_detach_weapon);
	byteswap(value.exit_and_detach_damage);
}

template<> void byteswap<blofeld::infinite::s_unitbirthingproperties>(blofeld::infinite::s_unitbirthingproperties& value)
{
	byteswap(value.seat);
	byteswap(value.birthing_region);
}

template<> void byteswap<blofeld::infinite::s_i343activecamouflagemalleablepropertiesdefinition>(blofeld::infinite::s_i343activecamouflagemalleablepropertiesdefinition& value)
{
	byteswap(value.camo_level);
	byteswap(value.grenade_throw_penalty);
	byteswap(value.interpolation_time);
	byteswap(value.melee_penalty);
	byteswap(value.minimum_dinged_amount);
	byteswap(value.maximum_duration);
}

template<> void byteswap<blofeld::infinite::s_i343damagedamagemalleablepropertiesdefinition>(blofeld::infinite::s_i343damagedamagemalleablepropertiesdefinition& value)
{
	byteswap(value.weapon_damage_scalar);
	byteswap(value.melee_damage_scalar);
	byteswap(value.melee_knockback_scalar);
	byteswap(value.melee_recovery_speed_scalar);
	byteswap(value.grenade_damage_scalar);
	byteswap(value.grenade_knockback_scalar);
	byteswap(value.body_vampirism_scalar);
	byteswap(value.shield_vampirism_scalar);
	byteswap(value.area_of_effect_radius_scalar);
}

template<> void byteswap<blofeld::infinite::s_i343unitsunitweaponpropertiesdefinition>(blofeld::infinite::s_i343unitsunitweaponpropertiesdefinition& value)
{
	byteswap(value.weapon_switch_speed_scalar);
	byteswap(value.weapon_empty_reload_speed_scalar);
	byteswap(value.weapon_tactical_reload_speed_scalar);
	byteswap(value.movement_speed_with_turret_scalar);
}

template<> void byteswap<blofeld::infinite::s_i343unitsemppropertiesdefinition>(blofeld::infinite::s_i343unitsemppropertiesdefinition& value)
{
	byteswap(value.emp_disable_duration_scalar_);
	byteswap(value.emp_disable_duration_mp_scalar_);
	byteswap(value.emp_unit_modifiers);
}

template<> void byteswap<blofeld::infinite::s_unitdefinition>(blofeld::infinite::s_unitdefinition& value)
{
	byteswap(value.object);
	byteswap(value.unit_flags);
	byteswap(value.flags2);
	byteswap(value.default_team);
	byteswap(value.constant_sound_volume);
	byteswap(value.hologram_unit_reference);
	byteswap(value.campaign_metagame_bucket_block);
	byteswap(value.screen_effects_block);
	byteswap(value.camera_stiffness);
	byteswap(value.unit_camera);
	byteswap(value.sync_action_camera);
	byteswap(value.unit_markup_name_for_weapon_class_override);
	byteswap(value.seat_acceleration);
	byteswap(value.pain_major_total_damage_threshold);
	byteswap(value.soft_ping_threshold);
	byteswap(value.soft_ping_interrupt_time);
	byteswap(value.hard_ping_threshold);
	byteswap(value.hard_ping_interrupt_time);
	byteswap(value.soft_death_direction_speed_threshold);
	byteswap(value.hard_death_threshold);
	byteswap(value.feign_death_threshold);
	byteswap(value.feign_death_time);
	byteswap(value.pain_screen_duration);
	byteswap(value.pain_screen_region_fade_out_duration);
	byteswap(value.pain_screen_region_fade_out_weight_threshold);
	byteswap(value.pain_screen_angle_tolerance);
	byteswap(value.pain_screen_angle_randomness);
	byteswap(value.defensive_screen_duration);
	byteswap(value.defensive_screen_scrub_fallback_fraction);
	byteswap(value.distance_of_dive_anim);
	byteswap(value.terminal_velocity_fall_ratio);
	byteswap(value.stun_movement_penalty);
	byteswap(value.stun_turning_penalty);
	byteswap(value.stun_jumping_penalty);
	byteswap(value.minimum_stun_time);
	byteswap(value.maximum_stun_time);
	byteswap(value.feign_death_chance);
	byteswap(value.feign_repeat_chance);
	byteswap(value.spawned_turret_character);
	byteswap(value.target_aiming_pivot_marker_name);
	byteswap(value.aiming_velocity_maximum);
	byteswap(value.aiming_acceleration_maximum);
	byteswap(value.casual_aiming_modifier);
	byteswap(value.looking_velocity_maximum);
	byteswap(value.looking_acceleration_maximum);
	byteswap(value.dropped_ability_object_velocity);
	byteswap(value.object_velocity_maximum);
	byteswap(value.right_hand_node);
	byteswap(value.left_hand_node);
	byteswap(value.more_damn_nodes);
	byteswap(value.melee_damage);
	byteswap(value.native_melee_override);
	byteswap(value.your_momma);
	byteswap(value.motion_sensor_blip_style_enemy);
	byteswap(value.motion_sensor_blip_style_friendly);
	byteswap(value.item_owner_size);
	byteswap(value.motion_tracker_range_modifier);
	byteswap(value.equipment_variant_name);
	byteswap(value.grounded_equipment_variant_name);
	byteswap(value.hud_audio_cues_block);
	byteswap(value.dialogue_variants_block);
	byteswap(value.grenade_angle);
	byteswap(value.grenade_angle_max_elevation);
	byteswap(value.grenade_angle_min_elevation);
	byteswap(value.grenade_velocity);
	byteswap(value.grenade_rotational_velocity_min);
	byteswap(value.greande_rotational_velocity_max);
	byteswap(value.grenade_throw_speed_scalar);
	byteswap(value.weapon_angle);
	byteswap(value.weapon_angle_max_elevation);
	byteswap(value.weapon_angle_min_elevation);
	byteswap(value.weapon_velocity);
	byteswap(value.weapon_rotational_velocity_min);
	byteswap(value.weapon_rotational_velocity_max);
	byteswap(value.powered_seats_block);
	byteswap(value.weapons_block);
	byteswap(value.target_tracking_block);
	byteswap(value.seats_block);
	byteswap(value.maximum_seat_switch_linear_velocity);
	byteswap(value.maximum_seat_switch_angular_velocity);
	byteswap(value.empty_mount_behavior);
	byteswap(value.opening_time);
	byteswap(value.closing_time);
	byteswap(value.docking_site);
	byteswap(value.power_component_block);
	byteswap(value.boost_definition);
	byteswap(value.boost);
	byteswap(value.tutorial_weapon_swap_id);
	byteswap(value.lipsync$2);
	byteswap(value.exit_and_detach_damage);
	byteswap(value.exit_and_detach_weapon);
	byteswap(value.exit_and_detach_variants_block);
	byteswap(value.death_telemetry_rule);
	byteswap(value.experience_for_kill);
	byteswap(value.experience_for_assist);
	byteswap(value.bailout_threshold);
	byteswap(value.iron_sight_weapon_dampening);
	byteswap(value.birth);
	byteswap(value.procedural_recoil_scaler);
	byteswap(value.flinch_system);
	byteswap(value.active_camouflage_properties);
	byteswap(value.active_camouflage_energy_gain_effect);
	byteswap(value.damage_properties);
	byteswap(value.weapon_properties);
	byteswap(value.emp_properties);
	byteswap(value.emp_disabled_effect);
	byteswap(value.recording_unit_type);
	byteswap(value.knockback_collision_damage_override);
}

template<> void byteswap<blofeld::infinite::s_i343unitrecorderrecording>(blofeld::infinite::s_i343unitrecorderrecording& value)
{
	byteswap(value.type);
	byteswap(value.name);
	byteswap(value.time_per_sample);
	byteswap(value.num_samples);
	byteswap(value.unit_recording_version);
	byteswap(value.recording_data);
	byteswap(value.team);
	byteswap(value.flags);
	byteswap(value.vehicle_definition);
	byteswap(value.finalangularvelocity);
	byteswap(value.finallinearvelocity);
}

template<> void byteswap<blofeld::infinite::s_i343unitrecorderunitrecordingdefinition>(blofeld::infinite::s_i343unitrecorderunitrecordingdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.recording);
}

template<> void byteswap<blofeld::infinite::s_languagereference>(blofeld::infinite::s_languagereference& value)
{
	byteswap(value.language);
	byteswap(value.string_list_resource);
}

template<> void byteswap<blofeld::infinite::s_unicodestringlistgroup>(blofeld::infinite::s_unicodestringlistgroup& value)
{
	byteswap(value.anytag);
	byteswap(value.language_references_block);
}

template<> void byteswap<blofeld::infinite::s_i343unitsweaponframeattachmentdefinition>(blofeld::infinite::s_i343unitsweaponframeattachmentdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.slot);
	byteswap(value.weapon);
	byteswap(value.configuration);
}

template<> void byteswap<blofeld::infinite::s_i343valorrewardsreward>(blofeld::infinite::s_i343valorrewardsreward& value)
{
	byteswap(value.reward_name);
	byteswap(value.is_read_key);
	byteswap(value.icon);
	byteswap(value.background);
	byteswap(value.sprite_index);
	byteswap(value.vehicle_sprite);
	byteswap(value.weapon_sprite);
	byteswap(value.marine_sprite);
}

template<> void byteswap<blofeld::infinite::s_i343valorrewardspoints>(blofeld::infinite::s_i343valorrewardspoints& value)
{
	byteswap(value.persistence_key);
}

template<> void byteswap<blofeld::infinite::s_i343valorrewardsiconbitmap>(blofeld::infinite::s_i343valorrewardsiconbitmap& value)
{
	byteswap(value.name);
	byteswap(value.sprite);
}

template<> void byteswap<blofeld::infinite::s_i343valorrewardsbackgroundbitmap>(blofeld::infinite::s_i343valorrewardsbackgroundbitmap& value)
{
	byteswap(value.name);
	byteswap(value.sprite);
}

template<> void byteswap<blofeld::infinite::s_i343valorrewardsvalorunlocks>(blofeld::infinite::s_i343valorrewardsvalorunlocks& value)
{
	byteswap(value.anytag);
	byteswap(value.valor_rewards_block);
	byteswap(value.valor_points_block);
	byteswap(value.icons_block);
	byteswap(value.backgrounds_block);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsvectorvertex>(blofeld::infinite::s_i343graphicsvectorvertex& value)
{
	byteswap(value.position);
	byteswap(value.region_index);
	byteswap(value.texcoord);
	byteswap(value.render_type);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsvectorindex>(blofeld::infinite::s_i343graphicsvectorindex& value)
{
	byteswap(value.index);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsvectordrawinformation>(blofeld::infinite::s_i343graphicsvectordrawinformation& value)
{
	byteswap(value.entry_point);
	byteswap(value.vertex_start);
	byteswap(value.index_start);
	byteswap(value.index_count);
}

template<> void byteswap<blofeld::infinite::s_i343graphicsvectorarttag>(blofeld::infinite::s_i343graphicsvectorarttag& value)
{
	byteswap(value.anytag);
	byteswap(value.m_vectorvertices_block);
	byteswap(value.m_vectorindices_block);
	byteswap(value.m_drawinformation_block);
	byteswap(value.vertexbuffer);
	byteswap(value.indexbuffer);
	byteswap(value.aspectratio);
}

template<> void byteswap<blofeld::infinite::s_i343vehiclevehiclevitalitypropertymodifiersdefinition>(blofeld::infinite::s_i343vehiclevehiclevitalitypropertymodifiersdefinition& value)
{
	byteswap(value.health_scalar);
}

template<> void byteswap<blofeld::infinite::s_i343vehiclevehiclemodifiers>(blofeld::infinite::s_i343vehiclevehiclemodifiers& value)
{
	byteswap(value.maximum_vitality_block);
}

template<> void byteswap<blofeld::infinite::s_i343damageattachmentnamedefinition>(blofeld::infinite::s_i343damageattachmentnamedefinition& value)
{
	byteswap(value.attachment_name);
}

template<> void byteswap<blofeld::infinite::s_i343vehiclevehicleattachment>(blofeld::infinite::s_i343vehiclevehicleattachment& value)
{
	byteswap(value.anytag);
	byteswap(value.properties);
	byteswap(value.attachmentname);
}

template<> void byteswap<blofeld::infinite::s_i343vehiclevehicleattachmentreference>(blofeld::infinite::s_i343vehiclevehicleattachmentreference& value)
{
	byteswap(value.attachment);
}

template<> void byteswap<blofeld::infinite::s_i343vehicleweaponconfigurationgroup>(blofeld::infinite::s_i343vehicleweaponconfigurationgroup& value)
{
	byteswap(value.weapon_configuration);
	byteswap(value.weapon_name);
}

template<> void byteswap<blofeld::infinite::s_i343vehiclevehicleconfigurationdefinitioninternal>(blofeld::infinite::s_i343vehiclevehicleconfigurationdefinitioninternal& value)
{
	byteswap(value.variant_name);
	byteswap(value.generic_attachments_block);
	byteswap(value.weapon_configurations_block);
	byteswap(value.ui_display_info);
}

template<> void byteswap<blofeld::infinite::s_i343vehiclevehicleconfigurationdefinition>(blofeld::infinite::s_i343vehiclevehicleconfigurationdefinition& value)
{
	byteswap(value.object_configuration);
	byteswap(value.vehicle);
}

template<> void byteswap<blofeld::infinite::s_s_toruqe_curve_definition>(blofeld::infinite::s_s_toruqe_curve_definition& value)
{
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_gear_definition>(blofeld::infinite::s_s_vehicle_gear_definition& value)
{
	byteswap(value.loaded_torque_curve);
	byteswap(value.cruising_torque_curve);
	byteswap(value.min_time_to_upshift);
	byteswap(value.engine_up_shift_scale);
	byteswap(value.gear_ratio);
	byteswap(value.min_time_to_downshift);
	byteswap(value.engine_down_shift_scale);
	byteswap(value.audio_engine_uprev_rate);
	byteswap(value.audio_engine_shift_up_rpm_value);
	byteswap(value.audio_engine_downrev_rate);
	byteswap(value.audio_engine_shift_down_rpm_value);
	byteswap(value.gear_shift_sound___shifting_up);
	byteswap(value.gear_shift_sound___shifting_down);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_load_and_cruise_definition>(blofeld::infinite::s_s_vehicle_load_and_cruise_definition& value)
{
	byteswap(value.load_cruise_function);
	byteswap(value.attachment_index);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_engine_definition>(blofeld::infinite::s_s_vehicle_engine_definition& value)
{
	byteswap(value.engine_moment);
	byteswap(value.engine_min_angular_velocity);
	byteswap(value.engine_max_angular_velocity);
	byteswap(value.gears_block);
	byteswap(value.gear_shift_sound);
	byteswap(value.load_and_cruise_sound_block);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_human_tank_definition>(blofeld::infinite::s_s_vehicle_human_tank_definition& value)
{
	byteswap(value.forward_arc);
	byteswap(value.perpendicular_forward_arc);
	byteswap(value.flip_window);
	byteswap(value.pegged_fraction);
	byteswap(value.forward_turn_scale);
	byteswap(value.reverse_turn_scale);
	byteswap(value.maximum_left_differential);
	byteswap(value.maximum_right_differential);
	byteswap(value.differential_acceleration);
	byteswap(value.differential_deceleration);
	byteswap(value.maximum_left_reverse_differential);
	byteswap(value.maximum_right_reverse_differential);
	byteswap(value.differential_reverse_acceleration);
	byteswap(value.differential_reverse_deceleration);
	byteswap(value.engine);
	byteswap(value.wheel_circumferance$2);
	byteswap(value.gravity_adjust);
	byteswap(value.control_flags);
	byteswap(value.at_rest_forward_anglepurple);
	byteswap(value.at_rest_reverse_angleviolet);
	byteswap(value.at_rest_side_on_reverse_angle_closest_to_frontgreen);
	byteswap(value.at_rest_side_on_reverse_angle_furthest_from_frontblue);
	byteswap(value.at_rest_facing_forward_reverse_angleyellow);
	byteswap(value.at_rest_facing_backward_reverse_anglepink);
	byteswap(value.in_motion_opposing_direction_angle);
	byteswap(value.in_motion_speed);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_steering_control_definition>(blofeld::infinite::s_s_vehicle_steering_control_definition& value)
{
	byteswap(value.overdampen_cusp_angle);
	byteswap(value.overdampen_exponent);
	byteswap(value.ebrake_overdampen_cusp_angle);
	byteswap(value.ebrake_overdampen_exponent);
	byteswap(value.throttle_steering_angle);
	byteswap(value.throttle_steering_interpolation_rate);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_turning_control_definition>(blofeld::infinite::s_s_vehicle_turning_control_definition& value)
{
	byteswap(value.maximum_left_turn);
	byteswap(value.maximum_right_turn_negative);
	byteswap(value.turn_rate);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_human_jeep_definition>(blofeld::infinite::s_s_vehicle_human_jeep_definition& value)
{
	byteswap(value.steering_control);
	byteswap(value.turning_control);
	byteswap(value.engine);
	byteswap(value.wheel_circumferance$2);
	byteswap(value.gravity_adjust);
	byteswap(value.antiroll_torque_factor);
	byteswap(value.air_control_torque_function);
	byteswap(value.air_control_torque_max);
	byteswap(value.front_left_wheel);
	byteswap(value.front_right_wheel);
	byteswap(value.back_left_wheel);
	byteswap(value.back_right_wheel);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_steering_animation_definition>(blofeld::infinite::s_s_vehicle_steering_animation_definition& value)
{
	byteswap(value.interpolation_scale);
	byteswap(value.max_angle);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_human_plane_definition>(blofeld::infinite::s_s_vehicle_human_plane_definition& value)
{
	byteswap(value.maximum_forward_speed);
	byteswap(value.maximum_reverse_speed);
	byteswap(value.speed_acceleration);
	byteswap(value.speed_deceleration);
	byteswap(value.speed_accel_against_direction);
	byteswap(value.maximum_forward_speed_during_boost);
	byteswap(value.maximum_left_slide);
	byteswap(value.maximum_right_slide);
	byteswap(value.slide_acceleration);
	byteswap(value.slide_deceleration);
	byteswap(value.slide_accel_against_direction);
	byteswap(value.maximum_slide_speed_during_boost);
	byteswap(value.maximum_up_rise);
	byteswap(value.maximum_down_rise);
	byteswap(value.rise_acceleration);
	byteswap(value.rise_deceleration);
	byteswap(value.rise_accel_against_direction);
	byteswap(value.maximum_rise_speed_during_boost);
	byteswap(value.flying_torque_scale);
	byteswap(value.air_friction_deceleration);
	byteswap(value.thrust_scale);
	byteswap(value.turn_rate_scale_when_boosting);
	byteswap(value.maximum_roll);
	byteswap(value.steering_animation);
}

template<> void byteswap<blofeld::infinite::s_s_engine_function_definition>(blofeld::infinite::s_s_engine_function_definition& value)
{
	byteswap(value.object_function_damage_region);
	byteswap(value.min_anti_gravity_engine_speed);
	byteswap(value.max_anti_gravity_engine_speed);
	byteswap(value.engine_speed_acceleration);
	byteswap(value.maximum_vehicle_speed);
}

template<> void byteswap<blofeld::infinite::s_scoutphysicsdefinition>(blofeld::infinite::s_scoutphysicsdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.air_control_angular_velocity_factor);
	byteswap(value.air_control_throttle_acceleration);
	byteswap(value.air_control_throttle_bonus_clamp_min);
	byteswap(value.air_control_throttle_bonus_clamp_max);
	byteswap(value.air_control_angular_acceleration);
	byteswap(value.air_control_auto_level_strength);
	byteswap(value.brake_lift_angular_acceleration);
	byteswap(value.brake_lift_acceleration_up);
	byteswap(value.brake_airborne_lift_acceleration_forward);
	byteswap(value.brake_airborne_lift_acceleration_up);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_alien_scout_definition>(blofeld::infinite::s_s_vehicle_alien_scout_definition& value)
{
	byteswap(value.steering_control);
	byteswap(value.maximum_forward_speed);
	byteswap(value.maximum_reverse_speed);
	byteswap(value.speed_acceleration);
	byteswap(value.speed_deceleration);
	byteswap(value.maximum_left_slide);
	byteswap(value.maximum_right_slide);
	byteswap(value.slide_acceleration);
	byteswap(value.slide_deceleration);
	byteswap(value.ai_deceleration_multiplier);
	byteswap(value.slide_accel_against_direction);
	byteswap(value.slide_speed_at_top_speed);
	byteswap(value.flags);
	byteswap(value.drag_coeficient);
	byteswap(value.constant_deceleration);
	byteswap(value.torque_scale);
	byteswap(value.engine_gravity_function);
	byteswap(value.contrail_gravity_function);
	byteswap(value.gear_rotation_speed);
	byteswap(value.steering_animation);
	byteswap(value.scout_physics);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_alien_fighter_definition>(blofeld::infinite::s_s_vehicle_alien_fighter_definition& value)
{
	byteswap(value.steering_control);
	byteswap(value.turning_control);
	byteswap(value.maximum_forward_speed);
	byteswap(value.maximum_reverse_speed);
	byteswap(value.speed_acceleration);
	byteswap(value.speed_deceleration);
	byteswap(value.boost_maximum_forward_speed);
	byteswap(value.boost_maximum_reverse_speed);
	byteswap(value.boost_speed_acceleration);
	byteswap(value.boost_speed_deceleration);
	byteswap(value.maximum_left_slide);
	byteswap(value.maximum_right_slide);
	byteswap(value.slide_acceleration);
	byteswap(value.slide_deceleration);
	byteswap(value.slide_accel_against_direction);
	byteswap(value.flying_torque_scale);
	byteswap(value.flying_torque_cap_cusp);
	byteswap(value.flying_torque_cap_exponent);
	byteswap(value.fixed_gun_yaw);
	byteswap(value.fixed_gun_pitch);
	byteswap(value.maximum_trick_frequency);
	byteswap(value.loop_trick_duration);
	byteswap(value.roll_trick_duration);
	byteswap(value.zero_gravity_speed);
	byteswap(value.full_gravity_speed);
	byteswap(value.strafe_boost_scale);
	byteswap(value.off_stick_deceleration_scale);
	byteswap(value.cruising_throttle);
	byteswap(value.dive_speed_scale);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_turret_definition>(blofeld::infinite::s_s_vehicle_turret_definition& value)
{
	byteswap(value.flags);
	byteswap(value.physical_yaw_node);
	byteswap(value.physical_pitch_node);
	byteswap(value.physical_elevate_node);
	byteswap(value.operating_elevation_angle);
}

template<> void byteswap<blofeld::infinite::s_s_vtol_descent_function>(blofeld::infinite::s_s_vtol_descent_function& value)
{
	byteswap(value.descent_to_boost);
	byteswap(value.max_downward_speed);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_vtol_interpolated_parameters>(blofeld::infinite::s_s_vehicle_vtol_interpolated_parameters& value)
{
	byteswap(value.rotor_damping);
	byteswap(value.maximum_left_acceleration);
	byteswap(value.maximum_forward_acceleration);
	byteswap(value.drag_coeficient);
	byteswap(value.constant_deceleration);
	byteswap(value.magic_angular_acc_exp);
	byteswap(value.magic_angular_acc_scale);
	byteswap(value.magic_angular_acc_k);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_vtol_definition>(blofeld::infinite::s_s_vehicle_vtol_definition& value)
{
	byteswap(value.turning_control);
	byteswap(value.left_lift_marker);
	byteswap(value.right_lift_marker);
	byteswap(value.thrust_marker);
	byteswap(value.trigger_to_throttle);
	byteswap(value.descent_to_boost);
	byteswap(value.maximum_up_acceleration);
	byteswap(value.maximum_down_acceleration);
	byteswap(value.vertical_deceleration_time);
	byteswap(value.lift_arm_pivot_length);
	byteswap(value.lift_arm_pivot_length_negative_z);
	byteswap(value.maximum_turn_acceleration);
	byteswap(value.turn_acceleration_gain);
	byteswap(value.interpolation_speed_domain);
	byteswap(value.speed_trottle_ceiling);
	byteswap(value.interpolation_acc);
	byteswap(value.a_b_interpolation_interpolation_mapping);
	byteswap(value.speed_interpolated_parameters_block);
	byteswap(value.lift_angles_acc);
	byteswap(value.alt_lock_offset_coefficient);
	byteswap(value.alt_lock_velocity_coefficient);
	byteswap(value.prop_rotation_speed);
	byteswap(value.landing_time);
	byteswap(value.takeoff_time);
	byteswap(value.landing_linear_velocity);
	byteswap(value.landing_angular_velocity);
	byteswap(value.auto_take_off_height_offset);
	byteswap(value.flags);
	byteswap(value.dodge_boost_force_application);
	byteswap(value.dodge_boost_velocity);
	byteswap(value.dodge_boost_trigger_time);
	byteswap(value.dodge_boost_duration);
	byteswap(value.dodge_boost_recharge_duration);
	byteswap(value.dodge_boost_damage_response);
	byteswap(value.steering_control);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_chopper_definition>(blofeld::infinite::s_s_vehicle_chopper_definition& value)
{
	byteswap(value.steering_control);
	byteswap(value.turning_control);
	byteswap(value.engine);
	byteswap(value.wheel_circumferance);
	byteswap(value.pivot_offset);
	byteswap(value.yaw_correction_coefficient_2);
	byteswap(value.yaw_correction_coefficient_1);
	byteswap(value.yaw_correction_coefficient_0);
	byteswap(value.bank_to_slide_ratio);
	byteswap(value.bank_slide_exponent);
	byteswap(value.bank_to_turn_ratio);
	byteswap(value.bank_turn_exponent);
	byteswap(value.bank_fraction);
	byteswap(value.bank_rate);
	byteswap(value.wheel_accel);
	byteswap(value.gyroscopic_damping);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_guardian_definition>(blofeld::infinite::s_s_vehicle_guardian_definition& value)
{
	byteswap(value.steering_control);
	byteswap(value.maximum_forward_speed);
	byteswap(value.maximum_reverse_speed);
	byteswap(value.speed_acceleration);
	byteswap(value.speed_deceleration);
	byteswap(value.maximum_left_slide);
	byteswap(value.maximum_right_slide);
	byteswap(value.slide_acceleration);
	byteswap(value.slide_deceleration);
	byteswap(value.torque_scale);
	byteswap(value.anti_gravity_force_z_offset);
}

template<> void byteswap<blofeld::infinite::s_s_flight_surface_definition>(blofeld::infinite::s_s_flight_surface_definition& value)
{
	byteswap(value.offset_axis);
	byteswap(value.pivot_axis);
	byteswap(value.rotation_axis);
	byteswap(value.normal_axis);
	byteswap(value.offset_distance);
	byteswap(value.pivot_distance);
	byteswap(value.q);
	byteswap(value.k);
	byteswap(value.function_ceiling);
	byteswap(value.maximum_angle);
	byteswap(value.render_debug_radius);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_jackal_glider_drag_definition>(blofeld::infinite::s_s_vehicle_jackal_glider_drag_definition& value)
{
	byteswap(value.q);
	byteswap(value.k);
	byteswap(value.constant_deceleration);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_jackal_glider_definition>(blofeld::infinite::s_s_vehicle_jackal_glider_definition& value)
{
	byteswap(value.steering_control);
	byteswap(value.maximum_forward_speed);
	byteswap(value.maximum_reverse_speed);
	byteswap(value.speed_acceleration);
	byteswap(value.speed_deceleration);
	byteswap(value.maximum_left_slide);
	byteswap(value.maximum_right_slide);
	byteswap(value.slide_acceleration);
	byteswap(value.slide_deceleration);
	byteswap(value.torque_scale);
	byteswap(value.engine_object_function$2);
	byteswap(value.contrail_object_function$2);
	byteswap(value.steering_animation);
	byteswap(value.flying_velocity_threshold);
	byteswap(value.flying_look_threshold);
	byteswap(value.flying_hover_threshold);
	byteswap(value.grounded_hover_threshold);
	byteswap(value.landing_grounded_time);
	byteswap(value.ground_turn_radius);
	byteswap(value.ground_acceleration);
	byteswap(value.wing_lift_q);
	byteswap(value.wing_lift_k);
	byteswap(value.wing_lift_function_ceiling);
	byteswap(value.aileron_to_angular_acceleartion_scale);
	byteswap(value.aileron_yaw_tilt_angle);
	byteswap(value.wing_surface);
	byteswap(value.aileron_surface);
	byteswap(value.elevator_surface);
	byteswap(value.tail_surface);
	byteswap(value.rudder_surface);
	byteswap(value.taxi_surface);
	byteswap(value.ground_drag_struct);
	byteswap(value.air_drag_struct);
	byteswap(value.takeoff_drag_struct);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_space_fighter_definition>(blofeld::infinite::s_s_vehicle_space_fighter_definition& value)
{
	byteswap(value.steering_control);
	byteswap(value.turning_control);
	byteswap(value.full_throttle_speed);
	byteswap(value.neutral_throttle_speed);
	byteswap(value.reverse_throttle_speed);
	byteswap(value.speed_acceleration);
	byteswap(value.speed_deceleration);
	byteswap(value.maximum_left_slide);
	byteswap(value.maximum_right_slide);
	byteswap(value.slide_acceleration);
	byteswap(value.slide_deceleration);
	byteswap(value.slide_accel_against_direction);
	byteswap(value.flying_torque_scale);
	byteswap(value.fixed_gun_yaw);
	byteswap(value.fixed_gun_pitch);
	byteswap(value.maximum_trick_frequency);
	byteswap(value.loop_trick_duration);
	byteswap(value.roll_trick_duration);
	byteswap(value.strafe_boost_scale);
	byteswap(value.off_stick_deceleration_scale);
	byteswap(value.dive_speed_scale);
	byteswap(value.roll_max_velocity);
	byteswap(value.roll_acceleration);
	byteswap(value.roll_deceleration);
	byteswap(value.roll_smoothing_fraction);
	byteswap(value.autolevel_time);
	byteswap(value.autolevel_pitch_cutoff);
	byteswap(value.autolevel_max_velocity);
	byteswap(value.autolevel_max_acceleration);
	byteswap(value.autolevel_max_user_ang_vel);
	byteswap(value.autolevel_spring_k);
	byteswap(value.autolevel_spring_c);
	byteswap(value.cosmetic_roll_scale);
	byteswap(value.cosmetic_roll_max_bank);
	byteswap(value.cosmetic_roll_max_velocity);
	byteswap(value.cosmetic_roll_acceleration);
	byteswap(value.cosmetic_roll_spring_k);
	byteswap(value.cosmetic_roll_spring_c);
	byteswap(value.roll_flags);
	byteswap(value.maximum_left_stick_roll_angle);
	byteswap(value.left_stick_rate_smoothing);
	byteswap(value.left_stick_trend_smoothing);
	byteswap(value.maximum_right_stick_roll_angle);
	byteswap(value.right_stick_rate_smoothing);
	byteswap(value.right_stick_trend_smoothing);
	byteswap(value.turn_deceleration_threshold);
	byteswap(value.turn_deceleration_fraction);
	byteswap(value.turn_back_flags);
	byteswap(value.turn_back_latched_period);
	byteswap(value.turn_back_distance_to_turn_rate);
	byteswap(value.ideal_thrust_decay);
	byteswap(value.ideal_thrust_increase);
	byteswap(value.minimum_thrust_decay);
	byteswap(value.minimum_thrust_increase);
	byteswap(value.maximum_thrust_increase);
	byteswap(value.minimum_dive_angle);
	byteswap(value.maximum_dive_angle);
	byteswap(value.strafe_boost_power);
	byteswap(value.wingtip_contrail_turn);
	byteswap(value.wingtip_min_turn);
	byteswap(value.dangerous_trajectory_prediction_time);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_revenant_definition>(blofeld::infinite::s_s_vehicle_revenant_definition& value)
{
	byteswap(value.tank_block);
	byteswap(value.maximum_forward_speed);
	byteswap(value.maximum_reverse_speed);
	byteswap(value.speed_acceleration);
	byteswap(value.speed_deceleration);
	byteswap(value.maximum_left_slide);
	byteswap(value.maximum_right_slide);
	byteswap(value.slide_acceleration);
	byteswap(value.slide_deceleration);
	byteswap(value.scout_physics);
	byteswap(value.drag_coeficient);
	byteswap(value.constant_deceleration);
	byteswap(value.torque_scale);
}

template<> void byteswap<blofeld::infinite::s_s_vehicle_physics_types>(blofeld::infinite::s_s_vehicle_physics_types& value)
{
	byteswap(value.type_human_tank_block);
	byteswap(value.type_human_jeep_block);
	byteswap(value.type_human_plane_block);
	byteswap(value.type_alien_scout_block);
	byteswap(value.type_alien_fighter_block);
	byteswap(value.type_turret_block);
	byteswap(value.type_vtol_block);
	byteswap(value.type_chopper_block);
	byteswap(value.type_guardian_block);
	byteswap(value.type_jackal_glider_block);
	byteswap(value.type_space_fighter_block);
	byteswap(value.type_revenant_block);
}

template<> void byteswap<blofeld::infinite::s_i343vehiclesantigravitypointconfiguration>(blofeld::infinite::s_i343vehiclesantigravitypointconfiguration& value)
{
	byteswap(value.name);
	byteswap(value.inner_distance);
	byteswap(value.outer_distance);
	byteswap(value.banking_lift);
	byteswap(value.steering_banking_factor);
	byteswap(value.strength);
	byteswap(value.error$2);
	byteswap(value.inner_rotational_limit);
	byteswap(value.outer_rotational_limit);
	byteswap(value.compression_damping);
	byteswap(value.extension_damping);
	byteswap(value.combined_material_effects);
	byteswap(value.visual_material_effects);
	byteswap(value.sound_material_effects);
}

template<> void byteswap<blofeld::infinite::s_i343vehiclesantigravitypointstateconfiguration>(blofeld::infinite::s_i343vehiclesantigravitypointstateconfiguration& value)
{
	byteswap(value.region_state);
	byteswap(value.configuration);
}

template<> void byteswap<blofeld::infinite::s_i343vehiclesantigravitypointdefinition>(blofeld::infinite::s_i343vehiclesantigravitypointdefinition& value)
{
	byteswap(value.marker_name);
	byteswap(value.region_name);
	byteswap(value.runtime_region_index);
	byteswap(value.looping_sound_marker);
	byteswap(value.state_configurations_block);
}

template<> void byteswap<blofeld::infinite::s_i343vehiclesfrictionpointconfiguration>(blofeld::infinite::s_i343vehiclesfrictionpointconfiguration& value)
{
	byteswap(value.name);
	byteswap(value.radius);
	byteswap(value.ground_depth);
	byteswap(value.ground_damp_factor);
	byteswap(value.ground_normal_blend_rate);
	byteswap(value.max_normal_force_contribution_to_friction);
	byteswap(value.static_friction);
	byteswap(value.kinetic_friction);
	byteswap(value.slide_speed_difference);
	byteswap(value.e_brake_static_friction);
	byteswap(value.e_brake_kinetic_friction);
	byteswap(value.e_brake_slide_speed_difference);
	byteswap(value.ai_static_friction_override);
	byteswap(value.ai_kinetic_friction_override);
	byteswap(value.world_space_slope_to_stop_all_traction);
	byteswap(value.local_space_slope_to_start_traction_loss);
	byteswap(value.local_space_slope_to_stop_all_traction);
	byteswap(value.local_space_slope_to_stop_hit_checks);
	byteswap(value.grounded_speed_to_down_torque_function);
	byteswap(value.nearly_grounded_speed_to_down_torque_function);
	byteswap(value.combined_material_effects);
	byteswap(value.visual_material_effects);
	byteswap(value.sound_material_effects);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_i343vehiclesfrictionpointstateconfiguration>(blofeld::infinite::s_i343vehiclesfrictionpointstateconfiguration& value)
{
	byteswap(value.region_state);
	byteswap(value.configuration);
}

template<> void byteswap<blofeld::infinite::s_i343vehiclesfrictionpointdefinition>(blofeld::infinite::s_i343vehiclesfrictionpointdefinition& value)
{
	byteswap(value.marker_name);
	byteswap(value.region_name);
	byteswap(value.runtime_region_index);
	byteswap(value.load_fraction);
	byteswap(value.turn_ratio);
	byteswap(value.flags);
	byteswap(value.looping_sound_marker);
	byteswap(value.grinding_object_function);
	byteswap(value.rolling_object_function);
	byteswap(value.state_configurations_block);
}

template<> void byteswap<blofeld::infinite::s_i343vehiclesvehiclephysicsdefinition>(blofeld::infinite::s_i343vehiclesvehiclephysicsdefinition& value)
{
	byteswap(value.gravity_scale);
	byteswap(value.iteration_count);
	byteswap(value.anti_gravity_point_configurations_block);
	byteswap(value.anti_gravity_points_block);
	byteswap(value.friction_point_configurations_block);
	byteswap(value.friction_points_block);
	byteswap(value.maximum_speed_for_downforce);
	byteswap(value.angle_to_exclude_downforce);
	byteswap(value.grounded_speed_to_com_downforce_function);
	byteswap(value.nearly_grounded_speed_to_com_downforce_function);
	byteswap(value.airborne_angular_stabilization_coefficients);
}

template<> void byteswap<blofeld::infinite::s_s_unit_trick_definition>(blofeld::infinite::s_s_unit_trick_definition& value)
{
	byteswap(value.animation_name);
	byteswap(value.activation_type);
	byteswap(value.velocity_preservation);
	byteswap(value.flags);
	byteswap(value.camera_interpolation_time);
	byteswap(value.trick_exit_time);
	byteswap(value.trick_exit_camera_interpolation_time);
	byteswap(value.trick_exit_displacement_reference);
	byteswap(value.cooldown_time);
	byteswap(value.tutorial_id);
}

template<> void byteswap<blofeld::infinite::s_s_vehicleaicruisecontrol>(blofeld::infinite::s_s_vehicleaicruisecontrol& value)
{
	byteswap(value.proportional);
	byteswap(value.integral);
	byteswap(value.derivative);
	byteswap(value.slow_down_rate);
}

template<> void byteswap<blofeld::infinite::s_vehicledefinition>(blofeld::infinite::s_vehicledefinition& value)
{
	byteswap(value.unit);
	byteswap(value.flags);
	byteswap(value.physics_types);
	byteswap(value.havok_vehicle_physics);
	byteswap(value.tricks_block);
	byteswap(value.player_training_vehicle_type);
	byteswap(value.vehicle_size);
	byteswap(value.complex_suspension_sample_count);
	byteswap(value.complex_suspension_distribution_angle);
	byteswap(value.complex_suspension_wheel_diameter);
	byteswap(value.complex_suspension_wheel_width);
	byteswap(value.minimum_flipping_angular_velocity);
	byteswap(value.maximum_flipping_angular_velocity);
	byteswap(value.upside_down_angle);
	byteswap(value.crouch_transition_time);
	byteswap(value.hoojytsu);
	byteswap(value.seat_enterance_acceleration_scale);
	byteswap(value.seat_exit_accelersation_scale);
	byteswap(value.blur_function_name);
	byteswap(value.blur_speed);
	byteswap(value.flip_message);
	byteswap(value.player_vehicle_sound_bank);
	byteswap(value.surface_sound_material_effects);
	byteswap(value.light_suspension_sound);
	byteswap(value.light_suspension_sound_displacement_threshold);
	byteswap(value.medium_suspension_sound);
	byteswap(value.medium_suspension_sound_displacement_threshold);
	byteswap(value.hard_suspension_sound);
	byteswap(value.hard_suspension_sound_displacement_threshold);
	byteswap(value.fake_audio_speed___speed_increase_amount);
	byteswap(value.fake_audio_speed___boost_speed_increase_amount);
	byteswap(value.fake_audio_speed___speed_decrease_amount);
	byteswap(value.fake_audio_speed___non_boost_limit);
	byteswap(value.fake_audio_speed___max_speed_scale);
	byteswap(value.sound_rtpcs_block);
	byteswap(value.sound_sweeteners_block);
	byteswap(value.special_effect);
	byteswap(value.driver_boost_damage_effect_or_response);
	byteswap(value.rider_boost_damage_effect_or_response);
	byteswap(value.vehicle_name);
	byteswap(value.ai_cruise_control_block);
	byteswap(value.ui_display_info_block);
	byteswap(value.ui_vehicle_display_info);
	byteswap(value.vehicle_nav_point_sequence_index);
}

template<> void byteswap<blofeld::infinite::s_i343effectsvisualmaterialeffectsblock>(blofeld::infinite::s_i343effectsvisualmaterialeffectsblock& value)
{
	byteswap(value.effects_block);
}

template<> void byteswap<blofeld::infinite::s_i343effectsvisualmaterialeffectsdefinition>(blofeld::infinite::s_i343effectsvisualmaterialeffectsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.effects_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilviewkickpropertymodifiersdefinition>(blofeld::infinite::s_i343weaponrecoilviewkickpropertymodifiersdefinition& value)
{
	byteswap(value.view_kick_deceleration_modifier);
	byteswap(value.view_kick_return_to_center_modifier);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilgunkickpropertymodifiersdefinition>(blofeld::infinite::s_i343weaponrecoilgunkickpropertymodifiersdefinition& value)
{
	byteswap(value.gunkick_spring_constant_modifier);
}

template<> void byteswap<blofeld::infinite::s_i343weaponheatpropertymodifiersdefinition>(blofeld::infinite::s_i343weaponheatpropertymodifiersdefinition& value)
{
	byteswap(value.heat_loss_per_second_modifier);
	byteswap(value.overheated_heat_loss_per_second_modifier);
	byteswap(value.heat_generated_per_round_modifier);
}

template<> void byteswap<blofeld::infinite::s_i343weaponaimassistpropertymodifiersdefinition>(blofeld::infinite::s_i343weaponaimassistpropertymodifiersdefinition& value)
{
	byteswap(value.autoaim_angle);
	byteswap(value.prioritization_angle);
	byteswap(value.autoaim_range);
	byteswap(value.autoaim_falloff_range);
	byteswap(value.autoaim_near_falloff_range);
	byteswap(value.magnetism_angle);
	byteswap(value.magnetism_range);
	byteswap(value.magnetism_falloff_range);
	byteswap(value.magnetism_near_falloff_range);
	byteswap(value.deviation_angle);
}

template<> void byteswap<blofeld::infinite::s_i343weaponaccuracypropertymodifiersdefinition>(blofeld::infinite::s_i343weaponaccuracypropertymodifiersdefinition& value)
{
	byteswap(value.accuracy_spread);
}

template<> void byteswap<blofeld::infinite::s_i343weaponunitpropertymodifiersdefinition>(blofeld::infinite::s_i343weaponunitpropertymodifiersdefinition& value)
{
	byteswap(value.move_speed_scale_modifier);
	byteswap(value.turn_rate_scale_modifier);
	byteswap(value.simulated_input_scale_modifier);
}

template<> void byteswap<blofeld::infinite::s_i343weaponaltfirecomponentdefinition>(blofeld::infinite::s_i343weaponaltfirecomponentdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.alt_fire_flags);
	byteswap(value.target_tracking_outline);
	byteswap(value.alt_fire_animation_transition_in_time);
	byteswap(value.alt_fire_animation_transition_out_time);
	byteswap(value.weapon_fov_scale);
	byteswap(value.alt_fire_translation_offset);
	byteswap(value.alt_fire_percent_to_offset_percent$2);
	byteswap(value.alt_fire_animation_mode);
	byteswap(value.recoil_view_kick_modifiers_block);
	byteswap(value.recoil_gunkick_modifiers_block);
	byteswap(value.heat_modifiers_block);
	byteswap(value.aim_assist_modifiers_block);
	byteswap(value.accuracy_modifiers_block);
	byteswap(value.unit_modifiers_block);
	byteswap(value.activate_sound);
	byteswap(value.deactivate_sound);
}

template<> void byteswap<blofeld::infinite::s_i343weapongenericattachmentdefinition>(blofeld::infinite::s_i343weapongenericattachmentdefinition& value)
{
	byteswap(value.attachment);
}

template<> void byteswap<blofeld::infinite::s_i343weaponweaponconfigurationdefinitioninternal>(blofeld::infinite::s_i343weaponweaponconfigurationdefinitioninternal& value)
{
	byteswap(value.variant_name);
	byteswap(value.generic_attachments_block);
	byteswap(value.barrel_attachment);
	byteswap(value.heat_attachment);
	byteswap(value.magazine_attachment);
	byteswap(value.melee_attachment);
	byteswap(value.sight_attachment);
	byteswap(value.target_tracking_attachment);
	byteswap(value.trigger_attachment);
	byteswap(value.unit_modifier_set);
	byteswap(value.ui_display_info);
}

template<> void byteswap<blofeld::infinite::s_i343weaponweaponconfigurationdefinition>(blofeld::infinite::s_i343weaponweaponconfigurationdefinition& value)
{
	byteswap(value.object_configuration);
	byteswap(value.weapon);
}

template<> void byteswap<blofeld::infinite::s_i343weapondepthoffieldinternaldefinition>(blofeld::infinite::s_i343weapondepthoffieldinternaldefinition& value)
{
	byteswap(value.world_blur_aperture);
	byteswap(value.world_blur_focus_max_distance);
	byteswap(value.world_blur_focus_smoothing_value);
	byteswap(value.world_blur_trend_smoothing_value);
	byteswap(value.world_blur_half_width_ratio);
	byteswap(value.weapon_blur_aperture);
	byteswap(value.weapon_blur_focus_distance);
	byteswap(value.weapon_blur_half_width);
	byteswap(value.vignette_radius_bounds);
	byteswap(value.vignette_intensity);
}

template<> void byteswap<blofeld::infinite::s_i343weapondepthoffielddefinition>(blofeld::infinite::s_i343weapondepthoffielddefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.dof);
}

template<> void byteswap<blofeld::infinite::s_i343weaponaimassistmodifierdefinition>(blofeld::infinite::s_i343weaponaimassistmodifierdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.aim_assist_modifiers_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmentregionpermutationdefinition>(blofeld::infinite::s_i343weaponattachmentregionpermutationdefinition& value)
{
	byteswap(value.region_name);
	byteswap(value.permutation_name);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmentobjectcomponentdefinition>(blofeld::infinite::s_i343weaponattachmentobjectcomponentdefinition& value)
{
	byteswap(value.object);
	byteswap(value.weapon_marker);
	byteswap(value.attachment_marker);
}

template<> void byteswap<blofeld::infinite::s_i343weaponprecisionaimpropertymodifiersdefinition>(blofeld::infinite::s_i343weaponprecisionaimpropertymodifiersdefinition& value)
{
	byteswap(value.precision_transition_in_time_modifier);
	byteswap(value.precision_transition_out_time_modifier);
}

template<> void byteswap<blofeld::infinite::s_i343weaponanimationpropertymodifiersdefinition>(blofeld::infinite::s_i343weaponanimationpropertymodifiersdefinition& value)
{
	byteswap(value.ready_playback_speed_modifier);
	byteswap(value.ready_initial_playback_modifier);
	byteswap(value.put_away_playback_speed_modifier);
	byteswap(value.reload_playback_speed_modifier);
	byteswap(value.reload_while_empty_playback_speed_modifier);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmentcomponentdefinition>(blofeld::infinite::s_i343weaponattachmentcomponentdefinition& value)
{
	byteswap(value.variant_region_name);
	byteswap(value.variant_permutation_name);
	byteswap(value.region_permutations_block);
	byteswap(value.attachments_block);
	byteswap(value.attachmentname);
	byteswap(value.attachment_object_block);
	byteswap(value.accuracy_modifiers_block);
	byteswap(value.precision_aim_modifiers_block);
	byteswap(value.unit_modifiers_block);
	byteswap(value.aim_assist_modifiers_block);
	byteswap(value.aim_assist_reference);
	byteswap(value.recoil_view_kick_modifiers_block);
	byteswap(value.recoil_gunkick_modifiers_block);
	byteswap(value.animation_modifiers_block);
	byteswap(value.heat_modifiers_block);
	byteswap(value.ui_display_info_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelspinningdefinition>(blofeld::infinite::s_i343weaponbarrelspinningdefinition& value)
{
	byteswap(value.idle_spin_speed);
	byteswap(value.ready_spin_speed);
	byteswap(value.firing_rate_scalar);
	byteswap(value.spin_up_time);
	byteswap(value.spin_down_time);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelfiringdefinition>(blofeld::infinite::s_i343weaponbarrelfiringdefinition& value)
{
	byteswap(value.rounds_per_second);
	byteswap(value.rate_of_fire_acceleration);
	byteswap(value.acceleration_time);
	byteswap(value.rate_of_fire_deceleration);
	byteswap(value.deceleration_time);
	byteswap(value.barrel_spin_scale);
	byteswap(value.barrel_spin_scalars);
	byteswap(value.blurred_rate_of_fire);
	byteswap(value.shots_per_fire);
	byteswap(value.fire_recovery_time);
	byteswap(value.soft_recovery_fraction);
	byteswap(value.melee__fire_recovery_time);
	byteswap(value.melee_soft_recovery_fraction);
	byteswap(value.runtime_rate_of_fire_acceleration_rate);
	byteswap(value.runtime_rate_of_fire_deceleration_rate);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelfiringparam>(blofeld::infinite::s_i343weaponbarrelfiringparam& value)
{
	byteswap(value.firing_params);
}

template<> void byteswap<blofeld::infinite::s_i343weaponeffectreferenceblockdefinition>(blofeld::infinite::s_i343weaponeffectreferenceblockdefinition& value)
{
	byteswap(value.effect);
}

template<> void byteswap<blofeld::infinite::s_i343effectsmarkeroverrideblock>(blofeld::infinite::s_i343effectsmarkeroverrideblock& value)
{
	byteswap(value.marker);
	byteswap(value.markeroverride);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelfiringeffect>(blofeld::infinite::s_i343weaponbarrelfiringeffect& value)
{
	byteswap(value.effect);
	byteswap(value.flags);
	byteswap(value.override_effects_block);
	byteswap(value.marker_overrides_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelfiringeffectdefinition>(blofeld::infinite::s_i343weaponbarrelfiringeffectdefinition& value)
{
	byteswap(value.shot_count_lower_bound);
	byteswap(value.shot_count_upper_bound);
	byteswap(value.firing_effect_overrides);
	byteswap(value.critical_effect_overrides);
	byteswap(value.misfire_effect_overrides);
	byteswap(value.empty_effect_overrides);
	byteswap(value.optional_secondary_firing_effect_overrides);
	byteswap(value.firing_effect$2);
	byteswap(value.critical_effect$2);
	byteswap(value.misfire_effect$2);
	byteswap(value.empty_effect$2);
	byteswap(value.optional_secondary_firing_effect$2);
	byteswap(value.firing_damage);
	byteswap(value.critical_damage);
	byteswap(value.misfire_damage);
	byteswap(value.empty_damage);
	byteswap(value.optional_secondary_firing_damage);
	byteswap(value.firing_rider_damage);
	byteswap(value.critical_rider_damage);
	byteswap(value.misfire_rider_damage);
	byteswap(value.empty_rider_damage);
	byteswap(value.optional_secondary_firing_rider_damage);
}

template<> void byteswap<blofeld::infinite::s_i343weaponprojectiledistributioncustomangleoffset>(blofeld::infinite::s_i343weaponprojectiledistributioncustomangleoffset& value)
{
	byteswap(value.angle_offset);
}

template<> void byteswap<blofeld::infinite::s_i343weaponprojectiledistributioncustomvector>(blofeld::infinite::s_i343weaponprojectiledistributioncustomvector& value)
{
	byteswap(value.point_offset);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarreldistrubutiondefinition>(blofeld::infinite::s_i343weaponbarreldistrubutiondefinition& value)
{
	byteswap(value.distribution_function);
	byteswap(value.projectiles_per_shot);
	byteswap(value.direction_offset_block);
	byteswap(value.position_offsets_block);
	byteswap(value.distribution_angle);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarreldistrubutionparam>(blofeld::infinite::s_i343weaponbarreldistrubutionparam& value)
{
	byteswap(value.projectile_distribution);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelerrordefinition>(blofeld::infinite::s_i343weaponbarrelerrordefinition& value)
{
	byteswap(value.lower_bound_deceleration_time);
	byteswap(value.deceleration_time);
	byteswap(value.runtime_error_min_deceleration_rate);
	byteswap(value.runtime_error_deceleration_rate);
	byteswap(value.minimum_error);
	byteswap(value.minimum_error_angle);
	byteswap(value.error_angle);
	byteswap(value.damage_error);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelerrorparam>(blofeld::infinite::s_i343weaponbarrelerrorparam& value)
{
	byteswap(value.projectile_error);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelnoisedefinition>(blofeld::infinite::s_i343weaponbarrelnoisedefinition& value)
{
	byteswap(value.ai_noise);
	byteswap(value.motion_tracker_noise);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelnoiseparam>(blofeld::infinite::s_i343weaponbarrelnoiseparam& value)
{
	byteswap(value.barrel_noise);
}

template<> void byteswap<blofeld::infinite::s_i343weaponweaponattachmentheatgeneratedperroundparam>(blofeld::infinite::s_i343weaponweaponattachmentheatgeneratedperroundparam& value)
{
	byteswap(value.heat_generated_per_round);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelagegenerateddefinition>(blofeld::infinite::s_i343weaponbarrelagegenerateddefinition& value)
{
	byteswap(value.age_generated_per_round);
	byteswap(value.campaign_age_generated_per_round);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelagegeneratedparam>(blofeld::infinite::s_i343weaponbarrelagegeneratedparam& value)
{
	byteswap(value.age_generation);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelsweetheatdefinition>(blofeld::infinite::s_i343weaponbarrelsweetheatdefinition& value)
{
	byteswap(value.sweet_spot_start_heat_level);
	byteswap(value.sweet_spot_end_heat_level);
	byteswap(value.sweet_heat_projectile);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelsweetheatparam>(blofeld::infinite::s_i343weaponbarrelsweetheatparam& value)
{
	byteswap(value.sweet_heat);
}

template<> void byteswap<blofeld::infinite::s_i343weaponfiresoundvariationdefinition>(blofeld::infinite::s_i343weaponfiresoundvariationdefinition& value)
{
	byteswap(value.weapon_fire_sound);
}

template<> void byteswap<blofeld::infinite::s_i343weaponfiresounddefinition>(blofeld::infinite::s_i343weaponfiresounddefinition& value)
{
	byteswap(value.firing_type);
	byteswap(value.barrel_attachment_index);
	byteswap(value.fire_start_delay);
	byteswap(value.weapon_fire_sound_variations_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponfiresoundparam>(blofeld::infinite::s_i343weaponfiresoundparam& value)
{
	byteswap(value.weapon_fire_sound);
}

template<> void byteswap<blofeld::infinite::s_i343weaponfiresoundtailsdefinition>(blofeld::infinite::s_i343weaponfiresoundtailsdefinition& value)
{
	byteswap(value.weapon_switch_group);
	byteswap(value.weapon_switch_value);
}

template<> void byteswap<blofeld::infinite::s_i343weaponfiresoundtailsparam>(blofeld::infinite::s_i343weaponfiresoundtailsparam& value)
{
	byteswap(value.weapon_fire_tail);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarreloverridedefinition>(blofeld::infinite::s_i343weaponbarreloverridedefinition& value)
{
	byteswap(value.projectile);
	byteswap(value.firing_params_block);
	byteswap(value.firing_effects_block);
	byteswap(value.projectile_distribution_block);
	byteswap(value.projectile_error_block);
	byteswap(value.noise_block);
	byteswap(value.heat_generated_per_round_block);
	byteswap(value.age_generation_block);
	byteswap(value.sweet_heat_block);
	byteswap(value.weapon_fire_sound_block);
	byteswap(value.weapon_fire_tail_sound_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmentbarrelcomponentdefinition>(blofeld::infinite::s_i343weaponattachmentbarrelcomponentdefinition& value)
{
	byteswap(value.primary_barrel_override_block);
	byteswap(value.secondary_barrel_override_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmentbarreldefinition>(blofeld::infinite::s_i343weaponattachmentbarreldefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.weapon_attachment_component);
	byteswap(value.weapon_attachment_barrel_component);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmentheatcomponentdefinition>(blofeld::infinite::s_i343weaponattachmentheatcomponentdefinition& value)
{
	byteswap(value.overheated);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmentheatdefinition>(blofeld::infinite::s_i343weaponattachmentheatdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.weapon_attachment_component);
	byteswap(value.weapon_attachment_heat_component);
}

template<> void byteswap<blofeld::infinite::s_i343weaponmagazineoverridedefinition>(blofeld::infinite::s_i343weaponmagazineoverridedefinition& value)
{
	byteswap(value.rounds_total_initial);
	byteswap(value.rounds_total_maximum);
	byteswap(value.rounds_loaded_maximum);
	byteswap(value.rounds_inventory_maximum);
	byteswap(value.rounds_reloaded);
	byteswap(value.ammo_refill_type);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmentmagazinecomponentdefinition>(blofeld::infinite::s_i343weaponattachmentmagazinecomponentdefinition& value)
{
	byteswap(value.primary_magazine_override_block);
	byteswap(value.secondary_magazine_override_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmentmagazinedefinition>(blofeld::infinite::s_i343weaponattachmentmagazinedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.weapon_attachment_component);
	byteswap(value.weapon_attachment_magazine_component);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmentdefinition>(blofeld::infinite::s_i343weaponattachmentdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.weapon_attachment_component);
}

template<> void byteswap<blofeld::infinite::s_i343weaponmeleecomponentdefinition>(blofeld::infinite::s_i343weaponmeleecomponentdefinition& value)
{
	byteswap(value.melee_damage_parameters_block);
	byteswap(value.melee_animation_set);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmentmeleedefinition>(blofeld::infinite::s_i343weaponattachmentmeleedefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.weapon_attachment_component);
	byteswap(value.weapon_melee_component);
}

template<> void byteswap<blofeld::infinite::s_i343weaponsightcomponentdefinition>(blofeld::infinite::s_i343weaponsightcomponentdefinition& value)
{
	byteswap(value.sight_flags);
	byteswap(value.target_tracking_outline);
	byteswap(value.ads_transition_in_time);
	byteswap(value.ads_transition_out_time);
	byteswap(value.weapon_fov_scale);
	byteswap(value.ads_translation_offset);
	byteswap(value.ads_percent_to_offset_percent$2);
	byteswap(value.ads_state_enabled_fraction);
	byteswap(value.ads_enabled_to_complete$2);
	byteswap(value.tc_transition_in_fraction);
	byteswap(value.transparency_transition_start_ads_fraction);
	byteswap(value.transparency_transition_finish_ads_fraction);
	byteswap(value.range_finder_max_range);
	byteswap(value.sight_2d_screen_reference);
	byteswap(value.sight_front_screen_reference);
	byteswap(value.sight_back_screen_reference);
	byteswap(value.depth_of_field);
	byteswap(value.penalized_descope_sound);
	byteswap(value.penalized_descope_transition_out_modifier);
	byteswap(value.penalized_descope_ads_hold_disable_time);
	byteswap(value.ads_anim_mode);
	byteswap(value.ads_camo_removal_scale);
	byteswap(value.ads_scope_swap_block);
	byteswap(value.ads_scope_swap_transition_fraction);
}

template<> void byteswap<blofeld::infinite::s_i343weaponzoomleveldefinition>(blofeld::infinite::s_i343weaponzoomleveldefinition& value)
{
	byteswap(value.magnification);
	byteswap(value.magnification_profile_setting);
	byteswap(value.zoom_transition_time);
	byteswap(value.effect_rate);
	byteswap(value.zoom_in_sound);
	byteswap(value.zoom_out_sound);
	byteswap(value.zoom_effect_flags);
	byteswap(value.zoom_effect);
	byteswap(value.screen_effect);
	byteswap(value.accuracy_modifiers_block);
	byteswap(value.unit_modifiers_block);
	byteswap(value.aim_assist_modifiers_block);
	byteswap(value.aim_assist_reference);
	byteswap(value.recoil_view_kick_modifiers_block);
	byteswap(value.recoil_gunkick_modifiers_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponzoomcomponentdefinition>(blofeld::infinite::s_i343weaponzoomcomponentdefinition& value)
{
	byteswap(value.zoom_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmentsightdefinition>(blofeld::infinite::s_i343weaponattachmentsightdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.weapon_attachment_component);
	byteswap(value.weapon_sight_component);
	byteswap(value.weapon_zoom);
}

template<> void byteswap<blofeld::infinite::s_i343weapontiggerchargingfirefractions>(blofeld::infinite::s_i343weapontiggerchargingfirefractions& value)
{
	byteswap(value.charge_fraction);
}

template<> void byteswap<blofeld::infinite::s_i343weapontriggerchargingdefinition>(blofeld::infinite::s_i343weapontriggerchargingdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.charging_initiation_mechanism);
	byteswap(value.overcharged_action);
	byteswap(value.charging_time);
	byteswap(value.charged_time);
	byteswap(value.cancelled_trigger_throw);
	byteswap(value.charged_illumination);
	byteswap(value.charging_effect);
	byteswap(value.charging_damage_effect);
	byteswap(value.charging_continuous_damage_response);
	byteswap(value.charged_drain_rate);
	byteswap(value.discharge_effect);
	byteswap(value.discharge_damage_effect);
	byteswap(value.fire_fractions_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponweapontriggerchargingoverride>(blofeld::infinite::s_i343weaponweapontriggerchargingoverride& value)
{
	byteswap(value.charging);
}

template<> void byteswap<blofeld::infinite::s_i343weapontriggeroverridedefinition>(blofeld::infinite::s_i343weapontriggeroverridedefinition& value)
{
	byteswap(value.trigger_override_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmenttriggercomponentdefinition>(blofeld::infinite::s_i343weaponattachmenttriggercomponentdefinition& value)
{
	byteswap(value.primary_trigger_override_block);
	byteswap(value.secondary_trigger_override_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmenttriggerdefinition>(blofeld::infinite::s_i343weaponattachmenttriggerdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.weapon_attachment_component);
	byteswap(value.weapon_attachment_trigger_component);
}

template<> void byteswap<blofeld::infinite::s_i343weaponlaserguidancedefinition>(blofeld::infinite::s_i343weaponlaserguidancedefinition& value)
{
	byteswap(value.laser_guidance_activation);
}

template<> void byteswap<blofeld::infinite::s_i343weapontargettrackingcomponentdefinition>(blofeld::infinite::s_i343weapontargettrackingcomponentdefinition& value)
{
	byteswap(value.target_tracking_block);
	byteswap(value.laser_guidance_block);
	byteswap(value.locking_reticle_screen_name);
	byteswap(value.locked_on_reticle_screen_name);
}

template<> void byteswap<blofeld::infinite::s_i343weaponattachmenttargettrackingdefinition>(blofeld::infinite::s_i343weaponattachmenttargettrackingdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.weapon_attachment_component);
	byteswap(value.weapon_target_tracking_component);
}

template<> void byteswap<blofeld::infinite::s_i343weapondebugadsreticlemovmementthreshold>(blofeld::infinite::s_i343weapondebugadsreticlemovmementthreshold& value)
{
	byteswap(value.ads_reticle_movement_threshold_name);
	byteswap(value.ads_reticle_movement_threshold_angle);
	byteswap(value.ads_reticle_movement_threshold_color);
}

template<> void byteswap<blofeld::infinite::s_i343weaponfirstpersonweaponoffsetcontrol>(blofeld::infinite::s_i343weaponfirstpersonweaponoffsetcontrol& value)
{
	byteswap(value.first_person_weapon_group);
	byteswap(value.weapon_group_header_string);
	byteswap(value.depth_offset_bounds);
	byteswap(value.horizontal_offset_bounds);
	byteswap(value.vertical_offset_bounds);
	byteswap(value.maximum_computed_offset_extents);
	byteswap(value.depth_axis_flags);
	byteswap(value.horizontal_axis_flags);
	byteswap(value.vertical_axis_flags);
}

template<> void byteswap<blofeld::infinite::s_i343weaponfirstpersonweaponoffsetcontrolindex>(blofeld::infinite::s_i343weaponfirstpersonweaponoffsetcontrolindex& value)
{
	byteswap(value.index);
}

template<> void byteswap<blofeld::infinite::s_i343weaponweaponglobalsdefinition>(blofeld::infinite::s_i343weaponweaponglobalsdefinition& value)
{
	byteswap(value.anytag);
	byteswap(value.gunkick_yaw_mapping_bounds);
	byteswap(value.gunkick_yaw_to_roll);
	byteswap(value.viewkick_yaw_mapping_bounds);
	byteswap(value.viewkick_yaw_to_roll);
	byteswap(value.max_player_additive_velocity_for_flag_throw);
	byteswap(value.descope_magnetism_transition_time);
	byteswap(value.descope_magnetism_transition);
	byteswap(value.flag_throw_forward_additive_velocity_);
	byteswap(value.flag_throw_backward_additive_velocity_);
	byteswap(value.flag_throw_pitch);
	byteswap(value.ads_reticle_movement_thresholds_block);
	byteswap(value.suppression_flags);
	byteswap(value.first_person_weapon_offset_controls_block);
	byteswap(value.first_person_weapon_offset_controls_index_cache);
	byteswap(value.game_options___weapon_offset_scaling_factor);
}

template<> void byteswap<blofeld::infinite::s_nodegraphreferenceblockdefinition>(blofeld::infinite::s_nodegraphreferenceblockdefinition& value)
{
	byteswap(value.node_graph_tag);
}

template<> void byteswap<blofeld::infinite::s_bitmapdictionaryreferenceblockdefinition>(blofeld::infinite::s_bitmapdictionaryreferenceblockdefinition& value)
{
	byteswap(value.bitmap_dictionary);
}

template<> void byteswap<blofeld::infinite::s_s_luauserlibrary>(blofeld::infinite::s_s_luauserlibrary& value)
{
	byteswap(value.lua_library);
}

template<> void byteswap<blofeld::infinite::s_s_cui_component_screen_reference>(blofeld::infinite::s_s_cui_component_screen_reference& value)
{
	byteswap(value.name);
	byteswap(value.cui_screen_tag);
}

template<> void byteswap<blofeld::infinite::s_s_cui_overlay_camera_definition>(blofeld::infinite::s_s_cui_overlay_camera_definition& value)
{
	byteswap(value.resolution_name);
	byteswap(value.pivot_corner);
	byteswap(value.z_near);
	byteswap(value.z_far);
	byteswap(value.x_angle_degrees);
	byteswap(value.y_angle_degrees);
}

template<> void byteswap<blofeld::infinite::s_userinterfacegamescreensequencestep>(blofeld::infinite::s_userinterfacegamescreensequencestep& value)
{
	byteswap(value.flags);
	byteswap(value.allowedvariants);
	byteswap(value.start_hui_event);
	byteswap(value.end_hui_event);
	byteswap(value.mp_game_event);
	byteswap(value.server_lua_function);
	byteswap(value.client_lua_function);
	byteswap(value.starttime);
	byteswap(value.endtime);
}

template<> void byteswap<blofeld::infinite::s_s_user_interface_tag_globals>(blofeld::infinite::s_s_user_interface_tag_globals& value)
{
	byteswap(value.anytag);
	byteswap(value.node_graphs_block);
	byteswap(value.bitmap_dictionaries_block);
	byteswap(value.lua_user_libraries_block);
	byteswap(value.cui_screen_widgets_block);
	byteswap(value.cui_overlay_cameras_block);
	byteswap(value.spawn_timer_countdown_rate);
	byteswap(value.game_intro_sequence_block);
	byteswap(value.game_round_end_sequence_block);
	byteswap(value.game_round_end_with_killcam_sequence_block);
	byteswap(value.game_next_round_sequence_block);
	byteswap(value.game_end_sequence_block);
	byteswap(value.game_end_with_killcam_sequence_block);
	byteswap(value.in_game_sequence_block);
	byteswap(value.halftime_sequence_block);
	byteswap(value.overtime_sequence_block);
	byteswap(value.map_intro_sequence_block);
	byteswap(value.player_intro_sequence_block);
	byteswap(value.team_intro_sequence_block);
	byteswap(value.team_regroup_sequence_block);
	byteswap(value.team_outro_sequence_block);
	byteswap(value.hud_globals);
	byteswap(value.total_object_count_budget);
	byteswap(value.in_game_map_render_tag);
	byteswap(value.in_game_map_settings_tag);
}

template<> void byteswap<blofeld::infinite::s_s_color_preset>(blofeld::infinite::s_s_color_preset& value)
{
	byteswap(value.name);
	byteswap(value.color);
}

template<> void byteswap<blofeld::infinite::s_realargbcolorblock>(blofeld::infinite::s_realargbcolorblock& value)
{
	byteswap(value.color);
}

template<> void byteswap<blofeld::infinite::s_s_tint_colors>(blofeld::infinite::s_s_tint_colors& value)
{
	byteswap(value.text_team_block);
	byteswap(value.bitmap_team_block);
}

template<> void byteswap<blofeld::infinite::s_s_gui_alert_description>(blofeld::infinite::s_s_gui_alert_description& value)
{
	byteswap(value.error_name);
	byteswap(value.flags);
	byteswap(value.error_category);
	byteswap(value.error_icon);
	byteswap(value.title);
	byteswap(value.message);
}

template<> void byteswap<blofeld::infinite::s_s_gui_dialog_description>(blofeld::infinite::s_s_gui_dialog_description& value)
{
	byteswap(value.dialog_name);
	byteswap(value.flags);
	byteswap(value.title);
	byteswap(value.message);
	byteswap(value.first_item);
	byteswap(value.second_item);
	byteswap(value.third_item);
	byteswap(value.fourth_item);
	byteswap(value.button_key);
	byteswap(value.default_item);
	byteswap(value.b_button_action);
}

template<> void byteswap<blofeld::infinite::s_fontsetreferenceblockdefinition>(blofeld::infinite::s_fontsetreferenceblockdefinition& value)
{
	byteswap(value.wpf_font_set_tag);
}

template<> void byteswap<blofeld::infinite::s_reticleoverplayerdefinition>(blofeld::infinite::s_reticleoverplayerdefinition& value)
{
	byteswap(value.firsttierangle);
	byteswap(value.firsttierdistance);
	byteswap(value.secondtierangle);
	byteswap(value.secondtierdistance);
	byteswap(value.vehicledistancescalar);
}

template<> void byteswap<blofeld::infinite::s_fontmappingdefinition>(blofeld::infinite::s_fontmappingdefinition& value)
{
	byteswap(value.original_name);
	byteswap(value.remapped_name);
}

template<> void byteswap<blofeld::infinite::s_localizedfontmappingsetdefinition>(blofeld::infinite::s_localizedfontmappingsetdefinition& value)
{
	byteswap(value.language);
	byteswap(value.mappings_block);
}

template<> void byteswap<blofeld::infinite::s_rebindingslidersettings>(blofeld::infinite::s_rebindingslidersettings& value)
{
	byteswap(value.min_value);
	byteswap(value.max_value);
	byteswap(value.increment_value);
	byteswap(value.scaling_value);
}

template<> void byteswap<blofeld::infinite::s_rebindingdropdownlist>(blofeld::infinite::s_rebindingdropdownlist& value)
{
	byteswap(value.label);
}

template<> void byteswap<blofeld::infinite::s_rebindingaxiscategorysettings>(blofeld::infinite::s_rebindingaxiscategorysettings& value)
{
	byteswap(value.axis_name);
	byteswap(value.axis_description);
	byteswap(value.display_category);
	byteswap(value.menu_type);
	byteswap(value.flags);
	byteswap(value.toggle_axis);
	byteswap(value.slider_settings_block);
	byteswap(value.dropdown_list_block);
}

template<> void byteswap<blofeld::infinite::s_axisaltnamepair>(blofeld::infinite::s_axisaltnamepair& value)
{
	byteswap(value.axis_name);
	byteswap(value.alt_name);
}

template<> void byteswap<blofeld::infinite::s_unbindableinputdeviceelementslist>(blofeld::infinite::s_unbindableinputdeviceelementslist& value)
{
	byteswap(value.unbindable_input);
}

template<> void byteswap<blofeld::infinite::s_unbindableaxistoinputdeviceelementslist>(blofeld::infinite::s_unbindableaxistoinputdeviceelementslist& value)
{
	byteswap(value.axis_name);
	byteswap(value.unbindable_input_list_for_axis_block);
}

template<> void byteswap<blofeld::infinite::s_swapperinput>(blofeld::infinite::s_swapperinput& value)
{
	byteswap(value.axis);
}

template<> void byteswap<blofeld::infinite::s_dropshadowparameters>(blofeld::infinite::s_dropshadowparameters& value)
{
	byteswap(value.name);
	byteswap(value.offset);
	byteswap(value.color);
	byteswap(value.sample_size);
}

template<> void byteswap<blofeld::infinite::s_fontsizescalevalues>(blofeld::infinite::s_fontsizescalevalues& value)
{
	byteswap(value.range_min);
	byteswap(value.range_max);
	byteswap(value.large_font_value);
	byteswap(value.extra_large_font_value);
}

template<> void byteswap<blofeld::infinite::s_settingsmenuslidersettings>(blofeld::infinite::s_settingsmenuslidersettings& value)
{
	byteswap(value.name);
	byteswap(value.min_value);
	byteswap(value.max_value);
	byteswap(value.step_size);
	byteswap(value.scaling_factor);
}

template<> void byteswap<blofeld::infinite::s_s_user_interface_shared_globals>(blofeld::infinite::s_s_user_interface_shared_globals& value)
{
	byteswap(value.anytag);
	byteswap(value.unicode_string_list_tag);
	byteswap(value.string_list_tag);
	byteswap(value.resources_tags_block);
	byteswap(value.navpoint_resources_tags_block);
	byteswap(value.color_presets_block);
	byteswap(value.disposition_colors$2);
	byteswap(value.tint_colors_block);
	byteswap(value.default_sounds);
	byteswap(value.weapon_discarded_sound);
	byteswap(value.callout_spam_prevention_sound);
	byteswap(value.grenade_switching_sound);
	byteswap(value.alert_descriptions_block);
	byteswap(value.dialog_descriptions_block);
	byteswap(value.lua_user_libraries_block);
	byteswap(value.lua_user_sample_data_libraries_block);
	byteswap(value.basic_widget_tab_speed_function);
	byteswap(value.max_input_time_x_on_the_basic_graph_msec);
	byteswap(value.spinner_tab_speed_function);
	byteswap(value.max_input_time_x_on_the_graph_msec);
	byteswap(value.delay);
	byteswap(value.wpf_font_sets_block);
	byteswap(value.typefaces);
	byteswap(value.bitmap_dictionaries_block);
	byteswap(value.double_tap_bitmap_dictionaries_block);
	byteswap(value.loading_screen_tag);
	byteswap(value.fade_from_level_to_loading_screen_seconds);
	byteswap(value.fade_from_level_to_blocking_load_seconds);
	byteswap(value.fade_in_to_loading_screen_seconds);
	byteswap(value.fade_out_from_loading_screen_seconds);
	byteswap(value.gameplay_overlay_blur_fade_in_function);
	byteswap(value.gameplay_overlay_blur_fade_in_time_s);
	byteswap(value.gameplay_overlay_blur_fade_out_function);
	byteswap(value.gameplay_overlay_blur_fade_out_time_s);
	byteswap(value.watermark_screen_tag);
	byteswap(value.reticle_over_player_behavior);
	byteswap(value.font_mappings_block);
	byteswap(value.fasthud_font_fake_bitmap$2);
	byteswap(value.emblem_themes);
	byteswap(value.slams_uri_lookup_table);
	byteswap(value.keyboard_rebinding_axes_block);
	byteswap(value.controller_rebinding_options_axes_block);
	byteswap(value.controller_rebinding_axes_block);
	byteswap(value.axis_alt_names_block);
	byteswap(value.unbindable_input_list_block);
	byteswap(value.unbindable_input_list_for_ui_special_controls_block);
	byteswap(value.equipment_swapper_open_inputs_block);
	byteswap(value.grenade_swapper_open_inputs_block);
	byteswap(value.equipment_swapper_selection_inputs_block);
	byteswap(value.grenade_swapper_selection_inputs_block);
	byteswap(value.drop_shadow_parameters_block);
	byteswap(value.font_size_scale_values_block);
	byteswap(value.settings_menu_slider_settings_block);
	byteswap(value.narration_phonemes_tag);
}

template<> void byteswap<blofeld::infinite::s_s_wind_function>(blofeld::infinite::s_s_wind_function& value)
{
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_s_wind_definition>(blofeld::infinite::s_s_wind_definition& value)
{
	byteswap(value.anytag);
	byteswap(value.wind_direction_radian);
	byteswap(value.speed);
	byteswap(value.bend);
	byteswap(value.oscillation);
	byteswap(value.gust_size);
	byteswap(value.gust_noise_bitmap);
	byteswap(value.cloud_influence);
	byteswap(value.fog_influence);
	byteswap(value.materials_speed_influence);
	byteswap(value.materials_gust_breakup);
	byteswap(value.materials_gust_strength);
	byteswap(value.materials_world_uv_max_x);
	byteswap(value.materials_world_uv_max_y);
	byteswap(value.materials_world_uv_max_z);
}

template<> void byteswap<blofeld::infinite::s_waterphysicsdragpropertiestag>(blofeld::infinite::s_waterphysicsdragpropertiestag& value)
{
	byteswap(value.anytag);
	byteswap(value.drag);
}

template<> void byteswap<blofeld::infinite::s_blendanimationtokennode>(blofeld::infinite::s_blendanimationtokennode& value)
{
	byteswap(value.animation_name);
	byteswap(value.mode);
	byteswap(value.group_name);
	byteswap(value.playback_rate);
	byteswap(value.animation_token_flags);
	byteswap(value.alpha);
	byteswap(value.beta);
}

template<> void byteswap<blofeld::infinite::s_blendsubgraphnode>(blofeld::infinite::s_blendsubgraphnode& value)
{
	byteswap(value.coordinate_source_token);
	byteswap(value.alpha);
	byteswap(value.beta);
	byteswap(value.subgraph_reference);
}

template<> void byteswap<blofeld::infinite::s_exportedblendgraphtag>(blofeld::infinite::s_exportedblendgraphtag& value)
{
	byteswap(value.anytag);
	byteswap(value.source_graph);
	byteswap(value.blend_type);
	byteswap(value.animation_tokens_block);
	byteswap(value.subgraph_nodes_block);
	byteswap(value.alpha_min);
	byteswap(value.alpha_max);
	byteswap(value.beta_min);
	byteswap(value.beta_max);
	byteswap(value.partition_count);
}

template<> void byteswap<blofeld::infinite::s_xmlfiletag>(blofeld::infinite::s_xmlfiletag& value)
{
	byteswap(value.anytag);
	byteswap(value.archive_read_pointer);
}

template<> void byteswap<blofeld::infinite::s_objectgraphconnectionendpoint>(blofeld::infinite::s_objectgraphconnectionendpoint& value)
{
	byteswap(value.node_type);
	byteswap(value.node_index);
	byteswap(value.pin_index);
}

template<> void byteswap<blofeld::infinite::s_objectgraphconnection>(blofeld::infinite::s_objectgraphconnection& value)
{
	byteswap(value.source_block);
	byteswap(value.destination_block);
}

template<> void byteswap<blofeld::infinite::s_booltogglenodedata>(blofeld::infinite::s_booltogglenodedata& value)
{
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_booltoeventnodedata>(blofeld::infinite::s_booltoeventnodedata& value)
{
	byteswap(value.dummy_data);
}

template<> void byteswap<blofeld::infinite::s_brancheventnodedata>(blofeld::infinite::s_brancheventnodedata& value)
{
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_checklightingvariantnodedata>(blofeld::infinite::s_checklightingvariantnodedata& value)
{
	byteswap(value.lighting_variant_name_id);
}

template<> void byteswap<blofeld::infinite::s_clampnodedata>(blofeld::infinite::s_clampnodedata& value)
{
	byteswap(value.minimum);
	byteswap(value.maximum);
}

template<> void byteswap<blofeld::infinite::s_comparefloatnodedata>(blofeld::infinite::s_comparefloatnodedata& value)
{
	byteswap(value.dummy_data);
}

template<> void byteswap<blofeld::infinite::s_constantvector3node>(blofeld::infinite::s_constantvector3node& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_debugprintnodedata>(blofeld::infinite::s_debugprintnodedata& value)
{
	byteswap(value.message_length);
	byteswap(value.message);
}

template<> void byteswap<blofeld::infinite::s_envelopenodedata>(blofeld::infinite::s_envelopenodedata& value)
{
	byteswap(value.attack);
	byteswap(value.hold);
	byteswap(value.release);
}

template<> void byteswap<blofeld::infinite::s_eventrouternodedata>(blofeld::infinite::s_eventrouternodedata& value)
{
	byteswap(value.dummy_data);
}

template<> void byteswap<blofeld::infinite::s_floatsnapshotnodedata>(blofeld::infinite::s_floatsnapshotnodedata& value)
{
	byteswap(value.dummy_data);
}

template<> void byteswap<blofeld::infinite::s_getgamefloatvaluenodedata>(blofeld::infinite::s_getgamefloatvaluenodedata& value)
{
	byteswap(value.value_name);
}

template<> void byteswap<blofeld::infinite::s_floatswitchnodedata>(blofeld::infinite::s_floatswitchnodedata& value)
{
	byteswap(value.dummy_data);
}

template<> void byteswap<blofeld::infinite::s_getgameeventnodedata>(blofeld::infinite::s_getgameeventnodedata& value)
{
	byteswap(value.event_name_length);
	byteswap(value.event_name);
	byteswap(value.event_flags);
}

template<> void byteswap<blofeld::infinite::s_loopingsoundnodedata>(blofeld::infinite::s_loopingsoundnodedata& value)
{
	byteswap(value.sound_tag);
	byteswap(value.marker);
}

template<> void byteswap<blofeld::infinite::s_objectfunctionnodedata>(blofeld::infinite::s_objectfunctionnodedata& value)
{
	byteswap(value.function_name);
}

template<> void byteswap<blofeld::infinite::s_oneshotsoundnodedata>(blofeld::infinite::s_oneshotsoundnodedata& value)
{
	byteswap(value.sound_tag);
	byteswap(value.marker);
}

template<> void byteswap<blofeld::infinite::s_oneshotsoundreferencenodedata>(blofeld::infinite::s_oneshotsoundreferencenodedata& value)
{
	byteswap(value.sound_tag);
}

template<> void byteswap<blofeld::infinite::s_persistentrandomfloatnodedata>(blofeld::infinite::s_persistentrandomfloatnodedata& value)
{
	byteswap(value.dummy_data);
}

template<> void byteswap<blofeld::infinite::s_probabilityeventnodedata>(blofeld::infinite::s_probabilityeventnodedata& value)
{
	byteswap(value.dummy_data);
}

template<> void byteswap<blofeld::infinite::s_piecewisefunctionnodedata>(blofeld::infinite::s_piecewisefunctionnodedata& value)
{
	byteswap(value.point_data);
	byteswap(value.functiontype);
}

template<> void byteswap<blofeld::infinite::s_randomnode>(blofeld::infinite::s_randomnode& value)
{
	byteswap(value.random_type);
}

template<> void byteswap<blofeld::infinite::s_randomplacementcollectionpositionnodedata>(blofeld::infinite::s_randomplacementcollectionpositionnodedata& value)
{
	byteswap(value.dummy_data);
}

template<> void byteswap<blofeld::infinite::s_rateofchangenodedata>(blofeld::infinite::s_rateofchangenodedata& value)
{
	byteswap(value.time_span);
}

template<> void byteswap<blofeld::infinite::s_registereventnodedata>(blofeld::infinite::s_registereventnodedata& value)
{
	byteswap(value.event_name_length);
	byteswap(value.event_name);
}

template<> void byteswap<blofeld::infinite::s_setrtpcnodedata>(blofeld::infinite::s_setrtpcnodedata& value)
{
	byteswap(value.rtpc_name);
}

template<> void byteswap<blofeld::infinite::s_smoothingnodedata>(blofeld::infinite::s_smoothingnodedata& value)
{
	byteswap(value.window_length);
}

template<> void byteswap<blofeld::infinite::s_statebrokerboolnodedata>(blofeld::infinite::s_statebrokerboolnodedata& value)
{
	byteswap(value.state_name);
}

template<> void byteswap<blofeld::infinite::s_statebrokerintnodedata>(blofeld::infinite::s_statebrokerintnodedata& value)
{
	byteswap(value.state_name);
}

template<> void byteswap<blofeld::infinite::s_springnodedata>(blofeld::infinite::s_springnodedata& value)
{
	byteswap(value.frequency);
	byteswap(value.damping);
}

template<> void byteswap<blofeld::infinite::s_thresholdgatenodedata>(blofeld::infinite::s_thresholdgatenodedata& value)
{
	byteswap(value.rising_input_threshold);
	byteswap(value.falling_input_threshold);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_timernodedata>(blofeld::infinite::s_timernodedata& value)
{
	byteswap(value.timer_flags);
}

template<> void byteswap<blofeld::infinite::s_createeffectnodedata>(blofeld::infinite::s_createeffectnodedata& value)
{
	byteswap(value.effect_tag);
	byteswap(value.marker_name);
}

template<> void byteswap<blofeld::infinite::s_createbeameffectnodedata>(blofeld::infinite::s_createbeameffectnodedata& value)
{
	byteswap(value.effect_tag);
	byteswap(value.start_marker);
	byteswap(value.end_marker);
}

template<> void byteswap<blofeld::infinite::s_stopeffectnodedata>(blofeld::infinite::s_stopeffectnodedata& value)
{
	byteswap(value.effect_tag);
	byteswap(value.marker_name);
}

template<> void byteswap<blofeld::infinite::s_setobjectfunctionnodedata>(blofeld::infinite::s_setobjectfunctionnodedata& value)
{
	byteswap(value.function_name);
}

template<> void byteswap<blofeld::infinite::s_objectgraphoutput>(blofeld::infinite::s_objectgraphoutput& value)
{
	byteswap(value.node_type);
	byteswap(value.node_index);
	byteswap(value.pin_index);
}

template<> void byteswap<blofeld::infinite::s_dwspopstatenodedata>(blofeld::infinite::s_dwspopstatenodedata& value)
{
	byteswap(value.state_name);
	byteswap(value.state_guid);
}

template<> void byteswap<blofeld::infinite::s_dwspushstatenodedata>(blofeld::infinite::s_dwspushstatenodedata& value)
{
	byteswap(value.state_name);
	byteswap(value.state_guid);
}

template<> void byteswap<blofeld::infinite::s_dwsenabletoverridenodedata>(blofeld::infinite::s_dwsenabletoverridenodedata& value)
{
	byteswap(value.dummy_data);
}

template<> void byteswap<blofeld::infinite::s_dwssettoverridenodedata>(blofeld::infinite::s_dwssettoverridenodedata& value)
{
	byteswap(value.t_override);
}

template<> void byteswap<blofeld::infinite::s_setlightsourceenergynodedata>(blofeld::infinite::s_setlightsourceenergynodedata& value)
{
	byteswap(value.light_guid);
	byteswap(value.kit_guid);
	byteswap(value.energy);
}

template<> void byteswap<blofeld::infinite::s_setlightdimmernodedata>(blofeld::infinite::s_setlightdimmernodedata& value)
{
	byteswap(value.light_guid);
	byteswap(value.kit_guid);
	byteswap(value.dimmer);
}

template<> void byteswap<blofeld::infinite::s_setgraphupdatemodedata>(blofeld::infinite::s_setgraphupdatemodedata& value)
{
	byteswap(value.graph_update_mode);
}

template<> void byteswap<blofeld::infinite::s_windspeednodedata>(blofeld::infinite::s_windspeednodedata& value)
{
	byteswap(value.dummy_data);
}

template<> void byteswap<blofeld::infinite::s_exportedobjectnodegraph>(blofeld::infinite::s_exportedobjectnodegraph& value)
{
	byteswap(value.anytag);
	byteswap(value.source_graph);
	byteswap(value.max_update_rate);
	byteswap(value.max_update_rate_cull_modifier);
	byteswap(value.min_update_rate);
	byteswap(value.lod_mode);
	byteswap(value.lod_distance);
	byteswap(value.update_mode);
	byteswap(value.priority_factor);
	byteswap(value.connections_block);
	byteswap(value.boolean_logic_nodes_block);
	byteswap(value.bool_toggle_nodes_block);
	byteswap(value.bool_to_event_nodes_block);
	byteswap(value.branch_event_nodes_block);
	byteswap(value.check_lighting_variant_nodes_block);
	byteswap(value.clamp_nodes_block);
	byteswap(value.compare_float_nodes_block);
	byteswap(value.constant_float_nodes_block);
	byteswap(value.constant_int_nodes_block);
	byteswap(value.constant_int64_nodes_block);
	byteswap(value.constant_uint64_nodes_block);
	byteswap(value.constant_string_nodes_block);
	byteswap(value.constant_vector3_nodes_block);
	byteswap(value.constant_bool_nodes_block);
	byteswap(value.debug_print_nodes_block);
	byteswap(value.envelope_nodes_block);
	byteswap(value.event_router_block);
	byteswap(value.float_snapshot_nodes_block);
	byteswap(value.float_logic_nodes_block);
	byteswap(value.float_operator_nodes_block);
	byteswap(value.get_game_float_value_nodes_block);
	byteswap(value.float_switch_nodes_block);
	byteswap(value.get_game_event_nodes_block);
	byteswap(value.looping_sound_nodes_block);
	byteswap(value.object_function_nodes_block);
	byteswap(value.one_shot_sound_nodes_block);
	byteswap(value.one_shot_sound_reference_nodes_block);
	byteswap(value.persistent_random_float_nodes_block);
	byteswap(value.probability_event_nodes_block);
	byteswap(value.piecewise_function_nodes_block);
	byteswap(value.random_nodes_block);
	byteswap(value.random_placement_position_nodes_block);
	byteswap(value.rate_of_change_nodes_block);
	byteswap(value.registerevent_nodes_block);
	byteswap(value.set_rtpc_nodes_block);
	byteswap(value.smoothing_nodes_block);
	byteswap(value.state_broker_bool_nodes_block);
	byteswap(value.state_broker_int_nodes_block);
	byteswap(value.spring_nodes_block);
	byteswap(value.threshold_gate_nodes_block);
	byteswap(value.timer_nodes_block);
	byteswap(value.create_effect_nodes_block);
	byteswap(value.create_beam_effect_node_block);
	byteswap(value.stop_effect_nodes_block);
	byteswap(value.set_object_function_nodes_block);
	byteswap(value.value_conversion_nodes_block);
	byteswap(value.object_graph_outputs_block);
	byteswap(value.dws_pop_state_nodes_block);
	byteswap(value.dws_push_state_nodes_block);
	byteswap(value.dws_enable_t_override_nodes_block);
	byteswap(value.dws_set_t_override_nodes_block);
	byteswap(value.set_light_source_energy_nodes_block);
	byteswap(value.set_light_dimmer_nodes_block);
	byteswap(value.set_graph_update_mode_nodes_block);
	byteswap(value.wind_speed_nodes_block);
}

template<> void byteswap<blofeld::infinite::s_goboscalarfunction>(blofeld::infinite::s_goboscalarfunction& value)
{
	byteswap(value.input_variable);
	byteswap(value.range_variable);
	byteswap(value.output_modifier);
	byteswap(value.output_modifier_input);
	byteswap(value.mapping);
}

template<> void byteswap<blofeld::infinite::s_goboanimationparameter>(blofeld::infinite::s_goboanimationparameter& value)
{
	byteswap(value.type);
	byteswap(value.origin_x);
	byteswap(value.origin_y);
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_gobodefinition>(blofeld::infinite::s_gobodefinition& value)
{
	byteswap(value.bitmap_address_mode);
	byteswap(value.displacement_bitmap_address_mode);
	byteswap(value.bitmap);
	byteswap(value.animation_parameters_block);
	byteswap(value.displacement_bitmap);
	byteswap(value.displacement_animation_parameters_block);
}

template<> void byteswap<blofeld::infinite::s_gobosetting>(blofeld::infinite::s_gobosetting& value)
{
	byteswap(value.anytag);
	byteswap(value.gobos_block);
	byteswap(value.resolution);
}

template<> void byteswap<blofeld::infinite::s_lightingsettingsglobal>(blofeld::infinite::s_lightingsettingsglobal& value)
{
	byteswap(value.global_flags);
	byteswap(value.mode);
	byteswap(value.lightmap_quality);
	byteswap(value.indirect_quality);
}

template<> void byteswap<blofeld::infinite::s_lightingsettingsao>(blofeld::infinite::s_lightingsettingsao& value)
{
	byteswap(value.radius);
	byteswap(value.falloff_power);
	byteswap(value.multiplier);
}

template<> void byteswap<blofeld::infinite::s_lightingsettingslocaloverrides>(blofeld::infinite::s_lightingsettingslocaloverrides& value)
{
	byteswap(value.high_quality_average_jitter_samples);
	byteswap(value.per_vertex_supersample_count);
	byteswap(value.indirect_quality_offset);
}

template<> void byteswap<blofeld::infinite::s_adjacentbsplighting>(blofeld::infinite::s_adjacentbsplighting& value)
{
	byteswap(value.name);
	byteswap(value.lighting_variant_name);
}

template<> void byteswap<blofeld::infinite::s_lightingsettingslocal>(blofeld::infinite::s_lightingsettingslocal& value)
{
	byteswap(value.size_class);
	byteswap(value.static_size_class);
	byteswap(value.supersample_factor_class);
	byteswap(value.optix_job_size_class);
	byteswap(value.adjacent_bsp_lod_clamp_level);
	byteswap(value.lightmap_compression);
	byteswap(value.local_flags);
	byteswap(value.skydome_amplification_factor);
	byteswap(value.indirect_amplification_factor);
	byteswap(value.ao_settings);
	byteswap(value.local_lightmapper_override_settings);
	byteswap(value.required_aiprobe_density);
	byteswap(value.airprobe_compression_threshold);
	byteswap(value.sky_lighting);
	byteswap(value.sky_lighting_cubemap);
	byteswap(value.forge_lightmap_size_class);
	byteswap(value.adjacent_bsps_block);
}

template<> void byteswap<blofeld::infinite::s_floatingshadowsettings>(blofeld::infinite::s_floatingshadowsettings& value)
{
	byteswap(value.number_of_cascades);
	byteswap(value.quality);
	byteswap(value.first_person_floating_shadow_mode);
	byteswap(value.cascade_overlap);
	byteswap(value.min_shadow_caster_pixel_radius);
	byteswap(value.rotating_sun_axis);
	byteswap(value.pcss_light_size);
	byteswap(value.pcss_minimum_filter_width);
	byteswap(value.pcss_maximum_filter_width);
	byteswap(value.rotating_sun_device_machine_driver_name);
	byteswap(value.dynamic_cascades);
	byteswap(value.number_of_parallax_sampling_steps);
	byteswap(value.sun_direction_parallax_sampling_weight);
	byteswap(value.first_person_additional_depth_bias);
}

template<> void byteswap<blofeld::infinite::s_lightingsettingsruntime>(blofeld::infinite::s_lightingsettingsruntime& value)
{
	byteswap(value.visual_environment);
	byteswap(value.custom_fallback_airprobe);
	byteswap(value.raw_sh_data);
	byteswap(value.custom_fallback_airprobe_flags);
	byteswap(value.cubemap_texture);
	byteswap(value.cubemap_flags);
	byteswap(value.cubemap_sample_position);
	byteswap(value.cubemap_intensity);
	byteswap(value.self_illum_scale_down);
	byteswap(value.max_shadow_count_scale);
	byteswap(value.floating_shadow_settings);
}

template<> void byteswap<blofeld::infinite::s_lightingsettingsadditionalbsp>(blofeld::infinite::s_lightingsettingsadditionalbsp& value)
{
	byteswap(value.bsp_reference);
}

template<> void byteswap<blofeld::infinite::s_indirectirradiancetodsettings>(blofeld::infinite::s_indirectirradiancetodsettings& value)
{
	byteswap(value.dws_event_list_to_apply_for_baking);
	byteswap(value.dws_state_to_apply_for_baking);
	byteswap(value.lights_on_during_bake);
	byteswap(value.emissive_material_on_during_bake);
}

template<> void byteswap<blofeld::infinite::s_indirectirradianceprobesettings>(blofeld::infinite::s_indirectirradianceprobesettings& value)
{
	byteswap(value.auto_load_neighboring_bsps);
	byteswap(value.additional_bsps_to_load_for_baking_block);
	byteswap(value.tod_settings_block);
	byteswap(value.number_of_bounces);
	byteswap(value.sky_amplification_factor);
	byteswap(value.bounce_light_amplification_factor);
	byteswap(value.probe_xy_spacing_factor);
	byteswap(value.probe_z_spacing_factor);
	byteswap(value.deferred_reflections_during_bake);
	byteswap(value.lod_scale_during_bake);
	byteswap(value.maximum_texture_size_during_bake);
}

template<> void byteswap<blofeld::infinite::s_lightingsettings>(blofeld::infinite::s_lightingsettings& value)
{
	byteswap(value.anytag);
	byteswap(value.version);
	byteswap(value.global_lightmapper_settings);
	byteswap(value.local_lightmapper_settings);
	byteswap(value.runtime_settings);
	byteswap(value.indirect_irradiance_probe_settings);
}

template<> void byteswap<blofeld::infinite::s_runtimeanimentry>(blofeld::infinite::s_runtimeanimentry& value)
{
	byteswap(value.m_generatedmodelanimation);
	byteswap(value.m_animationid);
	byteswap(value.m_weight);
	byteswap(value.m_animsource);
}

template<> void byteswap<blofeld::infinite::s_runtimeanimentrylist>(blofeld::infinite::s_runtimeanimentrylist& value)
{
	byteswap(value.m_token);
	byteswap(value.m_animations_block);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_runtimeanimsettag>(blofeld::infinite::s_runtimeanimsettag& value)
{
	byteswap(value.anytag);
	byteswap(value.m_channel);
	byteswap(value.m_parent);
	byteswap(value.m_animentrylists_block);
}

template<> void byteswap<blofeld::infinite::s_streamingzonesetoboslete>(blofeld::infinite::s_streamingzonesetoboslete& value)
{
	byteswap(value.anytag);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentanimgraphcontenttag>(blofeld::infinite::s_nodegraphcontentanimgraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentanimstatecontenttag>(blofeld::infinite::s_nodegraphcontentanimstatecontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentblackboardcontenttag>(blofeld::infinite::s_nodegraphcontentblackboardcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_s_biped_camera_height>(blofeld::infinite::s_s_biped_camera_height& value)
{
	byteswap(value.weapon_class);
	byteswap(value.standing_height);
	byteswap(value.crouching_height);
	byteswap(value.sliding_camera_height_min);
}

template<> void byteswap<blofeld::infinite::s_s_biped_movement_gate>(blofeld::infinite::s_s_biped_movement_gate& value)
{
	byteswap(value.period);
	byteswap(value.z_offset);
	byteswap(value.constant_z_offset);
	byteswap(value.y_offset);
	byteswap(value.speed_threshold);
	byteswap(value.default_function);
}

template<> void byteswap<blofeld::infinite::s_s_character_physics_ground_definition>(blofeld::infinite::s_s_character_physics_ground_definition& value)
{
	byteswap(value.flags);
	byteswap(value.maximum_slope_angle);
	byteswap(value.downhill_falloff_angle);
	byteswap(value.downhill_cutoff_angle);
	byteswap(value.uphill_falloff_angle);
	byteswap(value.uphill_cutoff_angle);
	byteswap(value.downhill_velocity_scale);
	byteswap(value.uphill_velocity_scale);
	byteswap(value.climb_inflection_angle);
	byteswap(value.airborne_reaction_time);
	byteswap(value.airborne_reaction_time_slide);
	byteswap(value.airborne_reaction_time_slide_max_height);
	byteswap(value.airborne_reaction_time_sprint);
	byteswap(value.airborne_reaction_time_evade);
	byteswap(value.scale_airborne_reaction_time);
	byteswap(value.prevent_jump_from_slide_time);
	byteswap(value.scale_ground_adhesion_velocity);
	byteswap(value.gravity_scale);
	byteswap(value.airborne_acceleration_scale);
	byteswap(value.successive_slide_delay);
	byteswap(value.minimum_slide_trigger_sprint_fraction);
	byteswap(value.slide_distance_function$2);
	byteswap(value.forward_speed);
	byteswap(value.maximum_direction_change_during_slide);
	byteswap(value.maximum_turn_during_slide);
	byteswap(value.slide_speed_function$2);
	byteswap(value.low_ceiling_control);
}

template<> void byteswap<blofeld::infinite::s_s_character_physics_flying_definition>(blofeld::infinite::s_s_character_physics_flying_definition& value)
{
	byteswap(value.bank_angle);
	byteswap(value.bank_apply_time);
	byteswap(value.bank_decay_time);
	byteswap(value.pitch_ratio);
	byteswap(value.max_velocity);
	byteswap(value.max_sidestep_velocity);
	byteswap(value.acceleration);
	byteswap(value.deceleration);
	byteswap(value.angular_velocity_maximum);
	byteswap(value.angular_acceleration_maximum);
	byteswap(value.crouch_velocity_modifier);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_character_physics_definition>(blofeld::infinite::s_s_character_physics_definition& value)
{
	byteswap(value.flags);
	byteswap(value.height_standing);
	byteswap(value.height_crouching);
	byteswap(value.radius);
	byteswap(value.mass);
	byteswap(value.maximum_rigid_body_size_override);
	byteswap(value.living_material_name);
	byteswap(value.dead_material_name);
	byteswap(value.runtime_global_material_type);
	byteswap(value.runtime_dead_global_material_type);
	byteswap(value.dead_sphere_shapes_block);
	byteswap(value.transformed_dead_sphere_shapes_block);
	byteswap(value.pill_shapes_block);
	byteswap(value.sphere_shapes_block);
	byteswap(value.compund_sphere_shapes_block);
	byteswap(value.ground_physics);
	byteswap(value.flying_physics);
	byteswap(value.clambering_definition);
}

template<> void byteswap<blofeld::infinite::s_biped_contact_point>(blofeld::infinite::s_biped_contact_point& value)
{
	byteswap(value.marker_name);
}

template<> void byteswap<blofeld::infinite::s_s_biped_leaping_data>(blofeld::infinite::s_s_biped_leaping_data& value)
{
	byteswap(value.leap_flags);
	byteswap(value.dampening_scale);
	byteswap(value.roll_delay);
	byteswap(value.cannonball_off_axis_scale);
	byteswap(value.cannonball_off_track_scale);
	byteswap(value.cannonball_roll_bounds);
	byteswap(value.anticipation_ratio_bounds);
	byteswap(value.reaction_force_bounds);
	byteswap(value.lobbing_desire);
}

template<> void byteswap<blofeld::infinite::s_s_biped_vaulting_data>(blofeld::infinite::s_s_biped_vaulting_data& value)
{
	byteswap(value.vault_height_bounds);
	byteswap(value.vault_max_horizontal_distance);
	byteswap(value.vault_arc_amount);
	byteswap(value.vault_min_object_size);
	byteswap(value.search_width);
}

template<> void byteswap<blofeld::infinite::s_s_biped_ground_fitting_data>(blofeld::infinite::s_s_biped_ground_fitting_data& value)
{
	byteswap(value.ground_fitting_flags);
	byteswap(value.ground_normal_dampening);
	byteswap(value.root_offset_max_scale_idle);
	byteswap(value.root_offset_max_scale_moving);
	byteswap(value.root_offset_dampening);
	byteswap(value.following_cam_scale);
	byteswap(value.root_leaning_scale);
	byteswap(value.stance_width_scale);
	byteswap(value.foot_roll_max);
	byteswap(value.foot_pitch_max);
	byteswap(value.foot_normal_dampening);
	byteswap(value.foot_fitting_test_distance);
	byteswap(value.foot_displacement_upward_dampening);
	byteswap(value.foot_displacement_downward_dampening);
	byteswap(value.foot_pull_threshold_distance_idle);
	byteswap(value.foot_pull_threshold_distance_moving);
	byteswap(value.foot_turn_minimum_radius);
	byteswap(value.foot_turn_maximum_radius);
	byteswap(value.foot_turn_threshold_radius);
	byteswap(value.foot_turn_rate_dampening);
	byteswap(value.foot_turn_weight_dampening);
	byteswap(value.foot_turn_blend_on_time);
	byteswap(value.foot_turn_blend_off_time);
	byteswap(value.pivot_on_foot_scale);
	byteswap(value.pivot_min_foot_delta);
	byteswap(value.pivot_stride_length_scale);
	byteswap(value.pivot_throttle_scale);
	byteswap(value.pivot_offset_dampening);
	byteswap(value.pivot_force_turn_rate);
	byteswap(value.ideal_pelvis_over_high_foot_scale);
	byteswap(value.ideal_pelvis_over_low_foot_scale);
	byteswap(value.push_over_mag);
	byteswap(value.push_back_mag);
	byteswap(value.ledgeiksuccessrange);
	byteswap(value.ledge_warning_time);
	byteswap(value.footlock_scale);
	byteswap(value.footlock_min_throttle);
	byteswap(value.footlock_max_throttle);
}

template<> void byteswap<blofeld::infinite::s_bipedaimingjointfixup>(blofeld::infinite::s_bipedaimingjointfixup& value)
{
	byteswap(value.rotation_node);
	byteswap(value.marker_name);
	byteswap(value.yaw_bounds);
	byteswap(value.pitch_bounds);
	byteswap(value.max_yaw_velocity);
	byteswap(value.max_pitch_velocity);
}

template<> void byteswap<blofeld::infinite::s_bipedpostureadjustmentbounds>(blofeld::infinite::s_bipedpostureadjustmentbounds& value)
{
	byteswap(value.x_bounds);
	byteswap(value.y_bounds);
	byteswap(value.z_bounds);
}

template<> void byteswap<blofeld::infinite::s_bipedfbikposturesettings>(blofeld::infinite::s_bipedfbikposturesettings& value)
{
	byteswap(value.spine);
	byteswap(value.hands);
	byteswap(value.head);
}

template<> void byteswap<blofeld::infinite::s_bipedfbikaimsettings>(blofeld::infinite::s_bipedfbikaimsettings& value)
{
	byteswap(value.aim_fixup_cos);
	byteswap(value.aim_fixup_power);
}

template<> void byteswap<blofeld::infinite::s_bipedfbiklooksettings>(blofeld::infinite::s_bipedfbiklooksettings& value)
{
	byteswap(value.look_yaw_scale);
	byteswap(value.look_non_yaw_scale);
	byteswap(value.look_bend_scale);
	byteswap(value.look_spine_scale);
	byteswap(value.look_cone_angle);
}

template<> void byteswap<blofeld::infinite::s_bipedfbikjumpanticsettings>(blofeld::infinite::s_bipedfbikjumpanticsettings& value)
{
	byteswap(value.flags);
	byteswap(value.max_falloff_elevation);
	byteswap(value.overlay_buildup_function);
	byteswap(value.overlay_falloff_function);
	byteswap(value.hip_ik_buildup_function);
	byteswap(value.hip_ik_falloff_function);
	byteswap(value.leg_ik_falloff_function);
}

template<> void byteswap<blofeld::infinite::s_bipedfbiksettings>(blofeld::infinite::s_bipedfbiksettings& value)
{
	byteswap(value.flags);
	byteswap(value.posture);
	byteswap(value.aim);
	byteswap(value.look);
	byteswap(value.jumpantic);
}

template<> void byteswap<blofeld::infinite::s_i343bipedpropertiesdefinition>(blofeld::infinite::s_i343bipedpropertiesdefinition& value)
{
	byteswap(value.locomotion_properties_block);
	byteswap(value.walking_speed);
	byteswap(value.ai_sprinting_speed);
	byteswap(value.running_forward_speed);
	byteswap(value.running_backward_speed);
	byteswap(value.running_sideways_speed);
	byteswap(value.crouching_forward_speed);
	byteswap(value.crouching_backward_speed);
	byteswap(value.crouching_sideways_speed);
	byteswap(value.maximum_run_acceleration);
	byteswap(value.maximum_crouch_acceleration);
	byteswap(value.maximum_airborne_acceleration);
	byteswap(value.movement_speed_scalar);
	byteswap(value.movement_gravity_scalar);
	byteswap(value.movement_jump_scalar);
	byteswap(value.movement_clamber_speed_scalar);
	byteswap(value.speed_forward_scalar);
	byteswap(value.speed_strafe_scalar);
	byteswap(value.acceleration_forward_scalar);
	byteswap(value.acceleration_opposing_forward_scalar);
	byteswap(value.acceleration_strafe_scalar);
	byteswap(value.acceleration_opposing_strafe_scalar);
	byteswap(value.acceleration_airborne_scalar);
	byteswap(value.slide_max_distance_scalar);
	byteswap(value.slide_speed_scalar);
}

template<> void byteswap<blofeld::infinite::s_bipedhoverproperties>(blofeld::infinite::s_bipedhoverproperties& value)
{
	byteswap(value.resting_hover_height);
	byteswap(value.default_height_tolerance);
	byteswap(value.spring_interpolation_time);
	byteswap(value.hard_land_start_threshold);
	byteswap(value.hard_land_settle_down_threshold);
	byteswap(value.hard_land_slow_down_height);
	byteswap(value.hard_land_bottom_height);
	byteswap(value.soft_land_start_threshold);
	byteswap(value.soft_land_slow_down_threshold);
	byteswap(value.soft_land_settle_height);
	byteswap(value.soft_land_bottom_height);
	byteswap(value.land_interpolation_function);
	byteswap(value.settle_land_interpolation_function);
	byteswap(value.reset_to_resting_height_interpolation_function);
}

template<> void byteswap<blofeld::infinite::s_bipeddefinition>(blofeld::infinite::s_bipeddefinition& value)
{
	byteswap(value.unit);
	byteswap(value.parent);
	byteswap(value.moving_turning_speed);
	byteswap(value.flags);
	byteswap(value.stationary_turning_threshold);
	byteswap(value.stationary_turn_fixup_speed);
	byteswap(value.death_program_selector);
	byteswap(value.ragdoll_region_name);
	byteswap(value.assassination_chud_text);
	byteswap(value.jump_velocity);
	byteswap(value.tricks_block);
	byteswap(value.maximum_soft_landing_time);
	byteswap(value.maximum_hard_landing_time);
	byteswap(value.minimum_soft_landing_velocity);
	byteswap(value.minimum_hard_landing_velocity);
	byteswap(value.maximum_hard_landing_velocity);
	byteswap(value.stun_duration);
	byteswap(value.standing_camera_height);
	byteswap(value.running_camera_height);
	byteswap(value.crouching_camera_height);
	byteswap(value.crouch_walking_camera_height);
	byteswap(value.crouch_transition_time);
	byteswap(value.bunker_forward_offset);
	byteswap(value.bunker_side_offset);
	byteswap(value.slide_camera_height_minimum);
	byteswap(value.slide_camera_height_function$2);
	byteswap(value.slide_rumble_low_frequency);
	byteswap(value.slide_rumble_high_frequency);
	byteswap(value.slide_rumble_left_trigger);
	byteswap(value.slide_rumble_right_trigger);
	byteswap(value.slide_firing_delay);
	byteswap(value.camera_height_velocity_function);
	byteswap(value.camera_heights_block);
	byteswap(value.camera_interpolation_start);
	byteswap(value.camera_interpolation_end);
	byteswap(value.camera_offset);
	byteswap(value.root_offset_camera_scale);
	byteswap(value.root_offset_camera_dampening);
	byteswap(value.autoaim_width);
	byteswap(value.runtime_cosine_stationary_turning_threshold);
	byteswap(value.runtime_crouch_transition_velocity);
	byteswap(value.runtime_camera_height_velocity);
	byteswap(value.area_damage_effect);
	byteswap(value.health_station_recharge_effect);
	byteswap(value.movement_gates_block);
	byteswap(value.movement_gates_crouching_block);
	byteswap(value.jump_aim_offset_distance);
	byteswap(value.jump_aim_offset_duration);
	byteswap(value.land_aim_offset_distance);
	byteswap(value.land_aim_offset_duration);
	byteswap(value.physics);
	byteswap(value.contact_points_block);
	byteswap(value.reanimation_character);
	byteswap(value.death_spawn_character);
	byteswap(value.death_spawn_count);
	byteswap(value.leaping_data);
	byteswap(value.vaulting_data);
	byteswap(value.ground_fitting_data);
	byteswap(value.movement_speed_scale);
	byteswap(value.player_biped_sound_bank);
	byteswap(value.crouch_down_sound);
	byteswap(value.crouch_up_sound);
	byteswap(value.shield_impact_override);
	byteswap(value.non_shield_impact_override);
	byteswap(value.sound_radius_multiplier);
	byteswap(value.sound_rtpcs_block);
	byteswap(value.sound_sweeteners_block);
	byteswap(value.aiming_fixup_block);
	byteswap(value.self_illumination);
	byteswap(value.spartan_abilities);
	byteswap(value.fbik_data);
	byteswap(value.head_soft_ping_magnitude);
	byteswap(value.chest_soft_ping_magnitude);
	byteswap(value.gut_soft_ping_magnitude);
	byteswap(value.soft_ping_recoil_magnitude);
	byteswap(value.head_soft_ping_primary_response_time);
	byteswap(value.head_soft_ping_secondary_response_time);
	byteswap(value.chest_soft_ping_primary_response_time);
	byteswap(value.chest_soft_ping_secondary_response_time);
	byteswap(value.gut_soft_ping_primary_response_time);
	byteswap(value.gut_soft_ping_secondary_response_time);
	byteswap(value.arms_soft_ping_primary_response_time);
	byteswap(value.arms_soft_ping_secondary_response_time);
	byteswap(value.head_soft_ping_random_twist_strength);
	byteswap(value.chest_soft_ping_random_twist_strength);
	byteswap(value.gut_soft_ping_random_twist_strength);
	byteswap(value.maximum_soft_ping_damage_scalar);
	byteswap(value.override_object_function_for_the_sprint_speed_fraction);
	byteswap(value.properties$2);
	byteswap(value.biped_modifier_set);
	byteswap(value.rez_out_effect);
	byteswap(value.rez_out_effect_buffer);
	byteswap(value.hover_properties_block);
}

template<> void byteswap<blofeld::infinite::s_crate_definition>(blofeld::infinite::s_crate_definition& value)
{
	byteswap(value.object);
	byteswap(value.flags);
	byteswap(value.campaign_metagame_bucket_block);
	byteswap(value.self_destruction_timer);
	byteswap(value.projectile_bounce_effect);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentblendspace1dcontenttag>(blofeld::infinite::s_nodegraphcontentblendspace1dcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentblendspaceradialcontenttag>(blofeld::infinite::s_nodegraphcontentblendspaceradialcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentblendspace2dcontenttag>(blofeld::infinite::s_nodegraphcontentblendspace2dcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_compositexmltag>(blofeld::infinite::s_compositexmltag& value)
{
	byteswap(value.xmltag);
}

template<> void byteswap<blofeld::infinite::s_creature_definition>(blofeld::infinite::s_creature_definition& value)
{
	byteswap(value.object);
	byteswap(value.flags);
	byteswap(value.default_team);
	byteswap(value.turning_velocity_maximum_ground_creatures_only);
	byteswap(value.turning_acceleration_maximum_ground_creatures_only);
	byteswap(value.casual_turning_modifier_ground_creatures_only);
	byteswap(value.autoaim_width);
	byteswap(value.physics);
	byteswap(value.minimal_obstacle_surface_pitch);
	byteswap(value.yaw_acceleration);
	byteswap(value.yaw_max_velocity);
	byteswap(value.pitch_acceleration);
	byteswap(value.pitch_max_velocity);
	byteswap(value.roll_acceleration);
	byteswap(value.roll_max_velocity);
	byteswap(value.maximum_pitch_angle);
	byteswap(value.maximum_roll_angle);
	byteswap(value.max_forward_velocity);
	byteswap(value.max_non_directional_vertical_velocity);
	byteswap(value.forward_acceleration);
	byteswap(value.non_directional_vertical_acceleration);
	byteswap(value.impact_damage);
	byteswap(value.impact_shield_damage);
	byteswap(value.campaign_metagame_bucket_block);
	byteswap(value.sound_rtpcs_block);
	byteswap(value.destroy_after_death_time);
	byteswap(value.trail_effect);
	byteswap(value.death_effect);
	byteswap(value.shooting_effect_marker_name);
	byteswap(value.medium_lod_distance);
	byteswap(value.low_lod_distance);
}

template<> void byteswap<blofeld::infinite::s_i343devicesdevicecomponentlistdefinition>(blofeld::infinite::s_i343devicesdevicecomponentlistdefinition& value)
{
	byteswap(value.object_dispenser_component);
}

template<> void byteswap<blofeld::infinite::s_device_definition>(blofeld::infinite::s_device_definition& value)
{
	byteswap(value.object);
	byteswap(value.device_flags);
	byteswap(value.power_transition_time);
	byteswap(value.power_acceleration_time);
	byteswap(value.position_transition_time);
	byteswap(value.position_acceleration_time);
	byteswap(value.depowered_position_transition_time);
	byteswap(value.depowered_position_acceleration_time);
	byteswap(value.lightmap_flags);
	byteswap(value.open_up);
	byteswap(value.close_down);
	byteswap(value.opened);
	byteswap(value.closed);
	byteswap(value.depowered);
	byteswap(value.repowered);
	byteswap(value.delay_time);
	byteswap(value.delay_effect);
	byteswap(value.automatic_activation_radius);
	byteswap(value.marker_name);
	byteswap(value.marker_radius_min);
	byteswap(value.marker_radius);
	byteswap(value.marker_cone_angle);
	byteswap(value.marker_facing_angle);
	byteswap(value.min_targetable_position_threshold);
	byteswap(value.max_targetable_position_threshold);
	byteswap(value.initial_animation_position);
	byteswap(value.device_components);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentdecoratorshadergraphcontenttag>(blofeld::infinite::s_nodegraphcontentdecoratorshadergraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_dispenserdefinition>(blofeld::infinite::s_dispenserdefinition& value)
{
	byteswap(value.device);
	byteswap(value.flags);
	byteswap(value.triggers_when);
	byteswap(value.use_cooldown);
	byteswap(value.abandonment_time);
	byteswap(value.max_quota);
	byteswap(value.interaction_hold_time);
	byteswap(value.interaction_screen);
	byteswap(value.dispensed_object);
	byteswap(value.desired_variant_name);
	byteswap(value.action_string);
	byteswap(value.same_team_denial_string);
	byteswap(value.disabled_denial_string);
	byteswap(value.use_cooldown_denial_string);
	byteswap(value.max_quota_denial_string);
	byteswap(value.interaction_in_progress_denial_string);
	byteswap(value.spawn_marker_name);
	byteswap(value.effect_marker_name);
	byteswap(value.dispense_effect);
	byteswap(value.dispenser_attach_marker);
	byteswap(value.dispensed_object_attach_marker);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentebtcontenttag>(blofeld::infinite::s_nodegraphcontentebtcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_s_effect_scenery_definition>(blofeld::infinite::s_s_effect_scenery_definition& value)
{
	byteswap(value.object);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentforgemenugraphcontenttag>(blofeld::infinite::s_nodegraphcontentforgemenugraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentforgenodegraphcontenttag>(blofeld::infinite::s_nodegraphcontentforgenodegraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_giant_buckle_parameters>(blofeld::infinite::s_giant_buckle_parameters& value)
{
	byteswap(value.lower_time);
	byteswap(value.lower_curve);
	byteswap(value.raise_time);
	byteswap(value.raise_curve);
	byteswap(value.pause_time_easy);
	byteswap(value.pause_time_normal);
	byteswap(value.pause_time_heroic);
	byteswap(value.pause_time_legendary);
	byteswap(value.buckle_gravity_scale);
	byteswap(value.buckling_marker);
	byteswap(value.forward_rear_scan);
	byteswap(value.left_right_scan);
	byteswap(value.forward_rear_steps);
	byteswap(value.left_right_steps);
	byteswap(value.pitch_bounds);
	byteswap(value.roll_bounds);
	byteswap(value.buckle_animation);
	byteswap(value.descent_overlay);
	byteswap(value.paused_overlay);
	byteswap(value.descent_overlay_scale);
	byteswap(value.paused_overlay_scale);
}

template<> void byteswap<blofeld::infinite::s_giant_definition>(blofeld::infinite::s_giant_definition& value)
{
	byteswap(value.unit);
	byteswap(value.flags);
	byteswap(value.accel_time);
	byteswap(value.decel_time);
	byteswap(value.minimum_speed_scale);
	byteswap(value.speed_scale);
	byteswap(value.elevation_change_rate);
	byteswap(value.proxy_body_offset);
	byteswap(value.proxy_body_deadzone);
	byteswap(value.max_vertical_reach);
	byteswap(value.foot_target_radius);
	byteswap(value.buckle_settings_block);
	byteswap(value.ankle_ik_scale$2);
}

template<> void byteswap<blofeld::infinite::s_i343itemsvarianthudmessages>(blofeld::infinite::s_i343itemsvarianthudmessages& value)
{
	byteswap(value.variant_name);
	byteswap(value.pickup);
	byteswap(value.sub_pickup);
	byteswap(value.swap);
	byteswap(value.sub_swap);
	byteswap(value.pickup_dual);
	byteswap(value.swap_dual);
	byteswap(value.picked_up);
	byteswap(value.switch_to);
	byteswap(value.switch_to_from_ai);
	byteswap(value.notify_empty);
	byteswap(value.low_ammo);
	byteswap(value.notify_overheated);
	byteswap(value.heat_warning);
}

template<> void byteswap<blofeld::infinite::s_predictedbitmapsblock>(blofeld::infinite::s_predictedbitmapsblock& value)
{
	byteswap(value.bitmap);
}

template<> void byteswap<blofeld::infinite::s_itemdefinition>(blofeld::infinite::s_itemdefinition& value)
{
	byteswap(value.object);
	byteswap(value.item_flags);
	byteswap(value.old_message_index);
	byteswap(value.sort_order);
	byteswap(value.old_multiplayer_on_ground_scale);
	byteswap(value.old_campaign_on_ground_scale);
	byteswap(value.pickup);
	byteswap(value.sub_pickup);
	byteswap(value.swap);
	byteswap(value.sub_swap);
	byteswap(value.pickup_dual);
	byteswap(value.swap_dual);
	byteswap(value.picked_up);
	byteswap(value.switch_to);
	byteswap(value.switch_to_from_ai);
	byteswap(value.notify_empty);
	byteswap(value.low_ammo);
	byteswap(value.notify_overheated);
	byteswap(value.heat_warning);
	byteswap(value.pickup_message);
	byteswap(value.sub_pickup_message);
	byteswap(value.swap_message);
	byteswap(value.sub_swap_message);
	byteswap(value.pickup_message_dual);
	byteswap(value.swap_message_dual);
	byteswap(value.picked_up_msg);
	byteswap(value.switch_to_msg);
	byteswap(value.switch_to_from_ai_msg);
	byteswap(value.notify_empty_msg);
	byteswap(value.low_ammo_msg);
	byteswap(value.notify_overheated_message);
	byteswap(value.variant_hud_message_overrides_block);
	byteswap(value.predicted_bitmaps_block);
	byteswap(value.item_detonation_damage_effect);
	byteswap(value.detonation_delay);
	byteswap(value.detonating_effect);
	byteswap(value.detonation_effect);
	byteswap(value.ground_scale);
	byteswap(value.small_unit_armed);
	byteswap(value.small_unit_stowed);
	byteswap(value.medium_unit_armed);
	byteswap(value.medium_unit_stowed);
	byteswap(value.large_unit_armed);
	byteswap(value.large_unit_stowed);
	byteswap(value.huge_unit_armed);
	byteswap(value.huge_unit_stowed);
	byteswap(value.grounded_friction_settings);
	byteswap(value.tossed_override);
	byteswap(value.toss_angle);
	byteswap(value.toss_angle_max_elevation);
	byteswap(value.toss_angle_min_elevation);
	byteswap(value.toss_velocity);
	byteswap(value.toss_rotational_velocity_min);
	byteswap(value.toss_rotational_velocity_max);
	byteswap(value.item_throw_offset);
	byteswap(value.item_throw_rotation_offset);
}

template<> void byteswap<blofeld::infinite::s_kitplacementlabel>(blofeld::infinite::s_kitplacementlabel& value)
{
	byteswap(value.value);
}

template<> void byteswap<blofeld::infinite::s_kitplacement>(blofeld::infinite::s_kitplacement& value)
{
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.position);
	byteswap(value.orientation);
	byteswap(value.scale);
	byteswap(value.kit);
	byteswap(value.editormetadata_block);
	byteswap(value.flags);
	byteswap(value.string_properties_block);
}

template<> void byteswap<blofeld::infinite::s_kitcollectionplacement>(blofeld::infinite::s_kitcollectionplacement& value)
{
	byteswap(value.name);
	byteswap(value.guid);
	byteswap(value.position);
	byteswap(value.orientation);
	byteswap(value.scale);
	byteswap(value.kit);
	byteswap(value.editormetadata_block);
	byteswap(value.flags);
	byteswap(value.string_properties_block);
	byteswap(value.kit_collection);
}

template<> void byteswap<blofeld::infinite::s_kit>(blofeld::infinite::s_kit& value)
{
	byteswap(value.levelobjects);
	byteswap(value.parent);
	byteswap(value.script_tag);
	byteswap(value.scriptable_properties);
	byteswap(value.new_kit_placements_block);
	byteswap(value.kit_collection_placements_block);
	byteswap(value.owner_tag);
	byteswap(value.placement_index);
	byteswap(value.placement_type);
	byteswap(value.is_nested);
	byteswap(value.kit_flags);
}

template<> void byteswap<blofeld::infinite::s_layermetadata>(blofeld::infinite::s_layermetadata& value)
{
	byteswap(value.geocenter);
}

template<> void byteswap<blofeld::infinite::s_layer>(blofeld::infinite::s_layer& value)
{
	byteswap(value.levelobjects);
	byteswap(value.child_scenarios_block);
	byteswap(value.default_bsp);
	byteswap(value.default_lighting_variant);
	byteswap(value.flags);
	byteswap(value.new_kit_placements_block);
	byteswap(value.kit_collection_placements_block);
	byteswap(value.layer_metadata_block);
	byteswap(value.layer_flags);
}

template<> void byteswap<blofeld::infinite::s_defaultplayerstartindex>(blofeld::infinite::s_defaultplayerstartindex& value)
{
	byteswap(value.index);
}

template<> void byteswap<blofeld::infinite::s_multiplayerscenariointrodefinition>(blofeld::infinite::s_multiplayerscenariointrodefinition& value)
{
	byteswap(value.name);
	byteswap(value.intro_compositions_block);
}

template<> void byteswap<blofeld::infinite::s_bsplightingvolumesreference>(blofeld::infinite::s_bsplightingvolumesreference& value)
{
	byteswap(value.bsp_lighting_volumes);
}

template<> void byteswap<blofeld::infinite::s_lightingobjectsindex>(blofeld::infinite::s_lightingobjectsindex& value)
{
	byteswap(value.index);
}

template<> void byteswap<blofeld::infinite::s_lightingvariant>(blofeld::infinite::s_lightingvariant& value)
{
	byteswap(value.variant_name);
	byteswap(value.structure_lighting_info);
	byteswap(value.structure_lightmap);
	byteswap(value.lighting_settings);
	byteswap(value.bsp_lighting_volume_references_block);
	byteswap(value.light_indices_block);
	byteswap(value.priority_volume_indices_block);
	byteswap(value.density_volume_indices_block);
	byteswap(value.region_volume_indices_block);
	byteswap(value.cubemap_volume_indices_block);
	byteswap(value.visual_environment_volume_indices_block);
	byteswap(value.soundscape_name);
	byteswap(value.sky_reference);
	byteswap(value.forge_lightmap_size);
}

template<> void byteswap<blofeld::infinite::s_scenario_structure_bsp_reference>(blofeld::infinite::s_scenario_structure_bsp_reference& value)
{
	byteswap(value.structure_bsp);
	byteswap(value.structure_metadata);
	byteswap(value.load_variant_name);
	byteswap(value.flags);
	byteswap(value.aabbboundsmin);
	byteswap(value.aabbboundsmax);
	byteswap(value.custom_gravity_scale);
	byteswap(value.structure_lighting_info_variants_block);
	byteswap(value.bsp_volume_indices_block);
	byteswap(value.auto_generated_hlods_settings_override);
	byteswap(value.layers_block);
	byteswap(value.hexgridcollisionref);
	byteswap(value.hexgridmaterialpaletteref);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_structure_design_reference>(blofeld::infinite::s_s_scenario_structure_design_reference& value)
{
	byteswap(value.structure_design);
}

template<> void byteswap<blofeld::infinite::s_bspflagstoragearray>(blofeld::infinite::s_bspflagstoragearray& value)
{
	byteswap(value.flag_data);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_sky_reference>(blofeld::infinite::s_s_scenario_sky_reference& value)
{
	byteswap(value.sky);
	byteswap(value.name);
	byteswap(value.sky_name);
	byteswap(value.active_on_bsps);
}

template<> void byteswap<blofeld::infinite::s_bspclusterreference>(blofeld::infinite::s_bspclusterreference& value)
{
	byteswap(value.bsp_index);
	byteswap(value.cluster_index);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_zone_set_cluster_seam_cluster_mappings>(blofeld::infinite::s_s_scenario_zone_set_cluster_seam_cluster_mappings& value)
{
	byteswap(value.root_clusters_block);
	byteswap(value.attached_clusters_block);
	byteswap(value.connected_clusters_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_zone_set_structure_bsp_pvs>(blofeld::infinite::s_s_scenario_zone_set_structure_bsp_pvs& value)
{
	byteswap(value.bsp_cluster_mapings_block);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_zone_set_pvs>(blofeld::infinite::s_s_scenario_zone_set_pvs& value)
{
	byteswap(value.structure_bsp_mask);
	byteswap(value.structure_bsp_pvs_block);
}

template<> void byteswap<blofeld::infinite::s_doorencodedpasblock>(blofeld::infinite::s_doorencodedpasblock& value)
{
	byteswap(value.encoded_data);
}

template<> void byteswap<blofeld::infinite::s_roomdoorportalencodedpasblock>(blofeld::infinite::s_roomdoorportalencodedpasblock& value)
{
	byteswap(value.encoded_data);
}

template<> void byteswap<blofeld::infinite::s_aideafeningencodedpasblock>(blofeld::infinite::s_aideafeningencodedpasblock& value)
{
	byteswap(value.encoded_data);
}

template<> void byteswap<blofeld::infinite::s_encodedroomdistancesblock>(blofeld::infinite::s_encodedroomdistancesblock& value)
{
	byteswap(value.encoded_data);
}

template<> void byteswap<blofeld::infinite::s_s_game_audibility_bsp_game_portal_mapping>(blofeld::infinite::s_s_game_audibility_bsp_game_portal_mapping& value)
{
	byteswap(value.first_door_occluder_index);
	byteswap(value.door_occluder_count);
}

template<> void byteswap<blofeld::infinite::s_s_game_audibility_bsp_mapping>(blofeld::infinite::s_s_game_audibility_bsp_mapping& value)
{
	byteswap(value.first_room_index);
	byteswap(value.room_index_count);
}

template<> void byteswap<blofeld::infinite::s_bspclustertoroomindices>(blofeld::infinite::s_bspclustertoroomindices& value)
{
	byteswap(value.room_index);
}

template<> void byteswap<blofeld::infinite::s_s_game_audibility>(blofeld::infinite::s_s_game_audibility& value)
{
	byteswap(value.door_portal_count);
	byteswap(value.room_count);
	byteswap(value.room_distance_bounds);
	byteswap(value.encoded_door_pas_block);
	byteswap(value.room_door_portal_encoded_pas_block);
	byteswap(value.ai_deafening_pas_block);
	byteswap(value.room_distances_block);
	byteswap(value.game_portal_to_door_occluder_mapping_block);
	byteswap(value.bsp_cluster_to_room_bounds_block);
	byteswap(value.bsp_cluster_to_room_indices_block);
}

template<> void byteswap<blofeld::infinite::s_bspreferenceflags>(blofeld::infinite::s_bspreferenceflags& value)
{
	byteswap(value.references_block);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_structuredesignreference>(blofeld::infinite::s_structuredesignreference& value)
{
	byteswap(value.structure_design);
}

template<> void byteswap<blofeld::infinite::s_structuredesignflagstoragearray>(blofeld::infinite::s_structuredesignflagstoragearray& value)
{
	byteswap(value.flag_data);
}

template<> void byteswap<blofeld::infinite::s_structuredesignreferenceflags>(blofeld::infinite::s_structuredesignreferenceflags& value)
{
	byteswap(value.references_block);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_scenariozonesetbudgetoverride>(blofeld::infinite::s_scenariozonesetbudgetoverride& value)
{
	byteswap(value.env_bitmap);
	byteswap(value.env_object_bitmap);
	byteswap(value.env_geometry);
	byteswap(value.env_object_geometry);
}

template<> void byteswap<blofeld::infinite::s_scenariozonesetlipsyncblock>(blofeld::infinite::s_scenariozonesetlipsyncblock& value)
{
	byteswap(value.dummy);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_zone_set>(blofeld::infinite::s_s_scenario_zone_set& value)
{
	byteswap(value.name);
	byteswap(value.name_string);
	byteswap(value.pvs_index);
	byteswap(value.flags);
	byteswap(value.bsp_zone_flags);
	byteswap(value.streaming_bsp_zone_flags);
	byteswap(value.structure_design_zone_flags);
	byteswap(value.runtime_bsp_zone_flags);
	byteswap(value.runtime_structure_design_zone_flags);
	byteswap(value.parent_zoneset);
	byteswap(value.audibility_index);
	byteswap(value.budget_overrides_block);
	byteswap(value.lipsync_sounds_block);
	byteswap(value.cinematic_soundbank);
	byteswap(value.sky_clear_color);
	byteswap(value.baked_pvs_reference_tag);
	byteswap(value.aabbboundsmin);
	byteswap(value.aabbboundsmax);
	byteswap(value.load_variant_name);
}

template<> void byteswap<blofeld::infinite::s_bsplightingorderelement>(blofeld::infinite::s_bsplightingorderelement& value)
{
	byteswap(value.bsp_reference);
}

template<> void byteswap<blofeld::infinite::s_scenarioclusterpointsblock>(blofeld::infinite::s_scenarioclusterpointsblock& value)
{
	byteswap(value.centroid);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_cluster_data>(blofeld::infinite::s_s_scenario_cluster_data& value)
{
	byteswap(value.bsp);
	byteswap(value.bsp_checksum);
	byteswap(value.cluster_centroids_block);
	byteswap(value.legacy_bsp_kd_tree);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_kill_trigger_volume>(blofeld::infinite::s_s_scenario_kill_trigger_volume& value)
{
	byteswap(value.trigger_volume);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_safe_zone_trigger_volume>(blofeld::infinite::s_s_scenario_safe_zone_trigger_volume& value)
{
	byteswap(value.trigger_volume);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_location_name_trigger_volume>(blofeld::infinite::s_s_scenario_location_name_trigger_volume& value)
{
	byteswap(value.trigger_volume);
	byteswap(value.name);
	byteswap(value.name_identifier);
}

template<> void byteswap<blofeld::infinite::s_scenariounsafespawnvolume>(blofeld::infinite::s_scenariounsafespawnvolume& value)
{
	byteswap(value.trigger_volume);
}

template<> void byteswap<blofeld::infinite::s_s_scenario_zone_set_switch_trigger_volume>(blofeld::infinite::s_s_scenario_zone_set_switch_trigger_volume& value)
{
	byteswap(value.flags);
	byteswap(value.begin_zone_set);
	byteswap(value.trigger_volume);
	byteswap(value.commit_zone_set);
}

template<> void byteswap<blofeld::infinite::s_scenariosubtitleref>(blofeld::infinite::s_scenariosubtitleref& value)
{
	byteswap(value.subtitles);
}

template<> void byteswap<blofeld::infinite::s_scriptstring>(blofeld::infinite::s_scriptstring& value)
{
	byteswap(value.id);
	byteswap(value.text);
}

template<> void byteswap<blofeld::infinite::s_runtimelayerreference>(blofeld::infinite::s_runtimelayerreference& value)
{
	byteswap(value._tag);
	byteswap(value.editor_display_name);
}

template<> void byteswap<blofeld::infinite::s_blockrange>(blofeld::infinite::s_blockrange& value)
{
	byteswap(value.begin);
	byteswap(value.end);
}

template<> void byteswap<blofeld::infinite::s_modulecomponentlookupentry>(blofeld::infinite::s_modulecomponentlookupentry& value)
{
	byteswap(value.hash);
	byteswap(value.hs_type);
	byteswap(value.compressed_placement_handle);
	byteswap(value.block_id);
}

template<> void byteswap<blofeld::infinite::s_modulecomponentlookuptable>(blofeld::infinite::s_modulecomponentlookuptable& value)
{
	byteswap(value.component_table_block);
}

template<> void byteswap<blofeld::infinite::s_runtimelayerdata>(blofeld::infinite::s_runtimelayerdata& value)
{
	byteswap(value.name);
	byteswap(value.layertagname);
	byteswap(value.flags);
	byteswap(value.blocks_block);
	byteswap(value.parent);
	byteswap(value.loadvariant);
	byteswap(value.bsps);
	byteswap(value.module_component_lookup_table);
}

template<> void byteswap<blofeld::infinite::s_placementindexdata>(blofeld::infinite::s_placementindexdata& value)
{
	byteswap(value.compressedhandle);
}

template<> void byteswap<blofeld::infinite::s_levelobjectsblockoffset>(blofeld::infinite::s_levelobjectsblockoffset& value)
{
	byteswap(value.blockbyteoffset);
	byteswap(value.placementindex_block);
}

template<> void byteswap<blofeld::infinite::s_levelregiondata>(blofeld::infinite::s_levelregiondata& value)
{
	byteswap(value.zonesetname);
	byteswap(value.regionmin);
	byteswap(value.regionmax);
	byteswap(value.inherited_region_layers_block);
}

template<> void byteswap<blofeld::infinite::s_i343decoratorsdecoratorpalettetagreference>(blofeld::infinite::s_i343decoratorsdecoratorpalettetagreference& value)
{
	byteswap(value._tag);
}

template<> void byteswap<blofeld::infinite::s_soundplacementmapentry>(blofeld::infinite::s_soundplacementmapentry& value)
{
	byteswap(value.sound_placement_reference);
}

template<> void byteswap<blofeld::infinite::s_nodegraphplacementmapentry>(blofeld::infinite::s_nodegraphplacementmapentry& value)
{
	byteswap(value.node_graph_placement_reference);
}

template<> void byteswap<blofeld::infinite::s_effectplacementmapentry>(blofeld::infinite::s_effectplacementmapentry& value)
{
	byteswap(value.effect_placement_reference);
}

template<> void byteswap<blofeld::infinite::s_acousticzoneplacementmapentry>(blofeld::infinite::s_acousticzoneplacementmapentry& value)
{
	byteswap(value.acoustic_zone_placement_reference);
}

template<> void byteswap<blofeld::infinite::s_acousticportalplacementmapentry>(blofeld::infinite::s_acousticportalplacementmapentry& value)
{
	byteswap(value.acoustic_portal_placement_reference);
}

template<> void byteswap<blofeld::infinite::s_bspmapentry>(blofeld::infinite::s_bspmapentry& value)
{
	byteswap(value.sound_placements_block);
	byteswap(value.object_node_graph_placements_block);
	byteswap(value.effect_placements_block);
	byteswap(value.acoustics_zone_placements_block);
	byteswap(value.acoustics_portal_placements_block);
}

template<> void byteswap<blofeld::infinite::s_preimportedanimnodegraphreference>(blofeld::infinite::s_preimportedanimnodegraphreference& value)
{
	byteswap(value.reference);
}

template<> void byteswap<blofeld::infinite::s_modulelookupkey>(blofeld::infinite::s_modulelookupkey& value)
{
	byteswap(value.hash);
	byteswap(value.index);
}

template<> void byteswap<blofeld::infinite::s_level>(blofeld::infinite::s_level& value)
{
	byteswap(value.levelobjects);
	byteswap(value.child_scenarios_block);
	byteswap(value.type);
	byteswap(value.mission);
	byteswap(value.flags);
	byteswap(value.runtime_trigger_volume_flags);
	byteswap(value.campaign_id);
	byteswap(value.map_id);
	byteswap(value.map_name);
	byteswap(value.default_player_start_indices_block);
	byteswap(value.sound_constants);
	byteswap(value.musketeer_toe);
	byteswap(value.conversion_version);
	byteswap(value.local_north);
	byteswap(value.local_sea_level);
	byteswap(value.altitude_cap);
	byteswap(value.grid_world_anchor_point);
	byteswap(value.grid_cell_size);
	byteswap(value.grid_size);
	byteswap(value.multiplayer_intro_cinematics_block);
	byteswap(value.multiplayer_outro_cinematic);
	byteswap(value.multiplayer_outro_cinematic_fallback);
	byteswap(value.game_performance_throttles);
	byteswap(value.asset_category_globals_override);
	byteswap(value.structure_bsps_block);
	byteswap(value.structure_designs_block);
	byteswap(value.structure_seams);
	byteswap(value.skies_block);
	byteswap(value.zone_set_pvs_block);
	byteswap(value.zone_set_audibility_block);
	byteswap(value.zone_sets_block);
	byteswap(value.bsp_lighting_order_override_block);
	byteswap(value.scenario_cluster_data_block);
	byteswap(value.multiplayer_object_types);
	byteswap(value.lightconeconstants);
	byteswap(value.spawn_settings);
	byteswap(value.wind);
	byteswap(value.scenario_render_data);
	byteswap(value.ai_pathfinding_data);
	byteswap(value.scenario_kill_triggers_block);
	byteswap(value.scenario_safe_zone_triggers_block);
	byteswap(value.scenario_location_name_triggers_block);
	byteswap(value.scenario_unsafe_spawn_trigger_volumes_block);
	byteswap(value.zone_set_switch_trigger_volumes_block);
	byteswap(value.subtitle_references_block);
	byteswap(value.level_scripts);
	byteswap(value.chapter_title_text);
	byteswap(value.interpolators);
	byteswap(value.global_screen_effect);
	byteswap(value.atmosphere_globals);
	byteswap(value.performance_throttles);
	byteswap(value.location_name_globals);
	byteswap(value.hud_screen_reference);
	byteswap(value.required_resources);
	byteswap(value.garbage_collection$2);
	byteswap(value.script_strings_block);
	byteswap(value.runtime_layers_block);
	byteswap(value.internal_runtime_layers_block);
	byteswap(value.block_offsets_block);
	byteswap(value.source_level);
	byteswap(value.level_region_data_block);
	byteswap(value.decorator_palettes_block);
	byteswap(value.dynamic_world_state_globals);
	byteswap(value.tag_graph_output);
	byteswap(value.output_node_name);
	byteswap(value.tag_graph_float_params_block);
	byteswap(value.dynamic_world_state_flags);
	byteswap(value.dynamic_world_state_lens_flare_guid);
	byteswap(value.static_world);
	byteswap(value.texture_group_table);
	byteswap(value.hlods);
	byteswap(value.hlods_switch_distance_multipliers);
	byteswap(value.auto_generated_hlods_settings);
	byteswap(value.unprocessed_level);
	byteswap(value.dynamic_wind);
	byteswap(value.push_bending);
	byteswap(value.placement_bsp_map_block);
	byteswap(value.audio_level_state_value);
	byteswap(value.broadphase_extents_override_min);
	byteswap(value.broadphase_extents_override_max);
	byteswap(value.preimported_animation_node_graphs_block);
	byteswap(value.sorted_module_lookup_table_block);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentluagraphcontenttag>(blofeld::infinite::s_nodegraphcontentluagraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_machine_definition>(blofeld::infinite::s_machine_definition& value)
{
	byteswap(value.device);
	byteswap(value.type);
	byteswap(value.flags);
	byteswap(value.door_open_time);
	byteswap(value.door_occlusion_bounds);
	byteswap(value.collision_response);
	byteswap(value.elevator_node);
	byteswap(value.pathfinding_policy);
	byteswap(value.shield_name);
	byteswap(value.shield_function);
	byteswap(value.sound_rtpcs_block);
	byteswap(value.action_denied_string_id);
}

template<> void byteswap<blofeld::infinite::s_nodegraphcontentmaterialshadergraphcontenttag>(blofeld::infinite::s_nodegraphcontentmaterialshadergraphcontenttag& value)
{
	byteswap(value.nodegraph);
}

template<> void byteswap<blofeld::infinite::s_rawgeotag>(blofeld::infinite::s_rawgeotag& value)
{
	byteswap(value.runtime_geo);
}

template<> void byteswap<blofeld::infinite::s_s_terminal_page_definition>(blofeld::infinite::s_s_terminal_page_definition& value)
{
	byteswap(value.bitmap_sequence_index);
	byteswap(value.bitmap_sprite_index);
	byteswap(value.text);
}

template<> void byteswap<blofeld::infinite::s_terminal_definition>(blofeld::infinite::s_terminal_definition& value)
{
	byteswap(value.device);
	byteswap(value.bah_bah);
	byteswap(value.action_string);
	byteswap(value.name);
	byteswap(value.activation_sound);
	byteswap(value.bitmap);
	byteswap(value.strings);
	byteswap(value.pages_block);
}

template<> void byteswap<blofeld::infinite::s_unprocessedlevel>(blofeld::infinite::s_unprocessedlevel& value)
{
	byteswap(value.level);
}

template<> void byteswap<blofeld::infinite::s_i343weaponheatbasepropertiesdefinition>(blofeld::infinite::s_i343weaponheatbasepropertiesdefinition& value)
{
	byteswap(value.heat_loss_per_second_scale);
	byteswap(value.overheated_heat_loss_per_second_scale);
	byteswap(value.heat_generated_per_round_scale);
}

template<> void byteswap<blofeld::infinite::s_aimassistdefinitiondeprecated>(blofeld::infinite::s_aimassistdefinitiondeprecated& value)
{
	byteswap(value.flags);
	byteswap(value.autoaim_angle);
	byteswap(value.autoaim_range);
	byteswap(value.autoaim_falloff_range);
	byteswap(value.autoaim_near_falloff_range);
	byteswap(value.magnetism_angle);
	byteswap(value.magnetism_range);
	byteswap(value.magnetism_falloff_range);
	byteswap(value.magnetism_near_falloff_range);
	byteswap(value.deviation_angle);
}

template<> void byteswap<blofeld::infinite::s_i343malleablepropertybaseanglestructdefinition>(blofeld::infinite::s_i343malleablepropertybaseanglestructdefinition& value)
{
	byteswap(value.base_value);
	byteswap(value.value_bounds);
}

template<> void byteswap<blofeld::infinite::s_i343weaponaimassistdefinition>(blofeld::infinite::s_i343weaponaimassistdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.autoaim_angle);
	byteswap(value.prioritization_angle);
	byteswap(value.autoaim_range);
	byteswap(value.autoaim_falloff_range);
	byteswap(value.autoaim_near_falloff_range);
	byteswap(value.magnetism_angle);
	byteswap(value.magnetism_range);
	byteswap(value.magnetism_falloff_range);
	byteswap(value.magnetism_near_falloff_range);
	byteswap(value.deviation_angle);
}

template<> void byteswap<blofeld::infinite::s_weaponmovementpenalties>(blofeld::infinite::s_weaponmovementpenalties& value)
{
	byteswap(value.forward_movement_penalty);
	byteswap(value.sideways_movement_penalty);
}

template<> void byteswap<blofeld::infinite::s_weaponclassoverride>(blofeld::infinite::s_weaponclassoverride& value)
{
	byteswap(value.unit_markup_name);
	byteswap(value.override_weapon_class);
	byteswap(value.override_weapon_class_string_id);
}

template<> void byteswap<blofeld::infinite::s_i343weaponweaponoffsetrestrictedbounds>(blofeld::infinite::s_i343weaponweaponoffsetrestrictedbounds& value)
{
	byteswap(value.depth_offset_restricted_bounds);
	byteswap(value.horizontal_offset_restricted_bounds);
	byteswap(value.vertical_offset_restricted_bounds);
	byteswap(value.minimum_computed_offset_extents);
	byteswap(value.maximum_computed_offset_extents);
}

template<> void byteswap<blofeld::infinite::s_weapon_first_person_interface_definition>(blofeld::infinite::s_weapon_first_person_interface_definition& value)
{
	byteswap(value.name);
	byteswap(value.first_person_model);
	byteswap(value.first_person_animations);
	byteswap(value.first_person_asset);
	byteswap(value.first_person_animation_asset);
	byteswap(value.first_person_fov_scale);
}

template<> void byteswap<blofeld::infinite::s_weapon_interface_definition_new>(blofeld::infinite::s_weapon_interface_definition_new& value)
{
	byteswap(value.ui_flags);
	byteswap(value.first_person_block);
	byteswap(value.hip_fire_reticle_screen_reference);
	byteswap(value.bloom_diameter_in_pixels);
	byteswap(value.aim_assist_diameter_in_pixels);
	byteswap(value.sight_front_screen_reference);
	byteswap(value.sight_back_screen_reference);
	byteswap(value.ui_display_info_block);
	byteswap(value.ammo_ticker_bitmap_reference);
}

template<> void byteswap<blofeld::infinite::s_weapon_ammunition_object>(blofeld::infinite::s_weapon_ammunition_object& value)
{
	byteswap(value.rounds);
	byteswap(value.equipment);
}

template<> void byteswap<blofeld::infinite::s_weapon_magazine_definition>(blofeld::infinite::s_weapon_magazine_definition& value)
{
	byteswap(value.flags);
	byteswap(value.rounds_recharged);
	byteswap(value.rounds_total_initial);
	byteswap(value.rounds_total_maximum);
	byteswap(value.rounds_loaded_maximum);
	byteswap(value.runtime_rounds_inventory_maximum);
	byteswap(value.ammo_refill_type);
	byteswap(value.reload_dialogue_time);
	byteswap(value.rounds_reloaded);
	byteswap(value.chamber_time);
	byteswap(value.reloading_effect);
	byteswap(value.reloading_damage_effect);
	byteswap(value.chambering_effect);
	byteswap(value.chambering_damage_effect);
	byteswap(value.magazines_block);
}

template<> void byteswap<blofeld::infinite::s_i343weapontriggerautofiredefinition>(blofeld::infinite::s_i343weapontriggerautofiredefinition& value)
{
	byteswap(value.autofire_time);
	byteswap(value.autofire_throw);
	byteswap(value.secondary_action);
	byteswap(value.primary_action);
}

template<> void byteswap<blofeld::infinite::s_i343weapontriggerdefinition>(blofeld::infinite::s_i343weapontriggerdefinition& value)
{
	byteswap(value.flags);
	byteswap(value.input);
	byteswap(value.behavior);
	byteswap(value.primary_barrel);
	byteswap(value.secondary_barrel);
	byteswap(value.prediction);
	byteswap(value.alt_fire_behavior);
	byteswap(value.autofire);
	byteswap(value.charging);
	byteswap(value.double_latch_projectile_releasable_effect);
	byteswap(value.double_latch_projectile_released_effect);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelerrorturnrates>(blofeld::infinite::s_i343weaponbarrelerrorturnrates& value)
{
	byteswap(value.min_error_look_pitch_rate);
	byteswap(value.full_error_look_pitch_rate);
	byteswap(value.look_pitch_error_power);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelfunctionblock>(blofeld::infinite::s_i343weaponbarrelfunctionblock& value)
{
	byteswap(value.min_error_function);
	byteswap(value.function);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelaccuracypenaltyfunctions>(blofeld::infinite::s_i343weaponbarrelaccuracypenaltyfunctions& value)
{
	byteswap(value.firing_penalty_function_block);
	byteswap(value.firing_crouched_penalty_function_block);
	byteswap(value.moving_penalty_function_block);
	byteswap(value.turning_penalty_function_block);
	byteswap(value.error_angle_max_rotation);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelaccuracypenaltydefinition>(blofeld::infinite::s_i343weaponbarrelaccuracypenaltydefinition& value)
{
	byteswap(value.reload_penalty_low);
	byteswap(value.reload_penalty);
	byteswap(value.switch_penalty_low);
	byteswap(value.switch_penalty);
	byteswap(value.zoom_penalty_low);
	byteswap(value.zoom_penalty);
	byteswap(value.jump_penalty_low);
	byteswap(value.jump_penalty);
	byteswap(value.single_wield_penalties);
	byteswap(value.dual_wield_penalties);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarrelfirstpersonoffsetblock>(blofeld::infinite::s_i343weaponbarrelfirstpersonoffsetblock& value)
{
	byteswap(value.first_person_offset);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarreldamageeffect>(blofeld::infinite::s_i343weaponbarreldamageeffect& value)
{
	byteswap(value.damage_effect);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilviewkickaccelerationdimension>(blofeld::infinite::s_i343weaponrecoilviewkickaccelerationdimension& value)
{
	byteswap(value.view_kick_random_acceleration);
	byteswap(value.view_kick_min_magnitude);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilimpulsescalesstruct>(blofeld::infinite::s_i343weaponrecoilimpulsescalesstruct& value)
{
	byteswap(value.recoil_impulse_scale_ground_throttle);
	byteswap(value.recoil_impulse_scale_crouched);
	byteswap(value.recoil_impulse_scale_airborne);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilviewkickaccelerationstance>(blofeld::infinite::s_i343weaponrecoilviewkickaccelerationstance& value)
{
	byteswap(value.view_kick_yaw);
	byteswap(value.view_kick_pitch);
	byteswap(value.view_kick_recoil_scales);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilviewkickaccelerationstanceblock>(blofeld::infinite::s_i343weaponrecoilviewkickaccelerationstanceblock& value)
{
	byteswap(value.acceleration_stance);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilviewkickacceleration>(blofeld::infinite::s_i343weaponrecoilviewkickacceleration& value)
{
	byteswap(value.acceleration_precision_aim);
	byteswap(value.acceleration_hip_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilgunkickaccelerationstancedefinition>(blofeld::infinite::s_i343weaponrecoilgunkickaccelerationstancedefinition& value)
{
	byteswap(value.gunkick_yaw_acceleration);
	byteswap(value.gunkick_yaw_min_magnitude);
	byteswap(value.gunkick_pitch_acceleration);
	byteswap(value.gunkick_pitch_min_magnitude);
	byteswap(value.gunkick_impulse_scales);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilgunkickaccelerationstancedefinitionblock>(blofeld::infinite::s_i343weaponrecoilgunkickaccelerationstancedefinitionblock& value)
{
	byteswap(value.gunkick_acceleration_stance);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilgunkickaccelerationdefinition>(blofeld::infinite::s_i343weaponrecoilgunkickaccelerationdefinition& value)
{
	byteswap(value.gunkick_ads_settings);
	byteswap(value.gunkick_hip_settings_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponproceduralanimationfirstpersonfireimpulsedefinition>(blofeld::infinite::s_i343weaponproceduralanimationfirstpersonfireimpulsedefinition& value)
{
	byteswap(value.procedural_animation_fp_fire_kickback_impulse);
}

template<> void byteswap<blofeld::infinite::s_i343weaponproceduralanimationfirstpersonfireimpulseblock>(blofeld::infinite::s_i343weaponproceduralanimationfirstpersonfireimpulseblock& value)
{
	byteswap(value.procedural_animation_fp_fire_kickback_impulse);
}

template<> void byteswap<blofeld::infinite::s_i343weaponproceduralanimationfirstpersonfiredefinition>(blofeld::infinite::s_i343weaponproceduralanimationfirstpersonfiredefinition& value)
{
	byteswap(value.procedural_animation_fp_fire_kickback_impulse);
	byteswap(value.procedural_animation_fp_fire_kickback_impulse_hip_block);
}

template<> void byteswap<blofeld::infinite::s_i343weaponbarreldefinition>(blofeld::infinite::s_i343weaponbarreldefinition& value)
{
	byteswap(value.flags);
	byteswap(value.firing$2);
	byteswap(value.magazine);
	byteswap(value.rounds_per_shot);
	byteswap(value.minimum_rounds_loaded);
	byteswap(value.rounds_per_burst);
	byteswap(value.rounds_between_tracers);
	byteswap(value.automatic_reload_behavior);
	byteswap(value.optional_barrel_marker_name);
	byteswap(value.noise);
	byteswap(value.prediction_type);
	byteswap(value.event_synchronized_projectiles_per_second);
	byteswap(value.maximum_barrel_error_for_event_synchronization);
	byteswap(value.error_turn_rates);
	byteswap(value.projectile_distribution);
	byteswap(value.projectile_error);
	byteswap(value.accuracy_penalties);
	byteswap(value.first_person_offset_block);
	byteswap(value.projectile$2);
	byteswap(value.tag_graph_output);
	byteswap(value.output_node_name);
	byteswap(value.float_params_block);
	byteswap(value.optional_secondary_projectile);
	byteswap(value.eh);
	byteswap(value.crate_projectile);
	byteswap(value.crate_projectile_speed);
	byteswap(value.ejection_port_recovery_time);
	byteswap(value.illumination_recovery_time);
	byteswap(value.heat_generated_per_round);
	byteswap(value.heat_generated_per_round_function);
	byteswap(value.deprecated_age_generated_per_round);
	byteswap(value.deprecated_campaign_age_generated_per_round);
	byteswap(value.age_generation);
	byteswap(value.sweet_heat);
	byteswap(value.overload_time);
	byteswap(value.runtime_illumination_recovery_rate);
	byteswap(value.runtime_ejection_port_recovery_rate);
	byteswap(value.firing_effects_block);
	byteswap(value.recoil_view_kick_acceleration);
	byteswap(value.recoil_gun_kick_acceleration);
	byteswap(value.procedural_animation_fp_fire_impulse);
}

template<> void byteswap<blofeld::infinite::s_i343weaponanimationbasepropertiesdefinition>(blofeld::infinite::s_i343weaponanimationbasepropertiesdefinition& value)
{
	byteswap(value.ready_playback_speed_scale);
	byteswap(value.ready_initial_playback_speed_scale);
	byteswap(value.put_away_playback_speed_scale);
	byteswap(value.reload_playback_speed_scale);
	byteswap(value.reload_while_empty_playback_speed_scale);
}

template<> void byteswap<blofeld::infinite::s_s_weapon_screen_effect_definition>(blofeld::infinite::s_s_weapon_screen_effect_definition& value)
{
	byteswap(value.flags);
	byteswap(value.screen_effect);
}

template<> void byteswap<blofeld::infinite::s_i343weaponunitbasepropertiesdefinition>(blofeld::infinite::s_i343weaponunitbasepropertiesdefinition& value)
{
	byteswap(value.move_speed_scale);
	byteswap(value.turn_rate_scale);
	byteswap(value.simulated_input_scale);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilviewkicksettingsdimension>(blofeld::infinite::s_i343weaponrecoilviewkicksettingsdimension& value)
{
	byteswap(value.view_kick_bounds);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilviewkicksettingsstance>(blofeld::infinite::s_i343weaponrecoilviewkicksettingsstance& value)
{
	byteswap(value.view_kick_deceleration);
	byteswap(value.view_kick_return_to_center_acceleration);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilviewkicksettingsstanceblock>(blofeld::infinite::s_i343weaponrecoilviewkicksettingsstanceblock& value)
{
	byteswap(value.view_kick_settings_stance);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilviewkickdefinition>(blofeld::infinite::s_i343weaponrecoilviewkickdefinition& value)
{
	byteswap(value.view_kick_system_type);
	byteswap(value.view_kick_yaw);
	byteswap(value.view_kick_pitch);
	byteswap(value.view_kick_precision_aim);
	byteswap(value.view_kick_hip_block);
	byteswap(value.view_kick_multiplier_function);
	byteswap(value.view_kick_shots_fired_to_max_out_multipler_function);
	byteswap(value.view_kick_time_to_zero_multipler_function);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilviewkickbasepropertiesdefinition>(blofeld::infinite::s_i343weaponrecoilviewkickbasepropertiesdefinition& value)
{
	byteswap(value.view_kick_return_deceleration_scale);
	byteswap(value.view_kick_return_return_to_center_scale);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilgunkickstancedefinition>(blofeld::infinite::s_i343weaponrecoilgunkickstancedefinition& value)
{
	byteswap(value.gunkick_spring_constant);
	byteswap(value.gunkick_damping_ratio);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilgunkickstanceblock>(blofeld::infinite::s_i343weaponrecoilgunkickstanceblock& value)
{
	byteswap(value.gunkick_stance);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilgunkickdefinition>(blofeld::infinite::s_i343weaponrecoilgunkickdefinition& value)
{
	byteswap(value.gunkick_ads_settings);
	byteswap(value.gunkick_hip_settings_block);
	byteswap(value.gunkick_yaw_bounds);
	byteswap(value.gunkick_pitch_bounds);
}

template<> void byteswap<blofeld::infinite::s_i343weaponrecoilgunkickbasepropertiesdefinition>(blofeld::infinite::s_i343weaponrecoilgunkickbasepropertiesdefinition& value)
{
	byteswap(value.gunkick_spring_constant_scale);
}

template<> void byteswap<blofeld::infinite::s_i343weaponproceduralanimationfirstpersonfirespringdamperdefinition>(blofeld::infinite::s_i343weaponproceduralanimationfirstpersonfirespringdamperdefinition& value)
{
	byteswap(value.procedural_animation_fp_fire_spring_constant);
	byteswap(value.procedural_animation_fp_fire_damping_ratio);
	byteswap(value.runtime_damping_constant);
}

template<> void byteswap<blofeld::infinite::s_i343weaponproceduralanimationfirstpersonfirespringdamperblock>(blofeld::infinite::s_i343weaponproceduralanimationfirstpersonfirespringdamperblock& value)
{
	byteswap(value.procedural_animation_fp_fire_spring);
}

template<> void byteswap<blofeld::infinite::s_i343weaponproceduralanimationfirstpersondefinition>(blofeld::infinite::s_i343weaponproceduralanimationfirstpersondefinition& value)
{
	byteswap(value.procedural_animation_fp_fire_spring);
	byteswap(value.procedural_animation_fp_fire_spring_hip_block);
}

template<> void byteswap<blofeld::infinite::s_i343proceduralanimationrecoilsettings>(blofeld::infinite::s_i343proceduralanimationrecoilsettings& value)
{
	byteswap(value.duration);
	byteswap(value.kickback);
	byteswap(value.pitch);
	byteswap(value.yaw);
	byteswap(value.roll);
	byteswap(value.head);
	byteswap(value.shoulders);
}

template<> void byteswap<blofeld::infinite::s_i343weaponfiresoundsdefinition>(blofeld::infinite::s_i343weaponfiresoundsdefinition& value)
{
	byteswap(value.fire_sound);
	byteswap(value.bullet_shell_sound);
	byteswap(value.tail_sounds);
	byteswap(value.dry_fire_sound);
}

template<> void byteswap<blofeld::infinite::s_i343weaponweaponsounddefinition>(blofeld::infinite::s_i343weaponweaponsounddefinition& value)
{
	byteswap(value.weapon_sound_flags);
	byteswap(value.weapon_fire_sounds_block);
	byteswap(value.tracking_sound);
	byteswap(value.locked_sound);
	byteswap(value.ammo_pickup_sound);
	byteswap(value.concurrent_impact_sound_limit);
	byteswap(value.sound_rtpcs_block);
	byteswap(value.sound_sweeteners_block);
}

template<> void byteswap<blofeld::infinite::s_weapondefinition>(blofeld::infinite::s_weapondefinition& value)
{
	byteswap(value.item);
	byteswap(value.flags);
	byteswap(value.secondary_flags);
	byteswap(value.suppression_flags);
	byteswap(value.animation_flags);
	byteswap(value.unused_label);
	byteswap(value.turn_on_time);
	byteswap(value.ready_time);
	byteswap(value.ready_effect);
	byteswap(value.ready_damage_effect);
	byteswap(value.heat_recovery_threshold);
	byteswap(value.overheated_threshold);
	byteswap(value.heat_detonation_threshold);
	byteswap(value.heat_detonation_fraction);
	byteswap(value.heat_loss_per_second);
	byteswap(value.heat_loss);
	byteswap(value.heat_loss_venting);
	byteswap(value.heat_venting_time);
	byteswap(value.heat_venting_exit_heat);
	byteswap(value.heat_illumination);
	byteswap(value.heat_warning_threshold);
	byteswap(value.overheated_heat_loss_per_second);
	byteswap(value.overheated_heat_loss);
	byteswap(value.overheated_instantaneous_age);
	byteswap(value.overheated_age_per_second);
	byteswap(value.heat_base_properties);
	byteswap(value.overheated);
	byteswap(value.overheated_damage_effect);
	byteswap(value.detonation);
	byteswap(value.detonation_damage_effect);
	byteswap(value.melee_damage_parameters_block);
	byteswap(value.clang_effect);
	byteswap(value.magnification_levels);
	byteswap(value.magnification_range);
	byteswap(value.zoom_effect_ticks);
	byteswap(value.zoom_effect);
	byteswap(value.aim_assist_modes_block);
	byteswap(value.aim_assist);
	byteswap(value.target_tracking_block);
	byteswap(value.laser_guidance_block);
	byteswap(value.ballistic_arcing_firing_bounds);
	byteswap(value.ballistic_arcing_fraction_bounds);
	byteswap(value.movement_penalized);
	byteswap(value.forward_movement_penalty);
	byteswap(value.sideways_movement_penalty);
	byteswap(value.movement_penalty___reloading);
	byteswap(value.movement_penalty___zoom);
	byteswap(value.movement_penalty___other);
	byteswap(value.maximum_pitch_rate);
	byteswap(value.ai_scariness);
	byteswap(value.bot_desirability);
	byteswap(value.weapon_power_on_time);
	byteswap(value.weapon_power_off_time);
	byteswap(value.weapon_power_on_effect);
	byteswap(value.weapon_power_off_effect);
	byteswap(value.age_heat_recovery_penalty);
	byteswap(value.age_rate_of_fire_penalty);
	byteswap(value.age_misfire_start);
	byteswap(value.age_misfire_chance);
	byteswap(value.age_based_ammo_refill_type);
	byteswap(value.active_camo_ding);
	byteswap(value.ai_active_camo_scaling);
	byteswap(value.handle_node);
	byteswap(value.weapon_class);
	byteswap(value.weapon_class_string_id);
	byteswap(value.weapon_class_override_block);
	byteswap(value.weapon_name);
	byteswap(value.first_person_weapon_group$2);
	byteswap(value.first_person_weapon_offset_restricted_bounds_block);
	byteswap(value.weapon_type);
	byteswap(value.low_ammo_threshold);
	byteswap(value.player_interface);
	byteswap(value.magazines_block);
	byteswap(value.alt_fire);
	byteswap(value.new_triggers_block);
	byteswap(value.barrels_block);
	byteswap(value.runtime_weapon_power_on_velocity);
	byteswap(value.runtime_weapon_power_off_velocity);
	byteswap(value.max_movement_acceleration);
	byteswap(value.max_movement_velocity);
	byteswap(value.max_turning_acceleration);
	byteswap(value.max_turning_velocity);
	byteswap(value.deployed_vehicle);
	byteswap(value.age_effect);
	byteswap(value.aged_weapon);
	byteswap(value.aged_material_effects);
	byteswap(value.per_kill_or_hit_aging_amount);
	byteswap(value.external_aging_amount);
	byteswap(value.external_heat_amount);
	byteswap(value.first_person_weapon_offset);
	byteswap(value.support_third_person_camera_range);
	byteswap(value.weapon_zoom_time);
	byteswap(value.weapon_ready_for_use_time);
	byteswap(value.deprecated_ready_playback_speed);
	byteswap(value.deprecated_ready_initial_playback_speed);
	byteswap(value.deprecated_put_away_playback_speed);
	byteswap(value.deprecated_reload_playback_speed);
	byteswap(value.deprecated_reload_while_empty_playback_speed);
	byteswap(value.animation_base_properties);
	byteswap(value.sprint_exit_disable_weapon_duration);
	byteswap(value.grapple_hook_exit_disable_weapon_duration);
	byteswap(value.tether_transition_to_linked_time);
	byteswap(value.tether_transition_from_linked_time);
	byteswap(value.unit_stow_anchor_name);
	byteswap(value.screen_effects_block);
	byteswap(value.player_sound_bank);
	byteswap(value.locking_reticle_screen_name);
	byteswap(value.locked_on_reticle_screen_name);
	byteswap(value.generic_attachments_block);
	byteswap(value.barrel_attachment);
	byteswap(value.magazine_attachment);
	byteswap(value.melee_attachment);
	byteswap(value.weapon_sight);
	byteswap(value.weapon_target_tracking_attachment);
	byteswap(value.weapon_trigger_attachment);
	byteswap(value.heat_attachment);
	byteswap(value.ui_display_info);
	byteswap(value.accuracy_spread_scale);
	byteswap(value.unit_properties);
	byteswap(value.recoil_view_kick);
	byteswap(value.recoil_view_kick_base_properties);
	byteswap(value.recoil_gun_kick);
	byteswap(value.recoil_gunkick_base_properties);
	byteswap(value.procedural_animation_fp);
	byteswap(value.procedural_recoil_settings);
	byteswap(value.weaponswitcheventnameinbegin);
	byteswap(value.weaponswitcheventnameinend);
	byteswap(value.weaponswitcheventnameoutbegin);
	byteswap(value.weaponswitcheventnameoutend);
	byteswap(value.pickup_weapon);
	byteswap(value.pickup_weapon_attachment_point);
	byteswap(value.pickup_weapon_unit_attachment_point);
	byteswap(value.tutorial_weapon_fire_id);
	byteswap(value.equipped_modifiers);
	byteswap(value.sound);
	byteswap(value.ammo_pickup_delay);
}

template<> void byteswap<blofeld::infinite::s_control_definition>(blofeld::infinite::s_control_definition& value)
{
	byteswap(value.device);
	byteswap(value.type);
	byteswap(value.triggers_when);
	byteswap(value.call_value);
	byteswap(value.action_string);
	byteswap(value.secondary_action_string);
	byteswap(value.action_denied_string);
	byteswap(value.action_denied_secondary_string);
	byteswap(value.mp_team_use_denied_string);
	byteswap(value.mp_team_use_denied_secondary_string);
	byteswap(value.action_and_mp_team_use_denied_string);
	byteswap(value.action_and_mp_team_use_denied_secondary_string);
	byteswap(value.interaction_hold_time);
	byteswap(value.interaction_screen);
	byteswap(value.hold_start);
	byteswap(value.action_denied_sound);
	byteswap(value.mp_team_use_restriction);
	byteswap(value.on);
	byteswap(value.off);
	byteswap(value.deny);
	byteswap(value.script_name);
	byteswap(value.flags);
	byteswap(value.sound_rtpcs_block);
}

template<> void byteswap<blofeld::infinite::s_optionalunitcamerablock>(blofeld::infinite::s_optionalunitcamerablock& value)
{
	byteswap(value.unit_camera);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitydeactivationoverridesettings>(blofeld::infinite::s_equipmentabilitydeactivationoverridesettings& value)
{
	byteswap(value.cooldown_time);
	byteswap(value.energy_change);
}

template<> void byteswap<blofeld::infinite::s_controlstateuiinfo>(blofeld::infinite::s_controlstateuiinfo& value)
{
	byteswap(value.state_bitmp);
	byteswap(value.state_bitmap_index);
	byteswap(value.button_state_string);
}

template<> void byteswap<blofeld::infinite::s_i343equipmentbasiccontrolstate>(blofeld::infinite::s_i343equipmentbasiccontrolstate& value)
{
	byteswap(value.control_state_count);
	byteswap(value.control_state_flags);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypespawner>(blofeld::infinite::s_equipmentabilitytypespawner& value)
{
	byteswap(value.spawn_offset);
	byteswap(value.spawn_radius);
	byteswap(value.spawn_velocity_scalar);
	byteswap(value.spawn_z_offset);
	byteswap(value.spawn_area_radius);
	byteswap(value.spawn_velocity);
	byteswap(value.max_range);
	byteswap(value.raycast_layer);
	byteswap(value.spawn_collision_radius_offset);
	byteswap(value.spawn_marker);
	byteswap(value.spawn_marker_on_object);
	byteswap(value.spawn_marker_owner_object);
	byteswap(value.spawn_variance_angle);
	byteswap(value.objects_spawned_per_activation);
	byteswap(value.max_simultaneous);
	byteswap(value.spawned_objects_behaviour);
	byteswap(value.type);
	byteswap(value.control_state_support);
	byteswap(value.spawn_flags);
	byteswap(value.spawned_object);
	byteswap(value.spawned_effect);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypeproximitymine>(blofeld::infinite::s_equipmentabilitytypeproximitymine& value)
{
	byteswap(value.explosion_effect);
	byteswap(value.explosion_damage_effect);
	byteswap(value.arm_time);
	byteswap(value.self_destruct_time);
	byteswap(value.trigger_time);
	byteswap(value.trigger_velocity);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypemotiontrackernoise>(blofeld::infinite::s_equipmentabilitytypemotiontrackernoise& value)
{
	byteswap(value.flags);
	byteswap(value.arm_time);
	byteswap(value.noise_radius);
	byteswap(value.noise_count);
	byteswap(value.flash_radius);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypetreeoflife>(blofeld::infinite::s_equipmentabilitytypetreeoflife& value)
{
	byteswap(value.flags);
	byteswap(value.origin_marker);
	byteswap(value.radius);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytyperepulsorfield>(blofeld::infinite::s_equipmentabilitytyperepulsorfield& value)
{
	byteswap(value.flags);
	byteswap(value.radius);
	byteswap(value.power);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypedaddy>(blofeld::infinite::s_equipmentabilitytypedaddy& value)
{
	byteswap(value.child_object);
	byteswap(value.flags);
	byteswap(value.shield_damage_to_energy_scale);
	byteswap(value.starting_warm_up_object_scale);
	byteswap(value.target_object_scale);
	byteswap(value.offset_from_parent);
	byteswap(value.vertical_offset_in_world_space);
	byteswap(value.min_and_max_pitch);
	byteswap(value.visual_activation_time);
	byteswap(value.spawn_effect);
	byteswap(value.spawn_effect_marker);
	byteswap(value.despawn_effect);
	byteswap(value.despawn_effect_marker);
	byteswap(value.parent_attachment_marker);
	byteswap(value.child_attachment_marker);
	byteswap(value.deploy_animation);
	byteswap(value.stow_animation);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypeammopack>(blofeld::infinite::s_equipmentabilitytypeammopack& value)
{
	byteswap(value.energy_change_per_clip_added);
	byteswap(value.extra_fragmentation_grenade);
	byteswap(value.extra_plasma_grenade);
	byteswap(value.extra_lightning_grenade);
	byteswap(value.extra_gravity_grenade);
	byteswap(value.extra_spike_grenade);
	byteswap(value.extra_pulse_grenade);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypehealthpack>(blofeld::infinite::s_equipmentabilitytypehealthpack& value)
{
	byteswap(value.flags);
	byteswap(value.instant_shield_restore_amount);
	byteswap(value.instant_body_restore_amount);
	byteswap(value.health_given_over_energy_used);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypejetpack>(blofeld::infinite::s_equipmentabilitytypejetpack& value)
{
	byteswap(value.flags);
	byteswap(value.thrust_to_acceleration_function);
	byteswap(value.infinite_energy_thrust_to_acceleration_function);
	byteswap(value.thrust_attack_time);
	byteswap(value.thrust_decay_time);
	byteswap(value.negative_velocity_acceleration_scale);
	byteswap(value.airborne_acceleration_scale);
	byteswap(value.grounded_acceleration_magnitude);
	byteswap(value.landing_anticipation_time);
	byteswap(value.camera_vs_move_input_thrust_control);
	byteswap(value.min_speed);
	byteswap(value.max_speed);
	byteswap(value.stick_forward_thrust);
	byteswap(value.stick_strafe_thrust);
	byteswap(value.drag);
	byteswap(value.drag_cutoff_time);
	byteswap(value.acceleration_frame_rate);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypehologram>(blofeld::infinite::s_equipmentabilitytypehologram& value)
{
	byteswap(value.max_destination_range);
	byteswap(value.hologram_duration);
	byteswap(value.collision_layer);
	byteswap(value.creation_effect);
	byteswap(value.destination_effect);
	byteswap(value.attached_effect);
	byteswap(value.attached_effect_marker);
	byteswap(value.attached_effect_primary_scale);
	byteswap(value.attached_effect_secondary_scale);
	byteswap(value.destruction_effect);
	byteswap(value.shimmer_decrease_rate);
	byteswap(value.shimmer_bullet_ping);
	byteswap(value.shimmer_to_camo_function);
	byteswap(value.flags);
	byteswap(value.speed_scale);
	byteswap(value.aim_at_enemy_update_rate);
	byteswap(value.aim_at_enemy_target_range);
	byteswap(value.aim_at_enemy_target_stickiness);
	byteswap(value.aim_behavior_stopped);
	byteswap(value.aim_behavior_moving);
	byteswap(value.formation_flags);
	byteswap(value.mimic_count);
	byteswap(value.mimic_min_dist);
	byteswap(value.mimic_max_dist);
	byteswap(value.mimic_shuffle_time);
	byteswap(value.mimic_shuffle_variance);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypespecialweapon>(blofeld::infinite::s_equipmentabilitytypespecialweapon& value)
{
	byteswap(value.weapon);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypespecialmove>(blofeld::infinite::s_equipmentabilitytypespecialmove& value)
{
	byteswap(value.forward);
	byteswap(value.left);
	byteswap(value.backward);
	byteswap(value.right);
	byteswap(value.default_direction);
	byteswap(value.directional_effect);
	byteswap(value.danger_radius);
	byteswap(value.speed_multiplier);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypeengineershields>(blofeld::infinite::s_equipmentabilitytypeengineershields& value)
{
	byteswap(value.radius);
	byteswap(value.shield_name);
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypeautoturret>(blofeld::infinite::s_equipmentabilitytypeautoturret& value)
{
	byteswap(value.flags);
	byteswap(value.control_state_support);
	byteswap(value.weapon);
	byteswap(value.orbit_offset_from_player);
	byteswap(value.orbit_range);
	byteswap(value.orbit_rate);
	byteswap(value.maximum_range);
	byteswap(value.max_velocity);
	byteswap(value.max_acceleration);
	byteswap(value.turret_halt_engage_time);
	byteswap(value.turret_idle_equipment_drain_multiplier);
	byteswap(value.turret_inactive_equipment_drain_multiplier);
	byteswap(value.spawn_radius);
	byteswap(value.spawn_in_time);
	byteswap(value.spawn_offset_from_player);
	byteswap(value.vertical_bob_height);
	byteswap(value.vertical_bobs_per_second);
	byteswap(value.spawn_effect);
	byteswap(value.spawn_effect_marker);
	byteswap(value.spawn_dissolve_type);
	byteswap(value.spawn_dissolve_marker);
	byteswap(value.collision_phase_effect);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypeshieldprojector>(blofeld::infinite::s_equipmentabilitytypeshieldprojector& value)
{
	byteswap(value.lifetime_);
	byteswap(value.recharge_time_);
	byteswap(value.warmup_time_);
	byteswap(value.max_move_percentage_);
	byteswap(value.offset_amount_);
	byteswap(value.min_projection_distance_);
	byteswap(value.max_projection_distance_);
	byteswap(value.min_required_energy_level_);
	byteswap(value.project_effect_);
	byteswap(value.warmup_effect_);
	byteswap(value.shield_crate_);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypeprojectilecollector>(blofeld::infinite::s_equipmentabilitytypeprojectilecollector& value)
{
	byteswap(value.chance_to_collect_);
	byteswap(value.collect_cooldown_);
	byteswap(value.attack_delay_);
	byteswap(value.max_collect_range);
	byteswap(value.orbit_radius);
	byteswap(value.orbit_speed);
	byteswap(value.vertical_offset);
	byteswap(value.strength);
	byteswap(value.attack_speed);
	byteswap(value.collect_effect_);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypeactiveshield>(blofeld::infinite::s_equipmentabilitytypeactiveshield& value)
{
	byteswap(value.flags);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypefortificationshield>(blofeld::infinite::s_equipmentabilitytypefortificationshield& value)
{
	byteswap(value.shield_object);
	byteswap(value.object_deploy_scale);
	byteswap(value.autoshutdown_range);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypegenericpowerup>(blofeld::infinite::s_equipmentabilitytypegenericpowerup& value)
{
	byteswap(value.generic_powerup);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypemalleableproperties>(blofeld::infinite::s_equipmentabilitytypemalleableproperties& value)
{
	byteswap(value.modifiers);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypespartancustomtracking>(blofeld::infinite::s_equipmentabilitytypespartancustomtracking& value)
{
	byteswap(value.ping_definition);
	byteswap(value.marking_ping_definition);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypeteleporter>(blofeld::infinite::s_equipmentabilitytypeteleporter& value)
{
	byteswap(value.flags);
	byteswap(value.arming_delay);
	byteswap(value.armed_effect);
	byteswap(value.teleport_animation);
	byteswap(value.teleport_first_person_animation_set);
	byteswap(value.teleport_delay);
	byteswap(value.destination_offset_z);
	byteswap(value.source_effect);
	byteswap(value.destination_effect);
	byteswap(value.obstruction_self_destruct_duration);
	byteswap(value.teleport_failure_effect);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypeframeabilityitem>(blofeld::infinite::s_equipmentabilitytypeframeabilityitem& value)
{
	byteswap(value.frame_attachment_to_activate);
	byteswap(value.pickup_flags);
	byteswap(value.behaviour_when_you_walk_over_an_item_you_already_hold);
	byteswap(value.energy_transfer_behavior);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypeequipmentrecharger>(blofeld::infinite::s_equipmentabilitytypeequipmentrecharger& value)
{
	byteswap(value.pickup_charges_given);
}

template<> void byteswap<blofeld::infinite::s_i343equipmentknockbackunittargetmarker>(blofeld::infinite::s_i343equipmentknockbackunittargetmarker& value)
{
	byteswap(value.marker_name);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypeknockback>(blofeld::infinite::s_equipmentabilitytypeknockback& value)
{
	byteswap(value.search_radius);
	byteswap(value.search_origin_marker);
	byteswap(value.search_offset);
	byteswap(value.search_angle);
	byteswap(value.target_knockback_impulse_magnitude);
	byteswap(value.target_knockback_impulse_maximum_mass);
	byteswap(value.target_knockback_impulse_magnitude_grounded_bipeds);
	byteswap(value.target_knockback_impulse_magnitude_airborne_bipeds);
	byteswap(value.target_knockback_impulse_magnitude_projectiles);
	byteswap(value.target_knockback_per_object_overrides);
	byteswap(value.target_knockback_origin_marker);
	byteswap(value.target_knockback_target_point_min_range);
	byteswap(value.target_knockback_target_point_max_range);
	byteswap(value.target_knockback_ground_deflection_offset_angle);
	byteswap(value.target_knockback_ground_deflection_min_angle);
	byteswap(value.target_knockback_ground_deflection_max_angle);
	byteswap(value.owner_knockback_impulse_magnitude);
	byteswap(value.max_pitch_angle);
	byteswap(value.owner_knockback_vertical_snap_angle);
	byteswap(value.knockback_state_override_time);
	byteswap(value.knockback_vehicle_emp_duration);
	byteswap(value.damage_effect);
	byteswap(value.rocket_jump_effect);
	byteswap(value.default_effect);
	byteswap(value.vehicle_effect);
	byteswap(value.biped_effect);
	byteswap(value.projectile_effect);
	byteswap(value.biped_head_marker);
	byteswap(value.biped_foot_marker);
	byteswap(value.line_of_sight_test_unit_markers_block);
}

template<> void byteswap<blofeld::infinite::s_equipmentabilitytypeactivecamo>(blofeld::infinite::s_equipmentabilitytypeactivecamo& value)
{
	byteswap(value.duration);
	byteswap(value.modifiers);
}

template<> void byteswap<blofeld::infinite::s_equipmentability>(blofeld::infinite::s_equipmentability& value)
{
	byteswap(value.activation_mode);
	byteswap(value.duration);
	byteswap(value.warmup_time);
	byteswap(value.cooldown_time);
	byteswap(value.phantom_volume_activation_time);
	byteswap(value.motion_tracker_ping_duration);
	byteswap(value.super_active_duration);
	byteswap(value.minimum_activation_energy);
	byteswap(value.low_energy_warning_threshold);
	byteswap(value.activation_energy_cost);
	byteswap(value.deactivation_energy_cost);
	byteswap(value.active_energy_rate);
	byteswap(value.movement_speed_to_energy_rate);
	byteswap(value.movement_speed_domain);
	byteswap(value.deactivation_override_settings_block);
	byteswap(value.flags);
	byteswap(value.secondary_flags);
	byteswap(value.charges);
	byteswap(value.control_state_ui_flags);
	byteswap(value.control_states_ui_info_block);
	byteswap(value.object_noise_adjustment);
	byteswap(value.active_camo_ding);
	byteswap(value.spawner_block);
	byteswap(value.proximity_mine_block);
	byteswap(value.motion_tracker_noise_block);
	byteswap(value.tree_of_life_block);
	byteswap(value.repulsor_field_block);
	byteswap(value.iwhbydaddy_block);
	byteswap(value.ammo_pack_block);
	byteswap(value.health_pack_block);
	byteswap(value.jet_pack_block);
	byteswap(value.hologram_block);
	byteswap(value.special_weapon_block);
	byteswap(value.special_move_block);
	byteswap(value.engineer_shields_block);
	byteswap(value.auto_turret_block);
	byteswap(value.shield_projector_block);
	byteswap(value.projectile_collector_block);
	byteswap(value.active_shield_block);
	byteswap(value.fortification_shield_block);
	byteswap(value.generic_powerup_block);
	byteswap(value.malleable_properties_block);
	byteswap(value.custom_spartan_tracking_block);
	byteswap(value.teleporter_block);
	byteswap(value.frame_ability_block);
	byteswap(value.equipment_recharger_block);
	byteswap(value.knockback_block);
	byteswap(value.active_camo_block);
	byteswap(value.activation_while_disabled_by_player_traits_sound);
	byteswap(value.activate_effect);
	byteswap(value.looping_effect);
	byteswap(value.deactivate_effect);
	byteswap(value.activation_animation);
	byteswap(value.activation_duration_override);
	byteswap(value.active_animation);
	byteswap(value.deactivate_animation);
	byteswap(value.first_person_activation_animation_set);
	byteswap(value.first_person_active_animation_set);
	byteswap(value.active_animation_stance);
}

template<> void byteswap<blofeld::infinite::s_i343equipmentobjectfunctionremapping>(blofeld::infinite::s_i343equipmentobjectfunctionremapping& value)
{
	byteswap(value.base_function_name);
	byteswap(value.new_function_name);
}

template<> void byteswap<blofeld::infinite::s_equipmentdefinition>(blofeld::infinite::s_equipmentdefinition& value)
{
	byteswap(value.item);
	byteswap(value.input);
	byteswap(value.initial_energy);
	byteswap(value.energy_recovery_time);
	byteswap(value.inactive_energy_rate);
	byteswap(value.gravity_scale);
	byteswap(value.velocity_for_rest);
	byteswap(value.time_at_rest);
	byteswap(value.rest_failsafe_time);
	byteswap(value.flags);
	byteswap(value.unit_stow_marker_name);
	byteswap(value.pickup_behavior);
	byteswap(value.pickup_radius);
	byteswap(value.danger_radius);
	byteswap(value.min_deployment_distance);
	byteswap(value.awareness_time);
	byteswap(value.ai_dialogue_equipment_type);
	byteswap(value.ai_equipment_type);
	byteswap(value.override_camera_block);
	byteswap(value.abilities_block);
	byteswap(value.hud_screen_reference);
	byteswap(value.ui_display_info_block);
	byteswap(value.pickup_sound);
	byteswap(value.energy_charged_effect);
	byteswap(value.unable_to_activate_sound);
	byteswap(value.player_sound_bank);
	byteswap(value.sound_rtpcs_block);
	byteswap(value.sound_sweeteners_block);
	byteswap(value.object_functions_exposed_to_unit_block);
}

