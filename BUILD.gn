import("//toolchain/bcs_projects.gni")

bcs_source_set("all_build") {
  deps = [
    "framework/platform",
    "framework/templatelibrary",
    "framework/devicecommunication",
    "contentframework/audioconversion",
    "thirdparty/imgui",
  ]
}

bcs_executable("bcs_executable") {
  sources = [
    "bcs/bcs_executable.cpp",
    "bcs/bcs.h"
  ]

  deps = [
    "framework/platform:platform",
    "framework/platform:platform_entry_point",
    ":bcs_shared",
    ":bcs_static",
  ]
}

bcs_library("bcs_shared")
{
  sources = [
    "bcs/bcs_shared.cpp",
    "bcs/bcs.h"
  ]
}

bcs_static_library("bcs_static")
{
  sources = [
    "bcs/bcs_static.cpp",
    "bcs/bcs.h"
  ]
}

bcs_shared_library("bcs_python")
{
  sources = [
    "bcs/bcs_python.cpp",
    "bcs/bcs.h"
  ]
}

bcs_executable("wasm_test")
{
  sources = [
    "bcs/wasm_test.cpp",
    "bcs/bcs.h"
  ]
}

bcs_python("mandrill_python_stub")
{
  inputs = [
    "bcs/mandrill.py",
    "bcs/main.py"
  ]

  deps = [
    ":bcs_python",
  ]
}

action("execute_python_test")
{
  script = "//toolchain/testscript.py"
  sources = [ "//toolchain/testscript.py" ]
  outputs = [ "$target_gen_dir/output.txt" ]
  #args = [ "--output", rebase_path(target_gen_dir, root_build_dir) ] + rebase_path(sources, root_build_dir)
  args = [ "--outputs" ] + rebase_path(outputs, root_build_dir) + [ "--sources" ] + rebase_path(sources, root_build_dir)
}
